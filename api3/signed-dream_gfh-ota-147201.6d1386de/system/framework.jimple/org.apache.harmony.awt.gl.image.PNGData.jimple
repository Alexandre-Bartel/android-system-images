class org.apache.harmony.awt.gl.image.PNGData extends java.lang.Object
{
    private org.apache.harmony.awt.gl.image.PNGChunk[] mChunks;
    private int mNumberOfChunks;

    public void <init>()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk[] $r1;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.image.PNGData: int mNumberOfChunks> = 0;

        $r1 = newarray (org.apache.harmony.awt.gl.image.PNGChunk)[10];

        $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks> = $r1;

        return;
    }

    public void add(org.apache.harmony.awt.gl.image.PNGChunk)
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        org.apache.harmony.awt.gl.image.PNGChunk[] $r2, $r3, $r4;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 := @parameter0: org.apache.harmony.awt.gl.image.PNGChunk;

        $r2 = $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks>;

        $i1 = $r0.<org.apache.harmony.awt.gl.image.PNGData: int mNumberOfChunks>;

        $i0 = $i1 + 1;

        $r0.<org.apache.harmony.awt.gl.image.PNGData: int mNumberOfChunks> = $i0;

        $r2[$i1] = $r1;

        $i0 = $r0.<org.apache.harmony.awt.gl.image.PNGData: int mNumberOfChunks>;

        $r2 = $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks>;

        $i1 = lengthof $r2;

        if $i0 < $i1 goto label1;

        $r2 = $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks>;

        $i0 = lengthof $r2;

        $i0 = $i0 + 10;

        $r2 = newarray (org.apache.harmony.awt.gl.image.PNGChunk)[$i0];

        $r3 = $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks>;

        $r4 = $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i0);

        $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks> = $r2;

        return;

     label1:
        return;
    }

    public short getBitsPerPixel()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        short $s0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: short getUnsignedByte(int)>(8);

        return $s0;
    }

    public org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        java.lang.String $r1, $r4;
        int $i0, $i1;
        org.apache.harmony.awt.gl.image.PNGChunk[] $r2;
        org.apache.harmony.awt.gl.image.PNGChunk $r3;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = $r0.<org.apache.harmony.awt.gl.image.PNGData: int mNumberOfChunks>;

        if $i0 >= $i1 goto label3;

        $r2 = $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks>;

        $r3 = $r2[$i0];

        $r4 = virtualinvoke $r3.<org.apache.harmony.awt.gl.image.PNGChunk: java.lang.String getTypeString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r2 = $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks>;

        $r3 = $r2[$i0];

        return $r3;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return null;
    }

    public java.awt.image.ColorModel getColorModel()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        int $i0;
        short $s1, $s2;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        byte[] $r2;
        java.awt.image.IndexColorModel $r3;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $s1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: short getColorType()>();

        $s2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: short getBitsPerPixel()>();

        if $s1 != 3 goto label1;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)>("PLTE");

        $r2 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: byte[] getData()>();

        $i0 = lengthof $r2;

        $i0 = $i0 / 3;

        $r3 = new java.awt.image.IndexColorModel;

        specialinvoke $r3.<java.awt.image.IndexColorModel: void <init>(int,int,byte[],int,boolean)>($s2, $i0, $r2, 0, 0);

        return $r3;

     label1:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported color type: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return null;
    }

    public short getColorType()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        short $s0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: short getUnsignedByte(int)>(9);

        return $s0;
    }

    public short getCompression()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        short $s0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: short getUnsignedByte(int)>(10);

        return $s0;
    }

    public short getFilter()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        short $s0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: short getUnsignedByte(int)>(11);

        return $s0;
    }

    public long getHeight()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        long $l0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)>("IHDR");

        $l0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: long getUnsignedInt(int)>(4);

        return $l0;
    }

    public byte[] getImageData()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        java.util.zip.InflaterInputStream $r2;
        java.io.ByteArrayOutputStream $r3;
        int $i0, $i1, $i5, $i6, $i7;
        org.apache.harmony.awt.gl.image.PNGChunk[] $r4;
        java.lang.String $r5;
        boolean $z0;
        byte[] $r6, $r9;
        java.io.ByteArrayInputStream $r7;
        java.io.IOException $r8;
        long $l2;
        short $s3, $s4;
        byte $b8;
        java.io.PrintStream $r10;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r3 = new java.io.ByteArrayOutputStream;

     label01:
        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label02:
        $i1 = 0;

     label03:
        $i0 = $r0.<org.apache.harmony.awt.gl.image.PNGData: int mNumberOfChunks>;

     label04:
        if $i1 >= $i0 goto label08;

     label05:
        $r4 = $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk[] mChunks>;

     label06:
        $r1 = $r4[$i1];

        $r5 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: java.lang.String getTypeString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("IDAT");

        if $z0 == 0 goto label07;

        $r6 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: byte[] getData()>();

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r6);

     label07:
        $i1 = $i1 + 1;

        goto label03;

     label08:
        virtualinvoke $r3.<java.io.OutputStream: void flush()>();

     label09:
        $r2 = new java.util.zip.InflaterInputStream;

     label10:
        $r7 = new java.io.ByteArrayInputStream;

        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6);

        specialinvoke $r2.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream)>($r7);

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r6 = newarray (byte)[8192];

     label11:
        $i1 = virtualinvoke $r2.<java.io.FilterInputStream: int read(byte[])>($r6);

        if $i1 == -1 goto label13;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r6, 0, $i1);

        goto label11;

     label12:
        $r8 := @caughtexception;

        return null;

     label13:
        virtualinvoke $r3.<java.io.OutputStream: void flush()>();

        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $l2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: long getWidth()>();

        $i1 = (int) $l2;

        $l2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: long getHeight()>();

        $i0 = (int) $l2;

        $s3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: short getBitsPerPixel()>();

     label14:
        $i0 = $i1 * $i0;

        $i0 = $i0 * $s3;

        $i0 = $i0 / 8;

     label15:
        $r9 = newarray (byte)[$i0];

        $s4 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: short getInterlace()>();

     label16:
        if $s4 != 0 goto label19;

        $i5 = 0;

        $i6 = 0;

     label17:
        if $i6 >= $i0 goto label20;

        $i7 = $i6 * 8;

        $i7 = $i7 / $s3;

        $i7 = $i7 % $i1;

        if $i7 != 0 goto label21;

        $i7 = $i5 + 1;

     label18:
        $i5 = $i7 + 1;

        $b8 = $r6[$i7];

        $r9[$i6] = $b8;

        $i6 = $i6 + 1;

        goto label17;

     label19:
        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("Couldn\'t undo interlacing.");

     label20:
        return $r9;

     label21:
        $i7 = $i5;

        goto label18;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label04 to label05 with label12;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label08 to label09 with label12;
        catch java.io.IOException from label10 to label12 with label12;
        catch java.io.IOException from label13 to label14 with label12;
        catch java.io.IOException from label15 to label16 with label12;
        catch java.io.IOException from label19 to label20 with label12;
    }

    public short getInterlace()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        short $s0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)>("IHDR");

        $s0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: short getUnsignedByte(int)>(12);

        return $s0;
    }

    public java.awt.image.WritableRaster getRaster()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        java.awt.image.DataBufferByte $r1;
        int $i0, $i1, $i5, $i6, $i7;
        long $l2;
        short $s3, $s4;
        byte[] $r2;
        java.awt.image.WritableRaster $r3;
        java.io.PrintStream $r4;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $l2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: long getWidth()>();

        $i1 = (int) $l2;

        $l2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: long getHeight()>();

        $i0 = (int) $l2;

        $s3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: short getBitsPerPixel()>();

        $s4 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: short getColorType()>();

        if $s4 != 3 goto label1;

        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: byte[] getImageData()>();

        $i5 = lengthof $r2;

        $i6 = $i1 - 1;

        $i7 = $i0 - 1;

        $i6 = $i6 * $i7;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i6);

        $r1 = new java.awt.image.DataBufferByte;

        specialinvoke $r1.<java.awt.image.DataBufferByte: void <init>(byte[],int)>($r2, $i5);

        $r3 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createPackedRaster(java.awt.image.DataBuffer,int,int,int,java.awt.Point)>($r1, $i1, $i0, $s3, null);

        return $r3;

     label1:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Unsupported color type!");

        return null;
    }

    public long getWidth()
    {
        org.apache.harmony.awt.gl.image.PNGData $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        long $l0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PNGData;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.image.PNGData: org.apache.harmony.awt.gl.image.PNGChunk getChunk(java.lang.String)>("IHDR");

        $l0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: long getUnsignedInt(int)>(0);

        return $l0;
    }
}
