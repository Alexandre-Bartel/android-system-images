public class android.util.EventLogTest extends junit.framework.TestCase
{
    private static final int TEST_TAG;

    public void <init>()
    {
        android.util.EventLogTest $r0;

        $r0 := @this: android.util.EventLogTest;

        specialinvoke $r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    void assertIntInByteArrayEquals(int, byte[], int)
    {
        android.util.EventLogTest $r0;
        int $i0, $i1;
        byte[] $r1;
        java.nio.ByteBuffer $r2;
        java.nio.ByteOrder $r3;

        $r0 := @this: android.util.EventLogTest;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt(int)>($i1);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>($i0, $i1);

        return;
    }

    void assertLongInByteArrayEquals(long, byte[], int)
    {
        android.util.EventLogTest $r0;
        long $l0, $l2;
        byte[] $r1;
        int $i1;
        java.nio.ByteBuffer $r2;
        java.nio.ByteOrder $r3;

        $r0 := @this: android.util.EventLogTest;

        $l0 := @parameter0: long;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1);

        $r3 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r2 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $l2 = virtualinvoke $r2.<java.nio.ByteBuffer: long getLong(int)>($i1);

        staticinvoke <junit.framework.Assert: void assertEquals(long,long)>($l0, $l2);

        return;
    }

    void assertStringInByteArrayEquals(java.lang.String, byte[], int)
    {
        android.util.EventLogTest $r0;
        java.lang.String $r1;
        byte[] $r2, $r3;
        byte $b0, $b5;
        int $i1, $i2, $i3;
        boolean $z0;

        $r0 := @this: android.util.EventLogTest;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        $i2 := @parameter2: int;

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        $i1 = lengthof $r3;

        $i3 = lengthof $r2;

        $i3 = $i3 - $i2;

        if $i1 > $i3 goto label3;

        $z0 = 1;

     label1:
        staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0);

        $i1 = lengthof $r3;

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label4;

        $b0 = $r3[$i3];

        $b5 = $r2[$i2];

        staticinvoke <junit.framework.Assert: void assertEquals(byte,byte)>($b0, $b5);

        $i3 = $i3 + 1;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        return;
    }

    public void testIllegalListTypesThrowException() throws java.lang.Exception
    {
        android.util.EventLogTest $r0;
        java.lang.Byte $r1;
        android.util.EventLog$List $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5, $r6;

        $r0 := @this: android.util.EventLogTest;

        $r2 = new android.util.EventLog$List;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.Object;

     label1:
        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r3[0] = $r4;

        specialinvoke $r2.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r3);

        staticinvoke <android.util.EventLog: int writeEvent(int,android.util.EventLog$List)>(42, $r2);

        staticinvoke <android.util.EventLogTest: void fail(java.lang.String)>("Can\'t create List with any old Object");

     label2:
        $r2 = new android.util.EventLog$List;

        $r3 = newarray (java.lang.Object)[1];

     label3:
        $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1);

        $r3[0] = $r1;

        specialinvoke $r2.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r3);

        staticinvoke <android.util.EventLog: int writeEvent(int,android.util.EventLog$List)>(42, $r2);

        staticinvoke <android.util.EventLogTest: void fail(java.lang.String)>("Can\'t create List with any old byte");

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        return;

     label6:
        $r6 := @caughtexception;

        goto label2;

        catch java.lang.IllegalArgumentException from label1 to label2 with label6;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    public static void <clinit>()
    {
        <android.util.EventLogTest: int TEST_TAG> = 42;

        return;
    }
}
