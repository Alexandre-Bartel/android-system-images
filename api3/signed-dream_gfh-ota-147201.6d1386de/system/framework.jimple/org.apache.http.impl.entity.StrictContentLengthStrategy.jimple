public class org.apache.http.impl.entity.StrictContentLengthStrategy extends java.lang.Object implements org.apache.http.entity.ContentLengthStrategy
{

    public void <init>()
    {
        org.apache.http.impl.entity.StrictContentLengthStrategy $r0;

        $r0 := @this: org.apache.http.impl.entity.StrictContentLengthStrategy;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public long determineLength(org.apache.http.HttpMessage) throws org.apache.http.HttpException
    {
        org.apache.http.impl.entity.StrictContentLengthStrategy $r0;
        org.apache.http.HttpMessage $r1;
        java.lang.NumberFormatException $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.Header $r4, $r5;
        java.lang.String $r6, $r7;
        boolean $z0;
        org.apache.http.ProtocolVersion $r8;
        org.apache.http.HttpVersion $r9;
        org.apache.http.ProtocolException $r10;
        java.lang.StringBuilder $r11;
        long $l0;

        $r0 := @this: org.apache.http.impl.entity.StrictContentLengthStrategy;

        $r1 := @parameter0: org.apache.http.HttpMessage;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP message may not be null");

        throw $r3;

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Transfer-Encoding");

        $r5 = interfaceinvoke $r1.<org.apache.http.HttpMessage: org.apache.http.Header getFirstHeader(java.lang.String)>("Content-Length");

        if $r4 == null goto label5;

        $r6 = interfaceinvoke $r4.<org.apache.http.Header: java.lang.String getValue()>();

        $r7 = "chunked";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r1.<org.apache.http.HttpMessage: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r9 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $z0 = virtualinvoke $r8.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r9);

        if $z0 == 0 goto label2;

        $r10 = new org.apache.http.ProtocolException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Chunked transfer encoding not allowed for ");

        $r8 = interfaceinvoke $r1.<org.apache.http.HttpMessage: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r6);

        throw $r10;

     label2:
        return -2L;

     label3:
        $r7 = "identity";

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label4;

        return -1L;

     label4:
        $r10 = new org.apache.http.ProtocolException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported transfer encoding: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r6);

        throw $r10;

     label5:
        if $r5 == null goto label9;

        $r6 = interfaceinvoke $r5.<org.apache.http.Header: java.lang.String getValue()>();

     label6:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r6);

     label7:
        return $l0;

     label8:
        $r2 := @caughtexception;

        $r10 = new org.apache.http.ProtocolException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid content length: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r6);

        throw $r10;

     label9:
        return -1L;

        catch java.lang.NumberFormatException from label6 to label7 with label8;
    }
}
