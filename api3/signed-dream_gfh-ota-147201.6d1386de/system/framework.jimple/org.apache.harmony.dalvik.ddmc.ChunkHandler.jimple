public abstract class org.apache.harmony.dalvik.ddmc.ChunkHandler extends java.lang.Object
{
    public static final int CHUNK_FAIL;
    public static final java.nio.ByteOrder CHUNK_ORDER;

    static void <clinit>()
    {
        int $i0;
        java.nio.ByteOrder $r0;

        $r0 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER> = $r0;

        $i0 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: int type(java.lang.String)>("FAIL");

        <org.apache.harmony.dalvik.ddmc.ChunkHandler: int CHUNK_FAIL> = $i0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.dalvik.ddmc.ChunkHandler $r0;

        $r0 := @this: org.apache.harmony.dalvik.ddmc.ChunkHandler;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int, java.lang.String)
    {
        int $i0, $i1;
        java.lang.String $r0;
        java.nio.ByteBuffer $r1;
        java.nio.ByteOrder $r2;
        org.apache.harmony.dalvik.ddmc.Chunk $r3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r0 = "";

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = $i1 * 2;

        $i1 = $i1 + 8;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        $r2 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: void putString(java.nio.ByteBuffer,java.lang.String)>($r1, $r0);

        $r3 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i0 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: int CHUNK_FAIL>;

        specialinvoke $r3.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i0, $r1);

        return $r3;
    }

    public static java.lang.String getString(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer $r0;
        int $i0, $i2;
        char[] $r1;
        char $c1;
        java.lang.String $r2;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $i0 := @parameter1: int;

        $r1 = newarray (char)[$i0];

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $c1 = virtualinvoke $r0.<java.nio.ByteBuffer: char getChar()>();

        $r1[$i2] = $c1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1);

        return $r2;
    }

    public static java.lang.String name(int)
    {
        int $i0, $i1;
        char[] $r0;
        char $c2;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $r0 = newarray (char)[4];

        $i1 = $i0 >> 24;

        $i1 = $i1 & 255;

        $c2 = (char) $i1;

        $r0[0] = $c2;

        $i1 = $i0 >> 16;

        $i1 = $i1 & 255;

        $c2 = (char) $i1;

        $r0[1] = $c2;

        $i1 = $i0 >> 8;

        $i1 = $i1 & 255;

        $c2 = (char) $i1;

        $r0[2] = $c2;

        $i0 = $i0 & 255;

        $c2 = (char) $i0;

        $r0[3] = $c2;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r0);

        return $r1;
    }

    public static void putString(java.nio.ByteBuffer, java.lang.String)
    {
        java.nio.ByteBuffer $r0;
        java.lang.String $r1;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.nio.ByteBuffer;

        $r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putChar(char)>($c2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static int type(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1;
        java.lang.RuntimeException $r1;
        char $c2;
        byte $b3;

        $r0 := @parameter0: java.lang.String;

        $i0 = 0;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 == 4 goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>()>();

        throw $r1;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= 4 goto label3;

        $i0 = $i0 << 8;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $b3 = (byte) $c2;

        $i0 = $i0 | $b3;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return $i0;
    }

    public static java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        org.apache.harmony.dalvik.ddmc.Chunk $r0;
        int $i0, $i1;
        java.nio.ByteBuffer $r1;
        byte[] $r2;
        java.nio.ByteOrder $r3;

        $r0 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $r2 = $r0.<org.apache.harmony.dalvik.ddmc.Chunk: byte[] data>;

        $i0 = $r0.<org.apache.harmony.dalvik.ddmc.Chunk: int offset>;

        $i1 = $r0.<org.apache.harmony.dalvik.ddmc.Chunk: int length>;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r2, $i0, $i1);

        $r3 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        return $r1;
    }

    public abstract void connected();

    public abstract void disconnected();

    public abstract org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk);
}
