public class org.apache.harmony.awt.gl.MultiRectArea extends java.lang.Object implements java.awt.Shape
{
    private static final boolean CHECK;
    java.awt.Rectangle bounds;
    public int[] rect;
    java.awt.Rectangle[] rectangles;
    boolean sorted;

    public void <init>()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int[] $r1;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: boolean sorted> = 1;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.MultiRectAreaOp: int[] createBuf(int)>(0);

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect> = $r1;

        return;
    }

    public void <init>(int, int, int, int)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: boolean sorted> = 1;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.MultiRectAreaOp: int[] createBuf(int)>(0);

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect> = $r1;

        if $i2 < $i0 goto label1;

        if $i3 < $i1 goto label1;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r1[0] = 5;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r1[1] = $i0;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r1[2] = $i1;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r1[3] = $i2;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r1[4] = $i3;

     label1:
        staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea check(org.apache.harmony.awt.gl.MultiRectArea,java.lang.String)>($r0, "MultiRectArea(Rectangle)");

        return;
    }

    public void <init>(java.awt.Rectangle)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.awt.Rectangle $r1;
        int[] $r2;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.Rectangle;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: boolean sorted> = 1;

        $r2 = staticinvoke <org.apache.harmony.awt.gl.MultiRectAreaOp: int[] createBuf(int)>(0);

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect> = $r2;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.awt.Rectangle: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r2[0] = 5;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r1.<java.awt.Rectangle: int x>;

        $r2[1] = $i0;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r1.<java.awt.Rectangle: int y>;

        $r2[2] = $i0;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r1.<java.awt.Rectangle: int x>;

        $i1 = $r1.<java.awt.Rectangle: int width>;

        $i0 = $i0 + $i1;

        $i0 = $i0 - 1;

        $r2[3] = $i0;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r1.<java.awt.Rectangle: int y>;

        $i1 = $r1.<java.awt.Rectangle: int height>;

        $i0 = $i0 + $i1;

        $i0 = $i0 - 1;

        $r2[4] = $i0;

     label1:
        staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea check(org.apache.harmony.awt.gl.MultiRectArea,java.lang.String)>($r0, "MultiRectArea(Rectangle)");

        return;
    }

    public void <init>(java.util.ArrayList)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.util.ArrayList $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        java.awt.Rectangle $r3;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.util.ArrayList;

        specialinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label2;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (java.awt.Rectangle) $r2;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void add(java.awt.Rectangle)>($r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r1;
        int[] $r2, $r3, $r4;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: boolean sorted> = 1;

        if $r1 != null goto label1;

        $r2 = staticinvoke <org.apache.harmony.awt.gl.MultiRectAreaOp: int[] createBuf(int)>(0);

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect> = $r2;

        return;

     label1:
        $r2 = $r1.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = lengthof $r2;

        $r2 = newarray (int)[$i0];

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect> = $r2;

        $r3 = $r1.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r4 = $r1.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r2, 0, $i0);

        staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea check(org.apache.harmony.awt.gl.MultiRectArea,java.lang.String)>($r0, "MultiRectArea(MRA)");

        return;
    }

    public void <init>(boolean)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: boolean sorted> = $z0;

        return;
    }

    public void <init>(java.awt.Rectangle[])
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.awt.Rectangle[] $r1;
        java.awt.Rectangle $r2;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.Rectangle[];

        specialinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void <init>()>();

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void add(java.awt.Rectangle)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    static org.apache.harmony.awt.gl.MultiRectArea check(org.apache.harmony.awt.gl.MultiRectArea, java.lang.String)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.lang.String $r1;

        $r0 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter1: java.lang.String;

        return $r0;
    }

    public static int checkValidation(java.awt.Rectangle[], boolean)
    {
        java.awt.Rectangle[] $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        java.awt.Rectangle $r1, $r2;

        $r0 := @parameter0: java.awt.Rectangle[];

        $z0 := @parameter1: boolean;

        $i0 = 0;

     label01:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label04;

        $r1 = $r0[$i0];

        $i1 = $r1.<java.awt.Rectangle: int width>;

        if $i1 <= 0 goto label02;

        $r1 = $r0[$i0];

        $i1 = $r1.<java.awt.Rectangle: int height>;

        if $i1 > 0 goto label03;

     label02:
        return $i0;

     label03:
        $i0 = $i0 + 1;

        goto label01;

     label04:
        if $z0 == 0 goto label08;

        $i0 = 1;

     label05:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label08;

        $i1 = $i0 - 1;

        $r1 = $r0[$i1];

        $i1 = $r1.<java.awt.Rectangle: int y>;

        $r1 = $r0[$i0];

        $i2 = $r1.<java.awt.Rectangle: int y>;

        if $i1 <= $i2 goto label06;

        return $i0;

     label06:
        $i1 = $i0 - 1;

        $r1 = $r0[$i1];

        $i1 = $r1.<java.awt.Rectangle: int y>;

        $r1 = $r0[$i0];

        $i2 = $r1.<java.awt.Rectangle: int y>;

        if $i1 != $i2 goto label07;

        $i1 = $i0 - 1;

        $r1 = $r0[$i1];

        $i1 = $r1.<java.awt.Rectangle: int x>;

        $r1 = $r0[$i0];

        $i2 = $r1.<java.awt.Rectangle: int x>;

        if $i1 <= $i2 goto label07;

        return $i0;

     label07:
        $i0 = $i0 + 1;

        goto label05;

     label08:
        $i0 = 0;

     label09:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label13;

        $i1 = $i0 + 1;

     label10:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label12;

        $r1 = $r0[$i0];

        $r2 = $r0[$i1];

        $z0 = virtualinvoke $r1.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r2);

        if $z0 == 0 goto label11;

        return $i0;

     label11:
        $i1 = $i1 + 1;

        goto label10;

     label12:
        $i0 = $i0 + 1;

        goto label09;

     label13:
        return -1;
    }

    public static org.apache.harmony.awt.gl.MultiRectArea intersect(org.apache.harmony.awt.gl.MultiRectArea, org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r1;

        $r0 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter1: org.apache.harmony.awt.gl.MultiRectArea;

        $r0 = staticinvoke <org.apache.harmony.awt.gl.MultiRectAreaOp$Intersection: org.apache.harmony.awt.gl.MultiRectArea getResult(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r1);

        $r0 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea check(org.apache.harmony.awt.gl.MultiRectArea,java.lang.String)>($r0, "intersect(MRA,MRA)");

        return $r0;
    }

    public static void print(org.apache.harmony.awt.gl.MultiRectArea, java.lang.String)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.lang.String $r1;
        java.awt.Rectangle $r2;
        int $i0, $i1, $i2, $i3;
        java.io.PrintStream $r3;
        java.lang.StringBuilder $r4;
        java.awt.Rectangle[] $r5;

        $r0 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;

     label1:
        $r5 = virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] getRectangles()>();

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $i0 = lengthof $r5;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $i0 = lengthof $r5;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r2 = $r5[$i1];

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $i2 = $r2.<java.awt.Rectangle: int x>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i2 = $r2.<java.awt.Rectangle: int y>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i2 = $r2.<java.awt.Rectangle: int x>;

        $i3 = $r2.<java.awt.Rectangle: int width>;

        $i2 = $i2 + $i3;

        $i2 = $i2 - 1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i2 = $r2.<java.awt.Rectangle: int y>;

        $i3 = $r2.<java.awt.Rectangle: int height>;

        $i2 = $i2 + $i3;

        $i2 = $i2 - 1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r1);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return;
    }

    public static org.apache.harmony.awt.gl.MultiRectArea subtract(org.apache.harmony.awt.gl.MultiRectArea, org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r1;

        $r0 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter1: org.apache.harmony.awt.gl.MultiRectArea;

        $r0 = staticinvoke <org.apache.harmony.awt.gl.MultiRectAreaOp$Subtraction: org.apache.harmony.awt.gl.MultiRectArea getResult(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r1);

        $r0 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea check(org.apache.harmony.awt.gl.MultiRectArea,java.lang.String)>($r0, "subtract(MRA,MRA)");

        return $r0;
    }

    public static org.apache.harmony.awt.gl.MultiRectArea union(org.apache.harmony.awt.gl.MultiRectArea, org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r1;
        org.apache.harmony.awt.gl.MultiRectAreaOp$Union $r2;

        $r0 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter1: org.apache.harmony.awt.gl.MultiRectArea;

        $r2 = new org.apache.harmony.awt.gl.MultiRectAreaOp$Union;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectAreaOp$Union: void <init>()>();

        $r0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.MultiRectAreaOp$Union: org.apache.harmony.awt.gl.MultiRectArea getResult(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r1);

        $r0 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea check(org.apache.harmony.awt.gl.MultiRectArea,java.lang.String)>($r0, "union(MRA,MRA)");

        return $r0;
    }

    public void add(java.awt.Rectangle)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r2;
        java.awt.Rectangle $r1;
        int[] $r3;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.Rectangle;

        $r2 = new org.apache.harmony.awt.gl.MultiRectArea;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(java.awt.Rectangle)>($r1);

        $r2 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea union(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r2);

        $r3 = $r2.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void setRect(int[],boolean)>($r3, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void invalidate()>();

        return;
    }

    public void add(org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r1;
        int[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea union(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r1);

        $r2 = $r1.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void setRect(int[],boolean)>($r2, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void invalidate()>();

        return;
    }

    public void addRect(int, int, int, int)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i4 = $r1[0];

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.MultiRectAreaOp: int[] checkBufSize(int[],int)>($r1, 4);

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect> = $r1;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i5 = $i4 + 1;

        $r1[$i4] = $i0;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $i5 + 1;

        $r1[$i5] = $i1;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $i0 + 1;

        $r1[$i0] = $i2;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r1[$i1] = $i3;

        return;
    }

    public boolean contains(double, double)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        double $d0, $d1, $d2;
        int $i0, $i1;
        int[] $r1;
        byte $b2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 = 1;

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $r1[0];

        if $i0 >= $i1 goto label3;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $r1[$i0];

        $d2 = (double) $i1;

        $b2 = $d2 cmpg $d0;

        if $b2 > 0 goto label2;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $i0 + 2;

        $i1 = $r1[$i1];

        $d2 = (double) $i1;

        $b2 = $d0 cmpg $d2;

        if $b2 > 0 goto label2;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $i0 + 1;

        $i1 = $r1[$i1];

        $d2 = (double) $i1;

        $b2 = $d2 cmpg $d1;

        if $b2 > 0 goto label2;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $i0 + 3;

        $i1 = $r1[$i1];

        $d2 = (double) $i1;

        $b2 = $d1 cmpg $d2;

        if $b2 > 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 4;

        goto label1;

     label3:
        return 0;
    }

    public boolean contains(double, double, double, double)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        double $d0, $d1, $d2, $d3;
        java.lang.RuntimeException $r1;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented");

        throw $r1;
    }

    public boolean contains(java.awt.geom.Point2D)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.awt.geom.Point2D $r1;
        double $d0, $d1;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.geom.Point2D;

        $d0 = virtualinvoke $r1.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke $r1.<java.awt.geom.Point2D: double getY()>();

        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: boolean contains(double,double)>($d0, $d1);

        return $z0;
    }

    public boolean contains(java.awt.geom.Rectangle2D)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.awt.geom.Rectangle2D $r1;
        java.lang.RuntimeException $r2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.geom.Rectangle2D;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented");

        throw $r2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r2;
        java.lang.Object $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        int[] $r3;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.harmony.awt.gl.MultiRectArea;

        if $z0 == 0 goto label5;

        $r2 = (org.apache.harmony.awt.gl.MultiRectArea) $r1;

        $i0 = 0;

     label2:
        $r3 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $r3[0];

        if $i0 >= $i1 goto label4;

        $r3 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $r3[$i0];

        $r3 = $r2.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $r3[$i0];

        if $i1 == $i2 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

    public java.awt.Rectangle getBounds()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        java.awt.Rectangle $r1;
        int[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle bounds>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle bounds>;

        return $r1;

     label1:
        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle bounds> = $r1;

        return $r1;

     label2:
        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i4 = $r2[1];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i5 = $r2[2];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i6 = $r2[3];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i7 = $r2[4];

        $i8 = 5;

     label3:
        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r2[0];

        if $i8 >= $i0 goto label8;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $i8 + 0;

        $i0 = $r2[$i0];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i8 + 1;

        $i2 = $r2[$i2];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $i8 + 2;

        $i1 = $r2[$i1];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i3 = $i8 + 3;

        $i3 = $r2[$i3];

        if $i0 >= $i4 goto label4;

        $i4 = $i0;

     label4:
        if $i1 <= $i6 goto label5;

        $i6 = $i1;

     label5:
        if $i2 >= $i5 goto label6;

        $i5 = $i2;

     label6:
        if $i3 <= $i7 goto label7;

        $i7 = $i3;

     label7:
        $i8 = $i8 + 4;

        goto label3;

     label8:
        $r1 = new java.awt.Rectangle;

        $i6 = $i6 - $i4;

        $i6 = $i6 + 1;

        $i7 = $i7 - $i5;

        $i7 = $i7 + 1;

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>($i4, $i5, $i6, $i7);

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle bounds> = $r1;

        return $r1;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.awt.Rectangle $r1;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle getBounds()>();

        return $r1;
    }

    public java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.awt.geom.AffineTransform $r1;
        org.apache.harmony.awt.gl.MultiRectArea$Iterator $r2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = new org.apache.harmony.awt.gl.MultiRectArea$Iterator;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea$Iterator: void <init>(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea,java.awt.geom.AffineTransform)>($r0, $r0, $r1);

        return $r2;
    }

    public java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform, double)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.awt.geom.AffineTransform $r1;
        double $d0;
        org.apache.harmony.awt.gl.MultiRectArea$Iterator $r2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.geom.AffineTransform;

        $d0 := @parameter1: double;

        $r2 = new org.apache.harmony.awt.gl.MultiRectArea$Iterator;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea$Iterator: void <init>(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea,java.awt.geom.AffineTransform)>($r0, $r0, $r1);

        return $r2;
    }

    public int getRectCount()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int[] $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r1[0];

        $i0 = $i0 - 1;

        $i0 = $i0 / 4;

        return $i0;
    }

    public java.awt.Rectangle[] getRectangles()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.awt.Rectangle[] $r1;
        int[] $r2;
        java.awt.Rectangle $r3;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] rectangles>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] rectangles>;

        return $r1;

     label1:
        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $r2[0];

        $i2 = $i2 - 1;

        $i2 = $i2 / 4;

        $r1 = newarray (java.awt.Rectangle)[$i2];

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] rectangles> = $r1;

        $i2 = 0;

        $i3 = 1;

     label2:
        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r2[0];

        if $i3 >= $i0 goto label3;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] rectangles>;

        $r3 = new java.awt.Rectangle;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i4 = $r2[$i3];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i5 = $i3 + 1;

        $i5 = $r2[$i5];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i6 = $i3 + 2;

        $i6 = $r2[$i6];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i7 = $r2[$i3];

        $i6 = $i6 - $i7;

        $i6 = $i6 + 1;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i7 = $i3 + 3;

        $i7 = $r2[$i7];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $i3 + 1;

        $i1 = $r2[$i1];

        $i7 = $i7 - $i1;

        $i7 = $i7 + 1;

        specialinvoke $r3.<java.awt.Rectangle: void <init>(int,int,int,int)>($i4, $i5, $i6, $i7);

        $r1[$i2] = $r3;

        $i3 = $i3 + 4;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] rectangles>;

        return $r1;
    }

    public void intersect(java.awt.Rectangle)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r2;
        java.awt.Rectangle $r1;
        int[] $r3;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.Rectangle;

        $r2 = new org.apache.harmony.awt.gl.MultiRectArea;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(java.awt.Rectangle)>($r1);

        $r2 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea intersect(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r2);

        $r3 = $r2.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void setRect(int[],boolean)>($r3, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void invalidate()>();

        return;
    }

    public void intersect(org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r1;
        int[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea intersect(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r1);

        $r2 = $r1.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void setRect(int[],boolean)>($r2, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void invalidate()>();

        return;
    }

    public boolean intersects(double, double, double, double)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        double $d0, $d1, $d2, $d3;
        java.awt.Rectangle $r1;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $d3 := @parameter3: double;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>()>();

        virtualinvoke $r1.<java.awt.Rectangle: void setRect(double,double,double,double)>($d0, $d1, $d2, $d3);

        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: boolean intersects(java.awt.geom.Rectangle2D)>($r1);

        return $z0;
    }

    public boolean intersects(java.awt.geom.Rectangle2D)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.awt.geom.Rectangle2D $r1;
        double $d0, $d1, $d2, $d3;
        int $i0, $i1, $i2;
        boolean $z0;
        int[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.geom.Rectangle2D;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        return 0;

     label2:
        $i1 = 1;

     label3:
        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $r2[0];

        if $i1 >= $i2 goto label5;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $r2[$i1];

        $d0 = (double) $i2;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i1 + 1;

        $i2 = $r2[$i2];

        $d1 = (double) $i2;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i1 + 2;

        $i2 = $r2[$i2];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r2[$i1];

        $i2 = $i2 - $i0;

        $i2 = $i2 + 1;

        $d2 = (double) $i2;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i1 + 3;

        $i2 = $r2[$i2];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $i1 + 1;

        $i0 = $r2[$i0];

        $i2 = $i2 - $i0;

        $i2 = $i2 + 1;

        $d3 = (double) $i2;

        $z0 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: boolean intersects(double,double,double,double)>($d0, $d1, $d2, $d3);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        $i1 = $i1 + 4;

        goto label3;

     label5:
        return 0;
    }

    void invalidate()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle bounds> = null;

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] rectangles> = null;

        return;
    }

    public boolean isEmpty()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int[] $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r1[0];

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    void resort()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int[] $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = newarray (int)[4];

        $i2 = 1;

     label1:
        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i3 = $r2[0];

        if $i2 >= $i3 goto label7;

        $i3 = $i2;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i4 = $r2[$i2];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i5 = $i2 + 1;

        $i5 = $r2[$i5];

        $i6 = $i2 + 4;

     label2:
        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r2[0];

        if $i6 >= $i0 goto label5;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r2[$i6];

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i1 = $i6 + 1;

        $i1 = $r2[$i1];

        if $i5 > $i1 goto label3;

        if $i5 != $i1 goto label4;

        if $i4 <= $i0 goto label4;

     label3:
        $i4 = $i0;

        $i5 = $i1;

        $i3 = $i6;

     label4:
        $i6 = $i6 + 4;

        goto label2;

     label5:
        if $i3 == $i2 goto label6;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i2, $r1, 0, 4);

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $r3 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i3, $r3, $i2, 4);

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i3, 4);

     label6:
        $i2 = $i2 + 4;

        goto label1;

     label7:
        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void invalidate()>();

        return;
    }

    protected void setRect(int[], boolean)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int[] $r1, $r2;
        boolean $z0;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: int[];

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label2;

        $i0 = lengthof $r1;

        $r2 = newarray (int)[$i0];

        $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect> = $r2;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

     label1:
        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void invalidate()>();

        return;

     label2:
        $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect> = $r1;

        goto label1;
    }

    public void substract(java.awt.Rectangle)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r2;
        java.awt.Rectangle $r1;
        int[] $r3;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: java.awt.Rectangle;

        $r2 = new org.apache.harmony.awt.gl.MultiRectArea;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(java.awt.Rectangle)>($r1);

        $r2 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea subtract(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r2);

        $r3 = $r2.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void setRect(int[],boolean)>($r3, 0);

        return;
    }

    public void substract(org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0, $r1;
        int[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.MultiRectArea: org.apache.harmony.awt.gl.MultiRectArea subtract(org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.MultiRectArea)>($r0, $r1);

        $r2 = $r1.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void setRect(int[],boolean)>($r2, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: void invalidate()>();

        return;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        java.lang.StringBuffer $r1, $r4;
        int $i0, $i1, $i2;
        java.lang.Class $r2;
        java.lang.String $r3;
        int[] $r5;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $i1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.MultiRectArea: int getRectCount()>();

        $r1 = new java.lang.StringBuffer;

        $i1 = $i1 << 5;

        $i1 = $i1 + 128;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i1);

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" [");

        $i1 = 1;

     label1:
        $r5 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $r5[0];

        if $i1 >= $i2 goto label4;

        if $i1 <= 1 goto label3;

        $r3 = ", [";

     label2:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $r5[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r5 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i1 + 1;

        $i2 = $r5[$i2];

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r5 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i1 + 2;

        $i2 = $r5[$i2];

        $r5 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r5[$i1];

        $i2 = $i2 - $i0;

        $i2 = $i2 + 1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r5 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i1 + 3;

        $i2 = $r5[$i2];

        $r5 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $i1 + 1;

        $i0 = $r5[$i0];

        $i2 = $i2 - $i0;

        $i2 = $i2 + 1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $i1 = $i1 + 4;

        goto label1;

     label3:
        $r3 = "[";

        goto label2;

     label4:
        $r1 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public void translate(int, int)
    {
        org.apache.harmony.awt.gl.MultiRectArea $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.awt.Rectangle[] $r1;
        java.awt.Rectangle $r2;
        boolean $z0;
        int[] $r3;

        $r0 := @this: org.apache.harmony.awt.gl.MultiRectArea;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = 1;

     label1:
        $r3 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i3 = $r3[0];

        if $i2 >= $i3 goto label2;

        $r3 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i3 = $i2 + 1;

        $i4 = $r3[$i2];

        $i4 = $i4 + $i0;

        $r3[$i2] = $i4;

        $r3 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i3 + 1;

        $i4 = $r3[$i3];

        $i4 = $i4 + $i1;

        $r3[$i3] = $i4;

        $r3 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i3 = $i2 + 1;

        $i4 = $r3[$i2];

        $i4 = $i4 + $i0;

        $r3[$i2] = $i4;

        $r3 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i2 = $i3 + 1;

        $i4 = $r3[$i3];

        $i4 = $i4 + $i1;

        $r3[$i3] = $i4;

        goto label1;

     label2:
        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle bounds>;

        if $r2 == null goto label3;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle bounds>;

        $z0 = virtualinvoke $r2.<java.awt.Rectangle: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r2 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle bounds>;

        virtualinvoke $r2.<java.awt.Rectangle: void translate(int,int)>($i0, $i1);

     label3:
        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] rectangles>;

        if $r1 == null goto label5;

        $r1 = $r0.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle[] rectangles>;

        $i2 = lengthof $r1;

        $i3 = 0;

     label4:
        if $i3 >= $i2 goto label6;

        $r2 = $r1[$i3];

        virtualinvoke $r2.<java.awt.Rectangle: void translate(int,int)>($i0, $i1);

        $i3 = $i3 + 1;

        goto label4;

     label5:
        return;

     label6:
        return;
    }
}
