public class org.bouncycastle.jce.provider.JCEKeyGenerator extends javax.crypto.KeyGeneratorSpi
{
    protected java.lang.String algName;
    protected int defaultKeySize;
    protected org.bouncycastle.crypto.CipherKeyGenerator engine;
    protected int keySize;
    protected boolean uninitialised;

    protected void <init>(java.lang.String, int, org.bouncycastle.crypto.CipherKeyGenerator)
    {
        org.bouncycastle.jce.provider.JCEKeyGenerator $r0;
        java.lang.String $r1;
        int $i0;
        org.bouncycastle.crypto.CipherKeyGenerator $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEKeyGenerator;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.bouncycastle.crypto.CipherKeyGenerator;

        specialinvoke $r0.<javax.crypto.KeyGeneratorSpi: void <init>()>();

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: boolean uninitialised> = 1;

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: java.lang.String algName> = $r1;

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: int defaultKeySize> = $i0;

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: int keySize> = $i0;

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: org.bouncycastle.crypto.CipherKeyGenerator engine> = $r2;

        return;
    }

    protected javax.crypto.SecretKey engineGenerateKey()
    {
        org.bouncycastle.jce.provider.JCEKeyGenerator $r0;
        int $i0;
        byte[] $r1;
        boolean $z0;
        org.bouncycastle.crypto.CipherKeyGenerator $r2;
        org.bouncycastle.crypto.KeyGenerationParameters $r3;
        java.security.SecureRandom $r4;
        javax.crypto.spec.SecretKeySpec $r5;
        java.lang.String $r6;

        $r0 := @this: org.bouncycastle.jce.provider.JCEKeyGenerator;

        $z0 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: boolean uninitialised>;

        if $z0 == 0 goto label1;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r3 = new org.bouncycastle.crypto.KeyGenerationParameters;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        $i0 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: int defaultKeySize>;

        specialinvoke $r3.<org.bouncycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r4, $i0);

        virtualinvoke $r2.<org.bouncycastle.crypto.CipherKeyGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r3);

     label1:
        $r5 = new javax.crypto.spec.SecretKeySpec;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r1 = virtualinvoke $r2.<org.bouncycastle.crypto.CipherKeyGenerator: byte[] generateKey()>();

        $r6 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: java.lang.String algName>;

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r6);

        return $r5;
    }

    protected void engineInit(int, java.security.SecureRandom)
    {
        org.bouncycastle.jce.provider.JCEKeyGenerator $r0;
        int $i0;
        java.security.SecureRandom $r1;
        java.lang.String $r2;
        org.bouncycastle.crypto.CipherKeyGenerator $r3;
        org.bouncycastle.crypto.KeyGenerationParameters $r4;
        java.lang.IllegalArgumentException $r5;
        java.security.InvalidParameterException $r6;

        $r0 := @this: org.bouncycastle.jce.provider.JCEKeyGenerator;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: boolean uninitialised> = 0;

        $r3 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r4 = new org.bouncycastle.crypto.KeyGenerationParameters;

     label1:
        specialinvoke $r4.<org.bouncycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r1, $i0);

        virtualinvoke $r3.<org.bouncycastle.crypto.CipherKeyGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r4);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.security.InvalidParameterException;

        $r2 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r6.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r2);

        throw $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    protected void engineInit(java.security.SecureRandom)
    {
        org.bouncycastle.jce.provider.JCEKeyGenerator $r0;
        java.security.SecureRandom $r1;
        org.bouncycastle.crypto.KeyGenerationParameters $r2;
        int $i0;
        org.bouncycastle.crypto.CipherKeyGenerator $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEKeyGenerator;

        $r1 := @parameter0: java.security.SecureRandom;

        if $r1 == null goto label1;

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: boolean uninitialised> = 0;

        $r3 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r2 = new org.bouncycastle.crypto.KeyGenerationParameters;

        $i0 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: int defaultKeySize>;

        specialinvoke $r2.<org.bouncycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r1, $i0);

        virtualinvoke $r3.<org.bouncycastle.crypto.CipherKeyGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r2);

        return;

     label1:
        return;
    }

    protected void engineInit(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.JCEKeyGenerator $r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEKeyGenerator;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter1: java.security.SecureRandom;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("Not Implemented");

        throw $r3;
    }
}
