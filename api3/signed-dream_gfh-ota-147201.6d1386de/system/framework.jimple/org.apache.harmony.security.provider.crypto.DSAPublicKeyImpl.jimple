public class org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl extends org.apache.harmony.security.PublicKeyImpl implements java.security.interfaces.DSAPublicKey
{
    private static final long serialVersionUID;
    private java.security.interfaces.DSAParams params;
    private java.math.BigInteger y;

    public void <init>(java.security.spec.DSAPublicKeySpec)
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl $r0;
        java.security.spec.DSAPublicKeySpec $r1;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r2;
        org.apache.harmony.security.x509.SubjectPublicKeyInfo $r3;
        org.apache.harmony.security.provider.crypto.ThreeIntegerSequence $r4;
        java.math.BigInteger $r5, $r6, $r7, $r12;
        byte[] $r8, $r9, $r10;
        java.lang.String $r11;
        org.apache.harmony.security.asn1.ASN1Integer $r13;
        java.security.spec.DSAParameterSpec $r14;

        $r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        $r1 := @parameter0: java.security.spec.DSAPublicKeySpec;

        specialinvoke $r0.<org.apache.harmony.security.PublicKeyImpl: void <init>(java.lang.String)>("DSA");

        $r5 = virtualinvoke $r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getP()>();

        $r6 = virtualinvoke $r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getQ()>();

        $r7 = virtualinvoke $r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getG()>();

        $r4 = new org.apache.harmony.security.provider.crypto.ThreeIntegerSequence;

        $r8 = virtualinvoke $r5.<java.math.BigInteger: byte[] toByteArray()>();

        $r9 = virtualinvoke $r6.<java.math.BigInteger: byte[] toByteArray()>();

        $r10 = virtualinvoke $r7.<java.math.BigInteger: byte[] toByteArray()>();

        specialinvoke $r4.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: void <init>(byte[],byte[],byte[])>($r8, $r9, $r10);

        $r2 = new org.apache.harmony.security.x509.AlgorithmIdentifier;

        $r11 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2OID(java.lang.String)>("DSA");

        $r8 = virtualinvoke $r4.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: byte[] getEncoded()>();

        specialinvoke $r2.<org.apache.harmony.security.x509.AlgorithmIdentifier: void <init>(java.lang.String,byte[])>($r11, $r8);

        $r12 = virtualinvoke $r1.<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getY()>();

        $r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger y> = $r12;

        $r3 = new org.apache.harmony.security.x509.SubjectPublicKeyInfo;

        $r13 = staticinvoke <org.apache.harmony.security.asn1.ASN1Integer: org.apache.harmony.security.asn1.ASN1Integer getInstance()>();

        $r12 = $r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger y>;

        $r8 = virtualinvoke $r12.<java.math.BigInteger: byte[] toByteArray()>();

        $r8 = virtualinvoke $r13.<org.apache.harmony.security.asn1.ASN1Type: byte[] encode(java.lang.Object)>($r8);

        specialinvoke $r3.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: void <init>(org.apache.harmony.security.x509.AlgorithmIdentifier,byte[])>($r2, $r8);

        $r8 = virtualinvoke $r3.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] getEncoded()>();

        virtualinvoke $r0.<org.apache.harmony.security.PublicKeyImpl: void setEncoding(byte[])>($r8);

        $r14 = new java.security.spec.DSAParameterSpec;

        specialinvoke $r14.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r5, $r6, $r7);

        $r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.security.interfaces.DSAParams params> = $r14;

        return;
    }

    public void <init>(java.security.spec.X509EncodedKeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl $r0;
        java.security.spec.X509EncodedKeySpec $r1;
        byte[] $r2, $r3;
        org.apache.harmony.security.asn1.ASN1Sequence $r4;
        java.lang.Object $r5;
        org.apache.harmony.security.x509.SubjectPublicKeyInfo $r6;
        java.math.BigInteger $r7, $r12, $r13;
        org.apache.harmony.security.asn1.ASN1Integer $r8;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r9;
        org.apache.harmony.security.provider.crypto.ThreeIntegerSequence $r10;
        java.security.spec.DSAParameterSpec $r11;
        java.lang.String $r14, $r15;
        java.io.IOException $r16, $r18, $r19;
        java.security.spec.InvalidKeySpecException $r17;

        $r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        $r1 := @parameter0: java.security.spec.X509EncodedKeySpec;

        specialinvoke $r0.<org.apache.harmony.security.PublicKeyImpl: void <init>(java.lang.String)>("DSA");

        $r3 = virtualinvoke $r1.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();

        $r4 = <org.apache.harmony.security.x509.SubjectPublicKeyInfo: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

     label01:
        $r5 = virtualinvoke $r4.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>($r3);

     label02:
        $r6 = (org.apache.harmony.security.x509.SubjectPublicKeyInfo) $r5;

        $r7 = new java.math.BigInteger;

     label03:
        $r8 = staticinvoke <org.apache.harmony.security.asn1.ASN1Integer: org.apache.harmony.security.asn1.ASN1Integer getInstance()>();

        $r2 = virtualinvoke $r6.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: byte[] getSubjectPublicKey()>();

        $r5 = virtualinvoke $r8.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>($r2);

     label04:
        $r2 = (byte[]) $r5;

     label05:
        $r2 = (byte[]) $r2;

        specialinvoke $r7.<java.math.BigInteger: void <init>(byte[])>($r2);

     label06:
        $r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger y> = $r7;

        $r9 = virtualinvoke $r6.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: org.apache.harmony.security.x509.AlgorithmIdentifier getAlgorithmIdentifier()>();

        $r4 = <org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

     label07:
        $r2 = virtualinvoke $r9.<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>($r2);

     label08:
        $r10 = (org.apache.harmony.security.provider.crypto.ThreeIntegerSequence) $r5;

        $r11 = new java.security.spec.DSAParameterSpec;

        $r7 = new java.math.BigInteger;

        $r2 = $r10.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: byte[] p>;

        specialinvoke $r7.<java.math.BigInteger: void <init>(byte[])>($r2);

        $r12 = new java.math.BigInteger;

        $r2 = $r10.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: byte[] q>;

        specialinvoke $r12.<java.math.BigInteger: void <init>(byte[])>($r2);

        $r13 = new java.math.BigInteger;

        $r2 = $r10.<org.apache.harmony.security.provider.crypto.ThreeIntegerSequence: byte[] g>;

        specialinvoke $r13.<java.math.BigInteger: void <init>(byte[])>($r2);

        specialinvoke $r11.<java.security.spec.DSAParameterSpec: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)>($r7, $r12, $r13);

        $r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.security.interfaces.DSAParams params> = $r11;

        virtualinvoke $r0.<org.apache.harmony.security.PublicKeyImpl: void setEncoding(byte[])>($r3);

        $r14 = virtualinvoke $r9.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        $r15 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r14);

        if $r15 != null goto label13;

     label09:
        virtualinvoke $r0.<org.apache.harmony.security.PublicKeyImpl: void setAlgorithm(java.lang.String)>($r14);

        return;

     label10:
        $r16 := @caughtexception;

        $r17 = new java.security.spec.InvalidKeySpecException;

        $r14 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.19A", $r16);

        specialinvoke $r17.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r14);

        throw $r17;

     label11:
        $r18 := @caughtexception;

        $r17 = new java.security.spec.InvalidKeySpecException;

        $r14 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.19B", $r18);

        specialinvoke $r17.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r14);

        throw $r17;

     label12:
        $r19 := @caughtexception;

        $r17 = new java.security.spec.InvalidKeySpecException;

        $r14 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.19B", $r19);

        specialinvoke $r17.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r14);

        throw $r17;

     label13:
        $r14 = $r15;

        goto label09;

        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.IOException from label03 to label04 with label11;
        catch java.io.IOException from label05 to label06 with label11;
        catch java.io.IOException from label07 to label08 with label12;
    }

    public java.security.interfaces.DSAParams getParams()
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl $r0;
        java.security.interfaces.DSAParams r1;

        $r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        r1 = $r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.security.interfaces.DSAParams params>;

        return r1;
    }

    public java.math.BigInteger getY()
    {
        org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl $r0;
        java.math.BigInteger r1;

        $r0 := @this: org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl;

        r1 = $r0.<org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: java.math.BigInteger y>;

        return r1;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.security.provider.crypto.DSAPublicKeyImpl: long serialVersionUID> = -2279672131310978336L;

        return;
    }
}
