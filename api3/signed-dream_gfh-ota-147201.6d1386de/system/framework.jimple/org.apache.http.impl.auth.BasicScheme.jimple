public class org.apache.http.impl.auth.BasicScheme extends org.apache.http.impl.auth.RFC2617Scheme
{
    private boolean complete;

    public void <init>()
    {
        org.apache.http.impl.auth.BasicScheme $r0;

        $r0 := @this: org.apache.http.impl.auth.BasicScheme;

        specialinvoke $r0.<org.apache.http.impl.auth.RFC2617Scheme: void <init>()>();

        $r0.<org.apache.http.impl.auth.BasicScheme: boolean complete> = 0;

        return;
    }

    public static org.apache.http.Header authenticate(org.apache.http.auth.Credentials, java.lang.String, boolean)
    {
        org.apache.http.auth.Credentials $r0;
        java.lang.String $r1, $r6;
        boolean $z0;
        org.apache.http.util.CharArrayBuffer $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r4;
        java.security.Principal $r5;
        byte[] $r7;
        int $i0;
        org.apache.http.message.BufferedHeader $r8;

        $r0 := @parameter0: org.apache.http.auth.Credentials;

        $r1 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credentials may not be null");

        throw $r4;

     label1:
        if $r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charset may not be null");

        throw $r4;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r5 = interfaceinvoke $r0.<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>();

        $r6 = interfaceinvoke $r5.<java.security.Principal: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = interfaceinvoke $r0.<org.apache.http.auth.Credentials: java.lang.String getPassword()>();

        if $r6 != null goto label5;

        $r6 = "null";

     label3:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)>($r6, $r1);

        $r7 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r7);

        $r2 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r2.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(32);

        if $z0 == 0 goto label6;

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>("Proxy-Authorization");

     label4:
        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(": Basic ");

        $i0 = lengthof $r7;

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>($r7, 0, $i0);

        $r8 = new org.apache.http.message.BufferedHeader;

        specialinvoke $r8.<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>($r2);

        return $r8;

     label5:
        $r6 = interfaceinvoke $r0.<org.apache.http.auth.Credentials: java.lang.String getPassword()>();

        goto label3;

     label6:
        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>("Authorization");

        goto label4;
    }

    public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException
    {
        org.apache.http.impl.auth.BasicScheme $r0;
        org.apache.http.auth.Credentials $r1;
        org.apache.http.HttpRequest $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.params.HttpParams $r4;
        java.lang.String $r5;
        boolean $z0;
        org.apache.http.Header $r6;

        $r0 := @this: org.apache.http.impl.auth.BasicScheme;

        $r1 := @parameter0: org.apache.http.auth.Credentials;

        $r2 := @parameter1: org.apache.http.HttpRequest;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credentials may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r3;

     label2:
        $r4 = interfaceinvoke $r2.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r5 = staticinvoke <org.apache.http.auth.params.AuthParams: java.lang.String getCredentialCharset(org.apache.http.params.HttpParams)>($r4);

        $z0 = virtualinvoke $r0.<org.apache.http.impl.auth.AuthSchemeBase: boolean isProxy()>();

        $r6 = staticinvoke <org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)>($r1, $r5, $z0);

        return $r6;
    }

    public java.lang.String getSchemeName()
    {
        org.apache.http.impl.auth.BasicScheme $r0;

        $r0 := @this: org.apache.http.impl.auth.BasicScheme;

        return "basic";
    }

    public boolean isComplete()
    {
        org.apache.http.impl.auth.BasicScheme $r0;
        boolean z0;

        $r0 := @this: org.apache.http.impl.auth.BasicScheme;

        z0 = $r0.<org.apache.http.impl.auth.BasicScheme: boolean complete>;

        return z0;
    }

    public boolean isConnectionBased()
    {
        org.apache.http.impl.auth.BasicScheme $r0;

        $r0 := @this: org.apache.http.impl.auth.BasicScheme;

        return 0;
    }

    public void processChallenge(org.apache.http.Header) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.impl.auth.BasicScheme $r0;
        org.apache.http.Header $r1;

        $r0 := @this: org.apache.http.impl.auth.BasicScheme;

        $r1 := @parameter0: org.apache.http.Header;

        specialinvoke $r0.<org.apache.http.impl.auth.AuthSchemeBase: void processChallenge(org.apache.http.Header)>($r1);

        $r0.<org.apache.http.impl.auth.BasicScheme: boolean complete> = 1;

        return;
    }
}
