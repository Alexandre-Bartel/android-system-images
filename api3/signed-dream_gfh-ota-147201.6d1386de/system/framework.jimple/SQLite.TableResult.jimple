public class SQLite.TableResult extends java.lang.Object implements SQLite.Callback
{
    public java.lang.String[] column;
    public int ncolumns;
    public int nrows;
    public java.util.Vector rows;
    public java.lang.String[] types;

    public void <init>()
    {
        SQLite.TableResult $r0;

        $r0 := @this: SQLite.TableResult;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        virtualinvoke $r0.<SQLite.TableResult: void clear()>();

        return;
    }

    public void clear()
    {
        SQLite.TableResult $r0;
        java.lang.String[] $r1;
        java.util.Vector $r2;

        $r0 := @this: SQLite.TableResult;

        $r1 = newarray (java.lang.String)[0];

        $r0.<SQLite.TableResult: java.lang.String[] column> = $r1;

        $r0.<SQLite.TableResult: java.lang.String[] types> = null;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r0.<SQLite.TableResult: java.util.Vector rows> = $r2;

        $r0.<SQLite.TableResult: int nrows> = 0;

        $r0.<SQLite.TableResult: int ncolumns> = 0;

        return;
    }

    public void columns(java.lang.String[])
    {
        SQLite.TableResult $r0;
        java.lang.String[] $r1;
        int $i0;

        $r0 := @this: SQLite.TableResult;

        $r1 := @parameter0: java.lang.String[];

        $r0.<SQLite.TableResult: java.lang.String[] column> = $r1;

        $r1 = $r0.<SQLite.TableResult: java.lang.String[] column>;

        $i0 = lengthof $r1;

        $r0.<SQLite.TableResult: int ncolumns> = $i0;

        return;
    }

    public boolean newrow(java.lang.String[])
    {
        SQLite.TableResult $r0;
        java.lang.String[] $r1;
        java.util.Vector $r2;
        int $i0;

        $r0 := @this: SQLite.TableResult;

        $r1 := @parameter0: java.lang.String[];

        if $r1 == null goto label1;

        $r2 = $r0.<SQLite.TableResult: java.util.Vector rows>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        $i0 = $r0.<SQLite.TableResult: int nrows>;

        $i0 = $i0 + 1;

        $r0.<SQLite.TableResult: int nrows> = $i0;

     label1:
        return 0;
    }

    public java.lang.String toString()
    {
        SQLite.TableResult $r0;
        java.lang.StringBuffer $r1;
        int $i0, $i1, $i2;
        java.lang.String[] $r2;
        java.lang.String $r3;
        java.util.Vector $r4;
        java.lang.Object $r5;

        $r0 := @this: SQLite.TableResult;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $i0 = 0;

     label01:
        $i1 = $r0.<SQLite.TableResult: int ncolumns>;

        if $i0 >= $i1 goto label04;

        $r2 = $r0.<SQLite.TableResult: java.lang.String[] column>;

        $r3 = $r2[$i0];

        if $r3 != null goto label03;

        $r3 = "NULL";

     label02:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(124);

        $i0 = $i0 + 1;

        goto label01;

     label03:
        $r2 = $r0.<SQLite.TableResult: java.lang.String[] column>;

        $r3 = $r2[$i0];

        goto label02;

     label04:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $i0 = 0;

     label05:
        $i1 = $r0.<SQLite.TableResult: int nrows>;

        if $i0 >= $i1 goto label10;

        $r4 = $r0.<SQLite.TableResult: java.util.Vector rows>;

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r2 = (java.lang.String[]) $r5;

        $r2 = (java.lang.String[]) $r2;

        $i1 = 0;

     label06:
        $i2 = $r0.<SQLite.TableResult: int ncolumns>;

        if $i1 >= $i2 goto label09;

        $r3 = $r2[$i1];

        if $r3 != null goto label08;

        $r3 = "NULL";

     label07:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(124);

        $i1 = $i1 + 1;

        goto label06;

     label08:
        $r3 = $r2[$i1];

        goto label07;

     label09:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $i0 = $i0 + 1;

        goto label05;

     label10:
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public void types(java.lang.String[])
    {
        SQLite.TableResult $r0;
        java.lang.String[] $r1;

        $r0 := @this: SQLite.TableResult;

        $r1 := @parameter0: java.lang.String[];

        $r0.<SQLite.TableResult: java.lang.String[] types> = $r1;

        return;
    }
}
