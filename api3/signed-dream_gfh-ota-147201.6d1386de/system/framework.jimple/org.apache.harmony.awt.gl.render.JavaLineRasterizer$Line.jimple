abstract class org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line extends java.lang.Object
{
    org.apache.harmony.awt.gl.MultiRectArea dst;
    int x;
    int x1;
    int x2;
    int y;
    int y1;
    int y2;

    void <init>(int, int, int, int, org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line $r0;
        int $i0, $i1, $i2, $i3;
        org.apache.harmony.awt.gl.MultiRectArea $r1;

        $r0 := @this: org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 := @parameter4: org.apache.harmony.awt.gl.MultiRectArea;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line: int x1> = $i0;

        $r0.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line: int y1> = $i1;

        $r0.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line: int x2> = $i2;

        $r0.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line: int y2> = $i3;

        $r0.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line: org.apache.harmony.awt.gl.MultiRectArea dst> = $r1;

        return;
    }

    abstract void rasterize();

    abstract void rasterize(int);

    abstract void rasterize(int[], int);

    void rasterizeDash(int, org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher)
    {
        org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line $r0;
        org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher $r1;
        float $f0, $f1;
        int $i0, $i1;
        float[] $r2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher;

        $r2 = $r1.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: float[] dash>;

        $i1 = $r1.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: int index>;

        $f0 = $r2[$i1];

        $f1 = $r1.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: float phase>;

        $f0 = $f0 - $f1;

        $i1 = (int) $f0;

        $f1 = (float) $i1;

        $f1 = $f0 - $f1;

     label1:
        if $i0 <= $i1 goto label4;

        $z0 = $r1.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: boolean visible>;

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line: void rasterize(int)>($i1);

     label2:
        $i0 = $i0 - $i1;

        $f0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: float nextDash()>();

        $f0 = $f1 + $f0;

        $i1 = (int) $f0;

        $f1 = (float) $i1;

        $f1 = $f0 - $f1;

        goto label1;

     label3:
        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line: void skip(int)>($i1);

        goto label2;

     label4:
        if $i0 <= 0 goto label5;

        $z0 = $r1.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: boolean visible>;

        if $z0 == 0 goto label6;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$Line: void rasterize(int)>($i0);

        $f0 = (float) $i0;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: void move(float)>($f0);

        return;

     label5:
        return;

     label6:
        return;
    }

    abstract void skip(int);
}
