public class junit.runner.TestCaseClassLoader extends java.lang.ClassLoader
{
    static final java.lang.String EXCLUDED_FILE;
    private java.lang.String[] defaultExclusions;
    private java.util.Vector fExcluded;
    private java.util.Vector fPathItems;

    public void <init>()
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        specialinvoke $r0.<junit.runner.TestCaseClassLoader: void <init>(java.lang.String)>($r1);

        return;
    }

    public void <init>(java.lang.String)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.ClassLoader: void <init>()>();

        $r2 = newarray (java.lang.String)[3];

        $r2[0] = "junit.framework.";

        $r2[1] = "junit.extensions.";

        $r2[2] = "junit.runner.";

        $r0.<junit.runner.TestCaseClassLoader: java.lang.String[] defaultExclusions> = $r2;

        specialinvoke $r0.<junit.runner.TestCaseClassLoader: void scanPath(java.lang.String)>($r1);

        specialinvoke $r0.<junit.runner.TestCaseClassLoader: void readExcludedPackages()>();

        return;
    }

    private byte[] getClassData(java.io.File)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.io.File $r1;
        byte[] $r2;
        java.io.ByteArrayOutputStream $r3;
        java.io.FileInputStream $r4;
        int $i0;
        java.io.IOException $r5;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.io.File;

        $r4 = new java.io.FileInputStream;

     label1:
        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.io.File)>($r1);

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>(1000);

        $r2 = newarray (byte)[1000];

     label2:
        $i0 = virtualinvoke $r4.<java.io.FileInputStream: int read(byte[])>($r2);

        if $i0 == -1 goto label4;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r2, 0, $i0);

        goto label2;

     label3:
        $r5 := @caughtexception;

        return null;

     label4:
        virtualinvoke $r4.<java.io.FileInputStream: void close()>();

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void close()>();

        $r2 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label5:
        return $r2;

        catch java.io.IOException from label1 to label3 with label3;
        catch java.io.IOException from label4 to label5 with label3;
    }

    private byte[] loadFileData(java.lang.String, java.lang.String)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1, $r2;
        java.io.File $r3;
        boolean $z0;
        byte[] $r4;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r4 = specialinvoke $r0.<junit.runner.TestCaseClassLoader: byte[] getClassData(java.io.File)>($r3);

        return $r4;

     label1:
        return null;
    }

    private byte[] loadJarData(java.lang.String, java.lang.String)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1, $r2;
        java.io.File $r3;
        byte[] $r4;
        int $i0, $i2, $i3;
        java.util.zip.ZipFile $r5;
        java.io.IOException $r6, $r9, $r11, $r13, $r14;
        java.io.InputStream $r7, $r10;
        boolean $z0;
        java.util.zip.ZipEntry $r8;
        long $l1;
        java.lang.Throwable $r12;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r7 = null;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r5 = new java.util.zip.ZipFile;

     label02:
        specialinvoke $r5.<java.util.zip.ZipFile: void <init>(java.io.File)>($r3);

     label03:
        $r8 = virtualinvoke $r5.<java.util.zip.ZipFile: java.util.zip.ZipEntry getEntry(java.lang.String)>($r2);

        if $r8 != null goto label05;

        return null;

     label04:
        $r9 := @caughtexception;

        return null;

     label05:
        $l1 = virtualinvoke $r8.<java.util.zip.ZipEntry: long getSize()>();

        $i0 = (int) $l1;

     label06:
        $r10 = virtualinvoke $r5.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>($r8);

     label07:
        $r7 = $r10;

        $r4 = newarray (byte)[$i0];

     label08:
        $i2 = 0;

     label09:
        if $i2 >= $i0 goto label13;

     label10:
        $i3 = lengthof $r4;

     label11:
        $i3 = $i3 - $i2;

        $i3 = virtualinvoke $r10.<java.io.InputStream: int read(byte[],int,int)>($r4, $i2, $i3);

     label12:
        $i2 = $i2 + $i3;

        goto label09;

     label13:
        virtualinvoke $r5.<java.util.zip.ZipFile: void close()>();

     label14:
        if $r10 == null goto label16;

     label15:
        virtualinvoke $r10.<java.io.InputStream: void close()>();

     label16:
        return $r4;

     label17:
        $r11 := @caughtexception;

        if $r7 == null goto label19;

     label18:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label19:
        return null;

     label20:
        $r12 := @caughtexception;

        if $r7 == null goto label22;

     label21:
        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label22:
        throw $r12;

     label23:
        $r13 := @caughtexception;

        goto label16;

     label24:
        $r14 := @caughtexception;

        goto label19;

     label25:
        $r6 := @caughtexception;

        goto label22;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label06 to label07 with label17;
        catch java.io.IOException from label09 to label10 with label17;
        catch java.io.IOException from label11 to label12 with label17;
        catch java.io.IOException from label13 to label14 with label17;
        catch java.lang.Throwable from label06 to label08 with label20;
        catch java.lang.Throwable from label09 to label12 with label20;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch java.io.IOException from label15 to label16 with label23;
        catch java.io.IOException from label18 to label19 with label24;
        catch java.io.IOException from label21 to label22 with label25;
    }

    private byte[] lookupClassData(java.lang.String) throws java.lang.ClassNotFoundException
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1, $r4, $r6;
        int $i0, $i1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5;
        boolean $z0;
        byte[] $r7;
        java.lang.ClassNotFoundException $r8;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r2 = $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fPathItems>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label5;

        $r2 = $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fPathItems>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r4 = (java.lang.String) $r3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r0.<junit.runner.TestCaseClassLoader: boolean isJar(java.lang.String)>($r4);

        if $z0 == 0 goto label3;

        $r7 = specialinvoke $r0.<junit.runner.TestCaseClassLoader: byte[] loadJarData(java.lang.String,java.lang.String)>($r4, $r6);

     label2:
        if $r7 == null goto label4;

        return $r7;

     label3:
        $r7 = specialinvoke $r0.<junit.runner.TestCaseClassLoader: byte[] loadFileData(java.lang.String,java.lang.String)>($r4, $r6);

        goto label2;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        $r8 = new java.lang.ClassNotFoundException;

        specialinvoke $r8.<java.lang.ClassNotFoundException: void <init>(java.lang.String)>($r1);

        throw $r8;
    }

    private void readExcludedPackages()
    {
        junit.runner.TestCaseClassLoader $r0;
        java.util.Properties $r1;
        java.util.Vector $r2;
        int $i0, $i1;
        java.lang.String[] $r3;
        java.lang.String $r4, $r9;
        java.lang.Class $r5;
        java.io.InputStream $r6;
        java.util.Enumeration $r7;
        boolean $z0;
        java.lang.Object $r8;
        java.io.IOException $r10, $r11, $r13, $r14;
        java.lang.Throwable $r12;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>(int)>(10);

        $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded> = $r2;

        $i0 = 0;

     label01:
        $r3 = $r0.<junit.runner.TestCaseClassLoader: java.lang.String[] defaultExclusions>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label02;

        $r2 = $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded>;

        $r3 = $r0.<junit.runner.TestCaseClassLoader: java.lang.String[] defaultExclusions>;

        $r4 = $r3[$i0];

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r4);

        $i0 = $i0 + 1;

        goto label01;

     label02:
        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("excluded.properties");

        if $r6 != null goto label03;

        return;

     label03:
        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

     label04:
        virtualinvoke $r1.<java.util.Properties: void load(java.io.InputStream)>($r6);

     label05:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label06:
        $r7 = virtualinvoke $r1.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label07:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label18;

        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = (java.lang.String) $r8;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("excluded.");

        if $z0 == 0 goto label07;

        $r4 = virtualinvoke $r1.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r9 = $r4;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z0 == 0 goto label08;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i0 = $i0 - 1;

        $r9 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label08:
        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 <= 0 goto label07;

        $r2 = $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r9);

        goto label07;

     label09:
        $r10 := @caughtexception;

     label10:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label11:
        return;

     label12:
        $r11 := @caughtexception;

        return;

     label13:
        $r12 := @caughtexception;

     label14:
        virtualinvoke $r6.<java.io.InputStream: void close()>();

     label15:
        throw $r12;

     label16:
        $r13 := @caughtexception;

        goto label06;

     label17:
        $r14 := @caughtexception;

        goto label15;

     label18:
        return;

        catch java.io.IOException from label04 to label05 with label09;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.io.IOException from label05 to label06 with label16;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label14 to label15 with label17;
    }

    private void scanPath(java.lang.String)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1, $r3;
        java.util.StringTokenizer $r2;
        java.util.Vector $r4;
        boolean $z0;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("path.separator");

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>(int)>(10);

        $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fPathItems> = $r4;

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, $r3);

     label1:
        $z0 = virtualinvoke $r2.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r4 = $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fPathItems>;

        $r1 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r4.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        goto label1;

     label2:
        return;
    }

    public java.net.URL getResource(java.lang.String)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1;
        java.net.URL $r2;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>($r1);

        return $r2;
    }

    public java.io.InputStream getResourceAsStream(java.lang.String)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1;
        java.io.InputStream $r2;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r1);

        return $r2;
    }

    public boolean isExcluded(java.lang.String)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1, $r4;
        int $i0, $i1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        boolean $z0;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r2 = $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label3;

        $r2 = $r0.<junit.runner.TestCaseClassLoader: java.util.Vector fExcluded>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r4 = (java.lang.String) $r3;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    boolean isJar(java.lang.String)
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".zip");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public java.lang.Class loadClass(java.lang.String, boolean) throws java.lang.ClassNotFoundException
    {
        junit.runner.TestCaseClassLoader $r0;
        java.lang.String $r1;
        boolean $z0, $z1;
        int $i0;
        java.lang.Class $r2, $r3;
        java.lang.ClassNotFoundException $r4;
        byte[] $r5;
        java.lang.Throwable $r6;

        $r0 := @this: junit.runner.TestCaseClassLoader;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        entermonitor $r0;

     label01:
        $r2 = virtualinvoke $r0.<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>($r1);

     label02:
        $r3 = $r2;

        if $r2 == null goto label04;

     label03:
        exitmonitor $r0;

        return $r2;

     label04:
        $z1 = virtualinvoke $r0.<junit.runner.TestCaseClassLoader: boolean isExcluded(java.lang.String)>($r1);

     label05:
        if $z1 == 0 goto label09;

     label06:
        $r2 = virtualinvoke $r0.<java.lang.ClassLoader: java.lang.Class findSystemClass(java.lang.String)>($r1);

     label07:
        goto label03;

     label08:
        $r4 := @caughtexception;

     label09:
        if $r2 != null goto label13;

     label10:
        $r5 = specialinvoke $r0.<junit.runner.TestCaseClassLoader: byte[] lookupClassData(java.lang.String)>($r1);

        if $r5 != null goto label12;

        $r4 = new java.lang.ClassNotFoundException;

        specialinvoke $r4.<java.lang.ClassNotFoundException: void <init>()>();

        throw $r4;

     label11:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

     label12:
        $i0 = lengthof $r5;

        $r3 = virtualinvoke $r0.<java.lang.ClassLoader: java.lang.Class defineClass(java.lang.String,byte[],int,int)>($r1, $r5, 0, $i0);

     label13:
        if $z0 == 0 goto label14;

        virtualinvoke $r0.<java.lang.ClassLoader: void resolveClass(java.lang.Class)>($r3);

     label14:
        $r2 = $r3;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.ClassNotFoundException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label14 with label11;
    }

    public static void <clinit>()
    {
        <junit.runner.TestCaseClassLoader: java.lang.String EXCLUDED_FILE> = "excluded.properties";

        return;
    }
}
