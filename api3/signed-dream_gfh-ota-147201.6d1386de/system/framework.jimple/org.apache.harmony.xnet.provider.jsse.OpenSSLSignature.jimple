public class org.apache.harmony.xnet.provider.jsse.OpenSSLSignature extends java.security.Signature
{
    private int ctx;
    private int dsa;
    private java.lang.String evpAlgorithm;
    private int rsa;
    private byte[] singleByte;

    private void <init>(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        java.lang.String $r1, $r4;
        byte[] $r2;
        int $i0;
        java.security.NoSuchAlgorithmException $r3;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.security.Signature: void <init>(java.lang.String)>($r1);

        $r2 = newarray (byte)[1];

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: byte[] singleByte> = $r2;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("with");

        if $i0 != -1 goto label1;

        $r3 = new java.security.NoSuchAlgorithmException;

        specialinvoke $r3.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        $r4 = "1.3.14.3.2.26with1.2.840.10040.4.1";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r4 = "SHA1withDSA";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r4 = "SHAwithDSA";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

     label2:
        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: java.lang.String evpAlgorithm> = "DSA-SHA";

     label3:
        $i0 = staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_new()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int ctx> = $i0;

        return;

     label4:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("-", "");

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: java.lang.String evpAlgorithm> = $r1;

        goto label3;
    }

    public static org.apache.harmony.xnet.provider.jsse.OpenSSLSignature getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        java.lang.String $r0;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        specialinvoke $r1.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: void <init>(java.lang.String)>($r0);

        return $r1;
    }

    private static void log(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.lang.Class $r2;
        java.lang.Class[] $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object[] $r5;
        java.lang.Exception $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.util.Log");

        $r3 = newarray (java.lang.Class)[2];

        $r3[0] = class "java/lang/String";

        $r3[1] = class "java/lang/String";

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("d", $r3);

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = $r0;

        $r5[1] = $r1;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r5);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.lang.Object engineGetParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $r1 := @parameter0: java.lang.String;

        return null;
    }

    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        java.security.PrivateKey $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        java.security.PublicKey $r1;
        boolean $z0;
        java.security.interfaces.DSAPublicKey $r2;
        java.security.interfaces.DSAParams $r3;
        java.math.BigInteger $r4;
        byte[] $r5, $r6, $r7, $r8;
        int $i0;
        java.lang.String $r9;
        java.lang.Exception $r10, $r13, $r14;
        java.security.InvalidKeyException $r11;
        java.security.interfaces.RSAPublicKey $r12;
        java.lang.RuntimeException $r15;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $r1 := @parameter0: java.security.PublicKey;

        $z0 = $r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z0 == 0 goto label05;

     label01:
        $r2 = (java.security.interfaces.DSAPublicKey) $r1;

        $r3 = interfaceinvoke $r2.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r4 = interfaceinvoke $r3.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r4 = interfaceinvoke $r3.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r6 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r4 = interfaceinvoke $r3.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $r7 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r4 = interfaceinvoke $r2.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $r8 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_PKEY_new_DSA(byte[],byte[],byte[],byte[],byte[])>($r5, $r6, $r7, $r8, null);

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int dsa> = $i0;

     label02:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int ctx>;

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: java.lang.String evpAlgorithm>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_VerifyInit(int,java.lang.String)>($i0, $r9);

     label03:
        return;

     label04:
        $r10 := @caughtexception;

        $r11 = new java.security.InvalidKeyException;

        $r9 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r11.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label05:
        $z0 = $r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 == 0 goto label09;

     label06:
        $r12 = (java.security.interfaces.RSAPublicKey) $r1;

        $r4 = interfaceinvoke $r12.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getModulus()>();

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r4 = interfaceinvoke $r12.<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()>();

        $r6 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_PKEY_new_RSA(byte[],byte[],byte[],byte[],byte[])>($r5, $r6, null, null, null);

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int rsa> = $i0;

     label07:
        goto label02;

     label08:
        $r13 := @caughtexception;

        $r11 = new java.security.InvalidKeyException;

        $r9 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r11.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label09:
        $r11 = new java.security.InvalidKeyException;

        specialinvoke $r11.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Need DSA or RSA public key");

        throw $r11;

     label10:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

        catch java.lang.Exception from label01 to label02 with label04;
        catch java.lang.Exception from label02 to label03 with label10;
        catch java.lang.Exception from label06 to label07 with label08;
    }

    protected void engineSetParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        java.lang.String $r1;
        java.lang.Object $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        return;
    }

    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    protected void engineUpdate(byte)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        byte $b0;
        byte[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $b0 := @parameter0: byte;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: byte[] singleByte>;

        $r1[0] = $b0;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: byte[] singleByte>;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: void engineUpdate(byte[],int,int)>($r1, 0, 1);

        return;
    }

    protected void engineUpdate(byte[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<java.security.Signature: int state>;

        if $i2 != 2 goto label1;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;

     label1:
        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int ctx>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_VerifyUpdate(int,byte[],int,int)>($i2, $r1, $i0, $i1);

        return;
    }

    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        java.security.SignatureException $r2;
        java.lang.Exception $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        $r1 := @parameter0: byte[];

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int rsa>;

        if $i0 == 0 goto label2;

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int rsa>;

     label1:
        if $i1 != 0 goto label3;

        $r2 = new java.security.SignatureException;

        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.String)>("Need DSA or RSA public key");

        throw $r2;

     label2:
        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int dsa>;

        goto label1;

     label3:
        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int ctx>;

        $i0 = lengthof $r1;

        $i0 = staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: int EVP_VerifyFinal(int,byte[],int,int,int)>($i2, $r1, 0, $i0, $i1);

     label4:
        if $i0 != 1 goto label5;

        return 1;

     label5:
        return 0;

     label6:
        $r3 := @caughtexception;

        $r2 = new java.security.SignatureException;

        specialinvoke $r2.<java.security.SignatureException: void <init>(java.lang.Throwable)>($r3);

        throw $r2;

        catch java.lang.Exception from label3 to label4 with label6;
    }

    protected void finalize() throws java.lang.Throwable
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSignature $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSignature;

        specialinvoke $r0.<java.lang.Object: void finalize()>();

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int dsa>;

        if $i0 == 0 goto label1;

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int dsa>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_PKEY_free(int)>($i0);

     label1:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int rsa>;

        if $i0 == 0 goto label2;

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int rsa>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_PKEY_free(int)>($i0);

     label2:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int ctx>;

        if $i0 == 0 goto label3;

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSignature: int ctx>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.NativeCrypto: void EVP_free(int)>($i0);

        return;

     label3:
        return;
    }
}
