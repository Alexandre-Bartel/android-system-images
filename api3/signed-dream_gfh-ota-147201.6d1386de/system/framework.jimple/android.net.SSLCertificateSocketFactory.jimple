public class android.net.SSLCertificateSocketFactory extends javax.net.ssl.SSLSocketFactory
{
    private static final java.lang.String LOG_TAG;
    private static final javax.net.ssl.TrustManager[] TRUST_MANAGER;
    private static javax.net.ssl.X509TrustManager sDefaultTrustManager;
    private final javax.net.ssl.SSLSocketFactory mFactory;
    private final int mSocketReadTimeoutForSslHandshake;

    static void <clinit>()
    {
        int $i0, $i1;
        android.net.SSLCertificateSocketFactory$1 $r0;
        javax.net.ssl.TrustManagerFactory $r1;
        javax.net.ssl.TrustManager[] $r2;
        javax.net.ssl.TrustManager $r3;
        boolean $z0;
        javax.net.ssl.X509TrustManager $r4;
        java.security.NoSuchAlgorithmException $r5;
        java.security.KeyStoreException $r6;

        <android.net.SSLCertificateSocketFactory: java.lang.String LOG_TAG> = "SSLCertificateSocketFactory";

     label1:
        $r1 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>("X509");

        virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(null);

        $r2 = virtualinvoke $r1.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label2:
        if $r2 == null goto label4;

        $i0 = lengthof $r2;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label4;

        $r3 = $r2[$i1];

        $z0 = $r3 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label5;

        $r4 = (javax.net.ssl.X509TrustManager) $r3;

        <android.net.SSLCertificateSocketFactory: javax.net.ssl.X509TrustManager sDefaultTrustManager> = $r4;

     label4:
        $r2 = newarray (javax.net.ssl.TrustManager)[1];

        $r0 = new android.net.SSLCertificateSocketFactory$1;

        specialinvoke $r0.<android.net.SSLCertificateSocketFactory$1: void <init>()>();

        $r2[0] = $r0;

        <android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] TRUST_MANAGER> = $r2;

        return;

     label5:
        $i1 = $i1 + 1;

        goto label3;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SSLCertificateSocketFactory", "Unable to get X509 Trust Manager ", $r5);

        goto label4;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SSLCertificateSocketFactory", "Key Store exception while initializing TrustManagerFactory ", $r6);

        goto label4;

        return;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label6;
        catch java.security.KeyStoreException from label1 to label2 with label7;
    }

    public void <init>(int) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        android.net.SSLCertificateSocketFactory $r0;
        int $i0;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $i0 := @parameter0: int;

        specialinvoke $r0.<android.net.SSLCertificateSocketFactory: void <init>(int,org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache)>($i0, null);

        return;
    }

    private void <init>(int, org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException
    {
        android.net.SSLCertificateSocketFactory $r0;
        int $i0;
        org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache $r1;
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r2;
        javax.net.ssl.TrustManager[] $r3;
        java.security.SecureRandom $r4;
        javax.net.ssl.SSLSocketFactory $r5;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache;

        specialinvoke $r0.<javax.net.ssl.SSLSocketFactory: void <init>()>();

        $r2 = new org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: void <init>()>();

        $r3 = <android.net.SSLCertificateSocketFactory: javax.net.ssl.TrustManager[] TRUST_MANAGER>;

        $r4 = new java.security.SecureRandom;

        specialinvoke $r4.<java.security.SecureRandom: void <init>()>();

        virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: void engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom,org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache,org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache)>(null, $r3, $r4, $r1, null);

        $r5 = virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: javax.net.ssl.SSLSocketFactory engineGetSocketFactory()>();

        $r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mFactory> = $r5;

        $r0.<android.net.SSLCertificateSocketFactory: int mSocketReadTimeoutForSslHandshake> = $i0;

        return;
    }

    public static javax.net.SocketFactory getDefault(int)
    {
        int $i0;
        javax.net.SocketFactory $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int,org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache)>($i0, null);

        return $r0;
    }

    public static javax.net.SocketFactory getDefault(int, org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache)
    {
        int $i0;
        org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache $r0;
        android.net.SSLCertificateSocketFactory $r1;
        java.security.NoSuchAlgorithmException $r2;
        java.security.KeyManagementException $r3;

        $i0 := @parameter0: int;

        $r0 := @parameter1: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache;

        $r1 = new android.net.SSLCertificateSocketFactory;

     label1:
        specialinvoke $r1.<android.net.SSLCertificateSocketFactory: void <init>(int,org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache)>($i0, $r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SSLCertificateSocketFactory", "SSLCertifcateSocketFactory.getDefault NoSuchAlgorithmException ", $r2);

        return null;

     label4:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SSLCertificateSocketFactory", "SSLCertifcateSocketFactory.getDefault KeyManagementException ", $r3);

        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
        catch java.security.KeyManagementException from label1 to label2 with label4;
    }

    private boolean hasValidCertificateChain(java.security.cert.Certificate[]) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory $r0;
        java.security.cert.Certificate[] $r1;
        javax.net.ssl.X509TrustManager $r2;
        java.io.IOException $r3;
        int $i0;
        boolean $z0;
        java.security.cert.X509Certificate[] $r4;
        java.security.GeneralSecurityException $r5;
        java.lang.String $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 := @parameter0: java.security.cert.Certificate[];

        $r2 = <android.net.SSLCertificateSocketFactory: javax.net.ssl.X509TrustManager sDefaultTrustManager>;

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "hasValidCertificateChain(): null default trust manager!");

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("null default trust manager");

        throw $r3;

     label1:
        if $r1 == null goto label5;

        $i0 = lengthof $r1;

        if $i0 <= 0 goto label5;

        $z0 = 1;

     label2:
        if $z0 == 0 goto label9;

        $r2 = <android.net.SSLCertificateSocketFactory: javax.net.ssl.X509TrustManager sDefaultTrustManager>;

        $r4 = (java.security.cert.X509Certificate[]) $r1;

        $r4 = (java.security.cert.X509Certificate[]) $r4;

     label3:
        interfaceinvoke $r2.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>($r4, "RSA");

     label4:
        return $z0;

     label5:
        $z0 = 0;

        goto label2;

     label6:
        $r5 := @caughtexception;

        if $r5 == null goto label8;

        $r6 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>();

     label7:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hasValidCertificateChain(): sec. exception: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", $r6);

        return 0;

     label8:
        $r6 = "none";

        goto label7;

     label9:
        return $z0;

        catch java.security.GeneralSecurityException from label3 to label4 with label6;
    }

    private void validateSocket(javax.net.ssl.SSLSocket, java.lang.String) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory $r0;
        javax.net.ssl.SSLSocket $r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0;
        javax.net.ssl.SSLSession $r6;
        java.security.cert.Certificate[] $r7;
        java.io.IOException $r8;
        java.security.cert.Certificate $r9;
        java.security.cert.X509Certificate $r10;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocket;

        $r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("socket.relaxsslcheck");

        $r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.secure");

        $r5 = "0";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r4 = "yes";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "sys prop socket.relaxsslcheck is set, ignoring invalid certs");

        return;

     label1:
        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void setUseClientMode(boolean)>(1);

        virtualinvoke $r1.<javax.net.ssl.SSLSocket: void startHandshake()>();

        $r6 = virtualinvoke $r1.<javax.net.ssl.SSLSocket: javax.net.ssl.SSLSession getSession()>();

        $r7 = interfaceinvoke $r6.<javax.net.ssl.SSLSession: java.security.cert.Certificate[] getPeerCertificates()>();

        if $r7 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "[SSLCertificateSocketFactory] no trusted root CA");

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("no trusted root CA");

        throw $r8;

     label2:
        $z0 = specialinvoke $r0.<android.net.SSLCertificateSocketFactory: boolean hasValidCertificateChain(java.security.cert.Certificate[])>($r7);

        if $z0 != 0 goto label3;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "validateSocket(): certificate untrusted!");

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Certificate untrusted");

        throw $r8;

     label3:
        $r9 = $r7[0];

        $r10 = (java.security.cert.X509Certificate) $r9;

        $z0 = staticinvoke <android.net.http.DomainNameChecker: boolean match(java.security.cert.X509Certificate,java.lang.String)>($r10, $r2);

        if $z0 != 0 goto label4;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SSLCertificateSocketFactory", "validateSocket(): domain name check failed");

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Domain Name check failed");

        throw $r8;

     label4:
        return;
    }

    public java.net.Socket createSocket(java.lang.String, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory $r0;
        java.lang.String $r1;
        int $i0;
        java.net.Socket $r2;
        javax.net.ssl.SSLSocketFactory $r3;
        javax.net.ssl.SSLSocket $r4;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r3 = $r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mFactory>;

        $r2 = virtualinvoke $r3.<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int)>($r1, $i0);

        $r4 = (javax.net.ssl.SSLSocket) $r2;

        $i0 = $r0.<android.net.SSLCertificateSocketFactory: int mSocketReadTimeoutForSslHandshake>;

        if $i0 < 0 goto label1;

        $i0 = $r0.<android.net.SSLCertificateSocketFactory: int mSocketReadTimeoutForSslHandshake>;

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>($i0);

     label1:
        specialinvoke $r0.<android.net.SSLCertificateSocketFactory: void validateSocket(javax.net.ssl.SSLSocket,java.lang.String)>($r4, $r1);

        virtualinvoke $r4.<java.net.Socket: void setSoTimeout(int)>(0);

        return $r4;
    }

    public java.net.Socket createSocket(java.lang.String, int, java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.net.InetAddress $r2;
        java.net.Socket $r3;
        javax.net.ssl.SSLSocketFactory $r4;
        javax.net.ssl.SSLSocket $r5;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.net.InetAddress;

        $i1 := @parameter3: int;

        $r4 = $r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mFactory>;

        $r3 = virtualinvoke $r4.<javax.net.SocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)>($r1, $i0, $r2, $i1);

        $r5 = (javax.net.ssl.SSLSocket) $r3;

        $i0 = $r0.<android.net.SSLCertificateSocketFactory: int mSocketReadTimeoutForSslHandshake>;

        if $i0 < 0 goto label1;

        $i0 = $r0.<android.net.SSLCertificateSocketFactory: int mSocketReadTimeoutForSslHandshake>;

        virtualinvoke $r5.<java.net.Socket: void setSoTimeout(int)>($i0);

     label1:
        specialinvoke $r0.<android.net.SSLCertificateSocketFactory: void validateSocket(javax.net.ssl.SSLSocket,java.lang.String)>($r5, $r1);

        virtualinvoke $r5.<java.net.Socket: void setSoTimeout(int)>(0);

        return $r5;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory $r0;
        java.net.InetAddress $r1;
        int $i0;
        java.io.IOException $r2;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 := @parameter0: java.net.InetAddress;

        $i0 := @parameter1: int;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Cannot validate certification without a hostname");

        throw $r2;
    }

    public java.net.Socket createSocket(java.net.InetAddress, int, java.net.InetAddress, int) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory $r0;
        java.net.InetAddress $r1, $r2;
        int $i0, $i1;
        java.io.IOException $r3;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 := @parameter0: java.net.InetAddress;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.net.InetAddress;

        $i1 := @parameter3: int;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Cannot validate certification without a hostname");

        throw $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException
    {
        android.net.SSLCertificateSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        java.io.IOException $r3;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Cannot validate certification without a hostname");

        throw $r3;
    }

    public java.lang.String[] getDefaultCipherSuites()
    {
        android.net.SSLCertificateSocketFactory $r0;
        java.lang.String[] $r1;
        javax.net.ssl.SSLSocketFactory $r2;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r2 = $r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mFactory>;

        $r1 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>();

        return $r1;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        android.net.SSLCertificateSocketFactory $r0;
        java.lang.String[] $r1;
        javax.net.ssl.SSLSocketFactory $r2;

        $r0 := @this: android.net.SSLCertificateSocketFactory;

        $r2 = $r0.<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory mFactory>;

        $r1 = virtualinvoke $r2.<javax.net.ssl.SSLSocketFactory: java.lang.String[] getSupportedCipherSuites()>();

        return $r1;
    }
}
