public class com.google.debug.DebugUtil extends java.lang.Object
{

    private void <init>()
    {
        com.google.debug.DebugUtil $r0;

        $r0 := @this: com.google.debug.DebugUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getAntProperty(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <com.google.debug.DebugUtil: boolean isAntPropertyExpanded(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        return $r1;
    }

    public static boolean getAntPropertyAsBoolean(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r0 = staticinvoke <com.google.debug.DebugUtil: java.lang.String getAntPropertyOrNull(java.lang.String)>($r0);

        if $r0 == null goto label2;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z1 == 0 goto label2;

        return 0;

     label2:
        return $z0;
    }

    public static int getAntPropertyAsInt(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        java.lang.Exception $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

     label1:
        $r0 = staticinvoke <com.google.debug.DebugUtil: java.lang.String getAntPropertyOrNull(java.lang.String)>($r0);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

     label2:
        return $i0;

     label3:
        $r1 := @caughtexception;

        return $i0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String getAntPropertyOrNull(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <com.google.debug.DebugUtil: java.lang.String getAntProperty(java.lang.String,java.lang.String)>($r0, null);

        return $r0;
    }

    public static java.lang.Class getClass(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing class ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.Class injectClass(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing injectable class ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This may be a symptom of a dynamically referenced class being removed during\n");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("optimization. The most likely cause of this is a bug in Bolide which has\n");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("prevented one the optimizer steps from knowing that the class should not be\n");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("removed or renamed. Please mail bolide-dev@google.com with details.");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r0);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static boolean isAntPropertyExpanded(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("${");

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.Object newInstance(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.Object $r1;
        java.lang.InstantiationException $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.IllegalAccessException $r6;

        $r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate instance of class ");

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $r6 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No public default constructor for class ");

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r3;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }
}
