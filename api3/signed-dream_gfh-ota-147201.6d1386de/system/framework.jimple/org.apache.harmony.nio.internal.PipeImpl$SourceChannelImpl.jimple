class org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl extends java.nio.channels.Pipe$SourceChannel implements org.apache.harmony.luni.platform.FileDescriptorHandler
{
    private java.nio.channels.ServerSocketChannel sourceServer;
    private org.apache.harmony.nio.internal.SocketChannelImpl sourceSocket;
    final org.apache.harmony.nio.internal.PipeImpl this$0;

    protected void <init>(org.apache.harmony.nio.internal.PipeImpl, java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        org.apache.harmony.nio.internal.PipeImpl $r1;
        java.nio.channels.spi.SelectorProvider $r2;
        java.net.InetSocketAddress $r3;
        java.nio.channels.ServerSocketChannel $r4;
        java.net.ServerSocket $r5;
        java.net.InetAddress $r6;
        int $i0;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $r1 := @parameter0: org.apache.harmony.nio.internal.PipeImpl;

        $r2 := @parameter1: java.nio.channels.spi.SelectorProvider;

        $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: org.apache.harmony.nio.internal.PipeImpl this$0> = $r1;

        specialinvoke $r0.<java.nio.channels.Pipe$SourceChannel: void <init>(java.nio.channels.spi.SelectorProvider)>($r2);

        $r4 = virtualinvoke $r2.<java.nio.channels.spi.SelectorProvider: java.nio.channels.ServerSocketChannel openServerSocketChannel()>();

        $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: java.nio.channels.ServerSocketChannel sourceServer> = $r4;

        $r4 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: java.nio.channels.ServerSocketChannel sourceServer>;

        $r5 = virtualinvoke $r4.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();

        $r3 = new java.net.InetSocketAddress;

        $r6 = staticinvoke <java.net.InetAddress: java.net.InetAddress getLocalHost()>();

        specialinvoke $r3.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r6, 0);

        virtualinvoke $r5.<java.net.ServerSocket: void bind(java.net.SocketAddress)>($r3);

        $r4 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: java.nio.channels.ServerSocketChannel sourceServer>;

        $r5 = virtualinvoke $r4.<java.nio.channels.ServerSocketChannel: java.net.ServerSocket socket()>();

        $i0 = virtualinvoke $r5.<java.net.ServerSocket: int getLocalPort()>();

        staticinvoke <org.apache.harmony.nio.internal.PipeImpl: int access$002(org.apache.harmony.nio.internal.PipeImpl,int)>($r1, $i0);

        return;
    }

    void accept() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        java.nio.channels.SocketChannel $r1;
        java.nio.channels.ServerSocketChannel $r2;
        org.apache.harmony.nio.internal.SocketChannelImpl $r3;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $r2 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: java.nio.channels.ServerSocketChannel sourceServer>;

        $r1 = virtualinvoke $r2.<java.nio.channels.ServerSocketChannel: java.nio.channels.SocketChannel accept()>();

        $r3 = (org.apache.harmony.nio.internal.SocketChannelImpl) $r1;

        $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: org.apache.harmony.nio.internal.SocketChannelImpl sourceSocket> = $r3;

        return;
    }

    void closeServer() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        java.nio.channels.ServerSocketChannel $r1;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $r1 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: java.nio.channels.ServerSocketChannel sourceServer>;

        virtualinvoke $r1.<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>();

        return;
    }

    public java.io.FileDescriptor getFD()
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        java.io.FileDescriptor $r1;
        org.apache.harmony.nio.internal.SocketChannelImpl $r2;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $r2 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: org.apache.harmony.nio.internal.SocketChannelImpl sourceSocket>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.nio.internal.SocketChannelImpl: java.io.FileDescriptor getFD()>();

        return $r1;
    }

    protected void implCloseSelectableChannel() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        org.apache.harmony.nio.internal.SocketChannelImpl $r1;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $r1 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: org.apache.harmony.nio.internal.SocketChannelImpl sourceSocket>;

        virtualinvoke $r1.<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>();

        return;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        boolean $z0;
        org.apache.harmony.nio.internal.SocketChannelImpl $r1;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: org.apache.harmony.nio.internal.SocketChannelImpl sourceSocket>;

        virtualinvoke $r1.<java.nio.channels.spi.AbstractSelectableChannel: java.nio.channels.SelectableChannel configureBlocking(boolean)>($z0);

        return;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        java.nio.ByteBuffer $r1;
        int $i0;
        org.apache.harmony.nio.internal.SocketChannelImpl $r2;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: org.apache.harmony.nio.internal.SocketChannelImpl sourceSocket>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.nio.internal.SocketChannelImpl: int read(java.nio.ByteBuffer)>($r1);

        return $i0;
    }

    public long read(java.nio.ByteBuffer[]) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0;
        long $l1;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 = lengthof $r1;

        $l1 = virtualinvoke $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: long read(java.nio.ByteBuffer[],int,int)>($r1, 0, $i0);

        return $l1;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0, $i1;
        long $l2;
        org.apache.harmony.nio.internal.SocketChannelImpl $r2;

        $r0 := @this: org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.apache.harmony.nio.internal.PipeImpl$SourceChannelImpl: org.apache.harmony.nio.internal.SocketChannelImpl sourceSocket>;

        $l2 = virtualinvoke $r2.<org.apache.harmony.nio.internal.SocketChannelImpl: long read(java.nio.ByteBuffer[],int,int)>($r1, $i0, $i1);

        return $l2;
    }
}
