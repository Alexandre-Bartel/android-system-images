public class org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon extends org.apache.harmony.awt.gl.font.TextRunSegment
{
    private float[] advanceIncrements;
    private int[] char2glyph;
    private java.awt.font.GlyphJustificationInfo[] gjis;
    private java.awt.font.GlyphVector gv;
    org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info;

    void <init>(org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo, org.apache.harmony.awt.gl.font.TextDecorator$Decoration)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r1;
        org.apache.harmony.awt.gl.font.TextDecorator$Decoration $r2;
        int $i0, $i1;
        java.awt.font.FontRenderContext $r3;
        byte $b2;
        java.awt.Font $r4;
        char[] $r5;
        java.awt.font.LineMetrics $r6;
        org.apache.harmony.awt.gl.font.BasicMetrics $r7;
        java.lang.UnsupportedOperationException $r8;
        java.lang.String $r9;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 := @parameter0: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo;

        $r2 := @parameter1: org.apache.harmony.awt.gl.font.TextDecorator$Decoration;

        specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: void <init>()>();

        $i0 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int flags>;

        $i0 = $i0 & -10;

        $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int flags> = $i0;

        $b2 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: byte level>;

        $b2 = $b2 & 1;

        if $b2 == 0 goto label1;

        $i0 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int flags>;

        $i0 = $i0 | 1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int flags> = $i0;

     label1:
        $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info> = $r1;

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.TextDecorator$Decoration decoration> = $r2;

        $r4 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: java.awt.Font font>;

        $r5 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: char[] text>;

        $i0 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i1 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int end>;

        $r3 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: java.awt.font.FontRenderContext frc>;

        $r6 = virtualinvoke $r4.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(char[],int,int,java.awt.font.FontRenderContext)>($r5, $i0, $i1, $r3);

        $r7 = new org.apache.harmony.awt.gl.font.BasicMetrics;

        $r4 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: java.awt.Font font>;

        specialinvoke $r7.<org.apache.harmony.awt.gl.font.BasicMetrics: void <init>(java.awt.font.LineMetrics,java.awt.Font)>($r6, $r4);

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.BasicMetrics metrics> = $r7;

        $i0 = virtualinvoke $r6.<java.awt.font.LineMetrics: int getNumChars()>();

        $i1 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        if $i0 == $i1 goto label2;

        $r8 = new java.lang.UnsupportedOperationException;

        $r9 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String)>("awt.41");

        specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        return;
    }

    private int[] getChar2Glyph()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        int[] $r1, $r4;
        java.awt.font.GlyphVector $r2;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r3;
        int $i0, $i1, $i2;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph>;

        if $r1 != null goto label6;

        $r2 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i0 = $r3.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        $r1 = newarray (int)[$i0];

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph> = $r1;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph>;

        staticinvoke <java.util.Arrays: void fill(int[],int)>($r1, -1);

        $i0 = virtualinvoke $r2.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        $r1 = virtualinvoke $r2.<java.awt.font.GlyphVector: int[] getGlyphCharIndices(int,int,int[])>(0, $i0, null);

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph>;

        $i1 = $r1[$i0];

        $r4[$i1] = $i0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

        $i1 = 0;

     label3:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label6;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph>;

        $i2 = $r1[$i1];

        if $i2 >= 0 goto label5;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph>;

        $r1[$i1] = $i0;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph>;

        $i0 = $r1[$i1];

        goto label4;

     label6:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] char2glyph>;

        return $r1;
    }

    private java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        java.awt.font.GlyphJustificationInfo $r1, $r7;
        char $c0;
        java.awt.font.GlyphJustificationInfo[] $r2;
        java.awt.font.GlyphVector $r3;
        int $i1, $i2, $i3, $i4;
        int[] $r4;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r5;
        java.awt.Font $r6;
        float $f0;
        char[] $r8;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] gjis>;

        if $r2 != null goto label4;

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $i1 = virtualinvoke $r3.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        $r4 = virtualinvoke $r3.<java.awt.font.GlyphVector: int[] getGlyphCharIndices(int,int,int[])>(0, $i1, null);

        $r2 = newarray (java.awt.font.GlyphJustificationInfo)[$i1];

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] gjis> = $r2;

        $r5 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $r6 = $r5.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: java.awt.Font font>;

        $f0 = virtualinvoke $r6.<java.awt.Font: float getSize2D()>();

        $r1 = new java.awt.font.GlyphJustificationInfo;

        specialinvoke $r1.<java.awt.font.GlyphJustificationInfo: void <init>(float,boolean,int,float,float,boolean,int,float,float)>(0.0F, 0, 3, 0.0F, 0.0F, 0, 3, 0.0F, 0.0F);

        $r7 = new java.awt.font.GlyphJustificationInfo;

        specialinvoke $r7.<java.awt.font.GlyphJustificationInfo: void <init>(float,boolean,int,float,float,boolean,int,float,float)>($f0, 1, 1, 0.0F, $f0, 1, 1, 0.0F, $f0);

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label4;

        $r5 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $r8 = $r5.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: char[] text>;

        $i3 = $r4[$i2];

        $r5 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i4 = $r5.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i3 = $i3 + $i4;

        $c0 = $r8[$i3];

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c0);

        if $z0 == 0 goto label3;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] gjis>;

        $r2[$i2] = $r7;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] gjis>;

        $r2[$i2] = $r1;

        goto label2;

     label4:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] gjis>;

        return $r2;
    }

    private java.awt.font.GlyphVector getGlyphVector()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        java.awt.font.GlyphVector $r1;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r2;
        java.awt.Font $r3;
        java.awt.font.FontRenderContext $r4;
        char[] $r5;
        int $i0, $i1, $i2;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector gv>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $r3 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: java.awt.Font font>;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $r4 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: java.awt.font.FontRenderContext frc>;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $r5 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: char[] text>;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i0 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int end>;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i1 = $i1 - $i2;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int flags>;

        $r1 = virtualinvoke $r3.<java.awt.Font: java.awt.font.GlyphVector layoutGlyphVector(java.awt.font.FontRenderContext,char[],int,int,int)>($r4, $r5, $i0, $i1, $i2);

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector gv> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector gv>;

        return $r1;
    }

    boolean charHasZeroAdvance(int)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        int $i0, $i1;
        float[] $r1;
        float $f0;
        byte $b2;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        if $r1 != null goto label1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: void initAdvanceMapping()>();

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        $i1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int getStart()>();

        $i0 = $i0 - $i1;

        $f0 = $r1[$i0];

        $b2 = $f0 cmpl 0.0F;

        if $b2 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.lang.Object clone()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0, $r1;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r2;
        org.apache.harmony.awt.gl.font.TextDecorator$Decoration $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = new org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.TextDecorator$Decoration decoration>;

        specialinvoke $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: void <init>(org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo,org.apache.harmony.awt.gl.font.TextDecorator$Decoration)>($r2, $r3);

        return $r1;
    }

    float doJustification(org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo[])
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo[] $r1;
        org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo $r2, $r3, $r8;
        int $i0, $i1, $i2, $i3;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r4;
        boolean $z0, $z1;
        int[] $r5;
        float $f0, $f1, $f2;
        java.awt.font.GlyphJustificationInfo[] $r6;
        java.awt.font.GlyphJustificationInfo $r7;
        java.awt.font.GlyphVector $r9;
        java.awt.geom.Point2D $r10;
        double $d0, $d1;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 := @parameter0: org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo[];

        $i0 = lengthof $r1;

        $i0 = $i0 - 1;

        $r2 = $r1[$i0];

        if $r2 != null goto label04;

        $i0 = -1;

     label01:
        $i1 = 0;

     label02:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label03;

        $r2 = $r1[$i1];

        if $r2 == null goto label05;

     label03:
        $i2 = lengthof $r1;

        if $i1 != $i2 goto label06;

        return 0.0F;

     label04:
        $i0 = lengthof $r1;

        $i0 = $i0 - 1;

        $r2 = $r1[$i0];

        $i0 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        goto label01;

     label05:
        $i1 = $i1 + 1;

        goto label02;

     label06:
        $r2 = $r1[$i1];

        if $i0 <= 0 goto label19;

        $r3 = $r1[$i0];

     label07:
        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i0 = $r4.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int firstIdx>;

        if $i0 > $i1 goto label20;

        $z0 = 1;

     label08:
        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i0 = $r4.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int end>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int lastIdx>;

        $i1 = $i1 + 1;

        if $i0 < $i1 goto label21;

        $z1 = 1;

     label09:
        if $z0 == 0 goto label22;

        $r5 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i0 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int firstIdx>;

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r4.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i0 - $i1;

        $i1 = $r5[$i0];

     label10:
        if $z1 == 0 goto label23;

        $r5 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i0 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int lastIdx>;

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r4.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i0 - $i2;

        $i0 = $r5[$i0];

     label11:
        if $z1 == 0 goto label12;

        $i0 = $i0 + -1;

     label12:
        $f0 = 0.0F;

        if $z0 == 0 goto label16;

        $r6 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()>();

        $r7 = $r6[$i1];

        $i2 = $r7.<java.awt.font.GlyphJustificationInfo: int growPriority>;

        $r8 = $r1[$i2];

        if $r8 == null goto label15;

        $z0 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean useLimits>;

        if $z0 == 0 goto label26;

        $z0 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean absorb>;

        if $z0 == 0 goto label24;

        $f0 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f1 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedGapPerUnit>;

        $f0 = $f0 * $f1;

        $f0 = 0.0F + $f0;

     label13:
        $z0 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean grow>;

        if $z0 == 0 goto label25;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float growRightLimit>;

     label14:
        $f0 = $f0 + $f1;

     label15:
        $i1 = $i1 + 1;

     label16:
        $z0 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean grow>;

        if $z0 == 0 goto label33;

     label17:
        if $i1 > $i0 goto label41;

        $r6 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()>();

        $r7 = $r6[$i1];

        $i2 = $r7.<java.awt.font.GlyphJustificationInfo: int growPriority>;

        $r8 = $r1[$i2];

        if $r8 != null goto label27;

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r10 = virtualinvoke $r9.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i1);

        $d0 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $d1 = (double) $f0;

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r10.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r10.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        virtualinvoke $r9.<java.awt.font.GlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>($i1, $r10);

     label18:
        $i1 = $i1 + 1;

        goto label17;

     label19:
        $r3 = null;

        goto label07;

     label20:
        $z0 = 0;

        goto label08;

     label21:
        $z1 = 0;

        goto label09;

     label22:
        $r5 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i1 = $r5[0];

        goto label10;

     label23:
        $r5 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i0 = $r4.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        $i0 = $i0 - 1;

        $i0 = $r5[$i0];

        goto label11;

     label24:
        if $r3 == null goto label13;

        $i2 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        $i3 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        if $i2 != $i3 goto label13;

        $f0 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f1 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedGapPerUnit>;

        $f0 = $f0 * $f1;

        $f0 = 0.0F + $f0;

        goto label13;

     label25:
        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float shrinkRightLimit>;

        $f1 = neg $f1;

        goto label14;

     label26:
        $f0 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f1 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float gapPerUnit>;

        $f0 = $f0 * $f1;

        $f0 = 0.0F + $f0;

        goto label15;

     label27:
        $z0 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean useLimits>;

        if $z0 == 0 goto label32;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float growLeftLimit>;

        $f0 = $f0 + $f1;

        $z0 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean absorb>;

        if $z0 == 0 goto label30;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedGapPerUnit>;

        $f2 = $f1 * $f2;

        $f0 = $f0 + $f2;

        $f1 = $f0;

        $f0 = $f0 + $f2;

     label28:
        $f2 = $r7.<java.awt.font.GlyphJustificationInfo: float growRightLimit>;

        $f0 = $f0 + $f2;

     label29:
        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r10 = virtualinvoke $r9.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i1);

        $d0 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $d1 = (double) $f1;

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r10.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r10.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        virtualinvoke $r9.<java.awt.font.GlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>($i1, $r10);

        goto label18;

     label30:
        if $r3 == null goto label31;

        $i2 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        $i3 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        if $i2 != $i3 goto label31;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedGapPerUnit>;

        $f2 = $f1 * $f2;

        $f0 = $f0 + $f2;

        $f1 = $f0;

        $f0 = $f0 + $f2;

        goto label28;

     label31:
        $f1 = $f0;

        goto label28;

     label32:
        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float gapPerUnit>;

        $f2 = $f1 * $f2;

        $f0 = $f0 + $f2;

        $f1 = $f0;

        $f0 = $f0 + $f2;

        goto label29;

     label33:
        if $i1 > $i0 goto label41;

        $r6 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()>();

        $r7 = $r6[$i1];

        $i2 = $r7.<java.awt.font.GlyphJustificationInfo: int shrinkPriority>;

        $r8 = $r1[$i2];

        if $r8 != null goto label35;

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r10 = virtualinvoke $r9.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i1);

        $d0 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $d1 = (double) $f0;

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r10.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r10.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        virtualinvoke $r9.<java.awt.font.GlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>($i1, $r10);

     label34:
        $i1 = $i1 + 1;

        goto label33;

     label35:
        $z0 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean useLimits>;

        if $z0 == 0 goto label40;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float shrinkLeftLimit>;

        $f0 = $f0 - $f1;

        $z0 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean absorb>;

        if $z0 == 0 goto label38;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedGapPerUnit>;

        $f2 = $f1 * $f2;

        $f0 = $f0 + $f2;

        $f1 = $f0;

        $f0 = $f0 + $f2;

     label36:
        $f2 = $r7.<java.awt.font.GlyphJustificationInfo: float shrinkRightLimit>;

        $f0 = $f0 - $f2;

     label37:
        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r10 = virtualinvoke $r9.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i1);

        $d0 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $d1 = (double) $f1;

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r10.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r10.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        virtualinvoke $r9.<java.awt.font.GlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>($i1, $r10);

        goto label34;

     label38:
        if $r3 == null goto label39;

        $i2 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        $i3 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        if $i2 != $i3 goto label39;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedGapPerUnit>;

        $f2 = $f1 * $f2;

        $f0 = $f0 + $f2;

        $f1 = $f0;

        $f0 = $f0 + $f2;

        goto label36;

     label39:
        $f1 = $f0;

        goto label36;

     label40:
        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float gapPerUnit>;

        $f2 = $f1 * $f2;

        $f0 = $f0 + $f2;

        $f1 = $f0;

        $f0 = $f0 + $f2;

        goto label37;

     label41:
        if $z1 == 0 goto label47;

        $i0 = $i0 + 1;

        $r6 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()>();

        $r7 = $r6[$i0];

        $i1 = $r7.<java.awt.font.GlyphJustificationInfo: int growPriority>;

        $r8 = $r1[$i1];

        if $r8 == null goto label43;

        $z1 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean useLimits>;

        if $z1 == 0 goto label46;

        $z1 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean grow>;

        if $z1 == 0 goto label44;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float growLeftLimit>;

     label42:
        $f0 = $f0 + $f1;

        $z1 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean absorb>;

        if $z1 == 0 goto label45;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedGapPerUnit>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

     label43:
        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $i1 = virtualinvoke $r9.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        $i1 = $i1 + 1;

        if $i0 >= $i1 goto label48;

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r10 = virtualinvoke $r9.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i0);

        $d0 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $d1 = (double) $f0;

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r10.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r10.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        virtualinvoke $r9.<java.awt.font.GlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>($i0, $r10);

        $i0 = $i0 + 1;

        goto label43;

     label44:
        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float shrinkLeftLimit>;

        $f1 = neg $f1;

        goto label42;

     label45:
        if $r3 == null goto label43;

        $i1 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        $i2 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        if $i1 != $i2 goto label43;

        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedGapPerUnit>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        goto label43;

     label46:
        $f1 = $r7.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f2 = $r8.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float gapPerUnit>;

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        goto label43;

     label47:
        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $i1 = $i0 + 1;

        $r10 = virtualinvoke $r9.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i1);

        $d0 = virtualinvoke $r10.<java.awt.geom.Point2D: double getX()>();

        $d1 = (double) $f0;

        $d0 = $d0 + $d1;

        $d1 = virtualinvoke $r10.<java.awt.geom.Point2D: double getY()>();

        virtualinvoke $r10.<java.awt.geom.Point2D: void setLocation(double,double)>($d0, $d1);

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $i0 = $i0 + 1;

        virtualinvoke $r9.<java.awt.font.GlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>($i0, $r10);

     label48:
        $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] gjis> = null;

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds> = null;

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds> = null;

        return $f0;
    }

    void draw(java.awt.Graphics2D, float, float)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        java.awt.Graphics2D $r1;
        float $f0, $f1, $f2, $f3;
        org.apache.harmony.awt.gl.font.TextDecorator$Decoration $r2;
        java.awt.font.GlyphVector $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 := @parameter0: java.awt.Graphics2D;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.TextDecorator$Decoration decoration>;

        if $r2 != null goto label1;

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $f2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $f0 = $f2 + $f0;

        $f2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float y>;

        $f1 = $f2 + $f1;

        virtualinvoke $r1.<java.awt.Graphics2D: void drawGlyphVector(java.awt.font.GlyphVector,float,float)>($r3, $f0, $f1);

        return;

     label1:
        staticinvoke <org.apache.harmony.awt.gl.font.TextDecorator: void prepareGraphics(org.apache.harmony.awt.gl.font.TextRunSegment,java.awt.Graphics2D,float,float)>($r0, $r1, $f0, $f1);

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $f2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $f2 = $f2 + $f0;

        $f3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float y>;

        $f3 = $f3 + $f1;

        virtualinvoke $r1.<java.awt.Graphics2D: void drawGlyphVector(java.awt.font.GlyphVector,float,float)>($r3, $f2, $f3);

        staticinvoke <org.apache.harmony.awt.gl.font.TextDecorator: void drawTextDecorations(org.apache.harmony.awt.gl.font.TextRunSegment,java.awt.Graphics2D,float,float)>($r0, $r1, $f0, $f1);

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.TextDecorator$Decoration decoration>;

        staticinvoke <org.apache.harmony.awt.gl.font.TextDecorator: void restoreGraphics(org.apache.harmony.awt.gl.font.TextDecorator$Decoration,java.awt.Graphics2D)>($r2, $r1);

        return;
    }

    float getAdvance()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        java.awt.geom.Rectangle2D $r1;
        double $d0;
        float $f0;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.geom.Rectangle2D getLogicalBounds()>();

        $d0 = virtualinvoke $r1.<java.awt.geom.RectangularShape: double getWidth()>();

        $f0 = (float) $d0;

        return $f0;
    }

    float getAdvanceDelta(int, int)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        int $i0, $i1, $i2;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r1;
        float[] $r2;
        float $f0, $f1;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i0 - $i2;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i1 = $i1 - $i2;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        if $r2 != null goto label1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: void initAdvanceMapping()>();

     label1:
        if $i0 >= 0 goto label2;

        $i0 = 0;

     label2:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        if $i1 <= $i2 goto label3;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

     label3:
        $f0 = 0.0F;

     label4:
        if $i0 >= $i1 goto label5;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        $f1 = $r2[$i0];

        $f0 = $f0 + $f1;

        $i0 = $i0 + 1;

        goto label4;

     label5:
        return $f0;
    }

    float getCharAdvance(int)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        int $i0, $i1;
        float[] $r1;
        float $f0;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        if $r1 != null goto label1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: void initAdvanceMapping()>();

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        $i1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int getStart()>();

        $i0 = $i0 - $i1;

        $f0 = $r1[$i0];

        return $f0;
    }

    int getCharIndexFromAdvance(float, int)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        float $f0, $f1;
        int $i0, $i1;
        float[] $r1;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r2;
        byte $b2;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        if $r1 != null goto label1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: void initAdvanceMapping()>();

     label1:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i0 - $i1;

        if $i0 >= 0 goto label2;

        $i0 = 0;

     label2:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        if $i0 >= $i1 goto label3;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        $f1 = $r1[$i0];

        $f0 = $f0 - $f1;

        $b2 = $f0 cmpg 0.0F;

        if $b2 >= 0 goto label4;

     label3:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i1 + $i0;

        return $i0;

     label4:
        $i0 = $i0 + 1;

        goto label2;
    }

    float getCharPosition(int)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        int $i0, $i1;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r1;
        int[] $r2;
        java.awt.font.GlyphVector $r3;
        java.awt.geom.Point2D $r4;
        double $d0;
        float $f0, $f1;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i0 - $i1;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        if $i0 <= $i1 goto label1;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i0 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

     label1:
        $r2 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i0 = $r2[$i0];

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r4 = virtualinvoke $r3.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i0);

        $d0 = virtualinvoke $r4.<java.awt.geom.Point2D: double getX()>();

        $f0 = (float) $d0;

        $f1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $f0 = $f0 + $f1;

        return $f0;
    }

    java.awt.Shape getCharsBlackBoxBounds(int, int)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        java.awt.geom.GeneralPath $r1;
        int $i0, $i1, $i2;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r2;
        int[] $r3;
        java.awt.font.GlyphVector $r4;
        java.awt.Shape $r5;
        float $f0;
        double $d0, $d1;
        java.awt.geom.AffineTransform $r6;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i0 - $i2;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i1 = $i1 - $i2;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i2 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        if $i1 <= $i2 goto label1;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

     label1:
        $r1 = new java.awt.geom.GeneralPath;

        specialinvoke $r1.<java.awt.geom.GeneralPath: void <init>()>();

     label2:
        if $i0 >= $i1 goto label3;

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i2 = $r3[$i0];

        $r4 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r5 = virtualinvoke $r4.<java.awt.font.GlyphVector: java.awt.Shape getGlyphVisualBounds(int)>($i2);

        virtualinvoke $r1.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r5, 0);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $d0 = (double) $f0;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float y>;

        $d1 = (double) $f0;

        $r6 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        virtualinvoke $r1.<java.awt.geom.GeneralPath: void transform(java.awt.geom.AffineTransform)>($r6);

        return $r1;
    }

    int getEnd()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r1;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        i0 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int end>;

        return i0;
    }

    int getLength()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r1;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        i0 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        return i0;
    }

    java.awt.geom.Rectangle2D getLogicalBounds()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        java.awt.geom.Rectangle2D $r1, $r3;
        java.awt.font.GlyphVector $r2;
        float $f0;
        double $d0, $d1, $d2, $d3;
        java.lang.Object $r4;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds>;

        if $r1 != null goto label1;

        $r2 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r1 = virtualinvoke $r2.<java.awt.font.GlyphVector: java.awt.geom.Rectangle2D getLogicalBounds()>();

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds> = $r1;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds>;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $d0 = (double) $f0;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds>;

        $d1 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getX()>();

        $d0 = $d0 + $d1;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float y>;

        $d1 = (double) $f0;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds>;

        $d2 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getY()>();

        $d1 = $d1 + $d2;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds>;

        $d2 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getWidth()>();

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds>;

        $d3 = virtualinvoke $r3.<java.awt.geom.RectangularShape: double getHeight()>();

        virtualinvoke $r1.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d0, $d1, $d2, $d3);

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D logicalBounds>;

        $r4 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r1 = (java.awt.geom.Rectangle2D) $r4;

        return $r1;
    }

    java.awt.Shape getOutline()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        org.apache.harmony.awt.gl.font.TextDecorator$Decoration $r1;
        float $f0;
        double $d0, $d1;
        java.awt.geom.AffineTransform $r2;
        java.awt.font.GlyphVector $r3;
        java.awt.Shape $r4;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $d0 = (double) $f0;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float y>;

        $d1 = (double) $f0;

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r4 = virtualinvoke $r3.<java.awt.font.GlyphVector: java.awt.Shape getOutline()>();

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.TextDecorator$Decoration decoration>;

        $r4 = staticinvoke <org.apache.harmony.awt.gl.font.TextDecorator: java.awt.Shape extendOutline(org.apache.harmony.awt.gl.font.TextRunSegment,java.awt.Shape,org.apache.harmony.awt.gl.font.TextDecorator$Decoration)>($r0, $r4, $r1);

        $r4 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r4);

        return $r4;
    }

    int getStart()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r1;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        i0 = $r1.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        return i0;
    }

    java.awt.geom.Rectangle2D getVisualBounds()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        java.awt.geom.Rectangle2D $r1, $r4;
        java.awt.font.GlyphVector $r2;
        org.apache.harmony.awt.gl.font.TextDecorator$Decoration $r3;
        float $f0;
        double $d0, $d1, $d2, $d3;
        java.lang.Object $r5;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds>;

        if $r1 != null goto label1;

        $r2 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r1 = virtualinvoke $r2.<java.awt.font.GlyphVector: java.awt.geom.Rectangle2D getVisualBounds()>();

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.TextDecorator$Decoration decoration>;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.font.TextDecorator: java.awt.geom.Rectangle2D extendVisualBounds(org.apache.harmony.awt.gl.font.TextRunSegment,java.awt.geom.Rectangle2D,org.apache.harmony.awt.gl.font.TextDecorator$Decoration)>($r0, $r1, $r3);

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds> = $r1;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds>;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $d0 = (double) $f0;

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds>;

        $d1 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getX()>();

        $d0 = $d0 + $d1;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float y>;

        $d1 = (double) $f0;

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds>;

        $d2 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getY()>();

        $d1 = $d1 + $d2;

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds>;

        $d2 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds>;

        $d3 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getHeight()>();

        virtualinvoke $r1.<java.awt.geom.Rectangle2D: void setRect(double,double,double,double)>($d0, $d1, $d2, $d3);

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: java.awt.geom.Rectangle2D visualBounds>;

        $r5 = virtualinvoke $r1.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r1 = (java.awt.geom.Rectangle2D) $r5;

        return $r1;
    }

    java.awt.font.TextHitInfo hitTest(float, float)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        float $f0, $f1, $f2;
        java.awt.font.GlyphVector $r1;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r2;
        int $i0, $i1;
        float[] $r3;
        boolean $z0, $z1;
        byte $b2;
        java.awt.font.TextHitInfo $r4;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $f2 := @parameter0: float;

        $f0 := @parameter1: float;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $f2 = $f2 - $f0;

        $r1 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i0 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        $i0 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.awt.font.GlyphVector: float[] getGlyphPositions(int,int,float[])>(0, $i0, null);

        $z0 = 0;

        $i0 = 1;

     label1:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        if $i0 > $i1 goto label3;

        $i1 = $i0 * 2;

        $f0 = $r3[$i1];

        $b2 = $f0 cmpl $f2;

        if $b2 < 0 goto label7;

        $i1 = $i0 * 2;

        $f0 = $r3[$i1];

        $i1 = $i0 - 1;

        $i1 = $i1 * 2;

        $f1 = $r3[$i1];

        $f1 = $f0 - $f1;

        $i1 = $i0 - 1;

        $i1 = $i1 * 2;

        $f0 = $r3[$i1];

        $f1 = $f1 / 2.0F;

        $f0 = $f0 + $f1;

        $b2 = $f0 cmpl $f2;

        if $b2 <= 0 goto label6;

        $z0 = 1;

     label2:
        $i0 = $i0 + -1;

     label3:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        if $i0 != $i1 goto label4;

        $i0 = $i0 + -1;

     label4:
        $r1 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $i0 = virtualinvoke $r1.<java.awt.font.GlyphVector: int getGlyphCharIndex(int)>($i0);

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $b2 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: byte level>;

        $b2 = $b2 & 1;

        if $b2 != 1 goto label8;

        $z1 = 1;

     label5:
        $z0 = $z1 ^ $z0;

        if $z0 == 0 goto label9;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i1 + $i0;

        $r4 = staticinvoke <java.awt.font.TextHitInfo: java.awt.font.TextHitInfo leading(int)>($i0);

        return $r4;

     label6:
        $z0 = 0;

        goto label2;

     label7:
        $i0 = $i0 + 1;

        goto label1;

     label8:
        $z1 = 0;

        goto label5;

     label9:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i1 + $i0;

        $r4 = staticinvoke <java.awt.font.TextHitInfo: java.awt.font.TextHitInfo trailing(int)>($i0);

        return $r4;
    }

    void initAdvanceMapping()
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        java.awt.font.GlyphVector $r1;
        int $i0, $i1;
        int[] $r2;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r3;
        float[] $r4;
        java.awt.font.GlyphMetrics $r5;
        float $f0;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphVector getGlyphVector()>();

        $i0 = virtualinvoke $r1.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        $r2 = virtualinvoke $r1.<java.awt.font.GlyphVector: int[] getGlyphCharIndices(int,int,int[])>(0, $i0, null);

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i0 = $r3.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int length>;

        $r4 = newarray (float)[$i0];

        $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements> = $r4;

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r4 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: float[] advanceIncrements>;

        $i1 = $r2[$i0];

        $r5 = virtualinvoke $r1.<java.awt.font.GlyphVector: java.awt.font.GlyphMetrics getGlyphMetrics(int)>($i0);

        $f0 = virtualinvoke $r5.<java.awt.font.GlyphMetrics: float getAdvance()>();

        $r4[$i1] = $f0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    void updateJustificationInfo(org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo)
    {
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon $r0;
        org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo $r1;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo $r2;
        boolean $z0, $z1, $z2;
        int[] $r3;
        java.awt.font.GlyphJustificationInfo[] $r4;
        java.awt.font.GlyphJustificationInfo $r5;
        float $f0, $f1;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon;

        $r1 := @parameter0: org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo;

        $i0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int lastIdx>;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int end>;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i0 = $i0 - $i1;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int start>;

        $i2 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int firstIdx>;

        if $i1 > $i2 goto label05;

        $z0 = 1;

     label01:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo info>;

        $i1 = $r2.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextSegmentInfo: int end>;

        $i2 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int lastIdx>;

        $i2 = $i2 + 1;

        if $i1 < $i2 goto label06;

        $z1 = 1;

     label02:
        $i1 = -1;

        $z2 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean grow>;

        if $z2 == 0 goto label08;

        $i2 = 0;

     label03:
        if $i2 >= $i0 goto label12;

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i3 = $r3[$i2];

        if $i3 != $i1 goto label07;

     label04:
        $i2 = $i2 + 1;

        goto label03;

     label05:
        $z0 = 0;

        goto label01;

     label06:
        $z1 = 0;

        goto label02;

     label07:
        $i1 = $i3;

        $r4 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()>();

        $r5 = $r4[$i3];

        $i3 = $r5.<java.awt.font.GlyphJustificationInfo: int growPriority>;

        $i4 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        if $i3 != $i4 goto label04;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float weight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f1 = $f1 * 2.0F;

        $f0 = $f0 + $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float weight> = $f0;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float growLeftLimit>;

        $f0 = $f0 + $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit> = $f0;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float growRightLimit>;

        $f0 = $f0 + $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit> = $f0;

        $z2 = $r5.<java.awt.font.GlyphJustificationInfo: boolean growAbsorb>;

        if $z2 == 0 goto label04;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f1 = $f1 * 2.0F;

        $f0 = $f0 + $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight> = $f0;

        goto label04;

     label08:
        $i2 = 0;

     label09:
        if $i2 >= $i0 goto label12;

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i3 = $r3[$i2];

        if $i3 != $i1 goto label11;

     label10:
        $i2 = $i2 + 1;

        goto label09;

     label11:
        $i1 = $i3;

        $r4 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()>();

        $r5 = $r4[$i3];

        $i3 = $r5.<java.awt.font.GlyphJustificationInfo: int shrinkPriority>;

        $i4 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: int priority>;

        if $i3 != $i4 goto label10;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float weight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f1 = $f1 * 2.0F;

        $f0 = $f0 + $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float weight> = $f0;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float shrinkLeftLimit>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit> = $f0;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float shrinkRightLimit>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit> = $f0;

        $z2 = $r5.<java.awt.font.GlyphJustificationInfo: boolean shrinkAbsorb>;

        if $z2 == 0 goto label10;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f1 = $f1 * 2.0F;

        $f0 = $f0 + $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight> = $f0;

        goto label10;

     label12:
        if $z0 == 0 goto label13;

        $r4 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()>();

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i1 = $r3[0];

        $r5 = $r4[$i1];

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float weight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float weight> = $f0;

        $z0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean grow>;

        if $z0 == 0 goto label14;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float growLeftLimit>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit> = $f0;

        $z0 = $r5.<java.awt.font.GlyphJustificationInfo: boolean growAbsorb>;

        if $z0 == 0 goto label13;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight> = $f0;

     label13:
        if $z1 == 0 goto label16;

        $r4 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: java.awt.font.GlyphJustificationInfo[] getGlyphJustificationInfos()>();

        $r3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.TextRunSegmentImpl$TextRunSegmentCommon: int[] getChar2Glyph()>();

        $i0 = $r3[$i0];

        $r5 = $r4[$i0];

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float weight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float weight> = $f0;

        $z1 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: boolean grow>;

        if $z1 == 0 goto label15;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float growRightLimit>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit> = $f0;

        $z1 = $r5.<java.awt.font.GlyphJustificationInfo: boolean growAbsorb>;

        if $z1 == 0 goto label17;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight> = $f0;

        return;

     label14:
        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float shrinkLeftLimit>;

        $f0 = $f0 + $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit> = $f0;

        $z0 = $r5.<java.awt.font.GlyphJustificationInfo: boolean shrinkAbsorb>;

        if $z0 == 0 goto label13;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight> = $f0;

        goto label13;

     label15:
        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float shrinkRightLimit>;

        $f0 = $f0 + $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float growLimit> = $f0;

        $z1 = $r5.<java.awt.font.GlyphJustificationInfo: boolean shrinkAbsorb>;

        if $z1 == 0 goto label18;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight>;

        $f1 = $r5.<java.awt.font.GlyphJustificationInfo: float weight>;

        $f0 = $f0 - $f1;

        $r1.<org.apache.harmony.awt.gl.font.TextRunBreaker$JustificationInfo: float absorbedWeight> = $f0;

        return;

     label16:
        return;

     label17:
        return;

     label18:
        return;
    }
}
