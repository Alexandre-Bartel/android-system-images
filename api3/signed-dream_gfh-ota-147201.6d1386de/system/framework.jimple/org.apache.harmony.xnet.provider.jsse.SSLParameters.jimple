public class org.apache.harmony.xnet.provider.jsse.SSLParameters extends java.lang.Object implements java.lang.Cloneable
{
    private static javax.net.ssl.X509KeyManager defaultKeyManager;
    private static org.apache.harmony.xnet.provider.jsse.SSLParameters defaultParameters;
    private static java.security.SecureRandom defaultSecureRandom;
    private static javax.net.ssl.X509TrustManager defaultTrustManager;
    private final org.apache.harmony.xnet.provider.jsse.ClientSessionContext clientSessionContext;
    private boolean client_mode;
    private boolean enable_session_creation;
    private java.lang.String[] enabledCipherSuiteNames;
    private org.apache.harmony.xnet.provider.jsse.CipherSuite[] enabledCipherSuites;
    private java.lang.String[] enabledProtocols;
    private javax.net.ssl.X509KeyManager keyManager;
    private boolean need_client_auth;
    private java.security.SecureRandom secureRandom;
    private final org.apache.harmony.xnet.provider.jsse.ServerSessionContext serverSessionContext;
    private int ssl_ctx;
    private javax.net.ssl.X509TrustManager trustManager;
    private boolean want_client_auth;

    protected void <init>(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom, org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache, org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache) throws java.security.KeyManagementException
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        java.security.SecureRandom $r1;
        org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache $r2;
        org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache $r3;
        javax.net.ssl.KeyManager[] $r4;
        javax.net.ssl.TrustManager[] $r5;
        java.lang.String[] $r6;
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r7;
        org.apache.harmony.xnet.provider.jsse.ClientSessionContext $r8;
        boolean $z0, $z1;
        int $i0, $i1;
        javax.net.ssl.X509KeyManager $r9;
        java.lang.String $r10;
        javax.net.ssl.KeyManagerFactory $r11;
        javax.net.ssl.KeyManager $r12;
        java.security.KeyManagementException $r13;
        java.security.NoSuchAlgorithmException $r14;
        java.security.KeyStoreException $r15;
        javax.net.ssl.X509TrustManager $r16;
        javax.net.ssl.TrustManagerFactory $r17;
        javax.net.ssl.TrustManager $r18;
        java.security.UnrecoverableKeyException $r19;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r4 := @parameter0: javax.net.ssl.KeyManager[];

        $r5 := @parameter1: javax.net.ssl.TrustManager[];

        $r1 := @parameter2: java.security.SecureRandom;

        $r2 := @parameter3: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache;

        $r3 := @parameter4: org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledCipherSuiteNames> = null;

        $r6 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.lang.String[] supportedProtocols>;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledProtocols> = $r6;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean client_mode> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean need_client_auth> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean want_client_auth> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean enable_session_creation> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: int ssl_ctx> = 0;

        $r7 = new org.apache.harmony.xnet.provider.jsse.ServerSessionContext;

        specialinvoke $r7.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters,org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache)>($r0, $r3);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.ServerSessionContext serverSessionContext> = $r7;

        $r8 = new org.apache.harmony.xnet.provider.jsse.ClientSessionContext;

        specialinvoke $r8.<org.apache.harmony.xnet.provider.jsse.ClientSessionContext: void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters,org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache)>($r0, $r2);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.ClientSessionContext clientSessionContext> = $r8;

        $z0 = 0;

        if $r4 == null goto label01;

        $i0 = lengthof $r4;

        if $i0 != 0 goto label04;

     label01:
        $r9 = <org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager defaultKeyManager>;

        if $r9 != null goto label10;

     label02:
        $r10 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r11 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r10);

        virtualinvoke $r11.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(null, null);

        $r4 = virtualinvoke $r11.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

     label03:
        $z0 = 1;

     label04:
        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager keyManager>;

        if $r9 != null goto label14;

        $i0 = 0;

     label05:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label06;

        $r12 = $r4[$i0];

        $z1 = $r12 instanceof javax.net.ssl.X509KeyManager;

        if $z1 == 0 goto label12;

        $r12 = $r4[$i0];

        $r9 = (javax.net.ssl.X509KeyManager) $r12;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager keyManager> = $r9;

     label06:
        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager keyManager>;

        if $r9 != null goto label13;

     label07:
        $r13 = new java.security.KeyManagementException;

        specialinvoke $r13.<java.security.KeyManagementException: void <init>(java.lang.String)>("No X509KeyManager found");

     label08:
        throw $r13;

     label09:
        $r14 := @caughtexception;

        $r13 = new java.security.KeyManagementException;

        specialinvoke $r13.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>($r14);

        throw $r13;

     label10:
        $r9 = <org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager defaultKeyManager>;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager keyManager> = $r9;

        goto label04;

     label11:
        $r15 := @caughtexception;

        $r13 = new java.security.KeyManagementException;

        specialinvoke $r13.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>($r15);

        throw $r13;

     label12:
        $i0 = $i0 + 1;

        goto label05;

     label13:
        if $z0 == 0 goto label14;

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager keyManager>;

        <org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager defaultKeyManager> = $r9;

     label14:
        $z0 = 0;

        if $r5 == null goto label15;

        $i0 = lengthof $r5;

        if $i0 != 0 goto label18;

     label15:
        $r16 = <org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager defaultTrustManager>;

        if $r16 != null goto label24;

     label16:
        $r10 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r17 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r10);

        virtualinvoke $r17.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(null);

        $r5 = virtualinvoke $r17.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

     label17:
        $z0 = 1;

     label18:
        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager trustManager>;

        if $r16 != null goto label27;

        $i0 = 0;

     label19:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label20;

        $r18 = $r5[$i0];

        $z1 = $r18 instanceof javax.net.ssl.X509TrustManager;

        if $z1 == 0 goto label25;

        $r18 = $r5[$i0];

        $r16 = (javax.net.ssl.X509TrustManager) $r18;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager trustManager> = $r16;

     label20:
        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager trustManager>;

        if $r16 != null goto label26;

     label21:
        $r13 = new java.security.KeyManagementException;

        specialinvoke $r13.<java.security.KeyManagementException: void <init>(java.lang.String)>("No X509TrustManager found");

     label22:
        throw $r13;

     label23:
        $r19 := @caughtexception;

        $r13 = new java.security.KeyManagementException;

        specialinvoke $r13.<java.security.KeyManagementException: void <init>(java.lang.Throwable)>($r19);

        throw $r13;

     label24:
        $r16 = <org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager defaultTrustManager>;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager trustManager> = $r16;

        goto label18;

     label25:
        $i0 = $i0 + 1;

        goto label19;

     label26:
        if $z0 == 0 goto label27;

        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager trustManager>;

        <org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager defaultTrustManager> = $r16;

     label27:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom secureRandom> = $r1;

        return;

        catch java.security.NoSuchAlgorithmException from label02 to label03 with label09;
        catch java.security.NoSuchAlgorithmException from label07 to label08 with label09;
        catch java.security.KeyStoreException from label02 to label03 with label11;
        catch java.security.KeyStoreException from label07 to label08 with label11;
        catch java.security.UnrecoverableKeyException from label02 to label03 with label23;
        catch java.security.UnrecoverableKeyException from label07 to label08 with label23;
        catch java.security.NoSuchAlgorithmException from label16 to label17 with label09;
        catch java.security.NoSuchAlgorithmException from label21 to label22 with label09;
        catch java.security.KeyStoreException from label16 to label17 with label11;
        catch java.security.KeyStoreException from label21 to label22 with label11;
        catch java.security.UnrecoverableKeyException from label16 to label17 with label23;
        catch java.security.UnrecoverableKeyException from label21 to label22 with label23;
    }

    protected static org.apache.harmony.xnet.provider.jsse.SSLParameters getDefault() throws java.security.KeyManagementException
    {
        java.lang.Object $r0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r1 = <org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.SSLParameters defaultParameters>;

        if $r1 != null goto label1;

        $r1 = new org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void <init>(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom,org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache,org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache)>(null, null, null, null, null);

        <org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.SSLParameters defaultParameters> = $r1;

     label1:
        $r1 = <org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.SSLParameters defaultParameters>;

        $r0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.Object clone()>();

        $r1 = (org.apache.harmony.xnet.provider.jsse.SSLParameters) $r0;

        return $r1;
    }

    private native int nativeinitsslctx();

    protected java.lang.Object clone()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        java.lang.CloneNotSupportedException $r1;
        java.lang.Object $r2;
        java.lang.AssertionError $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

     label1:
        $r2 = specialinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

     label2:
        return $r2;

     label3:
        $r1 := @caughtexception;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1);

        throw $r3;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    protected org.apache.harmony.xnet.provider.jsse.ClientSessionContext getClientSessionContext()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        org.apache.harmony.xnet.provider.jsse.ClientSessionContext r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.ClientSessionContext clientSessionContext>;

        return r1;
    }

    protected boolean getEnableSessionCreation()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean enable_session_creation>;

        return z0;
    }

    protected java.lang.String[] getEnabledCipherSuites()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        java.lang.String[] $r1;
        org.apache.harmony.xnet.provider.jsse.CipherSuite[] $r2;
        int $i0, $i1;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r3;
        java.lang.String $r4;
        java.lang.Object $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledCipherSuiteNames>;

        if $r1 != null goto label2;

        $r2 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()>();

        $i0 = lengthof $r2;

        $r1 = newarray (java.lang.String)[$i0];

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledCipherSuiteNames> = $r1;

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledCipherSuiteNames>;

        $r3 = $r2[$i0];

        $r4 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getName()>();

        $r1[$i0] = $r4;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledCipherSuiteNames>;

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (java.lang.String[]) $r5;

        $r1 = (java.lang.String[]) $r1;

        return $r1;
    }

    protected org.apache.harmony.xnet.provider.jsse.CipherSuite[] getEnabledCipherSuitesMember()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        org.apache.harmony.xnet.provider.jsse.CipherSuite[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.CipherSuite[] enabledCipherSuites>;

        if $r1 != null goto label1;

        $r1 = <org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite[] defaultCipherSuites>;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.CipherSuite[] enabledCipherSuites> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.CipherSuite[] enabledCipherSuites>;

        return $r1;
    }

    protected java.lang.String[] getEnabledProtocols()
    {
        java.lang.String[] $r0;
        java.lang.Object $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;

        $r2 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r0 = $r2.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledProtocols>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (java.lang.String[]) $r1;

        $r0 = (java.lang.String[]) $r0;

        return $r0;
    }

    protected javax.net.ssl.X509KeyManager getKeyManager()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        javax.net.ssl.X509KeyManager r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager keyManager>;

        return r1;
    }

    protected boolean getNeedClientAuth()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean need_client_auth>;

        return z0;
    }

    protected int getSSLCTX()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        int $i0;
        java.lang.Throwable $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        entermonitor $r0;

     label1:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: int ssl_ctx>;

        if $i0 != 0 goto label2;

        $i0 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: int nativeinitsslctx()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: int ssl_ctx> = $i0;

     label2:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: int ssl_ctx>;

     label3:
        exitmonitor $r0;

        return $i0;

     label4:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    protected java.security.SecureRandom getSecureRandom()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        java.security.SecureRandom $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom secureRandom>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom secureRandom>;

        return $r1;

     label1:
        $r1 = <org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom defaultSecureRandom>;

        if $r1 != null goto label2;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        <org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom defaultSecureRandom> = $r1;

     label2:
        $r1 = <org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom defaultSecureRandom>;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom secureRandom> = $r1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom secureRandom>;

        return $r1;
    }

    protected java.security.SecureRandom getSecureRandomMember()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        java.security.SecureRandom r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom secureRandom>;

        return r1;
    }

    protected org.apache.harmony.xnet.provider.jsse.ServerSessionContext getServerSessionContext()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.ServerSessionContext serverSessionContext>;

        return r1;
    }

    protected javax.net.ssl.X509TrustManager getTrustManager()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        javax.net.ssl.X509TrustManager r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509TrustManager trustManager>;

        return r1;
    }

    protected boolean getUseClientMode()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean client_mode>;

        return z0;
    }

    protected boolean getWantClientAuth()
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean want_client_auth>;

        return z0;
    }

    protected void setEnableSessionCreation(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean enable_session_creation> = $z0;

        return;
    }

    protected void setEnabledCipherSuites(java.lang.String[])
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        java.lang.String[] $r1;
        org.apache.harmony.xnet.provider.jsse.CipherSuite[] $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        java.lang.String $r4;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r1 := @parameter0: java.lang.String[];

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided parameter is null");

        throw $r3;

     label1:
        $i0 = lengthof $r1;

        $r2 = newarray (org.apache.harmony.xnet.provider.jsse.CipherSuite)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $r4 = $r1[$i0];

        $r5 = staticinvoke <org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByName(java.lang.String)>($r4);

        $r2[$i0] = $r5;

        $r5 = $r2[$i0];

        if $r5 == null goto label3;

        $r5 = $r2[$i0];

        $z0 = $r5.<org.apache.harmony.xnet.provider.jsse.CipherSuite: boolean supported>;

        if $z0 != 0 goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r4 = $r1[$i0];

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        $i0 = $i0 + 1;

        goto label2;

     label5:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.CipherSuite[] enabledCipherSuites> = $r2;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledCipherSuiteNames> = $r1;

        return;
    }

    protected void setEnabledProtocols(java.lang.String[])
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        java.lang.String $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r1 := @parameter0: java.lang.String[];

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided parameter is null");

        throw $r2;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $r3 = $r1[$i0];

        $z0 = staticinvoke <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: boolean isSupported(java.lang.String)>($r3);

        if $z0 != 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Protocol ");

        $r3 = $r1[$i0];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] enabledProtocols> = $r1;

        return;
    }

    protected void setNeedClientAuth(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean need_client_auth> = $z0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean want_client_auth> = 0;

        return;
    }

    protected void setUseClientMode(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean client_mode> = $z0;

        return;
    }

    protected void setWantClientAuth(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean want_client_auth> = $z0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean need_client_auth> = 0;

        return;
    }
}
