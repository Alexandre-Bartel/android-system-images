public class org.bouncycastle.jce.provider.JDKDSASigner extends java.security.Signature implements org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers, org.bouncycastle.asn1.x509.X509ObjectIdentifiers
{
    private org.bouncycastle.crypto.Digest digest;
    private java.security.SecureRandom random;
    private org.bouncycastle.crypto.DSA signer;

    protected void <init>(java.lang.String, org.bouncycastle.crypto.Digest, org.bouncycastle.crypto.DSA)
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        java.lang.String $r1;
        org.bouncycastle.crypto.Digest $r2;
        org.bouncycastle.crypto.DSA $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.bouncycastle.crypto.Digest;

        $r3 := @parameter2: org.bouncycastle.crypto.DSA;

        specialinvoke $r0.<java.security.Signature: void <init>(java.lang.String)>($r1);

        $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest> = $r2;

        $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.DSA signer> = $r3;

        return;
    }

    private java.math.BigInteger[] derDecode(byte[]) throws java.io.IOException
    {
        byte[] $r0;
        org.bouncycastle.asn1.ASN1InputStream $r1;
        java.math.BigInteger[] $r2;
        org.bouncycastle.jce.provider.JDKDSASigner $r3;
        org.bouncycastle.asn1.DERObject $r4;
        org.bouncycastle.asn1.ASN1Sequence $r5;
        org.bouncycastle.asn1.DEREncodable $r6;
        org.bouncycastle.asn1.DERInteger $r7;
        java.math.BigInteger $r8;

        $r3 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r0 := @parameter0: byte[];

        $r1 = new org.bouncycastle.asn1.ASN1InputStream;

        specialinvoke $r1.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r0);

        $r4 = virtualinvoke $r1.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

        $r5 = (org.bouncycastle.asn1.ASN1Sequence) $r4;

        $r2 = newarray (java.math.BigInteger)[2];

        $r6 = virtualinvoke $r5.<org.bouncycastle.asn1.ASN1Collection: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(0);

        $r7 = (org.bouncycastle.asn1.DERInteger) $r6;

        $r8 = virtualinvoke $r7.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        $r2[0] = $r8;

        $r6 = virtualinvoke $r5.<org.bouncycastle.asn1.ASN1Collection: org.bouncycastle.asn1.DEREncodable getObjectAt(int)>(1);

        $r7 = (org.bouncycastle.asn1.DERInteger) $r6;

        $r8 = virtualinvoke $r7.<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()>();

        $r2[1] = $r8;

        return $r2;
    }

    private byte[] derEncode(java.math.BigInteger, java.math.BigInteger) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        java.math.BigInteger $r1, $r2;
        java.io.ByteArrayOutputStream $r3;
        org.bouncycastle.asn1.DEROutputStream $r4;
        org.bouncycastle.asn1.ASN1EncodableVector $r5;
        byte[] $r6;
        org.bouncycastle.asn1.DERInteger $r7;
        org.bouncycastle.asn1.DERSequence $r8;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = new org.bouncycastle.asn1.DEROutputStream;

        specialinvoke $r4.<org.bouncycastle.asn1.DEROutputStream: void <init>(java.io.OutputStream)>($r3);

        $r5 = new org.bouncycastle.asn1.ASN1EncodableVector;

        specialinvoke $r5.<org.bouncycastle.asn1.ASN1EncodableVector: void <init>()>();

        $r7 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r7.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r1);

        virtualinvoke $r5.<org.bouncycastle.asn1.DEREncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r7);

        $r7 = new org.bouncycastle.asn1.DERInteger;

        specialinvoke $r7.<org.bouncycastle.asn1.DERInteger: void <init>(java.math.BigInteger)>($r2);

        virtualinvoke $r5.<org.bouncycastle.asn1.DEREncodableVector: void add(org.bouncycastle.asn1.DEREncodable)>($r7);

        $r8 = new org.bouncycastle.asn1.DERSequence;

        specialinvoke $r8.<org.bouncycastle.asn1.DERSequence: void <init>(org.bouncycastle.asn1.DEREncodableVector)>($r5);

        virtualinvoke $r4.<org.bouncycastle.asn1.DEROutputStream: void writeObject(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r6;
    }

    protected java.lang.Object engineGetParameter(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }

    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        java.security.PrivateKey $r1;
        org.bouncycastle.crypto.params.ParametersWithRandom $r2;
        java.security.SecureRandom $r3;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r4;
        org.bouncycastle.crypto.Digest $r5;
        org.bouncycastle.crypto.DSA $r6;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: java.security.PrivateKey;

        $r4 = staticinvoke <org.bouncycastle.jce.provider.DSAUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r1);

        $r5 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.Digest: void reset()>();

        $r3 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: java.security.SecureRandom random>;

        if $r3 == null goto label1;

        $r6 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.DSA signer>;

        $r2 = new org.bouncycastle.crypto.params.ParametersWithRandom;

        $r3 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: java.security.SecureRandom random>;

        specialinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithRandom: void <init>(org.bouncycastle.crypto.CipherParameters,java.security.SecureRandom)>($r4, $r3);

        interfaceinvoke $r6.<org.bouncycastle.crypto.DSA: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r2);

        return;

     label1:
        $r6 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.DSA signer>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.DSA: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r4);

        return;
    }

    protected void engineInitSign(java.security.PrivateKey, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        java.security.PrivateKey $r1;
        java.security.SecureRandom $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: java.security.PrivateKey;

        $r2 := @parameter1: java.security.SecureRandom;

        $r0.<org.bouncycastle.jce.provider.JDKDSASigner: java.security.SecureRandom random> = $r2;

        virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKDSASigner: void engineInitSign(java.security.PrivateKey)>($r1);

        return;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        java.security.PublicKey $r1;
        boolean $z0;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r2;
        org.bouncycastle.crypto.Digest $r3;
        org.bouncycastle.crypto.DSA $r4;
        byte[] $r5;
        java.security.InvalidKeyException $r6;
        java.lang.Exception $r7;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: java.security.PublicKey;

        $z0 = $r1 instanceof java.security.interfaces.DSAKey;

        if $z0 == 0 goto label2;

        $r2 = staticinvoke <org.bouncycastle.jce.provider.DSAUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r1);

     label1:
        $r3 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.Digest: void reset()>();

        $r4 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.DSA signer>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.DSA: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, $r2);

        return;

     label2:
        $r5 = interfaceinvoke $r1.<java.security.PublicKey: byte[] getEncoded()>();

        $r1 = staticinvoke <org.bouncycastle.jce.provider.JDKKeyFactory: java.security.PublicKey createPublicKeyFromDERStream(byte[])>($r5);

     label3:
        $z0 = $r1 instanceof java.security.interfaces.DSAKey;

     label4:
        if $z0 == 0 goto label6;

        $r2 = staticinvoke <org.bouncycastle.jce.provider.DSAUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r1);

     label5:
        goto label1;

     label6:
        $r6 = new java.security.InvalidKeyException;

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in DSA based signer");

        throw $r6;

     label7:
        $r7 := @caughtexception;

        $r6 = new java.security.InvalidKeyException;

        specialinvoke $r6.<java.security.InvalidKeyException: void <init>(java.lang.String)>("can\'t recognise key type in DSA based signer");

        throw $r6;

        catch java.lang.Exception from label2 to label3 with label7;
        catch java.lang.Exception from label4 to label5 with label7;
        catch java.lang.Exception from label6 to label7 with label7;
    }

    protected void engineSetParameter(java.lang.String, java.lang.Object)
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r3;
    }

    protected void engineSetParameter(java.security.spec.AlgorithmParameterSpec)
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        java.security.spec.AlgorithmParameterSpec $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("engineSetParameter unsupported");

        throw $r2;
    }

    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        byte[] $r1;
        org.bouncycastle.crypto.Digest $r2;
        int $i0;
        org.bouncycastle.crypto.DSA $r3;
        java.math.BigInteger[] $r4;
        java.math.BigInteger $r5, $r6;
        java.lang.Exception $r7;
        java.security.SignatureException $r8;
        java.lang.String $r9;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r2.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r1 = newarray (byte)[$i0];

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>($r1, 0);

     label1:
        $r3 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.DSA signer>;

        $r4 = interfaceinvoke $r3.<org.bouncycastle.crypto.DSA: java.math.BigInteger[] generateSignature(byte[])>($r1);

        $r5 = $r4[0];

        $r6 = $r4[1];

        $r1 = specialinvoke $r0.<org.bouncycastle.jce.provider.JDKDSASigner: byte[] derEncode(java.math.BigInteger,java.math.BigInteger)>($r5, $r6);

     label2:
        return $r1;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.security.SignatureException;

        $r9 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r8.<java.security.SignatureException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        byte $b0;
        org.bouncycastle.crypto.Digest $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $b0 := @parameter0: byte;

        $r1 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Digest: void update(byte)>($b0);

        return;
    }

    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        byte[] $r1;
        int $i0, $i1;
        org.bouncycastle.crypto.Digest $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Digest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }

    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.bouncycastle.jce.provider.JDKDSASigner $r0;
        byte[] $r1, $r3;
        java.lang.Exception $r2;
        org.bouncycastle.crypto.Digest $r4;
        int $i0;
        java.math.BigInteger[] $r5;
        org.bouncycastle.crypto.DSA $r6;
        java.math.BigInteger $r7, $r8;
        boolean $z0;
        java.security.SignatureException $r9;

        $r0 := @this: org.bouncycastle.jce.provider.JDKDSASigner;

        $r1 := @parameter0: byte[];

        $r4 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest>;

        $i0 = interfaceinvoke $r4.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r3 = newarray (byte)[$i0];

        $r4 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.Digest digest>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>($r3, 0);

     label1:
        $r5 = specialinvoke $r0.<org.bouncycastle.jce.provider.JDKDSASigner: java.math.BigInteger[] derDecode(byte[])>($r1);

     label2:
        $r6 = $r0.<org.bouncycastle.jce.provider.JDKDSASigner: org.bouncycastle.crypto.DSA signer>;

        $r7 = $r5[0];

        $r8 = $r5[1];

        $z0 = interfaceinvoke $r6.<org.bouncycastle.crypto.DSA: boolean verifySignature(byte[],java.math.BigInteger,java.math.BigInteger)>($r3, $r7, $r8);

        return $z0;

     label3:
        $r2 := @caughtexception;

        $r9 = new java.security.SignatureException;

        specialinvoke $r9.<java.security.SignatureException: void <init>(java.lang.String)>("error decoding signature bytes.");

        throw $r9;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
