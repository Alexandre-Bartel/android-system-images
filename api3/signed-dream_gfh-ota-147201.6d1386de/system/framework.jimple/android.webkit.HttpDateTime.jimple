class android.webkit.HttpDateTime extends java.lang.Object
{
    private static final java.util.regex.Pattern HTTP_DATE_ANSIC_PATTERN;
    private static final java.lang.String HTTP_DATE_ANSIC_REGEXP;
    private static final java.util.regex.Pattern HTTP_DATE_RFC_PATTERN;
    private static final java.lang.String HTTP_DATE_RFC_REGEXP;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <android.webkit.HttpDateTime: java.lang.String HTTP_DATE_RFC_REGEXP> = "([0-9]{1,2})[- ]([A-Za-z]{3,3})[- ]([0-9]{2,4})[ ]([0-9][0-9]:[0-9][0-9]:[0-9][0-9])";

        <android.webkit.HttpDateTime: java.lang.String HTTP_DATE_ANSIC_REGEXP> = "[ ]([A-Za-z]{3,3})[ ]+([0-9]{1,2})[ ]([0-9][0-9]:[0-9][0-9]:[0-9][0-9])[ ]([0-9]{2,4})";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([0-9]{1,2})[- ]([A-Za-z]{3,3})[- ]([0-9]{2,4})[ ]([0-9][0-9]:[0-9][0-9]:[0-9][0-9])");

        <android.webkit.HttpDateTime: java.util.regex.Pattern HTTP_DATE_RFC_PATTERN> = $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[ ]([A-Za-z]{3,3})[ ]+([0-9]{1,2})[ ]([0-9][0-9]:[0-9][0-9]:[0-9][0-9])[ ]([0-9]{2,4})");

        <android.webkit.HttpDateTime: java.util.regex.Pattern HTTP_DATE_ANSIC_PATTERN> = $r0;

        return;
    }

    void <init>()
    {
        android.webkit.HttpDateTime $r0;

        $r0 := @this: android.webkit.HttpDateTime;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int getDate(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i2;
        char $c1;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 2 goto label1;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i0 = $c1 - 48;

        $i0 = $i0 * 10;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        $i2 = $c1 - 48;

        $i0 = $i0 + $i2;

        return $i0;

     label1:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i0 = $c1 - 48;

        return $i0;
    }

    private static int getMonth(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;
        char $c1, $c2;
        java.lang.IllegalArgumentException $r1;

        $r0 := @parameter0: java.lang.String;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        $c2 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c2);

        $i0 = $c1 + $c2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2);

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);

        $i0 = $i0 + $c1;

        $i0 = $i0 - 291;

        lookupswitch($i0)
        {
            case 9: goto label13;
            case 10: goto label03;
            case 22: goto label02;
            case 26: goto label09;
            case 29: goto label04;
            case 32: goto label05;
            case 35: goto label11;
            case 36: goto label06;
            case 37: goto label10;
            case 40: goto label08;
            case 42: goto label07;
            case 48: goto label12;
            default: goto label01;
        };

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;

     label02:
        return 0;

     label03:
        return 1;

     label04:
        return 2;

     label05:
        return 3;

     label06:
        return 4;

     label07:
        return 5;

     label08:
        return 6;

     label09:
        return 7;

     label10:
        return 8;

     label11:
        return 9;

     label12:
        return 10;

     label13:
        return 11;
    }

    private static android.webkit.HttpDateTime$TimeOfDay getTime(java.lang.String)
    {
        java.lang.String $r0;
        android.webkit.HttpDateTime$TimeOfDay $r1;
        char $c0;
        int $i1, $i2;

        $r0 := @parameter0: java.lang.String;

        $r1 = new android.webkit.HttpDateTime$TimeOfDay;

        specialinvoke $r1.<android.webkit.HttpDateTime$TimeOfDay: void <init>(android.webkit.HttpDateTime$1)>(null);

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i1 = $c0 - 48;

        $i1 = $i1 * 10;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        $i2 = $c0 - 48;

        $i1 = $i1 + $i2;

        $r1.<android.webkit.HttpDateTime$TimeOfDay: int hour> = $i1;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3);

        $i1 = $c0 - 48;

        $i1 = $i1 * 10;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(4);

        $i2 = $c0 - 48;

        $i1 = $i1 + $i2;

        $r1.<android.webkit.HttpDateTime$TimeOfDay: int minute> = $i1;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(6);

        $i1 = $c0 - 48;

        $i1 = $i1 * 10;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(7);

        $i2 = $c0 - 48;

        $i1 = $i1 + $i2;

        $r1.<android.webkit.HttpDateTime$TimeOfDay: int second> = $i1;

        return $r1;
    }

    private static int getYear(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i2;
        char $c1;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 2 goto label2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i0 = $c1 - 48;

        $i0 = $i0 * 10;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        $i2 = $c1 - 48;

        $i0 = $i0 + $i2;

        if $i0 < 70 goto label1;

        $i0 = $i0 + 1900;

        return $i0;

     label1:
        $i0 = $i0 + 2000;

        return $i0;

     label2:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $i0 = $c1 - 48;

        $i0 = $i0 * 1000;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(1);

        $i2 = $c1 - 48;

        $i2 = $i2 * 100;

        $i0 = $i0 + $i2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(2);

        $i2 = $c1 - 48;

        $i2 = $i2 * 10;

        $i0 = $i0 + $i2;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3);

        $i2 = $c1 - 48;

        $i0 = $i0 + $i2;

        return $i0;
    }

    public static java.lang.Long parse(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.lang.String $r0;
        android.text.format.Time $r1;
        android.webkit.HttpDateTime$TimeOfDay $r2;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        long $l6;
        java.lang.Long $r5;
        java.lang.IllegalArgumentException $r6;

        $r0 := @parameter0: java.lang.String;

        $r2 = new android.webkit.HttpDateTime$TimeOfDay;

        specialinvoke $r2.<android.webkit.HttpDateTime$TimeOfDay: void <init>(android.webkit.HttpDateTime$1)>(null);

        $r3 = <android.webkit.HttpDateTime: java.util.regex.Pattern HTTP_DATE_RFC_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i0 = staticinvoke <android.webkit.HttpDateTime: int getDate(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i1 = staticinvoke <android.webkit.HttpDateTime: int getMonth(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $i2 = staticinvoke <android.webkit.HttpDateTime: int getYear(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $r2 = staticinvoke <android.webkit.HttpDateTime: android.webkit.HttpDateTime$TimeOfDay getTime(java.lang.String)>($r0);

     label1:
        if $i2 < 2038 goto label2;

        $i2 = 2038;

        $i1 = 0;

        $i0 = 1;

     label2:
        $r1 = new android.text.format.Time;

        specialinvoke $r1.<android.text.format.Time: void <init>(java.lang.String)>("UTC");

        $i3 = $r2.<android.webkit.HttpDateTime$TimeOfDay: int second>;

        $i4 = $r2.<android.webkit.HttpDateTime$TimeOfDay: int minute>;

        $i5 = $r2.<android.webkit.HttpDateTime$TimeOfDay: int hour>;

        virtualinvoke $r1.<android.text.format.Time: void set(int,int,int,int,int,int)>($i3, $i4, $i5, $i0, $i1, $i2);

        $l6 = virtualinvoke $r1.<android.text.format.Time: long toMillis(boolean)>(0);

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        return $r5;

     label3:
        $r3 = <android.webkit.HttpDateTime: java.util.regex.Pattern HTTP_DATE_ANSIC_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r0);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label4;

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i1 = staticinvoke <android.webkit.HttpDateTime: int getMonth(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i0 = staticinvoke <android.webkit.HttpDateTime: int getDate(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        $r2 = staticinvoke <android.webkit.HttpDateTime: android.webkit.HttpDateTime$TimeOfDay getTime(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        $i2 = staticinvoke <android.webkit.HttpDateTime: int getYear(java.lang.String)>($r0);

        goto label1;

     label4:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;
    }
}
