public class org.apache.harmony.xnet.provider.jsse.SSLContextImpl extends javax.net.ssl.SSLContextSpi
{
    private org.apache.harmony.xnet.provider.jsse.ClientSessionContext clientSessionContext;
    private org.apache.harmony.xnet.provider.jsse.ServerSessionContext serverSessionContext;
    protected org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters;

    public void <init>()
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        specialinvoke $r0.<javax.net.ssl.SSLContextSpi: void <init>()>();

        return;
    }

    public javax.net.ssl.SSLEngine engineCreateSSLEngine()
    {
        java.lang.Object $r0;
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;
        java.lang.IllegalStateException $r3;
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r4;

        $r1 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        $r2 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SSLContext is not initiallized.");

        throw $r3;

     label1:
        $r4 = new org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r2 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r0 = virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.Object clone()>();

        $r2 = (org.apache.harmony.xnet.provider.jsse.SSLParameters) $r0;

        specialinvoke $r4.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters)>($r2);

        return $r4;
    }

    public javax.net.ssl.SSLEngine engineCreateSSLEngine(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        java.lang.Object $r1;
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r2;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r3;
        java.lang.IllegalStateException $r4;
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r5;

        $r2 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r3 = $r2.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SSLContext is not initiallized.");

        throw $r4;

     label1:
        $r5 = new org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r3 = $r2.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r1 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.Object clone()>();

        $r3 = (org.apache.harmony.xnet.provider.jsse.SSLParameters) $r1;

        specialinvoke $r5.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void <init>(java.lang.String,int,org.apache.harmony.xnet.provider.jsse.SSLParameters)>($r0, $i0, $r3);

        return $r5;
    }

    public volatile javax.net.ssl.SSLSessionContext engineGetClientSessionContext()
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;
        org.apache.harmony.xnet.provider.jsse.ClientSessionContext $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        $r1 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.ClientSessionContext engineGetClientSessionContext()>();

        return $r1;
    }

    public org.apache.harmony.xnet.provider.jsse.ClientSessionContext engineGetClientSessionContext()
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;
        org.apache.harmony.xnet.provider.jsse.ClientSessionContext r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.ClientSessionContext clientSessionContext>;

        return r1;
    }

    public volatile javax.net.ssl.SSLSessionContext engineGetServerSessionContext()
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        $r1 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.ServerSessionContext engineGetServerSessionContext()>();

        return $r1;
    }

    public org.apache.harmony.xnet.provider.jsse.ServerSessionContext engineGetServerSessionContext()
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.ServerSessionContext serverSessionContext>;

        return r1;
    }

    public javax.net.ssl.SSLServerSocketFactory engineGetServerSocketFactory()
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;
        java.lang.IllegalStateException $r2;
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SSLContext is not initiallized.");

        throw $r2;

     label1:
        $r3 = new org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        specialinvoke $r3.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketFactoryImpl: void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters)>($r1);

        return $r3;
    }

    public javax.net.ssl.SSLSocketFactory engineGetSocketFactory()
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;
        java.lang.IllegalStateException $r2;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("SSLContext is not initiallized.");

        throw $r2;

     label1:
        $r3 = new org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        specialinvoke $r3.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketFactoryImpl: void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters)>($r1);

        return $r3;
    }

    public void engineInit(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom) throws java.security.KeyManagementException
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;
        javax.net.ssl.KeyManager[] $r1;
        javax.net.ssl.TrustManager[] $r2;
        java.security.SecureRandom $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        $r1 := @parameter0: javax.net.ssl.KeyManager[];

        $r2 := @parameter1: javax.net.ssl.TrustManager[];

        $r3 := @parameter2: java.security.SecureRandom;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: void engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom,org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache,org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache)>($r1, $r2, $r3, null, null);

        return;
    }

    public void engineInit(javax.net.ssl.KeyManager[], javax.net.ssl.TrustManager[], java.security.SecureRandom, org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache, org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache) throws java.security.KeyManagementException
    {
        org.apache.harmony.xnet.provider.jsse.SSLContextImpl $r0;
        javax.net.ssl.KeyManager[] $r1;
        javax.net.ssl.TrustManager[] $r2;
        java.security.SecureRandom $r3;
        org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache $r4;
        org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache $r5;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r6;
        org.apache.harmony.xnet.provider.jsse.ClientSessionContext $r7;
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLContextImpl;

        $r1 := @parameter0: javax.net.ssl.KeyManager[];

        $r2 := @parameter1: javax.net.ssl.TrustManager[];

        $r3 := @parameter2: java.security.SecureRandom;

        $r4 := @parameter3: org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache;

        $r5 := @parameter4: org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache;

        $r6 = new org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r6.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void <init>(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom,org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache,org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache)>($r1, $r2, $r3, $r4, $r5);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r6;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.ClientSessionContext getClientSessionContext()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.ClientSessionContext clientSessionContext> = $r7;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r8 = virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.SSLParameters: org.apache.harmony.xnet.provider.jsse.ServerSessionContext getServerSessionContext()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLContextImpl: org.apache.harmony.xnet.provider.jsse.ServerSessionContext serverSessionContext> = $r8;

        return;
    }
}
