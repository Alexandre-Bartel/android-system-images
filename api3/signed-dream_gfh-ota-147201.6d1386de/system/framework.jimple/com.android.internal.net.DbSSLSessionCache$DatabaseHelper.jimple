public class com.android.internal.net.DbSSLSessionCache$DatabaseHelper extends android.database.sqlite.SQLiteOpenHelper
{

    public void <init>(android.content.Context)
    {
        com.android.internal.net.DbSSLSessionCache$DatabaseHelper $r0;
        android.content.Context $r1;

        $r0 := @this: com.android.internal.net.DbSSLSessionCache$DatabaseHelper;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>($r1, "ssl_sessions.db", null, 2);

        return;
    }

    public void onCreate(android.database.sqlite.SQLiteDatabase)
    {
        com.android.internal.net.DbSSLSessionCache$DatabaseHelper $r0;
        android.database.sqlite.SQLiteDatabase $r1;

        $r0 := @this: com.android.internal.net.DbSSLSessionCache$DatabaseHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE ssl_sessions (_id INTEGER PRIMARY KEY AUTOINCREMENT,hostport TEXT UNIQUE ON CONFLICT REPLACE,session TEXT,time_sec INTEGER);");

        return;
    }

    public void onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
    {
        com.android.internal.net.DbSSLSessionCache$DatabaseHelper $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        int $i0, $i1;

        $r0 := @this: com.android.internal.net.DbSSLSessionCache$DatabaseHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS ssl_sessions");

        virtualinvoke $r0.<com.android.internal.net.DbSSLSessionCache$DatabaseHelper: void onCreate(android.database.sqlite.SQLiteDatabase)>($r1);

        return;
    }
}
