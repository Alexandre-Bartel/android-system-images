class SQLite.JDBC2y.DatabaseX extends SQLite.Database
{
    static java.lang.Object lock;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <SQLite.JDBC2y.DatabaseX: java.lang.Object lock> = $r0;

        return;
    }

    public void <init>()
    {
        SQLite.JDBC2y.DatabaseX $r0;

        $r0 := @this: SQLite.JDBC2y.DatabaseX;

        specialinvoke $r0.<SQLite.Database: void <init>()>();

        return;
    }

    public void exec(java.lang.String, SQLite.Callback) throws SQLite.Exception
    {
        SQLite.JDBC2y.DatabaseX $r0;
        java.lang.String $r1;
        SQLite.Callback $r2;
        java.lang.Object $r3, $r4;
        java.lang.Throwable $r5;

        $r0 := @this: SQLite.JDBC2y.DatabaseX;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: SQLite.Callback;

        specialinvoke $r0.<SQLite.Database: void exec(java.lang.String,SQLite.Callback)>($r1, $r2);

        $r3 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        entermonitor $r3;

     label1:
        $r4 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void exec(java.lang.String, SQLite.Callback, java.lang.String[]) throws SQLite.Exception
    {
        SQLite.JDBC2y.DatabaseX $r0;
        java.lang.String $r1;
        SQLite.Callback $r2;
        java.lang.String[] $r3;
        java.lang.Object $r4, $r5;
        java.lang.Throwable $r6;

        $r0 := @this: SQLite.JDBC2y.DatabaseX;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: SQLite.Callback;

        $r3 := @parameter2: java.lang.String[];

        specialinvoke $r0.<SQLite.Database: void exec(java.lang.String,SQLite.Callback,java.lang.String[])>($r1, $r2, $r3);

        $r4 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        entermonitor $r4;

     label1:
        $r5 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

        exitmonitor $r4;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public SQLite.TableResult get_table(java.lang.String, java.lang.String[]) throws SQLite.Exception
    {
        SQLite.JDBC2y.DatabaseX $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        java.lang.Object $r3, $r5;
        SQLite.TableResult $r4;
        java.lang.Throwable $r6;

        $r0 := @this: SQLite.JDBC2y.DatabaseX;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r4 = specialinvoke $r0.<SQLite.Database: SQLite.TableResult get_table(java.lang.String,java.lang.String[])>($r1, $r2);

        $r3 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        entermonitor $r3;

     label1:
        $r5 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

        exitmonitor $r3;

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void get_table(java.lang.String, java.lang.String[], SQLite.TableResult) throws SQLite.Exception
    {
        SQLite.JDBC2y.DatabaseX $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        SQLite.TableResult $r3;
        java.lang.Object $r4, $r5;
        java.lang.Throwable $r6;

        $r0 := @this: SQLite.JDBC2y.DatabaseX;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: SQLite.TableResult;

        specialinvoke $r0.<SQLite.Database: void get_table(java.lang.String,java.lang.String[],SQLite.TableResult)>($r1, $r2, $r3);

        $r4 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        entermonitor $r4;

     label1:
        $r5 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        virtualinvoke $r5.<java.lang.Object: void notifyAll()>();

        exitmonitor $r4;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void wait(int)
    {
        SQLite.JDBC2y.DatabaseX $r0;
        int $i0;
        long $l1;
        java.lang.Object $r1, $r2;
        java.lang.Throwable $r3;
        java.lang.Exception $r4;

        $r0 := @this: SQLite.JDBC2y.DatabaseX;

        $i0 := @parameter0: int;

        $r1 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

     label1:
        entermonitor $r1;

     label2:
        $r2 = <SQLite.JDBC2y.DatabaseX: java.lang.Object lock>;

        $l1 = (long) $i0;

        virtualinvoke $r2.<java.lang.Object: void wait(long)>($l1);

        exitmonitor $r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r3;

     label6:
        $r4 := @caughtexception;

        return;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Exception from label5 to label6 with label6;
    }
}
