public class android.media.MediaRecorder extends java.lang.Object
{
    public static final int MEDIA_RECORDER_ERROR_UNKNOWN;
    public static final int MEDIA_RECORDER_INFO_MAX_DURATION_REACHED;
    public static final int MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED;
    public static final int MEDIA_RECORDER_INFO_UNKNOWN;
    private static final java.lang.String TAG;
    private android.media.MediaRecorder$EventHandler mEventHandler;
    private java.io.FileDescriptor mFd;
    private int mNativeContext;
    private android.media.MediaRecorder$OnErrorListener mOnErrorListener;
    private android.media.MediaRecorder$OnInfoListener mOnInfoListener;
    private java.lang.String mPath;
    private android.view.Surface mSurface;

    static void <clinit>()
    {
        <android.media.MediaRecorder: java.lang.String TAG> = "MediaRecorder";

        <android.media.MediaRecorder: int MEDIA_RECORDER_INFO_UNKNOWN> = 1;

        <android.media.MediaRecorder: int MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED> = 801;

        <android.media.MediaRecorder: int MEDIA_RECORDER_INFO_MAX_DURATION_REACHED> = 800;

        <android.media.MediaRecorder: int MEDIA_RECORDER_ERROR_UNKNOWN> = 1;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        return;
    }

    public void <init>()
    {
        android.media.MediaRecorder $r0;
        android.os.Looper $r1;
        android.media.MediaRecorder$EventHandler $r2;
        java.lang.ref.WeakReference $r3;

        $r0 := @this: android.media.MediaRecorder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r1 == null goto label2;

        $r2 = new android.media.MediaRecorder$EventHandler;

        specialinvoke $r2.<android.media.MediaRecorder$EventHandler: void <init>(android.media.MediaRecorder,android.media.MediaRecorder,android.os.Looper)>($r0, $r0, $r1);

        $r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler> = $r2;

     label1:
        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r0);

        specialinvoke $r0.<android.media.MediaRecorder: void native_setup(java.lang.Object)>($r3);

        return;

     label2:
        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r1 == null goto label3;

        $r2 = new android.media.MediaRecorder$EventHandler;

        specialinvoke $r2.<android.media.MediaRecorder$EventHandler: void <init>(android.media.MediaRecorder,android.media.MediaRecorder,android.os.Looper)>($r0, $r0, $r1);

        $r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler> = $r2;

        goto label1;

     label3:
        $r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler> = null;

        goto label1;
    }

    private native void _prepare() throws java.lang.IllegalStateException, java.io.IOException;

    private native void _setOutputFile(java.io.FileDescriptor, long, long) throws java.lang.IllegalStateException, java.io.IOException;

    static int access$000(android.media.MediaRecorder)
    {
        android.media.MediaRecorder $r0;
        int i0;

        $r0 := @parameter0: android.media.MediaRecorder;

        i0 = $r0.<android.media.MediaRecorder: int mNativeContext>;

        return i0;
    }

    static android.media.MediaRecorder$OnErrorListener access$100(android.media.MediaRecorder)
    {
        android.media.MediaRecorder $r0;
        android.media.MediaRecorder$OnErrorListener r1;

        $r0 := @parameter0: android.media.MediaRecorder;

        r1 = $r0.<android.media.MediaRecorder: android.media.MediaRecorder$OnErrorListener mOnErrorListener>;

        return r1;
    }

    static android.media.MediaRecorder$OnInfoListener access$200(android.media.MediaRecorder)
    {
        android.media.MediaRecorder $r0;
        android.media.MediaRecorder$OnInfoListener r1;

        $r0 := @parameter0: android.media.MediaRecorder;

        r1 = $r0.<android.media.MediaRecorder: android.media.MediaRecorder$OnInfoListener mOnInfoListener>;

        return r1;
    }

    private final native void native_finalize();

    private native void native_reset();

    private final native void native_setup(java.lang.Object) throws java.lang.IllegalStateException;

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object $r0, $r1;
        java.lang.ref.WeakReference $r2;
        android.media.MediaRecorder $r3;
        android.media.MediaRecorder$EventHandler $r4;
        android.os.Message $r5;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $r2 = (java.lang.ref.WeakReference) $r1;

        $r1 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        $r3 = (android.media.MediaRecorder) $r1;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = $r3.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler>;

        if $r4 == null goto label2;

        $r4 = $r3.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>($i0, $i1, $i2, $r0);

        $r4 = $r3.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>($r5);

        return;

     label2:
        return;
    }

    protected void finalize()
    {
        android.media.MediaRecorder $r0;

        $r0 := @this: android.media.MediaRecorder;

        specialinvoke $r0.<android.media.MediaRecorder: void native_finalize()>();

        return;
    }

    public native int getMaxAmplitude() throws java.lang.IllegalStateException;

    public void prepare() throws java.lang.IllegalStateException, java.io.IOException
    {
        android.media.MediaRecorder $r0;
        java.io.FileOutputStream $r1;
        java.io.FileDescriptor $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;
        java.io.IOException $r5;

        $r0 := @this: android.media.MediaRecorder;

        $r3 = $r0.<android.media.MediaRecorder: java.lang.String mPath>;

        if $r3 == null goto label5;

        $r1 = new java.io.FileOutputStream;

        $r3 = $r0.<android.media.MediaRecorder: java.lang.String mPath>;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String)>($r3);

     label1:
        $r2 = virtualinvoke $r1.<java.io.FileOutputStream: java.io.FileDescriptor getFD()>();

        specialinvoke $r0.<android.media.MediaRecorder: void _setOutputFile(java.io.FileDescriptor,long,long)>($r2, 0L, 0L);

     label2:
        virtualinvoke $r1.<java.io.FileOutputStream: void close()>();

     label3:
        specialinvoke $r0.<android.media.MediaRecorder: void _prepare()>();

        return;

     label4:
        $r4 := @caughtexception;

        virtualinvoke $r1.<java.io.FileOutputStream: void close()>();

        throw $r4;

     label5:
        $r2 = $r0.<android.media.MediaRecorder: java.io.FileDescriptor mFd>;

        if $r2 == null goto label6;

        $r2 = $r0.<android.media.MediaRecorder: java.io.FileDescriptor mFd>;

        specialinvoke $r0.<android.media.MediaRecorder: void _setOutputFile(java.io.FileDescriptor,long,long)>($r2, 0L, 0L);

        goto label3;

     label6:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("No valid output file");

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public native void release();

    public void reset()
    {
        android.media.MediaRecorder $r0;
        android.media.MediaRecorder$EventHandler $r1;

        $r0 := @this: android.media.MediaRecorder;

        specialinvoke $r0.<android.media.MediaRecorder: void native_reset()>();

        $r1 = $r0.<android.media.MediaRecorder: android.media.MediaRecorder$EventHandler mEventHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        return;
    }

    public native void setAudioEncoder(int) throws java.lang.IllegalStateException;

    public native void setAudioSource(int) throws java.lang.IllegalStateException;

    public native void setCamera(android.hardware.Camera);

    public native void setMaxDuration(int) throws java.lang.IllegalArgumentException;

    public native void setMaxFileSize(long) throws java.lang.IllegalArgumentException;

    public void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)
    {
        android.media.MediaRecorder $r0;
        android.media.MediaRecorder$OnErrorListener $r1;

        $r0 := @this: android.media.MediaRecorder;

        $r1 := @parameter0: android.media.MediaRecorder$OnErrorListener;

        $r0.<android.media.MediaRecorder: android.media.MediaRecorder$OnErrorListener mOnErrorListener> = $r1;

        return;
    }

    public void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)
    {
        android.media.MediaRecorder $r0;
        android.media.MediaRecorder$OnInfoListener $r1;

        $r0 := @this: android.media.MediaRecorder;

        $r1 := @parameter0: android.media.MediaRecorder$OnInfoListener;

        $r0.<android.media.MediaRecorder: android.media.MediaRecorder$OnInfoListener mOnInfoListener> = $r1;

        return;
    }

    public void setOutputFile(java.io.FileDescriptor) throws java.lang.IllegalStateException
    {
        android.media.MediaRecorder $r0;
        java.io.FileDescriptor $r1;

        $r0 := @this: android.media.MediaRecorder;

        $r1 := @parameter0: java.io.FileDescriptor;

        $r0.<android.media.MediaRecorder: java.lang.String mPath> = null;

        $r0.<android.media.MediaRecorder: java.io.FileDescriptor mFd> = $r1;

        return;
    }

    public void setOutputFile(java.lang.String) throws java.lang.IllegalStateException
    {
        android.media.MediaRecorder $r0;
        java.lang.String $r1;

        $r0 := @this: android.media.MediaRecorder;

        $r1 := @parameter0: java.lang.String;

        $r0.<android.media.MediaRecorder: java.io.FileDescriptor mFd> = null;

        $r0.<android.media.MediaRecorder: java.lang.String mPath> = $r1;

        return;
    }

    public native void setOutputFormat(int) throws java.lang.IllegalStateException;

    public void setPreviewDisplay(android.view.Surface)
    {
        android.media.MediaRecorder $r0;
        android.view.Surface $r1;

        $r0 := @this: android.media.MediaRecorder;

        $r1 := @parameter0: android.view.Surface;

        $r0.<android.media.MediaRecorder: android.view.Surface mSurface> = $r1;

        return;
    }

    public native void setVideoEncoder(int) throws java.lang.IllegalStateException;

    public native void setVideoFrameRate(int) throws java.lang.IllegalStateException;

    public native void setVideoSize(int, int) throws java.lang.IllegalStateException;

    public native void setVideoSource(int) throws java.lang.IllegalStateException;

    public native void start() throws java.lang.IllegalStateException;

    public native void stop() throws java.lang.IllegalStateException;
}
