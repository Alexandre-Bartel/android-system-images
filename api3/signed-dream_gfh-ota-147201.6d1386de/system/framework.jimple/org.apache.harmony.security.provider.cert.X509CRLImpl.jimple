public class org.apache.harmony.security.provider.cert.X509CRLImpl extends java.security.cert.X509CRL
{
    private final org.apache.harmony.security.x509.CertificateList crl;
    private byte[] encoding;
    private java.util.ArrayList entries;
    private boolean entriesRetrieved;
    private int entriesSize;
    private final org.apache.harmony.security.x509.Extensions extensions;
    private boolean isIndirectCRL;
    private javax.security.auth.x500.X500Principal issuer;
    private int nonIndirectEntriesSize;
    private boolean nullSigAlgParams;
    private java.lang.String sigAlgName;
    private java.lang.String sigAlgOID;
    private byte[] sigAlgParams;
    private byte[] signature;
    private final org.apache.harmony.security.x509.TBSCertList tbsCertList;
    private byte[] tbsCertListEncoding;

    public void <init>(java.io.InputStream) throws java.security.cert.CRLException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.io.InputStream $r1;
        org.apache.harmony.security.asn1.ASN1Sequence $r2;
        java.lang.Object $r3;
        org.apache.harmony.security.x509.CertificateList $r4;
        org.apache.harmony.security.x509.TBSCertList $r5;
        org.apache.harmony.security.x509.Extensions $r6;
        java.io.IOException $r7;
        java.security.cert.CRLException $r8;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke $r0.<java.security.cert.X509CRL: void <init>()>();

        $r2 = <org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(java.io.InputStream)>($r1);

     label2:
        $r4 = (org.apache.harmony.security.x509.CertificateList) $r3;

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl> = $r4;

     label3:
        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.x509.TBSCertList getTbsCertList()>();

     label4:
        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList> = $r5;

     label5:
        $r5 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r6 = virtualinvoke $r5.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.Extensions getCrlExtensions()>();

     label6:
        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions> = $r6;

        return;

     label7:
        $r7 := @caughtexception;

        $r8 = new java.security.cert.CRLException;

        specialinvoke $r8.<java.security.cert.CRLException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void <init>(org.apache.harmony.security.x509.CertificateList)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        org.apache.harmony.security.x509.CertificateList $r1;
        org.apache.harmony.security.x509.TBSCertList $r2;
        org.apache.harmony.security.x509.Extensions $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 := @parameter0: org.apache.harmony.security.x509.CertificateList;

        specialinvoke $r0.<java.security.cert.X509CRL: void <init>()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl> = $r1;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.x509.TBSCertList getTbsCertList()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList> = $r2;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.Extensions getCrlExtensions()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions> = $r3;

        return;
    }

    public void <init>(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        byte[] $r1;
        java.lang.Object $r2;
        org.apache.harmony.security.asn1.ASN1Sequence $r3;
        org.apache.harmony.security.x509.CertificateList $r4;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 := @parameter0: byte[];

        $r3 = <org.apache.harmony.security.x509.CertificateList: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r2 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>($r1);

        $r4 = (org.apache.harmony.security.x509.CertificateList) $r2;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: void <init>(org.apache.harmony.security.x509.CertificateList)>($r4);

        return;
    }

    private void retirieveEntries()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        org.apache.harmony.security.x509.TBSCertList $r1;
        java.util.List $r2;
        int $i0, $i1;
        java.util.ArrayList $r3;
        javax.security.auth.x500.X500Principal $r4, $r7;
        java.lang.Object $r5;
        org.apache.harmony.security.x509.TBSCertList$RevokedCertificate $r6;
        org.apache.harmony.security.provider.cert.X509CRLEntryImpl $r8;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean entriesRetrieved> = 1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertList: java.util.List getRevokedCertificates()>();

        if $r2 != null goto label1;

        return;

     label1:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize> = $i0;

        $r3 = new java.util.ArrayList;

        $i0 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize>;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries> = $r3;

        $r4 = null;

        $i0 = 0;

     label2:
        $i1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize>;

        if $i0 >= $i1 goto label4;

        $r5 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = (org.apache.harmony.security.x509.TBSCertList$RevokedCertificate) $r5;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.TBSCertList$RevokedCertificate: javax.security.auth.x500.X500Principal getIssuer()>();

        if $r7 == null goto label3;

        $r4 = $r7;

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean isIndirectCRL> = 1;

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int nonIndirectEntriesSize> = $i0;

     label3:
        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        $r8 = new org.apache.harmony.security.provider.cert.X509CRLEntryImpl;

        specialinvoke $r8.<org.apache.harmony.security.provider.cert.X509CRLEntryImpl: void <init>(org.apache.harmony.security.x509.TBSCertList$RevokedCertificate,javax.security.auth.x500.X500Principal)>($r6, $r4);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $i0 = $i0 + 1;

        goto label2;

     label4:
        return;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.util.Set $r1;
        org.apache.harmony.security.x509.Extensions $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.Set getCriticalExtensions()>();

        return $r1;
    }

    public byte[] getEncoded() throws java.security.cert.CRLException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        byte[] $r1, $r3, $r4;
        org.apache.harmony.security.x509.CertificateList $r2;
        int $i0;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.CertificateList: byte[] getEncoded()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding>;

        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] encoding>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i0);

        return $r1;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.Extensions $r2;
        org.apache.harmony.security.x509.Extension $r3;
        byte[] $r4;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: org.apache.harmony.security.x509.Extension getExtensionByOID(java.lang.String)>($r1);

        if $r3 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.Extension: byte[] getRawExtnValue()>();

        return $r4;
    }

    public java.security.Principal getIssuerDN()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        org.apache.harmony.security.x509.TBSCertList $r2;
        org.apache.harmony.security.x501.Name $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x501.Name getIssuer()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer>;

        return $r1;
    }

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        org.apache.harmony.security.x509.TBSCertList $r2;
        org.apache.harmony.security.x501.Name $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x501.Name getIssuer()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal issuer>;

        return $r1;
    }

    public java.util.Date getNextUpdate()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.util.Date $r1;
        org.apache.harmony.security.x509.TBSCertList $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: java.util.Date getNextUpdate()>();

        return $r1;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.util.Set $r1;
        org.apache.harmony.security.x509.Extensions $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.Set getNonCriticalExtensions()>();

        return $r1;
    }

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.math.BigInteger $r1, $r5;
        boolean $z0;
        java.util.ArrayList $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.security.cert.X509CRLEntry $r4;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 := @parameter0: java.math.BigInteger;

        $z0 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean entriesRetrieved>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: void retirieveEntries()>();

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        if $r2 != null goto label2;

        return null;

     label2:
        $i0 = 0;

     label3:
        $i1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int nonIndirectEntriesSize>;

        if $i0 >= $i1 goto label5;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (java.security.cert.X509CRLEntry) $r3;

        $r5 = virtualinvoke $r4.<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()>();

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        return $r4;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        return null;
    }

    public java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.security.cert.X509Certificate $r1;
        java.lang.NullPointerException $r2;
        boolean $z0;
        java.util.ArrayList $r3;
        java.math.BigInteger $r4, $r10;
        javax.security.auth.x500.X500Principal $r5, $r6, $r7;
        int $i0, $i1;
        java.lang.Object $r8;
        java.security.cert.X509CRLEntry $r9;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        if $r1 != null goto label01;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label01:
        $z0 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean entriesRetrieved>;

        if $z0 != 0 goto label02;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: void retirieveEntries()>();

     label02:
        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        if $r3 != null goto label03;

        return null;

     label03:
        $r4 = virtualinvoke $r1.<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()>();

        $z0 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean isIndirectCRL>;

        if $z0 == 0 goto label08;

        $r5 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r6 = $r5;

        $r7 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $z0 = virtualinvoke $r5.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label04;

        $r6 = null;

     label04:
        $i0 = 0;

     label05:
        $i1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize>;

        if $i0 >= $i1 goto label11;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        $r8 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r9 = (java.security.cert.X509CRLEntry) $r8;

        $r10 = virtualinvoke $r9.<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()>();

        $z0 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label07;

        $r5 = virtualinvoke $r9.<java.security.cert.X509CRLEntry: javax.security.auth.x500.X500Principal getCertificateIssuer()>();

        if $r6 == null goto label06;

        $z0 = virtualinvoke $r6.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label07;

        return $r9;

     label06:
        if $r5 != null goto label07;

        return $r9;

     label07:
        $i0 = $i0 + 1;

        goto label05;

     label08:
        $i0 = 0;

     label09:
        $i1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: int entriesSize>;

        if $i0 >= $i1 goto label11;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        $r8 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r9 = (java.security.cert.X509CRLEntry) $r8;

        $r10 = virtualinvoke $r9.<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()>();

        $z0 = virtualinvoke $r4.<java.math.BigInteger: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label10;

        return $r9;

     label10:
        $i0 = $i0 + 1;

        goto label09;

     label11:
        return null;
    }

    public java.util.Set getRevokedCertificates()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.util.ArrayList $r1;
        boolean $z0;
        java.util.HashSet $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $z0 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean entriesRetrieved>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: void retirieveEntries()>();

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        if $r1 != null goto label2;

        return null;

     label2:
        $r2 = new java.util.HashSet;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.util.ArrayList entries>;

        specialinvoke $r2.<java.util.HashSet: void <init>(java.util.Collection)>($r1);

        return $r2;
    }

    public java.lang.String getSigAlgName()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.TBSCertList $r2;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        $r1 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r1);

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName>;

        if $r1 != null goto label1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName>;

        return $r1;
    }

    public java.lang.String getSigAlgOID()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.TBSCertList $r2;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        $r1 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r1);

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName>;

        if $r1 != null goto label1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgName> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String sigAlgOID>;

        return $r1;
    }

    public byte[] getSigAlgParams()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        boolean $z0;
        byte[] $r1;
        org.apache.harmony.security.x509.TBSCertList $r2;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $z0 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean nullSigAlgParams>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] sigAlgParams>;

        if $r1 != null goto label2;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] sigAlgParams> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] sigAlgParams>;

        if $r1 != null goto label2;

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: boolean nullSigAlgParams> = 1;

        return null;

     label2:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] sigAlgParams>;

        return $r1;
    }

    public byte[] getSignature()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        byte[] $r1, $r3, $r4;
        org.apache.harmony.security.x509.CertificateList $r2;
        int $i0;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.CertificateList: byte[] getSignatureValue()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature>;

        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] signature>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i0);

        return $r1;
    }

    public byte[] getTBSCertList() throws java.security.cert.CRLException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        byte[] $r1, $r3, $r4;
        org.apache.harmony.security.x509.TBSCertList $r2;
        int $i0;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: byte[] getEncoded()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding>;

        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: byte[] tbsCertListEncoding>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i0);

        return $r1;
    }

    public java.util.Date getThisUpdate()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.util.Date $r1;
        org.apache.harmony.security.x509.TBSCertList $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertList: java.util.Date getThisUpdate()>();

        return $r1;
    }

    public int getVersion()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        int $i0;
        org.apache.harmony.security.x509.TBSCertList $r1;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertList: int getVersion()>();

        return $i0;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        boolean $z0;
        org.apache.harmony.security.x509.Extensions $r1;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.security.x509.Extensions: boolean hasUnsupportedCritical()>();

        return $z0;
    }

    public boolean isRevoked(java.security.cert.Certificate)
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.security.cert.X509CRLEntry $r1;
        java.security.cert.Certificate $r2;
        boolean $z0;
        java.security.cert.X509Certificate $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 := @parameter0: java.security.cert.Certificate;

        $z0 = $r2 instanceof java.security.cert.X509Certificate;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = (java.security.cert.X509Certificate) $r2;

        $r1 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)>($r3);

        if $r1 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.CertificateList $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.CertificateList: java.lang.String toString()>();

        return $r1;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.security.PublicKey $r1;
        java.lang.String $r2;
        java.security.Signature $r3;
        org.apache.harmony.security.x509.TBSCertList $r4;
        byte[] $r5;
        int $i0;
        org.apache.harmony.security.x509.CertificateList $r6;
        boolean $z0;
        java.security.SignatureException $r7;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 := @parameter0: java.security.PublicKey;

        $r2 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String getSigAlgName()>();

        $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2);

        virtualinvoke $r3.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1);

        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x509.TBSCertList: byte[] getEncoded()>();

        $i0 = lengthof $r5;

        virtualinvoke $r3.<java.security.Signature: void update(byte[],int,int)>($r5, 0, $i0);

        $r6 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r5 = virtualinvoke $r6.<org.apache.harmony.security.x509.CertificateList: byte[] getSignatureValue()>();

        $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r5);

        if $z0 != 0 goto label1;

        $r7 = new java.security.SignatureException;

        $r2 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.15C");

        specialinvoke $r7.<java.security.SignatureException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label1:
        return;
    }

    public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CRLException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        org.apache.harmony.security.provider.cert.X509CRLImpl $r0;
        java.security.PublicKey $r1;
        java.lang.String $r2, $r3;
        java.security.Signature $r4;
        org.apache.harmony.security.x509.TBSCertList $r5;
        byte[] $r6;
        int $i0;
        org.apache.harmony.security.x509.CertificateList $r7;
        boolean $z0;
        java.security.SignatureException $r8;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CRLImpl;

        $r1 := @parameter0: java.security.PublicKey;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: java.lang.String getSigAlgName()>();

        $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r3, $r2);

        virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1);

        $r5 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.TBSCertList tbsCertList>;

        $r6 = virtualinvoke $r5.<org.apache.harmony.security.x509.TBSCertList: byte[] getEncoded()>();

        $i0 = lengthof $r6;

        virtualinvoke $r4.<java.security.Signature: void update(byte[],int,int)>($r6, 0, $i0);

        $r7 = $r0.<org.apache.harmony.security.provider.cert.X509CRLImpl: org.apache.harmony.security.x509.CertificateList crl>;

        $r6 = virtualinvoke $r7.<org.apache.harmony.security.x509.CertificateList: byte[] getSignatureValue()>();

        $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r6);

        if $z0 != 0 goto label1;

        $r8 = new java.security.SignatureException;

        $r2 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.15C");

        specialinvoke $r8.<java.security.SignatureException: void <init>(java.lang.String)>($r2);

        throw $r8;

     label1:
        return;
    }
}
