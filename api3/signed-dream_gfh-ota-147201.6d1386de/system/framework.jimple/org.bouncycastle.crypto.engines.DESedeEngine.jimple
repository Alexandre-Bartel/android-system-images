public class org.bouncycastle.crypto.engines.DESedeEngine extends org.bouncycastle.crypto.engines.DESEngine
{
    protected static final int BLOCK_SIZE;
    private boolean forEncryption;
    private int[] workingKey1;
    private int[] workingKey2;
    private int[] workingKey3;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.DESedeEngine $r0;

        $r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        specialinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: void <init>()>();

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1> = null;

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2> = null;

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3> = null;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.DESedeEngine $r0;

        $r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        return "DESede";
    }

    public int getBlockSize()
    {
        org.bouncycastle.crypto.engines.DESedeEngine $r0;

        $r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        return 8;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.engines.DESedeEngine $r0;
        boolean $z0, $z1;
        byte[] $r1, $r2, $r3, $r10;
        org.bouncycastle.crypto.CipherParameters $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.Class $r7;
        java.lang.String $r8;
        org.bouncycastle.crypto.params.KeyParameter $r9;
        int $i0;
        int[] $r11;

        $r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        $z0 := @parameter0: boolean;

        $r4 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z1 = $r4 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid parameter passed to DESede init - ");

        $r7 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label1:
        $r9 = (org.bouncycastle.crypto.params.KeyParameter) $r4;

        $r10 = virtualinvoke $r9.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        $r1 = newarray (byte)[8];

        $r2 = newarray (byte)[8];

        $r3 = newarray (byte)[8];

        $i0 = lengthof $r10;

        if $i0 <= 24 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("key size greater than 24 bytes");

        throw $r5;

     label2:
        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: boolean forEncryption> = $z0;

        $i0 = lengthof $r10;

        if $i0 != 24 goto label5;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r1, 0, $i0);

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 8, $r2, 0, $i0);

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 16, $r3, 0, $i0);

        $r11 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: int[] generateWorkingKey(boolean,byte[])>($z0, $r1);

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1> = $r11;

        if $z0 != 0 goto label4;

        $z1 = 1;

     label3:
        $r11 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: int[] generateWorkingKey(boolean,byte[])>($z1, $r2);

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2> = $r11;

        $r11 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: int[] generateWorkingKey(boolean,byte[])>($z0, $r3);

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3> = $r11;

        return;

     label4:
        $z1 = 0;

        goto label3;

     label5:
        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r1, 0, $i0);

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 8, $r2, 0, $i0);

        $r11 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: int[] generateWorkingKey(boolean,byte[])>($z0, $r1);

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1> = $r11;

        if $z0 != 0 goto label7;

        $z0 = 1;

     label6:
        $r11 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: int[] generateWorkingKey(boolean,byte[])>($z0, $r2);

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2> = $r11;

        $r11 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3> = $r11;

        return;

     label7:
        $z0 = 0;

        goto label6;
    }

    public int processBlock(byte[], int, byte[], int)
    {
        org.bouncycastle.crypto.engines.DESedeEngine $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        int[] $r3;
        java.lang.IllegalStateException $r4;
        org.bouncycastle.crypto.DataLengthException $r5;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $r3 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        if $r3 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("DESede engine not initialised");

        throw $r4;

     label1:
        $i2 = $i0 + 8;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

        $r5 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r5;

     label2:
        $i2 = $i1 + 8;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label3;

        $r5 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r5.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r5;

     label3:
        $z0 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: boolean forEncryption>;

        if $z0 == 0 goto label5;

        $r3 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: void desFunc(int[],byte[],int,byte[],int)>($r3, $r1, $i0, $r2, $i1);

        $r3 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2>;

        virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: void desFunc(int[],byte[],int,byte[],int)>($r3, $r2, $i1, $r2, $i1);

        $r3 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3>;

        virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: void desFunc(int[],byte[],int,byte[],int)>($r3, $r2, $i1, $r2, $i1);

     label4:
        return 8;

     label5:
        $r3 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey3>;

        virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: void desFunc(int[],byte[],int,byte[],int)>($r3, $r1, $i0, $r2, $i1);

        $r3 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey2>;

        virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: void desFunc(int[],byte[],int,byte[],int)>($r3, $r2, $i1, $r2, $i1);

        $r3 = $r0.<org.bouncycastle.crypto.engines.DESedeEngine: int[] workingKey1>;

        virtualinvoke $r0.<org.bouncycastle.crypto.engines.DESEngine: void desFunc(int[],byte[],int,byte[],int)>($r3, $r2, $i1, $r2, $i1);

        goto label4;
    }

    public void reset()
    {
        org.bouncycastle.crypto.engines.DESedeEngine $r0;

        $r0 := @this: org.bouncycastle.crypto.engines.DESedeEngine;

        return;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.engines.DESedeEngine: int BLOCK_SIZE> = 8;

        return;
    }
}
