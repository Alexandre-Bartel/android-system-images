public final class android.graphics.Bitmap extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final float DENSITY_SCALE_UNKNOWN;
    private static final int WORKING_COMPRESS_STORAGE;
    private static volatile android.graphics.Matrix sScaleMatrix;
    private boolean mAutoScaling;
    private float mDensityScale;
    private int mHeight;
    private final boolean mIsMutable;
    private final int mNativeBitmap;
    private byte[] mNinePatchChunk;
    private boolean mRecycled;
    private int mWidth;

    static void <clinit>()
    {
        android.graphics.Bitmap$1 $r0;

        <android.graphics.Bitmap: int WORKING_COMPRESS_STORAGE> = 4096;

        <android.graphics.Bitmap: float DENSITY_SCALE_UNKNOWN> = -1.0F;

        $r0 = new android.graphics.Bitmap$1;

        specialinvoke $r0.<android.graphics.Bitmap$1: void <init>()>();

        <android.graphics.Bitmap: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    private void <init>(int, boolean, byte[])
    {
        android.graphics.Bitmap $r0;
        int $i0;
        boolean $z0;
        byte[] $r1;
        java.lang.RuntimeException $r2;

        $r0 := @this: android.graphics.Bitmap;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: byte[];

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.graphics.Bitmap: int mWidth> = -1;

        $r0.<android.graphics.Bitmap: int mHeight> = -1;

        $r0.<android.graphics.Bitmap: float mDensityScale> = -1.0F;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("internal error: native bitmap is 0");

        throw $r2;

     label1:
        $r0.<android.graphics.Bitmap: int mNativeBitmap> = $i0;

        $r0.<android.graphics.Bitmap: boolean mIsMutable> = $z0;

        $r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = $r1;

        return;
    }

    static android.graphics.Bitmap access$000(android.os.Parcel)
    {
        android.os.Parcel $r0;
        android.graphics.Bitmap $r1;

        $r0 := @parameter0: android.os.Parcel;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel)>($r0);

        return $r1;
    }

    private void checkPixelAccess(int, int)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r1;

        $r0 := @this: android.graphics.Bitmap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>($i0, $i1);

        $i2 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        if $i0 < $i2 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must be < bitmap.width()");

        throw $r1;

     label1:
        $i0 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        if $i1 < $i0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y must be < bitmap.height()");

        throw $r1;

     label2:
        return;
    }

    private void checkPixelsAccess(int, int, int, int, int, int, int[])
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        $r0 := @this: android.graphics.Bitmap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 := @parameter6: int[];

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>($i0, $i1);

        if $i2 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be >= 0");

        throw $r2;

     label1:
        if $i3 >= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be >= 0");

        throw $r2;

     label2:
        $i0 = $i0 + $i2;

        $i6 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        if $i0 <= $i6 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x + width must be <= bitmap.width()");

        throw $r2;

     label3:
        $i0 = $i1 + $i3;

        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        if $i0 <= $i1 goto label4;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y + height must be <= bitmap.height()");

        throw $r2;

     label4:
        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        if $i0 >= $i2 goto label5;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r2;

     label5:
        $i0 = $i3 - 1;

        $i0 = $i0 * $i5;

        $i1 = $i4 + $i0;

        $i0 = lengthof $r1;

        if $i4 < 0 goto label6;

        $i3 = $i4 + $i2;

        if $i3 > $i0 goto label6;

        if $i1 < 0 goto label6;

        $i1 = $i1 + $i2;

        if $i1 <= $i0 goto label7;

     label6:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label7:
        return;
    }

    private void checkRecycled(java.lang.String)
    {
        android.graphics.Bitmap $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: java.lang.String;

        $z0 = $r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }

    private static void checkWidthHeight(int, int)
    {
        int $i0, $i1;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 > 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be > 0");

        throw $r0;

     label1:
        if $i1 > 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("height must be > 0");

        throw $r0;

     label2:
        return;
    }

    private static void checkXYSign(int, int)
    {
        int $i0, $i1;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x must be >= 0");

        throw $r0;

     label1:
        if $i1 >= 0 goto label2;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y must be >= 0");

        throw $r0;

     label2:
        return;
    }

    public static android.graphics.Bitmap createBitmap(int, int, android.graphics.Bitmap$Config)
    {
        int $i0, $i1, $i2;
        android.graphics.Bitmap$Config $r0;
        android.graphics.Bitmap $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0 := @parameter2: android.graphics.Bitmap$Config;

        $i2 = $r0.<android.graphics.Bitmap$Config: int nativeInt>;

        $r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)>(null, 0, $i0, $i0, $i1, $i2, 1);

        virtualinvoke $r1.<android.graphics.Bitmap: void eraseColor(int)>(0);

        return $r1;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1;

        $r0 := @parameter0: android.graphics.Bitmap;

        $i0 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $r0 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)>($r0, 0, 0, $i0, $i1);

        return $r0;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: android.graphics.Bitmap;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r0 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>($r0, $i0, $i1, $i2, $i3, null, 0);

        return $r0;
    }

    public static android.graphics.Bitmap createBitmap(android.graphics.Bitmap, int, int, int, int, android.graphics.Matrix, boolean)
    {
        android.graphics.Matrix $r0;
        boolean $z0, $z1;
        android.graphics.Rect $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Bitmap $r2, $r7, $r10;
        java.lang.IllegalArgumentException $r3;
        android.graphics.Canvas $r4;
        android.graphics.RectF $r5, $r9;
        float $f0, $f1;
        android.graphics.Bitmap$Config $r6;
        android.graphics.Paint $r8;

        $r2 := @parameter0: android.graphics.Bitmap;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r0 := @parameter5: android.graphics.Matrix;

        $z0 := @parameter6: boolean;

        staticinvoke <android.graphics.Bitmap: void checkXYSign(int,int)>($i1, $i2);

        staticinvoke <android.graphics.Bitmap: void checkWidthHeight(int,int)>($i3, $i4);

        $i0 = $i1 + $i3;

        $i5 = virtualinvoke $r2.<android.graphics.Bitmap: int getWidth()>();

        if $i0 <= $i5 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("x + width must be <= bitmap.width()");

        throw $r3;

     label01:
        $i0 = $i2 + $i4;

        $i5 = virtualinvoke $r2.<android.graphics.Bitmap: int getHeight()>();

        if $i0 <= $i5 goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("y + height must be <= bitmap.height()");

        throw $r3;

     label02:
        $z1 = virtualinvoke $r2.<android.graphics.Bitmap: boolean isMutable()>();

        if $z1 != 0 goto label03;

        if $i1 != 0 goto label03;

        if $i2 != 0 goto label03;

        $i0 = virtualinvoke $r2.<android.graphics.Bitmap: int getWidth()>();

        if $i3 != $i0 goto label03;

        $i0 = virtualinvoke $r2.<android.graphics.Bitmap: int getHeight()>();

        if $i4 != $i0 goto label03;

        if $r0 == null goto label16;

        $z1 = virtualinvoke $r0.<android.graphics.Matrix: boolean isIdentity()>();

        if $z1 == 0 goto label03;

        return $r2;

     label03:
        $r4 = new android.graphics.Canvas;

        specialinvoke $r4.<android.graphics.Canvas: void <init>()>();

        $r1 = new android.graphics.Rect;

        $i5 = $i1 + $i3;

        $i0 = $i2 + $i4;

        specialinvoke $r1.<android.graphics.Rect: void <init>(int,int,int,int)>($i1, $i2, $i5, $i0);

        $r5 = new android.graphics.RectF;

        $f0 = (float) $i3;

        $f1 = (float) $i4;

        specialinvoke $r5.<android.graphics.RectF: void <init>(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        if $r0 == null goto label04;

        $z1 = virtualinvoke $r0.<android.graphics.Matrix: boolean isIdentity()>();

        if $z1 == 0 goto label08;

     label04:
        $z0 = virtualinvoke $r2.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z0 == 0 goto label07;

        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label05:
        $r7 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i3, $i4, $r6);

        $r8 = null;

     label06:
        virtualinvoke $r4.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>($r7);

        virtualinvoke $r4.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>($r2, $r1, $r5, $r8);

        $f0 = virtualinvoke $r2.<android.graphics.Bitmap: float getDensityScale()>();

        virtualinvoke $r7.<android.graphics.Bitmap: void setDensityScale(float)>($f0);

        $z0 = virtualinvoke $r2.<android.graphics.Bitmap: boolean isAutoScalingEnabled()>();

        virtualinvoke $r7.<android.graphics.Bitmap: void setAutoScalingEnabled(boolean)>($z0);

        return $r7;

     label07:
        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        goto label05;

     label08:
        $z1 = virtualinvoke $r2.<android.graphics.Bitmap: boolean hasAlpha()>();

        if $z1 != 0 goto label09;

        $z1 = virtualinvoke $r0.<android.graphics.Matrix: boolean rectStaysRect()>();

        if $z1 != 0 goto label14;

     label09:
        $z1 = 1;

     label10:
        $r9 = new android.graphics.RectF;

        specialinvoke $r9.<android.graphics.RectF: void <init>()>();

        virtualinvoke $r0.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>($r9, $r5);

        $f0 = virtualinvoke $r9.<android.graphics.RectF: float width()>();

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $f0 = virtualinvoke $r9.<android.graphics.RectF: float height()>();

        $i2 = staticinvoke <java.lang.Math: int round(float)>($f0);

        if $z1 == 0 goto label15;

        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label11:
        $r10 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i1, $i2, $r6);

        $r7 = $r10;

        if $z1 == 0 goto label12;

        virtualinvoke $r10.<android.graphics.Bitmap: void eraseColor(int)>(0);

     label12:
        $f0 = $r9.<android.graphics.RectF: float left>;

        $f0 = neg $f0;

        $f1 = $r9.<android.graphics.RectF: float top>;

        $f1 = neg $f1;

        virtualinvoke $r4.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        virtualinvoke $r4.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r0);

        $r8 = new android.graphics.Paint;

        specialinvoke $r8.<android.graphics.Paint: void <init>()>();

        virtualinvoke $r8.<android.graphics.Paint: void setFilterBitmap(boolean)>($z0);

        $z0 = virtualinvoke $r0.<android.graphics.Matrix: boolean rectStaysRect()>();

        if $z0 != 0 goto label13;

        virtualinvoke $r8.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

     label13:
        goto label06;

     label14:
        $z1 = 0;

        goto label10;

     label15:
        $r6 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        goto label11;

     label16:
        return $r2;
    }

    public static android.graphics.Bitmap createBitmap(int[], int, int, int, int, android.graphics.Bitmap$Config)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.Bitmap$Config $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        android.graphics.Bitmap $r4;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: android.graphics.Bitmap$Config;

        staticinvoke <android.graphics.Bitmap: void checkWidthHeight(int,int)>($i2, $i3);

        $i4 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        if $i4 >= $i2 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("abs(stride) must be >= width");

        throw $r2;

     label1:
        $i4 = $i3 - 1;

        $i4 = $i4 * $i1;

        $i5 = $i0 + $i4;

        $i4 = lengthof $r0;

        if $i0 < 0 goto label2;

        $i6 = $i0 + $i2;

        if $i6 > $i4 goto label2;

        if $i5 < 0 goto label2;

        $i5 = $i5 + $i2;

        if $i5 <= $i4 goto label3;

     label2:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label3:
        $i4 = $r1.<android.graphics.Bitmap$Config: int nativeInt>;

        $r4 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)>($r0, $i0, $i1, $i2, $i3, $i4, 0);

        return $r4;
    }

    public static android.graphics.Bitmap createBitmap(int[], int, int, android.graphics.Bitmap$Config)
    {
        int[] $r0;
        int $i0, $i1;
        android.graphics.Bitmap$Config $r1;
        android.graphics.Bitmap $r2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: android.graphics.Bitmap$Config;

        $r2 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>($r0, 0, $i0, $i0, $i1, $r1);

        return $r2;
    }

    public static android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap, int, int, boolean)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        float $f0, $f1, $f2;
        android.graphics.Matrix $r1, $r2;
        java.lang.Throwable $r3, $r4;

        $r0 := @parameter0: android.graphics.Bitmap;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        entermonitor class "android/graphics/Bitmap";

     label01:
        $r1 = <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix>;

        <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix> = null;

        exitmonitor class "android/graphics/Bitmap";

     label02:
        if $r1 != null goto label03;

        $r1 = new android.graphics.Matrix;

        specialinvoke $r1.<android.graphics.Matrix: void <init>()>();

     label03:
        $i2 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        $i3 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $f0 = (float) $i0;

        $f1 = (float) $i2;

        $f0 = $f0 / $f1;

        $f1 = (float) $i1;

        $f2 = (float) $i3;

        $f1 = $f1 / $f2;

        virtualinvoke $r1.<android.graphics.Matrix: void setScale(float,float)>($f0, $f1);

        $r0 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>($r0, 0, 0, $i2, $i3, $r1, $z0);

        entermonitor class "android/graphics/Bitmap";

     label04:
        $r2 = <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix>;

        if $r2 != null goto label05;

        <android.graphics.Bitmap: android.graphics.Matrix sScaleMatrix> = $r1;

     label05:
        exitmonitor class "android/graphics/Bitmap";

     label06:
        return $r0;

     label07:
        $r3 := @caughtexception;

     label08:
        exitmonitor class "android/graphics/Bitmap";

     label09:
        throw $r3;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor class "android/graphics/Bitmap";

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label04 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private static native boolean nativeCompress(int, int, int, java.io.OutputStream, byte[]);

    private static native int nativeConfig(int);

    private static native android.graphics.Bitmap nativeCopy(int, int, boolean);

    private static native void nativeCopyPixelsFromBuffer(int, java.nio.Buffer);

    private static native void nativeCopyPixelsToBuffer(int, java.nio.Buffer);

    private static native android.graphics.Bitmap nativeCreate(int[], int, int, int, int, int, boolean);

    private static native android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel);

    private static native void nativeDestructor(int);

    private static native void nativeErase(int, int);

    private static native android.graphics.Bitmap nativeExtractAlpha(int, int, int[]);

    private static native int nativeGetPixel(int, int, int);

    private static native void nativeGetPixels(int, int[], int, int, int, int, int, int);

    private static native boolean nativeHasAlpha(int);

    private static native int nativeHeight(int);

    private static native void nativeRecycle(int);

    private static native int nativeRowBytes(int);

    private static native void nativeSetPixel(int, int, int, int);

    private static native void nativeSetPixels(int, int[], int, int, int, int, int, int);

    private static native int nativeWidth(int);

    private static native boolean nativeWriteToParcel(int, boolean, android.os.Parcel);

    public boolean compress(android.graphics.Bitmap$CompressFormat, int, java.io.OutputStream)
    {
        android.graphics.Bitmap $r0;
        android.graphics.Bitmap$CompressFormat $r1;
        int $i0, $i1, $i2;
        java.io.OutputStream $r2;
        boolean $z0;
        java.lang.NullPointerException $r3;
        java.lang.IllegalArgumentException $r4;
        byte[] $r5;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: android.graphics.Bitmap$CompressFormat;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.io.OutputStream;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t compress a recycled bitmap");

        if $r2 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        if $i0 < 0 goto label2;

        if $i0 <= 100 goto label3;

     label2:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("quality must be 0..100");

        throw $r4;

     label3:
        $i1 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i2 = $r1.<android.graphics.Bitmap$CompressFormat: int nativeInt>;

        $r5 = newarray (byte)[4096];

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeCompress(int,int,int,java.io.OutputStream,byte[])>($i1, $i2, $i0, $r2, $r5);

        return $z0;
    }

    public android.graphics.Bitmap copy(android.graphics.Bitmap$Config, boolean)
    {
        android.graphics.Bitmap $r0;
        android.graphics.Bitmap$Config $r1;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: android.graphics.Bitmap$Config;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t copy a recycled bitmap");

        $i1 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i0 = $r1.<android.graphics.Bitmap$Config: int nativeInt>;

        $r0 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeCopy(int,int,boolean)>($i1, $i0, $z0);

        return $r0;
    }

    public void copyPixelsFromBuffer(java.nio.Buffer)
    {
        android.graphics.Bitmap $r0;
        java.nio.Buffer $r1;
        long $l0, $l1, $l4;
        int $i2;
        boolean $z0;
        byte $b3;
        java.lang.RuntimeException $r2;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: java.nio.Buffer;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("copyPixelsFromBuffer called on recycled bitmap");

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $z0 = $r1 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label2;

        $b3 = 0;

     label1:
        $l1 = (long) $i2;

        $l1 = $l1 << $b3;

        $i2 = virtualinvoke $r0.<android.graphics.Bitmap: int getRowBytes()>();

        $l0 = (long) $i2;

        $i2 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $l4 = (long) $i2;

        $l0 = $l0 * $l4;

        $b3 = $l1 cmp $l0;

        if $b3 >= 0 goto label5;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Buffer not large enough for pixels");

        throw $r2;

     label2:
        $z0 = $r1 instanceof java.nio.ShortBuffer;

        if $z0 == 0 goto label3;

        $b3 = 1;

        goto label1;

     label3:
        $z0 = $r1 instanceof java.nio.IntBuffer;

        if $z0 == 0 goto label4;

        $b3 = 2;

        goto label1;

     label4:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unsupported Buffer subclass");

        throw $r2;

     label5:
        $i2 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeCopyPixelsFromBuffer(int,java.nio.Buffer)>($i2, $r1);

        return;
    }

    public void copyPixelsToBuffer(java.nio.Buffer)
    {
        android.graphics.Bitmap $r0;
        java.nio.Buffer $r1;
        long $l0, $l1, $l4;
        int $i2;
        boolean $z0;
        byte $b3, $b5;
        java.lang.RuntimeException $r2;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: java.nio.Buffer;

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $z0 = $r1 instanceof java.nio.ByteBuffer;

        if $z0 == 0 goto label2;

        $b3 = 0;

     label1:
        $l0 = (long) $i2;

        $l0 = $l0 << $b3;

        $i2 = virtualinvoke $r0.<android.graphics.Bitmap: int getRowBytes()>();

        $l1 = (long) $i2;

        $i2 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $l4 = (long) $i2;

        $l1 = $l1 * $l4;

        $b5 = $l0 cmp $l1;

        if $b5 >= 0 goto label5;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Buffer not large enough for pixels");

        throw $r2;

     label2:
        $z0 = $r1 instanceof java.nio.ShortBuffer;

        if $z0 == 0 goto label3;

        $b3 = 1;

        goto label1;

     label3:
        $z0 = $r1 instanceof java.nio.IntBuffer;

        if $z0 == 0 goto label4;

        $b3 = 2;

        goto label1;

     label4:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("unsupported Buffer subclass");

        throw $r2;

     label5:
        $i2 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeCopyPixelsToBuffer(int,java.nio.Buffer)>($i2, $r1);

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $l0 = (long) $i2;

        $l1 = $l1 >> $b3;

        $l0 = $l0 + $l1;

        $i2 = (int) $l0;

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i2);

        return;
    }

    public int describeContents()
    {
        android.graphics.Bitmap $r0;

        $r0 := @this: android.graphics.Bitmap;

        return 0;
    }

    public void eraseColor(int)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        $r0 := @this: android.graphics.Bitmap;

        $i0 := @parameter0: int;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t erase a recycled bitmap");

        $z0 = virtualinvoke $r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cannot erase immutable bitmaps");

        throw $r1;

     label1:
        $i1 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeErase(int,int)>($i1, $i0);

        return;
    }

    public android.graphics.Bitmap extractAlpha()
    {
        android.graphics.Bitmap $r0;

        $r0 := @this: android.graphics.Bitmap;

        $r0 = virtualinvoke $r0.<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>(null, null);

        return $r0;
    }

    public android.graphics.Bitmap extractAlpha(android.graphics.Paint, int[])
    {
        android.graphics.Bitmap $r0;
        android.graphics.Paint $r1;
        int[] $r2;
        int $i0, $i1;
        java.lang.RuntimeException $r3;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: android.graphics.Paint;

        $r2 := @parameter1: int[];

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t extractAlpha on a recycled bitmap");

        if $r1 == null goto label2;

        $i0 = $r1.<android.graphics.Paint: int mNativePaint>;

     label1:
        $i1 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $r0 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap nativeExtractAlpha(int,int,int[])>($i1, $i0, $r2);

        if $r0 != null goto label3;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Failed to extractAlpha on Bitmap");

        throw $r3;

     label2:
        $i0 = 0;

        goto label1;

     label3:
        return $r0;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.Bitmap $r0;
        int $i0;
        java.lang.Throwable $r1;

        $r0 := @this: android.graphics.Bitmap;

     label1:
        $i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeDestructor(int)>($i0);

     label2:
        specialinvoke $r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r1 := @caughtexception;

        specialinvoke $r0.<java.lang.Object: void finalize()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final android.graphics.Bitmap$Config getConfig()
    {
        android.graphics.Bitmap $r0;
        int $i0;
        android.graphics.Bitmap$Config $r1;

        $r0 := @this: android.graphics.Bitmap;

        $i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i0 = staticinvoke <android.graphics.Bitmap: int nativeConfig(int)>($i0);

        $r1 = staticinvoke <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config nativeToConfig(int)>($i0);

        return $r1;
    }

    public float getDensityScale()
    {
        android.graphics.Bitmap $r0;
        float f0;

        $r0 := @this: android.graphics.Bitmap;

        f0 = $r0.<android.graphics.Bitmap: float mDensityScale>;

        return f0;
    }

    public final int getHeight()
    {
        android.graphics.Bitmap $r0;
        int $i0;

        $r0 := @this: android.graphics.Bitmap;

        $i0 = $r0.<android.graphics.Bitmap: int mHeight>;

        if $i0 != -1 goto label1;

        $i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i0 = staticinvoke <android.graphics.Bitmap: int nativeHeight(int)>($i0);

        $r0.<android.graphics.Bitmap: int mHeight> = $i0;

        return $i0;

     label1:
        $i0 = $r0.<android.graphics.Bitmap: int mHeight>;

        return $i0;
    }

    public byte[] getNinePatchChunk()
    {
        android.graphics.Bitmap $r0;
        byte[] r1;

        $r0 := @this: android.graphics.Bitmap;

        r1 = $r0.<android.graphics.Bitmap: byte[] mNinePatchChunk>;

        return r1;
    }

    public int getPixel(int, int)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1, $i2;

        $r0 := @this: android.graphics.Bitmap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getPixel() on a recycled bitmap");

        specialinvoke $r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>($i0, $i1);

        $i2 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i0 = staticinvoke <android.graphics.Bitmap: int nativeGetPixel(int,int,int)>($i2, $i0, $i1);

        return $i0;
    }

    public void getPixels(int[], int, int, int, int, int, int)
    {
        android.graphics.Bitmap $r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call getPixels() on a recycled bitmap");

        if $i4 == 0 goto label2;

        if $i5 != 0 goto label1;

        return;

     label1:
        specialinvoke $r0.<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>($i2, $i3, $i4, $i5, $i0, $i1, $r1);

        $i6 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeGetPixels(int,int[],int,int,int,int,int,int)>($i6, $r1, $i0, $i1, $i2, $i3, $i4, $i5);

        return;

     label2:
        return;
    }

    public final int getRowBytes()
    {
        android.graphics.Bitmap $r0;
        int $i0;

        $r0 := @this: android.graphics.Bitmap;

        $i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i0 = staticinvoke <android.graphics.Bitmap: int nativeRowBytes(int)>($i0);

        return $i0;
    }

    public int getScaledHeight()
    {
        android.graphics.Bitmap $r0;
        float $f0, $f1;
        byte $b0;
        int $i1;

        $r0 := @this: android.graphics.Bitmap;

        $f0 = virtualinvoke $r0.<android.graphics.Bitmap: float getDensityScale()>();

        $b0 = $f0 cmpl -1.0F;

        if $b0 != 0 goto label1;

        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        return $i1;

     label1:
        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getHeight()>();

        $f1 = (float) $i1;

        $f0 = $f1 / $f0;

        $i1 = (int) $f0;

        return $i1;
    }

    public int getScaledWidth()
    {
        android.graphics.Bitmap $r0;
        float $f0, $f1;
        byte $b0;
        int $i1;

        $r0 := @this: android.graphics.Bitmap;

        $f0 = virtualinvoke $r0.<android.graphics.Bitmap: float getDensityScale()>();

        $b0 = $f0 cmpl -1.0F;

        if $b0 != 0 goto label1;

        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        return $i1;

     label1:
        $i1 = virtualinvoke $r0.<android.graphics.Bitmap: int getWidth()>();

        $f1 = (float) $i1;

        $f0 = $f1 / $f0;

        $i1 = (int) $f0;

        return $i1;
    }

    public final int getWidth()
    {
        android.graphics.Bitmap $r0;
        int $i0;

        $r0 := @this: android.graphics.Bitmap;

        $i0 = $r0.<android.graphics.Bitmap: int mWidth>;

        if $i0 != -1 goto label1;

        $i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $i0 = staticinvoke <android.graphics.Bitmap: int nativeWidth(int)>($i0);

        $r0.<android.graphics.Bitmap: int mWidth> = $i0;

        return $i0;

     label1:
        $i0 = $r0.<android.graphics.Bitmap: int mWidth>;

        return $i0;
    }

    public final boolean hasAlpha()
    {
        android.graphics.Bitmap $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.graphics.Bitmap;

        $i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeHasAlpha(int)>($i0);

        return $z0;
    }

    public boolean isAutoScalingEnabled()
    {
        android.graphics.Bitmap $r0;
        boolean z0;

        $r0 := @this: android.graphics.Bitmap;

        z0 = $r0.<android.graphics.Bitmap: boolean mAutoScaling>;

        return z0;
    }

    public final boolean isMutable()
    {
        android.graphics.Bitmap $r0;
        boolean z0;

        $r0 := @this: android.graphics.Bitmap;

        z0 = $r0.<android.graphics.Bitmap: boolean mIsMutable>;

        return z0;
    }

    public final boolean isRecycled()
    {
        android.graphics.Bitmap $r0;
        boolean z0;

        $r0 := @this: android.graphics.Bitmap;

        z0 = $r0.<android.graphics.Bitmap: boolean mRecycled>;

        return z0;
    }

    final int ni()
    {
        android.graphics.Bitmap $r0;
        int i0;

        $r0 := @this: android.graphics.Bitmap;

        i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        return i0;
    }

    public void recycle()
    {
        android.graphics.Bitmap $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.graphics.Bitmap;

        $z0 = $r0.<android.graphics.Bitmap: boolean mRecycled>;

        if $z0 != 0 goto label1;

        $i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeRecycle(int)>($i0);

        $r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = null;

        $r0.<android.graphics.Bitmap: boolean mRecycled> = 1;

        return;

     label1:
        return;
    }

    public void setAutoScalingEnabled(boolean)
    {
        android.graphics.Bitmap $r0;
        boolean $z0;

        $r0 := @this: android.graphics.Bitmap;

        $z0 := @parameter0: boolean;

        $r0.<android.graphics.Bitmap: boolean mAutoScaling> = $z0;

        return;
    }

    public void setDensityScale(float)
    {
        android.graphics.Bitmap $r0;
        float $f0;

        $r0 := @this: android.graphics.Bitmap;

        $f0 := @parameter0: float;

        $r0.<android.graphics.Bitmap: float mDensityScale> = $f0;

        return;
    }

    public void setNinePatchChunk(byte[])
    {
        android.graphics.Bitmap $r0;
        byte[] $r1;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: byte[];

        $r0.<android.graphics.Bitmap: byte[] mNinePatchChunk> = $r1;

        return;
    }

    public void setPixel(int, int, int)
    {
        android.graphics.Bitmap $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        $r0 := @this: android.graphics.Bitmap;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call setPixel() on a recycled bitmap");

        $z0 = virtualinvoke $r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        specialinvoke $r0.<android.graphics.Bitmap: void checkPixelAccess(int,int)>($i0, $i1);

        $i3 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPixel(int,int,int,int)>($i3, $i0, $i1, $i2);

        return;
    }

    public void setPixels(int[], int, int, int, int, int, int)
    {
        android.graphics.Bitmap $r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t call setPixels() on a recycled bitmap");

        $z0 = virtualinvoke $r0.<android.graphics.Bitmap: boolean isMutable()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label1:
        if $i4 == 0 goto label3;

        if $i5 != 0 goto label2;

        return;

     label2:
        specialinvoke $r0.<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>($i2, $i3, $i4, $i5, $i0, $i1, $r1);

        $i6 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        staticinvoke <android.graphics.Bitmap: void nativeSetPixels(int,int[],int,int,int,int,int,int)>($i6, $r1, $i0, $i1, $i2, $i3, $i4, $i5);

        return;

     label3:
        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.graphics.Bitmap $r0;
        android.os.Parcel $r1;
        int $i0;
        boolean $z0;
        java.lang.RuntimeException $r2;

        $r0 := @this: android.graphics.Bitmap;

        $r1 := @parameter0: android.os.Parcel;

        $i0 := @parameter1: int;

        specialinvoke $r0.<android.graphics.Bitmap: void checkRecycled(java.lang.String)>("Can\'t parcel a recycled bitmap");

        $i0 = $r0.<android.graphics.Bitmap: int mNativeBitmap>;

        $z0 = $r0.<android.graphics.Bitmap: boolean mIsMutable>;

        $z0 = staticinvoke <android.graphics.Bitmap: boolean nativeWriteToParcel(int,boolean,android.os.Parcel)>($i0, $z0, $r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("native writeToParcel failed");

        throw $r2;

     label1:
        return;
    }
}
