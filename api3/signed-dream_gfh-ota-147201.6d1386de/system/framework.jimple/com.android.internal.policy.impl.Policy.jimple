public class com.android.internal.policy.impl.Policy extends java.lang.Object implements com.android.internal.policy.IPolicy
{
    private static final java.lang.String TAG;
    private static final java.lang.String[] preload_classes;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.lang.ClassNotFoundException $r1;
        int $i0, $i1;
        java.lang.String $r2;
        java.lang.StringBuilder $r3;

        <com.android.internal.policy.impl.Policy: java.lang.String TAG> = "PhonePolicy";

        $r0 = newarray (java.lang.String)[7];

        $r0[0] = "com.android.internal.policy.impl.PhoneLayoutInflater";

        $r0[1] = "com.android.internal.policy.impl.PhoneWindow";

        $r0[2] = "com.android.internal.policy.impl.PhoneWindow$1";

        $r0[3] = "com.android.internal.policy.impl.PhoneWindow$ContextMenuCallback";

        $r0[4] = "com.android.internal.policy.impl.PhoneWindow$DecorView";

        $r0[5] = "com.android.internal.policy.impl.PhoneWindow$PanelFeatureState";

        $r0[6] = "com.android.internal.policy.impl.PhoneWindow$PanelFeatureState$SavedState";

        <com.android.internal.policy.impl.Policy: java.lang.String[] preload_classes> = $r0;

        $r0 = <com.android.internal.policy.impl.Policy: java.lang.String[] preload_classes>;

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        $r2 = $r0[$i1];

     label2:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r1 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not preload class for phone policy: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhonePolicy", $r2);

        goto label3;

     label5:
        return;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    public void <init>()
    {
        com.android.internal.policy.impl.Policy $r0;

        $r0 := @this: com.android.internal.policy.impl.Policy;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile android.view.LayoutInflater makeNewLayoutInflater(android.content.Context)
    {
        com.android.internal.policy.impl.Policy $r0;
        android.content.Context $r1;
        com.android.internal.policy.impl.PhoneLayoutInflater $r2;

        $r0 := @this: com.android.internal.policy.impl.Policy;

        $r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r0.<com.android.internal.policy.impl.Policy: com.android.internal.policy.impl.PhoneLayoutInflater makeNewLayoutInflater(android.content.Context)>($r1);

        return $r2;
    }

    public com.android.internal.policy.impl.PhoneLayoutInflater makeNewLayoutInflater(android.content.Context)
    {
        com.android.internal.policy.impl.Policy $r0;
        android.content.Context $r1;
        com.android.internal.policy.impl.PhoneLayoutInflater $r2;

        $r0 := @this: com.android.internal.policy.impl.Policy;

        $r1 := @parameter0: android.content.Context;

        $r2 = new com.android.internal.policy.impl.PhoneLayoutInflater;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneLayoutInflater: void <init>(android.content.Context)>($r1);

        return $r2;
    }

    public volatile android.view.Window makeNewWindow(android.content.Context)
    {
        com.android.internal.policy.impl.Policy $r0;
        android.content.Context $r1;
        com.android.internal.policy.impl.PhoneWindow $r2;

        $r0 := @this: com.android.internal.policy.impl.Policy;

        $r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke $r0.<com.android.internal.policy.impl.Policy: com.android.internal.policy.impl.PhoneWindow makeNewWindow(android.content.Context)>($r1);

        return $r2;
    }

    public com.android.internal.policy.impl.PhoneWindow makeNewWindow(android.content.Context)
    {
        com.android.internal.policy.impl.Policy $r0;
        android.content.Context $r1;
        com.android.internal.policy.impl.PhoneWindow $r2;

        $r0 := @this: com.android.internal.policy.impl.Policy;

        $r1 := @parameter0: android.content.Context;

        $r2 = new com.android.internal.policy.impl.PhoneWindow;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindow: void <init>(android.content.Context)>($r1);

        return $r2;
    }

    public volatile android.view.WindowManagerPolicy makeNewWindowManager()
    {
        com.android.internal.policy.impl.Policy $r0;
        com.android.internal.policy.impl.PhoneWindowManager $r1;

        $r0 := @this: com.android.internal.policy.impl.Policy;

        $r1 = virtualinvoke $r0.<com.android.internal.policy.impl.Policy: com.android.internal.policy.impl.PhoneWindowManager makeNewWindowManager()>();

        return $r1;
    }

    public com.android.internal.policy.impl.PhoneWindowManager makeNewWindowManager()
    {
        com.android.internal.policy.impl.Policy $r0;
        com.android.internal.policy.impl.PhoneWindowManager $r1;

        $r0 := @this: com.android.internal.policy.impl.Policy;

        $r1 = new com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke $r1.<com.android.internal.policy.impl.PhoneWindowManager: void <init>()>();

        return $r1;
    }
}
