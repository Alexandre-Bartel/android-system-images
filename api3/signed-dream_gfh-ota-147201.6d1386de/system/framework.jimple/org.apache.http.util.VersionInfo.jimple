public class org.apache.http.util.VersionInfo extends java.lang.Object
{
    public static final java.lang.String PROPERTY_MODULE;
    public static final java.lang.String PROPERTY_RELEASE;
    public static final java.lang.String PROPERTY_TIMESTAMP;
    public static final java.lang.String UNAVAILABLE;
    public static final java.lang.String VERSION_PROPERTY_FILE;
    private final java.lang.String infoClassloader;
    private final java.lang.String infoModule;
    private final java.lang.String infoPackage;
    private final java.lang.String infoRelease;
    private final java.lang.String infoTimestamp;

    protected void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.http.util.VersionInfo $r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        java.lang.IllegalArgumentException $r6;

        $r0 := @this: org.apache.http.util.VersionInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package identifier must not be null.");

        throw $r6;

     label1:
        $r0.<org.apache.http.util.VersionInfo: java.lang.String infoPackage> = $r1;

        if $r2 == null goto label6;

        $r1 = $r2;

     label2:
        $r0.<org.apache.http.util.VersionInfo: java.lang.String infoModule> = $r1;

        if $r3 == null goto label7;

        $r1 = $r3;

     label3:
        $r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease> = $r1;

        if $r4 == null goto label8;

        $r1 = $r4;

     label4:
        $r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp> = $r1;

        if $r5 == null goto label9;

        $r1 = $r5;

     label5:
        $r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader> = $r1;

        return;

     label6:
        $r1 = "UNAVAILABLE";

        goto label2;

     label7:
        $r1 = "UNAVAILABLE";

        goto label3;

     label8:
        $r1 = "UNAVAILABLE";

        goto label4;

     label9:
        $r1 = "UNAVAILABLE";

        goto label5;
    }

    protected static final org.apache.http.util.VersionInfo fromMap(java.lang.String, java.util.Map, java.lang.ClassLoader)
    {
        java.lang.String $r0, $r4, $r5, $r6, $r8;
        java.util.Map $r1;
        java.lang.ClassLoader $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Object $r7;
        int $i0;
        boolean $z0;
        org.apache.http.util.VersionInfo $r9;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Map;

        $r2 := @parameter2: java.lang.ClassLoader;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package identifier must not be null.");

        throw $r3;

     label1:
        $r4 = null;

        $r5 = null;

        $r6 = null;

        if $r1 == null goto label6;

        $r7 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("info.module");

        $r4 = (java.lang.String) $r7;

        if $r4 == null goto label2;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 >= 1 goto label2;

        $r4 = null;

     label2:
        $r7 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("info.release");

        $r5 = (java.lang.String) $r7;

        if $r5 == null goto label4;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 < 1 goto label3;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("${pom.version}");

        if $z0 == 0 goto label4;

     label3:
        $r5 = null;

     label4:
        $r7 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("info.timestamp");

        $r6 = (java.lang.String) $r7;

        if $r6 == null goto label6;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 < 1 goto label5;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("${mvn.timestamp}");

        if $z0 == 0 goto label6;

     label5:
        $r6 = null;

     label6:
        $r8 = null;

        if $r2 == null goto label7;

        $r8 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

     label7:
        $r9 = new org.apache.http.util.VersionInfo;

        specialinvoke $r9.<org.apache.http.util.VersionInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r4, $r5, $r6, $r8);

        return $r9;
    }

    public static final org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String $r0, $r7;
        java.util.Properties $r1, $r5;
        java.lang.ClassLoader $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Thread $r4;
        java.lang.StringBuilder $r6;
        java.io.InputStream $r8;
        org.apache.http.util.VersionInfo $r9;
        java.lang.Throwable $r10;
        java.io.IOException $r11;

        $r0 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.ClassLoader;

        if $r0 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package identifier must not be null.");

        throw $r3;

     label01:
        if $r2 != null goto label02;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r4.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label02:
        $r5 = null;

        $r6 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version.properties");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r7);

     label04:
        if $r8 == null goto label08;

     label05:
        $r1 = new java.util.Properties;

        specialinvoke $r1.<java.util.Properties: void <init>()>();

        virtualinvoke $r1.<java.util.Properties: void load(java.io.InputStream)>($r8);

     label06:
        $r5 = $r1;

     label07:
        virtualinvoke $r8.<java.io.InputStream: void close()>();

     label08:
        if $r5 == null goto label12;

        $r9 = staticinvoke <org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo fromMap(java.lang.String,java.util.Map,java.lang.ClassLoader)>($r0, $r5, $r2);

        return $r9;

     label09:
        $r10 := @caughtexception;

     label10:
        virtualinvoke $r8.<java.io.InputStream: void close()>();

        throw $r10;

     label11:
        $r11 := @caughtexception;

        goto label08;

     label12:
        return null;

        catch java.io.IOException from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label10 to label11 with label11;
    }

    public static final org.apache.http.util.VersionInfo[] loadVersionInfo(java.lang.String[], java.lang.ClassLoader)
    {
        java.lang.ClassLoader $r0;
        java.util.ArrayList $r1;
        java.lang.String[] $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1;
        java.lang.String $r4;
        org.apache.http.util.VersionInfo $r5;
        org.apache.http.util.VersionInfo[] $r6;
        java.lang.Object[] $r7;

        $r2 := @parameter0: java.lang.String[];

        $r0 := @parameter1: java.lang.ClassLoader;

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Package identifier list must not be null.");

        throw $r3;

     label1:
        $r1 = new java.util.ArrayList;

        $i0 = lengthof $r2;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label4;

        $r4 = $r2[$i0];

        $r5 = staticinvoke <org.apache.http.util.VersionInfo: org.apache.http.util.VersionInfo loadVersionInfo(java.lang.String,java.lang.ClassLoader)>($r4, $r0);

        if $r5 == null goto label3;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r6 = newarray (org.apache.http.util.VersionInfo)[$i0];

        $r7 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r6 = (org.apache.http.util.VersionInfo[]) $r7;

        $r6 = (org.apache.http.util.VersionInfo[]) $r6;

        return $r6;
    }

    public final java.lang.String getClassloader()
    {
        org.apache.http.util.VersionInfo $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.http.util.VersionInfo;

        r1 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader>;

        return r1;
    }

    public final java.lang.String getModule()
    {
        org.apache.http.util.VersionInfo $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.http.util.VersionInfo;

        r1 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoModule>;

        return r1;
    }

    public final java.lang.String getPackage()
    {
        org.apache.http.util.VersionInfo $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.http.util.VersionInfo;

        r1 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoPackage>;

        return r1;
    }

    public final java.lang.String getRelease()
    {
        org.apache.http.util.VersionInfo $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.http.util.VersionInfo;

        r1 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease>;

        return r1;
    }

    public final java.lang.String getTimestamp()
    {
        org.apache.http.util.VersionInfo $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.http.util.VersionInfo;

        r1 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp>;

        return r1;
    }

    public java.lang.String toString()
    {
        org.apache.http.util.VersionInfo $r0;
        java.lang.StringBuffer $r1, $r4;
        java.lang.String $r2, $r3;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: org.apache.http.util.VersionInfo;

        $r2 = "UNAVAILABLE";

        $r1 = new java.lang.StringBuffer;

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoPackage>;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + 20;

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoModule>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(int)>($i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("VersionInfo(");

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoPackage>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoModule>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoRelease>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label1:
        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoTimestamp>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label2:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        $r3 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(64);

        $r2 = $r0.<org.apache.http.util.VersionInfo: java.lang.String infoClassloader>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label3:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.http.util.VersionInfo: java.lang.String VERSION_PROPERTY_FILE> = "version.properties";

        <org.apache.http.util.VersionInfo: java.lang.String UNAVAILABLE> = "UNAVAILABLE";

        <org.apache.http.util.VersionInfo: java.lang.String PROPERTY_TIMESTAMP> = "info.timestamp";

        <org.apache.http.util.VersionInfo: java.lang.String PROPERTY_RELEASE> = "info.release";

        <org.apache.http.util.VersionInfo: java.lang.String PROPERTY_MODULE> = "info.module";

        return;
    }
}
