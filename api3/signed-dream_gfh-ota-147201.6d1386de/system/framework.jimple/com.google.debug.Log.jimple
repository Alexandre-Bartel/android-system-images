public class com.google.debug.Log extends java.lang.Object
{
    private static final java.lang.String DEFAULT_LOGGER;
    public static final int LEVEL_ALL;
    public static final int LEVEL_CONFIG;
    public static final int LEVEL_FINE;
    public static final int LEVEL_FINER;
    public static final int LEVEL_FINEST;
    public static final int LEVEL_INFO;
    private static final java.lang.String[] LEVEL_NAMES;
    public static final int LEVEL_NONE;
    public static final int LEVEL_SEVERE;
    public static final int LEVEL_WARNING;
    private static final com.google.debug.Logger logger;
    private static final java.util.Hashtable timers;

    static void <clinit>()
    {
        java.util.Hashtable $r0;
        java.lang.String[] $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        com.google.debug.Logger $r4;

        <com.google.debug.Log: int LEVEL_WARNING> = 6;

        <com.google.debug.Log: int LEVEL_SEVERE> = 7;

        <com.google.debug.Log: int LEVEL_NONE> = 8;

        <com.google.debug.Log: int LEVEL_INFO> = 5;

        <com.google.debug.Log: int LEVEL_FINEST> = 1;

        <com.google.debug.Log: int LEVEL_FINER> = 2;

        <com.google.debug.Log: int LEVEL_FINE> = 3;

        <com.google.debug.Log: int LEVEL_CONFIG> = 4;

        <com.google.debug.Log: int LEVEL_ALL> = 0;

        <com.google.debug.Log: java.lang.String DEFAULT_LOGGER> = "com.google.debug.StdoutLogger";

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        <com.google.debug.Log: java.util.Hashtable timers> = $r0;

        $r1 = newarray (java.lang.String)[9];

        $r1[0] = "ALL";

        $r1[1] = "FINEST";

        $r1[2] = "FINER";

        $r1[3] = "FINE";

        $r1[4] = "CONFIG";

        $r1[5] = "INFO";

        $r1[6] = "WARNING";

        $r1[7] = "SEVERE";

        $r1[8] = "NONE";

        <com.google.debug.Log: java.lang.String[] LEVEL_NAMES> = $r1;

        $r2 = staticinvoke <com.google.debug.Log: java.lang.Class logger()>();

        $r3 = staticinvoke <com.google.debug.DebugUtil: java.lang.Object newInstance(java.lang.Class)>($r2);

        $r4 = (com.google.debug.Logger) $r3;

        <com.google.debug.Log: com.google.debug.Logger logger> = $r4;

        return;
    }

    private void <init>()
    {
        com.google.debug.Log $r0;

        $r0 := @this: com.google.debug.Log;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void config(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Log: void xlog(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, 4, null, null, -1);

        return;
    }

    public static void endTimer(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.debug.Log: void xendTimer(java.lang.String,java.lang.String,java.lang.String,int)>($r0, null, null, -1);

        return;
    }

    public static void endTimer(java.lang.String, long)
    {
        java.lang.String $r0;
        long $l0;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        staticinvoke <com.google.debug.Log: void xendTimer(java.lang.String,long,java.lang.String,java.lang.String,int)>($r0, $l0, null, null, -1);

        return;
    }

    public static void fine(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Log: void xlog(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, 3, null, null, -1);

        return;
    }

    public static void finer(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Log: void xlog(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, 2, null, null, -1);

        return;
    }

    public static void finest(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Log: void xlog(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, 1, null, null, -1);

        return;
    }

    public static java.lang.String getLevelName(int)
    {
        int $i0;
        java.lang.String[] $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $r0 = <com.google.debug.Log: java.lang.String[] LEVEL_NAMES>;

        $r1 = $r0[$i0];

        return $r1;
    }

    public static void info(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Log: void xlog(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, 5, null, null, -1);

        return;
    }

    public static boolean isLoggable(int)
    {
        int $i0;
        boolean $z0;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <com.google.debug.Log: boolean xisLoggable(int,java.lang.String,java.lang.String)>($i0, null, null);

        return $z0;
    }

    private static java.lang.String logLevel()
    {
        java.lang.String $r0;
        java.io.PrintStream $r1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("LOG_LEVEL");

        $r0 = staticinvoke <com.google.debug.DebugUtil: java.lang.String getAntProperty(java.lang.String,java.lang.String)>("INFO", $r0);

        if $r0 != null goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("WARNING: Missing log level - using logger specific default");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("         For Ant: Specify the log level using the LOG_LEVEL property");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("         For Bolide: Specify the log level using constant injection");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("         For J2SE:  Define LOG_LEVEL system property");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("         See JavaDoc or source of com.google.debug.Log.");

        return $r0;

     label1:
        return $r0;
    }

    public static boolean logThreads()
    {
        boolean $z0;

        $z0 = staticinvoke <com.google.debug.DebugUtil: boolean getAntPropertyAsBoolean(java.lang.String,boolean)>("false", 0);

        return $z0;
    }

    public static void logThrowable(java.lang.Object, java.lang.Throwable)
    {
        java.lang.Object $r0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Throwable;

        staticinvoke <com.google.debug.Log: void xlogThrowable(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.String,int)>($r0, $r1, null, null, -1);

        return;
    }

    public static void logThrowable(java.lang.Object, java.lang.Throwable, int)
    {
        java.lang.Object $r0;
        java.lang.Throwable $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Throwable;

        $i0 := @parameter2: int;

        staticinvoke <com.google.debug.Log: void xlogThrowable(java.lang.Object,java.lang.Throwable,int,java.lang.String,java.lang.String,int)>($r0, $r1, $i0, null, null, -1);

        return;
    }

    public static boolean logTime()
    {
        boolean $z0;

        $z0 = staticinvoke <com.google.debug.DebugUtil: boolean getAntPropertyAsBoolean(java.lang.String,boolean)>("true", 0);

        return $z0;
    }

    private static java.lang.Class logger()
    {
        boolean $z0;
        java.lang.Class $r0;
        java.lang.String $r1;
        java.io.PrintStream $r2;
        java.lang.ClassNotFoundException $r3;
        java.lang.Error $r4;

     label1:
        $z0 = staticinvoke <com.google.debug.DebugUtil: boolean isAntPropertyExpanded(java.lang.String)>("com.google.debug.StdoutLogger");

        if $z0 == 0 goto label3;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.google.debug.StdoutLogger");

     label2:
        return $r0;

     label3:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("LOGGER");

        if $r1 == null goto label5;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

     label4:
        return $r0;

     label5:
        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("WARNING: Missing logger class - using default logger com.google.debug.StdoutLogger");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("         For Ant: Specify the logger class using the LOGGER property");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("         For Bolide: Specify the logger class using constant injection");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("         For J2SE:  Specify the logger class via the LOGGER system property");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("         See JavaDoc or source of com.google.debug.Log.");

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.google.debug.StdoutLogger");

     label6:
        return $r0;

     label7:
        $r3 := @caughtexception;

        $r4 = new java.lang.Error;

        specialinvoke $r4.<java.lang.Error: void <init>(java.lang.String)>("Missing logger class com.google.debug.StdoutLogger");

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label7;
        catch java.lang.ClassNotFoundException from label3 to label4 with label7;
        catch java.lang.ClassNotFoundException from label5 to label6 with label7;
    }

    public static int parseLogLevel(int)
    {
        int $i0;
        java.lang.String $r0, $r2;
        java.lang.String[] $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <com.google.debug.Log: java.lang.String logLevel()>();

        if $r0 != null goto label1;

        return $i0;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toUpperCase()>();

        $i0 = 0;

     label2:
        if $i0 > 8 goto label4;

        $r1 = <com.google.debug.Log: java.lang.String[] LEVEL_NAMES>;

        $r2 = $r1[$i0];

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        return $i0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid log level ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r0);

        throw $r3;
    }

    public static void severe(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Log: void xlog(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, 7, null, null, -1);

        return;
    }

    public static void startTimer(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.debug.Log: void xstartTimer(java.lang.String,java.lang.String,java.lang.String,int)>($r0, null, null, -1);

        return;
    }

    public static void startTimer(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        staticinvoke <com.google.debug.Log: void xstartTimer(java.lang.String,int,java.lang.String,java.lang.String,int)>($r0, $i0, null, null, -1);

        return;
    }

    public static void warning(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Log: void xlog(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, 6, null, null, -1);

        return;
    }

    public static void xendTimer(java.lang.String, long, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2;
        long $l0, $l2, $l3;
        int $i1, $i5;
        java.util.Hashtable $r3;
        java.lang.Object $r4;
        com.google.debug.Log$TimerInfo $r5;
        com.google.debug.Logger $r6;
        java.lang.StringBuilder $r7;
        byte $b4;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r3 = <com.google.debug.Log: java.util.Hashtable timers>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r0);

        $r5 = (com.google.debug.Log$TimerInfo) $r4;

        if $r5 != null goto label1;

        $r6 = <com.google.debug.Log: com.google.debug.Logger logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing timer ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<com.google.debug.Logger: void log(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, 6, $r1, $r2, $i1);

        return;

     label1:
        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = virtualinvoke $r5.<com.google.debug.Log$TimerInfo: long getStartTime()>();

        $l2 = $l2 - $l3;

        $b4 = $l2 cmp $l0;

        if $b4 < 0 goto label2;

        $r6 = <com.google.debug.Log: com.google.debug.Logger logger>;

        $i5 = virtualinvoke $r5.<com.google.debug.Log$TimerInfo: int getLogLevel()>();

        interfaceinvoke $r6.<com.google.debug.Logger: void logTimer(java.lang.String,long,int,java.lang.String,java.lang.String,int)>($r0, $l2, $i5, $r1, $r2, $i1);

        return;

     label2:
        return;
    }

    public static void xendTimer(java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        staticinvoke <com.google.debug.Log: void xendTimer(java.lang.String,long,java.lang.String,java.lang.String,int)>($r0, 0L, $r1, $r2, $i0);

        return;
    }

    public static boolean xisLoggable(int, java.lang.String, java.lang.String)
    {
        int $i0;
        java.lang.String $r0, $r1;
        boolean $z0;
        com.google.debug.Logger $r2;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r2 = <com.google.debug.Log: com.google.debug.Logger logger>;

        $z0 = interfaceinvoke $r2.<com.google.debug.Logger: boolean isLoggable(int,java.lang.String,java.lang.String)>($i0, null, null);

        return $z0;
    }

    public static void xlog(java.lang.Object, int, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        com.google.debug.Logger $r3;

        $r0 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r3 = <com.google.debug.Log: com.google.debug.Logger logger>;

        interfaceinvoke $r3.<com.google.debug.Logger: void log(java.lang.Object,int,java.lang.String,java.lang.String,int)>($r0, $i0, $r1, $r2, $i1);

        return;
    }

    public static void xlogThrowable(java.lang.Object, java.lang.Throwable, int, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0;
        java.lang.Throwable $r1;
        int $i0, $i1;
        java.lang.String $r2, $r3;
        com.google.debug.Logger $r4;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Throwable;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        $r3 := @parameter4: java.lang.String;

        $i1 := @parameter5: int;

        $r4 = <com.google.debug.Log: com.google.debug.Logger logger>;

        interfaceinvoke $r4.<com.google.debug.Logger: void logThrowable(java.lang.Object,java.lang.Throwable,int,java.lang.String,java.lang.String,int)>($r0, $r1, $i0, $r2, $r3, $i1);

        return;
    }

    public static void xlogThrowable(java.lang.Object, java.lang.Throwable, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0;
        java.lang.Throwable $r1;
        java.lang.String $r2, $r3;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        staticinvoke <com.google.debug.Log: void xlogThrowable(java.lang.Object,java.lang.Throwable,int,java.lang.String,java.lang.String,int)>($r0, $r1, 5, $r2, $r3, $i0);

        return;
    }

    public static void xstartTimer(java.lang.String, int, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0, $i1;
        long $l2;
        java.util.Hashtable $r3;
        com.google.debug.Log$TimerInfo $r4;
        com.google.debug.Logger $r5;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        $i1 := @parameter4: int;

        $r3 = <com.google.debug.Log: java.util.Hashtable timers>;

        $r4 = new com.google.debug.Log$TimerInfo;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke $r4.<com.google.debug.Log$TimerInfo: void <init>(long,int)>($l2, $i0);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r4);

        $r5 = <com.google.debug.Log: com.google.debug.Logger logger>;

        interfaceinvoke $r5.<com.google.debug.Logger: void logTimer(java.lang.String,long,int,java.lang.String,java.lang.String,int)>($r0, -1L, $i0, $r1, $r2, $i1);

        return;
    }

    public static void xstartTimer(java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        staticinvoke <com.google.debug.Log: void xstartTimer(java.lang.String,int,java.lang.String,java.lang.String,int)>($r0, 5, $r1, $r2, $i0);

        return;
    }
}
