public class org.bouncycastle.jce.provider.JCEStreamCipher extends org.bouncycastle.jce.provider.WrapCipherSpi implements org.bouncycastle.jce.provider.PBE
{
    private java.lang.Class[] availableSpecs;
    private org.bouncycastle.crypto.StreamCipher cipher;
    private int ivLength;
    private org.bouncycastle.crypto.params.ParametersWithIV ivParam;
    private java.lang.String pbeAlgorithm;
    private javax.crypto.spec.PBEParameterSpec pbeSpec;

    protected void <init>(org.bouncycastle.crypto.BlockCipher, int)
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        org.bouncycastle.crypto.BlockCipher $r1;
        int $i0;
        java.lang.Class[] $r2;
        org.bouncycastle.crypto.StreamBlockCipher $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        $i0 := @parameter1: int;

        specialinvoke $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $r2 = newarray (java.lang.Class)[4];

        $r2[0] = class "javax/crypto/spec/RC2ParameterSpec";

        $r2[1] = class "javax/crypto/spec/RC5ParameterSpec";

        $r2[2] = class "javax/crypto/spec/IvParameterSpec";

        $r2[3] = class "javax/crypto/spec/PBEParameterSpec";

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.Class[] availableSpecs> = $r2;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength> = 0;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = null;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength> = $i0;

        $r3 = new org.bouncycastle.crypto.StreamBlockCipher;

        specialinvoke $r3.<org.bouncycastle.crypto.StreamBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r1);

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher> = $r3;

        return;
    }

    protected void <init>(org.bouncycastle.crypto.StreamCipher)
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        org.bouncycastle.crypto.StreamCipher $r1;
        java.lang.Class[] $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: org.bouncycastle.crypto.StreamCipher;

        specialinvoke $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $r2 = newarray (java.lang.Class)[4];

        $r2[0] = class "javax/crypto/spec/RC2ParameterSpec";

        $r2[1] = class "javax/crypto/spec/RC5ParameterSpec";

        $r2[2] = class "javax/crypto/spec/IvParameterSpec";

        $r2[3] = class "javax/crypto/spec/PBEParameterSpec";

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.Class[] availableSpecs> = $r2;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength> = 0;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = null;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher> = $r1;

        return;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int)
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        org.bouncycastle.crypto.StreamCipher $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        if $i1 == 0 goto label1;

        $r3 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.StreamCipher: void processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

     label1:
        $r3 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.StreamCipher: void reset()>();

        return $i1;
    }

    protected byte[] engineDoFinal(byte[], int, int)
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        byte[] $r1;
        int $i0, $i1;
        org.bouncycastle.crypto.StreamCipher $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 == 0 goto label1;

        $r1 = virtualinvoke $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: byte[] engineUpdate(byte[],int,int)>($r1, $i0, $i1);

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.StreamCipher: void reset()>();

        return $r1;

     label1:
        $r2 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.StreamCipher: void reset()>();

        $r1 = newarray (byte)[0];

        return $r1;
    }

    protected int engineGetBlockSize()
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        byte[] $r1;
        org.bouncycastle.crypto.params.ParametersWithIV $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam>;

        if $r2 == null goto label1;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam>;

        $r1 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        return $r1;

     label1:
        return null;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        java.security.Key $r1;
        byte[] $r2;
        int $i0;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        $i0 = $i0 * 8;

        return $i0;
    }

    protected int engineGetOutputSize(int)
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        int $i0;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $i0 := @parameter0: int;

        return $i0;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        java.security.AlgorithmParameters $r1;
        javax.crypto.spec.PBEParameterSpec $r2;
        java.lang.String $r3;
        java.lang.Exception $r4;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams>;

        if $r1 != null goto label4;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        if $r2 == null goto label4;

     label1:
        $r3 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm>;

        $r1 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>($r3, "BC");

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec>;

        virtualinvoke $r1.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r2);

     label2:
        return $r1;

     label3:
        $r4 := @caughtexception;

        return null;

     label4:
        $r1 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams>;

        return $r1;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        int $i0, $i1, $i2;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.security.spec.AlgorithmParameterSpec $r4;
        java.lang.Class[] $r5;
        java.lang.Class $r6;
        java.security.InvalidAlgorithmParameterException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        java.lang.Exception $r10;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        $r4 = null;

        if $r2 == null goto label5;

        $i1 = 0;

     label1:
        $r5 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.Class[] availableSpecs>;

        $i2 = lengthof $r5;

        if $i1 == $i2 goto label3;

     label2:
        $r5 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.Class[] availableSpecs>;

        $r6 = $r5[$i1];

        $r4 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r6);

     label3:
        if $r4 != null goto label5;

        $r7 = new java.security.InvalidAlgorithmParameterException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r9 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label4:
        $r10 := @caughtexception;

        $i1 = $i1 + 1;

        goto label1;

     label5:
        virtualinvoke $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, $r4, $r3);

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams> = $r2;

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.lang.String $r3;
        java.security.InvalidAlgorithmParameterException $r4;
        java.security.InvalidKeyException $r5;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.security.InvalidKeyException;

        $r3 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r5;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        int $i0, $i1;
        java.security.Key $r1;
        java.security.SecureRandom $r2, $r13;
        byte[] $r3;
        org.bouncycastle.crypto.params.ParametersWithIV $r4, $r14;
        java.security.spec.AlgorithmParameterSpec $r5;
        boolean $z0;
        java.lang.StringBuilder $r7, r21;
        java.lang.String $r8;
        org.bouncycastle.jce.provider.JCEPBEKey $r9;
        org.bouncycastle.asn1.DERObjectIdentifier $r10;
        org.bouncycastle.crypto.CipherParameters $r11;
        javax.crypto.spec.PBEParameterSpec $r12, r23;
        java.io.PrintStream $r15;
        org.bouncycastle.crypto.StreamCipher $r16;
        org.bouncycastle.crypto.params.KeyParameter $r18, r25;
        javax.crypto.spec.IvParameterSpec $r19;
        java.security.InvalidKeyException r22;
        java.security.InvalidAlgorithmParameterException r24;
        java.lang.IllegalArgumentException r26;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r5 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r2 := @parameter3: java.security.SecureRandom;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = null;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = null;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams> = null;

        $z0 = $r1 instanceof javax.crypto.SecretKey;

        if $z0 != 0 goto label01;

        r22 = new java.security.InvalidKeyException;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key for algorithm ");

        $r8 = interfaceinvoke $r1.<java.security.Key: java.lang.String getAlgorithm()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not suitable for symmetric enryption.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r22.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r8);

        throw r22;

     label01:
        $z0 = $r1 instanceof org.bouncycastle.jce.provider.JCEPBEKey;

        if $z0 == 0 goto label12;

        $r9 = (org.bouncycastle.jce.provider.JCEPBEKey) $r1;

        $r10 = virtualinvoke $r9.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.asn1.DERObjectIdentifier getOID()>();

        if $r10 == null goto label09;

        $r10 = virtualinvoke $r9.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.asn1.DERObjectIdentifier getOID()>();

        $r8 = virtualinvoke $r10.<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()>();

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = $r8;

     label02:
        $r11 = virtualinvoke $r9.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        if $r11 == null goto label10;

        $r11 = virtualinvoke $r9.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        r23 = new javax.crypto.spec.PBEParameterSpec;

        $r3 = virtualinvoke $r9.<org.bouncycastle.jce.provider.JCEPBEKey: byte[] getSalt()>();

        $i1 = virtualinvoke $r9.<org.bouncycastle.jce.provider.JCEPBEKey: int getIterationCount()>();

        specialinvoke r23.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r3, $i1);

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = r23;

     label03:
        $i1 = virtualinvoke $r9.<org.bouncycastle.jce.provider.JCEPBEKey: int getIvSize()>();

        if $i1 == 0 goto label04;

        $r4 = (org.bouncycastle.crypto.params.ParametersWithIV) $r11;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r4;

     label04:
        $i1 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength>;

        if $i1 == 0 goto label07;

        $z0 = $r11 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label07;

        $r13 = $r2;

        if $r2 != null goto label05;

        $r2 = new java.security.SecureRandom;

        $r13 = $r2;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

     label05:
        if $i0 == 1 goto label06;

        if $i0 != 3 goto label15;

     label06:
        $i1 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: int ivLength>;

        $r3 = newarray (byte)[$i1];

        virtualinvoke $r13.<java.security.SecureRandom: void nextBytes(byte[])>($r3);

        $r14 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r4 = $r14;

        specialinvoke $r14.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r11, $r3);

        $r14 = (org.bouncycastle.crypto.params.ParametersWithIV) $r4;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r14;

        $r11 = $r4;

     label07:
        lookupswitch($i0)
        {
            case 1: goto label16;
            case 2: goto label17;
            case 3: goto label16;
            case 4: goto label17;
            default: goto label08;
        };

     label08:
        $r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

        return;

     label09:
        $r8 = virtualinvoke $r9.<org.bouncycastle.jce.provider.JCEPBEKey: java.lang.String getAlgorithm()>();

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: java.lang.String pbeAlgorithm> = $r8;

        goto label02;

     label10:
        $z0 = $r5 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 == 0 goto label11;

        $r16 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        $r8 = interfaceinvoke $r16.<org.bouncycastle.crypto.StreamCipher: java.lang.String getAlgorithmName()>();

        $r11 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String)>($r9, $r5, $r8);

        $r12 = (javax.crypto.spec.PBEParameterSpec) $r5;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: javax.crypto.spec.PBEParameterSpec pbeSpec> = $r12;

        goto label03;

     label11:
        r24 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r24.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw r24;

     label12:
        if $r5 != null goto label13;

        $r18 = new org.bouncycastle.crypto.params.KeyParameter;

        $r11 = $r18;

        $r3 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r18.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r3);

        goto label04;

     label13:
        $z0 = $r5 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label14;

        $r4 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r11 = $r4;

        r25 = new org.bouncycastle.crypto.params.KeyParameter;

        $r3 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke r25.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r3);

        $r19 = (javax.crypto.spec.IvParameterSpec) $r5;

        $r3 = virtualinvoke $r19.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke $r4.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>(r25, $r3);

        $r4 = (org.bouncycastle.crypto.params.ParametersWithIV) $r11;

        $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.params.ParametersWithIV ivParam> = $r4;

        goto label04;

     label14:
        r26 = new java.lang.IllegalArgumentException;

        specialinvoke r26.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown parameter type.");

        throw r26;

     label15:
        r24 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r24.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("no IV set when one expected");

        throw r24;

     label16:
        $r16 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r16.<org.bouncycastle.crypto.StreamCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r11);

        return;

     label17:
        $r16 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r16.<org.bouncycastle.crypto.StreamCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, $r11);

        return;
    }

    protected void engineSetMode(java.lang.String)
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ECB");

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        java.lang.String $r1;
        boolean $z0;
        javax.crypto.NoSuchPaddingException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NoPadding");

        if $z0 != 0 goto label1;

        $r2 = new javax.crypto.NoSuchPaddingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return;
    }

    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.String $r3;
        org.bouncycastle.crypto.StreamCipher $r4;
        org.bouncycastle.crypto.DataLengthException $r5;
        javax.crypto.ShortBufferException $r6;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r4 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

     label1:
        interfaceinvoke $r4.<org.bouncycastle.crypto.StreamCipher: void processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r2, $i2);

     label2:
        return $i1;

     label3:
        $r5 := @caughtexception;

        $r6 = new javax.crypto.ShortBufferException;

        $r3 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.ShortBufferException: void <init>(java.lang.String)>($r3);

        throw $r6;

        catch org.bouncycastle.crypto.DataLengthException from label1 to label2 with label3;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        org.bouncycastle.jce.provider.JCEStreamCipher $r0;
        byte[] $r1, $r3;
        int $i0, $i1;
        org.bouncycastle.crypto.StreamCipher $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEStreamCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = newarray (byte)[$i1];

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEStreamCipher: org.bouncycastle.crypto.StreamCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.StreamCipher: void processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r3, 0);

        return $r3;
    }
}
