class android.test.InstrumentationCoreTestRunner$1 extends java.lang.Object implements junit.framework.TestListener
{
    private java.lang.Class lastClass;
    final android.test.InstrumentationCoreTestRunner this$0;

    void <init>(android.test.InstrumentationCoreTestRunner)
    {
        android.test.InstrumentationCoreTestRunner$1 $r0;
        android.test.InstrumentationCoreTestRunner $r1;

        $r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        $r1 := @parameter0: android.test.InstrumentationCoreTestRunner;

        $r0.<android.test.InstrumentationCoreTestRunner$1: android.test.InstrumentationCoreTestRunner this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void cleanup(java.lang.Class)
    {
        android.test.InstrumentationCoreTestRunner$1 $r0;
        java.lang.Class $r1;
        java.lang.reflect.Field $r2;
        java.lang.reflect.Field[] $r3;
        int $i0, $i1;
        boolean $z0;
        java.lang.Exception $r4;

        $r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        $r1 := @parameter0: java.lang.Class;

        if $r1 == class "junit/framework/TestCase" goto label4;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label6;

        $r2 = $r3[$i0];

        $r1 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label3;

        $i1 = virtualinvoke $r2.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i1);

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke $r2.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1);

        virtualinvoke $r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, null);

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        goto label3;

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label5;
    }

    private void printMemory(java.lang.Class)
    {
        android.test.InstrumentationCoreTestRunner$1 $r0;
        java.lang.Class $r1;
        long $l0, $l1, $l2;
        java.lang.Runtime $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        $r1 := @parameter0: java.lang.Class;

        $r2 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        $l1 = virtualinvoke $r2.<java.lang.Runtime: long totalMemory()>();

        $l2 = virtualinvoke $r2.<java.lang.Runtime: long freeMemory()>();

        $l0 = $l1 - $l2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Total memory  : ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("InstrumentationCoreTestRunner", $r4);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Used memory   : ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("InstrumentationCoreTestRunner", $r4);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Free memory   : ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("InstrumentationCoreTestRunner", $r4);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Now executing : ");

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("InstrumentationCoreTestRunner", $r4);

        return;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        android.test.InstrumentationCoreTestRunner$1 $r0;
        junit.framework.Test $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: java.lang.Throwable;

        return;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        android.test.InstrumentationCoreTestRunner$1 $r0;
        junit.framework.Test $r1;
        junit.framework.AssertionFailedError $r2;

        $r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: junit.framework.AssertionFailedError;

        return;
    }

    public void endTest(junit.framework.Test)
    {
        android.test.InstrumentationCoreTestRunner$1 $r0;
        junit.framework.Test $r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        $r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        $r1 := @parameter0: junit.framework.Test;

        $z0 = $r1 instanceof junit.framework.TestCase;

        if $z0 == 0 goto label2;

        $r2 = $r0.<android.test.InstrumentationCoreTestRunner$1: java.lang.Class lastClass>;

        if $r2 != null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r0.<android.test.InstrumentationCoreTestRunner$1: java.lang.Class lastClass> = $r2;

        return;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = $r0.<android.test.InstrumentationCoreTestRunner$1: java.lang.Class lastClass>;

        if $r3 == $r2 goto label3;

        $r2 = $r0.<android.test.InstrumentationCoreTestRunner$1: java.lang.Class lastClass>;

        specialinvoke $r0.<android.test.InstrumentationCoreTestRunner$1: void cleanup(java.lang.Class)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r0.<android.test.InstrumentationCoreTestRunner$1: java.lang.Class lastClass> = $r2;

        return;

     label2:
        return;

     label3:
        return;
    }

    public void startTest(junit.framework.Test)
    {
        android.test.InstrumentationCoreTestRunner$1 $r0;
        junit.framework.Test $r1;
        java.lang.Class $r2, $r3;
        java.lang.Thread $r4;
        java.lang.ClassLoader $r5;

        $r0 := @this: android.test.InstrumentationCoreTestRunner$1;

        $r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = $r0.<android.test.InstrumentationCoreTestRunner$1: java.lang.Class lastClass>;

        if $r2 == $r3 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r0.<android.test.InstrumentationCoreTestRunner$1: void printMemory(java.lang.Class)>($r2);

     label1:
        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r4.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r5);

        return;
    }
}
