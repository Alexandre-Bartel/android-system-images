public final class android.provider.Calendar$Instances extends java.lang.Object implements android.provider.BaseColumns, android.provider.Calendar$CalendarsColumns, android.provider.Calendar$EventsColumns
{
    public static final java.lang.String BEGIN;
    public static final android.net.Uri CONTENT_URI;
    public static final java.lang.String DEFAULT_SORT_ORDER;
    public static final java.lang.String END;
    public static final java.lang.String END_DAY;
    public static final java.lang.String END_MINUTE;
    public static final java.lang.String EVENT_ID;
    public static final java.lang.String SORT_CALENDAR_VIEW;
    public static final java.lang.String START_DAY;
    public static final java.lang.String START_MINUTE;

    static void <clinit>()
    {
        android.net.Uri $r0;

        <android.provider.Calendar$Instances: java.lang.String START_MINUTE> = "startMinute";

        <android.provider.Calendar$Instances: java.lang.String START_DAY> = "startDay";

        <android.provider.Calendar$Instances: java.lang.String SORT_CALENDAR_VIEW> = "begin ASC, end DESC, title ASC";

        <android.provider.Calendar$Instances: java.lang.String EVENT_ID> = "event_id";

        <android.provider.Calendar$Instances: java.lang.String END_MINUTE> = "endMinute";

        <android.provider.Calendar$Instances: java.lang.String END_DAY> = "endDay";

        <android.provider.Calendar$Instances: java.lang.String END> = "end";

        <android.provider.Calendar$Instances: java.lang.String DEFAULT_SORT_ORDER> = "begin ASC";

        <android.provider.Calendar$Instances: java.lang.String BEGIN> = "begin";

        $r0 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://calendar/instances/when");

        <android.provider.Calendar$Instances: android.net.Uri CONTENT_URI> = $r0;

        return;
    }

    public void <init>()
    {
        android.provider.Calendar$Instances $r0;

        $r0 := @this: android.provider.Calendar$Instances;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static final android.database.Cursor query(android.content.ContentResolver, java.lang.String[], long, long)
    {
        android.content.ContentResolver $r0;
        java.lang.String[] $r1;
        long $l0, $l1;
        android.net.Uri $r2;
        android.net.Uri$Builder $r3;
        android.database.Cursor $r4;

        $r0 := @parameter0: android.content.ContentResolver;

        $r1 := @parameter1: java.lang.String[];

        $l0 := @parameter2: long;

        $l1 := @parameter3: long;

        $r2 = <android.provider.Calendar$Instances: android.net.Uri CONTENT_URI>;

        $r3 = virtualinvoke $r2.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        staticinvoke <android.content.ContentUris: android.net.Uri$Builder appendId(android.net.Uri$Builder,long)>($r3, $l0);

        staticinvoke <android.content.ContentUris: android.net.Uri$Builder appendId(android.net.Uri$Builder,long)>($r3, $l1);

        $r2 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri build()>();

        $r4 = virtualinvoke $r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r2, $r1, "selected=1", null, "begin ASC");

        return $r4;
    }

    public static final android.database.Cursor query(android.content.ContentResolver, java.lang.String[], long, long, java.lang.String, java.lang.String)
    {
        android.content.ContentResolver $r0;
        java.lang.String[] $r1;
        long $l0, $l1;
        java.lang.String $r2, $r3;
        android.net.Uri $r4;
        android.net.Uri$Builder $r5;
        boolean $z0;
        android.database.Cursor $r6;
        java.lang.StringBuilder $r7;

        $r0 := @parameter0: android.content.ContentResolver;

        $r1 := @parameter1: java.lang.String[];

        $l0 := @parameter2: long;

        $l1 := @parameter3: long;

        $r3 := @parameter4: java.lang.String;

        $r2 := @parameter5: java.lang.String;

        $r4 = <android.provider.Calendar$Instances: android.net.Uri CONTENT_URI>;

        $r5 = virtualinvoke $r4.<android.net.Uri: android.net.Uri$Builder buildUpon()>();

        staticinvoke <android.content.ContentUris: android.net.Uri$Builder appendId(android.net.Uri$Builder,long)>($r5, $l0);

        staticinvoke <android.content.ContentUris: android.net.Uri$Builder appendId(android.net.Uri$Builder,long)>($r5, $l1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 == 0 goto label3;

        $r3 = "selected=1";

     label1:
        $r4 = virtualinvoke $r5.<android.net.Uri$Builder: android.net.Uri build()>();

        if $r2 != null goto label4;

        $r2 = "begin ASC";

     label2:
        $r6 = virtualinvoke $r0.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r4, $r1, $r3, null, $r2);

        return $r6;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") AND ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("selected");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=1");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;

     label4:
        goto label2;
    }
}
