public abstract class org.apache.harmony.xnet.provider.jsse.HandshakeProtocol extends java.lang.Object
{
    public static final int FINISHED;
    public static final int NEED_TASK;
    public static final int NEED_UNWRAP;
    public static final int NOT_HANDSHAKING;
    protected org.apache.harmony.xnet.provider.jsse.CertificateRequest certificateRequest;
    protected org.apache.harmony.xnet.provider.jsse.CertificateVerify certificateVerify;
    protected boolean changeCipherSpecReceived;
    protected org.apache.harmony.xnet.provider.jsse.CertificateMessage clientCert;
    protected org.apache.harmony.xnet.provider.jsse.Finished clientFinished;
    protected org.apache.harmony.xnet.provider.jsse.ClientHello clientHello;
    protected org.apache.harmony.xnet.provider.jsse.ClientKeyExchange clientKeyExchange;
    protected java.lang.Exception delegatedTaskErr;
    protected java.util.Vector delegatedTasks;
    public org.apache.harmony.xnet.provider.jsse.SSLEngineImpl engineOwner;
    protected org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream;
    protected boolean isResuming;
    private byte[] master_secret_bytes;
    private boolean needSendCCSpec;
    protected boolean needSendHelloRequest;
    protected boolean nonBlocking;
    protected org.apache.harmony.xnet.provider.jsse.SSLParameters parameters;
    protected byte[] preMasterSecret;
    protected org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol;
    protected org.apache.harmony.xnet.provider.jsse.CertificateMessage serverCert;
    protected org.apache.harmony.xnet.provider.jsse.Finished serverFinished;
    protected org.apache.harmony.xnet.provider.jsse.ServerHello serverHello;
    protected org.apache.harmony.xnet.provider.jsse.ServerHelloDone serverHelloDone;
    protected org.apache.harmony.xnet.provider.jsse.ServerKeyExchange serverKeyExchange;
    protected org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session;
    protected int status;
    private byte[] verify_data;

    protected void <init>(java.lang.Object)
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        java.lang.Object $r1;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r2;
        java.util.Vector $r3;
        byte[] $r4;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r5;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r6;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: int status> = 2;

        $r2 = new org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream> = $r2;

        $r3 = new java.util.Vector;

        specialinvoke $r3.<java.util.Vector: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.util.Vector delegatedTasks> = $r3;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean changeCipherSpecReceived> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean isResuming> = 0;

        $r4 = newarray (byte)[12];

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] verify_data> = $r4;

        $r4 = newarray (byte)[13];

        $r4[0] = 109;

        $r4[1] = 97;

        $r4[2] = 115;

        $r4[3] = 116;

        $r4[4] = 101;

        $r4[5] = 114;

        $r4[6] = 32;

        $r4[7] = 115;

        $r4[8] = 101;

        $r4[9] = 99;

        $r4[10] = 114;

        $r4[11] = 101;

        $r4[12] = 116;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] master_secret_bytes> = $r4;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendCCSpec> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendHelloRequest> = 0;

        $z0 = $r1 instanceof org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.harmony.xnet.provider.jsse.SSLEngineImpl) $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl engineOwner> = $r5;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean nonBlocking> = 1;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl engineOwner>;

        $r6 = $r5.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLParameters parameters> = $r6;

        return;

     label1:
        return;
    }

    protected static int getRSAKeyLength(java.security.PublicKey) throws java.security.NoSuchAlgorithmException, java.security.spec.InvalidKeySpecException
    {
        java.security.PublicKey $r0;
        boolean $z0;
        java.security.interfaces.RSAKey $r1;
        java.math.BigInteger $r2;
        int $i0;
        java.security.KeyFactory $r3;
        java.security.spec.KeySpec $r4;
        java.security.spec.RSAPublicKeySpec $r5;

        $r0 := @parameter0: java.security.PublicKey;

        $z0 = $r0 instanceof java.security.interfaces.RSAKey;

        if $z0 == 0 goto label2;

        $r1 = (java.security.interfaces.RSAKey) $r0;

        $r2 = interfaceinvoke $r1.<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()>();

     label1:
        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label2:
        $r3 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r4 = virtualinvoke $r3.<java.security.KeyFactory: java.security.spec.KeySpec getKeySpec(java.security.Key,java.lang.Class)>($r0, class "java/security/spec/RSAPublicKeySpec");

        $r5 = (java.security.spec.RSAPublicKeySpec) $r4;

        $r2 = virtualinvoke $r5.<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()>();

        goto label1;
    }

    protected void clearMessages()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void clearBuffer()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.ClientHello clientHello> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.ServerHello serverHello> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.CertificateMessage serverCert> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.ServerKeyExchange serverKeyExchange> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.CertificateRequest certificateRequest> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.ServerHelloDone serverHelloDone> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.CertificateMessage clientCert> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.ClientKeyExchange clientKeyExchange> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.CertificateVerify certificateVerify> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.Finished clientFinished> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.Finished serverFinished> = null;

        return;
    }

    public void computerMasterSecret()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        byte[] $r1, $r3, $r6, $r7;
        org.apache.harmony.xnet.provider.jsse.ClientHello $r2;
        org.apache.harmony.xnet.provider.jsse.ServerHello $r4;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r5;
        byte $b0;
        java.security.GeneralSecurityException $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 = newarray (byte)[64];

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.ClientHello clientHello>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] getRandom()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, 32);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.ServerHello serverHello>;

        $r3 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.ServerHello: byte[] getRandom()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 32, 32);

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        $r3 = newarray (byte)[48];

        $r5.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret> = $r3;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.ServerHello serverHello>;

        $r3 = $r4.<org.apache.harmony.xnet.provider.jsse.ServerHello: byte[] server_version>;

        $b0 = $r3[1];

        if $b0 != 1 goto label4;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        $r3 = $r5.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] preMasterSecret>;

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] master_secret_bytes>;

     label1:
        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void computePRF(byte[],byte[],byte[],byte[])>($r3, $r6, $r7, $r1);

     label2:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] preMasterSecret>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, 0);

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] preMasterSecret> = null;

        return;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(80, "PRF error", $r8);

        goto label2;

     label4:
        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        $r3 = $r5.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] preMasterSecret>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void computePRF_SSLv3(byte[],byte[],byte[])>($r3, $r6, $r1);

        goto label2;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    protected void computerReferenceVerifyDataSSLv3(byte[])
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        byte[] $r1, $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 := @parameter0: byte[];

        $r2 = newarray (byte)[36];

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] verify_data> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] verify_data>;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void computerVerifyDataSSLv3(byte[],byte[])>($r1, $r2);

        return;
    }

    protected void computerReferenceVerifyDataTLS(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        java.lang.String $r1;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] verify_data>;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void computerVerifyDataTLS(java.lang.String,byte[])>($r1, $r2);

        return;
    }

    protected void computerVerifyDataSSLv3(byte[], byte[])
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        byte[] $r1, $r2, $r6, $r8, $r9;
        java.security.MessageDigest $r3, $r4;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r5;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r7;
        java.lang.Exception $r10, $r11;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

     label1:
        $r3 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

     label2:
        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        $r6 = virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getMessages()>();

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[])>($r6);

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[])>($r1);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        $r8 = $r7.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[])>($r8);

        $r8 = <org.apache.harmony.xnet.provider.jsse.SSLv3Constants: byte[] MD5pad1>;

        $r8 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r8);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        $r9 = $r7.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[])>($r9);

        $r9 = <org.apache.harmony.xnet.provider.jsse.SSLv3Constants: byte[] MD5pad2>;

        virtualinvoke $r3.<java.security.MessageDigest: void update(byte[])>($r9);

        $r8 = virtualinvoke $r3.<java.security.MessageDigest: byte[] digest(byte[])>($r8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r2, 0, 16);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r6);

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r1);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        $r1 = $r7.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r1);

        $r1 = <org.apache.harmony.xnet.provider.jsse.SSLv3Constants: byte[] SHApad1>;

        $r1 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r1);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        $r6 = $r7.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r6);

        $r6 = <org.apache.harmony.xnet.provider.jsse.SSLv3Constants: byte[] SHApad2>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r6);

        $r1 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>($r1);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 16, 20);

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(80, "Could not initialize the Digest Algorithms.", $r10);

        return;

     label5:
        $r11 := @caughtexception;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(80, "INTERNAL ERROR", $r11);

        return;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label2 to label3 with label5;
    }

    protected void computerVerifyDataTLS(java.lang.String, byte[])
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        java.lang.String $r1;
        byte[] $r2, $r3, $r5, $r6;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r4;
        int $i0, $i1;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r7;
        java.security.GeneralSecurityException $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestMD5()>();

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        $r6 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] getDigestSHA()>();

        $i0 = lengthof $r5;

        $i1 = lengthof $r6;

        $i0 = $i0 + $i1;

        $r3 = newarray (byte)[$i0];

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r3, 0, $i0);

        $i0 = lengthof $r5;

        $i1 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r3, $i0, $i1);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        $r5 = $r7.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

     label1:
        $r6 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void computePRF(byte[],byte[],byte[],byte[])>($r2, $r5, $r6, $r3);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(80, "PRF error", $r8);

        return;

        catch java.security.GeneralSecurityException from label1 to label2 with label3;
    }

    protected void fatalAlert(byte, java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        byte $b0;
        java.lang.String $r1;
        org.apache.harmony.xnet.provider.jsse.AlertException $r2;
        javax.net.ssl.SSLHandshakeException $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r3 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r3.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>($r1);

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>($b0, $r3);

        throw $r2;
    }

    protected void fatalAlert(byte, java.lang.String, java.lang.Exception)
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        byte $b0;
        java.lang.String $r1;
        java.lang.Exception $r2;
        org.apache.harmony.xnet.provider.jsse.AlertException $r3;
        javax.net.ssl.SSLException $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.Exception;

        $r3 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r4 = new javax.net.ssl.SSLException;

        specialinvoke $r4.<javax.net.ssl.SSLException: void <init>(java.lang.String,java.lang.Throwable)>($r1, $r2);

        specialinvoke $r3.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>($b0, $r4);

        throw $r3;
    }

    protected void fatalAlert(byte, javax.net.ssl.SSLException)
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        byte $b0;
        javax.net.ssl.SSLException $r1;
        org.apache.harmony.xnet.provider.jsse.AlertException $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: javax.net.ssl.SSLException;

        $r2 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>($b0, $r1);

        throw $r2;
    }

    public org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        return r1;
    }

    public javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        boolean $z0;
        java.lang.Exception $r2;
        java.util.Vector $r3;
        int $i0;
        javax.net.ssl.SSLEngineResult$HandshakeStatus r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: boolean hasData()>();

        if $z0 != 0 goto label1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendCCSpec>;

        if $z0 != 0 goto label1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendHelloRequest>;

        if $z0 != 0 goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.lang.Exception delegatedTaskErr>;

        if $r2 == null goto label2;

     label1:
        r4 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        return r4;

     label2:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.util.Vector delegatedTasks>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        r4 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;

        return r4;

     label3:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: int status>;

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label4;
            case 3: goto label6;
            default: goto label4;
        };

     label4:
        r4 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        return r4;

     label5:
        r4 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        return r4;

     label6:
        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: int status> = 2;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void clearMessages()>();

        r4 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        return r4;
    }

    public java.lang.Runnable getTask()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        java.util.Vector $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.Runnable $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.util.Vector delegatedTasks>;

        $z0 = virtualinvoke $r1.<java.util.Vector: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.util.Vector delegatedTasks>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object firstElement()>();

        $r3 = (java.lang.Runnable) $r2;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.util.Vector delegatedTasks>;

        virtualinvoke $r1.<java.util.Vector: java.lang.Object remove(int)>(0);

        return $r3;
    }

    abstract void makeFinished();

    abstract void receiveChangeCipherSpec();

    public void send(org.apache.harmony.xnet.provider.jsse.Message)
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.Message $r1;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r2;
        int $i0;
        long $l1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.Message;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.Message: int getType()>();

        $l1 = (long) $i0;

        virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint8(long)>($l1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.Message: int length()>();

        $l1 = (long) $i0;

        virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint24(long)>($l1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.Message: void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)>($r2);

        return;
    }

    protected void sendChangeCipherSpec()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendCCSpec> = 1;

        return;
    }

    protected void sendHelloRequest()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendHelloRequest> = 1;

        return;
    }

    protected void sendWarningAlert(byte)
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        byte $b0;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $b0 := @parameter0: byte;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: void alert(byte,byte)>(1, $b0);

        return;
    }

    public void setRecordProtocol(org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol)
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol> = $r1;

        return;
    }

    protected void shutdown()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        java.util.Vector $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void clearMessages()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] preMasterSecret> = null;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.util.Vector delegatedTasks>;

        virtualinvoke $r1.<java.util.Vector: void clear()>();

        return;
    }

    public abstract void start();

    protected void stop()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void clearMessages()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: int status> = 2;

        return;
    }

    protected void unexpectedMessage()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void fatalAlert(byte,java.lang.String)>(10, "UNEXPECTED MESSAGE");

        return;
    }

    public abstract void unwrap(byte[]);

    public abstract void unwrapSSLv2(byte[]);

    protected void verifyFinished(byte[])
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        byte[] $r1, $r2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 := @parameter0: byte[];

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] verify_data>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, $r1);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void fatalAlert(byte,java.lang.String)>(40, "Incorrect FINISED");

        return;

     label1:
        return;
    }

    public byte[] wrap()
    {
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r0;
        java.lang.Exception $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r4;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r5;
        byte[] $r6;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r7;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.lang.Exception delegatedTaskErr>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.lang.Exception delegatedTaskErr>;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.lang.Exception delegatedTaskErr> = null;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error occured in delegated task:");

        $r3 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void fatalAlert(byte,java.lang.String,java.lang.Exception)>(40, $r3, $r1);

     label1:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        $z0 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: boolean hasData()>();

        if $z0 == 0 goto label2;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream io_stream>;

        $r6 = virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,org.apache.harmony.xnet.provider.jsse.DataStream)>(22, $r4);

        return $r6;

     label2:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendCCSpec>;

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void makeFinished()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendCCSpec> = 0;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $r7 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()>();

        $r6 = virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] getChangeCipherSpecMesage(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)>($r7);

        return $r6;

     label3:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendHelloRequest>;

        if $z0 == 0 goto label4;

        $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: boolean needSendHelloRequest> = 0;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $r6 = newarray (byte)[4];

        $r6[0] = 0;

        $r6[1] = 0;

        $r6[2] = 0;

        $r6[3] = 0;

        $r6 = virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)>(22, $r6, 0, 4);

        return $r6;

     label4:
        return null;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: int NOT_HANDSHAKING> = 2;

        <org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: int NEED_UNWRAP> = 1;

        <org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: int NEED_TASK> = 4;

        <org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: int FINISHED> = 3;

        return;
    }
}
