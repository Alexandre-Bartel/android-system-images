public class org.apache.harmony.xnet.provider.jsse.ClientHello extends org.apache.harmony.xnet.provider.jsse.Message
{
    final org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites;
    final byte[] client_version;
    final byte[] compression_methods;
    final byte[] random;
    final byte[] session_id;

    public void <init>(java.security.SecureRandom, byte[], byte[], org.apache.harmony.xnet.provider.jsse.CipherSuite[])
    {
        org.apache.harmony.xnet.provider.jsse.ClientHello $r0;
        java.security.SecureRandom $r1;
        byte[] $r2, $r3, $r5;
        org.apache.harmony.xnet.provider.jsse.CipherSuite[] $r4;
        long $l0, $l1;
        int $i2, $i4;
        byte $b3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientHello;

        $r1 := @parameter0: java.security.SecureRandom;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: org.apache.harmony.xnet.provider.jsse.CipherSuite[];

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $r5 = newarray (byte)[32];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random> = $r5;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] client_version> = $r2;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l0 / 1000L;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r2);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        $l1 = $l0 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r2[0] = $b3;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        $l1 = $l0 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r2[1] = $b3;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        $l1 = $l0 & 255L;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r2[2] = $b3;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        $l0 = $l0 & 255L;

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        $r2[3] = $b3;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id> = $r3;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites> = $r4;

        $r2 = newarray (byte)[1];

        $r2[0] = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id>;

        $i2 = lengthof $r2;

        $i2 = $i2 + 38;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $i4 = lengthof $r4;

        $i4 = $i4 << 1;

        $i2 = $i2 + $i4;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods>;

        $i4 = lengthof $r2;

        $i2 = $i2 + $i4;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i2;

        return;
    }

    public void <init>(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.ClientHello $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        byte $b0, $b1, $b2;
        byte[] $r2, $r5;
        int $i3, $i4, $i5;
        org.apache.harmony.xnet.provider.jsse.CipherSuite[] $r3;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientHello;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $r2 = newarray (byte)[32];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random> = $r2;

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint8()>();

        if $i3 == 1 goto label1;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect V2ClientHello");

     label1:
        $r2 = newarray (byte)[2];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] client_version> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] client_version>;

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint8()>();

        $b0 = (byte) $i3;

        $r2[0] = $b0;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] client_version>;

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint8()>();

        $b0 = (byte) $i3;

        $r2[1] = $b0;

        $i4 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        if $i3 == 0 goto label2;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect V2ClientHello, cannot be used for resuming");

     label2:
        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        if $i3 >= 16 goto label3;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect V2ClientHello, short challenge data");

     label3:
        $r2 = newarray (byte)[0];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id> = $r2;

        $i4 = $i4 / 3;

        $r3 = newarray (org.apache.harmony.xnet.provider.jsse.CipherSuite)[$i4];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites> = $r3;

        $i4 = 0;

     label4:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $i5 = lengthof $r3;

        if $i4 >= $i5 goto label5;

        $i5 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>();

        $b0 = (byte) $i5;

        $i5 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>();

        $b1 = (byte) $i5;

        $i5 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>();

        $b2 = (byte) $i5;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $r4 = staticinvoke <org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(byte,byte,byte)>($b0, $b1, $b2);

        $r3[$i4] = $r4;

        $i4 = $i4 + 1;

        goto label4;

     label5:
        $r2 = newarray (byte)[1];

        $r2[0] = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods> = $r2;

        if $i3 >= 32 goto label8;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        $i4 = 32 - $i3;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r2, 0, $i4, 0);

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)>($i3);

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        $i4 = 32 - $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r5, $i4, $i3);

     label6:
        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int available()>();

        if $i3 <= 0 goto label7;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect V2ClientHello, extra data");

     label7:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id>;

        $i3 = lengthof $r2;

        $i3 = $i3 + 38;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $i4 = lengthof $r3;

        $i4 = $i4 << 1;

        $i3 = $i3 + $i4;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods>;

        $i4 = lengthof $r2;

        $i3 = $i3 + $i4;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i3;

        return;

     label8:
        if $i3 != 32 goto label9;

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)>(32);

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r5, 0, 32);

        goto label6;

     label9:
        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)>($i3);

        $i3 = $i3 - 32;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i3, $r5, 0, 32);

        goto label6;
    }

    public void <init>(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream, int) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.ClientHello $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        int $i0, $i3, $i4, $i5;
        byte $b1, $b2;
        byte[] $r2;
        org.apache.harmony.xnet.provider.jsse.CipherSuite[] $r3;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r4;
        long $l6;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientHello;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $i0 := @parameter1: int;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $r2 = newarray (byte)[32];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random> = $r2;

        $r2 = newarray (byte)[2];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] client_version> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] client_version>;

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint8()>();

        $b1 = (byte) $i3;

        $r2[0] = $b1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] client_version>;

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint8()>();

        $b1 = (byte) $i3;

        $r2[1] = $b1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read(byte[],int,int)>($r2, 0, 32);

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>();

        $r2 = newarray (byte)[$i3];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read(byte[],int,int)>($r2, 0, $i3);

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $i4 = $i3 & 1;

        if $i4 != 1 goto label1;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect ClientHello");

     label1:
        $i3 = $i3 >> 1;

        $r3 = newarray (org.apache.harmony.xnet.provider.jsse.CipherSuite)[$i3];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites> = $r3;

        $i4 = 0;

     label2:
        if $i4 >= $i3 goto label3;

        $i5 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>();

        $b1 = (byte) $i5;

        $i5 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>();

        $b2 = (byte) $i5;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $r4 = staticinvoke <org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite getByCode(byte,byte)>($b1, $b2);

        $r3[$i4] = $r4;

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read()>();

        $r2 = newarray (byte)[$i3];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read(byte[],int,int)>($r2, 0, $i3);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id>;

        $i3 = lengthof $r2;

        $i3 = $i3 + 38;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $i4 = lengthof $r3;

        $i4 = $i4 << 1;

        $i3 = $i3 + $i4;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods>;

        $i4 = lengthof $r2;

        $i3 = $i3 + $i4;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i3;

        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        if $i3 <= $i0 goto label4;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect ClientHello");

     label4:
        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        if $i3 >= $i0 goto label5;

        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        $i3 = $i0 - $i3;

        $l6 = (long) $i3;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: long skip(long)>($l6);

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i0;

        return;

     label5:
        return;
    }

    public byte[] getRandom()
    {
        org.apache.harmony.xnet.provider.jsse.ClientHello $r0;
        byte[] r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientHello;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        return r1;
    }

    public int getType()
    {
        org.apache.harmony.xnet.provider.jsse.ClientHello $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientHello;

        return 1;
    }

    public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)
    {
        org.apache.harmony.xnet.provider.jsse.ClientHello $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        int $i0, $i2;
        byte[] $r2;
        long $l1;
        org.apache.harmony.xnet.provider.jsse.CipherSuite[] $r3;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r4;
        byte $b3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientHello;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] client_version>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] random>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint8(long)>($l1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] session_id>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $i0 = lengthof $r3;

        $i0 = $i0 << 1;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

        $i0 = 0;

     label1:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $i2 = lengthof $r3;

        if $i0 >= $i2 goto label2;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: org.apache.harmony.xnet.provider.jsse.CipherSuite[] cipher_suites>;

        $r4 = $r3[$i0];

        $r2 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.CipherSuite: byte[] toBytes()>();

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint8(long)>($l1);

        $i0 = 0;

     label3:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods>;

        $i2 = lengthof $r2;

        if $i0 >= $i2 goto label4;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientHello: byte[] compression_methods>;

        $b3 = $r2[$i0];

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte)>($b3);

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return;
    }
}
