public class com.android.internal.policy.impl.PhoneWindowManager extends java.lang.Object implements android.view.WindowManagerPolicy
{
    static final int APPLICATION_LAYER;
    static final int APPLICATION_MEDIA_SUBLAYER;
    static final int APPLICATION_PANEL_SUBLAYER;
    static final int APPLICATION_SUB_PANEL_SUBLAYER;
    static final boolean DEBUG;
    static final boolean DEBUG_LAYOUT;
    static final int DEFAULT_ACCELEROMETER_ROTATION;
    static final int DEFAULT_ENDCALL_BEHAVIOR;
    static final int ENDCALL_HOME;
    static final int ENDCALL_SLEEPS;
    static final int INPUT_METHOD_DIALOG_LAYER;
    static final int INPUT_METHOD_LAYER;
    static final boolean KEYBOARD_ALWAYS_HIDDEN;
    static final int KEYGUARD_DIALOG_LAYER;
    static final int KEYGUARD_LAYER;
    private static final long[] LONG_PRESS_VIBE_PATTERN;
    static final int PHONE_LAYER;
    static final boolean PRINT_ANIM;
    static final int PRIORITY_PHONE_LAYER;
    static final int SEARCH_BAR_LAYER;
    static final boolean SHOW_PROCESSES_ON_ALT_MENU;
    static final boolean SHOW_STARTING_ANIMATIONS;
    static final float SLIDE_TOUCH_EVENT_SIZE_LIMIT;
    static final int STATUS_BAR_LAYER;
    static final int STATUS_BAR_PANEL_LAYER;
    static final int SYSTEM_ALERT_LAYER;
    public static final java.lang.String SYSTEM_DIALOG_REASON_GLOBAL_ACTIONS;
    public static final java.lang.String SYSTEM_DIALOG_REASON_KEY;
    public static final java.lang.String SYSTEM_DIALOG_REASON_RECENT_APPS;
    static final int SYSTEM_ERROR_LAYER;
    static final int SYSTEM_OVERLAY_LAYER;
    static final java.lang.String TAG;
    static final int TOAST_LAYER;
    private static final int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK;
    static final boolean localLOGV;
    static final android.graphics.Rect mTmpContentFrame;
    static final android.graphics.Rect mTmpDisplayFrame;
    static final android.graphics.Rect mTmpParentFrame;
    static final android.graphics.Rect mTmpVisibleFrame;
    int mAccelerometerDefault;
    android.content.BroadcastReceiver mBroadcastDone;
    android.os.PowerManager$WakeLock mBroadcastWakeLock;
    boolean mConsumeSearchKeyUp;
    int mContentBottom;
    int mContentLeft;
    int mContentRight;
    int mContentTop;
    android.content.Context mContext;
    int mCurBottom;
    int mCurLeft;
    int mCurRight;
    int mCurTop;
    int mCurrentAppOrientation;
    int mDockBottom;
    int mDockLayer;
    int mDockLeft;
    int mDockRight;
    int mDockTop;
    boolean mEnableShiftMenuBugReports;
    java.lang.Runnable mEndCallLongPress;
    int mEndcallBehavior;
    int mFancyRotationAnimation;
    boolean mForceStatusBar;
    com.android.internal.policy.impl.GlobalActions mGlobalActions;
    int mH;
    android.os.Handler mHandler;
    boolean mHasSoftInput;
    android.content.Intent mHomeIntent;
    java.lang.Runnable mHomeLongPress;
    boolean mHomePressed;
    android.view.WindowManagerPolicy$WindowState mKeyguard;
    com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator;
    boolean mLidOpen;
    final java.lang.Object mLock;
    com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener;
    boolean mOrientationSensorEnabled;
    android.os.LocalPowerManager mPowerManager;
    com.android.internal.policy.impl.RecentApplicationsDialog mRecentAppsDialog;
    boolean mSafeMode;
    boolean mScreenOn;
    android.view.WindowManagerPolicy$WindowState mSearchBar;
    boolean mSearchKeyPressed;
    com.android.internal.policy.impl.ShortcutManager mShortcutManager;
    boolean mShouldTurnOffOnKeyUp;
    android.view.WindowManagerPolicy$WindowState mStatusBar;
    android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState;
    android.os.Vibrator mVibrator;
    int mW;
    android.view.IWindowManager mWindowManager;

    static void <clinit>()
    {
        long[] $r0;
        android.graphics.Rect $r1;
        int[] $r2;

        <com.android.internal.policy.impl.PhoneWindowManager: int TOAST_LAYER> = 5;

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String TAG> = "WindowManager";

        <com.android.internal.policy.impl.PhoneWindowManager: int SYSTEM_OVERLAY_LAYER> = 14;

        <com.android.internal.policy.impl.PhoneWindowManager: int SYSTEM_ERROR_LAYER> = 9;

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_RECENT_APPS> = "recentapps";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_KEY> = "reason";

        <com.android.internal.policy.impl.PhoneWindowManager: java.lang.String SYSTEM_DIALOG_REASON_GLOBAL_ACTIONS> = "globalactions";

        <com.android.internal.policy.impl.PhoneWindowManager: int SYSTEM_ALERT_LAYER> = 8;

        <com.android.internal.policy.impl.PhoneWindowManager: int STATUS_BAR_PANEL_LAYER> = 4;

        <com.android.internal.policy.impl.PhoneWindowManager: int STATUS_BAR_LAYER> = 6;

        <com.android.internal.policy.impl.PhoneWindowManager: float SLIDE_TOUCH_EVENT_SIZE_LIMIT> = 0.6F;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean SHOW_STARTING_ANIMATIONS> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean SHOW_PROCESSES_ON_ALT_MENU> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int SEARCH_BAR_LAYER> = 3;

        <com.android.internal.policy.impl.PhoneWindowManager: int PRIORITY_PHONE_LAYER> = 7;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean PRINT_ANIM> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int PHONE_LAYER> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int KEYGUARD_LAYER> = 12;

        <com.android.internal.policy.impl.PhoneWindowManager: int KEYGUARD_DIALOG_LAYER> = 13;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean KEYBOARD_ALWAYS_HIDDEN> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int INPUT_METHOD_LAYER> = 10;

        <com.android.internal.policy.impl.PhoneWindowManager: int INPUT_METHOD_DIALOG_LAYER> = 11;

        <com.android.internal.policy.impl.PhoneWindowManager: int ENDCALL_SLEEPS> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int ENDCALL_HOME> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int DEFAULT_ENDCALL_BEHAVIOR> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int DEFAULT_ACCELEROMETER_ROTATION> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG_LAYOUT> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: boolean DEBUG> = 0;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_SUB_PANEL_SUBLAYER> = 2;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_PANEL_SUBLAYER> = 1;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_MEDIA_SUBLAYER> = -1;

        <com.android.internal.policy.impl.PhoneWindowManager: int APPLICATION_LAYER> = 1;

        $r0 = newarray (long)[4];

        $r0[0] = 0L;

        $r0[1] = 1L;

        $r0[2] = 20L;

        $r0[3] = 21L;

        <com.android.internal.policy.impl.PhoneWindowManager: long[] LONG_PRESS_VIBE_PATTERN> = $r0;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame> = $r1;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame> = $r1;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpContentFrame> = $r1;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame> = $r1;

        $r2 = newarray (int)[2];

        $r2[0] = 2003;

        $r2[1] = 2010;

        <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK> = $r2;

        return;
    }

    public void <init>()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        java.lang.Object $r1;
        com.android.internal.policy.impl.PhoneWindowManager$1 $r2;
        com.android.internal.policy.impl.PhoneWindowManager$2 $r3;
        com.android.internal.policy.impl.PhoneWindowManager$4 $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock> = $r1;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mSearchBar> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOn> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation> = -1;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAccelerometerDefault> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput> = 0;

        $r2 = new com.android.internal.policy.impl.PhoneWindowManager$1;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager$1: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>($r0);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mEndCallLongPress> = $r2;

        $r3 = new com.android.internal.policy.impl.PhoneWindowManager$2;

        specialinvoke $r3.<com.android.internal.policy.impl.PhoneWindowManager$2: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>($r0);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeLongPress> = $r3;

        $r4 = new com.android.internal.policy.impl.PhoneWindowManager$4;

        specialinvoke $r4.<com.android.internal.policy.impl.PhoneWindowManager$4: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>($r0);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.BroadcastReceiver mBroadcastDone> = $r4;

        return;
    }

    static android.media.IAudioService getAudioInterface()
    {
        android.os.IBinder $r0;
        android.media.IAudioService $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("audio");

        $r1 = staticinvoke <android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    static com.android.internal.telephony.ITelephony getPhoneInterface()
    {
        android.os.IBinder $r0;
        com.android.internal.telephony.ITelephony $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>("phone");

        $r1 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    static boolean isMediaKey(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 == 79 goto label1;

        if $i0 == 85 goto label1;

        if $i0 == 86 goto label1;

        if $i0 == 87 goto label1;

        if $i0 == 88 goto label1;

        if $i0 == 88 goto label1;

        if $i0 != 90 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    static void sendCloseSystemWindows(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        android.content.Intent $r2;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label2;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CLOSE_SYSTEM_DIALOGS");

        if $r1 == null goto label1;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("reason", $r1);

     label1:
        virtualinvoke $r0.<android.content.Context: void sendBroadcast(android.content.Intent)>($r2);

        return;

     label2:
        return;
    }

    public android.view.View addStartingWindow(android.os.IBinder, java.lang.String, int, java.lang.CharSequence, int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.os.IBinder $r1;
        java.lang.String $r2;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r3;
        android.content.Context $r4, $r5;
        boolean $z0;
        android.view.Window $r6;
        android.content.res.TypedArray $r7;
        android.content.res.Resources $r8;
        android.view.WindowManager$LayoutParams $r9;
        java.lang.StringBuilder $r10;
        java.lang.Object $r11;
        android.view.WindowManagerImpl $r12;
        android.view.View $r13;
        android.view.ViewParent $r14;
        android.view.WindowManager$BadTokenException $r15;
        android.content.pm.PackageManager$NameNotFoundException $r16;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.os.IBinder;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.CharSequence;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        if $r2 != null goto label01;

        return null;

     label01:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $z0 = 0;

        if $i0 != 0 goto label02;

        if $i1 == 0 goto label06;

     label02:
        $r5 = virtualinvoke $r4.<android.content.Context: android.content.Context createPackageContext(java.lang.String,int)>($r2, 0);

     label03:
        $r4 = $r5;

     label04:
        if $i0 == 0 goto label06;

        virtualinvoke $r5.<android.content.Context: void setTheme(int)>($i0);

     label05:
        $z0 = 1;

     label06:
        if $z0 != 0 goto label07;

        virtualinvoke $r4.<android.content.Context: void setTheme(int)>(16973829);

     label07:
        $r6 = staticinvoke <com.android.internal.policy.PolicyManager: android.view.Window makeNewWindow(android.content.Context)>($r4);

        $r7 = virtualinvoke $r6.<android.view.Window: android.content.res.TypedArray getWindowStyle()>();

        $z0 = virtualinvoke $r7.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(12, 0);

        if $z0 == 0 goto label08;

        return null;

     label08:
        $r8 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r8.<android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)>($i1, $r3);

        virtualinvoke $r6.<android.view.Window: void setTitle(java.lang.CharSequence)>($r3);

        virtualinvoke $r6.<android.view.Window: void setType(int)>(3);

        virtualinvoke $r6.<android.view.Window: void setFlags(int,int)>(131096, 131096);

        virtualinvoke $r6.<android.view.Window: void setLayout(int,int)>(-1, -1);

        $r9 = virtualinvoke $r6.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $r9.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = $r1;

        $r9.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r2;

        $r7 = virtualinvoke $r6.<android.view.Window: android.content.res.TypedArray getWindowStyle()>();

        $i0 = virtualinvoke $r7.<android.content.res.TypedArray: int getResourceId(int,int)>(8, 0);

        $r9.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i0;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Starting ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>($r2);

     label09:
        $r11 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r12 = (android.view.WindowManagerImpl) $r11;

        $r13 = virtualinvoke $r6.<android.view.Window: android.view.View getDecorView()>();

        $z0 = virtualinvoke $r6.<android.view.Window: boolean isFloating()>();

        if $z0 == 0 goto label11;

     label10:
        return null;

     label11:
        virtualinvoke $r12.<android.view.WindowManagerImpl: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r13, $r9);

        $r14 = virtualinvoke $r13.<android.view.View: android.view.ViewParent getParent()>();

     label12:
        if $r14 == null goto label13;

        return $r13;

     label13:
        return null;

     label14:
        $r15 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already running, starting window not displayed");

        $r2 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r2);

        return null;

     label15:
        $r16 := @caughtexception;

        goto label06;

        catch android.content.pm.PackageManager$NameNotFoundException from label02 to label03 with label15;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label15;
        catch android.view.WindowManager$BadTokenException from label09 to label10 with label14;
        catch android.view.WindowManager$BadTokenException from label11 to label12 with label14;
    }

    public void adjustConfigurationLw(android.content.res.Configuration)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.content.res.Configuration $r1;
        boolean $z0, $z1;
        android.os.LocalPowerManager $r2;
        byte $b0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.content.res.Configuration;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void readLidState()>();

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidOpen>;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.LocalPowerManager mPowerManager>;

        interfaceinvoke $r2.<android.os.LocalPowerManager: void setKeyboardVisibility(boolean)>($z0);

        if $z0 != 0 goto label1;

        $z1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHasSoftInput>;

        if $z1 == 0 goto label4;

     label1:
        $b0 = 1;

     label2:
        $r1.<android.content.res.Configuration: int keyboardHidden> = $b0;

        if $z0 == 0 goto label5;

        $b0 = 1;

     label3:
        $r1.<android.content.res.Configuration: int hardKeyboardHidden> = $b0;

        return;

     label4:
        $b0 = 2;

        goto label2;

     label5:
        $b0 = 2;

        goto label3;
    }

    public void adjustWindowParamsLw(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 2005: goto label2;
            case 2006: goto label2;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i0 = $i0 | 24;

        $r1.<android.view.WindowManager$LayoutParams: int flags> = $i0;

        return;
    }

    public void animatingWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$WindowState $r1;
        android.view.WindowManager$LayoutParams $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 := @parameter1: android.view.WindowManager$LayoutParams;

        return;
    }

    public void beginAnimationLw(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0, $i1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        return;
    }

    public void beginLayoutLw(int, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0, $i1;
        android.graphics.Rect $r1, $r2, $r3;
        android.view.WindowManagerPolicy$WindowState $r4;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mW> = $i0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mH> = $i1;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight> = $i0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight> = $i0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight> = $i0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = $i1;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = $i1;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom> = $i1;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer> = 268435456;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar> = 0;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r4 == null goto label1;

        $r2 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame>;

        $r1 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame>;

        $r3 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame>;

        $r3.<android.graphics.Rect: int left> = 0;

        $r1.<android.graphics.Rect: int left> = 0;

        $r2.<android.graphics.Rect: int left> = 0;

        $r3.<android.graphics.Rect: int top> = 0;

        $r1.<android.graphics.Rect: int top> = 0;

        $r2.<android.graphics.Rect: int top> = 0;

        $r3.<android.graphics.Rect: int right> = $i0;

        $r1.<android.graphics.Rect: int right> = $i0;

        $r2.<android.graphics.Rect: int right> = $i0;

        $r3.<android.graphics.Rect: int bottom> = $i1;

        $r1.<android.graphics.Rect: int bottom> = $i1;

        $r2.<android.graphics.Rect: int bottom> = $i1;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        interfaceinvoke $r4.<android.view.WindowManagerPolicy$WindowState: void computeFrameLw(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r2, $r1, $r3, $r3);

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z0 = interfaceinvoke $r4.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label2;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $r1 = interfaceinvoke $r4.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getFrameLw()>();

        $i0 = $r1.<android.graphics.Rect: int bottom>;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop> = $i0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop> = $i0;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop> = $i0;

        return;

     label1:
        return;

     label2:
        return;
    }

    public int checkAddPermission(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0;
        java.lang.String $r2;
        android.content.Context $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 < 2000 goto label1;

        if $i0 <= 2999 goto label2;

     label1:
        return 0;

     label2:
        $r2 = null;

        lookupswitch($i0)
        {
            case 2002: goto label5;
            case 2003: goto label5;
            case 2004: goto label3;
            case 2005: goto label4;
            case 2006: goto label5;
            case 2007: goto label5;
            case 2008: goto label3;
            case 2009: goto label3;
            case 2010: goto label5;
            case 2011: goto label4;
            default: goto label3;
        };

     label3:
        $r2 = "android.permission.INTERNAL_SYSTEM_WINDOW";

     label4:
        if $r2 == null goto label6;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>($r2);

        if $i0 == 0 goto label6;

        return -8;

     label5:
        $r2 = "android.permission.SYSTEM_ALERT_WINDOW";

        goto label4;

     label6:
        return 0;
    }

    public boolean detectSafeMode()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.IWindowManager $r1;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

     label1:
        $i0 = interfaceinvoke $r1.<android.view.IWindowManager: int getKeycodeState(int)>(82);

     label2:
        if $i0 <= 0 goto label6;

        $z0 = 1;

     label3:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSafeMode> = $z0;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Menu key state: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" safeMode=");

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSafeMode>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r3);

     label5:
        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSafeMode>;

        return $z0;

     label6:
        $z0 = 0;

        goto label3;

     label7:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("window manager dead");

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
    }

    public void enableKeyguard(boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardViewMediator $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: void setKeyguardEnabled(boolean)>($z0);

        return;
    }

    public void enableScreenAfterBoot()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void readLidState()>();

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(int)>(1);

        return;
    }

    public void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$OnKeyguardExitResult $r1;
        com.android.internal.policy.impl.KeyguardViewMediator $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$OnKeyguardExitResult;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)>($r1);

        return;
    }

    public boolean finishAnimationLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        return 0;
    }

    public boolean finishLayoutLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        boolean $z0, $z1, $z2;
        android.view.WindowManagerPolicy$WindowState $r1;
        android.os.IBinder $r2;
        android.app.IStatusBar $r3;
        android.view.WindowManager$LayoutParams $r4;
        int $i0;
        android.os.RemoteException $r5;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = 0;

        $z1 = 0;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r1 == null goto label01;

        $z2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar>;

        if $z2 == 0 goto label04;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: boolean showLw(boolean)>(1);

        $z0 = 0 | $z0;

     label01:
        if $z0 == 0 goto label09;

        if $z1 == 0 goto label10;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("statusbar");

        $r3 = staticinvoke <android.app.IStatusBar$Stub: android.app.IStatusBar asInterface(android.os.IBinder)>($r2);

        if $r3 == null goto label11;

     label02:
        interfaceinvoke $r3.<android.app.IStatusBar: void deactivate()>();

     label03:
        return $z0;

     label04:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r1 == null goto label01;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        $r4 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = $r4.<android.view.WindowManager$LayoutParams: int flags>;

        $i0 = $i0 & 1024;

        if $i0 == 0 goto label06;

        $z0 = 1;

     label05:
        if $z0 == 0 goto label07;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z1 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: boolean hideLw(boolean)>(1);

        $z0 = 0 | $z1;

        $z1 = 1;

        goto label01;

     label06:
        $z0 = 0;

        goto label05;

     label07:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: boolean showLw(boolean)>(1);

        $z0 = 0 | $z0;

        goto label01;

     label08:
        $r5 := @caughtexception;

        return $z0;

     label09:
        return $z0;

     label10:
        return $z0;

     label11:
        return $z0;

        catch android.os.RemoteException from label02 to label03 with label08;
    }

    public void getContentInsetHintLw(android.view.WindowManager$LayoutParams, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManager$LayoutParams $r1;
        android.graphics.Rect $r2;
        int $i0, $i1, $i2, $i3, $i4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 := @parameter1: android.graphics.Rect;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i0 = 66816 & $i0;

        if $i0 != 65792 goto label1;

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        $i3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mW>;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        $i3 = $i3 - $i1;

        $i4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mH>;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $i1 = $i4 - $i1;

        virtualinvoke $r2.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i2, $i3, $i1);

        return;

     label1:
        virtualinvoke $r2.<android.graphics.Rect: void setEmpty()>();

        return;
    }

    boolean goHome()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.content.Intent $r1, $r3;
        android.app.IActivityManager $r2;
        android.content.Context $r4;
        android.content.ContentResolver $r5;
        java.lang.String $r6;
        int $i0;
        android.os.RemoteException $r7;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

     label2:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

     label3:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = virtualinvoke $r3.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

        $i0 = interfaceinvoke $r2.<android.app.IActivityManager: int startActivity(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.net.Uri[],int,android.os.IBinder,java.lang.String,int,boolean,boolean)>(null, $r1, $r6, null, 0, null, null, 0, 1, 0);

     label4:
        if $i0 != 1 goto label6;

        return 0;

     label5:
        $r7 := @caughtexception;

     label6:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows()>();

        return 1;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean inKeyguardRestrictedKeyInputMode()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardViewMediator $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isInputRestricted()>();

        return $z0;
    }

    public void init(android.content.Context, android.view.IWindowManager, android.os.LocalPowerManager)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.content.Context $r1, $r8;
        android.view.IWindowManager $r2;
        android.os.LocalPowerManager $r3;
        com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver $r4;
        com.android.internal.policy.impl.KeyguardViewMediator $r5;
        android.os.Handler $r6;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r7;
        com.android.internal.policy.impl.ShortcutManager $r9;
        android.content.Intent $r10;
        java.lang.Object $r11;
        android.os.PowerManager $r12;
        android.os.PowerManager$WakeLock $r13;
        java.lang.String $r14, $r15;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.view.IWindowManager;

        $r3 := @parameter2: android.os.LocalPowerManager;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext> = $r1;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager> = $r2;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.LocalPowerManager mPowerManager> = $r3;

        $r5 = new com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r5.<com.android.internal.policy.impl.KeyguardViewMediator: void <init>(android.content.Context,com.android.internal.policy.impl.PhoneWindowManager,android.os.LocalPowerManager)>($r1, $r0, $r3);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator> = $r5;

        $r6 = new android.os.Handler;

        specialinvoke $r6.<android.os.Handler: void <init>()>();

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler> = $r6;

        $r7 = new com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener;

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r7.<com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.content.Context)>($r0, $r8);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener> = $r7;

        $r4 = new com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver;

        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke $r4.<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.os.Handler)>($r0, $r6);

        virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindowManager$SettingsObserver: void observe()>();

        $r9 = new com.android.internal.policy.impl.ShortcutManager;

        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        specialinvoke $r9.<com.android.internal.policy.impl.ShortcutManager: void <init>(android.content.Context,android.os.Handler)>($r1, $r6);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager> = $r9;

        $r9 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager>;

        virtualinvoke $r9.<com.android.internal.policy.impl.ShortcutManager: void observe()>();

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MAIN", null);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent> = $r10;

        $r10 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        virtualinvoke $r10.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.HOME");

        $r10 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        virtualinvoke $r10.<android.content.Intent: android.content.Intent addFlags(int)>(270532608);

        $r11 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r12 = (android.os.PowerManager) $r11;

        $r13 = virtualinvoke $r12.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "PhoneWindowManager.mBroadcastWakeLock");

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock> = $r13;

        $r14 = "1";

        $r15 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.debuggable");

        $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports> = $z0;

        return;
    }

    public boolean interceptKeyTi(android.view.WindowManagerPolicy$WindowState, int, int, boolean, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$WindowState $r1;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        android.os.RemoteException $r2, $r7;
        android.content.Intent $r3;
        android.os.Handler $r4;
        java.lang.Runnable $r5;
        com.android.internal.telephony.ITelephony $r6;
        android.view.WindowManager$LayoutParams $r8;
        int[] $r9;
        long $l5;
        android.content.Context $r10;
        android.os.IBinder $r11;
        android.app.IStatusBar $r12;
        java.lang.RuntimeException $r13;
        com.android.internal.policy.impl.ShortcutManager $r14;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $i2 := @parameter4: int;

        $z1 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardOn()>();

        if $i0 != 3 goto label01;

        if $z0 != 0 goto label01;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeLongPress>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r5);

     label01:
        $z2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed>;

        if $z2 == 0 goto label09;

        if $i0 != 3 goto label04;

        if $z0 != 0 goto label04;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed> = 0;

        $z0 = 0;

     label02:
        $r6 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getPhoneInterface()>();

        if $r6 == null goto label05;

        $z0 = interfaceinvoke $r6.<com.android.internal.telephony.ITelephony: boolean isRinging()>();

     label03:
        if $z0 == 0 goto label08;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "Ignoring HOME; there\'s a ringing incoming call.");

     label04:
        return 1;

     label05:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Unable to find ITelephony interface");

     label06:
        goto label03;

     label07:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "RemoteException from getPhoneInterface()", $r7);

        goto label03;

     label08:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void launchHomeFromHotKey()>();

        goto label04;

     label09:
        if $i0 != 3 goto label19;

        if $r1 == null goto label12;

        $r8 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

     label10:
        if $r8 == null goto label16;

        $i0 = $r8.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 2004 goto label11;

        if $i0 != 2009 goto label13;

     label11:
        return 0;

     label12:
        $r8 = null;

        goto label10;

     label13:
        $r9 = <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK>;

        $i1 = lengthof $r9;

        $i3 = 0;

     label14:
        if $i3 >= $i1 goto label16;

        $r9 = <com.android.internal.policy.impl.PhoneWindowManager: int[] WINDOW_TYPES_WHERE_HOME_DOESNT_WORK>;

        $i4 = $r9[$i3];

        if $i0 != $i4 goto label15;

        return 1;

     label15:
        $i3 = $i3 + 1;

        goto label14;

     label16:
        if $z0 == 0 goto label18;

        if $i2 != 0 goto label18;

        if $z1 != 0 goto label17;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r5 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mHomeLongPress>;

        $l5 = staticinvoke <android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>();

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r5, $l5);

     label17:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mHomePressed> = 1;

     label18:
        return 1;

     label19:
        if $i0 != 82 goto label20;

        if $z0 == 0 goto label25;

        if $i2 != 0 goto label25;

        $z2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mEnableShiftMenuBugReports>;

        if $z2 == 0 goto label25;

        $i3 = $i1 & 1;

        if $i3 != 1 goto label25;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.BUG_REPORT");

        $r10 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>($r3, null);

        return 1;

     label20:
        if $i0 != 83 goto label24;

        if $z0 == 0 goto label22;

        $r11 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("statusbar");

        $r12 = staticinvoke <android.app.IStatusBar$Stub: android.app.IStatusBar asInterface(android.os.IBinder)>($r11);

        if $r12 == null goto label22;

     label21:
        interfaceinvoke $r12.<android.app.IStatusBar: void toggle()>();

     label22:
        return 1;

     label23:
        $r2 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r13;

     label24:
        if $i0 != 84 goto label25;

        if $z0 == 0 goto label26;

        if $i2 != 0 goto label25;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyPressed> = 1;

     label25:
        $z2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyPressed>;

        if $z2 == 0 goto label27;

        if $z0 == 0 goto label27;

        if $i2 != 0 goto label27;

        if $z1 != 0 goto label27;

        $r14 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.ShortcutManager mShortcutManager>;

        $r3 = virtualinvoke $r14.<com.android.internal.policy.impl.ShortcutManager: android.content.Intent getIntent(int,int)>($i0, $i1);

        if $r3 == null goto label27;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r10 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        virtualinvoke $r10.<android.content.Context: void startActivity(android.content.Intent)>($r3);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 1;

        return 1;

     label26:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSearchKeyPressed> = 0;

        $z2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp>;

        if $z2 == 0 goto label25;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mConsumeSearchKeyUp> = 0;

        return 1;

     label27:
        return 0;

        catch android.os.RemoteException from label02 to label03 with label07;
        catch android.os.RemoteException from label05 to label06 with label07;
        catch android.os.RemoteException from label21 to label22 with label23;
    }

    public int interceptKeyTq(android.view.RawInputEvent, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.RawInputEvent $r1;
        boolean $z0, $z1, $z2, $z3;
        android.view.KeyEvent $r2;
        byte $b0, $b5;
        int $i1, $i2, $i3;
        com.android.internal.telephony.ITelephony $r3;
        com.android.internal.policy.impl.KeyguardViewMediator $r4;
        android.os.RemoteException $r5, $r12, $r13;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        android.os.Handler $r8;
        java.lang.Runnable $r9;
        long $l4, $l6;
        android.os.PowerManager$WakeLock $r10;
        com.android.internal.policy.impl.PhoneWindowManager$PassHeadsetKey $r11;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.RawInputEvent;

        $z0 := @parameter1: boolean;

        $b0 = 1;

        $z1 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isWakeKeyTq(android.view.RawInputEvent)>($r1);

        $z2 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardIsShowingTq()>();

        if $z2 == 0 goto label11;

        if $z0 == 0 goto label06;

        $b0 = 1 | 1;

     label01:
        $i1 = $r1.<android.view.RawInputEvent: int type>;

        $i2 = $r1.<android.view.RawInputEvent: int keycode>;

        $i3 = $r1.<android.view.RawInputEvent: int value>;

        if $i3 == 0 goto label12;

        $z1 = 1;

     label02:
        if $i1 != 1 goto label41;

        if $i2 != 6 goto label25;

        if $z1 == 0 goto label17;

        $z2 = 0;

     label03:
        $r3 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getPhoneInterface()>();

        if $r3 == null goto label13;

        $z2 = interfaceinvoke $r3.<com.android.internal.telephony.ITelephony: boolean endCall()>();

     label04:
        if $z2 != 0 goto label05;

        if $z0 != 0 goto label16;

     label05:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShouldTurnOffOnKeyUp> = 0;

        return $b0;

     label06:
        $b0 = 1 & -2;

        $i1 = $r1.<android.view.RawInputEvent: int type>;

        if $i1 != 1 goto label09;

        $i1 = $r1.<android.view.RawInputEvent: int value>;

        if $i1 == 0 goto label09;

        $z3 = 1;

     label07:
        if $z1 == 0 goto label01;

        if $z3 == 0 goto label01;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        $i1 = $r1.<android.view.RawInputEvent: int keycode>;

        $z1 = virtualinvoke $r4.<com.android.internal.policy.impl.KeyguardViewMediator: boolean onWakeKeyWhenKeyguardShowingTq(int)>($i1);

        if $z1 != 0 goto label01;

        $i1 = $r1.<android.view.RawInputEvent: int keycode>;

        if $i1 == 25 goto label08;

        $i1 = $r1.<android.view.RawInputEvent: int keycode>;

        if $i1 != 24 goto label01;

     label08:
        $z1 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isInCall()>();

        if $z1 == 0 goto label10;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        virtualinvoke $r4.<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()>();

        goto label01;

     label09:
        $z3 = 0;

        goto label07;

     label10:
        $z1 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isMusicActive()>();

        if $z1 == 0 goto label01;

        $i1 = $r1.<android.view.RawInputEvent: int keycode>;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendVolToMusic(int)>($i1);

        goto label01;

     label11:
        if $z0 != 0 goto label01;

        if $z1 == 0 goto label01;

        $b0 = 1 | 2;

        $b0 = $b0 & -2;

        goto label01;

     label12:
        $z1 = 0;

        goto label02;

     label13:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "!!! Unable to find ITelephony interface !!!");

     label14:
        goto label04;

     label15:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ITelephony.endCall() threw RemoteException");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        goto label04;

     label16:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShouldTurnOffOnKeyUp> = 1;

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r9 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mEndCallLongPress>;

        $l4 = staticinvoke <android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>();

        virtualinvoke $r8.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r9, $l4);

        $b0 = $b0 & -2;

        return $b0;

     label17:
        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r9 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Runnable mEndCallLongPress>;

        virtualinvoke $r8.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r9);

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShouldTurnOffOnKeyUp>;

        if $z0 == 0 goto label42;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mShouldTurnOffOnKeyUp> = 0;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        $i1 = $i1 & 1;

        if $i1 == 0 goto label23;

        $z1 = 1;

     label18:
        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label24;

        $z0 = 1;

     label19:
        if $z2 != 0 goto label21;

        if $z0 == 0 goto label20;

        if $z1 == 0 goto label21;

     label20:
        if $z1 == 0 goto label22;

        $z2 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean goHome()>();

        if $z2 != 0 goto label22;

        if $z0 == 0 goto label22;

     label21:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I\'m tired mEndcallBehavior=0x");

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mEndcallBehavior>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WindowManager", $r7);

        $b0 = $b0 & -3;

        $b0 = $b0 | 4;

     label22:
        $b0 = $b0 & -2;

        return $b0;

     label23:
        $z1 = 0;

        goto label18;

     label24:
        $z0 = 0;

        goto label19;

     label25:
        $z0 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: boolean isMediaKey(int)>($i2);

        if $z0 == 0 goto label28;

        $b5 = $b0 & 1;

        if $b5 != 0 goto label43;

        $r2 = new android.view.KeyEvent;

        $l4 = $r1.<android.view.RawInputEvent: long when>;

        $l6 = $r1.<android.view.RawInputEvent: long when>;

        if $z1 == 0 goto label27;

        $b5 = 0;

     label26:
        specialinvoke $r2.<android.view.KeyEvent: void <init>(long,long,int,int,int)>($l4, $l6, $b5, $i2, 0);

        $r10 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r10.<android.os.PowerManager$WakeLock: void acquire()>();

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Handler mHandler>;

        $r11 = new com.android.internal.policy.impl.PhoneWindowManager$PassHeadsetKey;

        specialinvoke $r11.<com.android.internal.policy.impl.PhoneWindowManager$PassHeadsetKey: void <init>(com.android.internal.policy.impl.PhoneWindowManager,android.view.KeyEvent)>($r0, $r2);

        virtualinvoke $r8.<android.os.Handler: boolean post(java.lang.Runnable)>($r11);

        return $b0;

     label27:
        $b5 = 1;

        goto label26;

     label28:
        if $i2 != 5 goto label34;

        if $z1 == 0 goto label44;

     label29:
        $r3 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getPhoneInterface()>();

        if $r3 == null goto label31;

        $z0 = interfaceinvoke $r3.<com.android.internal.telephony.ITelephony: boolean isRinging()>();

        if $z0 == 0 goto label45;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "interceptKeyTq: CALL key-down while ringing: Answer the call!");

        interfaceinvoke $r3.<com.android.internal.telephony.ITelephony: void answerRingingCall()>();

     label30:
        $b0 = $b0 & -2;

        return $b0;

     label31:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "CALL button: Unable to find ITelephony interface");

     label32:
        return $b0;

     label33:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "CALL button: RemoteException from getPhoneInterface()", $r12);

        return $b0;

     label34:
        if $i2 == 24 goto label35;

        if $i2 != 25 goto label46;

     label35:
        if $z1 == 0 goto label47;

     label36:
        $r3 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getPhoneInterface()>();

        if $r3 == null goto label38;

        $z0 = interfaceinvoke $r3.<com.android.internal.telephony.ITelephony: boolean isRinging()>();

        if $z0 == 0 goto label48;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "interceptKeyTq: VOLUME key-down while ringing: Silence ringer!");

        interfaceinvoke $r3.<com.android.internal.telephony.ITelephony: void silenceRinger()>();

     label37:
        $b0 = $b0 & -2;

        return $b0;

     label38:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "VOLUME button: Unable to find ITelephony interface");

     label39:
        return $b0;

     label40:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "VOLUME button: RemoteException from getPhoneInterface()", $r13);

        return $b0;

     label41:
        return $b0;

     label42:
        return $b0;

     label43:
        return $b0;

     label44:
        return $b0;

     label45:
        return $b0;

     label46:
        return $b0;

     label47:
        return $b0;

     label48:
        return $b0;

        catch android.os.RemoteException from label03 to label04 with label15;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch android.os.RemoteException from label29 to label30 with label33;
        catch android.os.RemoteException from label31 to label32 with label33;
        catch android.os.RemoteException from label36 to label37 with label40;
        catch android.os.RemoteException from label38 to label39 with label40;
    }

    public boolean isAppSwitchKeyTqTiLwLi(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        if $i0 == 3 goto label1;

        if $i0 != 6 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isCheekPressedAgainstScreen(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.MotionEvent $r1;
        float $f0;
        byte $b0;
        int $i1, $i2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.MotionEvent;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getSize()>();

        $b0 = $f0 cmpl 0.6F;

        if $b0 <= 0 goto label1;

        return 1;

     label1:
        $i1 = virtualinvoke $r1.<android.view.MotionEvent: int getHistorySize()>();

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label4;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getHistoricalSize(int)>($i2);

        $b0 = $f0 cmpl 0.6F;

        if $b0 <= 0 goto label3;

        return 1;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        return 0;
    }

    boolean isDeviceProvisioned()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "device_provisioned", 0);

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    boolean isInCall()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.os.RemoteException $r1;
        com.android.internal.telephony.ITelephony $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.telephony.ITelephony getPhoneInterface()>();

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "couldn\'t get ITelephony reference");

        return 0;

     label1:
        $z0 = interfaceinvoke $r2.<com.android.internal.telephony.ITelephony: boolean isOffhook()>();

     label2:
        return $z0;

     label3:
        $r1 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ITelephony.isOffhhook threw RemoteException ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r4);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isMovementKeyTi(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 19: goto label2;
            case 20: goto label2;
            case 21: goto label2;
            case 22: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    boolean isMusicActive()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.os.RemoteException $r1;
        android.media.IAudioService $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: android.media.IAudioService getAudioInterface()>();

        if $r2 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "isMusicActive: couldn\'t get IAudioService reference");

        return 0;

     label1:
        $z0 = interfaceinvoke $r2.<android.media.IAudioService: boolean isMusicActive()>();

     label2:
        return $z0;

     label3:
        $r1 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IAudioService.isMusicActive() threw RemoteException ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r4);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isWakeAbsMovementTq(int, int, android.view.RawInputEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0, $i1;
        android.view.RawInputEvent $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.view.RawInputEvent;

        $i0 = $r1.<android.view.RawInputEvent: int flags>;

        $i0 = $i0 & 3;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isWakeKeyTq(android.view.RawInputEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.RawInputEvent $r1;
        int $i0, $i1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.RawInputEvent;

        $i0 = $r1.<android.view.RawInputEvent: int keycode>;

        $i1 = $r1.<android.view.RawInputEvent: int flags>;

        if $i0 != 272 goto label1;

        $i1 = $i1 | 1;

     label1:
        $i0 = $i1 & 3;

        if $i0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isWakeRelMovementTq(int, int, android.view.RawInputEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0, $i1;
        android.view.RawInputEvent $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.view.RawInputEvent;

        $i0 = $r1.<android.view.RawInputEvent: int flags>;

        $i0 = $i0 & 3;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean keyguardIsShowingTq()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardViewMediator $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isShowing()>();

        return $z0;
    }

    boolean keyguardOn()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardIsShowingTq()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean inKeyguardRestrictedKeyInputMode()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    void launchHomeFromHotKey()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        com.android.internal.policy.impl.KeyguardViewMediator $r1;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindowManager$3 $r2;
        android.content.Context $r3;
        android.content.Intent $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isShowing()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isInputRestricted()>();

        if $z0 == 0 goto label2;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        $r2 = new com.android.internal.policy.impl.PhoneWindowManager$3;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager$3: void <init>(com.android.internal.policy.impl.PhoneWindowManager)>($r0);

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)>($r2);

        return;

     label2:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Intent mHomeIntent>;

        virtualinvoke $r3.<android.content.Context: void startActivity(android.content.Intent)>($r4);

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows()>();

        return;
    }

    public void layoutWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams, android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$WindowState $r1, $r3, $r8;
        android.view.WindowManager$LayoutParams $r2;
        android.graphics.Rect $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $r3 := @parameter2: android.view.WindowManagerPolicy$WindowState;

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r1 != $r8 goto label01;

        return;

     label01:
        $i0 = $r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $r4 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpParentFrame>;

        $r5 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpDisplayFrame>;

        $r6 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpContentFrame>;

        $r7 = <com.android.internal.policy.impl.PhoneWindowManager: android.graphics.Rect mTmpVisibleFrame>;

        $i2 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 2011 goto label06;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        $r7.<android.graphics.Rect: int left> = $i1;

        $r6.<android.graphics.Rect: int left> = $i1;

        $r5.<android.graphics.Rect: int left> = $i1;

        $r4.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        $r7.<android.graphics.Rect: int top> = $i1;

        $r6.<android.graphics.Rect: int top> = $i1;

        $r5.<android.graphics.Rect: int top> = $i1;

        $r4.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        $r7.<android.graphics.Rect: int right> = $i1;

        $r6.<android.graphics.Rect: int right> = $i1;

        $r5.<android.graphics.Rect: int right> = $i1;

        $r4.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $r7.<android.graphics.Rect: int bottom> = $i1;

        $r6.<android.graphics.Rect: int bottom> = $i1;

        $r5.<android.graphics.Rect: int bottom> = $i1;

        $r4.<android.graphics.Rect: int bottom> = $i1;

        $r2.<android.view.WindowManager$LayoutParams: int gravity> = 80;

        $i1 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer> = $i1;

     label02:
        $i0 = $i0 & 512;

        if $i0 == 0 goto label03;

        $r7.<android.graphics.Rect: int top> = -10000;

        $r7.<android.graphics.Rect: int left> = -10000;

        $r6.<android.graphics.Rect: int top> = -10000;

        $r6.<android.graphics.Rect: int left> = -10000;

        $r5.<android.graphics.Rect: int top> = -10000;

        $r5.<android.graphics.Rect: int left> = -10000;

        $r7.<android.graphics.Rect: int bottom> = 10000;

        $r7.<android.graphics.Rect: int right> = 10000;

        $r6.<android.graphics.Rect: int bottom> = 10000;

        $r6.<android.graphics.Rect: int right> = 10000;

        $r5.<android.graphics.Rect: int bottom> = 10000;

        $r5.<android.graphics.Rect: int right> = 10000;

     label03:
        interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: void computeFrameLw(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r4, $r5, $r6, $r7);

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label04;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i0 = $i0 & 2048;

        if $i0 == 0 goto label15;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mForceStatusBar> = 1;

     label04:
        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2011 goto label16;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: boolean getGivenInsetsPendingLw()>();

        if $z0 != 0 goto label17;

        $r4 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        $i0 = $r4.<android.graphics.Rect: int top>;

        $r4 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenContentInsetsLw()>();

        $i1 = $r4.<android.graphics.Rect: int top>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        if $i1 <= $i0 goto label05;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom> = $i0;

     label05:
        $r4 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getVisibleFrameLw()>();

        $i0 = $r4.<android.graphics.Rect: int top>;

        $r4 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getGivenVisibleInsetsLw()>();

        $i1 = $r4.<android.graphics.Rect: int top>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        if $i1 <= $i0 goto label18;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom> = $i0;

        return;

     label06:
        $i2 = 66816 & $i0;

        if $i2 != 65792 goto label10;

        if $r3 == null goto label07;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r1, $i0, $i1, $r3, 1, $r4, $r5, $r6, $r7);

        goto label02;

     label07:
        $r5.<android.graphics.Rect: int left> = 0;

        $r4.<android.graphics.Rect: int left> = 0;

        $r5.<android.graphics.Rect: int top> = 0;

        $r4.<android.graphics.Rect: int top> = 0;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mW>;

        $r5.<android.graphics.Rect: int right> = $i2;

        $r4.<android.graphics.Rect: int right> = $i2;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mH>;

        $r5.<android.graphics.Rect: int bottom> = $i2;

        $r4.<android.graphics.Rect: int bottom> = $i2;

        $i1 = $i1 & 240;

        if $i1 == 16 goto label09;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        $r6.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        $r6.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        $r6.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $r6.<android.graphics.Rect: int bottom> = $i1;

     label08:
        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        $r7.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        $r7.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        $r7.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $r7.<android.graphics.Rect: int bottom> = $i1;

        goto label02;

     label09:
        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        $r6.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        $r6.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        $r6.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        $r6.<android.graphics.Rect: int bottom> = $i1;

        goto label08;

     label10:
        $i2 = $i0 & 256;

        if $i2 == 0 goto label11;

        $r6.<android.graphics.Rect: int left> = 0;

        $r5.<android.graphics.Rect: int left> = 0;

        $r4.<android.graphics.Rect: int left> = 0;

        $r6.<android.graphics.Rect: int top> = 0;

        $r5.<android.graphics.Rect: int top> = 0;

        $r4.<android.graphics.Rect: int top> = 0;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mW>;

        $r6.<android.graphics.Rect: int right> = $i1;

        $r5.<android.graphics.Rect: int right> = $i1;

        $r4.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mH>;

        $r6.<android.graphics.Rect: int bottom> = $i1;

        $r5.<android.graphics.Rect: int bottom> = $i1;

        $r4.<android.graphics.Rect: int bottom> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        $r7.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        $r7.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        $r7.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $r7.<android.graphics.Rect: int bottom> = $i1;

        goto label02;

     label11:
        if $r3 == null goto label12;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState,int,int,android.view.WindowManagerPolicy$WindowState,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>($r1, $i0, $i1, $r3, 0, $r4, $r5, $r6, $r7);

        goto label02;

     label12:
        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        $r4.<android.graphics.Rect: int left> = $i2;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        $r4.<android.graphics.Rect: int top> = $i2;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        $r4.<android.graphics.Rect: int right> = $i2;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        $r4.<android.graphics.Rect: int bottom> = $i2;

        $i1 = $i1 & 240;

        if $i1 == 16 goto label14;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        $r6.<android.graphics.Rect: int left> = $i1;

        $r5.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        $r6.<android.graphics.Rect: int top> = $i1;

        $r5.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        $r6.<android.graphics.Rect: int right> = $i1;

        $r5.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $r6.<android.graphics.Rect: int bottom> = $i1;

        $r5.<android.graphics.Rect: int bottom> = $i1;

     label13:
        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurLeft>;

        $r7.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurTop>;

        $r7.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurRight>;

        $r7.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurBottom>;

        $r7.<android.graphics.Rect: int bottom> = $i1;

        goto label02;

     label14:
        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        $r6.<android.graphics.Rect: int left> = $i1;

        $r5.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        $r6.<android.graphics.Rect: int top> = $i1;

        $r5.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        $r6.<android.graphics.Rect: int right> = $i1;

        $r5.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        $r6.<android.graphics.Rect: int bottom> = $i1;

        $r5.<android.graphics.Rect: int bottom> = $i1;

        goto label13;

     label15:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState>;

        if $r3 != null goto label04;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 < 1 goto label04;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 > 99 goto label04;

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mW>;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mH>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: boolean fillsScreenLw(int,int,boolean,boolean)>($i0, $i1, 0, 0);

        if $z0 == 0 goto label04;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mTopFullscreenOpaqueWindowState> = $r1;

        goto label04;

     label16:
        return;

     label17:
        return;

     label18:
        return;
    }

    boolean needSensorRunningLp()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i0 != 4 goto label1;

        return 1;

     label1:
        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAccelerometerDefault>;

        if $i0 != 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    public void onKeyguardShow()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows()>();

        return;
    }

    public boolean performHapticFeedbackLw(android.view.WindowManagerPolicy$WindowState, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$WindowState $r1;
        int $i0, $i1;
        boolean $z0;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.os.Vibrator $r4;
        long[] $r5;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        if $z0 != 0 goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>($r3, "haptic_feedback_enabled", 0);

        if $i1 != 0 goto label1;

        return 0;

     label1:
        lookupswitch($i0)
        {
            case 0: goto label3;
            default: goto label2;
        };

     label2:
        return 0;

     label3:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator>;

        $r5 = <com.android.internal.policy.impl.PhoneWindowManager: long[] LONG_PRESS_VIBE_PATTERN>;

        virtualinvoke $r4.<android.os.Vibrator: void vibrate(long[],int)>($r5, -1);

        return 1;
    }

    public int prepareAddWindowLw(android.view.WindowManagerPolicy$WindowState, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$WindowState $r1, $r3;
        android.view.WindowManager$LayoutParams $r2;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        lookupswitch($i0)
        {
            case 2000: goto label2;
            case 2001: goto label4;
            case 2002: goto label1;
            case 2003: goto label1;
            case 2004: goto label6;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r3 == null goto label3;

        return -7;

     label3:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = $r1;

        goto label1;

     label4:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mSearchBar>;

        if $r3 == null goto label5;

        return -7;

     label5:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mSearchBar> = $r1;

        goto label1;

     label6:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        if $r3 == null goto label7;

        return -7;

     label7:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard> = $r1;

        goto label1;
    }

    public boolean preprocessInputEventTq(android.view.RawInputEvent)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.RawInputEvent $r1;
        int $i0;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardViewMediator $r2;
        android.os.LocalPowerManager $r3;
        long $l1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.RawInputEvent;

        $i0 = $r1.<android.view.RawInputEvent: int type>;

        lookupswitch($i0)
        {
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $i0 = $r1.<android.view.RawInputEvent: int keycode>;

        if $i0 != 0 goto label7;

        $i0 = $r1.<android.view.RawInputEvent: int value>;

        if $i0 != 0 goto label4;

        $z0 = 1;

     label3:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidOpen> = $z0;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateRotation(int)>(1);

        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean keyguardIsShowingTq()>();

        if $z0 == 0 goto label5;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidOpen>;

        if $z0 == 0 goto label8;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()>();

        return 0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidOpen>;

        if $z0 == 0 goto label6;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.LocalPowerManager mPowerManager>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        interfaceinvoke $r3.<android.os.LocalPowerManager: void userActivity(long,boolean,int)>($l1, 0, 5);

        return 0;

     label6:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.LocalPowerManager mPowerManager>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        interfaceinvoke $r3.<android.os.LocalPowerManager: void userActivity(long,boolean,int)>($l1, 0, 0);

        return 0;

     label7:
        return 0;

     label8:
        return 0;
    }

    void readLidState()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0;
        android.view.IWindowManager $r1;
        boolean $z0;
        android.os.RemoteException $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

     label1:
        $i0 = interfaceinvoke $r1.<android.view.IWindowManager: int getSwitchState(int)>(0);

     label2:
        if $i0 < 0 goto label6;

        if $i0 != 0 goto label4;

        $z0 = 1;

     label3:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidOpen> = $z0;

        return;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r2 := @caughtexception;

        return;

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label5;
    }

    public void removeStartingWindow(android.os.IBinder, android.view.View)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.os.IBinder $r1;
        android.view.View $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.view.WindowManagerImpl $r5;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.os.IBinder;

        $r2 := @parameter1: android.view.View;

        if $r2 == null goto label1;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r5 = (android.view.WindowManagerImpl) $r4;

        virtualinvoke $r5.<android.view.WindowManagerImpl: void removeView(android.view.View)>($r2);

        return;

     label1:
        return;
    }

    public void removeWindowLw(android.view.WindowManagerPolicy$WindowState)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$WindowState $r1, $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar>;

        if $r2 != $r1 goto label1;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mStatusBar> = null;

        return;

     label1:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mSearchBar>;

        if $r2 != $r1 goto label2;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mSearchBar> = null;

        return;

     label2:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard>;

        if $r2 != $r1 goto label3;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.WindowManagerPolicy$WindowState mKeyguard> = null;

        return;

     label3:
        return;
    }

    public int rotationForOrientationLw(int, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0, $i1;
        boolean $z0;
        java.lang.Object $r1;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor $r1;

        lookupswitch($i0)
        {
            case 0: goto label03;
            case 1: goto label05;
            default: goto label01;
        };

     label01:
        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidOpen>;

        if $z0 == 0 goto label07;

        exitmonitor $r1;

     label02:
        return 1;

     label03:
        exitmonitor $r1;

     label04:
        return 1;

     label05:
        exitmonitor $r1;

     label06:
        return 0;

     label07:
        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean useSensorForOrientationLp(int)>($i0);

        if $z0 == 0 goto label11;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        $i0 = virtualinvoke $r2.<android.view.WindowOrientationListener: int getCurrentRotation()>();

        if $i0 < 0 goto label10;

     label08:
        exitmonitor $r1;

     label09:
        return $i0;

     label10:
        $i0 = $i1;

        goto label08;

     label11:
        exitmonitor $r1;

     label12:
        return 0;

     label13:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label14:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label09 with label13;
        catch java.lang.Throwable from label10 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void screenOnStoppedLw()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        com.android.internal.policy.impl.KeyguardViewMediator $r1;
        boolean $z0;
        long $l0;
        android.os.LocalPowerManager $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isShowing()>();

        if $z0 != 0 goto label1;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.LocalPowerManager mPowerManager>;

        interfaceinvoke $r2.<android.os.LocalPowerManager: void userActivity(long,boolean,int)>($l0, 0, 0);

        return;

     label1:
        return;
    }

    public void screenTurnedOff(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0;
        com.android.internal.policy.impl.KeyguardViewMediator $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(70000, 0);

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOff(int)>($i0);

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOn> = 0;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void screenTurnedOn()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        com.android.internal.policy.impl.KeyguardViewMediator $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(70000, 1);

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewMediator: void onScreenTurnedOn()>();

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOn> = 1;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int selectAnimationLw(android.view.WindowManagerPolicy$WindowState, int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$WindowState $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $i0 := @parameter1: int;

        if $i0 != 5 goto label1;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: boolean hasAppShownWindows()>();

        if $z0 == 0 goto label1;

        return 17432583;

     label1:
        return 0;
    }

    void sendCloseSystemWindows()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.content.Context $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    void sendCloseSystemWindows(java.lang.String)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        java.lang.String $r1;
        android.content.Context $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r2, $r1);

        return;
    }

    void sendVolToMusic(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0;
        android.media.IAudioService $r1;
        android.os.PowerManager$WakeLock $r2;
        byte $b1;
        android.os.RemoteException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: android.media.IAudioService getAudioInterface()>();

        if $r1 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "sendVolToMusic: couldn\'t get IAudioService reference");

        return;

     label01:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

     label02:
        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire()>();

     label03:
        if $i0 != 24 goto label07;

     label04:
        $b1 = 1;

     label05:
        interfaceinvoke $r1.<android.media.IAudioService: void adjustStreamVolume(int,int,int)>(3, $b1, 0);

     label06:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label07:
        $b1 = -1;

        goto label05;

     label08:
        $r3 := @caughtexception;

     label09:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IAudioService.adjustStreamVolume() threw RemoteException ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r5);

     label10:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label11:
        $r6 := @caughtexception;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.PowerManager$WakeLock mBroadcastWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        throw $r6;

        catch android.os.RemoteException from label02 to label03 with label08;
        catch android.os.RemoteException from label04 to label06 with label08;
        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label04 to label06 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    void setAttachedWindowFrames(android.view.WindowManagerPolicy$WindowState, int, int, android.view.WindowManagerPolicy$WindowState, boolean, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.view.WindowManagerPolicy$WindowState $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        android.graphics.Rect $r3, $r4, $r5, $r6, $r7;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 := @parameter0: android.view.WindowManagerPolicy$WindowState;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: android.view.WindowManagerPolicy$WindowState;

        $z0 := @parameter4: boolean;

        $r3 := @parameter5: android.graphics.Rect;

        $r4 := @parameter6: android.graphics.Rect;

        $r5 := @parameter7: android.graphics.Rect;

        $r6 := @parameter8: android.graphics.Rect;

        $i2 = interfaceinvoke $r1.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i2 <= $i3 goto label03;

        $i2 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i2 >= $i3 goto label03;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLeft>;

        $r6.<android.graphics.Rect: int left> = $i1;

        $r5.<android.graphics.Rect: int left> = $i1;

        $r4.<android.graphics.Rect: int left> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockTop>;

        $r6.<android.graphics.Rect: int top> = $i1;

        $r5.<android.graphics.Rect: int top> = $i1;

        $r4.<android.graphics.Rect: int top> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockRight>;

        $r6.<android.graphics.Rect: int right> = $i1;

        $r5.<android.graphics.Rect: int right> = $i1;

        $r4.<android.graphics.Rect: int right> = $i1;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockBottom>;

        $r6.<android.graphics.Rect: int bottom> = $i1;

        $r5.<android.graphics.Rect: int bottom> = $i1;

        $r4.<android.graphics.Rect: int bottom> = $i1;

     label01:
        $i0 = $i0 & 256;

        if $i0 != 0 goto label11;

        $r4 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getFrameLw()>();

     label02:
        virtualinvoke $r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

        return;

     label03:
        $i1 = $i1 & 240;

        if $i1 == 16 goto label06;

        $r7 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getDisplayFrameLw()>();

        virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

     label04:
        if $z0 == 0 goto label10;

        $r5 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getDisplayFrameLw()>();

     label05:
        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r5);

        $r5 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getVisibleFrameLw()>();

        virtualinvoke $r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r5);

        goto label01;

     label06:
        $r7 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: android.graphics.Rect getContentFrameLw()>();

        virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

        $i1 = interfaceinvoke $r2.<android.view.WindowManagerPolicy$WindowState: int getSurfaceLayer()>();

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mDockLayer>;

        if $i1 >= $i2 goto label04;

        $i1 = $r5.<android.graphics.Rect: int left>;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        if $i1 >= $i2 goto label07;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentLeft>;

        $r5.<android.graphics.Rect: int left> = $i1;

     label07:
        $i1 = $r5.<android.graphics.Rect: int top>;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        if $i1 >= $i2 goto label08;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentTop>;

        $r5.<android.graphics.Rect: int top> = $i1;

     label08:
        $i1 = $r5.<android.graphics.Rect: int right>;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        if $i1 <= $i2 goto label09;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentRight>;

        $r5.<android.graphics.Rect: int right> = $i1;

     label09:
        $i1 = $r5.<android.graphics.Rect: int bottom>;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        if $i1 <= $i2 goto label04;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mContentBottom>;

        $r5.<android.graphics.Rect: int bottom> = $i1;

        goto label04;

     label10:
        goto label05;

     label11:
        goto label02;
    }

    public void setCurrentOrientationLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation>;

        if $i0 == $i1 goto label2;

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mCurrentAppOrientation> = $i0;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void showGlobalActionsDialog()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        com.android.internal.policy.impl.GlobalActions $r1;
        android.content.Context $r2;
        com.android.internal.policy.impl.KeyguardViewMediator $r3;
        boolean $z0, $z1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions>;

        if $r1 != null goto label1;

        $r1 = new com.android.internal.policy.impl.GlobalActions;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r1.<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context)>($r2);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions> = $r1;

     label1:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        $z0 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isShowing()>();

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.GlobalActions mGlobalActions>;

        $z1 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean isDeviceProvisioned()>();

        virtualinvoke $r1.<com.android.internal.policy.impl.GlobalActions: void showDialog(boolean,boolean)>($z0, $z1);

        if $z0 == 0 goto label2;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock()>();

        return;

     label2:
        return;
    }

    void showRecentAppsDialog()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.content.Context $r1;
        com.android.internal.policy.impl.RecentApplicationsDialog $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.RecentApplicationsDialog mRecentAppsDialog>;

        if $r2 != null goto label1;

        $r2 = new com.android.internal.policy.impl.RecentApplicationsDialog;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.content.Context mContext>;

        specialinvoke $r2.<com.android.internal.policy.impl.RecentApplicationsDialog: void <init>(android.content.Context)>($r1);

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.RecentApplicationsDialog mRecentAppsDialog> = $r2;

     label1:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.RecentApplicationsDialog mRecentAppsDialog>;

        virtualinvoke $r2.<android.app.Dialog: void show()>();

        return;
    }

    public int subWindowTypeToLayerLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 1000: goto label2;
            case 1001: goto label3;
            case 1002: goto label4;
            case 1003: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown sub-window type: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WindowManager", $r2);

        return 0;

     label2:
        return 1;

     label3:
        return -1;

     label4:
        return 2;
    }

    public void systemReady()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        android.app.IActivityManager $r1;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardViewMediator $r2;
        java.lang.Object $r3;
        android.os.Vibrator $r4;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mSafeMode>;

        if $z0 == 0 goto label2;

     label1:
        $r1 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void enterSafeMode()>();

     label2:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.KeyguardViewMediator mKeyguardMediator>;

        virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardViewMediator: void onSystemReady()>();

        staticinvoke <android.os.SystemProperties: void set(java.lang.String,java.lang.String)>("dev.bootcomplete", "1");

     label3:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: java.lang.Object mLock>;

        entermonitor $r3;

     label4:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: void updateOrientationListenerLp()>();

        $r4 = new android.os.Vibrator;

        specialinvoke $r4.<android.os.Vibrator: void <init>()>();

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.Vibrator mVibrator> = $r4;

        exitmonitor $r3;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label7:
        throw $r5;

     label8:
        $r6 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label3 with label8;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch android.os.RemoteException from label7 to label8 with label8;
    }

    void updateOrientationListenerLp()
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener $r1;
        boolean $z0, $z1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        $z0 = virtualinvoke $r1.<android.view.WindowOrientationListener: boolean canDetectOrientation()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z0 = 1;

        $z1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mScreenOn>;

        if $z1 == 0 goto label2;

        $z1 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean needSensorRunningLp()>();

        if $z1 == 0 goto label2;

        $z0 = 0;

        $z1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled>;

        if $z1 != 0 goto label2;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r1.<android.view.WindowOrientationListener: void enable()>();

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 1;

     label2:
        if $z0 == 0 goto label3;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled>;

        if $z0 == 0 goto label4;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: com.android.internal.policy.impl.PhoneWindowManager$MyOrientationListener mOrientationListener>;

        virtualinvoke $r1.<android.view.WindowOrientationListener: void disable()>();

        $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mOrientationSensorEnabled> = 0;

        return;

     label3:
        return;

     label4:
        return;
    }

    void updateRotation(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0, $i2;
        android.os.LocalPowerManager $r1;
        boolean $z0;
        byte $b1;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.os.LocalPowerManager mPowerManager>;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidOpen>;

        interfaceinvoke $r1.<android.os.LocalPowerManager: void setKeyboardVisibility(boolean)>($z0);

        $b1 = 0;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: boolean mLidOpen>;

        if $z0 == 0 goto label1;

        $b1 = 1;

     label1:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: android.view.IWindowManager mWindowManager>;

        $i2 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mFancyRotationAnimation>;

        $i0 = $i2 | $i0;

     label2:
        interfaceinvoke $r2.<android.view.IWindowManager: void setRotation(int,boolean,int)>($b1, 1, $i0);

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    boolean useSensorForOrientationLp(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0, $i1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        if $i0 != 4 goto label1;

        return 1;

     label1:
        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindowManager: int mAccelerometerDefault>;

        if $i1 == 0 goto label3;

        if $i0 == 2 goto label2;

        if $i0 != -1 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public int windowTypeToLayerLw(int)
    {
        com.android.internal.policy.impl.PhoneWindowManager $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindowManager;

        $i0 := @parameter0: int;

        if $i0 < 1 goto label01;

        if $i0 > 99 goto label01;

        return 1;

     label01:
        lookupswitch($i0)
        {
            case 2000: goto label03;
            case 2001: goto label05;
            case 2002: goto label06;
            case 2003: goto label09;
            case 2004: goto label07;
            case 2005: goto label15;
            case 2006: goto label13;
            case 2007: goto label14;
            case 2008: goto label04;
            case 2009: goto label08;
            case 2010: goto label10;
            case 2011: goto label11;
            case 2012: goto label12;
            default: goto label02;
        };

     label02:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown window type: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WindowManager", $r2);

        return 1;

     label03:
        return 6;

     label04:
        return 4;

     label05:
        return 3;

     label06:
        return 2;

     label07:
        return 12;

     label08:
        return 13;

     label09:
        return 8;

     label10:
        return 9;

     label11:
        return 10;

     label12:
        return 11;

     label13:
        return 14;

     label14:
        return 7;

     label15:
        return 5;
    }
}
