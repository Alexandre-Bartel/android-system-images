public abstract class android.database.AbstractCursor extends java.lang.Object implements android.database.CrossProcessCursor
{
    private static final java.lang.String TAG;
    protected boolean mClosed;
    android.database.ContentObservable mContentObservable;
    protected android.content.ContentResolver mContentResolver;
    protected java.lang.Long mCurrentRowID;
    android.database.DataSetObservable mDataSetObservable;
    private android.net.Uri mNotifyUri;
    protected int mPos;
    protected int mRowIdColumnIndex;
    private android.database.ContentObserver mSelfObserver;
    private final java.lang.Object mSelfObserverLock;
    private boolean mSelfObserverRegistered;
    protected java.util.HashMap mUpdatedRows;

    public void <init>()
    {
        android.database.AbstractCursor $r0;
        android.database.DataSetObservable $r1;
        android.database.ContentObservable $r2;
        java.lang.Object $r3;
        java.util.HashMap $r4;

        $r0 := @this: android.database.AbstractCursor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new android.database.DataSetObservable;

        specialinvoke $r1.<android.database.DataSetObservable: void <init>()>();

        $r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable> = $r1;

        $r2 = new android.database.ContentObservable;

        specialinvoke $r2.<android.database.ContentObservable: void <init>()>();

        $r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable> = $r2;

        $r0.<android.database.AbstractCursor: boolean mClosed> = 0;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r0.<android.database.AbstractCursor: java.lang.Object mSelfObserverLock> = $r3;

        $r0.<android.database.AbstractCursor: int mPos> = -1;

        $r0.<android.database.AbstractCursor: int mRowIdColumnIndex> = -1;

        $r0.<android.database.AbstractCursor: java.lang.Long mCurrentRowID> = null;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows> = $r4;

        return;
    }

    public void abortUpdates()
    {
        android.database.AbstractCursor $r0;
        java.util.HashMap $r1, $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.AbstractCursor;

        $r1 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        virtualinvoke $r2.<java.util.HashMap: void clear()>();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void checkPosition()
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;
        android.database.CursorIndexOutOfBoundsException $r1;

        $r0 := @this: android.database.AbstractCursor;

        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        if -1 == $i0 goto label1;

        $i0 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        $i1 = $r0.<android.database.AbstractCursor: int mPos>;

        if $i0 != $i1 goto label2;

     label1:
        $r1 = new android.database.CursorIndexOutOfBoundsException;

        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        $i1 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        specialinvoke $r1.<android.database.CursorIndexOutOfBoundsException: void <init>(int,int)>($i0, $i1);

        throw $r1;

     label2:
        return;
    }

    public void close()
    {
        android.database.AbstractCursor $r0;
        android.database.ContentObservable $r1;

        $r0 := @this: android.database.AbstractCursor;

        $r0.<android.database.AbstractCursor: boolean mClosed> = 1;

        $r1 = $r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r1.<android.database.Observable: void unregisterAll()>();

        virtualinvoke $r0.<android.database.AbstractCursor: void deactivateInternal()>();

        return;
    }

    public boolean commitUpdates()
    {
        android.database.AbstractCursor $r0;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean commitUpdates(java.util.Map)>(null);

        return $z0;
    }

    public boolean commitUpdates(java.util.Map)
    {
        android.database.AbstractCursor $r0;
        java.util.Map $r1;

        $r0 := @this: android.database.AbstractCursor;

        $r1 := @parameter0: java.util.Map;

        return 0;
    }

    public void copyStringToBuffer(int, android.database.CharArrayBuffer)
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;
        android.database.CharArrayBuffer $r1;
        char[] $r2;
        java.lang.String $r3;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.database.CharArrayBuffer;

        $r3 = virtualinvoke $r0.<android.database.AbstractCursor: java.lang.String getString(int)>($i0);

        if $r3 == null goto label4;

        $r2 = $r1.<android.database.CharArrayBuffer: char[] data>;

        if $r2 == null goto label1;

        $i0 = lengthof $r2;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label3;

     label1:
        $r2 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $r1.<android.database.CharArrayBuffer: char[] data> = $r2;

     label2:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r1.<android.database.CharArrayBuffer: int sizeCopied> = $i0;

        return;

     label3:
        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke $r3.<java.lang.String: void getChars(int,int,char[],int)>(0, $i0, $r2, 0);

        goto label2;

     label4:
        return;
    }

    public void deactivate()
    {
        android.database.AbstractCursor $r0;

        $r0 := @this: android.database.AbstractCursor;

        virtualinvoke $r0.<android.database.AbstractCursor: void deactivateInternal()>();

        return;
    }

    public void deactivateInternal()
    {
        android.database.AbstractCursor $r0;
        android.database.ContentObserver $r1;
        android.content.ContentResolver $r2;
        android.database.DataSetObservable $r3;

        $r0 := @this: android.database.AbstractCursor;

        $r1 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r1 == null goto label1;

        $r2 = $r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r1 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r1);

        $r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered> = 0;

     label1:
        $r3 = $r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r3.<android.database.DataSetObservable: void notifyInvalidated()>();

        return;
    }

    public boolean deleteRow()
    {
        android.database.AbstractCursor $r0;

        $r0 := @this: android.database.AbstractCursor;

        return 0;
    }

    public void fillWindow(int, android.database.CursorWindow)
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1, $i2, $i3;
        android.database.CursorWindow $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.IllegalStateException $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.database.CursorWindow;

        if $i0 < 0 goto label19;

        $i1 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        if $i0 <= $i1 goto label01;

        return;

     label01:
        virtualinvoke $r1.<android.database.sqlite.SQLiteClosable: void acquireReference()>();

     label02:
        $i1 = $r0.<android.database.AbstractCursor: int mPos>;

        $i2 = $i0 - 1;

        $r0.<android.database.AbstractCursor: int mPos> = $i2;

     label03:
        virtualinvoke $r1.<android.database.CursorWindow: void clear()>();

        virtualinvoke $r1.<android.database.CursorWindow: void setStartPosition(int)>($i0);

        $i0 = virtualinvoke $r0.<android.database.AbstractCursor: int getColumnCount()>();

        virtualinvoke $r1.<android.database.CursorWindow: boolean setNumColumns(int)>($i0);

     label04:
        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean moveToNext()>();

        if $z0 == 0 goto label17;

        $z0 = virtualinvoke $r1.<android.database.CursorWindow: boolean allocRow()>();

     label05:
        if $z0 == 0 goto label17;

     label06:
        $i2 = 0;

     label07:
        if $i2 >= $i0 goto label04;

        $r2 = virtualinvoke $r0.<android.database.AbstractCursor: java.lang.String getString(int)>($i2);

     label08:
        if $r2 == null goto label12;

     label09:
        $i3 = $r0.<android.database.AbstractCursor: int mPos>;

        $z0 = virtualinvoke $r1.<android.database.CursorWindow: boolean putString(java.lang.String,int,int)>($r2, $i3, $i2);

        if $z0 != 0 goto label16;

        virtualinvoke $r1.<android.database.CursorWindow: void freeLastRow()>();

     label10:
        goto label04;

     label11:
        $r3 := @caughtexception;

        virtualinvoke $r1.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        return;

     label12:
        $i3 = $r0.<android.database.AbstractCursor: int mPos>;

     label13:
        $z0 = virtualinvoke $r1.<android.database.CursorWindow: boolean putNull(int,int)>($i3, $i2);

        if $z0 != 0 goto label16;

        virtualinvoke $r1.<android.database.CursorWindow: void freeLastRow()>();

     label14:
        goto label04;

     label15:
        $r4 := @caughtexception;

        virtualinvoke $r1.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        throw $r4;

     label16:
        $i2 = $i2 + 1;

        goto label07;

     label17:
        $r0.<android.database.AbstractCursor: int mPos> = $i1;

     label18:
        virtualinvoke $r1.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        return;

     label19:
        return;

        catch java.lang.IllegalStateException from label03 to label05 with label11;
        catch java.lang.IllegalStateException from label07 to label08 with label11;
        catch java.lang.IllegalStateException from label09 to label10 with label11;
        catch java.lang.Throwable from label02 to label06 with label15;
        catch java.lang.Throwable from label07 to label10 with label15;
        catch java.lang.IllegalStateException from label13 to label14 with label11;
        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label17 to label18 with label15;
    }

    protected void finalize()
    {
        android.database.AbstractCursor $r0;
        android.database.ContentObserver $r1;
        boolean $z0;
        android.content.ContentResolver $r2;

        $r0 := @this: android.database.AbstractCursor;

        $r1 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r1 == null goto label1;

        $z0 = $r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered>;

        if $z0 != 1 goto label2;

        $r2 = $r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r1 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r2.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r1);

        return;

     label1:
        return;

     label2:
        return;
    }

    public byte[] getBlob(int)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("getBlob is not supported");

        throw $r1;
    }

    public int getColumnCount()
    {
        android.database.AbstractCursor $r0;
        java.lang.String[] $r1;
        int $i0;

        $r0 := @this: android.database.AbstractCursor;

        $r1 = virtualinvoke $r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $i0 = lengthof $r1;

        return $i0;
    }

    public int getColumnIndex(java.lang.String)
    {
        android.database.AbstractCursor $r0;
        java.lang.Exception $r1;
        int $i0, $i1;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;
        java.lang.String[] $r5;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 == -1 goto label1;

        $r1 = new java.lang.Exception;

        specialinvoke $r1.<java.lang.Exception: void <init>()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requesting column name with table name -- ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Cursor", $r4, $r1);

        $i0 = $i0 + 1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        $r5 = virtualinvoke $r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $i0 = lengthof $r5;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r4 = $r5[$i1];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        return $i1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        return -1;
    }

    public int getColumnIndexOrThrow(java.lang.String)
    {
        android.database.AbstractCursor $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;
        java.lang.StringBuilder $r3;

        $r0 := @this: android.database.AbstractCursor;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<android.database.AbstractCursor: int getColumnIndex(java.lang.String)>($r1);

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not exist");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return $i0;
    }

    public java.lang.String getColumnName(int)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $r2 = $r1[$i0];

        return $r2;
    }

    public abstract java.lang.String[] getColumnNames();

    public abstract int getCount();

    protected android.database.DataSetObservable getDataSetObservable()
    {
        android.database.AbstractCursor $r0;
        android.database.DataSetObservable r1;

        $r0 := @this: android.database.AbstractCursor;

        r1 = $r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        return r1;
    }

    public abstract double getDouble(int);

    public android.os.Bundle getExtras()
    {
        android.database.AbstractCursor $r0;
        android.os.Bundle r1;

        $r0 := @this: android.database.AbstractCursor;

        r1 = <android.os.Bundle: android.os.Bundle EMPTY>;

        return r1;
    }

    public abstract float getFloat(int);

    public abstract int getInt(int);

    public abstract long getLong(int);

    public final int getPosition()
    {
        android.database.AbstractCursor $r0;
        int i0;

        $r0 := @this: android.database.AbstractCursor;

        i0 = $r0.<android.database.AbstractCursor: int mPos>;

        return i0;
    }

    public abstract short getShort(int);

    public abstract java.lang.String getString(int);

    protected java.lang.Object getUpdatedField(int)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        java.lang.Long $r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.util.Map $r4;
        java.lang.String[] $r5;
        java.lang.String $r6;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r2 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        $r1 = $r0.<android.database.AbstractCursor: java.lang.Long mCurrentRowID>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (java.util.Map) $r3;

        $r5 = virtualinvoke $r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $r6 = $r5[$i0];

        $r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        return $r3;
    }

    public boolean getWantsAllOnMoveCalls()
    {
        android.database.AbstractCursor $r0;

        $r0 := @this: android.database.AbstractCursor;

        return 0;
    }

    public android.database.CursorWindow getWindow()
    {
        android.database.AbstractCursor $r0;

        $r0 := @this: android.database.AbstractCursor;

        return null;
    }

    public boolean hasUpdates()
    {
        android.database.AbstractCursor $r0;
        java.util.HashMap $r1, $r2;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.AbstractCursor;

        $r1 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label4;

        $z0 = 1;

     label2:
        exitmonitor $r1;

     label3:
        return $z0;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public final boolean isAfterLast()
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;

        $r0 := @this: android.database.AbstractCursor;

        $i0 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        $i1 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        if $i0 != $i1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public final boolean isBeforeFirst()
    {
        android.database.AbstractCursor $r0;
        int $i0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        if $i0 != -1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isClosed()
    {
        android.database.AbstractCursor $r0;
        boolean z0;

        $r0 := @this: android.database.AbstractCursor;

        z0 = $r0.<android.database.AbstractCursor: boolean mClosed>;

        return z0;
    }

    protected boolean isFieldUpdated(int)
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;
        java.util.HashMap $r1;
        java.lang.Long $r2;
        java.lang.Object $r3;
        java.util.Map $r4;
        java.lang.String[] $r5;
        java.lang.String $r6;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        if $i1 == -1 goto label1;

        $r1 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        $i1 = virtualinvoke $r1.<java.util.HashMap: int size()>();

        if $i1 <= 0 goto label1;

        $r1 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        $r2 = $r0.<android.database.AbstractCursor: java.lang.Long mCurrentRowID>;

        $r3 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.util.Map) $r3;

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $r6 = $r5[$i0];

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r6);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isFirst()
    {
        android.database.AbstractCursor $r0;
        int $i0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        if $i0 != 0 goto label1;

        $i0 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isLast()
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1, $i2;

        $r0 := @this: android.database.AbstractCursor;

        $i1 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        $i2 = $r0.<android.database.AbstractCursor: int mPos>;

        $i0 = $i1 - 1;

        if $i2 != $i0 goto label1;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public abstract boolean isNull(int);

    public final boolean move(int)
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.database.AbstractCursor: int mPos>;

        $i0 = $i1 + $i0;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

        return $z0;
    }

    public final boolean moveToFirst()
    {
        android.database.AbstractCursor $r0;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean moveToPosition(int)>(0);

        return $z0;
    }

    public final boolean moveToLast()
    {
        android.database.AbstractCursor $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        $i0 = $i0 - 1;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

        return $z0;
    }

    public final boolean moveToNext()
    {
        android.database.AbstractCursor $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        $i0 = $i0 + 1;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

        return $z0;
    }

    public final boolean moveToPosition(int)
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;
        boolean $z0;
        long $l2;
        java.lang.Long $r1;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke $r0.<android.database.AbstractCursor: int getCount()>();

        if $i0 < $i1 goto label1;

        $r0.<android.database.AbstractCursor: int mPos> = $i1;

        return 0;

     label1:
        if $i0 >= 0 goto label2;

        $r0.<android.database.AbstractCursor: int mPos> = -1;

        return 0;

     label2:
        $i1 = $r0.<android.database.AbstractCursor: int mPos>;

        if $i0 != $i1 goto label3;

        return 1;

     label3:
        $i1 = $r0.<android.database.AbstractCursor: int mPos>;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean onMove(int,int)>($i1, $i0);

        if $z0 != 0 goto label5;

        $r0.<android.database.AbstractCursor: int mPos> = -1;

     label4:
        return $z0;

     label5:
        $r0.<android.database.AbstractCursor: int mPos> = $i0;

        $i0 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        if $i0 == -1 goto label4;

        $i0 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        $l2 = virtualinvoke $r0.<android.database.AbstractCursor: long getLong(int)>($i0);

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r0.<android.database.AbstractCursor: java.lang.Long mCurrentRowID> = $r1;

        goto label4;
    }

    public final boolean moveToPrevious()
    {
        android.database.AbstractCursor $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        $i0 = $i0 - 1;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

        return $z0;
    }

    protected void notifyDataSetChange()
    {
        android.database.AbstractCursor $r0;
        android.database.DataSetObservable $r1;

        $r0 := @this: android.database.AbstractCursor;

        $r1 = $r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r1.<android.database.DataSetObservable: void notifyChanged()>();

        return;
    }

    protected void onChange(boolean)
    {
        android.database.AbstractCursor $r0;
        boolean $z0;
        java.lang.Object $r1;
        android.net.Uri $r2;
        android.database.ContentObserver $r3;
        android.database.ContentObservable $r4;
        android.content.ContentResolver $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.database.AbstractCursor;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.database.AbstractCursor: java.lang.Object mSelfObserverLock>;

        entermonitor $r1;

     label1:
        $r4 = $r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r4.<android.database.ContentObservable: void dispatchChange(boolean)>($z0);

        $r2 = $r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        if $r2 == null goto label2;

        if $z0 == 0 goto label2;

        $r5 = $r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r2 = $r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r3 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r5.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r2, $r3);

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean onMove(int, int)
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        return 1;
    }

    public void registerContentObserver(android.database.ContentObserver)
    {
        android.database.AbstractCursor $r0;
        android.database.ContentObserver $r1;
        android.database.ContentObservable $r2;

        $r0 := @this: android.database.AbstractCursor;

        $r1 := @parameter0: android.database.ContentObserver;

        $r2 = $r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r2.<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>($r1);

        return;
    }

    public void registerDataSetObserver(android.database.DataSetObserver)
    {
        android.database.AbstractCursor $r0;
        android.database.DataSetObserver $r1;
        android.database.DataSetObservable $r2;

        $r0 := @this: android.database.AbstractCursor;

        $r1 := @parameter0: android.database.DataSetObserver;

        $r2 = $r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r2.<android.database.Observable: void registerObserver(java.lang.Object)>($r1);

        return;
    }

    public boolean requery()
    {
        android.database.AbstractCursor $r0;
        android.net.Uri $r1;
        android.database.ContentObserver $r2;
        boolean $z0;
        android.content.ContentResolver $r3;
        android.database.DataSetObservable $r4;

        $r0 := @this: android.database.AbstractCursor;

        $r2 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r2 == null goto label1;

        $z0 = $r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered>;

        if $z0 != 0 goto label1;

        $r3 = $r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r1 = $r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r2 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r3.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r1, 1, $r2);

        $r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered> = 1;

     label1:
        $r4 = $r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r4.<android.database.DataSetObservable: void notifyChanged()>();

        return 1;
    }

    public android.os.Bundle respond(android.os.Bundle)
    {
        android.database.AbstractCursor $r0;
        android.os.Bundle $r1;

        $r0 := @this: android.database.AbstractCursor;

        $r1 := @parameter0: android.os.Bundle;

        $r1 = <android.os.Bundle: android.os.Bundle EMPTY>;

        return $r1;
    }

    public void setNotificationUri(android.content.ContentResolver, android.net.Uri)
    {
        android.database.AbstractCursor $r0;
        android.content.ContentResolver $r1;
        android.net.Uri $r2;
        java.lang.Object $r3;
        android.database.ContentObserver $r4;
        android.database.AbstractCursor$SelfContentObserver $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.database.AbstractCursor;

        $r1 := @parameter0: android.content.ContentResolver;

        $r2 := @parameter1: android.net.Uri;

        $r3 = $r0.<android.database.AbstractCursor: java.lang.Object mSelfObserverLock>;

        entermonitor $r3;

     label1:
        $r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri> = $r2;

        $r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver> = $r1;

        $r4 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        if $r4 == null goto label2;

        $r1 = $r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r4 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r1.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r4);

     label2:
        $r5 = new android.database.AbstractCursor$SelfContentObserver;

        specialinvoke $r5.<android.database.AbstractCursor$SelfContentObserver: void <init>(android.database.AbstractCursor)>($r0);

        $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver> = $r5;

        $r1 = $r0.<android.database.AbstractCursor: android.content.ContentResolver mContentResolver>;

        $r2 = $r0.<android.database.AbstractCursor: android.net.Uri mNotifyUri>;

        $r4 = $r0.<android.database.AbstractCursor: android.database.ContentObserver mSelfObserver>;

        virtualinvoke $r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r2, 1, $r4);

        $r0.<android.database.AbstractCursor: boolean mSelfObserverRegistered> = 1;

        exitmonitor $r3;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean supportsUpdates()
    {
        android.database.AbstractCursor $r0;
        int $i0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void unregisterContentObserver(android.database.ContentObserver)
    {
        android.database.AbstractCursor $r0;
        android.database.ContentObserver $r1;
        boolean $z0;
        android.database.ContentObservable $r2;

        $r0 := @this: android.database.AbstractCursor;

        $r1 := @parameter0: android.database.ContentObserver;

        $z0 = $r0.<android.database.AbstractCursor: boolean mClosed>;

        if $z0 != 0 goto label1;

        $r2 = $r0.<android.database.AbstractCursor: android.database.ContentObservable mContentObservable>;

        virtualinvoke $r2.<android.database.Observable: void unregisterObserver(java.lang.Object)>($r1);

        return;

     label1:
        return;
    }

    public void unregisterDataSetObserver(android.database.DataSetObserver)
    {
        android.database.AbstractCursor $r0;
        android.database.DataSetObserver $r1;
        android.database.DataSetObservable $r2;

        $r0 := @this: android.database.AbstractCursor;

        $r1 := @parameter0: android.database.DataSetObserver;

        $r2 = $r0.<android.database.AbstractCursor: android.database.DataSetObservable mDataSetObservable>;

        virtualinvoke $r2.<android.database.Observable: void unregisterObserver(java.lang.Object)>($r1);

        return;
    }

    public boolean update(int, java.lang.Object)
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;
        java.lang.Object $r1, $r8;
        java.lang.Long $r2, r12;
        boolean $z0;
        long $l2;
        java.lang.StringBuilder $r4, r13;
        java.lang.String $r5;
        java.util.HashMap $r6, $r7;
        java.util.Map $r9;
        java.lang.String[] $r10;
        java.lang.Throwable $r11;
        java.lang.IllegalStateException r14;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean supportsUpdates()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r12 = new java.lang.Long;

        $r2 = r12;

        $i1 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        $l2 = virtualinvoke $r0.<android.database.AbstractCursor: long getLong(int)>($i1);

        specialinvoke r12.<java.lang.Long: void <init>(long)>($l2);

        if $r2 != null goto label2;

        r14 = new java.lang.IllegalStateException;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null rowid. mRowIdColumnIndex = ");

        $i0 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw r14;

     label2:
        $r6 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        entermonitor $r6;

     label3:
        $r7 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r9 = (java.util.Map) $r8;

        if $r9 != null goto label4;

        $r7 = new java.util.HashMap;

        $r9 = $r7;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r7 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r9);

     label4:
        $r10 = virtualinvoke $r0.<android.database.AbstractCursor: java.lang.String[] getColumnNames()>();

        $r5 = $r10[$i0];

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r1);

        exitmonitor $r6;

     label5:
        return 1;

     label6:
        $r11 := @caughtexception;

        exitmonitor $r6;

     label7:
        throw $r11;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean updateBlob(int, byte[])
    {
        android.database.AbstractCursor $r0;
        int $i0;
        byte[] $r1;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean update(int,java.lang.Object)>($i0, $r1);

        return $z0;
    }

    public boolean updateDouble(int, double)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        double $d0;
        java.lang.Double $r1;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean update(int,java.lang.Object)>($i0, $r1);

        return $z0;
    }

    public boolean updateFloat(int, float)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        float $f0;
        java.lang.Float $r1;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean update(int,java.lang.Object)>($i0, $r1);

        return $z0;
    }

    public boolean updateInt(int, int)
    {
        android.database.AbstractCursor $r0;
        int $i0, $i1;
        java.lang.Integer $r1;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean update(int,java.lang.Object)>($i0, $r1);

        return $z0;
    }

    public boolean updateLong(int, long)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        long $l1;
        java.lang.Long $r1;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean update(int,java.lang.Object)>($i0, $r1);

        return $z0;
    }

    public boolean updateShort(int, short)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        short $s1;
        java.lang.Short $r1;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $s1 := @parameter1: short;

        $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean update(int,java.lang.Object)>($i0, $r1);

        return $z0;
    }

    public boolean updateString(int, java.lang.String)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean update(int,java.lang.Object)>($i0, $r1);

        return $z0;
    }

    public boolean updateToNull(int)
    {
        android.database.AbstractCursor $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: android.database.AbstractCursor;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean update(int,java.lang.Object)>($i0, null);

        return $z0;
    }

    public static void <clinit>()
    {
        <android.database.AbstractCursor: java.lang.String TAG> = "Cursor";

        return;
    }
}
