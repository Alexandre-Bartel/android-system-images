public class com.android.internal.policy.impl.PhoneWindow extends android.view.Window implements com.android.internal.view.menu.MenuBuilder$Callback
{
    private static final java.lang.String FOCUSED_ID_TAG;
    static final int MSG_CALL_LONG_PRESS;
    static final int MSG_CALL_LONG_PRESS_COMPLETE;
    static final int MSG_CAMERA_LONG_PRESS;
    static final int MSG_CAMERA_LONG_PRESS_COMPLETE;
    static final int MSG_MENU_LONG_PRESS;
    static final int MSG_MENU_LONG_PRESS_COMPLETE;
    static final int MSG_SEARCH_LONG_PRESS;
    static final int MSG_SEARCH_LONG_PRESS_COMPLETE;
    private static final java.lang.String PANELS_TAG;
    private static final boolean SWEEP_OPEN_MENU;
    private static final java.lang.String TAG;
    private static final java.lang.String VIEWS_TAG;
    private android.graphics.drawable.Drawable mBackgroundDrawable;
    private int mBackgroundResource;
    private android.widget.ProgressBar mCircularProgressBar;
    private android.view.ViewGroup mContentParent;
    private com.android.internal.view.menu.ContextMenuBuilder mContextMenu;
    com.android.internal.policy.impl.PhoneWindow$ContextMenuCallback mContextMenuCallback;
    private com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper;
    private com.android.internal.policy.impl.PhoneWindow$DecorView mDecor;
    private com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables;
    private int mFrameResource;
    private android.widget.ProgressBar mHorizontalProgressBar;
    private boolean mIsFloating;
    private boolean mKeycodeCallTimeoutActive;
    private boolean mKeycodeCameraTimeoutActive;
    private final android.os.Handler mKeycodeMenuTimeoutHandler;
    private android.app.KeyguardManager mKeyguardManager;
    private android.view.LayoutInflater mLayoutInflater;
    private android.widget.ImageView mLeftIconView;
    private int mPanelChordingKey;
    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels;
    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel;
    private android.widget.ImageView mRightIconView;
    private boolean mSearchKeyDownReceived;
    private android.telephony.TelephonyManager mTelephonyManager;
    private int mTextColor;
    private java.lang.CharSequence mTitle;
    private int mTitleColor;
    private android.widget.TextView mTitleView;
    private int mVolumeControlStreamType;
    private long mVolumeKeyUpTime;

    public void <init>(android.content.Context)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.content.Context $r1;
        android.view.LayoutInflater $r2;
        com.android.internal.policy.impl.PhoneWindow$ContextMenuCallback $r3;
        com.android.internal.policy.impl.PhoneWindow$1 $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<android.view.Window: void <init>(android.content.Context)>($r1);

        $r3 = new com.android.internal.policy.impl.PhoneWindow$ContextMenuCallback;

        specialinvoke $r3.<com.android.internal.policy.impl.PhoneWindow$ContextMenuCallback: void <init>(com.android.internal.policy.impl.PhoneWindow,int)>($r0, 6);

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$ContextMenuCallback mContextMenuCallback> = $r3;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType> = -2147483648;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.telephony.TelephonyManager mTelephonyManager> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCallTimeoutActive> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCameraTimeoutActive> = 0;

        $r4 = new com.android.internal.policy.impl.PhoneWindow$1;

        specialinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$1: void <init>(com.android.internal.policy.impl.PhoneWindow)>($r0);

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler> = $r4;

        $r2 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>($r1);

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater> = $r2;

        return;
    }

    static int access$000(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int i0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey>;

        return i0;
    }

    static int access$002(com.android.internal.policy.impl.PhoneWindow, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter1: int;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = $i0;

        return $i0;
    }

    static android.os.Handler access$100(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.os.Handler r1;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        return r1;
    }

    static com.android.internal.policy.impl.PhoneWindow$PanelFeatureState access$1000(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState r1;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        return r1;
    }

    static boolean access$1100(com.android.internal.policy.impl.PhoneWindow, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        int $i0, $i1;
        android.view.KeyEvent $r2;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter1: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $i0 := @parameter2: int;

        $r2 := @parameter3: android.view.KeyEvent;

        $i1 := @parameter4: int;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>($r1, $i0, $r2, $i1);

        return $z0;
    }

    static com.android.internal.view.menu.ContextMenuBuilder access$1200(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.ContextMenuBuilder r1;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        return r1;
    }

    static com.android.internal.view.menu.ContextMenuBuilder access$1202(com.android.internal.policy.impl.PhoneWindow, com.android.internal.view.menu.ContextMenuBuilder)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.ContextMenuBuilder $r1;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter1: com.android.internal.view.menu.ContextMenuBuilder;

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu> = $r1;

        return $r1;
    }

    static com.android.internal.view.menu.MenuDialogHelper access$1300(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.MenuDialogHelper r1;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        return r1;
    }

    static com.android.internal.view.menu.MenuDialogHelper access$1302(com.android.internal.policy.impl.PhoneWindow, com.android.internal.view.menu.MenuDialogHelper)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.MenuDialogHelper $r1;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter1: com.android.internal.view.menu.MenuDialogHelper;

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper> = $r1;

        return $r1;
    }

    static void access$1400(com.android.internal.policy.impl.PhoneWindow, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter1: int;

        virtualinvoke $r0.<android.view.Window: void setDefaultWindowFormat(int)>($i0);

        return;
    }

    static void access$1500(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void openPanelsAfterRestore()>();

        return;
    }

    static void access$1800(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void dismissContextMenu()>();

        return;
    }

    static boolean access$200(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean z0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCallTimeoutActive>;

        return z0;
    }

    static boolean access$202(com.android.internal.policy.impl.PhoneWindow, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $z0 := @parameter1: boolean;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCallTimeoutActive> = $z0;

        return $z0;
    }

    static boolean access$300(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean z0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCameraTimeoutActive>;

        return z0;
    }

    static boolean access$302(com.android.internal.policy.impl.PhoneWindow, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $z0 := @parameter1: boolean;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCameraTimeoutActive> = $z0;

        return $z0;
    }

    static boolean access$400(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean z0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mSearchKeyDownReceived>;

        return z0;
    }

    static boolean access$402(com.android.internal.policy.impl.PhoneWindow, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $z0 := @parameter1: boolean;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mSearchKeyDownReceived> = $z0;

        return $z0;
    }

    static com.android.internal.policy.impl.PhoneWindow$DecorView access$500(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView r1;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        return r1;
    }

    static void access$600(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void startCallActivity()>();

        return;
    }

    static android.app.KeyguardManager access$700(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.app.KeyguardManager $r1;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        return $r1;
    }

    static long access$800(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        long l0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        l0 = $r0.<com.android.internal.policy.impl.PhoneWindow: long mVolumeKeyUpTime>;

        return l0;
    }

    static int access$900(com.android.internal.policy.impl.PhoneWindow)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int i0;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow;

        i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        return i0;
    }

    private void callOnPanelClosed(int, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.view.Window$Callback $r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        android.view.Menu $r3;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] $r4;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r2 := @parameter1: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r3 := @parameter2: android.view.Menu;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.Window$Callback getCallback()>();

        if $r1 != null goto label1;

        return;

     label1:
        if $r3 != null goto label3;

        if $r2 != null goto label2;

        if $i0 < 0 goto label2;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label2;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        $r2 = $r4[$i0];

     label2:
        if $r2 == null goto label3;

        $r3 = $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

     label3:
        if $r2 == null goto label4;

        $z0 = $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label5;

     label4:
        interfaceinvoke $r1.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>($i0, $r3);

        return;

     label5:
        return;
    }

    private static void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r0;
        android.view.Menu $r1;
        com.android.internal.view.menu.MenuBuilder $r2;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $r2 = (com.android.internal.view.menu.MenuBuilder) $r1;

        virtualinvoke $r2.<com.android.internal.view.menu.MenuBuilder: void clearMenuViews()>();

        return;
    }

    private void closeContextMenu()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.ContextMenuBuilder $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if $r1 == null goto label2;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        virtualinvoke $r1.<com.android.internal.view.menu.MenuBuilder: void close()>();

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void dismissContextMenu()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void dismissContextMenu()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.MenuDialogHelper $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        entermonitor $r0;

     label1:
        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu> = null;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        if $r1 == null goto label2;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper>;

        virtualinvoke $r1.<com.android.internal.view.menu.MenuDialogHelper: void dismiss()>();

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.MenuDialogHelper mContextMenuHelper> = null;

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private android.widget.ProgressBar getCircularProgressBar(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean $z0;
        android.view.View $r1;
        android.widget.ProgressBar $r2;
        android.view.ViewGroup $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $z0 := @parameter0: boolean;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        return $r2;

     label1:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label2;

        if $z0 == 0 goto label2;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r1 = virtualinvoke $r0.<android.view.Window: android.view.View findViewById(int)>(16908738);

        $r2 = (android.widget.ProgressBar) $r1;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar> = $r2;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        virtualinvoke $r2.<android.widget.ProgressBar: void setVisibility(int)>(4);

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        return $r2;
    }

    private com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] $r1, $r3;
        java.lang.RuntimeException $r2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $i1 = virtualinvoke $r0.<android.view.Window: int getFeatures()>();

        $i2 = 1 << $i0;

        $i1 = $i1 & $i2;

        if $i1 != 0 goto label2;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("The feature has not been requested");

        throw $r2;

     label2:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables>;

        if $r3 == null goto label3;

        $i1 = lengthof $r3;

        if $i1 > $i0 goto label5;

     label3:
        $i1 = $i0 + 1;

        $r1 = newarray (com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState)[$i1];

        if $r3 == null goto label4;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i1);

     label4:
        $r3 = $r1;

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState[] mDrawables> = $r1;

     label5:
        $r4 = $r3[$i0];

        if $r4 != null goto label6;

        $r4 = new com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState;

        specialinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: void <init>(int)>($i0);

        $r3[$i0] = $r4;

     label6:
        return $r4;
    }

    private android.widget.ProgressBar getHorizontalProgressBar(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean $z0;
        android.view.View $r1;
        android.widget.ProgressBar $r2;
        android.view.ViewGroup $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $z0 := @parameter0: boolean;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        return $r2;

     label1:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label2;

        if $z0 == 0 goto label2;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r1 = virtualinvoke $r0.<android.view.Window: android.view.View findViewById(int)>(16908739);

        $r2 = (android.widget.ProgressBar) $r1;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar> = $r2;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        virtualinvoke $r2.<android.widget.ProgressBar: void setVisibility(int)>(4);

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        return $r2;
    }

    private android.app.KeyguardManager getKeyguardManager()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.app.KeyguardManager $r1;
        android.content.Context $r2;
        java.lang.Object $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("keyguard");

        $r1 = (android.app.KeyguardManager) $r3;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager> = $r1;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager mKeyguardManager>;

        return $r1;
    }

    private android.widget.ImageView getLeftIconView()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.View $r1;
        android.widget.ImageView $r2;
        android.view.ViewGroup $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView>;

        return $r2;

     label1:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label2;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r1 = virtualinvoke $r0.<android.view.Window: android.view.View findViewById(int)>(16908614);

        $r2 = (android.widget.ImageView) $r1;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mLeftIconView> = $r2;

        return $r2;
    }

    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>($i0, $z0, null);

        return $r1;
    }

    private com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int, boolean, com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1, $r5;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] $r2, $r4;
        java.lang.RuntimeException $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $i1 = virtualinvoke $r0.<android.view.Window: int getFeatures()>();

        $i2 = 1 << $i0;

        $i1 = $i1 & $i2;

        if $i1 != 0 goto label2;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("The feature has not been requested");

        throw $r3;

     label2:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if $r4 == null goto label3;

        $i1 = lengthof $r4;

        if $i1 > $i0 goto label5;

     label3:
        $i1 = $i0 + 1;

        $r2 = newarray (com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)[$i1];

        if $r4 == null goto label4;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, 0, $i1);

     label4:
        $r4 = $r2;

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels> = $r2;

     label5:
        $r5 = $r4[$i0];

        if $r5 != null goto label7;

        if $r1 == null goto label8;

        $r5 = $r1;

     label6:
        $r4[$i0] = $r5;

     label7:
        return $r5;

     label8:
        $r1 = new com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        specialinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void <init>(int)>($i0);

        $r5 = $r1;

        goto label6;
    }

    private android.widget.ImageView getRightIconView()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.View $r1;
        android.widget.ImageView $r2;
        android.view.ViewGroup $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView>;

        return $r2;

     label1:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label2;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label2:
        $r1 = virtualinvoke $r0.<android.view.Window: android.view.View findViewById(int)>(16908616);

        $r2 = (android.widget.ImageView) $r1;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView mRightIconView> = $r2;

        return $r2;
    }

    private void hideProgressBars(android.widget.ProgressBar, android.widget.ProgressBar)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.widget.ProgressBar $r1, $r2;
        int $i0, $i1;
        android.content.Context $r3;
        android.view.animation.Animation $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.widget.ProgressBar;

        $r2 := @parameter1: android.widget.ProgressBar;

        $i0 = virtualinvoke $r0.<android.view.Window: int getLocalFeatures()>();

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r3, 17432577);

        virtualinvoke $r4.<android.view.animation.Animation: void setDuration(long)>(1000L);

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        $i1 = virtualinvoke $r2.<android.view.View: int getVisibility()>();

        if $i1 != 0 goto label1;

        virtualinvoke $r2.<android.view.View: void startAnimation(android.view.animation.Animation)>($r4);

        virtualinvoke $r2.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $i0 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label3;

        virtualinvoke $r1.<android.view.View: void startAnimation(android.view.animation.Animation)>($r4);

        virtualinvoke $r1.<android.widget.ProgressBar: void setVisibility(int)>(4);

        return;

     label2:
        return;

     label3:
        return;
    }

    private void installDecor()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;
        android.view.ViewGroup $r2;
        android.view.View $r3;
        android.widget.TextView $r4;
        int $i0;
        boolean $z0;
        android.widget.FrameLayout $r5;
        java.lang.CharSequence $r6;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 != null goto label1;

        $r1 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView generateDecor()>();

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor> = $r1;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r1.<android.view.View: void setIsRootNamespace(boolean)>(1);

     label1:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label5;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r2 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup generateLayout(com.android.internal.policy.impl.PhoneWindow$DecorView)>($r1);

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent> = $r2;

        $r3 = virtualinvoke $r0.<android.view.Window: android.view.View findViewById(int)>(16908310);

        $r4 = (android.widget.TextView) $r3;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView> = $r4;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r4 == null goto label6;

        $i0 = virtualinvoke $r0.<android.view.Window: int getLocalFeatures()>();

        $i0 = $i0 & 2;

        if $i0 == 0 goto label4;

        $r3 = virtualinvoke $r0.<android.view.Window: android.view.View findViewById(int)>(16908617);

        if $r3 == null goto label3;

        virtualinvoke $r3.<android.view.View: void setVisibility(int)>(8);

     label2:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $z0 = $r2 instanceof android.widget.FrameLayout;

        if $z0 == 0 goto label7;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r5 = (android.widget.FrameLayout) $r2;

        virtualinvoke $r5.<android.widget.FrameLayout: void setForeground(android.graphics.drawable.Drawable)>(null);

        return;

     label3:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(8);

        goto label2;

     label4:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        virtualinvoke $r4.<android.widget.TextView: void setText(java.lang.CharSequence)>($r6);

        return;

     label5:
        return;

     label6:
        return;

     label7:
        return;
    }

    private boolean launchDefaultSearch()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.Window$Callback $r1;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.Window$Callback getCallback()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = interfaceinvoke $r1.<android.view.Window$Callback: boolean onSearchRequested()>();

        return $z0;
    }

    private android.graphics.drawable.Drawable loadImageURI(android.net.Uri)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.net.Uri $r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        java.io.InputStream $r4;
        android.graphics.drawable.Drawable $r5;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.net.Uri;

     label1:
        $r2 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke $r3.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>($r1);

        $r5 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>($r4, null);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open content: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", $r8);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        android.view.KeyEvent $r2;
        int $i0, $i1, $i2;
        boolean $z0;
        android.view.Window$Callback $r3;
        android.view.Menu $r4;
        android.view.WindowManager $r5;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r6;
        android.view.View $r7;
        android.view.ViewGroup$LayoutParams $r8, $r9;
        android.content.Context $r10;
        android.content.res.Resources $r11;
        android.graphics.drawable.Drawable $r12;
        android.view.WindowManager$LayoutParams $r13;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r2 := @parameter1: android.view.KeyEvent;

        $z0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label01;

        return;

     label01:
        $r3 = virtualinvoke $r0.<android.view.Window: android.view.Window$Callback getCallback()>();

        if $r3 == null goto label02;

        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r4 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $z0 = interfaceinvoke $r3.<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>($i0, $r4);

        if $z0 != 0 goto label02;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r1, 1);

        return;

     label02:
        $r5 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager getWindowManager()>();

        if $r5 == null goto label10;

        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r1, $r2);

        if $z0 == 0 goto label11;

        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r6 == null goto label03;

        $z0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView>;

        if $z0 == 0 goto label07;

     label03:
        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r6 != null goto label08;

        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelDecor(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>($r1);

        if $z0 == 0 goto label12;

        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r6 == null goto label13;

     label04:
        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelContent(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>($r1);

        if $z0 == 0 goto label14;

        $r7 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        if $r7 == null goto label15;

        $r7 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        $r8 = virtualinvoke $r7.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r9 = $r8;

        if $r8 != null goto label05;

        $r9 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r9.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-2, -2);

     label05:
        $i0 = $r9.<android.view.ViewGroup$LayoutParams: int width>;

        if $i0 != -1 goto label09;

        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int fullBackground>;

     label06:
        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r10 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources getResources()>();

        $r12 = virtualinvoke $r11.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i0);

        virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>($r12);

        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r7 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r6.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r7, $r9);

        $r7 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        $z0 = virtualinvoke $r7.<android.view.View: boolean hasFocus()>();

        if $z0 != 0 goto label07;

        $r7 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r7.<android.view.View: boolean requestFocus()>();

     label07:
        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen> = 1;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        $r13 = new android.view.WindowManager$LayoutParams;

        $i1 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int x>;

        $i2 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int y>;

        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $i0 = $r6.<com.android.internal.policy.impl.PhoneWindow$DecorView: int mDefaultOpacity>;

        specialinvoke $r13.<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>(-2, -2, $i1, $i2, 1000, 135168, $i0);

        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int gravity>;

        $r13.<android.view.WindowManager$LayoutParams: int gravity> = $i0;

        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int windowAnimations>;

        $r13.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i0;

        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        interfaceinvoke $r5.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r6, $r13);

        return;

     label08:
        $z0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView>;

        if $z0 == 0 goto label04;

        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $i0 = virtualinvoke $r6.<android.view.ViewGroup: int getChildCount()>();

        if $i0 <= 0 goto label04;

        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        virtualinvoke $r6.<android.view.ViewGroup: void removeAllViews()>();

        goto label04;

     label09:
        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int background>;

        goto label06;

     label10:
        return;

     label11:
        return;

     label12:
        return;

     label13:
        return;

     label14:
        return;

     label15:
        return;
    }

    private void openPanelsAfterRestore()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] $r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if $r1 != null goto label1;

        return;

     label1:
        $i0 = lengthof $r1;

        $i0 = $i0 - 1;

     label2:
        if $i0 < 0 goto label4;

        $r2 = $r1[$i0];

        if $r2 == null goto label3;

        $z0 = $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label3;

        $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen> = 0;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r2, null);

     label3:
        $i0 = $i0 + -1;

        goto label2;

     label4:
        return;
    }

    private boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        int $i0, $i1;
        android.view.KeyEvent $r2;
        boolean $z0, $z1;
        android.view.Menu $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.view.KeyEvent;

        $i1 := @parameter3: int;

        $z0 = virtualinvoke $r2.<android.view.KeyEvent: boolean isSystem()>();

        if $z0 != 0 goto label1;

        if $r1 != null goto label2;

     label1:
        return 0;

     label2:
        $z0 = 0;

        $z1 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z1 != 0 goto label3;

        $z1 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r1, $r2);

        if $z1 == 0 goto label4;

     label3:
        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        if $r3 == null goto label4;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $z0 = interfaceinvoke $r3.<android.view.Menu: boolean performShortcut(int,android.view.KeyEvent,int)>($i0, $r2, $i1);

     label4:
        if $z0 == 0 goto label5;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 1;

        $i0 = $i1 & 1;

        if $i0 != 0 goto label5;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r1, 1);

     label5:
        return $z0;
    }

    private void reopenMenu(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $z0 := @parameter0: boolean;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        if $z0 == 0 goto label3;

        $z0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r1, 0);

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = $z0;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r1, null);

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        $z0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        goto label1;
    }

    private void restorePanelState(android.util.SparseArray)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.util.SparseArray $r1;
        int $i0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        java.lang.Object $r3;
        android.os.Parcelable $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.util.SparseArray;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        $i0 = $i0 - 1;

     label1:
        if $i0 < 0 goto label4;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 0);

        if $r2 != null goto label3;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        $r4 = (android.os.Parcelable) $r3;

        virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void onRestoreInstanceState(android.os.Parcelable)>($r4);

        goto label2;

     label4:
        return;
    }

    private void savePanelState(android.util.SparseArray)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.util.SparseArray $r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] $r2;
        android.os.Parcelable $r3;
        int $i0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.util.SparseArray;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if $r2 != null goto label1;

        return;

     label1:
        $i0 = lengthof $r2;

        $i0 = $i0 - 1;

     label2:
        if $i0 < 0 goto label4;

        $r4 = $r2[$i0];

        if $r4 == null goto label3;

        $r4 = $r2[$i0];

        $r3 = virtualinvoke $r4.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.os.Parcelable onSaveInstanceState()>();

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i0, $r3);

     label3:
        $i0 = $i0 + -1;

        goto label2;

     label4:
        return;
    }

    private void showProgressBars(android.widget.ProgressBar, android.widget.ProgressBar)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.widget.ProgressBar $r1, $r2;
        int $i0, $i1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.widget.ProgressBar;

        $r2 := @parameter1: android.widget.ProgressBar;

        $i0 = virtualinvoke $r0.<android.view.Window: int getLocalFeatures()>();

        $i1 = $i0 & 32;

        if $i1 == 0 goto label1;

        $i1 = virtualinvoke $r2.<android.view.View: int getVisibility()>();

        if $i1 != 4 goto label1;

        virtualinvoke $r2.<android.widget.ProgressBar: void setVisibility(int)>(0);

     label1:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label2;

        $i0 = virtualinvoke $r1.<android.widget.ProgressBar: int getProgress()>();

        if $i0 >= 10000 goto label3;

        virtualinvoke $r1.<android.widget.ProgressBar: void setVisibility(int)>(0);

        return;

     label2:
        return;

     label3:
        return;
    }

    private void startCallActivity()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.content.Intent $r1;
        android.content.Context $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void sendCloseSystemWindows()>();

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CALL_BUTTON");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

        $r2 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        virtualinvoke $r2.<android.content.Context: void startActivity(android.content.Intent)>($r1);

        return;
    }

    private void updateDrawable(int, com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r1;
        boolean $z0, $z1;
        android.view.ViewGroup $r2;
        android.graphics.drawable.Drawable $r3, $r5;
        android.view.Window $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState;

        $z0 := @parameter2: boolean;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label01;

        return;

     label01:
        $i1 = 1 << $i0;

        $i2 = virtualinvoke $r0.<android.view.Window: int getFeatures()>();

        $i2 = $i2 & $i1;

        if $i2 != 0 goto label02;

        if $z0 == 0 goto label08;

     label02:
        $r3 = null;

        if $r1 == null goto label04;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable child>;

        if $r3 != null goto label03;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local>;

     label03:
        if $r3 != null goto label04;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def>;

     label04:
        $i2 = virtualinvoke $r0.<android.view.Window: int getLocalFeatures()>();

        $i1 = $i2 & $i1;

        if $i1 != 0 goto label06;

        $r4 = virtualinvoke $r0.<android.view.Window: android.view.Window getContainer()>();

        if $r4 == null goto label09;

        $z1 = virtualinvoke $r0.<android.view.Window: boolean isActive()>();

        if $z1 != 0 goto label05;

        if $z0 == 0 goto label10;

     label05:
        $r4 = virtualinvoke $r0.<android.view.Window: android.view.Window getContainer()>();

        virtualinvoke $r4.<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>($i0, $r3);

        return;

     label06:
        if $r1 == null goto label11;

        $r5 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable cur>;

        if $r5 != $r3 goto label07;

        $i2 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int curAlpha>;

        $i1 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        if $i2 == $i1 goto label12;

     label07:
        $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable cur> = $r3;

        $i1 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int curAlpha> = $i1;

        $i1 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void onDrawableChanged(int,android.graphics.drawable.Drawable,int)>($i0, $r3, $i1);

        return;

     label08:
        return;

     label09:
        return;

     label10:
        return;

     label11:
        return;

     label12:
        return;
    }

    private void updateInt(int, int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        android.view.ViewGroup $r1;
        android.view.Window $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label1;

        return;

     label1:
        $i2 = 1 << $i0;

        $i3 = virtualinvoke $r0.<android.view.Window: int getFeatures()>();

        $i3 = $i3 & $i2;

        if $i3 != 0 goto label2;

        if $z0 == 0 goto label4;

     label2:
        $i3 = virtualinvoke $r0.<android.view.Window: int getLocalFeatures()>();

        $i2 = $i3 & $i2;

        if $i2 != 0 goto label3;

        $r2 = virtualinvoke $r0.<android.view.Window: android.view.Window getContainer()>();

        if $r2 == null goto label5;

        $r2 = virtualinvoke $r0.<android.view.Window: android.view.Window getContainer()>();

        virtualinvoke $r2.<android.view.Window: void setChildInt(int,int)>($i0, $i1);

        return;

     label3:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void onIntChanged(int,int)>($i0, $i1);

        return;

     label4:
        return;

     label5:
        return;
    }

    private void updateProgressBars(int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.widget.ProgressBar $r1, $r2;
        boolean $z0;
        byte $b2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getCircularProgressBar(boolean)>(1);

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getHorizontalProgressBar(boolean)>(1);

        $i1 = virtualinvoke $r0.<android.view.Window: int getLocalFeatures()>();

        if $i0 != -1 goto label05;

        $i0 = $i1 & 4;

        if $i0 == 0 goto label03;

        $i0 = virtualinvoke $r2.<android.widget.ProgressBar: int getProgress()>();

        $z0 = virtualinvoke $r2.<android.widget.ProgressBar: boolean isIndeterminate()>();

        if $z0 != 0 goto label01;

        if $i0 >= 10000 goto label04;

     label01:
        $b2 = 0;

     label02:
        virtualinvoke $r2.<android.widget.ProgressBar: void setVisibility(int)>($b2);

     label03:
        $i0 = $i1 & 32;

        if $i0 == 0 goto label12;

        virtualinvoke $r1.<android.widget.ProgressBar: void setVisibility(int)>(0);

        return;

     label04:
        $b2 = 4;

        goto label02;

     label05:
        if $i0 != -2 goto label07;

        $i0 = $i1 & 4;

        if $i0 == 0 goto label06;

        virtualinvoke $r2.<android.widget.ProgressBar: void setVisibility(int)>(8);

     label06:
        $i0 = $i1 & 32;

        if $i0 == 0 goto label13;

        virtualinvoke $r1.<android.widget.ProgressBar: void setVisibility(int)>(8);

        return;

     label07:
        if $i0 != -3 goto label08;

        virtualinvoke $r2.<android.widget.ProgressBar: void setIndeterminate(boolean)>(1);

        return;

     label08:
        if $i0 != -4 goto label09;

        virtualinvoke $r2.<android.widget.ProgressBar: void setIndeterminate(boolean)>(0);

        return;

     label09:
        if $i0 < 0 goto label11;

        if $i0 > 10000 goto label11;

        $i1 = $i0 - 0;

        virtualinvoke $r2.<android.widget.ProgressBar: void setProgress(int)>($i1);

        if $i0 >= 10000 goto label10;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void showProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>($r2, $r1);

        return;

     label10:
        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void hideProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>($r2, $r1);

        return;

     label11:
        if 20000 > $i0 goto label14;

        if $i0 > 30000 goto label15;

        $i0 = $i0 - 20000;

        virtualinvoke $r2.<android.widget.ProgressBar: void setSecondaryProgress(int)>($i0);

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void showProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>($r2, $r1);

        return;

     label12:
        return;

     label13:
        return;

     label14:
        return;

     label15:
        return;
    }

    public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.view.Window$Callback $r3;
        android.view.ViewGroup $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r4 != null goto label1;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r4.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r1, $r2);

        $r3 = virtualinvoke $r0.<android.view.Window: android.view.Window$Callback getCallback()>();

        if $r3 == null goto label2;

        interfaceinvoke $r3.<android.view.Window$Callback: void onContentChanged()>();

        return;

     label2:
        return;
    }

    public final void closeAllPanels()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] $r2;
        android.view.WindowManager $r3;
        int $i0, $i1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r3 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager getWindowManager()>();

        if $r3 != null goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if $r2 == null goto label5;

        $i0 = lengthof $r2;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label6;

        $r1 = $r2[$i1];

        if $r1 == null goto label4;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r1, 1);

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i0 = 0;

        goto label2;

     label6:
        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closeContextMenu()>();

        return;
    }

    public final void closePanel(int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        if $i0 != 6 goto label1;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closeContextMenu()>();

        return;

     label1:
        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 1);

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r1, 1);

        return;
    }

    public final void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1, $r4;
        boolean $z0, $z1;
        android.view.WindowManager $r2;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r3;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $z0 := @parameter1: boolean;

        $r2 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager getWindowManager()>();

        if $r2 == null goto label2;

        $z1 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z1 == 0 goto label2;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        if $r3 == null goto label1;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        interfaceinvoke $r2.<android.view.ViewManager: void removeView(android.view.View)>($r3);

     label1:
        if $z0 == 0 goto label2;

        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void callOnPanelClosed(int,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.Menu)>($i0, $r1, null);

     label2:
        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen> = 0;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = null;

        $z0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z0 == 0 goto label3;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = 0;

     label3:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r4 != $r1 goto label4;

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel> = null;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = 0;

        return;

     label4:
        return;
    }

    public com.android.internal.policy.impl.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.Menu $r1, $r4;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] $r3;
        int $i0, $i1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.view.Menu;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState[] mPanels>;

        if $r3 == null goto label3;

        $i0 = lengthof $r3;

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        $r2 = $r3[$i1];

        if $r2 == null goto label4;

        $r4 = $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        if $r4 != $r1 goto label4;

        return $r2;

     label3:
        $i0 = 0;

        goto label1;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        return null;
    }

    protected com.android.internal.policy.impl.PhoneWindow$DecorView generateDecor()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;
        android.content.Context $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = new com.android.internal.policy.impl.PhoneWindow$DecorView;

        $r2 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        specialinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void <init>(com.android.internal.policy.impl.PhoneWindow,android.content.Context,int)>($r0, $r2, -1);

        return $r1;
    }

    protected android.view.ViewGroup generateLayout(com.android.internal.policy.impl.PhoneWindow$DecorView)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1, $r6;
        int $i0, $i1;
        android.content.res.TypedArray $r2;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r3;
        float $f0;
        android.view.Window $r4;
        android.graphics.drawable.Drawable $r5;
        android.view.LayoutInflater $r7;
        android.view.View $r8;
        android.view.ViewGroup$LayoutParams $r9;
        android.view.ViewGroup $r10;
        java.lang.RuntimeException $r11;
        android.widget.ProgressBar $r12;
        android.content.Context $r13;
        android.content.res.Resources $r14;
        java.lang.CharSequence $r15;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$DecorView;

        $r2 = virtualinvoke $r0.<android.view.Window: android.content.res.TypedArray getWindowStyle()>();

        $z0 = virtualinvoke $r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 0);

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating> = $z0;

        $i0 = virtualinvoke $r0.<android.view.Window: int getForcedWindowFlags()>();

        $i0 = $i0 ^ -1;

        $i0 = 65792 & $i0;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z0 == 0 goto label12;

        virtualinvoke $r0.<android.view.Window: void setLayout(int,int)>(-2, -2);

        virtualinvoke $r0.<android.view.Window: void setFlags(int,int)>(0, $i0);

     label01:
        $z0 = virtualinvoke $r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 0);

        if $z0 == 0 goto label02;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>(1);

     label02:
        $z0 = virtualinvoke $r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(9, 0);

        if $z0 == 0 goto label03;

        $i0 = virtualinvoke $r0.<android.view.Window: int getForcedWindowFlags()>();

        $i0 = $i0 ^ -1;

        $i0 = $i0 & 1024;

        virtualinvoke $r0.<android.view.Window: void setFlags(int,int)>(1024, $i0);

     label03:
        $r3 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $z0 = virtualinvoke $r0.<android.view.Window: boolean hasSoftInputMode()>();

        if $z0 != 0 goto label04;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i0 = virtualinvoke $r2.<android.content.res.TypedArray: int getInt(int,int)>(13, $i0);

        $r3.<android.view.WindowManager$LayoutParams: int softInputMode> = $i0;

     label04:
        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        $z0 = virtualinvoke $r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(11, $z0);

        if $z0 == 0 goto label06;

        $i0 = virtualinvoke $r0.<android.view.Window: int getForcedWindowFlags()>();

        $i0 = $i0 & 2;

        if $i0 != 0 goto label05;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int flags>;

        $i0 = $i0 | 2;

        $r3.<android.view.WindowManager$LayoutParams: int flags> = $i0;

     label05:
        $f0 = virtualinvoke $r2.<android.content.res.TypedArray: float getFloat(int,float)>(0, 0.5F);

        $r3.<android.view.WindowManager$LayoutParams: float dimAmount> = $f0;

     label06:
        $i0 = $r3.<android.view.WindowManager$LayoutParams: int windowAnimations>;

        if $i0 != 0 goto label07;

        $i0 = virtualinvoke $r2.<android.content.res.TypedArray: int getResourceId(int,int)>(8, 0);

        $r3.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i0;

     label07:
        $r4 = virtualinvoke $r0.<android.view.Window: android.view.Window getContainer()>();

        if $r4 != null goto label10;

        $r5 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        if $r5 != null goto label09;

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        if $i0 != 0 goto label08;

        $i0 = virtualinvoke $r2.<android.content.res.TypedArray: int getResourceId(int,int)>(1, 0);

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = $i0;

     label08:
        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        if $i0 != 0 goto label09;

        $i0 = virtualinvoke $r2.<android.content.res.TypedArray: int getResourceId(int,int)>(2, 0);

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource> = $i0;

     label09:
        $i0 = virtualinvoke $r2.<android.content.res.TypedArray: int getColor(int,int)>(7, -16777216);

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor> = $i0;

     label10:
        $i0 = virtualinvoke $r0.<android.view.Window: int getLocalFeatures()>();

        $i1 = $i0 & 24;

        if $i1 == 0 goto label14;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z0 == 0 goto label13;

        $i1 = 17367076;

     label11:
        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r6.<com.android.internal.policy.impl.PhoneWindow$DecorView: void startChanging()>();

        $r7 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        $r8 = virtualinvoke $r7.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>($i1, null);

        $r9 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r9.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke $r1.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r8, $r9);

        $r8 = virtualinvoke $r0.<android.view.Window: android.view.View findViewById(int)>(16908290);

        $r10 = (android.view.ViewGroup) $r8;

        if $r10 != null goto label20;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Window couldn\'t find content container view");

        throw $r11;

     label12:
        virtualinvoke $r0.<android.view.Window: void setFlags(int,int)>(65792, $i0);

        goto label01;

     label13:
        $i1 = 17367120;

        goto label11;

     label14:
        $i1 = $i0 & 36;

        if $i1 == 0 goto label15;

        $i1 = 17367117;

        goto label11;

     label15:
        $i1 = $i0 & 128;

        if $i1 == 0 goto label17;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z0 == 0 goto label16;

        $i1 = 17367074;

        goto label11;

     label16:
        $i1 = 17367116;

        goto label11;

     label17:
        $i1 = $i0 & 2;

        if $i1 != 0 goto label19;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        if $z0 == 0 goto label18;

        $i1 = 17367075;

        goto label11;

     label18:
        $i1 = 17367119;

        goto label11;

     label19:
        $i1 = 17367118;

        goto label11;

     label20:
        $i0 = $i0 & 32;

        if $i0 == 0 goto label21;

        $r12 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ProgressBar getCircularProgressBar(boolean)>(0);

        if $r12 == null goto label21;

        virtualinvoke $r12.<android.widget.ProgressBar: void setIndeterminate(boolean)>(1);

     label21:
        $r4 = virtualinvoke $r0.<android.view.Window: android.view.Window getContainer()>();

        if $r4 != null goto label26;

        $r5 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        if $i0 == 0 goto label22;

        $r13 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource>;

        $r5 = virtualinvoke $r14.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i0);

     label22:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>($r5);

        $r5 = null;

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        if $i0 == 0 goto label23;

        $r13 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r14 = virtualinvoke $r13.<android.content.Context: android.content.res.Resources getResources()>();

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mFrameResource>;

        $r5 = virtualinvoke $r14.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i0);

     label23:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowFrame(android.graphics.drawable.Drawable)>($r5);

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor>;

        if $i0 != 0 goto label24;

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mTextColor>;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = $i0;

     label24:
        $r15 = $r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        if $r15 == null goto label25;

        $r15 = $r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle>;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void setTitle(java.lang.CharSequence)>($r15);

     label25:
        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor>;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void setTitleColor(int)>($i0);

     label26:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$DecorView: void finishChanging()>();

        return $r10;
    }

    public android.view.View getCurrentFocus()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.View $r1;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $r1 = virtualinvoke $r2.<android.view.ViewGroup: android.view.View findFocus()>();

        return $r1;

     label1:
        return null;
    }

    public final android.view.View getDecorView()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r1 != null goto label1;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        return $r1;
    }

    public android.view.LayoutInflater getLayoutInflater()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.LayoutInflater r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        return r1;
    }

    public int getVolumeControlStream()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        return i0;
    }

    protected boolean initializePanelContent(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;
        com.android.internal.policy.impl.PhoneWindow $r2;
        android.view.View $r3;
        android.view.Menu $r4;
        com.android.internal.view.menu.MenuBuilder $r5;
        boolean $z0;
        byte $b0;
        com.android.internal.view.menu.MenuView $r6;
        int $i1;

        $r2 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r0 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r3 == null goto label1;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = $r3;

        return 1;

     label1:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $r5 = (com.android.internal.view.menu.MenuBuilder) $r4;

        if $r5 != null goto label2;

        return 0;

     label2:
        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z0 == 0 goto label5;

        $b0 = 1;

     label3:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView>;

        $r3 = virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: android.view.View getMenuView(int,android.view.ViewGroup)>($b0, $r1);

        $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = $r3;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        if $r3 == null goto label6;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        $r6 = (com.android.internal.view.menu.MenuView) $r3;

        $i1 = interfaceinvoke $r6.<com.android.internal.view.menu.MenuView: int getWindowAnimations()>();

        if $i1 == 0 goto label4;

        $r0.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int windowAnimations> = $i1;

     label4:
        return 1;

     label5:
        $b0 = 0;

        goto label3;

     label6:
        return 0;
    }

    protected boolean initializePanelDecor(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        int $i0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;
        android.content.Context $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r2 = new com.android.internal.policy.impl.PhoneWindow$DecorView;

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        specialinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: void <init>(com.android.internal.policy.impl.PhoneWindow,android.content.Context,int)>($r0, $r3, $i0);

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: com.android.internal.policy.impl.PhoneWindow$DecorView decorView> = $r2;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int gravity> = 81;

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void setStyle(android.content.Context)>($r3);

        return 1;
    }

    protected boolean initializePanelMenu(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        com.android.internal.view.menu.MenuBuilder $r2, r4;
        android.content.Context $r3;
        android.view.Menu r5;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        r4 = new com.android.internal.view.menu.MenuBuilder;

        $r2 = r4;

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        specialinvoke r4.<com.android.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>($r3);

        virtualinvoke $r2.<com.android.internal.view.menu.MenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)>($r0);

        r5 = (android.view.Menu) $r2;

        virtualinvoke $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: void setMenu(android.view.Menu)>(r5);

        return 1;
    }

    public boolean isFloating()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mIsFloating>;

        return z0;
    }

    public boolean isShortcutKey(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.view.KeyEvent $r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        android.view.Menu $r3;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 1);

        $r3 = $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        if $r3 == null goto label1;

        $r3 = $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $z0 = interfaceinvoke $r3.<android.view.Menu: boolean isShortcutKey(int,android.view.KeyEvent)>($i0, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void onActive()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        return;
    }

    public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.MenuBuilder $r1;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        android.view.Menu r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        $z0 := @parameter1: boolean;

        r3 = (android.view.Menu) $r1;

        $r2 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)>(r3);

        if $r2 == null goto label1;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r2, $z0);

        return;

     label1:
        return;
    }

    public void onCloseSubMenu(com.android.internal.view.menu.SubMenuBuilder)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.SubMenuBuilder $r1;
        com.android.internal.view.menu.MenuBuilder $r2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r3;
        int $i0;
        android.view.Menu r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.view.menu.SubMenuBuilder;

        $r2 = virtualinvoke $r1.<com.android.internal.view.menu.SubMenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>();

        r4 = (android.view.Menu) $r2;

        $r3 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)>(r4);

        if $r3 == null goto label1;

        $i0 = $r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        r4 = (android.view.Menu) $r2;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void callOnPanelClosed(int,com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.Menu)>($i0, $r3, r4);

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r3, 1);

        return;

     label1:
        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.content.res.Configuration $r1;
        android.os.Bundle $r2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r3;
        android.view.Menu $r4;
        com.android.internal.view.menu.MenuBuilder $r5;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.content.res.Configuration;

        $r3 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if $r3 == null goto label2;

        $r4 = $r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        if $r4 == null goto label3;

        $r4 = $r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $r5 = (com.android.internal.view.menu.MenuBuilder) $r4;

        $z0 = $r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label1;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: void saveHierarchyState(android.os.Bundle)>($r2);

        staticinvoke <com.android.internal.policy.impl.PhoneWindow: void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>($r3);

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(0);

        virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: void restoreHierarchyState(android.os.Bundle)>($r2);

        return;

     label1:
        staticinvoke <com.android.internal.policy.impl.PhoneWindow: void clearMenuViews(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>($r3);

        return;

     label2:
        return;

     label3:
        return;
    }

    protected void onDrawableChanged(int, android.graphics.drawable.Drawable, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.graphics.drawable.Drawable $r1;
        android.widget.ImageView $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.drawable.Drawable;

        $i1 := @parameter2: int;

        if $i0 != 3 goto label2;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView getLeftIconView()>();

     label1:
        if $r1 == null goto label3;

        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setAlpha(int)>($i1);

        virtualinvoke $r2.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>($r1);

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(0);

        return;

     label2:
        if $i0 != 4 goto label4;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.ImageView getRightIconView()>();

        goto label1;

     label3:
        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(8);

        return;

     label4:
        return;
    }

    protected void onIntChanged(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.view.View $r1;
        android.widget.FrameLayout $r2;
        android.view.LayoutInflater $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 == 2 goto label1;

        if $i0 != 5 goto label2;

     label1:
        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateProgressBars(int)>($i1);

        return;

     label2:
        if $i0 != 7 goto label3;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.View findViewById(int)>(16908617);

        $r2 = (android.widget.FrameLayout) $r1;

        if $r2 == null goto label4;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        virtualinvoke $r3.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>($i1, $r2);

        return;

     label3:
        return;

     label4:
        return;
    }

    protected boolean onKeyDown(int, int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.view.KeyEvent $r1;
        android.content.Intent $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.media.AudioManager $r5;
        byte $b2;
        android.telephony.TelephonyManager $r6;
        android.app.KeyguardManager $r7;
        boolean $z0;
        android.os.Handler $r8, $r11;
        android.os.Message $r9;
        long $l3;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r10;
        android.content.res.Resources $r12;
        android.content.res.Configuration $r13;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.view.KeyEvent;

        lookupswitch($i1)
        {
            case 4: goto label13;
            case 5: goto label15;
            case 24: goto label02;
            case 25: goto label02;
            case 27: goto label09;
            case 79: goto label08;
            case 82: goto label10;
            case 84: goto label16;
            case 85: goto label06;
            case 86: goto label08;
            case 87: goto label08;
            case 88: goto label08;
            case 89: goto label08;
            case 90: goto label08;
            case 91: goto label08;
            default: goto label01;
        };

     label01:
        return 0;

     label02:
        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r5 = (android.media.AudioManager) $r4;

        if $r5 == null goto label04;

        if $i1 != 24 goto label05;

        $b2 = 1;

     label03:
        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r5.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>($b2, $i0, 17);

     label04:
        return 1;

     label05:
        $b2 = -1;

        goto label03;

     label06:
        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.telephony.TelephonyManager mTelephonyManager>;

        if $r6 != null goto label07;

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r6 = (android.telephony.TelephonyManager) $r4;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.telephony.TelephonyManager mTelephonyManager> = $r6;

     label07:
        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.telephony.TelephonyManager mTelephonyManager>;

        if $r6 == null goto label08;

        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.telephony.TelephonyManager mTelephonyManager>;

        $i0 = virtualinvoke $r6.<android.telephony.TelephonyManager: int getCallState()>();

        if $i0 == 0 goto label08;

        return 1;

     label08:
        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MEDIA_BUTTON", null);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.KEY_EVENT", $r1);

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        virtualinvoke $r3.<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>($r2, null);

        return 1;

     label09:
        $r7 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        $z0 = virtualinvoke $r7.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z0 != 0 goto label01;

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i0 > 0 goto label01;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCameraTimeoutActive> = 1;

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        virtualinvoke $r8.<android.os.Handler: void removeMessages(int)>(5);

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        $r9 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int)>(5);

        $r9.<android.os.Message: java.lang.Object obj> = $r1;

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l3 = (long) $i0;

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r9, $l3);

        return 1;

     label10:
        $i1 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 > 0 goto label01;

        if $i0 >= 0 goto label12;

        $i0 = 0;

     label11:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean onKeyDownPanel(int,android.view.KeyEvent)>($i0, $r1);

        return 1;

     label12:
        goto label11;

     label13:
        $i1 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 > 0 goto label01;

        if $i0 < 0 goto label01;

        if $i0 != 0 goto label14;

        $r10 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 0);

        if $r10 == null goto label14;

        $z0 = $r10.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z0 == 0 goto label14;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(1);

        return 1;

     label14:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(int)>($i0);

        return 1;

     label15:
        $r7 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        $z0 = virtualinvoke $r7.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z0 != 0 goto label01;

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i0 > 0 goto label01;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCallTimeoutActive> = 1;

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        virtualinvoke $r8.<android.os.Handler: void removeMessages(int)>(3);

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        $r11 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        $r9 = virtualinvoke $r11.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l3 = (long) $i0;

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r9, $l3);

        return 1;

     label16:
        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i0 != 0 goto label01;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mSearchKeyDownReceived> = 1;

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r12 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r13 = virtualinvoke $r12.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i0 = $r13.<android.content.res.Configuration: int keyboard>;

        if $i0 == 1 goto label17;

        $i0 = $r13.<android.content.res.Configuration: int hardKeyboardHidden>;

        if $i0 != 2 goto label18;

     label17:
        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        virtualinvoke $r8.<android.os.Handler: void removeMessages(int)>(7);

        $r8 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        $r11 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        $r9 = virtualinvoke $r11.<android.os.Handler: android.os.Message obtainMessage(int)>(7);

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l3 = (long) $i0;

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r9, $l3);

     label18:
        return 1;
    }

    public final boolean onKeyDownPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.view.KeyEvent $r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        boolean $z0;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        android.content.res.Configuration $r5;
        android.os.Handler $r6, $r7;
        android.os.Message $r8;
        long $l2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $i1 = virtualinvoke $r1.<android.view.KeyEvent: int getKeyCode()>();

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = $i1;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 1);

        $z0 = $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 != 0 goto label2;

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i0 = $r5.<android.content.res.Configuration: int keyboard>;

        if $i0 != 1 goto label1;

        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        virtualinvoke $r6.<android.os.Handler: void removeMessages(int)>(1);

        $r6 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        $r7 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        $r8 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l2 = (long) $i0;

        virtualinvoke $r6.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r8, $l2);

     label1:
        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r2, $r1);

        return $z0;

     label2:
        return 0;
    }

    protected boolean onKeyUp(int, int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.view.KeyEvent $r1;
        android.content.Intent $r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.media.AudioManager $r5;
        long $l2;
        android.app.KeyguardManager $r6;
        boolean $z0;
        android.os.Handler $r7;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.view.KeyEvent;

        lookupswitch($i1)
        {
            case 5: goto label09;
            case 24: goto label02;
            case 25: goto label02;
            case 27: goto label08;
            case 79: goto label07;
            case 82: goto label04;
            case 84: goto label10;
            case 85: goto label07;
            case 86: goto label07;
            case 87: goto label07;
            case 88: goto label07;
            case 89: goto label07;
            case 90: goto label07;
            default: goto label01;
        };

     label01:
        return 0;

     label02:
        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r5 = (android.media.AudioManager) $r4;

        if $r5 == null goto label03;

        $i0 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r5.<android.media.AudioManager: void adjustSuggestedStreamVolume(int,int,int)>(0, $i0, 4);

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r0.<com.android.internal.policy.impl.PhoneWindow: long mVolumeKeyUpTime> = $l2;

     label03:
        return 1;

     label04:
        if $i0 >= 0 goto label06;

        $i0 = 0;

     label05:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void onKeyUpPanel(int,android.view.KeyEvent)>($i0, $r1);

        return 1;

     label06:
        goto label05;

     label07:
        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.MEDIA_BUTTON", null);

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.KEY_EVENT", $r1);

        $r3 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        virtualinvoke $r3.<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>($r2, null);

        return 1;

     label08:
        $r6 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        $z0 = virtualinvoke $r6.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z0 != 0 goto label01;

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i0 > 0 goto label01;

        $r7 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        virtualinvoke $r7.<android.os.Handler: void removeMessages(int)>(5);

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCameraTimeoutActive>;

        if $z0 == 0 goto label01;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCameraTimeoutActive> = 0;

        return 1;

     label09:
        $r6 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        $z0 = virtualinvoke $r6.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z0 != 0 goto label01;

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i0 > 0 goto label01;

        $r7 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        virtualinvoke $r7.<android.os.Handler: void removeMessages(int)>(3);

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCallTimeoutActive>;

        if $z0 == 0 goto label01;

        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mKeycodeCallTimeoutActive> = 0;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void startCallActivity()>();

        return 1;

     label10:
        $r6 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        $z0 = virtualinvoke $r6.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z0 != 0 goto label11;

        $z0 = $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mSearchKeyDownReceived>;

        if $z0 != 0 goto label12;

     label11:
        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mSearchKeyDownReceived> = 0;

        goto label01;

     label12:
        $r0.<com.android.internal.policy.impl.PhoneWindow: boolean mSearchKeyDownReceived> = 0;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean launchDefaultSearch()>();

        return 1;
    }

    public final void onKeyUpPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.view.KeyEvent $r1;
        android.os.Handler $r2;
        boolean $z0, $z1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r3;
        android.content.Context $r4;
        java.lang.Object $r5;
        android.media.AudioManager $r6;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $i1 = $r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey>;

        if $i1 == 0 goto label5;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mPanelChordingKey> = 0;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.os.Handler mKeycodeMenuTimeoutHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(1);

        $z0 = 0;

        $r3 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 1);

        $z1 = $r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z1 != 0 goto label1;

        $z1 = $r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled>;

        if $z1 == 0 goto label3;

     label1:
        $z0 = $r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r3, 1);

     label2:
        if $z0 == 0 goto label6;

        $r4 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r6 = (android.media.AudioManager) $r5;

        if $r6 == null goto label4;

        virtualinvoke $r6.<android.media.AudioManager: void playSoundEffect(int)>(0);

        return;

     label3:
        $z1 = $r3.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z1 == 0 goto label2;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50001, 0);

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r3, $r1);

        $z0 = 1;

        goto label2;

     label4:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", "Couldn\'t get audio manager");

        return;

     label5:
        return;

     label6:
        return;
    }

    public boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.MenuBuilder $r1;
        android.view.MenuItem $r2;
        android.view.Window$Callback $r3;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r4;
        int $i0;
        boolean $z0;
        android.view.Menu r5;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        $r2 := @parameter1: android.view.MenuItem;

        $r3 = virtualinvoke $r0.<android.view.Window: android.view.Window$Callback getCallback()>();

        if $r3 == null goto label1;

        $r1 = virtualinvoke $r1.<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>();

        r5 = (android.view.Menu) $r1;

        $r4 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)>(r5);

        if $r4 == null goto label1;

        $i0 = $r4.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $z0 = interfaceinvoke $r3.<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>($i0, $r2);

        return $z0;

     label1:
        return 0;
    }

    public void onMenuModeChange(com.android.internal.view.menu.MenuBuilder)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.MenuBuilder $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void reopenMenu(boolean)>(1);

        return;
    }

    public boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.view.menu.SubMenuBuilder $r1;
        boolean $z0;
        com.android.internal.view.menu.MenuDialogHelper $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.view.menu.SubMenuBuilder;

        $z0 = virtualinvoke $r1.<com.android.internal.view.menu.MenuBuilder: boolean hasVisibleItems()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r2 = new com.android.internal.view.menu.MenuDialogHelper;

        specialinvoke $r2.<com.android.internal.view.menu.MenuDialogHelper: void <init>(com.android.internal.view.menu.MenuBuilder)>($r1);

        virtualinvoke $r2.<com.android.internal.view.menu.MenuDialogHelper: void show(android.os.IBinder)>(null);

        return 1;
    }

    public final void openPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.view.KeyEvent $r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 1);

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r2, $r1);

        return;
    }

    public final android.view.View peekDecorView()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$DecorView r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        return r1;
    }

    public boolean performContextMenuIdentifierAction(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        boolean $z0;
        com.android.internal.view.menu.ContextMenuBuilder $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if $r1 == null goto label1;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        $z0 = virtualinvoke $r1.<com.android.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>($i0, $i1);

        return $z0;

     label1:
        return 0;
    }

    public boolean performPanelIdentifierAction(int, int, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1;
        android.view.KeyEvent $r2;
        boolean $z0;
        android.view.Menu $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 1);

        $r2 = new android.view.KeyEvent;

        specialinvoke $r2.<android.view.KeyEvent: void <init>(int,int)>(0, 82);

        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r1, $r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        if $r3 != null goto label2;

        return 0;

     label2:
        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $z0 = interfaceinvoke $r3.<android.view.Menu: boolean performIdentifierAction(int,int)>($i1, $i2);

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r1, 1);

        return $z0;
    }

    public boolean performPanelShortcut(int, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2;
        android.view.KeyEvent $r1;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.view.KeyEvent;

        $i2 := @parameter3: int;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 1);

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>($r2, $i1, $r1, $i2);

        return $z0;
    }

    public final boolean preparePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r1, $r4;
        android.view.KeyEvent $r2;
        android.view.Menu $r3;
        boolean $z0;
        android.view.Window$Callback $r5;
        int $i0;
        android.view.View $r6;
        android.view.KeyCharacterMap $r7;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState;

        $r2 := @parameter1: android.view.KeyEvent;

        $z0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r4 == null goto label02;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r4 == $r1 goto label02;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel>;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r4, 0);

     label02:
        $r5 = virtualinvoke $r0.<android.view.Window: android.view.Window$Callback getCallback()>();

        if $r5 == null goto label03;

        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r6 = interfaceinvoke $r5.<android.view.Window$Callback: android.view.View onCreatePanelView(int)>($i0);

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView> = $r6;

     label03:
        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r6 != null goto label11;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        if $r3 != null goto label07;

        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean initializePanelMenu(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState)>($r1);

        if $z0 == 0 goto label04;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        if $r3 != null goto label05;

     label04:
        return 0;

     label05:
        if $r5 == null goto label06;

        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $z0 = interfaceinvoke $r5.<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>($i0, $r3);

        if $z0 != 0 goto label07;

     label06:
        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu> = null;

        return 0;

     label07:
        $i0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: int featureId>;

        $r6 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $z0 = interfaceinvoke $r5.<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>($i0, $r6, $r3);

        if $z0 != 0 goto label08;

        return 0;

     label08:
        if $r2 == null goto label12;

        $i0 = virtualinvoke $r2.<android.view.KeyEvent: int getDeviceId()>();

     label09:
        $r7 = staticinvoke <android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>($i0);

        $i0 = virtualinvoke $r7.<android.view.KeyCharacterMap: int getKeyboardType()>();

        if $i0 == 1 goto label13;

        $z0 = 1;

     label10:
        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean qwertyMode> = $z0;

        $r3 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: android.view.Menu menu>;

        $z0 = $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean qwertyMode>;

        interfaceinvoke $r3.<android.view.Menu: void setQwertyMode(boolean)>($z0);

     label11:
        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isPrepared> = 1;

        $r1.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState mPreparedPanel> = $r1;

        return 1;

     label12:
        $i0 = 0;

        goto label09;

     label13:
        $z0 = 0;

        goto label10;
    }

    public boolean requestFeature(int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;
        android.view.ViewGroup $r1;
        android.util.AndroidRuntimeException $r2;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 == null goto label1;

        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("requestFeature() must be called before adding content");

        throw $r2;

     label1:
        $i1 = virtualinvoke $r0.<android.view.Window: int getFeatures()>();

        if $i1 == 65 goto label2;

        if $i0 != 7 goto label2;

        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot combine custom titles with other title features");

        throw $r2;

     label2:
        $i1 = $i1 & 128;

        if $i1 == 0 goto label3;

        if $i0 == 7 goto label3;

        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot combine custom titles with other title features");

        throw $r2;

     label3:
        $z0 = specialinvoke $r0.<android.view.Window: boolean requestFeature(int)>($i0);

        return $z0;
    }

    public void restoreHierarchyState(android.os.Bundle)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.os.Bundle $r1;
        android.view.ViewGroup $r2;
        android.util.SparseArray $r3;
        int $i0;
        android.view.View $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = virtualinvoke $r1.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:views");

        if $r3 == null goto label2;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r2.<android.view.View: void restoreHierarchyState(android.util.SparseArray)>($r3);

     label2:
        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>("android:focusedViewId", -1);

        if $i0 == -1 goto label3;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r4 = virtualinvoke $r2.<android.view.View: android.view.View findViewById(int)>($i0);

        if $r4 == null goto label4;

        virtualinvoke $r4.<android.view.View: boolean requestFocus()>();

     label3:
        $r3 = virtualinvoke $r1.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:Panels");

        if $r3 == null goto label5;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void restorePanelState(android.util.SparseArray)>($r3);

        return;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previously focused view reported id ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during save, but can\'t be found during restore.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", $r6);

        goto label3;

     label5:
        return;
    }

    public android.os.Bundle saveHierarchyState()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.os.Bundle $r1;
        android.util.SparseArray $r2;
        android.view.ViewGroup $r3;
        android.view.View $r4;
        int $i0;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label1;

        return $r1;

     label1:
        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r3.<android.view.View: void saveHierarchyState(android.util.SparseArray)>($r2);

        virtualinvoke $r1.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:views", $r2);

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r4 = virtualinvoke $r3.<android.view.ViewGroup: android.view.View findFocus()>();

        if $r4 == null goto label2;

        $i0 = virtualinvoke $r4.<android.view.View: int getId()>();

        if $i0 == -1 goto label3;

        $i0 = virtualinvoke $r4.<android.view.View: int getId()>();

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("android:focusedViewId", $i0);

     label2:
        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void savePanelState(android.util.SparseArray)>($r2);

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if $i0 <= 0 goto label4;

        virtualinvoke $r1.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:Panels", $r2);

        return $r1;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t save which view has focus because the focused view ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no id.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("PhoneWindow", $r6);

        goto label2;

     label4:
        return $r1;
    }

    void sendCloseSystemWindows()
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.content.Context $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    void sendCloseSystemWindows(java.lang.String)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        java.lang.String $r1;
        android.content.Context $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        staticinvoke <com.android.internal.policy.impl.PhoneWindowManager: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r2, $r1);

        return;
    }

    public final void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.graphics.drawable.Drawable $r1, $r2;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        if $r1 == $r2 goto label1;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mBackgroundResource> = 0;

        $r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable> = $r1;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        if $r3 == null goto label2;

        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r3.<com.android.internal.policy.impl.PhoneWindow$DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>($r1);

        return;

     label1:
        return;

     label2:
        return;
    }

    public final void setChildDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.drawable.Drawable;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>($i0, 1);

        $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable child> = $r1;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>($i0, $r2, 0);

        return;
    }

    public final void setChildInt(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateInt(int,int,boolean)>($i0, $i1, 0);

        return;
    }

    public final void setContainer(android.view.Window)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.Window $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.view.Window;

        specialinvoke $r0.<android.view.Window: void setContainer(android.view.Window)>($r1);

        return;
    }

    public void setContentView(int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.view.ViewGroup $r1;
        android.view.Window$Callback $r2;
        android.view.LayoutInflater $r3;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label2;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r3 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r3.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>($i0, $r1);

        $r2 = virtualinvoke $r0.<android.view.Window: android.view.Window$Callback getCallback()>();

        if $r2 == null goto label3;

        interfaceinvoke $r2.<android.view.Window$Callback: void onContentChanged()>();

        return;

     label2:
        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r1.<android.view.ViewGroup: void removeAllViews()>();

        goto label1;

     label3:
        return;
    }

    public void setContentView(android.view.View)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.view.View;

        $r2 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r2.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>($r1, $r2);

        return;
    }

    public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.View $r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.view.Window$Callback $r3;
        android.view.ViewGroup $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r4 != null goto label2;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void installDecor()>();

     label1:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r4.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r1, $r2);

        $r3 = virtualinvoke $r0.<android.view.Window: android.view.Window$Callback getCallback()>();

        if $r3 == null goto label3;

        interfaceinvoke $r3.<android.view.Window$Callback: void onContentChanged()>();

        return;

     label2:
        $r4 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r4.<android.view.ViewGroup: void removeAllViews()>();

        goto label1;

     label3:
        return;
    }

    protected final void setFeatureDefaultDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1, $r3;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.drawable.Drawable;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>($i0, 1);

        $r3 = $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def>;

        if $r3 == $r1 goto label1;

        $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def> = $r1;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>($i0, $r2, 0);

        return;

     label1:
        return;
    }

    public final void setFeatureDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1, $r3;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.drawable.Drawable;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>($i0, 1);

        $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = 0;

        $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = null;

        $r3 = $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local>;

        if $r3 == $r1 goto label1;

        $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r1;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>($i0, $r2, 0);

        return;

     label1:
        return;
    }

    public void setFeatureDrawableAlpha(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>($i0, 1);

        $i2 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha>;

        if $i2 == $i1 goto label1;

        $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int alpha> = $i1;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>($i0, $r1, 0);

        return;

     label1:
        return;
    }

    public final void setFeatureDrawableResource(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        android.graphics.drawable.Drawable $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i1 == 0 goto label1;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>($i0, 1);

        $i2 = $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid>;

        if $i2 == $i1 goto label2;

        $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = $i1;

        $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = null;

        $r2 = virtualinvoke $r0.<android.view.Window: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i1);

        $r1.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r4;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>($i0, $r1, 0);

        return;

     label1:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>($i0, null);

        return;

     label2:
        return;
    }

    public final void setFeatureDrawableUri(int, android.net.Uri)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.net.Uri $r1, $r3;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r2;
        boolean $z0;
        android.graphics.drawable.Drawable $r4;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.net.Uri;

        if $r1 == null goto label2;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>($i0, 1);

        $r3 = $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri>;

        if $r3 == null goto label1;

        $r3 = $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri>;

        $z0 = virtualinvoke $r3.<android.net.Uri: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

     label1:
        $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: int resid> = 0;

        $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = $r1;

        $r4 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: android.graphics.drawable.Drawable loadImageURI(android.net.Uri)>($r1);

        $r2.<com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r4;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>($i0, $r2, 0);

        return;

     label2:
        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>($i0, null);

        return;

     label3:
        return;
    }

    protected void setFeatureFromAttrs(int, android.content.res.TypedArray, int, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1, $i2, $i3;
        android.content.res.TypedArray $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.content.res.TypedArray;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 = virtualinvoke $r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>($i1);

        if $r2 == null goto label1;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: boolean requestFeature(int)>($i0);

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDefaultDrawable(int,android.graphics.drawable.Drawable)>($i0, $r2);

     label1:
        $i1 = virtualinvoke $r0.<android.view.Window: int getFeatures()>();

        $i3 = 1 << $i0;

        $i1 = $i1 & $i3;

        if $i1 == 0 goto label2;

        $i1 = virtualinvoke $r1.<android.content.res.TypedArray: int getInt(int,int)>($i2, -1);

        if $i1 < 0 goto label3;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void setFeatureDrawableAlpha(int,int)>($i0, $i1);

        return;

     label2:
        return;

     label3:
        return;
    }

    public final void setFeatureInt(int, int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0, $i1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateInt(int,int,boolean)>($i0, $i1, 0);

        return;
    }

    public void setTitle(java.lang.CharSequence)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        java.lang.CharSequence $r1;
        android.widget.TextView $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r2.<android.widget.TextView: void setText(java.lang.CharSequence)>($r1);

     label1:
        $r0.<com.android.internal.policy.impl.PhoneWindow: java.lang.CharSequence mTitle> = $r1;

        return;
    }

    public void setTitleColor(int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.widget.TextView $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        if $r1 == null goto label1;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r1.<android.widget.TextView: void setTextColor(int)>($i0);

     label1:
        $r0.<com.android.internal.policy.impl.PhoneWindow: int mTitleColor> = $i0;

        return;
    }

    public void setVolumeControlStream(int)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r0.<com.android.internal.policy.impl.PhoneWindow: int mVolumeControlStreamType> = $i0;

        return;
    }

    public boolean superDispatchKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.KeyEvent $r1;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.view.KeyEvent;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchKeyEvent(android.view.KeyEvent)>($r1);

        return $z0;
    }

    public boolean superDispatchTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.MotionEvent $r1;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.view.MotionEvent;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchTouchEvent(android.view.MotionEvent)>($r1);

        return $z0;
    }

    public boolean superDispatchTrackballEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        android.view.MotionEvent $r1;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $r1 := @parameter0: android.view.MotionEvent;

        $r2 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindow$DecorView: boolean superDispatchTrackballEvent(android.view.MotionEvent)>($r1);

        return $z0;
    }

    public void takeKeyEvents(boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$DecorView $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DecorView mDecor>;

        virtualinvoke $r1.<android.view.View: void setFocusable(boolean)>($z0);

        return;
    }

    public final void togglePanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        android.view.KeyEvent $r1;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$PanelFeatureState $r2;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $r2 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>($i0, 1);

        $z0 = $r2.<com.android.internal.policy.impl.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void closePanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,boolean)>($r2, 1);

        return;

     label1:
        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void openPanel(com.android.internal.policy.impl.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r2, $r1);

        return;
    }

    protected final void updateDrawable(int, boolean)
    {
        com.android.internal.policy.impl.PhoneWindow $r0;
        int $i0;
        boolean $z0;
        com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState $r1;

        $r0 := @this: com.android.internal.policy.impl.PhoneWindow;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>($i0, 0);

        if $r1 == null goto label1;

        specialinvoke $r0.<com.android.internal.policy.impl.PhoneWindow: void updateDrawable(int,com.android.internal.policy.impl.PhoneWindow$DrawableFeatureState,boolean)>($i0, $r1, $z0);

        return;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.policy.impl.PhoneWindow: java.lang.String VIEWS_TAG> = "android:views";

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String TAG> = "PhoneWindow";

        <com.android.internal.policy.impl.PhoneWindow: boolean SWEEP_OPEN_MENU> = 0;

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String PANELS_TAG> = "android:Panels";

        <com.android.internal.policy.impl.PhoneWindow: int MSG_SEARCH_LONG_PRESS_COMPLETE> = 8;

        <com.android.internal.policy.impl.PhoneWindow: int MSG_SEARCH_LONG_PRESS> = 7;

        <com.android.internal.policy.impl.PhoneWindow: int MSG_MENU_LONG_PRESS_COMPLETE> = 2;

        <com.android.internal.policy.impl.PhoneWindow: int MSG_MENU_LONG_PRESS> = 1;

        <com.android.internal.policy.impl.PhoneWindow: int MSG_CAMERA_LONG_PRESS_COMPLETE> = 6;

        <com.android.internal.policy.impl.PhoneWindow: int MSG_CAMERA_LONG_PRESS> = 5;

        <com.android.internal.policy.impl.PhoneWindow: int MSG_CALL_LONG_PRESS_COMPLETE> = 4;

        <com.android.internal.policy.impl.PhoneWindow: int MSG_CALL_LONG_PRESS> = 3;

        <com.android.internal.policy.impl.PhoneWindow: java.lang.String FOCUSED_ID_TAG> = "android:focusedViewId";

        return;
    }
}
