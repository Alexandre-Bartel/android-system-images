public class org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl extends javax.net.ssl.SSLServerSocket
{
    private static long SSL_OP_NO_SSLv3;
    private static long SSL_OP_NO_TLSv1;
    private static int SSL_VERIFY_CLIENT_ONCE;
    private static int SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
    private static int SSL_VERIFY_NONE;
    private static int SSL_VERIFY_PEER;
    private static final java.lang.String[] supportedProtocols;
    private boolean client_mode;
    private org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters;
    private int ssl_ctx;
    private long ssl_op_no;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "SSLv3";

        $r0[1] = "TLSv1";

        <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] supportedProtocols> = $r0;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void nativeinitstatic()>();

        <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long SSL_OP_NO_SSLv3> = 33554432L;

        <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long SSL_OP_NO_TLSv1> = 67108864L;

        <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_NONE> = 0;

        <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_PEER> = 1;

        <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_FAIL_IF_NO_PEER_CERT> = 2;

        <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_CLIENT_ONCE> = 4;

        return;
    }

    protected void <init>(int, int, java.net.InetAddress, org.apache.harmony.xnet.provider.jsse.SSLParameters) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        int $i0, $i1;
        java.net.InetAddress $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.net.InetAddress;

        $r2 := @parameter3: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r0.<javax.net.ssl.SSLServerSocket: void <init>(int,int,java.net.InetAddress)>($i0, $i1, $r1);

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean client_mode> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no> = 0L;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r2;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void init()>();

        return;
    }

    protected void <init>(int, int, org.apache.harmony.xnet.provider.jsse.SSLParameters) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        int $i0, $i1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r0.<javax.net.ssl.SSLServerSocket: void <init>(int,int)>($i0, $i1);

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean client_mode> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no> = 0L;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r1;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void init()>();

        return;
    }

    protected void <init>(int, org.apache.harmony.xnet.provider.jsse.SSLParameters) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        int $i0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r0.<javax.net.ssl.SSLServerSocket: void <init>(int)>($i0);

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean client_mode> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no> = 0L;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r1;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void init()>();

        return;
    }

    protected void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r0.<javax.net.ssl.SSLServerSocket: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean client_mode> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no> = 0L;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r1;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void init()>();

        return;
    }

    private boolean findSuite(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        java.lang.String $r1, $r3;
        java.lang.String[] $r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] nativegetsupportedciphersuites()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Protocol ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

    private void init() throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        java.io.ByteArrayOutputStream $r1, $r3;
        org.bouncycastle.openssl.PEMWriter $r2;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r4;
        javax.net.ssl.X509KeyManager $r5;
        java.lang.String $r6, $r12;
        java.io.IOException $r7;
        java.security.PrivateKey $r8;
        java.security.cert.X509Certificate[] $r9;
        java.io.OutputStreamWriter $r10;
        int $i0, $i1;
        java.security.cert.X509Certificate $r11;
        java.security.SecureRandom $r13;
        byte[] $r14;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager getKeyManager()>();

        $r6 = interfaceinvoke $r5.<javax.net.ssl.X509KeyManager: java.lang.String chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)>("RSA", null, null);

        if $r6 != null goto label1;

        $r7 = new java.io.IOException;

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>("No suitable certificates found");

        throw $r7;

     label1:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager getKeyManager()>();

        $r8 = interfaceinvoke $r5.<javax.net.ssl.X509KeyManager: java.security.PrivateKey getPrivateKey(java.lang.String)>($r6);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager getKeyManager()>();

        $r9 = interfaceinvoke $r5.<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>($r6);

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        $r2 = new org.bouncycastle.openssl.PEMWriter;

        $r10 = new java.io.OutputStreamWriter;

        specialinvoke $r10.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r3);

        specialinvoke $r2.<org.bouncycastle.openssl.PEMWriter: void <init>(java.io.Writer)>($r10);

        virtualinvoke $r2.<org.bouncycastle.openssl.PEMWriter: void writeObject(java.lang.Object)>($r8);

        virtualinvoke $r2.<java.io.BufferedWriter: void close()>();

        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r2 = new org.bouncycastle.openssl.PEMWriter;

        $r10 = new java.io.OutputStreamWriter;

        specialinvoke $r10.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r1);

        specialinvoke $r2.<org.bouncycastle.openssl.PEMWriter: void <init>(java.io.Writer)>($r10);

        $i0 = 0;

     label2:
        $i1 = lengthof $r9;

        if $i0 >= $i1 goto label3;

        $r11 = $r9[$i0];

        virtualinvoke $r2.<org.bouncycastle.openssl.PEMWriter: void writeObject(java.lang.Object)>($r11);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        virtualinvoke $r2.<java.io.BufferedWriter: void close()>();

        $r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r12 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r13 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom getSecureRandomMember()>();

        if $r13 == null goto label5;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r13 = virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.security.SecureRandom getSecureRandomMember()>();

        $r14 = virtualinvoke $r13.<java.security.SecureRandom: byte[] generateSeed(int)>(1024);

     label4:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void nativeinit(java.lang.String,java.lang.String,byte[])>($r6, $r12, $r14);

        return;

     label5:
        $r14 = null;

        goto label4;
    }

    private native void nativefree();

    private native java.lang.String[] nativegetenabledciphersuites();

    static native java.lang.String[] nativegetsupportedciphersuites();

    private native void nativeinit(java.lang.String, java.lang.String, byte[]);

    private static native void nativeinitstatic();

    private native void nativesetclientauth(int);

    private native void nativesetenabledciphersuites(java.lang.String);

    private native void nativesetenabledprotocols(long);

    private void setClientAuth()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        int $i0, $i1, $i2;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $i0 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_NONE>;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getNeedClientAuth()>();

        if $z0 == 0 goto label2;

        $i1 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_PEER>;

        $i2 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_FAIL_IF_NO_PEER_CERT>;

        $i1 = $i1 | $i2;

        $i2 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_CLIENT_ONCE>;

        $i1 = $i1 | $i2;

        $i0 = $i0 | $i1;

     label1:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void nativesetclientauth(int)>($i0);

        return;

     label2:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getWantClientAuth()>();

        if $z0 == 0 goto label1;

        $i1 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_PEER>;

        $i2 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int SSL_VERIFY_CLIENT_ONCE>;

        $i1 = $i1 | $i2;

        $i0 = $i0 | $i1;

        goto label1;
    }

    public java.net.Socket accept() throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;
        long $l0;
        int $i1;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no>;

        specialinvoke $r1.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters,long)>($r2, $l0);

        virtualinvoke $r0.<java.net.ServerSocket: void implAccept(java.net.Socket)>($r1);

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: int ssl_ctx>;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean client_mode>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void accept(int,boolean)>($i1, $z0);

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        java.lang.Throwable $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void nativefree()>();

        specialinvoke $r0.<java.net.ServerSocket: void close()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void finalize() throws java.lang.Throwable
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $z0 = virtualinvoke $r0.<java.net.ServerSocket: boolean isClosed()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void close()>();

        return;

     label1:
        return;
    }

    public boolean getEnableSessionCreation()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getEnableSessionCreation()>();

        return $z0;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        java.lang.String[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] nativegetenabledciphersuites()>();

        return $r1;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        java.util.ArrayList $r0;
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r1;
        long $l0, $l1;
        byte $b2;
        java.lang.String[] $r2;
        java.lang.String $r3;
        int $i3;
        java.lang.Object[] $r4;

        $r1 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $l0 = $r1.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no>;

        $l1 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long SSL_OP_NO_SSLv3>;

        $l0 = $l0 & $l1;

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label1;

        $r2 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] supportedProtocols>;

        $r3 = $r2[1];

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label1:
        $l0 = $r1.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no>;

        $l1 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long SSL_OP_NO_TLSv1>;

        $l0 = $l0 & $l1;

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label2;

        $r2 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] supportedProtocols>;

        $r3 = $r2[2];

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label2:
        $i3 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $r2 = newarray (java.lang.String)[$i3];

        $r4 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r2 = (java.lang.String[]) $r4;

        return $r2;
    }

    public boolean getNeedClientAuth()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getNeedClientAuth()>();

        return $z0;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        java.lang.String[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] nativegetsupportedciphersuites()>();

        return $r1;
    }

    public java.lang.String[] getSupportedProtocols()
    {
        java.lang.String[] $r0;
        java.lang.Object $r1;
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r2;

        $r2 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r0 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: java.lang.String[] supportedProtocols>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (java.lang.String[]) $r1;

        return $r0;
    }

    public boolean getUseClientMode()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getUseClientMode()>();

        return $z0;
    }

    public boolean getWantClientAuth()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getWantClientAuth()>();

        return $z0;
    }

    public void setEnableSessionCreation(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setEnableSessionCreation(boolean)>($z0);

        return;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 := @parameter0: java.lang.String[];

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided parameter is null");

        throw $r2;

     label1:
        $r3 = "";

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $r4 = $r1[$i0];

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: boolean findSuite(java.lang.String)>($r4);

        if $i0 != 0 goto label4;

        $r3 = $r1[$i0];

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r3 = $r1[$i0];

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label5:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void nativesetenabledciphersuites(java.lang.String)>($r3);

        return;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r2;
        long $l0, $l1;
        int $i2, $i3;
        java.lang.String $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $r1 := @parameter0: java.lang.String[];

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Provided parameter is null");

        throw $r2;

     label1:
        $l0 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long SSL_OP_NO_SSLv3>;

        $l1 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long SSL_OP_NO_TLSv1>;

        $l0 = $l0 | $l1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no> = $l0;

        $i2 = 0;

     label2:
        $i3 = lengthof $r1;

        if $i2 >= $i3 goto label6;

        $r3 = $r1[$i2];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("SSLv3");

        if $z0 == 0 goto label4;

        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no>;

        $l1 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long SSL_OP_NO_SSLv3>;

        $l0 = $l0 ^ $l1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no> = $l0;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        $r3 = $r1[$i2];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("TLSv1");

        if $z0 == 0 goto label5;

        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no>;

        $l1 = <org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long SSL_OP_NO_TLSv1>;

        $l0 = $l0 ^ $l1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no> = $l0;

        goto label3;

     label5:
        $r2 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Protocol ");

        $r3 = $r1[$i2];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not supported.");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label6:
        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: long ssl_op_no>;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void nativesetenabledprotocols(long)>($l0);

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setNeedClientAuth(boolean)>($z0);

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setClientAuth()>();

        return;
    }

    public void setUseClientMode(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setUseClientMode(boolean)>($z0);

        return;
    }

    public void setWantClientAuth(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setWantClientAuth(boolean)>($z0);

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLServerSocketImpl: void setClientAuth()>();

        return;
    }
}
