public class android.database.sqlite.SQLiteDatabase extends android.database.sqlite.SQLiteClosable
{
    public static final int CREATE_IF_NECESSARY;
    private static final int DB_OPERATION_EVENT;
    private static final int LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS;
    private static final int LOCK_ACQUIRED_WARNING_TIME_IN_MS;
    private static final int LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT;
    private static final int LOCK_WARNING_WINDOW_IN_MS;
    public static final int NO_LOCALIZED_COLLATORS;
    public static final int OPEN_READONLY;
    public static final int OPEN_READWRITE;
    private static final int OPEN_READ_MASK;
    public static final int SQLITE_MAX_LIKE_PATTERN_LENGTH;
    private static final java.lang.String TAG;
    private android.database.sqlite.SQLiteDatabase$CursorFactory mFactory;
    private int mFlags;
    private boolean mInnerTransactionIsSuccessful;
    private long mLastLockMessageTime;
    private final java.lang.RuntimeException mLeakedException;
    private final java.util.concurrent.locks.ReentrantLock mLock;
    private long mLockAcquiredThreadTime;
    private long mLockAcquiredWallTime;
    private boolean mLockingEnabled;
    final boolean mLogStats;
    int mNativeHandle;
    private java.lang.String mPath;
    private java.util.WeakHashMap mPrograms;
    private final java.util.Map mSyncUpdateInfo;
    int mTempTableSequence;
    private boolean mTransactionIsSuccessful;

    private void <init>(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r6, $r7;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r2;
        int $i0;
        java.util.concurrent.locks.ReentrantLock $r3;
        java.util.HashMap $r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        java.lang.IllegalStateException $r8;
        java.lang.StringBuilder $r9;
        java.util.WeakHashMap $r10;
        java.util.Locale $r11;
        java.lang.RuntimeException $r12;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $i0 := @parameter2: int;

        specialinvoke $r0.<android.database.sqlite.SQLiteClosable: void <init>()>();

        $r3 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1);

        $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock> = $r3;

        $r0.<android.database.sqlite.SQLiteDatabase: long mLockAcquiredWallTime> = 0L;

        $r0.<android.database.sqlite.SQLiteDatabase: long mLockAcquiredThreadTime> = 0L;

        $r0.<android.database.sqlite.SQLiteDatabase: long mLastLockMessageTime> = 0L;

        $r0.<android.database.sqlite.SQLiteDatabase: int mNativeHandle> = 0;

        $r0.<android.database.sqlite.SQLiteDatabase: int mTempTableSequence> = 0;

        $r0.<android.database.sqlite.SQLiteDatabase: boolean mLockingEnabled> = 1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r0.<android.database.sqlite.SQLiteDatabase: java.util.Map mSyncUpdateInfo> = $r4;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("path should not be null");

        throw $r5;

     label1:
        $r0.<android.database.sqlite.SQLiteDatabase: int mFlags> = $i0;

        $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath> = $r1;

        $r6 = "1";

        $r7 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("db.logstats");

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        $r0.<android.database.sqlite.SQLiteDatabase: boolean mLogStats> = $z0;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SQLiteDatabase created and never closed");

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r1);

        $r0.<android.database.sqlite.SQLiteDatabase: java.lang.RuntimeException mLeakedException> = $r8;

        $r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = $r2;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath>;

        $i0 = $r0.<android.database.sqlite.SQLiteDatabase: int mFlags>;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void dbopen(java.lang.String,int)>($r1, $i0);

        $r10 = new java.util.WeakHashMap;

        specialinvoke $r10.<java.util.WeakHashMap: void <init>()>();

        $r0.<android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap mPrograms> = $r10;

     label2:
        $r11 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>($r11);

     label3:
        return;

     label4:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Database", "Failed to setLocale() when constructing, closing the database", $r12);

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void dbclose()>();

        throw $r12;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    private void checkLockHoldTime()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        long $l0, $l2, $l4, $l5;
        int $i1;
        byte $b3;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l0 = $r0.<android.database.sqlite.SQLiteDatabase: long mLockAcquiredWallTime>;

        $l0 = $l2 - $l0;

        $b3 = $l0 cmp 2000L;

        if $b3 >= 0 goto label1;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Database", 2);

        if $z0 != 0 goto label1;

        $l4 = $r0.<android.database.sqlite.SQLiteDatabase: long mLastLockMessageTime>;

        $l4 = $l2 - $l4;

        $b3 = $l4 cmp 20000L;

        if $b3 >= 0 goto label1;

        return;

     label1:
        $b3 = $l0 cmp 300L;

        if $b3 <= 0 goto label3;

        $l4 = staticinvoke <android.os.Debug: long threadCpuTimeNanos()>();

        $l5 = $r0.<android.database.sqlite.SQLiteDatabase: long mLockAcquiredThreadTime>;

        $l4 = $l4 - $l5;

        $l4 = $l4 / 1000000L;

        $i1 = (int) $l4;

        if $i1 > 100 goto label2;

        $b3 = $l0 cmp 2000L;

        if $b3 <= 0 goto label4;

     label2:
        $r0.<android.database.sqlite.SQLiteDatabase: long mLastLockMessageTime> = $l2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("lock held on ");

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms. Thread time was ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Database", $r2);

        return;

     label3:
        return;

     label4:
        return;
    }

    private void closeClosable()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.util.WeakHashMap $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.util.Map$Entry $r5;
        android.database.sqlite.SQLiteClosable $r6;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap mPrograms>;

        $r2 = virtualinvoke $r1.<java.util.WeakHashMap: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (android.database.sqlite.SQLiteClosable) $r4;

        if $r6 == null goto label1;

        virtualinvoke $r6.<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>();

        goto label1;

     label2:
        return;
    }

    public static android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.database.sqlite.SQLiteDatabase$CursorFactory $r0;
        android.database.sqlite.SQLiteDatabase $r1;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r1 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>(":memory:", $r0, 268435456);

        return $r1;
    }

    private native void dbclose();

    private native void dbopen(java.lang.String, int);

    public static java.lang.String findEditTable(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        int $i0, $i1;
        java.lang.IllegalStateException $r1;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 != 0 goto label5;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(32);

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(44);

        if $i0 <= 0 goto label2;

        if $i0 < $i1 goto label1;

        if $i1 >= 0 goto label2;

     label1:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;

     label2:
        if $i1 <= 0 goto label4;

        if $i1 < $i0 goto label3;

        if $i0 >= 0 goto label4;

     label3:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r0;

     label4:
        return $r0;

     label5:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Invalid tables");

        throw $r1;
    }

    private void lockForced()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        return;
    }

    private void markTableSyncable(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r2, $r3, $r4, $r7;
        android.database.sqlite.SQLiteDatabase$SyncUpdateInfo $r5;
        java.lang.StringBuilder $r6;
        java.util.Map $r8, $r9;
        java.lang.Throwable $r10, $r11;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT _sync_dirty FROM ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT 0");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void native_execSQL(java.lang.String)>($r7);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" LIMIT 0");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void native_execSQL(java.lang.String)>($r7);

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        $r5 = new android.database.sqlite.SQLiteDatabase$SyncUpdateInfo;

        specialinvoke $r5.<android.database.sqlite.SQLiteDatabase$SyncUpdateInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r2);

        $r8 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.Map mSyncUpdateInfo>;

        entermonitor $r8;

     label3:
        $r9 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.Map mSyncUpdateInfo>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        exitmonitor $r8;

     label4:
        return;

     label5:
        $r10 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r10;

     label6:
        $r11 := @caughtexception;

     label7:
        exitmonitor $r8;

     label8:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory, int)
    {
        java.lang.String $r0, $r5;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r2;
        android.database.sqlite.SQLiteDatabaseCorruptException $r3;
        java.lang.StringBuilder $r4;
        java.io.File $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $i0 := @parameter2: int;

        $r2 = new android.database.sqlite.SQLiteDatabase;

     label1:
        specialinvoke $r2.<android.database.sqlite.SQLiteDatabase: void <init>(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>($r0, $r1, $i0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleting and re-creating corrupt database ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Database", $r5, $r3);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r0);

        virtualinvoke $r6.<java.io.File: boolean delete()>();

        $r2 = new android.database.sqlite.SQLiteDatabase;

        specialinvoke $r2.<android.database.sqlite.SQLiteDatabase: void <init>(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>($r0, $r1, $i0);

        return $r2;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label1 to label2 with label3;
    }

    public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        java.io.File $r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        java.lang.String $r2;
        android.database.sqlite.SQLiteDatabase $r3;

        $r0 := @parameter0: java.io.File;

        $r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        $r3 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r2, $r1);

        return $r3;
    }

    public static android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        java.lang.String $r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        android.database.sqlite.SQLiteDatabase $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>($r0, $r1, 268435456);

        return $r2;
    }

    public static native int releaseMemory();

    private void unlockForced()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;
    }

    private boolean yieldIfContendedHelper(boolean)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;
        int $i0;
        long $l1;
        java.lang.IllegalStateException $r2;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: int getQueueLength()>();

        if $i0 != 0 goto label1;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r0.<android.database.sqlite.SQLiteDatabase: long mLockAcquiredWallTime> = $l1;

        $l1 = staticinvoke <android.os.Debug: long threadCpuTimeNanos()>();

        $r0.<android.database.sqlite.SQLiteDatabase: long mLockAcquiredThreadTime> = $l1;

        return 0;

     label1:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>();

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Db locked more than once. yielfIfContended cannot yield");

        throw $r2;

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        return 1;
    }

    void addSQLiteClosable(android.database.sqlite.SQLiteClosable)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.database.sqlite.SQLiteClosable $r1;
        java.util.WeakHashMap $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.database.sqlite.SQLiteClosable;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap mPrograms>;

        virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, null);

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void beginTransaction()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.IllegalStateException $r1;
        int $i0;
        java.util.concurrent.locks.ReentrantLock $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lockForced()>();

     label1:
        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>();

        if $i0 <= 1 goto label4;

        $z0 = $r0.<android.database.sqlite.SQLiteDatabase: boolean mInnerTransactionIsSuccessful>;

        if $z0 == 0 goto label3;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot call beginTransaction between calling setTransactionSuccessful and endTransaction");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Database", "beginTransaction() failed", $r1);

        throw $r1;

     label2:
        $r3 := @caughtexception;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlockForced()>();

        throw $r3;

     label3:
        goto label6;

     label4:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("BEGIN EXCLUSIVE;");

        $r0.<android.database.sqlite.SQLiteDatabase: boolean mTransactionIsSuccessful> = 1;

        $r0.<android.database.sqlite.SQLiteDatabase: boolean mInnerTransactionIsSuccessful> = 0;

     label5:
        goto label7;

     label6:
        return;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public void close()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.Throwable $r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void closeClosable()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.database.sqlite.SQLiteStatement compileStatement(java.lang.String) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteStatement $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        $r2 = new android.database.sqlite.SQLiteStatement;

        specialinvoke $r2.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r0, $r1);

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int delete(java.lang.String, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r2;
        java.lang.String[] $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.IllegalStateException $r4;
        android.database.sqlite.SQLiteStatement $r5, $r8;
        java.lang.StringBuilder $r6, $r7;
        android.database.sqlite.SQLiteDatabaseCorruptException $r9;
        java.lang.Throwable $r10;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $z0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("database not open");

        throw $r4;

     label01:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

        $r5 = null;

     label02:
        $r6 = new java.lang.StringBuilder;

     label03:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

     label04:
        if $z0 != 0 goto label15;

     label05:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r1);

     label07:
        $r5 = $r8;

     label08:
        if $r3 == null goto label17;

     label09:
        $i0 = lengthof $r3;

     label10:
        $i1 = 0;

     label11:
        if $i1 >= $i0 goto label17;

     label12:
        $i2 = $i1 + 1;

     label13:
        $r1 = $r3[$i1];

        staticinvoke <android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>($r8, $i2, $r1);

     label14:
        $i1 = $i1 + 1;

        goto label11;

     label15:
        $r1 = "";

     label16:
        goto label06;

     label17:
        virtualinvoke $r8.<android.database.sqlite.SQLiteStatement: void execute()>();

        virtualinvoke $r8.<android.database.sqlite.SQLiteProgram: void close()>();

        $i0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int lastChangeCount()>();

     label18:
        if $r8 == null goto label19;

        virtualinvoke $r8.<android.database.sqlite.SQLiteProgram: void close()>();

     label19:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $i0;

     label20:
        $r9 := @caughtexception;

     label21:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        throw $r9;

     label22:
        $r10 := @caughtexception;

        if $r5 == null goto label23;

        virtualinvoke $r5.<android.database.sqlite.SQLiteProgram: void close()>();

     label23:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r10;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label03 to label04 with label20;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label05 to label07 with label20;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label08 to label09 with label20;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label11 to label12 with label20;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label13 to label14 with label20;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label16 to label18 with label20;
        catch java.lang.Throwable from label02 to label07 with label22;
        catch java.lang.Throwable from label08 to label10 with label22;
        catch java.lang.Throwable from label11 to label14 with label22;
        catch java.lang.Throwable from label16 to label18 with label22;
        catch java.lang.Throwable from label21 to label22 with label22;
    }

    public void endTransaction()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        int $i0;
        java.lang.Throwable $r3;
        android.database.SQLException $r4;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label01;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no transaction pending");

        throw $r2;

     label01:
        $z0 = $r0.<android.database.sqlite.SQLiteDatabase: boolean mInnerTransactionIsSuccessful>;

        if $z0 == 0 goto label04;

        $r0.<android.database.sqlite.SQLiteDatabase: boolean mInnerTransactionIsSuccessful> = 0;

     label02:
        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>();

     label03:
        if $i0 == 1 goto label07;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlockForced()>();

        return;

     label04:
        $r0.<android.database.sqlite.SQLiteDatabase: boolean mTransactionIsSuccessful> = 0;

     label05:
        goto label02;

     label06:
        $r3 := @caughtexception;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlockForced()>();

        throw $r3;

     label07:
        $z0 = $r0.<android.database.sqlite.SQLiteDatabase: boolean mTransactionIsSuccessful>;

        if $z0 == 0 goto label09;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("COMMIT;");

     label08:
        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlockForced()>();

        return;

     label09:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("ROLLBACK;");

     label10:
        goto label08;

     label11:
        $r4 := @caughtexception;

     label12:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Database", "exception during rollback, maybe the DB previously performed an auto-rollback");

     label13:
        goto label08;

        catch java.lang.Throwable from label01 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label06;
        catch android.database.SQLException from label09 to label10 with label11;
        catch java.lang.Throwable from label09 to label10 with label06;
        catch java.lang.Throwable from label12 to label13 with label06;
    }

    public void execSQL(java.lang.String) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabaseCorruptException $r2;
        boolean $z0;
        long $l0, $l1;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $z0 = $r0.<android.database.sqlite.SQLiteDatabase: boolean mLogStats>;

        if $z0 == 0 goto label4;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

     label1:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void native_execSQL(java.lang.String)>($r1);

     label3:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        if $z0 == 0 goto label8;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void logTimeStat(boolean,long,long)>(0, $l0, $l1);

        return;

     label4:
        $l0 = 0L;

        goto label1;

     label5:
        $r2 := @caughtexception;

     label6:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        throw $r2;

     label7:
        $r3 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r3;

     label8:
        return;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
    }

    public void execSQL(java.lang.String, java.lang.Object[]) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        java.lang.Object[] $r2;
        boolean $z0;
        int $i0, $i2, $i3;
        java.lang.IllegalArgumentException $r3;
        long $l1, $l4;
        android.database.sqlite.SQLiteStatement $r4, $r5;
        java.lang.Object $r6;
        android.database.sqlite.SQLiteDatabaseCorruptException $r7;
        java.lang.Throwable $r8;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object[];

        if $r2 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty bindArgs");

        throw $r3;

     label01:
        $z0 = $r0.<android.database.sqlite.SQLiteDatabase: boolean mLogStats>;

        if $z0 == 0 goto label12;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

     label02:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

        $r4 = null;

     label03:
        $r5 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r1);

     label04:
        $r4 = $r5;

     label05:
        if $r2 == null goto label13;

     label06:
        $i0 = lengthof $r2;

     label07:
        $i2 = 0;

     label08:
        if $i2 >= $i0 goto label13;

     label09:
        $i3 = $i2 + 1;

     label10:
        $r6 = $r2[$i2];

        staticinvoke <android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>($r5, $i3, $r6);

     label11:
        $i2 = $i2 + 1;

        goto label08;

     label12:
        $l1 = 0L;

        goto label02;

     label13:
        virtualinvoke $r5.<android.database.sqlite.SQLiteStatement: void execute()>();

     label14:
        if $r5 == null goto label15;

        virtualinvoke $r5.<android.database.sqlite.SQLiteProgram: void close()>();

     label15:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        if $z0 == 0 goto label20;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void logTimeStat(boolean,long,long)>(0, $l1, $l4);

        return;

     label16:
        $r7 := @caughtexception;

     label17:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        throw $r7;

     label18:
        $r8 := @caughtexception;

        if $r4 == null goto label19;

        virtualinvoke $r4.<android.database.sqlite.SQLiteProgram: void close()>();

     label19:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r8;

     label20:
        return;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label03 to label04 with label16;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label05 to label06 with label16;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label08 to label09 with label16;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label10 to label11 with label16;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label13 to label14 with label16;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label07 with label18;
        catch java.lang.Throwable from label08 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label17 to label18 with label18;
    }

    protected void finalize()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.IllegalStateException $r1;
        boolean $z0;
        java.util.WeakHashMap $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;
        int $i0;
        java.lang.String $r5;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 == 0 goto label3;

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap mPrograms>;

        $z0 = virtualinvoke $r2.<java.util.WeakHashMap: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r3 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.RuntimeException mLeakedException>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Database", "Leak found", $r3);

     label1:
        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void closeClosable()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()>();

        return;

     label2:
        $r1 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPrograms size ");

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap mPrograms>;

        $i0 = virtualinvoke $r2.<java.util.WeakHashMap: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.RuntimeException mLeakedException>;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Database", "Leak found", $r1);

        goto label1;

     label3:
        return;
    }

    public long getMaximumSize()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.database.sqlite.SQLiteStatement $r1, $r2;
        long $l0, $l1;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r2 = null;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        $r1 = new android.database.sqlite.SQLiteStatement;

        specialinvoke $r1.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r0, "PRAGMA max_page_count;");

     label2:
        $l0 = virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

        $l1 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long getPageSize()>();

     label3:
        $l0 = $l1 * $l0;

        if $r1 == null goto label4;

        virtualinvoke $r1.<android.database.sqlite.SQLiteProgram: void close()>();

     label4:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $l0;

     label5:
        $r3 := @caughtexception;

     label6:
        if $r2 == null goto label7;

        virtualinvoke $r2.<android.database.sqlite.SQLiteProgram: void close()>();

     label7:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r3;

     label8:
        $r3 := @caughtexception;

        $r2 = $r1;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label8;
    }

    public long getPageSize()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.database.sqlite.SQLiteStatement $r1, $r2;
        long $l0;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r2 = null;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        $r1 = new android.database.sqlite.SQLiteStatement;

        specialinvoke $r1.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r0, "PRAGMA page_size;");

     label2:
        $l0 = virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

     label3:
        if $r1 == null goto label4;

        virtualinvoke $r1.<android.database.sqlite.SQLiteProgram: void close()>();

     label4:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $l0;

     label5:
        $r3 := @caughtexception;

     label6:
        if $r2 == null goto label7;

        virtualinvoke $r2.<android.database.sqlite.SQLiteProgram: void close()>();

     label7:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r3;

     label8:
        $r3 := @caughtexception;

        $r2 = $r1;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label8;
    }

    public final java.lang.String getPath()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath>;

        return r1;
    }

    public java.util.Map getSyncedTables()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.util.HashMap $r1;
        java.util.Map $r2, $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.String $r7, $r9;
        android.database.sqlite.SQLiteDatabase$SyncUpdateInfo $r8;
        java.lang.Throwable $r10;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.Map mSyncUpdateInfo>;

        entermonitor $r2;

     label1:
        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r3 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.Map mSyncUpdateInfo>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        $r3 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.Map mSyncUpdateInfo>;

        $r6 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r8 = (android.database.sqlite.SQLiteDatabase$SyncUpdateInfo) $r6;

        $r9 = $r8.<android.database.sqlite.SQLiteDatabase$SyncUpdateInfo: java.lang.String deletedTable>;

        if $r9 == null goto label2;

        $r9 = $r8.<android.database.sqlite.SQLiteDatabase$SyncUpdateInfo: java.lang.String deletedTable>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r9);

        goto label2;

     label3:
        $r10 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r10;

     label5:
        exitmonitor $r2;

     label6:
        return $r1;

        catch java.lang.Throwable from label1 to label4 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public int getVersion()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.database.sqlite.SQLiteStatement $r1, $r2;
        long $l0;
        int $i1;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r2 = null;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        $r1 = new android.database.sqlite.SQLiteStatement;

        specialinvoke $r1.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r0, "PRAGMA user_version;");

     label2:
        $l0 = virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

     label3:
        $i1 = (int) $l0;

        if $r1 == null goto label4;

        virtualinvoke $r1.<android.database.sqlite.SQLiteProgram: void close()>();

     label4:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $i1;

     label5:
        $r3 := @caughtexception;

     label6:
        if $r2 == null goto label7;

        virtualinvoke $r2.<android.database.sqlite.SQLiteProgram: void close()>();

     label7:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r3;

     label8:
        $r3 := @caughtexception;

        $r2 = $r1;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label8;
    }

    public boolean inTransaction()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        int $i0;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: int getHoldCount()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public long insert(java.lang.String, java.lang.String, android.content.ContentValues)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        android.database.SQLException $r4;
        long $l0;
        java.lang.StringBuilder $r5;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

     label1:
        $l0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,android.database.sqlite.SQLiteDatabase$ConflictAlgorithm)>($r1, $r2, $r3, null);

     label2:
        return $l0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Database", $r1, $r4);

        return -1L;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    public long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        long $l0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

        $l0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,android.database.sqlite.SQLiteDatabase$ConflictAlgorithm)>($r1, $r2, $r3, null);

        return $l0;
    }

    public long insertWithOnConflict(java.lang.String, java.lang.String, android.content.ContentValues, android.database.sqlite.SQLiteDatabase$ConflictAlgorithm)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r6, $r8;
        android.content.ContentValues $r2;
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm $r3;
        java.lang.StringBuilder $r4, $r5, $r16;
        boolean $z0, $z1;
        java.lang.IllegalStateException $r7;
        java.util.Set $r9, $r10;
        int $i0, $i1, $i2;
        java.util.Iterator $r11;
        java.lang.Object $r12;
        java.util.Map$Entry $r13;
        android.database.sqlite.SQLiteStatement $r14, $r15;
        long $l3;
        byte $b4;
        android.database.sqlite.SQLiteDatabaseCorruptException $r17;
        java.lang.Throwable $r18;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r6 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.content.ContentValues;

        $r3 := @parameter3: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        $z0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("database not open");

        throw $r7;

     label01:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(152);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT");

        if $r3 == null goto label02;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" OR ");

        $r8 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: java.lang.String value()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label02:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTO ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(40);

        $r9 = null;

        if $r2 == null goto label15;

        $i0 = virtualinvoke $r2.<android.content.ContentValues: int size()>();

        if $i0 <= 0 goto label15;

        $r10 = virtualinvoke $r2.<android.content.ContentValues: java.util.Set valueSet()>();

        $r9 = $r10;

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $z0 = 0;

     label03:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        if $z0 == 0 goto label04;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label04:
        $z0 = 1;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.util.Map$Entry) $r12;

        $r12 = interfaceinvoke $r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r12;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63);

        goto label03;

     label05:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label06:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" VALUES(");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

        $r14 = null;

     label07:
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r6);

     label08:
        $r14 = $r15;

     label09:
        if $r9 == null goto label16;

        $i0 = interfaceinvoke $r9.<java.util.Set: int size()>();

        $r11 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $i1 = 0;

     label11:
        if $i1 >= $i0 goto label16;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

     label12:
        $r13 = (java.util.Map$Entry) $r12;

     label13:
        $i2 = $i1 + 1;

        $r12 = interfaceinvoke $r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>($r15, $i2, $r12);

     label14:
        $i1 = $i1 + 1;

        goto label11;

     label15:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ");

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NULL");

        goto label06;

     label16:
        virtualinvoke $r15.<android.database.sqlite.SQLiteStatement: void execute()>();

        $l3 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long lastInsertRow()>();

     label17:
        $b4 = $l3 cmp -1L;

     label18:
        if $b4 != 0 goto label21;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using ");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Database", $r6);

     label19:
        if $r15 == null goto label20;

        virtualinvoke $r15.<android.database.sqlite.SQLiteProgram: void close()>();

     label20:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $l3;

     label21:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Database", 2);

     label22:
        if $z0 == 0 goto label19;

     label23:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inserting row ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using ");

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Database", $r6);

     label24:
        goto label19;

     label25:
        $r17 := @caughtexception;

     label26:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        throw $r17;

     label27:
        $r18 := @caughtexception;

        if $r14 == null goto label28;

        virtualinvoke $r14.<android.database.sqlite.SQLiteProgram: void close()>();

     label28:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r18;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label07 to label08 with label25;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label09 to label10 with label25;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label11 to label12 with label25;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label13 to label14 with label25;
        catch java.lang.Throwable from label07 to label08 with label27;
        catch java.lang.Throwable from label09 to label10 with label27;
        catch java.lang.Throwable from label11 to label14 with label27;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label16 to label17 with label25;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label18 to label19 with label25;
        catch java.lang.Throwable from label16 to label17 with label27;
        catch java.lang.Throwable from label18 to label19 with label27;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label21 to label22 with label25;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label23 to label24 with label25;
        catch java.lang.Throwable from label21 to label24 with label27;
        catch java.lang.Throwable from label26 to label27 with label27;
    }

    public boolean isDbLockedByCurrentThread()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        return $z0;
    }

    public boolean isDbLockedByOtherThreads()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.util.concurrent.locks.ReentrantLock $r1;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label1;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean isLocked()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isOpen()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        int $i0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $i0 = $r0.<android.database.sqlite.SQLiteDatabase: int mNativeHandle>;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isReadOnly()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        int $i0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $i0 = $r0.<android.database.sqlite.SQLiteDatabase: int mFlags>;

        $i0 = $i0 & 1;

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    native int lastChangeCount();

    native long lastInsertRow();

    void lock()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = $r0.<android.database.sqlite.SQLiteDatabase: boolean mLockingEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        return;
    }

    void logTimeStat(boolean, long, long)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;
        long $l0, $l1;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        byte $b2;
        java.lang.Integer $r3;
        java.lang.Long $r4;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r1 = newarray (java.lang.Object)[3];

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath>;

        $r1[0] = $r2;

        if $z0 == 0 goto label2;

        $b2 = 0;

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($b2);

        $r1[1] = $r3;

        $l0 = $l1 - $l0;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r1[2] = $r4;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(52000, $r1);

        return;

     label2:
        $b2 = 1;

        goto label1;
    }

    public void markTableSyncable(java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r2;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, "_id", $r1, $r2);

        return;
    }

    public void markTableSyncable(java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r2, $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, null);

        return;
    }

    native void native_execSQL(java.lang.String) throws android.database.SQLException;

    native void native_setLocale(java.lang.String, int);

    public boolean needUpgrade(int)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        int $i0, $i1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter0: int;

        $i1 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if $i0 <= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void onAllReferencesReleased()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 == 0 goto label1;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: void dbclose()>();

        return;

     label1:
        return;
    }

    void onCorruption()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.io.File $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

     label1:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void close()>();

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing corrupt database: ");

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Database", $r2);

        $r3 = new java.io.File;

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath>;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r2);

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        return;

     label3:
        $r4 := @caughtexception;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing corrupt database: ");

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Database", $r2);

        $r3 = new java.io.File;

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.lang.String mPath>;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r2);

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r3, $r5, $r6, $r7;
        java.lang.String[] $r2, $r4;
        android.database.Cursor $r8;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, null);

        return $r8;
    }

    public android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r3, $r5, $r6, $r7, $r8;
        java.lang.String[] $r2, $r4;
        android.database.Cursor $r9;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.lang.String;

        $r8 := @parameter7: java.lang.String;

        $r9 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8);

        return $r9;
    }

    public android.database.Cursor query(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;
        java.lang.String $r1, $r3, $r5, $r6, $r7, $r8;
        java.lang.String[] $r2, $r4;
        android.database.Cursor $r9;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String[];

        $r5 := @parameter5: java.lang.String;

        $r6 := @parameter6: java.lang.String;

        $r7 := @parameter7: java.lang.String;

        $r8 := @parameter8: java.lang.String;

        $r9 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, $z0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8);

        return $r9;
    }

    public android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        boolean $z0;
        java.lang.String $r2, $r4, $r6, $r7, $r8, $r9;
        java.lang.String[] $r3, $r5;
        android.database.Cursor $r10;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $z0 := @parameter1: boolean;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String[];

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String[];

        $r6 := @parameter6: java.lang.String;

        $r7 := @parameter7: java.lang.String;

        $r8 := @parameter8: java.lang.String;

        $r9 := @parameter9: java.lang.String;

        $r4 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($z0, $r2, $r3, $r4, $r6, $r7, $r8, $r9);

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>($r2);

        $r10 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>($r1, $r4, $r5, $r2);

        return $r10;
    }

    public android.database.Cursor rawQuery(java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        android.database.Cursor $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>(null, $r1, $r2, null);

        return $r3;
    }

    public android.database.Cursor rawQuery(java.lang.String, java.lang.String[], int, int)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        int $i0, $i1;
        android.database.Cursor $r3;
        android.database.sqlite.SQLiteCursor $r4;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>(null, $r1, $r2, null);

        $r4 = (android.database.sqlite.SQLiteCursor) $r3;

        virtualinvoke $r4.<android.database.sqlite.SQLiteCursor: void setLoadStyle(int,int)>($i0, $i1);

        return $r4;
    }

    public android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory, java.lang.String, java.lang.String[], java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r1;
        java.lang.String $r2, $r4;
        java.lang.String[] $r3;
        android.database.sqlite.SQLiteDirectCursorDriver $r5;
        android.database.Cursor $r6;
        java.lang.Throwable $r7;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $r4 := @parameter3: java.lang.String;

        $r5 = new android.database.sqlite.SQLiteDirectCursorDriver;

        specialinvoke $r5.<android.database.sqlite.SQLiteDirectCursorDriver: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>($r0, $r2, $r4);

        if $r1 == null goto label3;

     label1:
        $r6 = interfaceinvoke $r5.<android.database.sqlite.SQLiteCursorDriver: android.database.Cursor query(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String[])>($r1, $r3);

     label2:
        return $r6;

     label3:
        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

     label4:
        goto label1;

     label5:
        $r7 := @caughtexception;

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    void removeSQLiteClosable(android.database.sqlite.SQLiteClosable)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.database.sqlite.SQLiteClosable $r1;
        java.util.WeakHashMap $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: android.database.sqlite.SQLiteClosable;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.WeakHashMap mPrograms>;

        virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>($r1);

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long replace(java.lang.String, java.lang.String, android.content.ContentValues)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm $r4;
        long $l0;
        android.database.SQLException $r5;
        java.lang.StringBuilder $r6;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

        $r4 = <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm REPLACE>;

     label1:
        $l0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,android.database.sqlite.SQLiteDatabase$ConflictAlgorithm)>($r1, $r2, $r3, $r4);

     label2:
        return $l0;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error inserting ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Database", $r1, $r5);

        return -1L;

        catch android.database.SQLException from label1 to label2 with label3;
    }

    public long replaceOrThrow(java.lang.String, java.lang.String, android.content.ContentValues) throws android.database.SQLException
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        long $l0;
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm $r4;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.ContentValues;

        $r4 = <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm REPLACE>;

        $l0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,android.database.sqlite.SQLiteDatabase$ConflictAlgorithm)>($r1, $r2, $r3, $r4);

        return $l0;
    }

    void rowUpdated(java.lang.String, long)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r7;
        long $l0;
        java.util.Map $r2, $r3;
        java.lang.Object $r4;
        android.database.sqlite.SQLiteDatabase$SyncUpdateInfo $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r8;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.Map mSyncUpdateInfo>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.Map mSyncUpdateInfo>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (android.database.sqlite.SQLiteDatabase$SyncUpdateInfo) $r4;

        exitmonitor $r2;

     label2:
        if $r5 == null goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r7 = $r5.<android.database.sqlite.SQLiteDatabase$SyncUpdateInfo: java.lang.String masterTable>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET _sync_dirty=1 WHERE _id=(SELECT ");

        $r7 = $r5.<android.database.sqlite.SQLiteDatabase$SyncUpdateInfo: java.lang.String foreignKey>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FROM ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE _id=");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r1);

        return;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor $r2;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setLocale(java.util.Locale)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.util.Locale $r1;
        int $i0;
        java.lang.String $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.util.Locale;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label1:
        $r2 = virtualinvoke $r1.<java.util.Locale: java.lang.String toString()>();

        $i0 = $r0.<android.database.sqlite.SQLiteDatabase: int mFlags>;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void native_setLocale(java.lang.String,int)>($r2, $i0);

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setLockingEnabled(boolean)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 := @parameter0: boolean;

        $r0.<android.database.sqlite.SQLiteDatabase: boolean mLockingEnabled> = $z0;

        return;
    }

    public long setMaximumSize(long)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        long $l0, $l1, $l2;
        android.database.sqlite.SQLiteStatement $r1, $r2;
        byte $b3;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $l0 := @parameter0: long;

        $r2 = null;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label01:
        $l1 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: long getPageSize()>();

        $l2 = $l0 / $l1;

        $l0 = $l0 % $l1;

     label02:
        $b3 = $l0 cmp 0L;

     label03:
        if $b3 == 0 goto label04;

        $l2 = $l2 + 1L;

     label04:
        $r1 = new android.database.sqlite.SQLiteStatement;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA max_page_count = ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<android.database.sqlite.SQLiteStatement: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r0, $r4);

     label05:
        $l0 = virtualinvoke $r1.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

     label06:
        $l0 = $l0 * $l1;

        if $r1 == null goto label07;

        virtualinvoke $r1.<android.database.sqlite.SQLiteProgram: void close()>();

     label07:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $l0;

     label08:
        $r5 := @caughtexception;

     label09:
        if $r2 == null goto label10;

        virtualinvoke $r2.<android.database.sqlite.SQLiteProgram: void close()>();

     label10:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r5;

     label11:
        $r5 := @caughtexception;

        $r2 = $r1;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label11;
    }

    public void setPageSize(long)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        long $l0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $l0 := @parameter0: long;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA page_size = ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        return;
    }

    public void setTransactionSuccessful()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;
        java.lang.IllegalStateException $r2;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: boolean isHeldByCurrentThread()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no transaction pending");

        throw $r2;

     label1:
        $z0 = $r0.<android.database.sqlite.SQLiteDatabase: boolean mInnerTransactionIsSuccessful>;

        if $z0 == 0 goto label2;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setTransactionSuccessful may only be called once per call to beginTransaction");

        throw $r2;

     label2:
        $r0.<android.database.sqlite.SQLiteDatabase: boolean mInnerTransactionIsSuccessful> = 1;

        return;
    }

    public void setVersion(int)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA user_version = ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        return;
    }

    void unlock()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = $r0.<android.database.sqlite.SQLiteDatabase: boolean mLockingEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = $r0.<android.database.sqlite.SQLiteDatabase: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;
    }

    public int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1, $r3;
        android.content.ContentValues $r2;
        java.lang.String[] $r4;
        int $i0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.ContentValues;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $i0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],android.database.sqlite.SQLiteDatabase$ConflictAlgorithm)>($r1, $r2, $r3, $r4, null);

        return $i0;
    }

    public int updateWithOnConflict(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[], android.database.sqlite.SQLiteDatabase$ConflictAlgorithm)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        android.content.ContentValues $r1;
        java.lang.String $r2, $r6, $r9;
        java.lang.String[] $r3;
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm $r4;
        java.lang.StringBuilder $r5, $r16;
        boolean $z0;
        java.lang.IllegalStateException $r7;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r8;
        java.util.Set $r10;
        java.util.Iterator $r11;
        java.lang.Object $r12;
        java.util.Map$Entry $r13;
        android.database.sqlite.SQLiteStatement $r14, $r15;
        android.database.sqlite.SQLiteDatabaseCorruptException $r17;
        java.lang.Throwable $r18;
        android.database.SQLException $r19;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $r6 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.content.ContentValues;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String[];

        $r4 := @parameter4: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        $z0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("database not open");

        throw $r7;

     label01:
        if $r1 == null goto label02;

        $i0 = virtualinvoke $r1.<android.content.ContentValues: int size()>();

        if $i0 != 0 goto label03;

     label02:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty values");

        throw $r8;

     label03:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(120);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        if $r4 == null goto label04;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" OR ");

        $r9 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: java.lang.String value()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label04:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ");

        $r10 = virtualinvoke $r1.<android.content.ContentValues: java.util.Set valueSet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.util.Map$Entry) $r12;

        $r12 = interfaceinvoke $r13.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r12;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        goto label05;

     label06:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label07;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label07:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void lock()>();

        $r14 = null;

     label08:
        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r6);

        $r14 = $r15;

        $i1 = interfaceinvoke $r10.<java.util.Set: int size()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $i0 = 1;

        $i2 = 0;

     label10:
        if $i2 >= $i1 goto label12;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.util.Map$Entry) $r12;

        $r12 = interfaceinvoke $r13.<java.util.Map$Entry: java.lang.Object getValue()>();

        staticinvoke <android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>($r15, $i0, $r12);

     label11:
        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label10;

     label12:
        if $r3 == null goto label17;

     label13:
        $i1 = lengthof $r3;

     label14:
        $i2 = 0;

     label15:
        if $i2 >= $i1 goto label17;

        $r6 = $r3[$i2];

        virtualinvoke $r15.<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>($i0, $r6);

     label16:
        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label15;

     label17:
        virtualinvoke $r15.<android.database.sqlite.SQLiteStatement: void execute()>();

        virtualinvoke $r15.<android.database.sqlite.SQLiteProgram: void close()>();

        $i0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int lastChangeCount()>();

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("Database", 2);

     label18:
        if $z0 == 0 goto label20;

     label19:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updated ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("Database", $r6);

     label20:
        if $r15 == null goto label21;

        virtualinvoke $r15.<android.database.sqlite.SQLiteProgram: void close()>();

     label21:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $i0;

     label22:
        $r17 := @caughtexception;

     label23:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        throw $r17;

     label24:
        $r18 := @caughtexception;

        if $r14 == null goto label25;

        virtualinvoke $r14.<android.database.sqlite.SQLiteProgram: void close()>();

     label25:
        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r18;

     label26:
        $r19 := @caughtexception;

     label27:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error updating ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using ");

        $r5 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Database", $r6);

        throw $r19;

     label28:
        nop;

        catch android.database.sqlite.SQLiteDatabaseCorruptException from label08 to label09 with label22;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label10 to label11 with label22;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label12 to label13 with label22;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label15 to label16 with label22;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label17 to label18 with label22;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label19 to label20 with label22;
        catch android.database.SQLException from label08 to label09 with label26;
        catch android.database.SQLException from label10 to label11 with label26;
        catch android.database.SQLException from label12 to label13 with label26;
        catch android.database.SQLException from label15 to label16 with label26;
        catch android.database.SQLException from label17 to label18 with label26;
        catch android.database.SQLException from label19 to label20 with label26;
        catch java.lang.Throwable from label08 to label09 with label24;
        catch java.lang.Throwable from label10 to label11 with label24;
        catch java.lang.Throwable from label12 to label14 with label24;
        catch java.lang.Throwable from label15 to label16 with label24;
        catch java.lang.Throwable from label17 to label20 with label24;
        catch java.lang.Throwable from label23 to label24 with label24;
        catch java.lang.Throwable from label27 to label28 with label24;
    }

    public boolean yieldIfContended()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean)>(0);

        return $z0;
    }

    public boolean yieldIfContendedSafely()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase;

        $z0 = specialinvoke $r0.<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean)>(1);

        return $z0;
    }

    public static void <clinit>()
    {
        <android.database.sqlite.SQLiteDatabase: java.lang.String TAG> = "Database";

        <android.database.sqlite.SQLiteDatabase: int SQLITE_MAX_LIKE_PATTERN_LENGTH> = 50000;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READ_MASK> = 1;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READWRITE> = 0;

        <android.database.sqlite.SQLiteDatabase: int OPEN_READONLY> = 1;

        <android.database.sqlite.SQLiteDatabase: int NO_LOCALIZED_COLLATORS> = 16;

        <android.database.sqlite.SQLiteDatabase: int LOCK_WARNING_WINDOW_IN_MS> = 20000;

        <android.database.sqlite.SQLiteDatabase: int LOCK_ACQUIRED_WARNING_TIME_IN_MS_ALWAYS_PRINT> = 2000;

        <android.database.sqlite.SQLiteDatabase: int LOCK_ACQUIRED_WARNING_TIME_IN_MS> = 300;

        <android.database.sqlite.SQLiteDatabase: int LOCK_ACQUIRED_WARNING_THREAD_TIME_IN_MS> = 100;

        <android.database.sqlite.SQLiteDatabase: int DB_OPERATION_EVENT> = 52000;

        <android.database.sqlite.SQLiteDatabase: int CREATE_IF_NECESSARY> = 268435456;

        return;
    }
}
