public final class dalvik.system.DexFile extends java.lang.Object
{
    private final int mCookie;
    private java.lang.String mFileName;

    public void <init>(java.io.File) throws java.io.IOException
    {
        dalvik.system.DexFile $r0;
        java.io.File $r1;
        java.lang.String $r2;

        $r0 := @this: dalvik.system.DexFile;

        $r1 := @parameter0: java.io.File;

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r0.<dalvik.system.DexFile: void <init>(java.lang.String)>($r2);

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        dalvik.system.DexFile $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;
        int $i0;

        $r0 := @this: dalvik.system.DexFile;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("android.vm.dexfile", "false");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 != 0 goto label1;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("No dex in this VM");

        throw $r3;

     label1:
        $i0 = staticinvoke <dalvik.system.DexFile: int openDexFile(java.lang.String,java.lang.String,int)>($r1, null, 0);

        $r0.<dalvik.system.DexFile: int mCookie> = $i0;

        $r0.<dalvik.system.DexFile: java.lang.String mFileName> = $r1;

        return;
    }

    private void <init>(java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        dalvik.system.DexFile $r0;
        java.lang.String $r1, $r2, $r3;
        int $i0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r4;

        $r0 := @this: dalvik.system.DexFile;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("android.vm.dexfile", "false");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 != 0 goto label1;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("No dex in this VM");

        throw $r4;

     label1:
        $i0 = staticinvoke <dalvik.system.DexFile: int openDexFile(java.lang.String,java.lang.String,int)>($r1, $r2, $i0);

        $r0.<dalvik.system.DexFile: int mCookie> = $i0;

        $r0.<dalvik.system.DexFile: java.lang.String mFileName> = $r1;

        return;
    }

    static int access$000(dalvik.system.DexFile)
    {
        dalvik.system.DexFile $r0;
        int i0;

        $r0 := @parameter0: dalvik.system.DexFile;

        i0 = $r0.<dalvik.system.DexFile: int mCookie>;

        return i0;
    }

    static java.lang.String[] access$100(int)
    {
        int $i0;
        java.lang.String[] $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.DexFile: java.lang.String[] getClassNameList(int)>($i0);

        return $r0;
    }

    private static native void closeDexFile(int);

    private static native java.lang.Class defineClass(java.lang.String, java.lang.ClassLoader, int, java.security.ProtectionDomain);

    private static native java.lang.String[] getClassNameList(int);

    public static native boolean isDexOptNeeded(java.lang.String) throws java.io.FileNotFoundException, java.io.IOException;

    public static dalvik.system.DexFile loadDex(java.lang.String, java.lang.String, int) throws java.io.IOException
    {
        java.lang.String $r0, $r1;
        int $i0;
        dalvik.system.DexFile $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 = new dalvik.system.DexFile;

        specialinvoke $r2.<dalvik.system.DexFile: void <init>(java.lang.String,java.lang.String,int)>($r0, $r1, $i0);

        return $r2;
    }

    private static native int openDexFile(java.lang.String, java.lang.String, int) throws java.io.IOException;

    public void close() throws java.io.IOException
    {
        dalvik.system.DexFile $r0;
        int $i0;

        $r0 := @this: dalvik.system.DexFile;

        $i0 = $r0.<dalvik.system.DexFile: int mCookie>;

        staticinvoke <dalvik.system.DexFile: void closeDexFile(int)>($i0);

        return;
    }

    public java.util.Enumeration entries()
    {
        dalvik.system.DexFile $r0;
        dalvik.system.DexFile$DFEnum $r1;

        $r0 := @this: dalvik.system.DexFile;

        $r1 = new dalvik.system.DexFile$DFEnum;

        specialinvoke $r1.<dalvik.system.DexFile$DFEnum: void <init>(dalvik.system.DexFile,dalvik.system.DexFile)>($r0, $r0);

        return $r1;
    }

    protected void finalize() throws java.io.IOException
    {
        dalvik.system.DexFile $r0;

        $r0 := @this: dalvik.system.DexFile;

        virtualinvoke $r0.<dalvik.system.DexFile: void close()>();

        return;
    }

    public java.lang.String getName()
    {
        dalvik.system.DexFile $r0;
        java.lang.String r1;

        $r0 := @this: dalvik.system.DexFile;

        r1 = $r0.<dalvik.system.DexFile: java.lang.String mFileName>;

        return r1;
    }

    public java.lang.Class loadClass(java.lang.String, java.lang.ClassLoader)
    {
        dalvik.system.DexFile $r0;
        java.lang.String $r1;
        java.lang.ClassLoader $r2;
        java.lang.Class $r3;
        int $i0;

        $r0 := @this: dalvik.system.DexFile;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.ClassLoader;

        $i0 = $r0.<dalvik.system.DexFile: int mCookie>;

        $r3 = staticinvoke <dalvik.system.DexFile: java.lang.Class defineClass(java.lang.String,java.lang.ClassLoader,int,java.security.ProtectionDomain)>($r1, $r2, $i0, null);

        return $r3;
    }
}
