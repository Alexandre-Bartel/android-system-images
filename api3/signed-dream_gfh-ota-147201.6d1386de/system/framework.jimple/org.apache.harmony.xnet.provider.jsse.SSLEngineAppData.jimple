public class org.apache.harmony.xnet.provider.jsse.SSLEngineAppData extends java.lang.Object implements org.apache.harmony.xnet.provider.jsse.Appendable
{
    byte[] buffer;

    protected void <init>()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineAppData $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineAppData;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void append(byte[])
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineAppData $r0;
        byte[] $r1, $r3;
        javax.net.ssl.SSLException $r2;
        org.apache.harmony.xnet.provider.jsse.AlertException $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineAppData;

        $r1 := @parameter0: byte[];

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: byte[] buffer>;

        if $r3 == null goto label1;

        $r4 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r2 = new javax.net.ssl.SSLException;

        specialinvoke $r2.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Attempt to override the data");

        specialinvoke $r4.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r2);

        throw $r4;

     label1:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: byte[] buffer> = $r1;

        return;
    }

    protected int placeTo(java.nio.ByteBuffer[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineAppData $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte[] $r2;
        java.nio.ByteBuffer $r3;
        org.apache.harmony.xnet.provider.jsse.AlertException $r4;
        javax.net.ssl.SSLException $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineAppData;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: byte[] buffer>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $i4 = 0;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: byte[] buffer>;

        $i2 = lengthof $r2;

        $i5 = $i0;

     label2:
        $i3 = $i0 + $i1;

        if $i5 >= $i3 goto label3;

        $r3 = $r1[$i5];

        $i3 = virtualinvoke $r3.<java.nio.Buffer: int remaining()>();

        $i6 = $i2 - $i4;

        if $i6 >= $i3 goto label4;

        $r3 = $r1[$i5];

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: byte[] buffer>;

        $i0 = $i2 - $i4;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r2, $i4, $i0);

        $i4 = $i2;

     label3:
        if $i4 == $i2 goto label5;

        $r4 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r5 = new javax.net.ssl.SSLException;

        specialinvoke $r5.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("The received application data could not be fully writteninto the destination buffers");

        specialinvoke $r4.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r5);

        throw $r4;

     label4:
        $r3 = $r1[$i5];

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: byte[] buffer>;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r2, $i4, $i3);

        $i4 = $i4 + $i3;

        $i5 = $i5 + 1;

        goto label2;

     label5:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: byte[] buffer> = null;

        return $i2;
    }
}
