public final class org.apache.http.conn.MultihomePlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.SocketFactory
{
    private static final org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY;

    static void <clinit>()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;

        $r0 = new org.apache.http.conn.MultihomePlainSocketFactory;

        specialinvoke $r0.<org.apache.http.conn.MultihomePlainSocketFactory: void <init>()>();

        <org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY> = $r0;

        return;
    }

    private void <init>()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;

        $r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.http.conn.MultihomePlainSocketFactory getSocketFactory()
    {
        org.apache.http.conn.MultihomePlainSocketFactory r0;

        r0 = <org.apache.http.conn.MultihomePlainSocketFactory: org.apache.http.conn.MultihomePlainSocketFactory DEFAULT_FACTORY>;

        return r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        java.net.InetAddress $r2;
        org.apache.http.params.HttpParams $r3;
        java.util.ArrayList $r4;
        java.net.InetSocketAddress $r5;
        java.net.Socket $r6;
        java.lang.IllegalArgumentException $r7;
        java.net.InetAddress[] $r8;
        java.util.List $r9;
        java.io.IOException $r10;
        java.util.Iterator $r11;
        boolean $z0;
        java.lang.Object $r12;
        java.net.SocketTimeoutException $r13;

        $r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r6 := @parameter0: java.net.Socket;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.net.InetAddress;

        $i1 := @parameter4: int;

        $r3 := @parameter5: org.apache.http.params.HttpParams;

        if $r1 != null goto label01;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r7;

     label01:
        if $r3 != null goto label02;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r7;

     label02:
        if $r6 != null goto label03;

        $r6 = virtualinvoke $r0.<org.apache.http.conn.MultihomePlainSocketFactory: java.net.Socket createSocket()>();

     label03:
        if $r2 != null goto label04;

        if $i1 <= 0 goto label06;

     label04:
        if $i1 >= 0 goto label05;

        $i1 = 0;

     label05:
        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i1);

        virtualinvoke $r6.<java.net.Socket: void bind(java.net.SocketAddress)>($r5);

     label06:
        $i1 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>($r3);

        $r8 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1);

        $r4 = new java.util.ArrayList;

        $i2 = lengthof $r8;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i2);

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        interfaceinvoke $r4.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        staticinvoke <java.util.Collections: void shuffle(java.util.List)>($r4);

        $r10 = null;

        $r11 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (java.net.InetAddress) $r12;

        $r5 = new java.net.InetSocketAddress;

     label08:
        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

        virtualinvoke $r6.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r5, $i1);

     label09:
        if $r10 == null goto label12;

        throw $r10;

     label10:
        $r13 := @caughtexception;

        throw $r13;

     label11:
        $r10 := @caughtexception;

        $r6 = new java.net.Socket;

        specialinvoke $r6.<java.net.Socket: void <init>()>();

        goto label07;

     label12:
        return $r6;

        catch java.net.SocketTimeoutException from label08 to label09 with label10;
        catch java.io.IOException from label08 to label09 with label11;
    }

    public java.net.Socket createSocket()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r1 = new java.net.Socket;

        specialinvoke $r1.<java.net.Socket: void <init>()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;
        java.lang.Object $r1;

        $r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;
        int $i0;
        java.lang.Class $r1;

        $r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r1 = class "org/apache/http/conn/scheme/PlainSocketFactory";

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.MultihomePlainSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Class $r3;
        boolean $z0;

        $r0 := @this: org.apache.http.conn.MultihomePlainSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r2;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == class "java/net/Socket" goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r2;

     label3:
        return 0;
    }
}
