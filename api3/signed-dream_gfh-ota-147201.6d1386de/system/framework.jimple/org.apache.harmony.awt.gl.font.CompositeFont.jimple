public class org.apache.harmony.awt.gl.font.CompositeFont extends org.apache.harmony.awt.gl.font.FontPeerImpl
{
    int cachedNumGlyphs;
    public org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts;
    java.lang.String face;
    java.lang.String family;
    java.lang.String[] fontNames;
    org.apache.harmony.awt.gl.font.FontProperty[] fontProperties;
    int missingGlyphCode;
    org.apache.harmony.awt.gl.font.LineMetricsImpl nlm;
    int numFonts;

    public void <init>(java.lang.String, java.lang.String, int, int, org.apache.harmony.awt.gl.font.FontProperty[], org.apache.harmony.awt.gl.font.FontPeerImpl[])
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        org.apache.harmony.awt.gl.font.FontProperty[] $r3;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r4;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 := @parameter4: org.apache.harmony.awt.gl.font.FontProperty[];

        $r4 := @parameter5: org.apache.harmony.awt.gl.font.FontPeerImpl[];

        specialinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int missingGlyphCode> = -1;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm> = null;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int cachedNumGlyphs> = -1;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int size> = $i1;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String name> = $r2;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: java.lang.String family> = $r1;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int style> = $i0;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: java.lang.String face> = $r2;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String psName> = $r2;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontProperty[] fontProperties> = $r3;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts> = $r4;

        $r4 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $i0 = lengthof $r4;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts> = $i0;

        specialinvoke $r0.<org.apache.harmony.awt.gl.font.CompositeFont: void setDefaultLineMetrics(java.lang.String,java.awt.font.FontRenderContext)>("", null);

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean uniformLM> = 0;

        return;
    }

    private void setDefaultLineMetrics(java.lang.String, java.awt.font.FontRenderContext)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        java.lang.String $r1;
        java.awt.font.FontRenderContext $r2;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r3;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r4;
        java.awt.font.LineMetrics $r5;
        java.awt.geom.Rectangle2D $r6;
        double $d0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        int $i0, $i1, $i2, $i3, $i5;
        org.apache.harmony.awt.gl.font.LineMetricsImpl $r7;
        float[] $r8, $r9;
        byte $b4;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.awt.font.FontRenderContext;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r4 = $r3[0];

        $r5 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.awt.font.LineMetrics getLineMetrics(java.lang.String,java.awt.font.FontRenderContext,java.awt.geom.AffineTransform)>($r1, $r2, null);

        $r3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r4 = $r3[0];

        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)>($r2);

        $d0 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getWidth()>();

        $f0 = (float) $d0;

        $i0 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts>;

        if $i0 != 1 goto label01;

        $r7 = (org.apache.harmony.awt.gl.font.LineMetricsImpl) $r5;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm> = $r7;

        return;

     label01:
        $r8 = virtualinvoke $r5.<java.awt.font.LineMetrics: float[] getBaselineOffsets()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r5.<java.awt.font.LineMetrics: int getBaselineIndex()>();

        $f1 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getUnderlineThickness()>();

        $f2 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getUnderlineOffset()>();

        $f3 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getStrikethroughThickness()>();

        $f4 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getStrikethroughOffset()>();

        $f5 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getLeading()>();

        virtualinvoke $r5.<java.awt.font.LineMetrics: float getHeight()>();

        $f6 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getAscent()>();

        $f7 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getDescent()>();

        $i2 = 1;

     label02:
        $i3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts>;

        if $i2 >= $i3 goto label14;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r4 = $r3[$i2];

        $r5 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.awt.font.LineMetrics getLineMetrics(java.lang.String,java.awt.font.FontRenderContext,java.awt.geom.AffineTransform)>($r1, $r2, null);

        $f8 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getUnderlineThickness()>();

        $b4 = $f1 cmpg $f8;

        if $b4 >= 0 goto label03;

        $f1 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getUnderlineThickness()>();

     label03:
        $f8 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getUnderlineOffset()>();

        $b4 = $f2 cmpg $f8;

        if $b4 >= 0 goto label04;

        $f2 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getUnderlineOffset()>();

     label04:
        $f8 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getStrikethroughThickness()>();

        $b4 = $f3 cmpg $f8;

        if $b4 >= 0 goto label05;

        $f3 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getStrikethroughThickness()>();

     label05:
        $f8 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getStrikethroughOffset()>();

        $b4 = $f4 cmpl $f8;

        if $b4 <= 0 goto label06;

        $f4 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getStrikethroughOffset()>();

     label06:
        $f8 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getLeading()>();

        $b4 = $f5 cmpg $f8;

        if $b4 >= 0 goto label07;

        $f5 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getLeading()>();

     label07:
        $f8 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getAscent()>();

        $b4 = $f6 cmpg $f8;

        if $b4 >= 0 goto label08;

        $f6 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getAscent()>();

     label08:
        $f8 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getDescent()>();

        $b4 = $f7 cmpg $f8;

        if $b4 >= 0 goto label09;

        $f7 = virtualinvoke $r5.<java.awt.font.LineMetrics: float getDescent()>();

     label09:
        $r3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r4 = $r3[$i2];

        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)>($r2);

        $d0 = virtualinvoke $r6.<java.awt.geom.RectangularShape: double getWidth()>();

        $f8 = (float) $d0;

        $b4 = $f0 cmpg $f8;

        if $b4 >= 0 goto label10;

        $f0 = $f8;

     label10:
        $i3 = 0;

     label11:
        $i5 = lengthof $r8;

        if $i3 >= $i5 goto label13;

        $r9 = virtualinvoke $r5.<java.awt.font.LineMetrics: float[] getBaselineOffsets()>();

        $f8 = $r8[$i3];

        $f9 = $r9[$i3];

        $b4 = $f8 cmpl $f9;

        if $b4 <= 0 goto label12;

        $f8 = $r9[$i3];

        $r8[$i3] = $f8;

     label12:
        $i3 = $i3 + 1;

        goto label11;

     label13:
        $i2 = $i2 + 1;

        goto label02;

     label14:
        $f8 = $f6 + $f7;

        $f8 = $f8 + $f5;

        $r7 = new org.apache.harmony.awt.gl.font.LineMetricsImpl;

        specialinvoke $r7.<org.apache.harmony.awt.gl.font.LineMetricsImpl: void <init>(int,int,float[],float,float,float,float,float,float,float,float,float)>($i0, $i1, $r8, $f1, $f2, $f3, $f4, $f5, $f8, $f6, $f7, $f0);

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm> = $r7;

        return;
    }

    public boolean canDisplay(char)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        char $c0;
        int $i1;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $c0 := @parameter0: char;

        $i1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int getCharFontIndex(char)>($c0);

        if $i1 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int charWidth(char)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        char $c0;
        org.apache.harmony.awt.gl.font.Glyph $r1;
        java.awt.font.GlyphMetrics $r2;
        float $f0;
        int $i1;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $c0 := @parameter0: char;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.Glyph getGlyph(char)>($c0);

        $r2 = virtualinvoke $r1.<org.apache.harmony.awt.gl.font.Glyph: java.awt.font.GlyphMetrics getGlyphPointMetrics()>();

        $f0 = virtualinvoke $r2.<java.awt.font.GlyphMetrics: float getAdvanceX()>();

        $i1 = (int) $f0;

        return $i1;
    }

    public int charWidth(int)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        int $i0;
        char $c1;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $i0 := @parameter0: int;

        $c1 = (char) $i0;

        $i0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int charWidth(char)>($c1);

        return $i0;
    }

    public void dispose()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        return;
    }

    public int getAscent()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        int $i0;
        org.apache.harmony.awt.gl.font.LineMetricsImpl $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.font.LineMetricsImpl: int getLogicalAscent()>();

        return $i0;
    }

    public int getCharFontIndex(char)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        char $c0;
        int $i1, $i2;
        org.apache.harmony.awt.gl.font.FontProperty[] $r1;
        org.apache.harmony.awt.gl.font.FontProperty $r2;
        boolean $z0;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r3;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r4;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $c0 := @parameter0: char;

        $i1 = 0;

     label1:
        $i2 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts>;

        if $i1 >= $i2 goto label4;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontProperty[] fontProperties>;

        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontProperty: boolean isCharExcluded(char)>($c0);

        if $z0 == 0 goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r4 = $r3[$i1];

        $z0 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean canDisplay(char)>($c0);

        if $z0 == 0 goto label2;

        return $i1;

     label4:
        return -1;
    }

    public int getCharFontIndex(char, int)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        char $c0;
        int $i1, $i2, $i3;
        org.apache.harmony.awt.gl.font.FontProperty[] $r1;
        org.apache.harmony.awt.gl.font.FontProperty $r2;
        boolean $z0;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r3;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r4;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $c0 := @parameter0: char;

        $i1 := @parameter1: int;

        $i2 = 0;

     label1:
        $i3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts>;

        if $i2 >= $i3 goto label4;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontProperty[] fontProperties>;

        $r2 = $r1[$i2];

        $z0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontProperty: boolean isCharExcluded(char)>($c0);

        if $z0 == 0 goto label3;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $r3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r4 = $r3[$i2];

        $z0 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean canDisplay(char)>($c0);

        if $z0 == 0 goto label2;

        return $i2;

     label4:
        return $i1;
    }

    public org.apache.harmony.awt.gl.font.Glyph getDefaultGlyph()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        org.apache.harmony.awt.gl.font.Glyph $r1;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r2;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r3 = $r2[0];

        $r1 = virtualinvoke $r3.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.Glyph getDefaultGlyph()>();

        return $r1;
    }

    public org.apache.harmony.awt.gl.font.FontExtraMetrics getExtraMetrics()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        org.apache.harmony.awt.gl.font.FontExtraMetrics $r1;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r2;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r3 = $r2[0];

        $r1 = virtualinvoke $r3.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.FontExtraMetrics getExtraMetrics()>();

        return $r1;
    }

    public java.lang.String getFamily()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: java.lang.String family>;

        return r1;
    }

    public java.lang.String getFontName()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: java.lang.String face>;

        return r1;
    }

    public org.apache.harmony.awt.gl.font.Glyph getGlyph(char)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        char $c0;
        int $i1, $i2;
        org.apache.harmony.awt.gl.font.FontProperty[] $r1;
        org.apache.harmony.awt.gl.font.FontProperty $r2;
        boolean $z0;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r3;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r4;
        org.apache.harmony.awt.gl.font.Glyph $r5;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $c0 := @parameter0: char;

        $i1 = 0;

     label1:
        $i2 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts>;

        if $i1 >= $i2 goto label5;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontProperty[] fontProperties>;

        $r2 = $r1[$i1];

        $z0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontProperty: boolean isCharExcluded(char)>($c0);

        if $z0 == 0 goto label3;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        if $c0 < 32 goto label4;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r4 = $r3[$i1];

        $z0 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean canDisplay(char)>($c0);

        if $z0 == 0 goto label2;

     label4:
        $r3 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r4 = $r3[$i1];

        $r5 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.Glyph getGlyph(char)>($c0);

        return $r5;

     label5:
        $r5 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.Glyph getDefaultGlyph()>();

        return $r5;
    }

    public float getItalicAngle()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        float $f0;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r1;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r2 = $r1[0];

        $f0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontPeerImpl: float getItalicAngle()>();

        return $f0;
    }

    public java.awt.font.LineMetrics getLineMetrics()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        org.apache.harmony.awt.gl.font.LineMetricsImpl $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        if $r1 != null goto label1;

        specialinvoke $r0.<org.apache.harmony.awt.gl.font.CompositeFont: void setDefaultLineMetrics(java.lang.String,java.awt.font.FontRenderContext)>("", null);

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        return $r1;
    }

    public java.awt.font.LineMetrics getLineMetrics(java.lang.String, java.awt.font.FontRenderContext, java.awt.geom.AffineTransform)
    {
        java.lang.String $r0;
        java.awt.font.FontRenderContext $r1;
        java.awt.geom.AffineTransform $r2;
        org.apache.harmony.awt.gl.font.CompositeFont $r3;
        org.apache.harmony.awt.gl.font.LineMetricsImpl $r4;
        java.lang.Object $r5;
        int $i0;
        boolean $z0;
        double $d0;
        float $f0, $f1;

        $r3 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.awt.font.FontRenderContext;

        $r2 := @parameter2: java.awt.geom.AffineTransform;

        $r4 = $r3.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.LineMetricsImpl: java.lang.Object clone()>();

        $r4 = (org.apache.harmony.awt.gl.font.LineMetricsImpl) $r5;

        $r4 = (org.apache.harmony.awt.gl.font.LineMetricsImpl) $r4;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        virtualinvoke $r4.<org.apache.harmony.awt.gl.font.LineMetricsImpl: void setNumChars(int)>($i0);

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label2;

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $f0 = (float) $d0;

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleY()>();

        $f1 = (float) $d0;

        virtualinvoke $r4.<org.apache.harmony.awt.gl.font.LineMetricsImpl: void scale(float,float)>($f0, $f1);

        return $r4;

     label1:
        return $r4;

     label2:
        return $r4;
    }

    public java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        java.awt.font.FontRenderContext $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r2;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r3;
        java.awt.geom.Rectangle2D $r4;
        double $d0;
        int $i0, $i1;
        byte $b2;
        java.awt.geom.Rectangle2D$Float $r5;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 := @parameter0: java.awt.font.FontRenderContext;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r3 = $r2[0];

        $r4 = virtualinvoke $r3.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)>($r1);

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getY()>();

        $f4 = (float) $d0;

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $f2 = (float) $d0;

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getHeight()>();

        $f5 = (float) $d0;

        $i0 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts>;

        if $i0 != 1 goto label1;

        return $r4;

     label1:
        $i0 = 1;

     label2:
        $i1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts>;

        if $i0 >= $i1 goto label6;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r3 = $r2[$i0];

        if $r3 == null goto label5;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r3 = $r2[$i0];

        $r4 = virtualinvoke $r3.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)>($r1);

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getY()>();

        $f3 = (float) $d0;

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getWidth()>();

        $f1 = (float) $d0;

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getHeight()>();

        $f0 = (float) $d0;

        $b2 = $f3 cmpg $f4;

        if $b2 >= 0 goto label3;

        $f4 = $f3;

     label3:
        $b2 = $f1 cmpl $f2;

        if $b2 <= 0 goto label4;

        $f5 = $f1;

     label4:
        $b2 = $f0 cmpl $f5;

        if $b2 <= 0 goto label5;

        $f5 = $f0;

     label5:
        $i0 = $i0 + 1;

        goto label2;

     label6:
        $r5 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r5.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(0.0F, $f4, $f2, $f5);

        return $r5;
    }

    public int getMissingGlyphCode()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        int $i0;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r1;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r2 = $r1[0];

        $i0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontPeerImpl: int getMissingGlyphCode()>();

        return $i0;
    }

    public int getNumGlyphs()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        int $i0, $i1, $i2;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r1;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $i1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int cachedNumGlyphs>;

        if $i1 != -1 goto label2;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int cachedNumGlyphs> = 0;

        $i1 = 0;

     label1:
        $i0 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int numFonts>;

        if $i1 >= $i0 goto label2;

        $i2 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int cachedNumGlyphs>;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontPeerImpl[] fPhysicalFonts>;

        $r2 = $r1[$i1];

        $i0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontPeerImpl: int getNumGlyphs()>();

        $i0 = $i2 + $i0;

        $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int cachedNumGlyphs> = $i0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i1 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int cachedNumGlyphs>;

        return $i1;
    }

    public java.lang.String getPSName()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String psName>;

        return r1;
    }

    public java.awt.geom.Rectangle2D getStringBounds(char[], int, int, java.awt.font.FontRenderContext)
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        char[] $r1;
        int $i0, $i1, $i3;
        java.awt.font.FontRenderContext $r2;
        float $f0, $f1, $f2, $f3;
        java.awt.geom.Rectangle2D$Float $r3;
        java.awt.font.LineMetrics $r4;
        char $c2;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.awt.font.FontRenderContext;

        $r4 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.CompositeFont: java.awt.font.LineMetrics getLineMetrics()>();

        $f0 = virtualinvoke $r4.<java.awt.font.LineMetrics: float getAscent()>();

        $f0 = neg $f0;

        $f1 = virtualinvoke $r4.<java.awt.font.LineMetrics: float getHeight()>();

        $f2 = 0.0F;

     label1:
        if $i0 >= $i1 goto label2;

        $c2 = $r1[$i0];

        $i3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.CompositeFont: int charWidth(char)>($c2);

        $f3 = (float) $i3;

        $f2 = $f2 + $f3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r3 = new java.awt.geom.Rectangle2D$Float;

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(0.0F, $f0, $f2, $f1);

        return $r3;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.awt.gl.font.CompositeFont $r0;
        java.lang.String $r1, $r4;
        java.lang.StringBuilder $r2;
        java.lang.Class $r3;
        int $i0;
        org.apache.harmony.awt.gl.font.FontProperty[] $r5;

        $r0 := @this: org.apache.harmony.awt.gl.font.CompositeFont;

        $r1 = new java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[name=");

        $r4 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String name>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",style=");

        $i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int style>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",fps=");

        $r5 = $r0.<org.apache.harmony.awt.gl.font.CompositeFont: org.apache.harmony.awt.gl.font.FontProperty[] fontProperties>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.String: void <init>(java.lang.String)>($r4);

        return $r1;
    }
}
