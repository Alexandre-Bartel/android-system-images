public class android.webkit.gears.UrlInterceptHandlerGears extends java.lang.Object implements android.webkit.UrlInterceptHandler
{
    private static final int BUFFER_SIZE;
    public static final int HEADERS_MAP_INDEX_KEY;
    public static final int HEADERS_MAP_INDEX_VALUE;
    private static final java.lang.String LOG_TAG;
    private static android.webkit.gears.UrlInterceptHandlerGears instance;
    private static boolean logEnabled;

    static void <clinit>()
    {
        <android.webkit.gears.UrlInterceptHandlerGears: java.lang.String LOG_TAG> = "Gears-J";

        <android.webkit.gears.UrlInterceptHandlerGears: int HEADERS_MAP_INDEX_VALUE> = 1;

        <android.webkit.gears.UrlInterceptHandlerGears: int HEADERS_MAP_INDEX_KEY> = 0;

        <android.webkit.gears.UrlInterceptHandlerGears: int BUFFER_SIZE> = 4096;

        <android.webkit.gears.UrlInterceptHandlerGears: boolean logEnabled> = 0;

        return;
    }

    public void <init>()
    {
        android.webkit.gears.UrlInterceptHandlerGears $r0, $r1;
        java.lang.RuntimeException $r2;

        $r0 := @this: android.webkit.gears.UrlInterceptHandlerGears;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = <android.webkit.gears.UrlInterceptHandlerGears: android.webkit.gears.UrlInterceptHandlerGears instance>;

        if $r1 == null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Gears-J", "UrlInterceptHandlerGears singleton already constructed");

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>()>();

        throw $r2;

     label1:
        <android.webkit.gears.UrlInterceptHandlerGears: android.webkit.gears.UrlInterceptHandlerGears instance> = $r0;

        return;
    }

    static void access$000(android.webkit.gears.UrlInterceptHandlerGears, java.lang.String)
    {
        android.webkit.gears.UrlInterceptHandlerGears $r0;
        java.lang.String $r1;

        $r0 := @parameter0: android.webkit.gears.UrlInterceptHandlerGears;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<android.webkit.gears.UrlInterceptHandlerGears: void log(java.lang.String)>($r1);

        return;
    }

    public static void enableLogging(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        <android.webkit.gears.UrlInterceptHandlerGears: boolean logEnabled> = $z0;

        return;
    }

    public static android.webkit.gears.UrlInterceptHandlerGears getInstance()
    {
        android.webkit.gears.UrlInterceptHandlerGears r0;

        r0 = <android.webkit.gears.UrlInterceptHandlerGears: android.webkit.gears.UrlInterceptHandlerGears instance>;

        return r0;
    }

    private void log(java.lang.String)
    {
        android.webkit.gears.UrlInterceptHandlerGears $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @this: android.webkit.gears.UrlInterceptHandlerGears;

        $r1 := @parameter0: java.lang.String;

        $z0 = <android.webkit.gears.UrlInterceptHandlerGears: boolean logEnabled>;

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Gears-J", $r1);

        return;

     label1:
        return;
    }

    private static native android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse nativeService(android.webkit.gears.UrlInterceptHandlerGears$ServiceRequest);

    public android.webkit.PluginData getPluginData(java.lang.String, java.util.Map)
    {
        android.webkit.gears.UrlInterceptHandlerGears $r0;
        java.lang.String $r1, $r9, $r10;
        java.util.Map $r2;
        java.util.HashMap $r3;
        java.lang.String[] $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.util.Map$Entry $r8;
        android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse $r11;
        android.webkit.PluginData $r12;
        java.io.InputStream $r13;
        long $l0;
        int $i1;

        $r0 := @this: android.webkit.gears.UrlInterceptHandlerGears;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Map;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r5 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.String) $r7;

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = $r9;

        $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r7;

        $r4[1] = $r10;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r4);

        goto label1;

     label2:
        $r11 = virtualinvoke $r0.<android.webkit.gears.UrlInterceptHandlerGears: android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse getServiceResponse(java.lang.String,java.util.Map)>($r1, $r3);

        if $r11 != null goto label3;

        return null;

     label3:
        $r12 = new android.webkit.PluginData;

        $r13 = virtualinvoke $r11.<android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse: java.io.InputStream getInputStream()>();

        $l0 = virtualinvoke $r11.<android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse: long getContentLength()>();

        $r2 = virtualinvoke $r11.<android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse: java.util.Map getResponseHeaders()>();

        $i1 = virtualinvoke $r11.<android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse: int getStatusCode()>();

        specialinvoke $r12.<android.webkit.PluginData: void <init>(java.io.InputStream,long,java.util.Map,int)>($r13, $l0, $r2, $i1);

        return $r12;
    }

    public android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse getServiceResponse(java.lang.String, java.util.Map)
    {
        android.webkit.gears.UrlInterceptHandlerGears $r0;
        java.lang.String $r1;
        java.util.Map $r2;
        boolean $z0;
        android.webkit.gears.UrlInterceptHandlerGears$ServiceRequest $r3;
        android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse $r4;

        $r0 := @this: android.webkit.gears.UrlInterceptHandlerGears;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Map;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("http://");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("https://");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = new android.webkit.gears.UrlInterceptHandlerGears$ServiceRequest;

        specialinvoke $r3.<android.webkit.gears.UrlInterceptHandlerGears$ServiceRequest: void <init>(java.lang.String,java.util.Map)>($r1, $r2);

        $r4 = staticinvoke <android.webkit.gears.UrlInterceptHandlerGears: android.webkit.gears.UrlInterceptHandlerGears$ServiceResponse nativeService(android.webkit.gears.UrlInterceptHandlerGears$ServiceRequest)>($r3);

        return $r4;
    }

    public void register()
    {
        android.webkit.gears.UrlInterceptHandlerGears $r0;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.gears.UrlInterceptHandlerGears;

        entermonitor $r0;

     label1:
        staticinvoke <android.webkit.UrlInterceptRegistry: boolean registerHandler(android.webkit.UrlInterceptHandler)>($r0);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.webkit.CacheManager$CacheResult service(java.lang.String, java.util.Map)
    {
        android.webkit.gears.UrlInterceptHandlerGears $r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.webkit.gears.UrlInterceptHandlerGears;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Map;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("unimplemented");

        throw $r3;
    }

    public void unregister()
    {
        android.webkit.gears.UrlInterceptHandlerGears $r0;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.gears.UrlInterceptHandlerGears;

        entermonitor $r0;

     label1:
        staticinvoke <android.webkit.UrlInterceptRegistry: boolean unregisterHandler(android.webkit.UrlInterceptHandler)>($r0);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
