public class android.webkit.WebView extends android.widget.AbsoluteLayout implements android.view.ViewGroup$OnHierarchyChangeListener, android.view.ViewTreeObserver$OnGlobalFocusChangeListener
{
    private static final boolean AUTO_REDRAW_HACK;
    static final boolean DEBUG;
    private static final float DEFAULT_MAX_ZOOM_SCALE;
    private static final float DEFAULT_MIN_ZOOM_SCALE;
    static final int DID_FIRST_LAYOUT_MSG_ID;
    private static final int EVENT_LOG_DOUBLE_TAP_DURATION;
    private static final int EVENT_LOG_ZOOM_LEVEL_CHANGE;
    private static final int FIND_HEIGHT;
    private static final int FIRST_SCROLL_ZOOM;
    static final java.lang.String[] HandlerDebugString;
    static final int INVAL_RECT_MSG_ID;
    private static final int LAST_SCROLL_ZOOM;
    static final java.lang.String LOGTAG;
    static final boolean LOGV_ENABLED;
    static final int LONG_PRESS_ENTER;
    private static final int LONG_PRESS_TIMEOUT;
    static final int MARK_NODE_INVALID_ID;
    private static final int MAX_DURATION;
    private static final float MAX_SLOPE_FOR_DIAG;
    private static final int MIN_BREAK_SNAP_CROSS_DISTANCE;
    private static final int MIN_FLING_TIME;
    private static final int NEVER_REMEMBER_PASSWORD;
    static final int NEW_PICTURE_MSG_ID;
    static final int NOTIFY_FOCUS_SET_MSG_ID;
    private static final int PAGE_SCROLL_OVERLAP;
    static final int PREVENT_TOUCH_ID;
    static final int RECOMPUTE_FOCUS_MSG_ID;
    private static final int REMEMBER_PASSWORD;
    private static final int RESUME_WEBCORE_UPDATE;
    public static final java.lang.String SCHEME_GEO;
    public static final java.lang.String SCHEME_MAILTO;
    public static final java.lang.String SCHEME_TEL;
    static final int SCROLL_BY_MSG_ID;
    static final int SCROLL_TO_MSG_ID;
    private static final int SCROLL_ZOOM_ANIMATION_IN;
    private static final int SCROLL_ZOOM_ANIMATION_OUT;
    private static final int SCROLL_ZOOM_DURATION;
    private static final int SCROLL_ZOOM_FINGER_BUFFER;
    private static final int SCROLL_ZOOM_GRID;
    private static final int SCROLL_ZOOM_OUT;
    private static final int SELECT_CURSOR_OFFSET;
    private static final int SNAP_NONE;
    private static final int SNAP_X;
    private static final int SNAP_X_LOCK;
    private static final int SNAP_Y;
    private static final int SNAP_Y_LOCK;
    static final int SPAWN_SCROLL_TO_MSG_ID;
    private static final int STD_SPEED;
    private static final int SWITCH_TO_ENTER;
    private static final int SWITCH_TO_LONGPRESS;
    private static final int SWITCH_TO_SHORTPRESS;
    static final int SYNC_SCROLL_TO_MSG_ID;
    private static final int TAP_TIMEOUT;
    private static final int TOUCH_DONE_MODE;
    private static final int TOUCH_DOUBLECLICK_MODE;
    private static final int TOUCH_DRAG_MODE;
    private static final int TOUCH_DRAG_START_MODE;
    private static final int TOUCH_INIT_MODE;
    private static final int TOUCH_SELECT_MODE;
    private static final int TOUCH_SENT_INTERVAL;
    private static final int TOUCH_SHORTPRESS_MODE;
    private static final int TOUCH_SHORTPRESS_START_MODE;
    private static final int TRACKBALL_KEY_TIMEOUT;
    private static final int TRACKBALL_MOVE_COUNT;
    private static final int TRACKBALL_MULTIPLIER;
    private static final int TRACKBALL_SCALE;
    private static final int TRACKBALL_SCROLL_COUNT;
    private static final int TRACKBALL_TIMEOUT;
    private static final int TRACKBALL_WAIT;
    static final int UPDATE_CLIPBOARD;
    static final int UPDATE_TEXTFIELD_TEXT_MSG_ID;
    private static final int UPDATE_TEXT_ENTRY_ADAPTER;
    static final int UPDATE_TEXT_ENTRY_MSG_ID;
    static final int WEBCORE_INITIALIZED_MSG_ID;
    static final int WEBCORE_NEED_TOUCH_EVENTS;
    private static final int ZOOM_ANIMATION_LENGTH;
    private static final long ZOOM_CONTROLS_TIMEOUT;
    static final int ZOOM_OUT_WIDTH;
    static boolean mLogEvent;
    private static android.webkit.PluginList sPluginList;
    private float mActualScale;
    private boolean mAutoRedraw;
    private int mBackgroundColor;
    private final android.webkit.CallbackProxy mCallbackProxy;
    private android.net.http.SslCertificate mCertificate;
    private int mContentHeight;
    private int mContentWidth;
    private final android.webkit.WebViewDatabase mDatabase;
    private boolean mDrawFocusRing;
    private boolean mDrawHistory;
    private boolean mExtendSelection;
    private boolean mFindIsUp;
    private android.webkit.WebViewCore$FocusData mFocusData;
    private android.webkit.WebView$FocusNode mFocusNode;
    private boolean mForwardTouchEvents;
    private boolean mGotEnterDown;
    private boolean mGotKeyDown;
    boolean mHeightCanMeasure;
    private int mHistoryHeight;
    private android.graphics.Picture mHistoryPicture;
    private int mHistoryWidth;
    private int mInitialScale;
    private float mInvActualScale;
    private float mInvFinalZoomScale;
    private float mInvInitialZoomScale;
    private android.graphics.Rect mLastFocusBounds;
    private long mLastFocusTime;
    private android.graphics.Rect mLastGlobalRect;
    int mLastHeightSent;
    private int mLastScrollX;
    private int mLastScrollY;
    private long mLastSentTouchTime;
    private long mLastTouchTime;
    private long mLastTouchUpTime;
    private float mLastTouchX;
    private float mLastTouchY;
    private android.graphics.Rect mLastVisibleRectSent;
    int mLastWidthSent;
    private float mLastZoomScrollRawX;
    private float mLastZoomScrollRawY;
    private boolean mMapTrackballToArrowKeys;
    private float mMaxZoomScale;
    private int mMinLockSnapReverseDistance;
    private float mMinZoomScale;
    private boolean mMinZoomScaleFixed;
    private int mNativeClass;
    private int mNavSlop;
    private boolean mNeedsUpdateTextEntry;
    private boolean mOverlayHorizontalScrollbar;
    private boolean mOverlayVerticalScrollbar;
    private android.webkit.WebView$PictureListener mPictureListener;
    private boolean mPreventDrag;
    private boolean mPreviewZoomOnly;
    final android.os.Handler mPrivateHandler;
    private android.widget.Scroller mScroller;
    private int mSelectX;
    private int mSelectY;
    private boolean mShiftIsPressed;
    private boolean mSnapPositive;
    private int mSnapScrollMode;
    private android.webkit.TextDialog mTextEntry;
    private int mTextGeneration;
    private int mTouchMode;
    private boolean mTouchSelection;
    private int mTouchSlopSquare;
    private boolean mTrackballDown;
    private long mTrackballFirstTime;
    private long mTrackballLastTime;
    private float mTrackballRemainsX;
    private float mTrackballRemainsY;
    private long mTrackballUpTime;
    private int mTrackballXMove;
    private int mTrackballYMove;
    private boolean mUserScroll;
    android.view.VelocityTracker mVelocityTracker;
    private android.webkit.WebViewCore mWebViewCore;
    boolean mWidthCanMeasure;
    private boolean mWrapContent;
    private android.widget.ZoomButtonsController mZoomButtonsController;
    private float mZoomCenterX;
    private float mZoomCenterY;
    private java.lang.Runnable mZoomControlRunnable;
    private android.webkit.WebView$ExtendedZoomControls mZoomControls;
    private android.widget.ImageView mZoomFitPageButton;
    private android.widget.ZoomButtonsController$OnZoomListener mZoomListener;
    private android.widget.ImageView mZoomOverviewButton;
    private float mZoomScale;
    private float mZoomScrollInvLimit;
    private float mZoomScrollLimit;
    private long mZoomScrollStart;
    private int mZoomScrollX;
    private int mZoomScrollY;
    private long mZoomStart;

    static void <clinit>()
    {
        long $l0;
        java.lang.String[] $r0;

        <android.webkit.WebView: int ZOOM_OUT_WIDTH> = 1008;

        <android.webkit.WebView: int ZOOM_ANIMATION_LENGTH> = 500;

        <android.webkit.WebView: int WEBCORE_NEED_TOUCH_EVENTS> = 25;

        <android.webkit.WebView: int WEBCORE_INITIALIZED_MSG_ID> = 16;

        <android.webkit.WebView: int UPDATE_TEXT_ENTRY_MSG_ID> = 15;

        <android.webkit.WebView: int UPDATE_TEXT_ENTRY_ADAPTER> = 6;

        <android.webkit.WebView: int UPDATE_TEXTFIELD_TEXT_MSG_ID> = 17;

        <android.webkit.WebView: int UPDATE_CLIPBOARD> = 22;

        <android.webkit.WebView: int TRACKBALL_WAIT> = 100;

        <android.webkit.WebView: int TRACKBALL_TIMEOUT> = 200;

        <android.webkit.WebView: int TRACKBALL_SCROLL_COUNT> = 5;

        <android.webkit.WebView: int TRACKBALL_SCALE> = 400;

        <android.webkit.WebView: int TRACKBALL_MULTIPLIER> = 3;

        <android.webkit.WebView: int TRACKBALL_MOVE_COUNT> = 10;

        <android.webkit.WebView: int TRACKBALL_KEY_TIMEOUT> = 1000;

        <android.webkit.WebView: int TOUCH_SHORTPRESS_START_MODE> = 4;

        <android.webkit.WebView: int TOUCH_SHORTPRESS_MODE> = 5;

        <android.webkit.WebView: int TOUCH_SENT_INTERVAL> = 100;

        <android.webkit.WebView: int TOUCH_SELECT_MODE> = 8;

        <android.webkit.WebView: int TOUCH_INIT_MODE> = 1;

        <android.webkit.WebView: int TOUCH_DRAG_START_MODE> = 2;

        <android.webkit.WebView: int TOUCH_DRAG_MODE> = 3;

        <android.webkit.WebView: int TOUCH_DOUBLECLICK_MODE> = 6;

        <android.webkit.WebView: int TOUCH_DONE_MODE> = 7;

        <android.webkit.WebView: int TAP_TIMEOUT> = 200;

        <android.webkit.WebView: int SYNC_SCROLL_TO_MSG_ID> = 13;

        <android.webkit.WebView: int SWITCH_TO_SHORTPRESS> = 3;

        <android.webkit.WebView: int SWITCH_TO_LONGPRESS> = 4;

        <android.webkit.WebView: int SWITCH_TO_ENTER> = 7;

        <android.webkit.WebView: int STD_SPEED> = 480;

        <android.webkit.WebView: int SPAWN_SCROLL_TO_MSG_ID> = 12;

        <android.webkit.WebView: int SNAP_Y_LOCK> = 5;

        <android.webkit.WebView: int SNAP_Y> = 3;

        <android.webkit.WebView: int SNAP_X_LOCK> = 4;

        <android.webkit.WebView: int SNAP_X> = 2;

        <android.webkit.WebView: int SNAP_NONE> = 1;

        <android.webkit.WebView: int SELECT_CURSOR_OFFSET> = 16;

        <android.webkit.WebView: int SCROLL_ZOOM_OUT> = 11;

        <android.webkit.WebView: int SCROLL_ZOOM_GRID> = 6;

        <android.webkit.WebView: int SCROLL_ZOOM_FINGER_BUFFER> = 32;

        <android.webkit.WebView: int SCROLL_ZOOM_DURATION> = 500;

        <android.webkit.WebView: int SCROLL_ZOOM_ANIMATION_OUT> = 10;

        <android.webkit.WebView: int SCROLL_ZOOM_ANIMATION_IN> = 9;

        <android.webkit.WebView: int SCROLL_TO_MSG_ID> = 10;

        <android.webkit.WebView: int SCROLL_BY_MSG_ID> = 11;

        <android.webkit.WebView: java.lang.String SCHEME_TEL> = "tel:";

        <android.webkit.WebView: java.lang.String SCHEME_MAILTO> = "mailto:";

        <android.webkit.WebView: java.lang.String SCHEME_GEO> = "geo:0,0?q=";

        <android.webkit.WebView: int RESUME_WEBCORE_UPDATE> = 8;

        <android.webkit.WebView: int REMEMBER_PASSWORD> = 1;

        <android.webkit.WebView: int RECOMPUTE_FOCUS_MSG_ID> = 19;

        <android.webkit.WebView: int PREVENT_TOUCH_ID> = 24;

        <android.webkit.WebView: int PAGE_SCROLL_OVERLAP> = 24;

        <android.webkit.WebView: int NOTIFY_FOCUS_SET_MSG_ID> = 20;

        <android.webkit.WebView: int NEW_PICTURE_MSG_ID> = 14;

        <android.webkit.WebView: int NEVER_REMEMBER_PASSWORD> = 2;

        <android.webkit.WebView: int MIN_FLING_TIME> = 250;

        <android.webkit.WebView: int MIN_BREAK_SNAP_CROSS_DISTANCE> = 80;

        <android.webkit.WebView: float MAX_SLOPE_FOR_DIAG> = 1.5F;

        <android.webkit.WebView: int MAX_DURATION> = 750;

        <android.webkit.WebView: int MARK_NODE_INVALID_ID> = 21;

        <android.webkit.WebView: int LONG_PRESS_TIMEOUT> = 1000;

        <android.webkit.WebView: int LONG_PRESS_ENTER> = 23;

        <android.webkit.WebView: boolean LOGV_ENABLED> = 0;

        <android.webkit.WebView: java.lang.String LOGTAG> = "webview";

        <android.webkit.WebView: int LAST_SCROLL_ZOOM> = 11;

        <android.webkit.WebView: int INVAL_RECT_MSG_ID> = 26;

        <android.webkit.WebView: int FIRST_SCROLL_ZOOM> = 9;

        <android.webkit.WebView: int FIND_HEIGHT> = 79;

        <android.webkit.WebView: int EVENT_LOG_ZOOM_LEVEL_CHANGE> = 70101;

        <android.webkit.WebView: int EVENT_LOG_DOUBLE_TAP_DURATION> = 70102;

        <android.webkit.WebView: int DID_FIRST_LAYOUT_MSG_ID> = 18;

        <android.webkit.WebView: float DEFAULT_MIN_ZOOM_SCALE> = 0.25F;

        <android.webkit.WebView: float DEFAULT_MAX_ZOOM_SCALE> = 4.0F;

        <android.webkit.WebView: boolean DEBUG> = 0;

        <android.webkit.WebView: boolean AUTO_REDRAW_HACK> = 0;

        $l0 = staticinvoke <android.view.ViewConfiguration: long getZoomControlsTimeout()>();

        <android.webkit.WebView: long ZOOM_CONTROLS_TIMEOUT> = $l0;

        $r0 = newarray (java.lang.String)[26];

        $r0[0] = "REMEMBER_PASSWORD";

        $r0[1] = "NEVER_REMEMBER_PASSWORD";

        $r0[2] = "SWITCH_TO_SHORTPRESS";

        $r0[3] = "SWITCH_TO_LONGPRESS";

        $r0[4] = "5";

        $r0[5] = "UPDATE_TEXT_ENTRY_ADAPTER";

        $r0[6] = "SWITCH_TO_ENTER";

        $r0[7] = "RESUME_WEBCORE_UPDATE";

        $r0[8] = "9";

        $r0[9] = "SCROLL_TO_MSG_ID";

        $r0[10] = "SCROLL_BY_MSG_ID";

        $r0[11] = "SPAWN_SCROLL_TO_MSG_ID";

        $r0[12] = "SYNC_SCROLL_TO_MSG_ID";

        $r0[13] = "NEW_PICTURE_MSG_ID";

        $r0[14] = "UPDATE_TEXT_ENTRY_MSG_ID";

        $r0[15] = "WEBCORE_INITIALIZED_MSG_ID";

        $r0[16] = "UPDATE_TEXTFIELD_TEXT_MSG_ID";

        $r0[17] = "DID_FIRST_LAYOUT_MSG_ID";

        $r0[18] = "RECOMPUTE_FOCUS_MSG_ID";

        $r0[19] = "NOTIFY_FOCUS_SET_MSG_ID";

        $r0[20] = "MARK_NODE_INVALID_ID";

        $r0[21] = "UPDATE_CLIPBOARD";

        $r0[22] = "LONG_PRESS_ENTER";

        $r0[23] = "PREVENT_TOUCH_ID";

        $r0[24] = "WEBCORE_NEED_TOUCH_EVENTS";

        $r0[25] = "INVAL_RECT_MSG_ID";

        <android.webkit.WebView: java.lang.String[] HandlerDebugString> = $r0;

        <android.webkit.WebView: boolean mLogEvent> = 1;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.webkit.WebView $r0;
        android.content.Context $r1;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet)>($r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.webkit.WebView $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke $r0.<android.webkit.WebView: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, 16842885);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.webkit.WebView $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;
        android.webkit.WebViewDatabase $r3;
        android.webkit.WebView$PrivateHandler $r4;
        android.webkit.WebView$1 $r5;
        android.webkit.WebView$FocusNode $r6;
        android.webkit.CallbackProxy $r7;
        android.webkit.WebViewCore $r8;
        android.webkit.WebViewCore$FocusData $r9;
        android.widget.Scroller $r10;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke $r0.<android.widget.AbsoluteLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        $r4 = new android.webkit.WebView$PrivateHandler;

        specialinvoke $r4.<android.webkit.WebView$PrivateHandler: void <init>(android.webkit.WebView)>($r0);

        $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler> = $r4;

        $r0.<android.webkit.WebView: int mTouchMode> = 7;

        $r0.<android.webkit.WebView: boolean mForwardTouchEvents> = 0;

        $r0.<android.webkit.WebView: boolean mNeedsUpdateTextEntry> = 0;

        $r0.<android.webkit.WebView: boolean mDrawFocusRing> = 1;

        $r0.<android.webkit.WebView: boolean mOverlayHorizontalScrollbar> = 1;

        $r0.<android.webkit.WebView: boolean mOverlayVerticalScrollbar> = 0;

        $r0.<android.webkit.WebView: float mMaxZoomScale> = 4.0F;

        $r0.<android.webkit.WebView: float mMinZoomScale> = 0.25F;

        $r0.<android.webkit.WebView: boolean mMinZoomScaleFixed> = 0;

        $r0.<android.webkit.WebView: int mInitialScale> = 0;

        $r0.<android.webkit.WebView: boolean mPreviewZoomOnly> = 0;

        $r0.<android.webkit.WebView: float mActualScale> = 1.0F;

        $r0.<android.webkit.WebView: float mInvActualScale> = 1.0F;

        $r0.<android.webkit.WebView: boolean mUserScroll> = 0;

        $r0.<android.webkit.WebView: int mSnapScrollMode> = 1;

        $r0.<android.webkit.WebView: long mLastTouchUpTime> = 0L;

        $r0.<android.webkit.WebView: int mBackgroundColor> = -1;

        $r5 = new android.webkit.WebView$1;

        specialinvoke $r5.<android.webkit.WebView$1: void <init>(android.webkit.WebView)>($r0);

        $r0.<android.webkit.WebView: android.widget.ZoomButtonsController$OnZoomListener mZoomListener> = $r5;

        $r0.<android.webkit.WebView: float mLastZoomScrollRawX> = -1000.0F;

        $r0.<android.webkit.WebView: float mLastZoomScrollRawY> = -1000.0F;

        $r0.<android.webkit.WebView: boolean mDrawHistory> = 0;

        $r0.<android.webkit.WebView: android.graphics.Picture mHistoryPicture> = null;

        $r0.<android.webkit.WebView: int mHistoryWidth> = 0;

        $r0.<android.webkit.WebView: int mHistoryHeight> = 0;

        $r6 = new android.webkit.WebView$FocusNode;

        specialinvoke $r6.<android.webkit.WebView$FocusNode: void <init>(android.webkit.WebView)>($r0);

        $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode> = $r6;

        $r0.<android.webkit.WebView: boolean mGotEnterDown> = 0;

        $r0.<android.webkit.WebView: long mTrackballFirstTime> = 0L;

        $r0.<android.webkit.WebView: long mTrackballLastTime> = 0L;

        $r0.<android.webkit.WebView: float mTrackballRemainsX> = 0.0F;

        $r0.<android.webkit.WebView: float mTrackballRemainsY> = 0.0F;

        $r0.<android.webkit.WebView: int mTrackballXMove> = 0;

        $r0.<android.webkit.WebView: int mTrackballYMove> = 0;

        $r0.<android.webkit.WebView: boolean mExtendSelection> = 0;

        $r0.<android.webkit.WebView: boolean mTouchSelection> = 0;

        $r0.<android.webkit.WebView: int mSelectX> = 0;

        $r0.<android.webkit.WebView: int mSelectY> = 0;

        $r0.<android.webkit.WebView: boolean mShiftIsPressed> = 0;

        $r0.<android.webkit.WebView: boolean mTrackballDown> = 0;

        $r0.<android.webkit.WebView: long mTrackballUpTime> = 0L;

        $r0.<android.webkit.WebView: long mLastFocusTime> = 0L;

        $r0.<android.webkit.WebView: boolean mMapTrackballToArrowKeys> = 1;

        specialinvoke $r0.<android.webkit.WebView: void init()>();

        $r7 = new android.webkit.CallbackProxy;

        specialinvoke $r7.<android.webkit.CallbackProxy: void <init>(android.content.Context,android.webkit.WebView)>($r1, $r0);

        $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy> = $r7;

        $r8 = new android.webkit.WebViewCore;

        $r7 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        specialinvoke $r8.<android.webkit.WebViewCore: void <init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy)>($r1, $r0, $r7);

        $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore> = $r8;

        $r3 = staticinvoke <android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)>($r1);

        $r0.<android.webkit.WebView: android.webkit.WebViewDatabase mDatabase> = $r3;

        $r9 = new android.webkit.WebViewCore$FocusData;

        specialinvoke $r9.<android.webkit.WebViewCore$FocusData: void <init>()>();

        $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData> = $r9;

        $r9 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r9.<android.webkit.WebViewCore$FocusData: int mFrame> = 0;

        $r9 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r9.<android.webkit.WebViewCore$FocusData: int mNode> = 0;

        $r9 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r9.<android.webkit.WebViewCore$FocusData: int mX> = 0;

        $r9 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r9.<android.webkit.WebViewCore$FocusData: int mY> = 0;

        $r10 = new android.widget.Scroller;

        specialinvoke $r10.<android.widget.Scroller: void <init>(android.content.Context)>($r1);

        $r0.<android.webkit.WebView: android.widget.Scroller mScroller> = $r10;

        specialinvoke $r0.<android.webkit.WebView: void initZoomController(android.content.Context)>($r1);

        return;
    }

    static void access$000(android.webkit.WebView)
    {
        android.webkit.WebView $r0;

        $r0 := @parameter0: android.webkit.WebView;

        specialinvoke $r0.<android.webkit.WebView: void updateZoomButtonsEnabled()>();

        return;
    }

    static android.widget.ZoomButtonsController access$100(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.widget.ZoomButtonsController r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        return r1;
    }

    static android.webkit.WebView$ExtendedZoomControls access$1000(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.webkit.WebView$ExtendedZoomControls r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        return r1;
    }

    static java.lang.Runnable access$1100(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        java.lang.Runnable r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: java.lang.Runnable mZoomControlRunnable>;

        return r1;
    }

    static long access$1200()
    {
        long l0;

        l0 = <android.webkit.WebView: long ZOOM_CONTROLS_TIMEOUT>;

        return l0;
    }

    static int access$1300(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        int i0;

        $r0 := @parameter0: android.webkit.WebView;

        i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        return i0;
    }

    static int access$1302(android.webkit.WebView, int)
    {
        android.webkit.WebView $r0;
        int $i0;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 := @parameter1: int;

        $r0.<android.webkit.WebView: int mTouchMode> = $i0;

        return $i0;
    }

    static void access$1400(android.webkit.WebView)
    {
        android.webkit.WebView $r0;

        $r0 := @parameter0: android.webkit.WebView;

        specialinvoke $r0.<android.webkit.WebView: void updateSelection()>();

        return;
    }

    static void access$1500(android.webkit.WebView)
    {
        android.webkit.WebView $r0;

        $r0 := @parameter0: android.webkit.WebView;

        specialinvoke $r0.<android.webkit.WebView: void updateTextEntry()>();

        return;
    }

    static void access$1600(android.webkit.WebView, int, int, boolean)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        specialinvoke $r0.<android.webkit.WebView: void setContentScrollBy(int,int,boolean)>($i0, $i1, $z0);

        return;
    }

    static boolean access$1700(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        boolean z0;

        $r0 := @parameter0: android.webkit.WebView;

        z0 = $r0.<android.webkit.WebView: boolean mUserScroll>;

        return z0;
    }

    static boolean access$1702(android.webkit.WebView, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 := @parameter1: boolean;

        $r0.<android.webkit.WebView: boolean mUserScroll> = $z0;

        return $z0;
    }

    static boolean access$1800(android.webkit.WebView, int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean setContentScrollTo(int,int)>($i0, $i1);

        return $z0;
    }

    static android.webkit.WebViewCore access$1900(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        return r1;
    }

    static void access$200(android.webkit.WebView)
    {
        android.webkit.WebView $r0;

        $r0 := @parameter0: android.webkit.WebView;

        specialinvoke $r0.<android.webkit.WebView: void zoomScrollOut()>();

        return;
    }

    static void access$2000(android.webkit.WebView, int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<android.webkit.WebView: void spawnContentScrollTo(int,int)>($i0, $i1);

        return;
    }

    static float access$2100(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        float f0;

        $r0 := @parameter0: android.webkit.WebView;

        f0 = $r0.<android.webkit.WebView: float mZoomScale>;

        return f0;
    }

    static float access$2102(android.webkit.WebView, float)
    {
        android.webkit.WebView $r0;
        float $f0;

        $r0 := @parameter0: android.webkit.WebView;

        $f0 := @parameter1: float;

        $r0.<android.webkit.WebView: float mZoomScale> = $f0;

        return $f0;
    }

    static int access$2200(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        int $i0;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        return $i0;
    }

    static boolean access$2300(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        boolean z0;

        $r0 := @parameter0: android.webkit.WebView;

        z0 = $r0.<android.webkit.WebView: boolean mMinZoomScaleFixed>;

        return z0;
    }

    static boolean access$2302(android.webkit.WebView, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 := @parameter1: boolean;

        $r0.<android.webkit.WebView: boolean mMinZoomScaleFixed> = $z0;

        return $z0;
    }

    static float access$2402(android.webkit.WebView, float)
    {
        android.webkit.WebView $r0;
        float $f0;

        $r0 := @parameter0: android.webkit.WebView;

        $f0 := @parameter1: float;

        $r0.<android.webkit.WebView: float mMinZoomScale> = $f0;

        return $f0;
    }

    static void access$2500(android.webkit.WebView, int, int, boolean)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        specialinvoke $r0.<android.webkit.WebView: void recordNewContentSize(int,int,boolean)>($i0, $i1, $z0);

        return;
    }

    static android.graphics.Rect access$2600(android.webkit.WebView, android.graphics.Rect)
    {
        android.webkit.WebView $r0;
        android.graphics.Rect $r1;

        $r0 := @parameter0: android.webkit.WebView;

        $r1 := @parameter1: android.graphics.Rect;

        $r1 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect contentToView(android.graphics.Rect)>($r1);

        return $r1;
    }

    static android.webkit.WebView$PictureListener access$2700(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.webkit.WebView$PictureListener r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.webkit.WebView$PictureListener mPictureListener>;

        return r1;
    }

    static void access$2800(android.webkit.WebView, int)
    {
        android.webkit.WebView $r0;
        int $i0;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 := @parameter1: int;

        specialinvoke $r0.<android.webkit.WebView: void nativeCreate(int)>($i0);

        return;
    }

    static boolean access$2900(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        return $z0;
    }

    static android.content.Context access$300(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.view.View: android.content.Context mContext>;

        return r1;
    }

    static android.webkit.TextDialog access$3000(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.webkit.TextDialog r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        return r1;
    }

    static int access$3100(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        int i0;

        $r0 := @parameter0: android.webkit.WebView;

        i0 = $r0.<android.webkit.WebView: int mTextGeneration>;

        return i0;
    }

    static int access$3200(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        int i0;

        $r0 := @parameter0: android.webkit.WebView;

        i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        return i0;
    }

    static float access$3302(android.webkit.WebView, float)
    {
        android.webkit.WebView $r0;
        float $f0;

        $r0 := @parameter0: android.webkit.WebView;

        $f0 := @parameter1: float;

        $r0.<android.webkit.WebView: float mMaxZoomScale> = $f0;

        return $f0;
    }

    static boolean access$3400(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        boolean z0;

        $r0 := @parameter0: android.webkit.WebView;

        z0 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        return z0;
    }

    static int access$3500(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        int i0;

        $r0 := @parameter0: android.webkit.WebView;

        i0 = $r0.<android.webkit.WebView: int mInitialScale>;

        return i0;
    }

    static void access$3600(android.webkit.WebView, float, boolean)
    {
        android.webkit.WebView $r0;
        float $f0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $f0 := @parameter1: float;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<android.webkit.WebView: void setNewZoomScale(float,boolean)>($f0, $z0);

        return;
    }

    static void access$3700(android.webkit.WebView, int)
    {
        android.webkit.WebView $r0;
        int $i0;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 := @parameter1: int;

        specialinvoke $r0.<android.webkit.WebView: void nativeMarkNodeInvalid(int)>($i0);

        return;
    }

    static void access$3800(android.webkit.WebView, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<android.webkit.WebView: void nativeNotifyFocusSet(boolean)>($z0);

        return;
    }

    static boolean access$3900(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        return $z0;
    }

    static boolean access$400(android.webkit.WebView, float)
    {
        android.webkit.WebView $r0;
        float $f0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $f0 := @parameter1: float;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean zoomWithPreview(float)>($f0);

        return $z0;
    }

    static android.webkit.WebView$FocusNode access$4000(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.webkit.WebView$FocusNode r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        return r1;
    }

    static void access$4100(android.webkit.WebView)
    {
        android.webkit.WebView $r0;

        $r0 := @parameter0: android.webkit.WebView;

        specialinvoke $r0.<android.webkit.WebView: void nativeRecomputeFocus()>();

        return;
    }

    static void access$4200(android.webkit.WebView, int, int, int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: android.webkit.WebView;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        specialinvoke $r0.<android.webkit.WebView: void viewInvalidate(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    static boolean access$4302(android.webkit.WebView, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 := @parameter1: boolean;

        $r0.<android.webkit.WebView: boolean mGotEnterDown> = $z0;

        return $z0;
    }

    static boolean access$4402(android.webkit.WebView, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 := @parameter1: boolean;

        $r0.<android.webkit.WebView: boolean mTrackballDown> = $z0;

        return $z0;
    }

    static boolean access$4502(android.webkit.WebView, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 := @parameter1: boolean;

        $r0.<android.webkit.WebView: boolean mForwardTouchEvents> = $z0;

        return $z0;
    }

    static boolean access$4600(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        boolean z0;

        $r0 := @parameter0: android.webkit.WebView;

        z0 = $r0.<android.webkit.WebView: boolean mPreventDrag>;

        return z0;
    }

    static boolean access$4602(android.webkit.WebView, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebView;

        $z0 := @parameter1: boolean;

        $r0.<android.webkit.WebView: boolean mPreventDrag> = $z0;

        return $z0;
    }

    static android.content.Context access$4800(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.view.View: android.content.Context mContext>;

        return r1;
    }

    static android.content.Context access$4900(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.view.View: android.content.Context mContext>;

        return r1;
    }

    static android.content.Context access$5000(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.view.View: android.content.Context mContext>;

        return r1;
    }

    static android.webkit.WebViewDatabase access$800(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewDatabase r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.webkit.WebViewDatabase mDatabase>;

        return r1;
    }

    static android.content.Context access$900(android.webkit.WebView)
    {
        android.webkit.WebView $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.webkit.WebView;

        r1 = $r0.<android.view.View: android.content.Context mContext>;

        return r1;
    }

    private void calcOurContentVisibleRect(android.graphics.Rect)
    {
        android.webkit.WebView $r0;
        android.graphics.Rect $r1;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.graphics.Rect;

        specialinvoke $r0.<android.webkit.WebView: void calcOurVisibleRect(android.graphics.Rect)>($r1);

        $i0 = $r1.<android.graphics.Rect: int left>;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $r1.<android.graphics.Rect: int left> = $i0;

        $i0 = $r1.<android.graphics.Rect: int top>;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $r1.<android.graphics.Rect: int top> = $i0;

        $i0 = $r1.<android.graphics.Rect: int right>;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $r1.<android.graphics.Rect: int right> = $i0;

        $i0 = $r1.<android.graphics.Rect: int bottom>;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $r1.<android.graphics.Rect: int bottom> = $i0;

        return;
    }

    private void calcOurVisibleRect(android.graphics.Rect)
    {
        android.webkit.WebView $r0;
        android.graphics.Rect $r1;
        android.graphics.Point $r2;
        int $i0, $i1;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>()>();

        virtualinvoke $r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>($r1, $r2);

        $i0 = $r2.<android.graphics.Point: int x>;

        $i0 = neg $i0;

        $i1 = $r2.<android.graphics.Point: int y>;

        $i1 = neg $i1;

        virtualinvoke $r1.<android.graphics.Rect: void offset(int,int)>($i0, $i1);

        return;
    }

    private boolean canZoomScrollOut()
    {
        android.webkit.WebView $r0;
        float $f0, $f1, $f2;
        int $i0, $i1, $i2;
        byte $b3;

        $r0 := @this: android.webkit.WebView;

        $i0 = $r0.<android.webkit.WebView: int mContentWidth>;

        if $i0 == 0 goto label1;

        $i0 = $r0.<android.webkit.WebView: int mContentHeight>;

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i1 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $f0 = (float) $i1;

        $i2 = $r0.<android.webkit.WebView: int mContentWidth>;

        $f1 = (float) $i2;

        $f0 = $f0 / $f1;

        $f1 = (float) $i0;

        $i2 = $r0.<android.webkit.WebView: int mContentHeight>;

        $f2 = (float) $i2;

        $f1 = $f1 / $f2;

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>($f0, $f1);

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>(0.25F, $f0);

        $r0.<android.webkit.WebView: float mZoomScrollLimit> = $f0;

        $f0 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f0 = 1.0F / $f0;

        $r0.<android.webkit.WebView: float mZoomScrollInvLimit> = $f0;

        $f0 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f0 = $f0 * 2.0F;

        $i2 = $r0.<android.webkit.WebView: int mContentWidth>;

        $f1 = (float) $i2;

        $f2 = (float) $i1;

        $f2 = $f2 * $f0;

        $b3 = $f1 cmpl $f2;

        if $b3 >= 0 goto label3;

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        $f1 = (float) $i1;

        $f2 = (float) $i0;

        $f0 = $f2 * $f0;

        $b3 = $f1 cmpl $f0;

        if $b3 < 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    private void clearTextEntry()
    {
        android.webkit.WebView $r0;
        boolean $z0;
        android.webkit.TextDialog $r1;

        $r0 := @this: android.webkit.WebView;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r1.<android.webkit.TextDialog: void remove()>();

        return;

     label1:
        return;
    }

    private boolean commitCopy()
    {
        android.webkit.WebView $r0;
        android.graphics.Region $r1, $r2;
        boolean $z0, $z1;
        android.content.Context $r3;
        android.widget.Toast $r4;
        android.webkit.WebViewCore $r5;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $z0 = 0;

        $z1 = $r0.<android.webkit.WebView: boolean mExtendSelection>;

        if $z1 == 0 goto label2;

        $r1 = new android.graphics.Region;

        $r2 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Region nativeGetSelection()>();

        specialinvoke $r1.<android.graphics.Region: void <init>(android.graphics.Region)>($r2);

        $z1 = virtualinvoke $r1.<android.graphics.Region: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $r3 = $r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.widget.Toast: android.widget.Toast makeText(android.content.Context,int,int)>($r3, 17039763, 0);

        virtualinvoke $r4.<android.widget.Toast: void show()>();

        $r5 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r5.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(129, $r1);

        $z0 = 1;

     label1:
        $r0.<android.webkit.WebView: boolean mExtendSelection> = 0;

     label2:
        $r0.<android.webkit.WebView: boolean mShiftIsPressed> = 0;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 != 8 goto label3;

        $r0.<android.webkit.WebView: int mTouchMode> = 1;

        return $z0;

     label3:
        return $z0;
    }

    private static int computeDuration(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        $i0 = $i0 * 1000;

        $i0 = $i0 / 480;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, 750);

        return $i0;
    }

    private void contentSizeChanged(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0, $z1;
        int $i0, $i1;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $i0 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i0 = $i0 | $i1;

        if $i0 != 0 goto label1;

        return;

     label1:
        $z1 = $r0.<android.webkit.WebView: boolean mHeightCanMeasure>;

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke $r0.<android.view.View: int getMeasuredHeight()>();

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        if $i0 == $i1 goto label4;

        if $z0 == 0 goto label5;

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        return;

     label2:
        $z1 = $r0.<android.webkit.WebView: boolean mWidthCanMeasure>;

        if $z1 == 0 goto label3;

        $i0 = virtualinvoke $r0.<android.view.View: int getMeasuredWidth()>();

        $i1 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        if $i0 == $i1 goto label6;

        if $z0 == 0 goto label7;

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        return;

     label3:
        specialinvoke $r0.<android.webkit.WebView: boolean sendViewSizeZoom()>();

        return;

     label4:
        return;

     label5:
        return;

     label6:
        return;

     label7:
        return;
    }

    private int contentToView(int)
    {
        android.webkit.WebView $r0;
        int $i0;
        float $f0, $f1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $f1 = (float) $i0;

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        $f0 = $f1 * $f0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return $i0;
    }

    private android.graphics.Rect contentToView(android.graphics.Rect)
    {
        android.webkit.WebView $r0;
        android.graphics.Rect $r1, $r2;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 = new android.graphics.Rect;

        $i0 = $r1.<android.graphics.Rect: int left>;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        $i1 = $r1.<android.graphics.Rect: int top>;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        $i2 = $r1.<android.graphics.Rect: int right>;

        $i2 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i2);

        $i3 = $r1.<android.graphics.Rect: int bottom>;

        $i3 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i3);

        specialinvoke $r2.<android.graphics.Rect: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r2;
    }

    private android.webkit.WebView$ExtendedZoomControls createZoomControls()
    {
        android.webkit.WebView $r0;
        android.webkit.WebView$ExtendedZoomControls $r1;
        android.content.Context $r2;
        android.webkit.WebView$9 $r3;
        android.webkit.WebView$10 $r4;
        android.webkit.WebView$11 $r5;

        $r0 := @this: android.webkit.WebView;

        $r1 = new android.webkit.WebView$ExtendedZoomControls;

        $r2 = $r0.<android.view.View: android.content.Context mContext>;

        specialinvoke $r1.<android.webkit.WebView$ExtendedZoomControls: void <init>(android.webkit.WebView,android.content.Context,android.util.AttributeSet)>($r0, $r2, null);

        $r3 = new android.webkit.WebView$9;

        specialinvoke $r3.<android.webkit.WebView$9: void <init>(android.webkit.WebView)>($r0);

        virtualinvoke $r1.<android.webkit.WebView$ExtendedZoomControls: void setOnZoomInClickListener(android.view.View$OnClickListener)>($r3);

        $r4 = new android.webkit.WebView$10;

        specialinvoke $r4.<android.webkit.WebView$10: void <init>(android.webkit.WebView)>($r0);

        virtualinvoke $r1.<android.webkit.WebView$ExtendedZoomControls: void setOnZoomOutClickListener(android.view.View$OnClickListener)>($r4);

        $r5 = new android.webkit.WebView$11;

        specialinvoke $r5.<android.webkit.WebView$11: void <init>(android.webkit.WebView)>($r0);

        virtualinvoke $r1.<android.webkit.WebView$ExtendedZoomControls: void setOnZoomMagnifyClickListener(android.view.View$OnClickListener)>($r5);

        return $r1;
    }

    public static void disablePlatformNotifications()
    {
        staticinvoke <android.webkit.Network: void disablePlatformNotifications()>();

        return;
    }

    private void displaySoftKeyboard()
    {
        android.webkit.WebView $r0;
        float $f0, $f1, $f2;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.view.inputmethod.InputMethodManager $r3;
        android.webkit.TextDialog $r4;
        android.view.ViewGroup$LayoutParams $r5;
        android.widget.AbsoluteLayout$LayoutParams $r6;
        int $i0, $i1;

        $r0 := @this: android.webkit.WebView;

        $r1 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("input_method");

        $r3 = (android.view.inputmethod.InputMethodManager) $r2;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r3.<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>($r4, 0);

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void enableScrollOnScreen(boolean)>(1);

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $r5 = virtualinvoke $r4.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r6 = (android.widget.AbsoluteLayout$LayoutParams) $r5;

        if $r6 == null goto label1;

        $f0 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r6.<android.widget.AbsoluteLayout$LayoutParams: int x>;

        $i0 = $i0 - $i1;

        $f1 = (float) $i0;

        $f0 = $f0 + $f1;

        $f1 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $i1 = $r6.<android.widget.AbsoluteLayout$LayoutParams: int y>;

        $i0 = $i0 - $i1;

        $f2 = (float) $i0;

        $f1 = $f1 + $f2;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void fakeTouchEvent(float,float)>($f0, $f1);

        return;

     label1:
        return;
    }

    private void doFling()
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.VelocityTracker $r1;
        float $f0;
        android.widget.Scroller $r2;
        android.os.Handler $r3;
        long $l6;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        if $r1 != null goto label1;

        return;

     label1:
        $i2 = virtualinvoke $r0.<android.webkit.WebView: int computeHorizontalScrollRange()>();

        $i3 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i2 = $i2 - $i3;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 0);

        $i3 = virtualinvoke $r0.<android.webkit.WebView: int computeVerticalScrollRange()>();

        $i4 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i3 = $i3 - $i4;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 0);

        $r1 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r1.<android.view.VelocityTracker: void computeCurrentVelocity(int)>(1000);

        $r1 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        $f0 = virtualinvoke $r1.<android.view.VelocityTracker: float getXVelocity()>();

        $i0 = (int) $f0;

        $r1 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        $f0 = virtualinvoke $r1.<android.view.VelocityTracker: float getYVelocity()>();

        $i4 = (int) $f0;

        $i5 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i5 == 1 goto label3;

        $i5 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i5 == 2 goto label2;

        $i5 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i5 != 4 goto label4;

     label2:
        $i4 = 0;

     label3:
        $i0 = $i0 * 3;

        $i0 = $i0 / 4;

        $i4 = $i4 * 3;

        $i1 = $i4 / 4;

        $r2 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $i4 = $r0.<android.view.View: int mScrollX>;

        $i5 = $r0.<android.view.View: int mScrollY>;

        $i0 = neg $i0;

        $i1 = neg $i1;

        virtualinvoke $r2.<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>($i4, $i5, $i0, $i1, 0, $i2, 0, $i3);

        $r2 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $i2 = virtualinvoke $r2.<android.widget.Scroller: int getDuration()>();

        $r3 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $l6 = (long) $i2;

        virtualinvoke $r3.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(8, $l6);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label4:
        $i0 = 0;

        goto label3;
    }

    private void doShortPress()
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;
        float $f0;
        boolean $z0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.provider.Checkin$Stats$Tag $r3;
        android.webkit.WebView$FocusNode $r4;

        $r0 := @this: android.webkit.WebView;

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 != 0 goto label1;

        return;

     label1:
        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $f0 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i0 = (int) $f0;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i0 + $i1;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $f0 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i1 = (int) $f0;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i1 + $i2;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i1);

        $i2 = $r0.<android.webkit.WebView: int mNavSlop>;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeMotionUp(int,int,int,boolean)>($i0, $i1, $i2, 1);

        if $z0 == 0 goto label2;

        $z0 = <android.webkit.WebView: boolean mLogEvent>;

        if $z0 == 0 goto label2;

        $r1 = $r0.<android.view.View: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = <android.provider.Checkin$Stats$Tag: android.provider.Checkin$Stats$Tag BROWSER_SNAP_CENTER>;

        staticinvoke <android.provider.Checkin: android.net.Uri updateStats(android.content.ContentResolver,android.provider.Checkin$Stats$Tag,int,double)>($r2, $r3, 1, 0.0);

     label2:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        if $z0 == 0 goto label3;

        $r4 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $z0 = $r4.<android.webkit.WebView$FocusNode: boolean mIsTextField>;

        if $z0 != 0 goto label4;

        $r4 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $z0 = $r4.<android.webkit.WebView$FocusNode: boolean mIsTextArea>;

        if $z0 != 0 goto label5;

        virtualinvoke $r0.<android.view.View: void playSoundEffect(int)>(0);

        return;

     label3:
        return;

     label4:
        return;

     label5:
        return;
    }

    private void doTrackball(long)
    {
        android.webkit.WebView $r0;
        long $l0, $l1, $l2;
        float $f0, $f1, $f2, $f3, $f4;
        int $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        byte $b10;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        $l0 := @parameter0: long;

        $l1 = $r0.<android.webkit.WebView: long mTrackballLastTime>;

        $l2 = $r0.<android.webkit.WebView: long mTrackballFirstTime>;

        $l1 = $l1 - $l2;

        $i3 = (int) $l1;

        if $i3 != 0 goto label01;

        $i3 = 200;

     label01:
        $f0 = $r0.<android.webkit.WebView: float mTrackballRemainsX>;

        $f0 = $f0 * 1000.0F;

        $f1 = (float) $i3;

        $f0 = $f0 / $f1;

        $f1 = $r0.<android.webkit.WebView: float mTrackballRemainsY>;

        $f1 = $f1 * 1000.0F;

        $f2 = (float) $i3;

        $f1 = $f1 / $f2;

        $z0 = $r0.<android.webkit.WebView: boolean mShiftIsPressed>;

        if $z0 == 0 goto label02;

        virtualinvoke $r0.<android.webkit.WebView: void moveSelection(float,float)>($f0, $f1);

        $r0.<android.webkit.WebView: float mTrackballRemainsY> = 0.0F;

        $r0.<android.webkit.WebView: float mTrackballRemainsX> = 0.0F;

        return;

     label02:
        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        staticinvoke <java.lang.Math: float max(float,float)>($f2, $f3);

        $i3 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i4 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i4 = $i3 - $i4;

        $i3 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i5 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i3 = $i3 - $i5;

        if $i4 >= 0 goto label03;

        $i4 = 0;

     label03:
        if $i3 >= 0 goto label04;

        $i3 = 0;

     label04:
        $i5 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i5 != 11 goto label07;

        $i6 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $i5 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3);

        $i8 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $i9 = specialinvoke $r0.<android.webkit.WebView: int scaleTrackballX(float,int)>($f0, $i7);

        $i8 = $i8 + $i9;

        $r0.<android.webkit.WebView: int mZoomScrollX> = $i8;

        $i8 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $i7 = specialinvoke $r0.<android.webkit.WebView: int scaleTrackballY(float,int)>($f1, $i7);

        $i7 = $i8 + $i7;

        $r0.<android.webkit.WebView: int mZoomScrollY> = $i7;

        $i7 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i7);

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i7);

        $r0.<android.webkit.WebView: int mZoomScrollX> = $i4;

        $i4 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i4);

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        $r0.<android.webkit.WebView: int mZoomScrollY> = $i3;

        $i3 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        if $i6 != $i3 goto label05;

        $i3 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        if $i5 == $i3 goto label06;

     label05:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

     label06:
        $r0.<android.webkit.WebView: float mTrackballRemainsY> = 0.0F;

        $r0.<android.webkit.WebView: float mTrackballRemainsX> = 0.0F;

        return;

     label07:
        $f2 = $r0.<android.webkit.WebView: float mTrackballRemainsX>;

        $f2 = $f2 * 3.0F;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $f3 = $r0.<android.webkit.WebView: float mTrackballRemainsY>;

        $f3 = $f3 * 3.0F;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f3);

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f3);

        $i5 = (int) $f4;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i5);

        $i7 = $i8;

        $i6 = $r0.<android.view.View: int mScrollX>;

        $i5 = $r0.<android.view.View: int mScrollY>;

        if $i8 <= 0 goto label10;

        $b10 = $f2 cmpg $f3;

        if $b10 >= 0 goto label17;

        $f2 = $r0.<android.webkit.WebView: float mTrackballRemainsY>;

        $b10 = $f2 cmpg 0.0F;

        if $b10 >= 0 goto label16;

        $b10 = 19;

     label08:
        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i8, 10);

        $i7 = $i8;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean navHandledKey(int,int,boolean,long)>($b10, $i8, 0, $l0);

        if $z0 == 0 goto label09;

        $i8 = specialinvoke $r0.<android.webkit.WebView: int keyCodeToSoundsEffect(int)>($b10);

        virtualinvoke $r0.<android.view.View: void playSoundEffect(int)>($i8);

     label09:
        $r0.<android.webkit.WebView: float mTrackballRemainsY> = 0.0F;

        $r0.<android.webkit.WebView: float mTrackballRemainsX> = 0.0F;

     label10:
        if $i7 < 5 goto label15;

        $i8 = specialinvoke $r0.<android.webkit.WebView: int scaleTrackballX(float,int)>($f0, $i4);

        $i4 = $i8;

        $i7 = specialinvoke $r0.<android.webkit.WebView: int scaleTrackballY(float,int)>($f1, $i3);

        $i3 = $i7;

        $i9 = $r0.<android.view.View: int mScrollX>;

        $i6 = $i9 - $i6;

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        $i8 = staticinvoke <java.lang.Math: int abs(int)>($i8);

        if $i6 <= $i8 goto label11;

        $i4 = 0;

     label11:
        $i6 = $r0.<android.view.View: int mScrollY>;

        $i5 = $i6 - $i5;

        $i5 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i7);

        if $i5 <= $i6 goto label12;

        $i3 = 0;

     label12:
        if $i4 != 0 goto label13;

        if $i3 == 0 goto label14;

     label13:
        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>($i4, $i3, 1, 0);

     label14:
        $r0.<android.webkit.WebView: boolean mUserScroll> = 1;

     label15:
        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int)>(127);

        return;

     label16:
        $b10 = 20;

        goto label08;

     label17:
        $f2 = $r0.<android.webkit.WebView: float mTrackballRemainsX>;

        $b10 = $f2 cmpg 0.0F;

        if $b10 >= 0 goto label18;

        $b10 = 21;

        goto label08;

     label18:
        $b10 = 22;

        goto label08;
    }

    private void drawCoreAndFocusRing(android.graphics.Canvas, int, boolean)
    {
        android.webkit.WebView $r0;
        android.graphics.Canvas $r1;
        int $i0, $i1, $i5, $i6;
        boolean $z0, $z1, $z2;
        float $f0, $f1, $f2, $f3, $f4;
        android.graphics.Picture $r2;
        byte $b2;
        android.widget.Scroller $r3;
        android.view.VelocityTracker $r4;
        long $l3, $l4;
        android.webkit.WebViewCore $r5;
        android.webkit.WebView$HitTestResult $r6;
        android.os.Handler $r7, $r8;
        android.os.Message $r9;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $z1 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z1 == 0 goto label01;

        $f2 = $r0.<android.webkit.WebView: float mActualScale>;

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>($f2, $f0);

        $r2 = $r0.<android.webkit.WebView: android.graphics.Picture mHistoryPicture>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>($r2);

        return;

     label01:
        $f2 = $r0.<android.webkit.WebView: float mZoomScale>;

        $b2 = $f2 cmpl 0.0F;

        if $b2 == 0 goto label08;

        $z2 = 1;

     label02:
        $r3 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $z1 = virtualinvoke $r3.<android.widget.Scroller: boolean isFinished()>();

        if $z1 == 0 goto label03;

        $r4 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        if $r4 == null goto label09;

     label03:
        $z1 = 1;

     label04:
        if $z2 == 0 goto label11;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = $r0.<android.webkit.WebView: long mZoomStart>;

        $l3 = $l3 - $l4;

        $i1 = (int) $l3;

        if $i1 >= 500 goto label10;

        $f2 = (float) $i1;

        $f0 = $f2 / 500.0F;

        $f2 = $r0.<android.webkit.WebView: float mInvInitialZoomScale>;

        $f3 = $r0.<android.webkit.WebView: float mInvFinalZoomScale>;

        $f1 = $r0.<android.webkit.WebView: float mInvInitialZoomScale>;

        $f1 = $f3 - $f1;

        $f0 = $f1 * $f0;

        $f2 = $f2 + $f0;

        $f2 = 1.0F / $f2;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

     label05:
        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        $f0 = $f0 - $f2;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f0 * $f1;

        $f1 = $r0.<android.webkit.WebView: float mZoomCenterX>;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $f3 = (float) $i1;

        $f1 = $f1 + $f3;

        $f1 = $f0 * $f1;

        $f3 = $r0.<android.webkit.WebView: float mZoomCenterY>;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $f4 = (float) $i1;

        $f3 = $f3 + $f4;

        $f0 = $f0 * $f3;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $f3 = (float) $i1;

        $f3 = $f1 - $f3;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $f1 = (float) $i1;

        $f1 = $f0 - $f1;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f3);

        $i1 = neg $i1;

        $i5 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i6 = $r0.<android.webkit.WebView: int mContentWidth>;

        $f0 = (float) $i6;

        $f0 = $f0 * $f2;

        $i6 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i1 = staticinvoke <android.webkit.WebView: int pinLoc(int,int,int)>($i1, $i5, $i6);

        $i1 = neg $i1;

        $f0 = (float) $i1;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $i1 = neg $i1;

        $i5 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i6 = $r0.<android.webkit.WebView: int mContentHeight>;

        $f1 = (float) $i6;

        $f1 = $f1 * $f2;

        $i6 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $i1 = staticinvoke <android.webkit.WebView: int pinLoc(int,int,int)>($i1, $i5, $i6);

        $i1 = neg $i1;

        $f1 = (float) $i1;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $f3 = (float) $i1;

        $f0 = $f0 + $f3;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $f3 = (float) $i1;

        $f1 = $f1 + $f3;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>($f2, $f2);

     label06:
        $r5 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r5.<android.webkit.WebViewCore: void drawContentPicture(android.graphics.Canvas,int,boolean,boolean)>($r1, $i0, $z2, $z1);

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 == 0 goto label15;

        $z2 = $r0.<android.webkit.WebView: boolean mShiftIsPressed>;

        if $z2 == 0 goto label13;

        $z0 = $r0.<android.webkit.WebView: boolean mTouchSelection>;

        if $z0 == 0 goto label12;

        specialinvoke $r0.<android.webkit.WebView: void nativeDrawSelectionRegion(android.graphics.Canvas)>($r1);

     label07:
        $z0 = $r0.<android.webkit.WebView: boolean mFindIsUp>;

        if $z0 == 0 goto label16;

        if $z1 != 0 goto label17;

        specialinvoke $r0.<android.webkit.WebView: void nativeDrawMatches(android.graphics.Canvas)>($r1);

        return;

     label08:
        $z2 = 0;

        goto label02;

     label09:
        $z1 = 0;

        goto label04;

     label10:
        $f2 = $r0.<android.webkit.WebView: float mZoomScale>;

        $r0.<android.webkit.WebView: float mZoomScale> = 0.0F;

        goto label05;

     label11:
        $f2 = $r0.<android.webkit.WebView: float mActualScale>;

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>($f2, $f0);

        goto label06;

     label12:
        $i0 = $r0.<android.webkit.WebView: int mSelectX>;

        $i1 = $r0.<android.webkit.WebView: int mSelectY>;

        $z0 = $r0.<android.webkit.WebView: boolean mExtendSelection>;

        specialinvoke $r0.<android.webkit.WebView: void nativeDrawSelection(android.graphics.Canvas,int,int,boolean)>($r1, $i0, $i1, $z0);

        goto label07;

     label13:
        if $z0 == 0 goto label07;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 != 4 goto label14;

        $r0.<android.webkit.WebView: int mTouchMode> = 5;

        $r6 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebView$HitTestResult getHitTestResult()>();

        if $r6 == null goto label14;

        $i0 = staticinvoke <android.webkit.WebView$HitTestResult: int access$700(android.webkit.WebView$HitTestResult)>($r6);

        if $i0 == 0 goto label14;

        $r7 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r8 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r9 = virtualinvoke $r8.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke $r7.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r9, 1000L);

     label14:
        specialinvoke $r0.<android.webkit.WebView: void nativeDrawFocusRing(android.graphics.Canvas)>($r1);

        goto label07;

     label15:
        return;

     label16:
        return;

     label17:
        return;
    }

    private void drawMagnifyFrame(android.graphics.Canvas, android.graphics.Rect, android.graphics.Paint)
    {
        android.webkit.WebView $r0;
        android.graphics.Canvas $r1;
        android.graphics.Rect $r2;
        android.graphics.Paint $r3;
        float $f0, $f1, $f2, $f3;
        android.graphics.Path $r4;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.graphics.Rect;

        $r3 := @parameter2: android.graphics.Paint;

        $i0 = virtualinvoke $r2.<android.graphics.Rect: int width()>();

        $f1 = (float) $i0;

        $i0 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        $f0 = (float) $i0;

        $r4 = new android.graphics.Path;

        specialinvoke $r4.<android.graphics.Path: void <init>()>();

        virtualinvoke $r4.<android.graphics.Path: void moveTo(float,float)>(-16.0F, -16.0F);

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>(0.0F, 0.0F);

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>($f1, 0.0F);

        $f2 = $f1 + 16.0F;

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>($f2, -16.0F);

        $f2 = $f0 + 16.0F;

        virtualinvoke $r4.<android.graphics.Path: void moveTo(float,float)>(-16.0F, $f2);

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>(0.0F, $f0);

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>($f1, $f0);

        $f2 = $f1 + 16.0F;

        $f3 = $f0 + 16.0F;

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>($f2, $f3);

        virtualinvoke $r4.<android.graphics.Path: void moveTo(float,float)>(0.0F, 0.0F);

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>(0.0F, $f0);

        virtualinvoke $r4.<android.graphics.Path: void moveTo(float,float)>($f1, 0.0F);

        virtualinvoke $r4.<android.graphics.Path: void lineTo(float,float)>($f1, $f0);

        $i0 = $r2.<android.graphics.Rect: int left>;

        $f0 = (float) $i0;

        $i0 = $r2.<android.graphics.Rect: int top>;

        $f1 = (float) $i0;

        virtualinvoke $r4.<android.graphics.Path: void offset(float,float)>($f0, $f1);

        virtualinvoke $r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r4, $r3);

        return;
    }

    public static void enablePlatformNotifications()
    {
        staticinvoke <android.webkit.Network: void enablePlatformNotifications()>();

        return;
    }

    private boolean extendScroll(int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;
        android.widget.Scroller $r1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $i1 = virtualinvoke $r1.<android.widget.Scroller: int getFinalY()>();

        $i2 = $i1 + $i0;

        $i2 = specialinvoke $r0.<android.webkit.WebView: int pinLocY(int)>($i2);

        if $i2 != $i1 goto label1;

        return 0;

     label1:
        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        virtualinvoke $r1.<android.widget.Scroller: void setFinalY(int)>($i2);

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $i0 = staticinvoke <android.webkit.WebView: int computeDuration(int,int)>(0, $i0);

        virtualinvoke $r1.<android.widget.Scroller: void extendDuration(int)>($i0);

        return 1;
    }

    public static java.lang.String findAddress(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        $r0 = staticinvoke <android.webkit.WebViewCore: java.lang.String nativeFindAddress(java.lang.String)>($r0);

        return $r0;
    }

    public static android.webkit.PluginList getPluginList()
    {
        android.webkit.PluginList $r0;
        java.lang.Throwable $r1;

        entermonitor class "android/webkit/WebView";

     label1:
        $r0 = <android.webkit.WebView: android.webkit.PluginList sPluginList>;

        if $r0 != null goto label2;

        $r0 = new android.webkit.PluginList;

        specialinvoke $r0.<android.webkit.PluginList: void <init>()>();

        <android.webkit.WebView: android.webkit.PluginList sPluginList> = $r0;

     label2:
        $r0 = <android.webkit.WebView: android.webkit.PluginList sPluginList>;

     label3:
        exitmonitor class "android/webkit/WebView";

        return $r0;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "android/webkit/WebView";

        throw $r1;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    private int getScaledMaxXScroll()
    {
        android.webkit.WebView $r0;
        android.graphics.Rect $r1;
        boolean $z0;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $z0 = $r0.<android.webkit.WebView: boolean mHeightCanMeasure>;

        if $z0 != 0 goto label2;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i0 = $i0 / 4;

     label1:
        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        return $i0;

     label2:
        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        specialinvoke $r0.<android.webkit.WebView: void calcOurVisibleRect(android.graphics.Rect)>($r1);

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int width()>();

        $i0 = $i0 / 2;

        goto label1;
    }

    private int getScaledMaxYScroll()
    {
        android.webkit.WebView $r0;
        android.graphics.Rect $r1;
        boolean $z0;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $z0 = $r0.<android.webkit.WebView: boolean mHeightCanMeasure>;

        if $z0 != 0 goto label2;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i0 = $i0 / 4;

     label1:
        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        return $i0;

     label2:
        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        specialinvoke $r0.<android.webkit.WebView: void calcOurVisibleRect(android.graphics.Rect)>($r1);

        $i0 = virtualinvoke $r1.<android.graphics.Rect: int height()>();

        $i0 = $i0 / 2;

        goto label1;
    }

    private int getViewHeight()
    {
        android.webkit.WebView $r0;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: android.webkit.WebView;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        if $z0 == 0 goto label1;

        $z0 = $r0.<android.webkit.WebView: boolean mOverlayHorizontalScrollbar>;

        if $z0 == 0 goto label2;

     label1:
        $i0 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        return $i0;

     label2:
        $i0 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $i1 = virtualinvoke $r0.<android.view.View: int getHorizontalScrollbarHeight()>();

        $i0 = $i0 - $i1;

        return $i0;
    }

    private int getViewWidth()
    {
        android.webkit.WebView $r0;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: android.webkit.WebView;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z0 == 0 goto label1;

        $z0 = $r0.<android.webkit.WebView: boolean mOverlayVerticalScrollbar>;

        if $z0 == 0 goto label2;

     label1:
        $i0 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        return $i0;

     label2:
        $i0 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke $r0.<android.view.View: int getVerticalScrollbarWidth()>();

        $i0 = $i0 - $i1;

        return $i0;
    }

    private void goBackOrForward(int, boolean)
    {
        android.webkit.WebView $r0;
        int $i0;
        boolean $z0;
        android.webkit.WebViewCore $r1;
        byte $b1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r0.<android.webkit.WebView: android.net.http.SslCertificate mCertificate> = null;

        if $i0 == 0 goto label3;

        specialinvoke $r0.<android.webkit.WebView: void clearTextEntry()>();

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $z0 == 0 goto label2;

        $b1 = 1;

     label1:
        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int,int,int)>(106, $i0, $b1);

        return;

     label2:
        $b1 = 0;

        goto label1;

     label3:
        return;
    }

    private boolean inEditingMode()
    {
        android.webkit.WebView $r0;
        android.webkit.TextDialog $r1;
        android.view.ViewParent $r2;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewParent getParent()>();

        if $r2 == null goto label1;

        $r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $z0 = virtualinvoke $r1.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void init()
    {
        android.webkit.WebView $r0;
        android.content.Context $r1;
        android.view.ViewConfiguration $r2;
        int $i0, $i1;
        android.content.res.Resources $r3;
        android.util.DisplayMetrics $r4;
        float $f0;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.view.View: void setWillNotDraw(boolean)>(0);

        virtualinvoke $r0.<android.view.View: void setFocusable(boolean)>(1);

        virtualinvoke $r0.<android.view.View: void setFocusableInTouchMode(boolean)>(1);

        virtualinvoke $r0.<android.view.View: void setClickable(boolean)>(1);

        virtualinvoke $r0.<android.view.View: void setLongClickable(boolean)>(1);

        $r1 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        $r2 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r1);

        $i0 = virtualinvoke $r2.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $i1 = $i0 * $i0;

        $r0.<android.webkit.WebView: int mTouchSlopSquare> = $i1;

        $r0.<android.webkit.WebView: int mMinLockSnapReverseDistance> = $i0;

        $r1 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        $r3 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r4.<android.util.DisplayMetrics: float density>;

        $f0 = 16.0F * $f0;

        $i0 = (int) $f0;

        $r0.<android.webkit.WebView: int mNavSlop> = $i0;

        return;
    }

    private void initZoomController(android.content.Context)
    {
        android.webkit.WebView $r0;
        android.content.Context $r1;
        android.widget.ZoomButtonsController $r2;
        android.widget.ZoomButtonsController$OnZoomListener $r3;
        java.lang.Object $r4;
        android.view.LayoutInflater $r5;
        android.view.ViewGroup $r6;
        android.view.View $r7;
        android.widget.ImageView $r8;
        android.webkit.WebView$2 $r9;
        android.webkit.WebView$3 $r10;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.content.Context;

        $r2 = new android.widget.ZoomButtonsController;

        specialinvoke $r2.<android.widget.ZoomButtonsController: void <init>(android.view.View)>($r0);

        $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController> = $r2;

        $r2 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        $r3 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController$OnZoomListener mZoomListener>;

        virtualinvoke $r2.<android.widget.ZoomButtonsController: void setOnZoomListener(android.widget.ZoomButtonsController$OnZoomListener)>($r3);

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("layout_inflater");

        $r5 = (android.view.LayoutInflater) $r4;

        $r2 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        $r6 = virtualinvoke $r2.<android.widget.ZoomButtonsController: android.view.ViewGroup getContainer()>();

        virtualinvoke $r5.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(17367145, $r6);

        $r7 = virtualinvoke $r6.<android.view.View: android.view.View findViewById(int)>(16908776);

        $r8 = (android.widget.ImageView) $r7;

        $r0.<android.webkit.WebView: android.widget.ImageView mZoomOverviewButton> = $r8;

        $r8 = $r0.<android.webkit.WebView: android.widget.ImageView mZoomOverviewButton>;

        $r9 = new android.webkit.WebView$2;

        specialinvoke $r9.<android.webkit.WebView$2: void <init>(android.webkit.WebView)>($r0);

        virtualinvoke $r8.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r9);

        $r7 = virtualinvoke $r6.<android.view.View: android.view.View findViewById(int)>(16908775);

        $r8 = (android.widget.ImageView) $r7;

        $r0.<android.webkit.WebView: android.widget.ImageView mZoomFitPageButton> = $r8;

        $r8 = $r0.<android.webkit.WebView: android.widget.ImageView mZoomFitPageButton>;

        $r10 = new android.webkit.WebView$3;

        specialinvoke $r10.<android.webkit.WebView$3: void <init>(android.webkit.WebView)>($r0);

        virtualinvoke $r8.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r10);

        return;
    }

    private int keyCodeToSoundsEffect(int)
    {
        android.webkit.WebView $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 19: goto label2;
            case 20: goto label4;
            case 21: goto label5;
            case 22: goto label3;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("keyCode must be one of {KEYCODE_DPAD_UP, KEYCODE_DPAD_RIGHT, KEYCODE_DPAD_DOWN, KEYCODE_DPAD_LEFT}.");

        throw $r1;

     label2:
        return 2;

     label3:
        return 3;

     label4:
        return 4;

     label5:
        return 1;
    }

    private void moveZoomScrollWindow(float, float)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        float $f0, $f1, $f2, $f3;
        byte $b5;
        double $d0;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 = $r0.<android.webkit.WebView: float mLastZoomScrollRawX>;

        $f2 = $f0 - $f2;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $b5 = $f2 cmpg 1.5F;

        if $b5 >= 0 goto label1;

        $f2 = $r0.<android.webkit.WebView: float mLastZoomScrollRawY>;

        $f2 = $f1 - $f2;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $b5 = $f2 cmpg 1.5F;

        if $b5 >= 0 goto label1;

        return;

     label1:
        $r0.<android.webkit.WebView: float mLastZoomScrollRawX> = $f0;

        $r0.<android.webkit.WebView: float mLastZoomScrollRawY> = $f1;

        $i3 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $i4 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i1 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i2 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i2 = $i2 - $i0;

        if $i2 <= 0 goto label2;

        $f2 = (float) $i0;

        $f3 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f2 = $f2 * $f3;

        $d0 = (double) $f2;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i6 = (int) $d0;

        $i0 = $i0 - $i6;

        $i0 = $i0 - 32;

        $i6 = $r0.<android.webkit.WebView: int mLastScrollX>;

        $i6 = $i6 * $i0;

        $i6 = $i6 / $i2;

        $f2 = (float) $i6;

        $f3 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $f2 = $f2 - $f3;

        $f0 = $f0 + $f2;

        $i0 = $i2 / $i0;

        $f2 = (float) $i0;

        $f3 = $r0.<android.webkit.WebView: float mZoomScrollInvLimit>;

        $f2 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f3);

        $f0 = $f0 * $f2;

        $i0 = (int) $f0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i0);

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $r0.<android.webkit.WebView: int mZoomScrollX> = $i2;

     label2:
        $i2 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i2 = $i2 - $i1;

        if $i2 <= 0 goto label3;

        $f0 = (float) $i1;

        $f2 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f0 = $f0 * $f2;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        $i0 = (int) $d0;

        $i1 = $i1 - $i0;

        $i1 = $i1 - 32;

        $i0 = $r0.<android.webkit.WebView: int mLastScrollY>;

        $i0 = $i0 * $i1;

        $i0 = $i0 / $i2;

        $f0 = (float) $i0;

        $f2 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $f0 = $f0 - $f2;

        $f0 = $f1 + $f0;

        $i1 = $i2 / $i1;

        $f1 = (float) $i1;

        $f2 = $r0.<android.webkit.WebView: float mZoomScrollInvLimit>;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>($f1, $f2);

        $f0 = $f0 * $f1;

        $i1 = (int) $f0;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

        $r0.<android.webkit.WebView: int mZoomScrollY> = $i1;

     label3:
        $i1 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        if $i3 != $i1 goto label4;

        $i3 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        if $i4 == $i3 goto label5;

     label4:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label5:
        return;
    }

    private native void nativeClearFocus(int, int);

    private native void nativeCreate(int);

    private native void nativeDebugDump();

    private native void nativeDestroy();

    private native void nativeDrawFocusRing(android.graphics.Canvas);

    private native void nativeDrawMatches(android.graphics.Canvas);

    private native void nativeDrawSelection(android.graphics.Canvas, int, int, boolean);

    private native void nativeDrawSelectionRegion(android.graphics.Canvas);

    private native void nativeDumpDisplayTree(java.lang.String);

    private native int nativeFindAll(java.lang.String, java.lang.String);

    private native void nativeFindNext(boolean);

    private native boolean nativeFocusNodeWantsKeyEvents();

    private native android.graphics.Rect nativeGetFocusRingBounds();

    private native android.graphics.Rect nativeGetNavBounds();

    private native android.graphics.Region nativeGetSelection();

    private native java.lang.String nativeImageURI(int, int);

    private native void nativeInstrumentReport();

    private native void nativeMarkNodeInvalid(int);

    private native boolean nativeMotionUp(int, int, int, boolean);

    private native boolean nativeMoveFocus(int, int, boolean);

    private native void nativeMoveSelection(int, int, boolean);

    private native void nativeNotifyFocusSet(boolean);

    private native void nativeRecomputeFocus();

    private native void nativeRecordButtons(boolean, boolean, boolean);

    private native void nativeResetFocus();

    private native void nativeResetNavClipBounds();

    private native void nativeSelectBestAt(android.graphics.Rect);

    private native void nativeSetFindIsDown();

    private native void nativeSetFollowedLink(boolean);

    private native void nativeSetHeightCanMeasure(boolean);

    private native void nativeSetNavBounds(android.graphics.Rect);

    private native void nativeSetNavClipBounds(android.graphics.Rect);

    private native void nativeUpdateCachedTextfield(java.lang.String, int);

    private native boolean nativeUpdateFocusNode();

    private boolean navHandledKey(int, int, boolean, long)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i3;
        boolean $z0, $z1;
        long $l2;
        android.graphics.Rect $r1, $r2, $r3, $r4;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $l2 := @parameter3: long;

        $i3 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i3 != 0 goto label01;

        return 0;

     label01:
        $r0.<android.webkit.WebView: long mLastFocusTime> = $l2;

        $r3 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect nativeGetFocusRingBounds()>();

        $r0.<android.webkit.WebView: android.graphics.Rect mLastFocusBounds> = $r3;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeMoveFocus(int,int,boolean)>($i0, $i1, $z0);

        if $z0 != 0 goto label04;

        $z0 = 1;

     label02:
        if $z0 == 0 goto label03;

        $z1 = $r0.<android.webkit.WebView: boolean mHeightCanMeasure>;

        if $z1 != 0 goto label05;

     label03:
        return $z0;

     label04:
        $z0 = 0;

        goto label02;

     label05:
        $r3 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect nativeGetFocusRingBounds()>();

        $z1 = virtualinvoke $r3.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 == 0 goto label06;

        return $z0;

     label06:
        $r4 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect contentToView(android.graphics.Rect)>($r3);

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        specialinvoke $r0.<android.webkit.WebView: void calcOurVisibleRect(android.graphics.Rect)>($r2);

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r2);

        $i0 = virtualinvoke $r2.<android.graphics.Rect: int width()>();

        $i0 = $i0 / 2;

        $i1 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        $i3 = $i1 / 2;

        $i1 = neg $i0;

        $i3 = neg $i3;

        virtualinvoke $r1.<android.graphics.Rect: void inset(int,int)>($i1, $i3);

        $z1 = staticinvoke <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>($r1, $r4);

        if $z1 != 0 goto label07;

        return $z0;

     label07:
        $i1 = $r4.<android.graphics.Rect: int right>;

        $i3 = $r2.<android.graphics.Rect: int right>;

        $i1 = $i1 - $i3;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        if $i1 <= 0 goto label09;

        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>($i1, 0, 1, 0);

     label08:
        $r1 = $r0.<android.webkit.WebView: android.graphics.Rect mLastFocusBounds>;

        $z1 = virtualinvoke $r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z1 == 0 goto label10;

        return $z0;

     label09:
        $i1 = $r4.<android.graphics.Rect: int left>;

        $i3 = $r2.<android.graphics.Rect: int left>;

        $i1 = $i1 - $i3;

        $i0 = neg $i0;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        if $i0 >= 0 goto label08;

        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>($i0, 0, 1, 0);

        goto label08;

     label10:
        $r1 = $r0.<android.webkit.WebView: android.graphics.Rect mLastFocusBounds>;

        $z1 = virtualinvoke $r1.<android.graphics.Rect: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label11;

        return $z0;

     label11:
        virtualinvoke $r0.<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>($r4);

        $r0.<android.webkit.WebView: boolean mUserScroll> = 1;

        return $z0;
    }

    private void overrideLoading(java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1;
        android.webkit.CallbackProxy $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        virtualinvoke $r2.<android.webkit.CallbackProxy: boolean uiOverrideUrlLoading(java.lang.String)>($r1);

        return;
    }

    private static int pinLoc(int, int, int)
    {
        int $i0, $i1, $i2, $i3;

        $i3 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 >= $i0 goto label1;

        return 0;

     label1:
        if $i3 >= 0 goto label2;

        return 0;

     label2:
        $i2 = $i3 + $i0;

        if $i2 <= $i1 goto label3;

        $i3 = $i1 - $i0;

        return $i3;

     label3:
        return $i3;
    }

    private int pinLocX(int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i2 = virtualinvoke $r0.<android.webkit.WebView: int computeHorizontalScrollRange()>();

        $i0 = staticinvoke <android.webkit.WebView: int pinLoc(int,int,int)>($i0, $i1, $i2);

        return $i0;
    }

    private int pinLocY(int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i2 = virtualinvoke $r0.<android.webkit.WebView: int computeVerticalScrollRange()>();

        $i0 = staticinvoke <android.webkit.WebView: int pinLoc(int,int,int)>($i0, $i1, $i2);

        return $i0;
    }

    private boolean pinScrollBy(int, int, boolean, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $i2 := @parameter3: int;

        $i3 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i3 + $i0;

        $i3 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i3 + $i1;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean pinScrollTo(int,int,boolean,int)>($i0, $i1, $z0, $i2);

        return $z0;
    }

    private boolean pinScrollTo(int, int, boolean, int)
    {
        android.webkit.WebView $r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.widget.Scroller $r1;

        $r0 := @this: android.webkit.WebView;

        $i3 := @parameter0: int;

        $i4 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int pinLocX(int)>($i3);

        $i2 = specialinvoke $r0.<android.webkit.WebView: int pinLocY(int)>($i4);

        $i3 = $r0.<android.view.View: int mScrollX>;

        $i3 = $i1 - $i3;

        $i4 = $r0.<android.view.View: int mScrollY>;

        $i4 = $i2 - $i4;

        $i5 = $i3 | $i4;

        if $i5 != 0 goto label1;

        return 0;

     label1:
        if $z0 == 0 goto label5;

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i2 = $r0.<android.view.View: int mScrollY>;

        if $i0 <= 0 goto label4;

     label2:
        virtualinvoke $r1.<android.widget.Scroller: void startScroll(int,int,int,int,int)>($i1, $i2, $i3, $i4, $i0);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

     label3:
        return 1;

     label4:
        $i0 = staticinvoke <android.webkit.WebView: int computeDuration(int,int)>($i3, $i4);

        goto label2;

     label5:
        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        virtualinvoke $r1.<android.widget.Scroller: void abortAnimation()>();

        virtualinvoke $r0.<android.view.View: void scrollTo(int,int)>($i1, $i2);

        goto label3;
    }

    private void recordNewContentSize(int, int, boolean)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        android.widget.Scroller $r1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $i2 = $i0 | $i1;

        if $i2 != 0 goto label1;

        return;

     label1:
        $i2 = $r0.<android.webkit.WebView: int mContentWidth>;

        if $i2 != $i0 goto label2;

        $i2 = $r0.<android.webkit.WebView: int mContentHeight>;

        if $i2 == $i1 goto label4;

     label2:
        $r0.<android.webkit.WebView: int mContentWidth> = $i0;

        $r0.<android.webkit.WebView: int mContentHeight> = $i1;

        $z1 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z1 != 0 goto label4;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i2 = specialinvoke $r0.<android.webkit.WebView: int pinLocX(int)>($i2);

        $r0.<android.view.View: int mScrollX> = $i2;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i2 = specialinvoke $r0.<android.webkit.WebView: int pinLocY(int)>($i2);

        $r0.<android.view.View: int mScrollY> = $i2;

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        virtualinvoke $r1.<android.widget.Scroller: void abortAnimation()>();

        $i2 = $r0.<android.view.View: int mScrollX>;

        if $i1 != $i2 goto label3;

        $i1 = $r0.<android.view.View: int mScrollY>;

        if $i0 == $i1 goto label4;

     label3:
        specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()>();

     label4:
        specialinvoke $r0.<android.webkit.WebView: void contentSizeChanged(boolean)>($z0);

        return;
    }

    private int scaleTrackballX(float, int)
    {
        android.webkit.WebView $r0;
        float $f0, $f1;
        int $i0, $i1, $i2;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $f1 = $f0 / 400.0F;

        $f0 = (float) $i0;

        $f0 = $f1 * $f0;

        $i1 = (int) $f0;

        $i0 = $i1;

        if $i1 <= 0 goto label2;

        $i2 = $r0.<android.webkit.WebView: int mTrackballXMove>;

        if $i1 <= $i2 goto label1;

        $i2 = $r0.<android.webkit.WebView: int mTrackballXMove>;

        $i1 = $i1 - $i2;

     label1:
        $r0.<android.webkit.WebView: int mTrackballXMove> = $i0;

        return $i1;

     label2:
        $i2 = $r0.<android.webkit.WebView: int mTrackballXMove>;

        if $i1 >= $i2 goto label1;

        $i2 = $r0.<android.webkit.WebView: int mTrackballXMove>;

        $i1 = $i1 - $i2;

        goto label1;
    }

    private int scaleTrackballY(float, int)
    {
        android.webkit.WebView $r0;
        float $f0, $f1;
        int $i0, $i1, $i2;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $i0 := @parameter1: int;

        $f1 = $f0 / 400.0F;

        $f0 = (float) $i0;

        $f0 = $f1 * $f0;

        $i1 = (int) $f0;

        $i0 = $i1;

        if $i1 <= 0 goto label2;

        $i2 = $r0.<android.webkit.WebView: int mTrackballYMove>;

        if $i1 <= $i2 goto label1;

        $i2 = $r0.<android.webkit.WebView: int mTrackballYMove>;

        $i1 = $i1 - $i2;

     label1:
        $r0.<android.webkit.WebView: int mTrackballYMove> = $i0;

        return $i1;

     label2:
        $i2 = $r0.<android.webkit.WebView: int mTrackballYMove>;

        if $i1 >= $i2 goto label1;

        $i2 = $r0.<android.webkit.WebView: int mTrackballYMove>;

        $i1 = $i1 - $i2;

        goto label1;
    }

    private void scrollZoomDraw(android.graphics.Canvas)
    {
        android.webkit.WebView $r0;
        android.graphics.Canvas $r1;
        android.graphics.Rect $r2, $r4;
        int $i0, $i1, $i2, $i3, $i6, $i7;
        android.graphics.Paint $r3;
        float $f0, $f1, $f2, $f3, $f4;
        long $l4, $l5;
        boolean $z0, $z1;
        android.graphics.Picture $r5;
        android.graphics.Region$Op $r6;
        android.webkit.WebViewCore $r7;
        android.graphics.Paint$Style $r8;
        byte $b8;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.graphics.Canvas;

        $f0 = $r0.<android.webkit.WebView: float mZoomScrollInvLimit>;

        $i2 = 0;

        $i3 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i3 == 11 goto label01;

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l5 = $r0.<android.webkit.WebView: long mZoomScrollStart>;

        $l4 = $l4 - $l5;

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>($l4, 500L);

        $i3 = (int) $l4;

        $i2 = $i3;

        $f0 = $r0.<android.webkit.WebView: float mZoomScrollInvLimit>;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f0 - $f1;

        $f1 = (float) $i3;

        $f0 = $f0 * $f1;

        $f0 = $f0 / 500.0F;

        $i3 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i3 != 10 goto label05;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f1 + $f0;

     label01:
        $f1 = specialinvoke $r0.<android.webkit.WebView: float scrollZoomGridScale(float)>($f0);

        $f0 = 1.0F / $f1;

        $i6 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i3 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $f0 = specialinvoke $r0.<android.webkit.WebView: float scrollZoomMagScale(float)>($f0);

        $r4 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect scrollZoomFrame(int,int,float)>($i6, $i3, $f0);

        if $i2 != 500 goto label02;

        $i2 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i2 != 9 goto label06;

        virtualinvoke $r0.<android.view.View: void setHorizontalScrollBarEnabled(boolean)>(1);

        virtualinvoke $r0.<android.view.View: void setVerticalScrollBarEnabled(boolean)>(1);

        specialinvoke $r0.<android.webkit.WebView: void updateTextEntry()>();

        $i2 = virtualinvoke $r4.<android.graphics.Rect: int centerX()>();

        $f2 = (float) $i2;

        $f3 = $r0.<android.webkit.WebView: float mActualScale>;

        $f2 = $f2 * $f3;

        $i2 = (int) $f2;

        $i1 = $i6 >> 1;

        $i2 = $i2 - $i1;

        $i1 = virtualinvoke $r4.<android.graphics.Rect: int centerY()>();

        $f2 = (float) $i1;

        $f3 = $r0.<android.webkit.WebView: float mActualScale>;

        $f2 = $f2 * $f3;

        $i1 = (int) $f2;

        $i0 = $i3 >> 1;

        $i1 = $i1 - $i0;

        virtualinvoke $r0.<android.view.View: void scrollTo(int,int)>($i2, $i1);

        $r0.<android.webkit.WebView: int mTouchMode> = 7;

     label02:
        $f2 = specialinvoke $r0.<android.webkit.WebView: float scrollZoomX(float)>($f1);

        $f3 = specialinvoke $r0.<android.webkit.WebView: float scrollZoomY(float)>($f1);

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f2, $f3);

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float)>($f1, $f1);

        $i2 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i2 == 11 goto label07;

        $z0 = 1;

     label03:
        $z1 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z1 == 0 goto label08;

        $i2 = virtualinvoke $r1.<android.graphics.Canvas: int save(int)>(2);

        $r2 = new android.graphics.Rect;

        $r5 = $r0.<android.webkit.WebView: android.graphics.Picture mHistoryPicture>;

        $i1 = virtualinvoke $r5.<android.graphics.Picture: int getWidth()>();

        $r5 = $r0.<android.webkit.WebView: android.graphics.Picture mHistoryPicture>;

        $i0 = virtualinvoke $r5.<android.graphics.Picture: int getHeight()>();

        specialinvoke $r2.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i0);

        $r6 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke $r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>($r2, $r6);

        $i1 = $r0.<android.webkit.WebView: int mBackgroundColor>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawColor(int)>($i1);

        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i2);

        $r5 = $r0.<android.webkit.WebView: android.graphics.Picture mHistoryPicture>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>($r5);

     label04:
        $i2 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i2 != 7 goto label09;

        return;

     label05:
        $f1 = $r0.<android.webkit.WebView: float mZoomScrollInvLimit>;

        $f0 = $f1 - $f0;

        goto label01;

     label06:
        $r0.<android.webkit.WebView: int mTouchMode> = 11;

        goto label02;

     label07:
        $z0 = 0;

        goto label03;

     label08:
        $r7 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $i2 = $r0.<android.webkit.WebView: int mBackgroundColor>;

        virtualinvoke $r7.<android.webkit.WebViewCore: void drawContentPicture(android.graphics.Canvas,int,boolean,boolean)>($r1, $i2, $z0, 1);

        goto label04;

     label09:
        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>(int)>(1);

        $r8 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r8);

        virtualinvoke $r3.<android.graphics.Paint: void setStrokeWidth(float)>(30.0F);

        virtualinvoke $r3.<android.graphics.Paint: void setARGB(int,int,int,int)>(80, 0, 0, 0);

        $i2 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i0 = $i2 - $i6;

        $i2 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i1 = $i2 - $i3;

        specialinvoke $r0.<android.webkit.WebView: void drawMagnifyFrame(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>($r1, $r4, $r3);

        $i2 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        virtualinvoke $r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>($r4);

        $i7 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $f1 = (float) $i7;

        $f2 = (float) $i0;

        $f1 = $f1 / $f2;

        $i0 = $r0.<android.webkit.WebView: int mContentWidth>;

        $f2 = (float) $i0;

        $f3 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f2 = $f2 * $f3;

        $f3 = (float) $i6;

        $b8 = $f2 cmpg $f3;

        if $b8 >= 0 goto label10;

        $f1 = specialinvoke $r0.<android.webkit.WebView: float zoomFrameScaleX(int,float,float)>($i6, 0.5F, $f1);

     label10:
        $i0 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $f2 = (float) $i0;

        $f3 = (float) $i1;

        $f2 = $f2 / $f3;

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        $f3 = (float) $i1;

        $f4 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f3 = $f3 * $f4;

        $f4 = (float) $i3;

        $b8 = $f3 cmpg $f4;

        if $b8 >= 0 goto label11;

        $f2 = specialinvoke $r0.<android.webkit.WebView: float zoomFrameScaleY(int,float,float)>($i3, 0.5F, $f2);

     label11:
        $i1 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $f3 = (float) $i1;

        $f4 = (float) $i6;

        $f1 = $f4 * $f1;

        $f1 = $f3 + $f1;

        $i6 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $f3 = (float) $i6;

        $f4 = (float) $i3;

        $f2 = $f4 * $f2;

        $f2 = $f3 + $f2;

        virtualinvoke $r1.<android.graphics.Canvas: void scale(float,float,float,float)>($f0, $f0, $f1, $f2);

        $z1 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z1 == 0 goto label13;

        $r5 = $r0.<android.webkit.WebView: android.graphics.Picture mHistoryPicture>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>($r5);

     label12:
        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i2);

        $i3 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i3 == 11 goto label14;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label13:
        $r7 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $i3 = $r0.<android.webkit.WebView: int mBackgroundColor>;

        virtualinvoke $r7.<android.webkit.WebViewCore: void drawContentPicture(android.graphics.Canvas,int,boolean,boolean)>($r1, $i3, $z0, 0);

        goto label12;

     label14:
        return;
    }

    private android.graphics.Rect scrollZoomFrame(int, int, float)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2;
        android.graphics.Rect $r1;
        byte $b6;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $f0 := @parameter2: float;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        $i2 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $i3 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $i4 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $i4 = $i4 + $i0;

        $i5 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $i5 = $i5 + $i1;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>($i2, $i3, $i4, $i5);

        $i2 = $r0.<android.webkit.WebView: int mContentWidth>;

        $f1 = (float) $i2;

        $f2 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f1 = $f1 * $f2;

        $f2 = (float) $i0;

        $b6 = $f1 cmpg $f2;

        if $b6 >= 0 goto label1;

        $f1 = specialinvoke $r0.<android.webkit.WebView: float zoomFrameScaleX(int,float,float)>($i0, $f0, 1.0F);

        $f2 = (float) $i0;

        $f1 = $f2 * $f1;

        $f2 = (float) $i0;

        $f1 = $f1 - $f2;

        $f1 = $f1 * 0.5F;

        $i0 = $r1.<android.graphics.Rect: int left>;

        $f2 = (float) $i0;

        $f2 = $f2 - $f1;

        $i0 = (int) $f2;

        $r1.<android.graphics.Rect: int left> = $i0;

        $i0 = $r1.<android.graphics.Rect: int right>;

        $f2 = (float) $i0;

        $f1 = $f2 + $f1;

        $i0 = (int) $f1;

        $r1.<android.graphics.Rect: int right> = $i0;

     label1:
        $i0 = $r0.<android.webkit.WebView: int mContentHeight>;

        $f1 = (float) $i0;

        $f2 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f1 = $f1 * $f2;

        $f2 = (float) $i1;

        $b6 = $f1 cmpg $f2;

        if $b6 >= 0 goto label2;

        $f0 = specialinvoke $r0.<android.webkit.WebView: float zoomFrameScaleY(int,float,float)>($i1, $f0, 1.0F);

        $f1 = (float) $i1;

        $f0 = $f1 * $f0;

        $f1 = (float) $i1;

        $f0 = $f0 - $f1;

        $f0 = $f0 * 0.5F;

        $i0 = $r1.<android.graphics.Rect: int top>;

        $f1 = (float) $i0;

        $f1 = $f1 - $f0;

        $i0 = (int) $f1;

        $r1.<android.graphics.Rect: int top> = $i0;

        $i0 = $r1.<android.graphics.Rect: int bottom>;

        $f1 = (float) $i0;

        $f0 = $f1 + $f0;

        $i0 = (int) $f0;

        $r1.<android.graphics.Rect: int bottom> = $i0;

        return $r1;

     label2:
        return $r1;
    }

    private float scrollZoomGridScale(float)
    {
        android.webkit.WebView $r0;
        float $f0;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $f0 = $f0 * 6.0F;

        $i0 = (int) $f0;

        $f0 = (float) $i0;

        $f0 = $f0 / 6.0F;

        $f0 = 1.0F / $f0;

        return $f0;
    }

    private float scrollZoomMagScale(float)
    {
        android.webkit.WebView $r0;
        float $f0, $f1;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $f0 = 2.0F * $f0;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f0 + $f1;

        $f0 = $f0 / 3.0F;

        return $f0;
    }

    private float scrollZoomX(float)
    {
        android.webkit.WebView $r0;
        float $f0, $f1;
        int $i0, $i1;
        byte $b2;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i1 = $r0.<android.webkit.WebView: int mContentWidth>;

        $f1 = (float) $i1;

        $f0 = $f1 * $f0;

        $f1 = (float) $i0;

        $f0 = $f0 - $f1;

        $i1 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i0 = $i1 - $i0;

        $b2 = $f0 cmpl 0.0F;

        if $b2 <= 0 goto label2;

        $i1 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $f1 = (float) $i1;

        $f0 = $f1 * $f0;

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

     label1:
        $f0 = neg $f0;

        return $f0;

     label2:
        $f0 = $f0 / 2.0F;

        goto label1;
    }

    private float scrollZoomY(float)
    {
        android.webkit.WebView $r0;
        float $f0, $f1;
        int $i0, $i1;
        byte $b2;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        $f1 = (float) $i1;

        $f0 = $f1 * $f0;

        $f1 = (float) $i0;

        $f0 = $f0 - $f1;

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i0 = $i1 - $i0;

        $b2 = $f0 cmpl 0.0F;

        if $b2 <= 0 goto label2;

        $i1 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $f1 = (float) $i1;

        $f0 = $f1 * $f0;

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

     label1:
        $f0 = neg $f0;

        return $f0;

     label2:
        $f0 = $f0 / 2.0F;

        goto label1;
    }

    private void sendFinalFocus(int, int, int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;
        android.webkit.WebViewCore$FocusData $r1;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = new android.webkit.WebViewCore$FocusData;

        specialinvoke $r1.<android.webkit.WebViewCore$FocusData: void <init>()>();

        $r1.<android.webkit.WebViewCore$FocusData: int mFrame> = $i0;

        $r1.<android.webkit.WebViewCore$FocusData: int mNode> = $i1;

        $r1.<android.webkit.WebViewCore$FocusData: int mX> = $i2;

        $r1.<android.webkit.WebViewCore$FocusData: int mY> = $i3;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r2.<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>(135, 0, 0, $r1);

        return;
    }

    private void sendKitFocus()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore$FocusData $r1, $r2;
        android.webkit.WebViewCore $r3;

        $r0 := @this: android.webkit.WebView;

        $r1 = new android.webkit.WebViewCore$FocusData;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        specialinvoke $r1.<android.webkit.WebViewCore$FocusData: void <init>(android.webkit.WebViewCore$FocusData)>($r2);

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(136, $r1);

        return;
    }

    private void sendMotionUp(int, int, int, int, int, int, int, boolean, boolean)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1;
        android.webkit.WebViewCore$TouchUpData $r1;
        android.webkit.WebViewCore$FocusData $r2;
        android.webkit.WebViewCore $r3;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $i6 := @parameter6: int;

        $z0 := @parameter7: boolean;

        $z1 := @parameter8: boolean;

        $r1 = new android.webkit.WebViewCore$TouchUpData;

        specialinvoke $r1.<android.webkit.WebViewCore$TouchUpData: void <init>()>();

        $r1.<android.webkit.WebViewCore$TouchUpData: int mMoveGeneration> = $i0;

        $r1.<android.webkit.WebViewCore$TouchUpData: int mBuildGeneration> = $i1;

        $r1.<android.webkit.WebViewCore$TouchUpData: int mSize> = $i6;

        $r1.<android.webkit.WebViewCore$TouchUpData: boolean mIsClick> = $z0;

        $r1.<android.webkit.WebViewCore$TouchUpData: boolean mRetry> = $z1;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$TouchUpData: int mFrame> = $i2;

        $r2.<android.webkit.WebViewCore$FocusData: int mFrame> = $i2;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$TouchUpData: int mNode> = $i3;

        $r2.<android.webkit.WebViewCore$FocusData: int mNode> = $i3;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$TouchUpData: int mX> = $i4;

        $r2.<android.webkit.WebViewCore$FocusData: int mX> = $i4;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$TouchUpData: int mY> = $i5;

        $r2.<android.webkit.WebViewCore$FocusData: int mY> = $i5;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(140, $r1);

        return;
    }

    private android.graphics.Rect sendOurVisibleRect()
    {
        android.webkit.WebView $r0;
        android.graphics.Rect $r1, $r2, $r4;
        int $i0, $i1;
        boolean $z0;
        android.webkit.WebViewCore $r3;

        $r0 := @this: android.webkit.WebView;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        specialinvoke $r0.<android.webkit.WebView: void calcOurContentVisibleRect(android.graphics.Rect)>($r2);

        $z0 = $r0.<android.webkit.WebView: boolean mFindIsUp>;

        if $z0 == 0 goto label1;

        $i0 = $r2.<android.graphics.Rect: int bottom>;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>(79);

        $i0 = $i0 - $i1;

        $r2.<android.graphics.Rect: int bottom> = $i0;

     label1:
        $r1 = $r0.<android.webkit.WebView: android.graphics.Rect mLastVisibleRectSent>;

        $z0 = virtualinvoke $r2.<android.graphics.Rect: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label2;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $i0 = $r2.<android.graphics.Rect: int left>;

        $i1 = $r2.<android.graphics.Rect: int top>;

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int,int,int)>(107, $i0, $i1);

        $r0.<android.webkit.WebView: android.graphics.Rect mLastVisibleRectSent> = $r2;

     label2:
        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        $z0 = virtualinvoke $r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>($r1);

        if $z0 == 0 goto label3;

        $r4 = $r0.<android.webkit.WebView: android.graphics.Rect mLastGlobalRect>;

        $z0 = virtualinvoke $r1.<android.graphics.Rect: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label4;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(116, $r1);

        $r0.<android.webkit.WebView: android.graphics.Rect mLastGlobalRect> = $r1;

        return $r2;

     label3:
        return $r2;

     label4:
        return $r2;
    }

    private boolean sendViewSizeZoom()
    {
        android.webkit.WebView $r0;
        java.lang.Float $r1;
        float $f0, $f1;
        int $i0, $i1, $i2;
        boolean $z0;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $f0 = (float) $i0;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f0 * $f1;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i1 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $f0 = (float) $i1;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f0 * $f1;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i2 = $r0.<android.webkit.WebView: int mLastWidthSent>;

        if $i0 <= $i2 goto label1;

        $z0 = $r0.<android.webkit.WebView: boolean mWrapContent>;

        if $z0 == 0 goto label1;

        $i1 = 0;

     label1:
        $i2 = $r0.<android.webkit.WebView: int mLastWidthSent>;

        if $i0 != $i2 goto label2;

        $i2 = $r0.<android.webkit.WebView: int mLastHeightSent>;

        if $i1 == $i2 goto label3;

     label2:
        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r1 = new java.lang.Float;

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        specialinvoke $r1.<java.lang.Float: void <init>(float)>($f0);

        virtualinvoke $r2.<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>(105, $i0, $i1, $r1);

        $r0.<android.webkit.WebView: int mLastWidthSent> = $i0;

        $r0.<android.webkit.WebView: int mLastHeightSent> = $i1;

        return 1;

     label3:
        return 0;
    }

    private void setContentScrollBy(int, int, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0, $z1;
        android.graphics.Rect $r1;
        int $i0, $i1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $z1 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z1 == 0 goto label1;

        return;

     label1:
        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        $z1 = $r0.<android.webkit.WebView: boolean mHeightCanMeasure>;

        if $z1 == 0 goto label3;

        if $i1 == 0 goto label2;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        specialinvoke $r0.<android.webkit.WebView: void calcOurVisibleRect(android.graphics.Rect)>($r1);

        virtualinvoke $r1.<android.graphics.Rect: void offset(int,int)>($i0, $i1);

        virtualinvoke $r0.<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>($r1);

     label2:
        if $i1 != 0 goto label4;

        if $i0 == 0 goto label5;

        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>($i0, 0, $z0, 0);

        return;

     label3:
        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>($i0, $i1, $z0, 0);

        return;

     label4:
        return;

     label5:
        return;
    }

    private boolean setContentScrollTo(int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollTo(int,int,boolean,int)>($i0, $i1, 0, 0);

        $i2 = $r0.<android.view.View: int mScrollX>;

        if $i2 != $i0 goto label2;

        $i0 = $r0.<android.view.View: int mScrollY>;

        if $i0 == $i1 goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    private void setFocusData(int, int, int, int, int, int, boolean)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        android.webkit.WebViewCore$FocusData $r1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $z0 := @parameter6: boolean;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$FocusData: int mMoveGeneration> = $i0;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$FocusData: int mBuildGeneration> = $i1;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$FocusData: int mFrame> = $i2;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$FocusData: int mNode> = $i3;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$FocusData: int mX> = $i4;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$FocusData: int mY> = $i5;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        $r1.<android.webkit.WebViewCore$FocusData: boolean mIgnoreNullFocus> = $z0;

        return;
    }

    private void setNewZoomScale(float, boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4;
        byte $b2;
        android.webkit.CallbackProxy $r1;

        $r0 := @this: android.webkit.WebView;

        $f2 := @parameter0: float;

        $z0 := @parameter1: boolean;

        $f1 = $r0.<android.webkit.WebView: float mMinZoomScale>;

        $b2 = $f2 cmpg $f1;

        if $b2 >= 0 goto label4;

        $f2 = $r0.<android.webkit.WebView: float mMinZoomScale>;

     label1:
        $f1 = $r0.<android.webkit.WebView: float mActualScale>;

        $b2 = $f2 cmpl $f1;

        if $b2 != 0 goto label2;

        if $z0 == 0 goto label7;

     label2:
        $z0 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z0 == 0 goto label5;

        $f1 = $r0.<android.webkit.WebView: float mActualScale>;

        $b2 = $f2 cmpl $f1;

        if $b2 == 0 goto label3;

        $z0 = $r0.<android.webkit.WebView: boolean mPreviewZoomOnly>;

        if $z0 != 0 goto label3;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $f1 = $r0.<android.webkit.WebView: float mActualScale>;

        virtualinvoke $r1.<android.webkit.CallbackProxy: void onScaleChanged(float,float)>($f1, $f2);

     label3:
        $r0.<android.webkit.WebView: float mActualScale> = $f2;

        $f2 = 1.0F / $f2;

        $r0.<android.webkit.WebView: float mInvActualScale> = $f2;

        $z0 = $r0.<android.webkit.WebView: boolean mPreviewZoomOnly>;

        if $z0 != 0 goto label8;

        specialinvoke $r0.<android.webkit.WebView: boolean sendViewSizeZoom()>();

        return;

     label4:
        $f1 = $r0.<android.webkit.WebView: float mMaxZoomScale>;

        $b2 = $f2 cmpl $f1;

        if $b2 <= 0 goto label1;

        $f2 = $r0.<android.webkit.WebView: float mMaxZoomScale>;

        goto label1;

     label5:
        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f2 * $f1;

        $f1 = (float) $i0;

        $f1 = $f1 * $f0;

        $f3 = $f0 - 1.0F;

        $f4 = $r0.<android.webkit.WebView: float mZoomCenterX>;

        $f3 = $f3 * $f4;

        $f1 = $f1 + $f3;

        $f3 = (float) $i1;

        $f3 = $f3 * $f0;

        $f0 = $f0 - 1.0F;

        $f4 = $r0.<android.webkit.WebView: float mZoomCenterY>;

        $f0 = $f0 * $f4;

        $f0 = $f3 + $f0;

        $f3 = $r0.<android.webkit.WebView: float mActualScale>;

        $b2 = $f2 cmpl $f3;

        if $b2 == 0 goto label6;

        $z0 = $r0.<android.webkit.WebView: boolean mPreviewZoomOnly>;

        if $z0 != 0 goto label6;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $f3 = $r0.<android.webkit.WebView: float mActualScale>;

        virtualinvoke $r1.<android.webkit.CallbackProxy: void onScaleChanged(float,float)>($f3, $f2);

     label6:
        $r0.<android.webkit.WebView: float mActualScale> = $f2;

        $f2 = 1.0F / $f2;

        $r0.<android.webkit.WebView: float mInvActualScale> = $f2;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $i0 = specialinvoke $r0.<android.webkit.WebView: int pinLocX(int)>($i0);

        $r0.<android.view.View: int mScrollX> = $i0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i0 = specialinvoke $r0.<android.webkit.WebView: int pinLocY(int)>($i0);

        $r0.<android.view.View: int mScrollY> = $i0;

        $z0 = $r0.<android.webkit.WebView: boolean mPreviewZoomOnly>;

        if $z0 != 0 goto label9;

        specialinvoke $r0.<android.webkit.WebView: boolean sendViewSizeZoom()>();

        specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()>();

        return;

     label7:
        return;

     label8:
        return;

     label9:
        return;
    }

    private void setTextEntryRect(int, int, int, int)
    {
        android.webkit.WebView $r0;
        android.webkit.TextDialog $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        $i2 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i2);

        $i3 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i3);

        $r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r1.<android.webkit.TextDialog: void setRect(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    private void setZoomScrollIn()
    {
        android.webkit.WebView $r0;
        long $l0;

        $r0 := @this: android.webkit.WebView;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<android.webkit.WebView: long mZoomScrollStart> = $l0;

        return;
    }

    private void spawnContentScrollTo(int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollTo(int,int,boolean,int)>($i0, $i1, 1, 0);

        return;
    }

    private void startZoomScrollOut()
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;
        android.webkit.WebSettings $r1;
        boolean $z0;
        android.widget.ZoomButtonsController $r2;
        float $f0, $f1;
        android.widget.Scroller $r3;
        long $l4;
        android.graphics.Rect $r4;
        java.lang.Runnable $r5;
        android.os.Handler $r6;
        android.webkit.WebView$ExtendedZoomControls $r7;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.view.View: void setHorizontalScrollBarEnabled(boolean)>(0);

        virtualinvoke $r0.<android.view.View: void setVerticalScrollBarEnabled(boolean)>(0);

        $r1 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r1.<android.webkit.WebSettings: boolean getBuiltInZoomControls()>();

        if $z0 == 0 goto label2;

        $r2 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        $z0 = virtualinvoke $r2.<android.widget.ZoomButtonsController: boolean isVisible()>();

        if $z0 == 0 goto label1;

        $r2 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        virtualinvoke $r2.<android.widget.ZoomButtonsController: void setVisible(boolean)>(0);

     label1:
        $i2 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i3 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i1 = $i2 >> 1;

        $f0 = (float) $i1;

        $r0.<android.webkit.WebView: float mLastTouchX> = $f0;

        $i0 = $i3 >> 1;

        $f0 = (float) $i0;

        $r0.<android.webkit.WebView: float mLastTouchY> = $f0;

        $r3 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        virtualinvoke $r3.<android.widget.Scroller: void abortAnimation()>();

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<android.webkit.WebView: long mZoomScrollStart> = $l4;

        $f0 = $r0.<android.webkit.WebView: float mZoomScrollInvLimit>;

        $f0 = specialinvoke $r0.<android.webkit.WebView: float scrollZoomMagScale(float)>($f0);

        $r4 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect scrollZoomFrame(int,int,float)>($i2, $i3, $f0);

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i1 = $i2 + $i1;

        $f0 = (float) $i1;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f0 * $f1;

        $i1 = (int) $f0;

        $i2 = virtualinvoke $r4.<android.graphics.Rect: int width()>();

        $i2 = $i2 >> 1;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1);

        $r0.<android.webkit.WebView: int mZoomScrollX> = $i1;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $i0 = $i1 + $i0;

        $f0 = (float) $i0;

        $f1 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f0 * $f1;

        $i0 = (int) $f0;

        $i1 = virtualinvoke $r4.<android.graphics.Rect: int height()>();

        $i1 = $i1 >> 1;

        $i0 = $i0 - $i1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

        $r0.<android.webkit.WebView: int mZoomScrollY> = $i0;

        virtualinvoke $r0.<android.view.View: void scrollTo(int,int)>(0, 0);

        specialinvoke $r0.<android.webkit.WebView: void clearTextEntry()>();

        return;

     label2:
        $r5 = $r0.<android.webkit.WebView: java.lang.Runnable mZoomControlRunnable>;

        if $r5 == null goto label3;

        $r6 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r5 = $r0.<android.webkit.WebView: java.lang.Runnable mZoomControlRunnable>;

        virtualinvoke $r6.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r5);

     label3:
        $r7 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        if $r7 == null goto label1;

        $r7 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        virtualinvoke $r7.<android.webkit.WebView$ExtendedZoomControls: void hide()>();

        goto label1;
    }

    private void updateSelection()
    {
        android.webkit.WebView $r0;
        android.graphics.Rect $r1;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0;
        boolean $z0;
        android.webkit.TextDialog $r2;

        $r0 := @this: android.webkit.WebView;

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 != 0 goto label1;

        return;

     label1:
        $f0 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i0 = (int) $f0;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i0 + $i1;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $f0 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i1 = (int) $f0;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i1 + $i2;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i1);

        $r1 = new android.graphics.Rect;

        $i2 = $r0.<android.webkit.WebView: int mNavSlop>;

        $i2 = $i0 - $i2;

        $i3 = $r0.<android.webkit.WebView: int mNavSlop>;

        $i3 = $i1 - $i3;

        $i4 = $r0.<android.webkit.WebView: int mNavSlop>;

        $i0 = $i4 + $i0;

        $i4 = $r0.<android.webkit.WebView: int mNavSlop>;

        $i1 = $i4 + $i1;

        specialinvoke $r1.<android.graphics.Rect: void <init>(int,int,int,int)>($i2, $i3, $i0, $i1);

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label2;

        $r2 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r2.<android.webkit.TextDialog: void updateCachedTextfield()>();

     label2:
        specialinvoke $r0.<android.webkit.WebView: void nativeSelectBestAt(android.graphics.Rect)>($r1);

        return;
    }

    private void updateTextEntry()
    {
        android.webkit.WebView $r0;
        java.util.HashMap $r1;
        java.lang.Thread $r2;
        android.webkit.WebView$UpdateTextEntryAdapter $r3;
        android.webkit.TextDialog $r4;
        android.content.Context $r5;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.webkit.WebView$FocusNode $r6;
        float $f0;
        android.graphics.Rect $r7, $r8;
        android.text.Editable $r9;
        java.lang.String $r10, $r11, $r16;
        byte $b6;
        android.webkit.WebViewCore $r12;
        android.webkit.WebSettings $r13;
        android.os.Handler $r14;
        android.os.Message $r15;

        $r0 := @this: android.webkit.WebView;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        if $r4 != null goto label01;

        $r4 = new android.webkit.TextDialog;

        $r5 = $r0.<android.view.View: android.content.Context mContext>;

        specialinvoke $r4.<android.webkit.TextDialog: void <init>(android.content.Context,android.webkit.WebView)>($r5, $r0);

        $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry> = $r4;

        $r0.<android.webkit.WebView: int mTextGeneration> = 0;

     label01:
        $z0 = virtualinvoke $r0.<android.view.ViewGroup: boolean hasFocus()>();

        if $z0 != 0 goto label02;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $z0 = virtualinvoke $r4.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label03;

     label02:
        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 < 9 goto label04;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 > 11 goto label04;

     label03:
        $r0.<android.webkit.WebView: boolean mNeedsUpdateTextEntry> = 1;

        return;

     label04:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 == 0 goto label05;

        $z1 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        if $z1 != 0 goto label06;

     label05:
        if $z0 == 0 goto label16;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void remove()>();

        return;

     label06:
        $r6 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $z1 = $r6.<android.webkit.WebView$FocusNode: boolean mIsTextField>;

        if $z1 != 0 goto label07;

        $z1 = $r6.<android.webkit.WebView$FocusNode: boolean mIsTextArea>;

        if $z1 != 0 goto label07;

        if $z0 == 0 goto label17;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void remove()>();

        return;

     label07:
        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $i0 = $r6.<android.webkit.WebView$FocusNode: int mTextSize>;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        $f0 = (float) $i0;

        virtualinvoke $r4.<android.widget.TextView: void setTextSize(float)>($f0);

        $r7 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()>();

        $r8 = $r6.<android.webkit.WebView$FocusNode: android.graphics.Rect mBounds>;

        $z1 = staticinvoke <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>($r8, $r7);

        if $z1 == 0 goto label18;

        $r7 = $r6.<android.webkit.WebView$FocusNode: android.graphics.Rect mBounds>;

        $i1 = $r7.<android.graphics.Rect: int left>;

        $r7 = $r6.<android.webkit.WebView$FocusNode: android.graphics.Rect mBounds>;

        $i2 = $r7.<android.graphics.Rect: int top>;

        $r7 = $r6.<android.webkit.WebView$FocusNode: android.graphics.Rect mBounds>;

        $i3 = virtualinvoke $r7.<android.graphics.Rect: int width()>();

        $r7 = $r6.<android.webkit.WebView$FocusNode: android.graphics.Rect mBounds>;

        $i4 = virtualinvoke $r7.<android.graphics.Rect: int height()>();

        if $z0 == 0 goto label09;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $i0 = $r6.<android.webkit.WebView$FocusNode: int mNodePointer>;

        $z0 = virtualinvoke $r4.<android.webkit.TextDialog: boolean isSameTextField(int)>($i0);

        if $z0 == 0 goto label09;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $r9 = virtualinvoke $r4.<android.widget.EditText: android.text.Editable getText()>();

        $i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>($r9);

        $i5 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r9);

        specialinvoke $r0.<android.webkit.WebView: void setTextEntryRect(int,int,int,int)>($i1, $i2, $i3, $i4);

        $r10 = $r6.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        if $r10 == null goto label08;

        $r10 = $r6.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        $r11 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z0 != 0 goto label08;

        $i1 = $r6.<android.webkit.WebView$FocusNode: int mRootTextGeneration>;

        $i2 = $r0.<android.webkit.WebView: int mTextGeneration>;

        if $i1 != $i2 goto label08;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $r10 = $r6.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setTextAndKeepSelection(java.lang.String)>($r10);

        return;

     label08:
        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int,int)>($r9, $i0, $i5);

        return;

     label09:
        $r10 = $r6.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        specialinvoke $r0.<android.webkit.WebView: void setTextEntryRect(int,int,int,int)>($i1, $i2, $i3, $i4);

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $z0 = $r6.<android.webkit.WebView$FocusNode: boolean mIsRtlText>;

        if $z0 == 0 goto label13;

        $b6 = 5;

     label10:
        virtualinvoke $r4.<android.widget.TextView: void setGravity(int)>($b6);

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $i0 = $r6.<android.webkit.WebView$FocusNode: int mNodePointer>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setNodePointer(int)>($i0);

        $i0 = -1;

        $z0 = $r6.<android.webkit.WebView$FocusNode: boolean mIsTextField>;

        if $z0 == 0 goto label11;

        $i0 = $r6.<android.webkit.WebView$FocusNode: int mMaxLength>;

        $r12 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r13 = virtualinvoke $r12.<android.webkit.WebViewCore: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r13.<android.webkit.WebSettings: boolean getSaveFormData()>();

        if $z0 == 0 goto label11;

        $r11 = $r6.<android.webkit.WebView$FocusNode: java.lang.String mName>;

        if $r11 == null goto label11;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r11 = $r6.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("text", $r11);

        $r14 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $i5 = $r6.<android.webkit.WebView$FocusNode: int mNodePointer>;

        $r15 = virtualinvoke $r14.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(6, $i5, 0, $r1);

        $r3 = new android.webkit.WebView$UpdateTextEntryAdapter;

        $r11 = $r6.<android.webkit.WebView$FocusNode: java.lang.String mName>;

        $r16 = virtualinvoke $r0.<android.webkit.WebView: java.lang.String getUrl()>();

        specialinvoke $r3.<android.webkit.WebView$UpdateTextEntryAdapter: void <init>(android.webkit.WebView,java.lang.String,java.lang.String,android.os.Message)>($r0, $r11, $r16, $r15);

        $r2 = new java.lang.Thread;

        specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3);

        virtualinvoke $r2.<java.lang.Thread: void start()>();

     label11:
        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setMaxLength(int)>($i0);

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setAdapterCustom(android.webkit.TextDialog$AutoCompleteAdapter)>(null);

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $z0 = $r6.<android.webkit.WebView$FocusNode: boolean mIsTextField>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setSingleLine(boolean)>($z0);

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $z0 = $r6.<android.webkit.WebView$FocusNode: boolean mIsPassword>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setInPassword(boolean)>($z0);

        if $r10 != null goto label14;

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setText(java.lang.CharSequence,int,int)>("", 0, 0);

     label12:
        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.view.View: boolean requestFocus()>();

        return;

     label13:
        $b6 = 0;

        goto label10;

     label14:
        $z0 = $r6.<android.webkit.WebView$FocusNode: boolean mIsTextField>;

        if $z0 == 0 goto label15;

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setText(java.lang.CharSequence,int,int)>($r10, $i0, $i0);

        goto label12;

     label15:
        $r4 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r4.<android.webkit.TextDialog: void setText(java.lang.CharSequence,int,int)>($r10, 0, 0);

        goto label12;

     label16:
        return;

     label17:
        return;

     label18:
        return;
    }

    private void updateZoomButtonsEnabled()
    {
        android.webkit.WebView $r0;
        float $f0, $f1;
        byte $b0;
        boolean $z0, $z1;
        android.widget.ZoomButtonsController $r1;
        android.view.View $r2;
        android.widget.ImageView $r3;

        $r0 := @this: android.webkit.WebView;

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        $f1 = $r0.<android.webkit.WebView: float mMaxZoomScale>;

        $b0 = $f0 cmpg $f1;

        if $b0 >= 0 goto label05;

        $z0 = 1;

     label01:
        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        $f1 = $r0.<android.webkit.WebView: float mMinZoomScale>;

        $b0 = $f0 cmpl $f1;

        if $b0 <= 0 goto label06;

        $z1 = 1;

     label02:
        if $z0 != 0 goto label07;

        if $z1 != 0 goto label07;

        $r1 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        $r2 = virtualinvoke $r1.<android.widget.ZoomButtonsController: android.view.View getZoomControls()>();

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(8);

        $r3 = $r0.<android.webkit.WebView: android.widget.ImageView mZoomFitPageButton>;

        virtualinvoke $r3.<android.view.View: void setVisibility(int)>(8);

     label03:
        $r3 = $r0.<android.webkit.WebView: android.widget.ImageView mZoomOverviewButton>;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean canZoomScrollOut()>();

        if $z0 == 0 goto label10;

        $b0 = 0;

     label04:
        virtualinvoke $r3.<android.view.View: void setVisibility(int)>($b0);

        return;

     label05:
        $z0 = 0;

        goto label01;

     label06:
        $z1 = 0;

        goto label02;

     label07:
        $r1 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        $r2 = virtualinvoke $r1.<android.widget.ZoomButtonsController: android.view.View getZoomControls()>();

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(0);

        $r3 = $r0.<android.webkit.WebView: android.widget.ImageView mZoomFitPageButton>;

        virtualinvoke $r3.<android.view.View: void setVisibility(int)>(0);

        $r1 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        virtualinvoke $r1.<android.widget.ZoomButtonsController: void setZoomInEnabled(boolean)>($z0);

        $r1 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        virtualinvoke $r1.<android.widget.ZoomButtonsController: void setZoomOutEnabled(boolean)>($z1);

        $r3 = $r0.<android.webkit.WebView: android.widget.ImageView mZoomFitPageButton>;

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        $b0 = $f0 cmpl 1.0F;

        if $b0 == 0 goto label09;

        $z0 = 1;

     label08:
        virtualinvoke $r3.<android.view.View: void setEnabled(boolean)>($z0);

        goto label03;

     label09:
        $z0 = 0;

        goto label08;

     label10:
        $b0 = 8;

        goto label04;
    }

    private void viewInvalidate()
    {
        android.webkit.WebView $r0;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;
    }

    private void viewInvalidate(int, int, int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        $i2 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i2);

        $i3 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i3);

        virtualinvoke $r0.<android.view.View: void invalidate(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    private void viewInvalidateDelayed(long, int, int, int, int)
    {
        android.webkit.WebView $r0;
        long $l0;
        int $i1, $i2, $i3, $i4;

        $r0 := @this: android.webkit.WebView;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        $i2 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i2);

        $i3 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i3);

        $i4 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i4);

        virtualinvoke $r0.<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>($l0, $i1, $i2, $i3, $i4);

        return;
    }

    private float zoomFrameScaleX(int, float, float)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $i1 = $r0.<android.webkit.WebView: int mContentWidth>;

        if $i1 > $i0 goto label1;

        return $f0;

     label1:
        $f2 = (float) $i0;

        $i1 = $r0.<android.webkit.WebView: int mContentWidth>;

        $f3 = (float) $i1;

        $f4 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f3 = $f3 * $f4;

        $f2 = $f2 - $f3;

        $f3 = (float) $i0;

        $f4 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f4 = 1.0F - $f4;

        $f3 = $f3 * $f4;

        $f2 = $f2 / $f3;

        $f0 = $f0 * $f2;

        $f2 = 1.0F - $f2;

        $f1 = $f2 * $f1;

        $f0 = $f0 + $f1;

        return $f0;
    }

    private float zoomFrameScaleY(int, float, float)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        if $i1 > $i0 goto label1;

        return $f0;

     label1:
        $f2 = (float) $i0;

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        $f3 = (float) $i1;

        $f4 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f3 = $f3 * $f4;

        $f2 = $f2 - $f3;

        $f3 = (float) $i0;

        $f4 = $r0.<android.webkit.WebView: float mZoomScrollLimit>;

        $f4 = 1.0F - $f4;

        $f3 = $f3 * $f4;

        $f2 = $f2 / $f3;

        $f0 = $f0 * $f2;

        $f2 = 1.0F - $f2;

        $f1 = $f2 * $f1;

        $f0 = $f0 + $f1;

        return $f0;
    }

    private void zoomScrollOut()
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean canZoomScrollOut()>();

        if $z0 != 0 goto label1;

        $r0.<android.webkit.WebView: int mTouchMode> = 7;

        return;

     label1:
        specialinvoke $r0.<android.webkit.WebView: void startZoomScrollOut()>();

        $r0.<android.webkit.WebView: int mTouchMode> = 10;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;
    }

    private void zoomScrollTap(float, float)
    {
        android.webkit.WebView $r0;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        int $i0, $i1, $i2;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 = $r0.<android.webkit.WebView: float mZoomScrollInvLimit>;

        $f2 = specialinvoke $r0.<android.webkit.WebView: float scrollZoomGridScale(float)>($f2);

        $f3 = specialinvoke $r0.<android.webkit.WebView: float scrollZoomX(float)>($f2);

        $f4 = specialinvoke $r0.<android.webkit.WebView: float scrollZoomY(float)>($f2);

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i1 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $f5 = (float) $i0;

        $f5 = $f5 * $f2;

        $f5 = $f5 / 2.0F;

        $f0 = $f0 - $f5;

        $f5 = (float) $i1;

        $f5 = $f5 * $f2;

        $f5 = $f5 / 2.0F;

        $f1 = $f1 - $f5;

        $i2 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i0 = $i2 - $i0;

        $f0 = $f0 - $f3;

        $f0 = $f0 / $f2;

        $i2 = (int) $f0;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        $r0.<android.webkit.WebView: int mZoomScrollX> = $i0;

        $i0 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i1 = $i0 - $i1;

        $f0 = $f1 - $f4;

        $f0 = $f0 / $f2;

        $i0 = (int) $f0;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i0);

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $r0.<android.webkit.WebView: int mZoomScrollY> = $i1;

        return;
    }

    private boolean zoomWithPreview(float)
    {
        android.webkit.WebView $r0;
        float $f0, $f1;
        long $l0;
        byte $b1;

        $r0 := @this: android.webkit.WebView;

        $f1 := @parameter0: float;

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        $b1 = $f1 cmpl 0.95F;

        if $b1 <= 0 goto label1;

        $b1 = $f1 cmpg 1.05F;

        if $b1 >= 0 goto label1;

        $f1 = 1.0F;

     label1:
        specialinvoke $r0.<android.webkit.WebView: void setNewZoomScale(float,boolean)>($f1, 0);

        $f1 = $r0.<android.webkit.WebView: float mActualScale>;

        $b1 = $f0 cmpl $f1;

        if $b1 == 0 goto label2;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r0.<android.webkit.WebView: long mZoomStart> = $l0;

        $f1 = 1.0F / $f0;

        $r0.<android.webkit.WebView: float mInvInitialZoomScale> = $f1;

        $f1 = $r0.<android.webkit.WebView: float mActualScale>;

        $f1 = 1.0F / $f1;

        $r0.<android.webkit.WebView: float mInvFinalZoomScale> = $f1;

        $f1 = $r0.<android.webkit.WebView: float mActualScale>;

        $r0.<android.webkit.WebView: float mZoomScale> = $f1;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return 1;

     label2:
        return 0;
    }

    public void addJavascriptInterface(java.lang.Object, java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        java.util.HashMap $r3;
        android.webkit.WebViewCore $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("object", $r1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("interfaceName", $r2);

        $r4 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r4.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(138, $r3);

        return;
    }

    public boolean canGoBack()
    {
        android.webkit.WebView $r0;
        android.webkit.CallbackProxy $r1;
        android.webkit.WebBackForwardList $r2;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r2 = virtualinvoke $r1.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        entermonitor $r2;

     label1:
        $z0 = virtualinvoke $r2.<android.webkit.WebBackForwardList: boolean getClearPending()>();

        if $z0 == 0 goto label3;

        exitmonitor $r2;

     label2:
        return 0;

     label3:
        $i0 = virtualinvoke $r2.<android.webkit.WebBackForwardList: int getCurrentIndex()>();

        if $i0 <= 0 goto label8;

        $z0 = 1;

     label4:
        exitmonitor $r2;

     label5:
        return $z0;

     label6:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r3;

     label8:
        $z0 = 0;

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean canGoBackOrForward(int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        android.webkit.CallbackProxy $r1;
        android.webkit.WebBackForwardList $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r2 = virtualinvoke $r1.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        entermonitor $r2;

     label1:
        $z0 = virtualinvoke $r2.<android.webkit.WebBackForwardList: boolean getClearPending()>();

        if $z0 == 0 goto label3;

        exitmonitor $r2;

     label2:
        return 0;

     label3:
        $i1 = virtualinvoke $r2.<android.webkit.WebBackForwardList: int getCurrentIndex()>();

        $i0 = $i1 + $i0;

        if $i0 < 0 goto label8;

        $i1 = virtualinvoke $r2.<android.webkit.WebBackForwardList: int getSize()>();

        if $i0 >= $i1 goto label8;

        $z0 = 1;

     label4:
        exitmonitor $r2;

     label5:
        return $z0;

     label6:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r3;

     label8:
        $z0 = 0;

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean canGoForward()
    {
        android.webkit.WebView $r0;
        android.webkit.CallbackProxy $r1;
        android.webkit.WebBackForwardList $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r2 = virtualinvoke $r1.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        entermonitor $r2;

     label1:
        $z0 = virtualinvoke $r2.<android.webkit.WebBackForwardList: boolean getClearPending()>();

        if $z0 == 0 goto label3;

        exitmonitor $r2;

     label2:
        return 0;

     label3:
        $i0 = virtualinvoke $r2.<android.webkit.WebBackForwardList: int getCurrentIndex()>();

        $i1 = virtualinvoke $r2.<android.webkit.WebBackForwardList: int getSize()>();

        $i1 = $i1 - 1;

        if $i0 >= $i1 goto label8;

        $z0 = 1;

     label4:
        exitmonitor $r2;

     label5:
        return $z0;

     label6:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r3;

     label8:
        $z0 = 0;

        goto label4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public android.graphics.Picture capturePicture()
    {
        android.webkit.WebView $r0;
        android.graphics.Picture $r1;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r1 = virtualinvoke $r2.<android.webkit.WebViewCore: android.graphics.Picture copyContentPicture()>();

        return $r1;
    }

    public void clearCache(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;
        android.webkit.WebViewCore $r1;
        byte $b0;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $z0 == 0 goto label2;

        $b0 = 1;

     label1:
        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int,int,int)>(111, $b0, 0);

        return;

     label2:
        $b0 = 0;

        goto label1;
    }

    public void clearFormData()
    {
        android.webkit.WebView $r0;
        boolean $z0;
        android.webkit.TextDialog $r1;

        $r0 := @this: android.webkit.WebView;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r1.<android.webkit.TextDialog: void setAdapterCustom(android.webkit.TextDialog$AutoCompleteAdapter)>(null);

        return;

     label1:
        return;
    }

    public void clearHistory()
    {
        android.webkit.WebView $r0;
        android.webkit.WebBackForwardList $r1;
        android.webkit.CallbackProxy $r2;
        android.webkit.WebViewCore $r3;

        $r0 := @this: android.webkit.WebView;

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r1 = virtualinvoke $r2.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        virtualinvoke $r1.<android.webkit.WebBackForwardList: void setClearPending()>();

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int)>(112);

        return;
    }

    public void clearMatches()
    {
        android.webkit.WebView $r0;
        int $i0, $i1;

        $r0 := @this: android.webkit.WebView;

        $r0.<android.webkit.WebView: boolean mFindIsUp> = 0;

        specialinvoke $r0.<android.webkit.WebView: void nativeSetFindIsDown()>();

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r0.<android.view.View: int mScrollY>;

        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollTo(int,int,boolean,int)>($i0, $i1, 0, 0);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;
    }

    public void clearSslPreferences()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int)>(150);

        return;
    }

    public void clearView()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        $r0.<android.webkit.WebView: int mContentWidth> = 0;

        $r0.<android.webkit.WebView: int mContentHeight> = 0;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int)>(134);

        return;
    }

    protected int computeHorizontalScrollRange()
    {
        android.webkit.WebView $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $z0 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z0 == 0 goto label1;

        $i0 = $r0.<android.webkit.WebView: int mHistoryWidth>;

        return $i0;

     label1:
        $i0 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        return $i0;
    }

    public void computeScroll()
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;
        android.widget.Scroller $r1;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $z0 = virtualinvoke $r1.<android.widget.Scroller: boolean computeScrollOffset()>();

        if $z0 == 0 goto label2;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $i2 = virtualinvoke $r1.<android.widget.Scroller: int getCurrX()>();

        $r0.<android.view.View: int mScrollX> = $i2;

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $i2 = virtualinvoke $r1.<android.widget.Scroller: int getCurrY()>();

        $r0.<android.view.View: int mScrollY> = $i2;

        virtualinvoke $r0.<android.view.View: void postInvalidate()>();

        $i2 = $r0.<android.view.View: int mScrollX>;

        if $i0 != $i2 goto label1;

        $i0 = $r0.<android.view.View: int mScrollY>;

        if $i1 == $i0 goto label3;

     label1:
        specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()>();

        return;

     label2:
        specialinvoke $r0.<android.view.View: void computeScroll()>();

        return;

     label3:
        return;
    }

    protected int computeVerticalScrollRange()
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $z0 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z0 == 0 goto label1;

        $i0 = $r0.<android.webkit.WebView: int mHistoryHeight>;

        return $i0;

     label1:
        $i0 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i0);

        $i1 = $i0;

        $z0 = $r0.<android.webkit.WebView: boolean mFindIsUp>;

        if $z0 == 0 goto label2;

        $i1 = $i0 + 79;

     label2:
        return $i1;
    }

    public android.webkit.WebBackForwardList copyBackForwardList()
    {
        android.webkit.WebView $r0;
        android.webkit.CallbackProxy $r1;
        android.webkit.WebBackForwardList $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r2 = virtualinvoke $r1.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        $r2 = virtualinvoke $r2.<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()>();

        return $r2;
    }

    public void debugDump()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        specialinvoke $r0.<android.webkit.WebView: void nativeDebugDump()>();

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int)>(172);

        return;
    }

    void deleteSelection(int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;
        android.webkit.WebViewCore$FocusData $r1, $r2;
        android.webkit.WebViewCore $r3;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $r0.<android.webkit.WebView: int mTextGeneration>;

        $i2 = $i2 + 1;

        $r0.<android.webkit.WebView: int mTextGeneration> = $i2;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r1 = new android.webkit.WebViewCore$FocusData;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        specialinvoke $r1.<android.webkit.WebViewCore$FocusData: void <init>(android.webkit.WebViewCore$FocusData)>($r2);

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>(122, $i0, $i1, $r1);

        return;
    }

    public void destroy()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore $r1;
        android.webkit.CallbackProxy $r2, $r4;
        android.os.Handler $r3;
        int $i0;
        java.lang.Throwable $r5;

        $r0 := @this: android.webkit.WebView;

        specialinvoke $r0.<android.webkit.WebView: void clearTextEntry()>();

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $r1 == null goto label2;

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        virtualinvoke $r2.<android.webkit.CallbackProxy: void setWebViewClient(android.webkit.WebViewClient)>(null);

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        virtualinvoke $r2.<android.webkit.CallbackProxy: void setWebChromeClient(android.webkit.WebChromeClient)>(null);

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore> = null;

        virtualinvoke $r1.<android.webkit.WebViewCore: void destroy()>();

        $r3 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        entermonitor $r2;

     label1:
        $r4 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        virtualinvoke $r4.<java.lang.Object: void notify()>();

        exitmonitor $r2;

     label2:
        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 == 0 goto label6;

        specialinvoke $r0.<android.webkit.WebView: void nativeDestroy()>();

        $r0.<android.webkit.WebView: int mNativeClass> = 0;

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor $r2;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.webkit.WebView $r0;
        android.view.KeyEvent $r1;
        boolean $z0, $z1;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.view.KeyEvent;

        $z0 = 1;

        $z1 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z1 != 0 goto label1;

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getAction()>();

        if $i0 != 0 goto label2;

        $r0.<android.webkit.WebView: boolean mGotKeyDown> = 1;

     label1:
        if $z0 == 0 goto label4;

        $z0 = specialinvoke $r0.<android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)>($r1);

        return $z0;

     label2:
        $z1 = $r0.<android.webkit.WebView: boolean mGotKeyDown>;

        if $z1 != 0 goto label3;

        $z0 = 0;

     label3:
        $r0.<android.webkit.WebView: boolean mGotKeyDown> = 0;

        goto label1;

     label4:
        return 0;
    }

    public void documentAsText(android.os.Message)
    {
        android.webkit.WebView $r0;
        android.os.Message $r1;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Message;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r2.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(161, $r1);

        return;
    }

    public void documentHasImages(android.os.Message)
    {
        android.webkit.WebView $r0;
        android.os.Message $r1;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Message;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r2.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(120, $r1);

        return;
    }

    boolean drawHistory()
    {
        android.webkit.WebView $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebView;

        z0 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        return z0;
    }

    public void emulateShiftHeld()
    {
        android.webkit.WebView $r0;
        float $f0;
        int $i0, $i1, $i2;

        $r0 := @this: android.webkit.WebView;

        $r0.<android.webkit.WebView: boolean mExtendSelection> = 0;

        $r0.<android.webkit.WebView: boolean mShiftIsPressed> = 1;

        $f0 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i0 = (int) $f0;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i0 + $i1;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $f0 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i1 = (int) $f0;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i1 + $i2;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i1);

        specialinvoke $r0.<android.webkit.WebView: void nativeClearFocus(int,int)>($i0, $i1);

        return;
    }

    public void externalRepresentation(android.os.Message)
    {
        android.webkit.WebView $r0;
        android.os.Message $r1;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Message;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r2.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(160, $r1);

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.webkit.WebView $r0;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.webkit.WebView: void destroy()>();

        return;
    }

    public int findAll(java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1, $r2;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r0.<android.webkit.WebView: boolean mFindIsUp> = 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $i0 = specialinvoke $r0.<android.webkit.WebView: int nativeFindAll(java.lang.String,java.lang.String)>($r2, $r1);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return $i0;
    }

    public void findNext(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<android.webkit.WebView: void nativeFindNext(boolean)>($z0);

        return;
    }

    public void flingScroll(int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.widget.Scroller $r1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i3 = virtualinvoke $r0.<android.webkit.WebView: int computeHorizontalScrollRange()>();

        $i2 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i3 = $i3 - $i2;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 0);

        $i2 = virtualinvoke $r0.<android.webkit.WebView: int computeVerticalScrollRange()>();

        $i4 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i2 = $i2 - $i4;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 0);

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $i5 = $r0.<android.view.View: int mScrollX>;

        $i2 = $r0.<android.view.View: int mScrollY>;

        virtualinvoke $r1.<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>($i5, $i2, $i0, $i1, 0, $i3, 0, $i4);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;
    }

    public android.net.http.SslCertificate getCertificate()
    {
        android.webkit.WebView $r0;
        android.net.http.SslCertificate r1;

        $r0 := @this: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.net.http.SslCertificate mCertificate>;

        return r1;
    }

    public int getContentHeight()
    {
        android.webkit.WebView $r0;
        int i0;

        $r0 := @this: android.webkit.WebView;

        i0 = $r0.<android.webkit.WebView: int mContentHeight>;

        return i0;
    }

    public android.graphics.Bitmap getFavicon()
    {
        android.webkit.WebView $r0;
        android.webkit.CallbackProxy $r1;
        android.webkit.WebBackForwardList $r2;
        android.webkit.WebHistoryItem $r3;
        android.graphics.Bitmap $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r2 = virtualinvoke $r1.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        $r3 = virtualinvoke $r2.<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>();

        return $r4;

     label1:
        return null;
    }

    public android.webkit.WebView$HitTestResult getHitTestResult()
    {
        android.webkit.WebView $r0;
        android.webkit.WebView$FocusNode $r1;
        android.webkit.WebView$HitTestResult $r2;
        java.lang.String $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        float $f0;
        byte $b4;

        $r0 := @this: android.webkit.WebView;

        $r5 = "tel:";

        $r4 = "mailto:";

        $r3 = "geo:0,0?q=";

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 != 0 goto label01;

        return null;

     label01:
        $r2 = new android.webkit.WebView$HitTestResult;

        specialinvoke $r2.<android.webkit.WebView$HitTestResult: void <init>(android.webkit.WebView)>($r0);

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        if $z0 == 0 goto label03;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $z0 = $r1.<android.webkit.WebView$FocusNode: boolean mIsTextField>;

        if $z0 != 0 goto label02;

        $z0 = $r1.<android.webkit.WebView$FocusNode: boolean mIsTextArea>;

        if $z0 == 0 goto label07;

     label02:
        staticinvoke <android.webkit.WebView$HitTestResult: void access$500(android.webkit.WebView$HitTestResult,int)>($r2, 9);

     label03:
        $i0 = virtualinvoke $r2.<android.webkit.WebView$HitTestResult: int getType()>();

        if $i0 == 0 goto label04;

        if $i0 != 7 goto label06;

     label04:
        $f0 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i1 = (int) $f0;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i1 = $i1 + $i2;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i1);

        $f0 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i2 = (int) $f0;

        $i3 = $r0.<android.view.View: int mScrollY>;

        $i2 = $i2 + $i3;

        $i2 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i2);

        $r3 = specialinvoke $r0.<android.webkit.WebView: java.lang.String nativeImageURI(int,int)>($i1, $i2);

        if $r3 == null goto label06;

        if $i0 != 0 goto label11;

        $b4 = 5;

     label05:
        staticinvoke <android.webkit.WebView$HitTestResult: void access$500(android.webkit.WebView$HitTestResult,int)>($r2, $b4);

        staticinvoke <android.webkit.WebView$HitTestResult: void access$600(android.webkit.WebView$HitTestResult,java.lang.String)>($r2, $r3);

     label06:
        return $r2;

     label07:
        $r6 = $r1.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        if $r6 == null goto label03;

        $r6 = $r1.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("tel:");

        if $z0 == 0 goto label08;

        staticinvoke <android.webkit.WebView$HitTestResult: void access$500(android.webkit.WebView$HitTestResult,int)>($r2, 2);

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i0);

        staticinvoke <android.webkit.WebView$HitTestResult: void access$600(android.webkit.WebView$HitTestResult,java.lang.String)>($r2, $r3);

        goto label03;

     label08:
        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("mailto:");

        if $z0 == 0 goto label09;

        staticinvoke <android.webkit.WebView$HitTestResult: void access$500(android.webkit.WebView$HitTestResult,int)>($r2, 4);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i0);

        staticinvoke <android.webkit.WebView$HitTestResult: void access$600(android.webkit.WebView$HitTestResult,java.lang.String)>($r2, $r3);

        goto label03;

     label09:
        $z0 = virtualinvoke $r6.<java.lang.String: boolean startsWith(java.lang.String)>("geo:0,0?q=");

        if $z0 == 0 goto label10;

        staticinvoke <android.webkit.WebView$HitTestResult: void access$500(android.webkit.WebView$HitTestResult,int)>($r2, 3);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r3 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int)>($i0);

        $r3 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String)>($r3);

        staticinvoke <android.webkit.WebView$HitTestResult: void access$600(android.webkit.WebView$HitTestResult,java.lang.String)>($r2, $r3);

        goto label03;

     label10:
        $z0 = $r1.<android.webkit.WebView$FocusNode: boolean mIsAnchor>;

        if $z0 == 0 goto label03;

        staticinvoke <android.webkit.WebView$HitTestResult: void access$500(android.webkit.WebView$HitTestResult,int)>($r2, 7);

        staticinvoke <android.webkit.WebView$HitTestResult: void access$600(android.webkit.WebView$HitTestResult,java.lang.String)>($r2, $r6);

        goto label03;

     label11:
        $b4 = 8;

        goto label05;
    }

    public java.lang.String[] getHttpAuthUsernamePassword(java.lang.String, java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1, $r2;
        java.lang.String[] $r3;
        android.webkit.WebViewDatabase $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r4 = $r0.<android.webkit.WebView: android.webkit.WebViewDatabase mDatabase>;

        $r3 = virtualinvoke $r4.<android.webkit.WebViewDatabase: java.lang.String[] getHttpAuthUsernamePassword(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public java.lang.String getOriginalUrl()
    {
        android.webkit.WebView $r0;
        android.webkit.CallbackProxy $r1;
        android.webkit.WebBackForwardList $r2;
        android.webkit.WebHistoryItem $r3;
        java.lang.String $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r2 = virtualinvoke $r1.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        $r3 = virtualinvoke $r2.<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()>();

        return $r4;

     label1:
        return null;
    }

    public int getProgress()
    {
        android.webkit.WebView $r0;
        int $i0;
        android.webkit.CallbackProxy $r1;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $i0 = virtualinvoke $r1.<android.webkit.CallbackProxy: int getProgress()>();

        return $i0;
    }

    public float getScale()
    {
        android.webkit.WebView $r0;
        float f0;

        $r0 := @this: android.webkit.WebView;

        f0 = $r0.<android.webkit.WebView: float mActualScale>;

        return f0;
    }

    public android.webkit.WebSettings getSettings()
    {
        android.webkit.WebView $r0;
        android.webkit.WebSettings $r1;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r1 = virtualinvoke $r2.<android.webkit.WebViewCore: android.webkit.WebSettings getSettings()>();

        return $r1;
    }

    public java.lang.String getTitle()
    {
        android.webkit.WebView $r0;
        android.webkit.CallbackProxy $r1;
        android.webkit.WebBackForwardList $r2;
        android.webkit.WebHistoryItem $r3;
        java.lang.String $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r2 = virtualinvoke $r1.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        $r3 = virtualinvoke $r2.<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<android.webkit.WebHistoryItem: java.lang.String getTitle()>();

        return $r4;

     label1:
        return null;
    }

    public java.lang.String getUrl()
    {
        android.webkit.WebView $r0;
        android.webkit.CallbackProxy $r1;
        android.webkit.WebBackForwardList $r2;
        android.webkit.WebHistoryItem $r3;
        java.lang.String $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r2 = virtualinvoke $r1.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        $r3 = virtualinvoke $r2.<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>();

        if $r3 == null goto label1;

        $r4 = virtualinvoke $r3.<android.webkit.WebHistoryItem: java.lang.String getUrl()>();

        return $r4;

     label1:
        return null;
    }

    android.webkit.WebViewCore getWebViewCore()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore r1;

        $r0 := @this: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        return r1;
    }

    public android.widget.ZoomButtonsController getZoomButtonsController()
    {
        android.webkit.WebView $r0;
        android.widget.ZoomButtonsController r1;

        $r0 := @this: android.webkit.WebView;

        r1 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        return r1;
    }

    public android.view.View getZoomControls()
    {
        android.webkit.WebView $r0;
        android.webkit.WebSettings $r1;
        boolean $z0;
        android.webkit.WebView$ExtendedZoomControls $r2;
        android.webkit.WebView$8 $r3;

        $r0 := @this: android.webkit.WebView;

        $r1 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r1.<android.webkit.WebSettings: boolean supportZoom()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("webview", "This WebView doesn\'t support zoom.");

        return null;

     label1:
        $r2 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        if $r2 != null goto label2;

        $r2 = specialinvoke $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls createZoomControls()>();

        $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls> = $r2;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(0);

        $r3 = new android.webkit.WebView$8;

        specialinvoke $r3.<android.webkit.WebView$8: void <init>(android.webkit.WebView)>($r0);

        $r0.<android.webkit.WebView: java.lang.Runnable mZoomControlRunnable> = $r3;

     label2:
        $r2 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        return $r2;
    }

    public void goBack()
    {
        android.webkit.WebView $r0;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.webkit.WebView: void goBackOrForward(int)>(-1);

        return;
    }

    public void goBackOrForward(int)
    {
        android.webkit.WebView $r0;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        specialinvoke $r0.<android.webkit.WebView: void goBackOrForward(int,boolean)>($i0, 0);

        return;
    }

    public void goForward()
    {
        android.webkit.WebView $r0;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.webkit.WebView: void goBackOrForward(int)>(1);

        return;
    }

    public void invokeZoomPicker()
    {
        android.webkit.WebView $r0;
        long $l0;
        android.webkit.WebSettings $r1;
        boolean $z0;
        android.widget.ZoomButtonsController $r2;
        android.os.Handler $r3;
        java.lang.Runnable $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r1.<android.webkit.WebSettings: boolean supportZoom()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("webview", "This WebView doesn\'t support zoom.");

        return;

     label1:
        specialinvoke $r0.<android.webkit.WebView: void clearTextEntry()>();

        $r1 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r1.<android.webkit.WebSettings: boolean getBuiltInZoomControls()>();

        if $z0 == 0 goto label2;

        $r2 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        virtualinvoke $r2.<android.widget.ZoomButtonsController: void setVisible(boolean)>(1);

        return;

     label2:
        $r3 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r4 = $r0.<android.webkit.WebView: java.lang.Runnable mZoomControlRunnable>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r4);

        $r3 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r4 = $r0.<android.webkit.WebView: java.lang.Runnable mZoomControlRunnable>;

        $l0 = <android.webkit.WebView: long ZOOM_CONTROLS_TIMEOUT>;

        virtualinvoke $r3.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r4, $l0);

        return;
    }

    public void loadData(java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1, $r2, $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("data:");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.webkit.WebView: void loadUrl(java.lang.String)>($r1);

        return;
    }

    public void loadDataWithBaseURL(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r7;
        java.util.HashMap $r6;
        boolean $z0;
        android.webkit.WebViewCore $r8;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        if $r1 == null goto label1;

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("data:");

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<android.webkit.WebView: void loadData(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        return;

     label1:
        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("baseUrl", $r1);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("data", $r2);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("mimeType", $r3);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("encoding", $r4);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("failUrl", $r5);

        $r8 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r8.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(139, $r6);

        specialinvoke $r0.<android.webkit.WebView: void clearTextEntry()>();

        return;
    }

    public void loadUrl(java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r2.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(100, $r1);

        specialinvoke $r0.<android.webkit.WebView: void clearTextEntry()>();

        return;
    }

    void moveSelection(float, float)
    {
        android.webkit.WebView $r0;
        float $f0, $f1;
        int $i0, $i1, $i2, $i3;
        android.graphics.Rect $r1;
        boolean $z0;
        byte $b4, $b5;

        $r0 := @this: android.webkit.WebView;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $i1 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i1 != 0 goto label1;

        return;

     label1:
        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i1 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i2 = $r0.<android.webkit.WebView: int mSelectX>;

        $i3 = specialinvoke $r0.<android.webkit.WebView: int scaleTrackballX(float,int)>($f0, $i0);

        $i2 = $i2 + $i3;

        $r0.<android.webkit.WebView: int mSelectX> = $i2;

        $i2 = $r0.<android.webkit.WebView: int mSelectY>;

        $i3 = specialinvoke $r0.<android.webkit.WebView: int scaleTrackballY(float,int)>($f1, $i1);

        $i2 = $i2 + $i3;

        $r0.<android.webkit.WebView: int mSelectY> = $i2;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i0 + $i2;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i1 + $i2;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i2 = $i2 - 16;

        $i3 = $r0.<android.webkit.WebView: int mSelectX>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i3);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        $r0.<android.webkit.WebView: int mSelectX> = $i2;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i2 = $i2 - 16;

        $i3 = $r0.<android.webkit.WebView: int mSelectY>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i2, $i3);

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r0.<android.webkit.WebView: int mSelectY> = $i2;

        $i2 = $r0.<android.webkit.WebView: int mSelectX>;

        $i2 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i2);

        $i3 = $r0.<android.webkit.WebView: int mSelectY>;

        $i3 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i3);

        $z0 = $r0.<android.webkit.WebView: boolean mExtendSelection>;

        specialinvoke $r0.<android.webkit.WebView: void nativeMoveSelection(int,int,boolean)>($i2, $i3, $z0);

        $i2 = $r0.<android.webkit.WebView: int mSelectX>;

        $i3 = $r0.<android.view.View: int mScrollX>;

        if $i2 >= $i3 goto label4;

        $b4 = -16;

     label2:
        $i0 = $r0.<android.webkit.WebView: int mSelectY>;

        $i2 = $r0.<android.view.View: int mScrollY>;

        if $i0 >= $i2 goto label6;

        $b5 = -16;

     label3:
        specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>($b4, $b5, 1, 0);

        $r1 = new android.graphics.Rect;

        $i1 = $r0.<android.webkit.WebView: int mSelectX>;

        $i0 = $r0.<android.webkit.WebView: int mSelectY>;

        $i2 = $r0.<android.webkit.WebView: int mSelectX>;

        $i2 = $i2 + 1;

        $i3 = $r0.<android.webkit.WebView: int mSelectY>;

        $i3 = $i3 + 1;

        specialinvoke $r1.<android.graphics.Rect: void <init>(int,int,int,int)>($i1, $i0, $i2, $i3);

        virtualinvoke $r0.<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)>($r1);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label4:
        $i2 = $r0.<android.webkit.WebView: int mSelectX>;

        $i0 = $i0 - 16;

        if $i2 <= $i0 goto label5;

        $b4 = 16;

        goto label2;

     label5:
        $b4 = 0;

        goto label2;

     label6:
        $i0 = $r0.<android.webkit.WebView: int mSelectY>;

        $i1 = $i1 - 16;

        if $i0 <= $i1 goto label7;

        $b5 = 16;

        goto label3;

     label7:
        $b5 = 0;

        goto label3;
    }

    protected void onAttachedToWindow()
    {
        android.webkit.WebView $r0;
        boolean $z0;
        android.view.ViewParent $r1;
        android.view.ViewGroup $r2;

        $r0 := @this: android.webkit.WebView;

        specialinvoke $r0.<android.view.View: void onAttachedToWindow()>();

        $r1 = virtualinvoke $r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r2 = (android.view.ViewGroup) $r1;

        virtualinvoke $r2.<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>($r0);

        return;

     label1:
        return;
    }

    public void onChildViewAdded(android.view.View, android.view.View)
    {
        android.webkit.WebView $r0;
        android.view.View $r1, $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.View;

        return;
    }

    public void onChildViewRemoved(android.view.View, android.view.View)
    {
        android.webkit.WebView $r0;
        android.view.View $r1, $r2;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.View;

        if $r2 != $r0 goto label1;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label2;

        specialinvoke $r0.<android.webkit.WebView: void clearTextEntry()>();

        $r0.<android.webkit.WebView: boolean mNeedsUpdateTextEntry> = 1;

        return;

     label1:
        return;

     label2:
        return;
    }

    protected void onDetachedFromWindow()
    {
        android.webkit.WebView $r0;
        android.view.ViewParent $r1;
        boolean $z0;
        android.view.ViewGroup $r2;
        android.widget.ZoomButtonsController $r3;

        $r0 := @this: android.webkit.WebView;

        specialinvoke $r0.<android.view.View: void onDetachedFromWindow()>();

        $r1 = virtualinvoke $r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r2 = (android.view.ViewGroup) $r1;

        virtualinvoke $r2.<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>(null);

     label1:
        $r3 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        virtualinvoke $r3.<android.widget.ZoomButtonsController: void setVisible(boolean)>(0);

        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.webkit.WebView $r0;
        android.graphics.Canvas $r1;
        int $i0, $i1;
        android.webkit.WebViewCore $r2;
        boolean $z0, $z1;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $z0 = $r2.<android.webkit.WebViewCore: boolean mEndScaleZoom>;

        if $z0 == 0 goto label2;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r2.<android.webkit.WebViewCore: boolean mEndScaleZoom> = 0;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 < 9 goto label2;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 > 11 goto label2;

        virtualinvoke $r0.<android.view.View: void setHorizontalScrollBarEnabled(boolean)>(1);

        virtualinvoke $r0.<android.view.View: void setVerticalScrollBarEnabled(boolean)>(1);

        $r0.<android.webkit.WebView: int mTouchMode> = 7;

     label2:
        $i0 = virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 < 9 goto label4;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 > 11 goto label4;

        specialinvoke $r0.<android.webkit.WebView: void scrollZoomDraw(android.graphics.Canvas)>($r1);

     label3:
        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i0);

        return;

     label4:
        specialinvoke $r0.<android.webkit.WebView: void nativeRecomputeFocus()>();

        $z0 = virtualinvoke $r0.<android.view.ViewGroup: boolean hasFocus()>();

        if $z0 == 0 goto label8;

        $z0 = virtualinvoke $r0.<android.view.View: boolean hasWindowFocus()>();

        if $z0 == 0 goto label8;

        $z0 = 1;

     label5:
        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 == 4 goto label6;

        $z1 = $r0.<android.webkit.WebView: boolean mTrackballDown>;

        if $z1 != 0 goto label6;

        $z1 = $r0.<android.webkit.WebView: boolean mGotEnterDown>;

        if $z1 == 0 goto label9;

     label6:
        $z1 = 1;

     label7:
        specialinvoke $r0.<android.webkit.WebView: void nativeRecordButtons(boolean,boolean,boolean)>($z0, $z1, 0);

        $i1 = $r0.<android.webkit.WebView: int mBackgroundColor>;

        $z0 = $r0.<android.webkit.WebView: boolean mDrawFocusRing>;

        specialinvoke $r0.<android.webkit.WebView: void drawCoreAndFocusRing(android.graphics.Canvas,int,boolean)>($r1, $i1, $z0);

        goto label3;

     label8:
        $z0 = 0;

        goto label5;

     label9:
        $z1 = 0;

        goto label7;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        android.webkit.WebView $r0;
        boolean $z0, $z1;
        int $i0, $i1;
        android.graphics.Rect $r1;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Rect;

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke $r0.<android.view.View: boolean hasWindowFocus()>();

        if $z1 == 0 goto label2;

        $r0.<android.webkit.WebView: boolean mDrawFocusRing> = 1;

        $z1 = $r0.<android.webkit.WebView: boolean mNeedsUpdateTextEntry>;

        if $z1 == 0 goto label1;

        specialinvoke $r0.<android.webkit.WebView: void updateTextEntry()>();

        $r0.<android.webkit.WebView: boolean mNeedsUpdateTextEntry> = 0;

     label1:
        $i1 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i1 == 0 goto label2;

        specialinvoke $r0.<android.webkit.WebView: void nativeRecordButtons(boolean,boolean,boolean)>(1, 0, 1);

     label2:
        specialinvoke $r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>($z0, $i0, $r1);

        return;

     label3:
        $z1 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z1 != 0 goto label4;

        $r0.<android.webkit.WebView: boolean mDrawFocusRing> = 0;

        $i1 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i1 == 0 goto label4;

        specialinvoke $r0.<android.webkit.WebView: void nativeRecordButtons(boolean,boolean,boolean)>(0, 0, 1);

     label4:
        $r0.<android.webkit.WebView: boolean mGotKeyDown> = 0;

        goto label2;
    }

    public void onGlobalFocusChanged(android.view.View, android.view.View)
    {
        android.webkit.WebView $r0;
        android.view.View $r1, $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.view.View;

        return;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;
        android.view.KeyEvent $r1;
        android.webkit.WebView$FocusNode $r2;
        boolean $z0;
        android.webkit.CallbackProxy $r3;
        android.graphics.Rect $r4;
        float $f0;
        long $l4;
        android.os.Handler $r5, $r6;
        android.os.Message $r7;
        android.webkit.WebSettings $r8;
        android.webkit.WebViewCore $r9;
        java.lang.String $r10;
        byte $b5;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $i1 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i1 != 0 goto label01;

        return 0;

     label01:
        $z0 = virtualinvoke $r1.<android.view.KeyEvent: boolean isSystem()>();

        if $z0 != 0 goto label02;

        $r3 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $z0 = virtualinvoke $r3.<android.webkit.CallbackProxy: boolean uiOverrideKeyEvent(android.view.KeyEvent)>($r1);

        if $z0 != 0 goto label02;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 < 9 goto label03;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 > 11 goto label03;

     label02:
        return 0;

     label03:
        $z0 = $r0.<android.webkit.WebView: boolean mShiftIsPressed>;

        if $z0 != 0 goto label06;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeFocusNodeWantsKeyEvents()>();

        if $z0 != 0 goto label06;

        if $i0 == 59 goto label04;

        if $i0 != 60 goto label06;

     label04:
        $r0.<android.webkit.WebView: boolean mExtendSelection> = 0;

        $r0.<android.webkit.WebView: boolean mShiftIsPressed> = 1;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        if $z0 == 0 goto label07;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $r4 = $r2.<android.webkit.WebView$FocusNode: android.graphics.Rect mBounds>;

        $i1 = $r4.<android.graphics.Rect: int left>;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        $r0.<android.webkit.WebView: int mSelectX> = $i1;

        $r4 = $r2.<android.webkit.WebView$FocusNode: android.graphics.Rect mBounds>;

        $i1 = $r4.<android.graphics.Rect: int top>;

        $i1 = specialinvoke $r0.<android.webkit.WebView: int contentToView(int)>($i1);

        $r0.<android.webkit.WebView: int mSelectY> = $i1;

     label05:
        $f0 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i1 = (int) $f0;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i1 = $i1 + $i2;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i1);

        $f0 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i2 = (int) $f0;

        $i3 = $r0.<android.view.View: int mScrollY>;

        $i2 = $i2 + $i3;

        $i2 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i2);

        specialinvoke $r0.<android.webkit.WebView: void nativeClearFocus(int,int)>($i1, $i2);

     label06:
        if $i0 < 19 goto label09;

        if $i0 > 22 goto label09;

        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $l4 = virtualinvoke $r1.<android.view.KeyEvent: long getEventTime()>();

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean navHandledKey(int,int,boolean,long)>($i0, 1, 0, $l4);

        if $z0 == 0 goto label08;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int keyCodeToSoundsEffect(int)>($i0);

        virtualinvoke $r0.<android.view.View: void playSoundEffect(int)>($i0);

        return 1;

     label07:
        $i1 = $r0.<android.view.View: int mScrollX>;

        $f0 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i2 = (int) $f0;

        $i1 = $i1 + $i2;

        $r0.<android.webkit.WebView: int mSelectX> = $i1;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $f0 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i2 = (int) $f0;

        $i1 = $i1 + $i2;

        $r0.<android.webkit.WebView: int mSelectY> = $i1;

        goto label05;

     label08:
        return 0;

     label09:
        if $i0 == 23 goto label10;

        if $i0 != 66 goto label14;

     label10:
        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i0 != 0 goto label13;

        $r0.<android.webkit.WebView: boolean mGotEnterDown> = 1;

        $r5 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r6 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r7 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int)>(23);

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r7, 1000L);

        $z0 = virtualinvoke $r0.<android.view.ViewGroup: boolean hasFocus()>();

        if $z0 == 0 goto label12;

        $z0 = virtualinvoke $r0.<android.view.View: boolean hasWindowFocus()>();

        if $z0 == 0 goto label12;

        $z0 = 1;

     label11:
        specialinvoke $r0.<android.webkit.WebView: void nativeRecordButtons(boolean,boolean,boolean)>($z0, 1, 1);

        return 1;

     label12:
        $z0 = 0;

        goto label11;

     label13:
        return 0;

     label14:
        $r8 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r8.<android.webkit.WebSettings: boolean getNavDump()>();

        if $z0 == 0 goto label15;

        lookupswitch($i0)
        {
            case 11: goto label17;
            case 12: goto label18;
            case 13: goto label18;
            case 14: goto label21;
            case 15: goto label21;
            case 16: goto label24;
            default: goto label15;
        };

     label15:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeFocusNodeWantsKeyEvents()>();

        if $z0 != 0 goto label16;

     label16:
        $r9 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r9.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(103, $r1);

        return 1;

     label17:
        $r10 = virtualinvoke $r0.<android.webkit.WebView: java.lang.String getUrl()>();

        specialinvoke $r0.<android.webkit.WebView: void nativeDumpDisplayTree(java.lang.String)>($r10);

        goto label15;

     label18:
        $r9 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $i0 != 12 goto label20;

        $b5 = 1;

     label19:
        virtualinvoke $r9.<android.webkit.WebViewCore: void sendMessage(int,int,int)>(170, $b5, 0);

        goto label15;

     label20:
        $b5 = 0;

        goto label19;

     label21:
        $r9 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $i0 != 14 goto label23;

        $b5 = 1;

     label22:
        virtualinvoke $r9.<android.webkit.WebViewCore: void sendMessage(int,int,int)>(171, $b5, 0);

        goto label15;

     label23:
        $b5 = 0;

        goto label22;

     label24:
        specialinvoke $r0.<android.webkit.WebView: void nativeInstrumentReport()>();

        return 1;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        android.view.KeyEvent $r1;
        android.content.Intent $r2;
        android.webkit.WebView$FocusNode $r3;
        java.lang.String $r4;
        boolean $z0;
        android.net.Uri $r5;
        android.content.Context $r6;
        android.webkit.CallbackProxy $r7;
        android.os.Handler $r8, $r10;
        android.webkit.WebSettings $r9;
        android.os.Message $r11;
        android.graphics.Rect $r12, $r13;
        android.webkit.WebViewCore $r14;
        android.webkit.WebViewCore$FocusData $r15, $r16;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $i1 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i1 != 0 goto label01;

        return 0;

     label01:
        if $i0 != 5 goto label02;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        if $z0 == 0 goto label02;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $r4 = $r3.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        $z0 = $r3.<android.webkit.WebView$FocusNode: boolean mIsTextField>;

        if $z0 != 0 goto label02;

        $z0 = $r3.<android.webkit.WebView$FocusNode: boolean mIsTextArea>;

        if $z0 != 0 goto label02;

        if $r4 == null goto label02;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("tel:");

        if $z0 == 0 goto label02;

        $r2 = new android.content.Intent;

        $r5 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r4);

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.DIAL", $r5);

        $r6 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        virtualinvoke $r6.<android.content.Context: void startActivity(android.content.Intent)>($r2);

        return 1;

     label02:
        $z0 = virtualinvoke $r1.<android.view.KeyEvent: boolean isSystem()>();

        if $z0 != 0 goto label03;

        $r7 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $z0 = virtualinvoke $r7.<android.webkit.CallbackProxy: boolean uiOverrideKeyEvent(android.view.KeyEvent)>($r1);

        if $z0 == 0 goto label04;

     label03:
        return 0;

     label04:
        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 < 9 goto label06;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 > 11 goto label06;

        if 23 != $i0 goto label05;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 == 9 goto label05;

        specialinvoke $r0.<android.webkit.WebView: void setZoomScrollIn()>();

        $r0.<android.webkit.WebView: int mTouchMode> = 9;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return 1;

     label05:
        return 0;

     label06:
        if $i0 == 59 goto label07;

        if $i0 != 60 goto label08;

     label07:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean commitCopy()>();

        if $z0 == 0 goto label08;

        return 1;

     label08:
        if $i0 < 19 goto label09;

        if $i0 > 22 goto label09;

        return 0;

     label09:
        if $i0 == 23 goto label10;

        if $i0 != 66 goto label17;

     label10:
        $r8 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r8.<android.os.Handler: void removeMessages(int)>(23);

        $r0.<android.webkit.WebView: boolean mGotEnterDown> = 0;

        if 23 != $i0 goto label14;

        $z0 = $r0.<android.webkit.WebView: boolean mShiftIsPressed>;

        if $z0 == 0 goto label11;

        return 0;

     label11:
        $r9 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r9.<android.webkit.WebSettings: boolean supportZoom()>();

        if $z0 == 0 goto label14;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 != 6 goto label13;

        specialinvoke $r0.<android.webkit.WebView: void zoomScrollOut()>();

     label12:
        return 1;

     label13:
        $r8 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r10 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r11 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int)>(7);

        virtualinvoke $r8.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r11, 200L);

        $r0.<android.webkit.WebView: int mTouchMode> = 6;

        goto label12;

     label14:
        $r12 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()>();

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        if $z0 == 0 goto label16;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $r13 = $r3.<android.webkit.WebView$FocusNode: android.graphics.Rect mBounds>;

        $z0 = staticinvoke <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>($r13, $r12);

        if $z0 == 0 goto label15;

        specialinvoke $r0.<android.webkit.WebView: void nativeSetFollowedLink(boolean)>(1);

        $r14 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r15 = new android.webkit.WebViewCore$FocusData;

        $r16 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        specialinvoke $r15.<android.webkit.WebViewCore$FocusData: void <init>(android.webkit.WebViewCore$FocusData)>($r16);

        virtualinvoke $r14.<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>(135, 1, 0, $r15);

        virtualinvoke $r0.<android.view.View: void playSoundEffect(int)>(0);

        $r7 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $r4 = $r3.<android.webkit.WebView$FocusNode: java.lang.String mText>;

        $z0 = virtualinvoke $r7.<android.webkit.CallbackProxy: boolean uiOverrideUrlLoading(java.lang.String)>($r4);

        if $z0 != 0 goto label15;

        $r14 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r14.<android.webkit.WebViewCore: void sendMessage(int)>(118);

     label15:
        return 1;

     label16:
        return 0;

     label17:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeFocusNodeWantsKeyEvents()>();

        if $z0 != 0 goto label18;

     label18:
        $r14 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r14.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(104, $r1);

        return 1;
    }

    protected void onMeasure(int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<android.widget.AbsoluteLayout: void onMeasure(int,int)>($i0, $i1);

        $i4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i1);

        $i5 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i1);

        $i1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i0);

        $i3 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i0);

        $i0 = $i5;

        $i6 = $i3;

        $i2 = $r0.<android.webkit.WebView: int mContentHeight>;

        $i3 = $r0.<android.webkit.WebView: int mContentWidth>;

        if $i4 == 1073741824 goto label06;

        $r0.<android.webkit.WebView: boolean mHeightCanMeasure> = 1;

        $i0 = $i2;

        if $i4 != -2147483648 goto label01;

        if $i2 <= $i5 goto label01;

        $i0 = $i5;

        $r0.<android.webkit.WebView: boolean mHeightCanMeasure> = 0;

     label01:
        $i4 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i4 == 0 goto label02;

        $z0 = $r0.<android.webkit.WebView: boolean mHeightCanMeasure>;

        specialinvoke $r0.<android.webkit.WebView: void nativeSetHeightCanMeasure(boolean)>($z0);

     label02:
        if $i1 != 0 goto label07;

        $r0.<android.webkit.WebView: boolean mWidthCanMeasure> = 1;

        $i6 = $i3;

     label03:
        entermonitor $r0;

     label04:
        virtualinvoke $r0.<android.view.View: void setMeasuredDimension(int,int)>($i6, $i0);

        exitmonitor $r0;

     label05:
        return;

     label06:
        $r0.<android.webkit.WebView: boolean mHeightCanMeasure> = 0;

        goto label01;

     label07:
        $r0.<android.webkit.WebView: boolean mWidthCanMeasure> = 0;

        goto label03;

     label08:
        $r1 := @caughtexception;

     label09:
        exitmonitor $r0;

     label10:
        throw $r1;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    boolean onSavePassword(java.lang.String, java.lang.String, java.lang.String, android.os.Message)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1, $r2, $r3;
        android.os.Message $r4, $r7, $r9;
        android.webkit.WebViewDatabase $r5;
        android.os.Handler $r6;
        android.os.Bundle $r8;
        android.app.AlertDialog$Builder $r10;
        android.content.Context $r11;
        android.webkit.WebView$7 $r12;
        android.webkit.WebView$6 $r13;
        android.webkit.WebView$5 $r14;
        android.webkit.WebView$4 $r15;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: android.os.Message;

        if $r4 != null goto label1;

        $r5 = $r0.<android.webkit.WebView: android.webkit.WebViewDatabase mDatabase>;

        virtualinvoke $r5.<android.webkit.WebViewDatabase: void setUsernamePassword(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        return 0;

     label1:
        $r6 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r7 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        $r8 = virtualinvoke $r7.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("host", $r1);

        $r8 = virtualinvoke $r7.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("username", $r2);

        $r8 = virtualinvoke $r7.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("password", $r3);

        $r7.<android.os.Message: java.lang.Object obj> = $r4;

        $r6 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r9 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        $r8 = virtualinvoke $r9.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("host", $r1);

        $r8 = virtualinvoke $r9.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("username", $r2);

        $r8 = virtualinvoke $r9.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("password", $r3);

        $r9.<android.os.Message: java.lang.Object obj> = $r4;

        $r10 = new android.app.AlertDialog$Builder;

        $r11 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        specialinvoke $r10.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>($r11);

        $r10 = virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(int)>(17039757);

        $r10 = virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(int)>(17039758);

        $r12 = new android.webkit.WebView$7;

        specialinvoke $r12.<android.webkit.WebView$7: void <init>(android.webkit.WebView,android.os.Message)>($r0, $r4);

        $r10 = virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(int,android.content.DialogInterface$OnClickListener)>(17039759, $r12);

        $r13 = new android.webkit.WebView$6;

        specialinvoke $r13.<android.webkit.WebView$6: void <init>(android.webkit.WebView,android.os.Message)>($r0, $r7);

        $r10 = virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>(17039760, $r13);

        $r14 = new android.webkit.WebView$5;

        specialinvoke $r14.<android.webkit.WebView$5: void <init>(android.webkit.WebView,android.os.Message)>($r0, $r9);

        $r10 = virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(int,android.content.DialogInterface$OnClickListener)>(17039761, $r14);

        $r15 = new android.webkit.WebView$4;

        specialinvoke $r15.<android.webkit.WebView$4: void <init>(android.webkit.WebView,android.os.Message)>($r0, $r4);

        $r10 = virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>($r15);

        virtualinvoke $r10.<android.app.AlertDialog$Builder: android.app.AlertDialog show()>();

        return 1;
    }

    protected void onScrollChanged(int, int, int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke $r0.<android.view.View: void onScrollChanged(int,int,int,int)>($i0, $i1, $i2, $i3);

        specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()>();

        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke $r0.<android.view.View: void onSizeChanged(int,int,int,int)>($i0, $i1, $i2, $i3);

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $f0 = (float) $i0;

        $f0 = $f0 * 0.5F;

        $r0.<android.webkit.WebView: float mZoomCenterX> = $f0;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $f0 = (float) $i0;

        $f0 = $f0 * 0.5F;

        $r0.<android.webkit.WebView: float mZoomCenterY> = $f0;

        $z0 = $r0.<android.webkit.WebView: boolean mMinZoomScaleFixed>;

        if $z0 != 0 goto label1;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $f0 = (float) $i0;

        $i0 = $r0.<android.webkit.WebView: int mContentWidth>;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(1008, $i0);

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

        $r0.<android.webkit.WebView: float mMinZoomScale> = $f0;

     label1:
        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        specialinvoke $r0.<android.webkit.WebView: void setNewZoomScale(float,boolean)>($f0, 1);

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.webkit.WebView $r0;
        android.view.MotionEvent $r1;
        android.webkit.WebViewCore$TouchEventData $r2;
        int $i0, $i1, $i5, $i6, $i7;
        boolean $z0, $z1, $z2;
        float $f0, $f1, $f2, $f3, $f4;
        long $l2, $l4;
        byte $b3;
        android.webkit.WebViewCore $r3;
        android.os.Handler $r4, $r5;
        android.os.Message $r6;
        android.view.VelocityTracker $r7;
        android.widget.Scroller $r8;
        java.lang.Object[] $r9;
        java.lang.Long $r10;
        android.webkit.TextDialog $r11;
        android.webkit.WebSettings $r12;
        android.widget.ZoomButtonsController $r13;
        android.webkit.WebView$ExtendedZoomControls $r14;
        java.lang.Runnable $r15;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.view.MotionEvent;

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 == 0 goto label01;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isClickable()>();

        if $z0 == 0 goto label01;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isLongClickable()>();

        if $z0 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i1 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f1 = $f0;

        $f2 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $f3 = $f2;

        $l2 = virtualinvoke $r1.<android.view.MotionEvent: long getEventTime()>();

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i0 = $i0 - 1;

        $f4 = (float) $i0;

        $b3 = $f0 cmpl $f4;

        if $b3 <= 0 goto label03;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewWidth()>();

        $i0 = $i0 - 1;

        $f1 = (float) $i0;

     label03:
        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i0 = $i0 - 1;

        $f0 = (float) $i0;

        $b3 = $f2 cmpl $f0;

        if $b3 <= 0 goto label04;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int getViewHeight()>();

        $i0 = $i0 - 1;

        $f3 = (float) $i0;

     label04:
        $z0 = $r0.<android.webkit.WebView: boolean mForwardTouchEvents>;

        if $z0 == 0 goto label06;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 == 11 goto label06;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 == 9 goto label06;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 == 10 goto label06;

        if $i1 != 2 goto label05;

        $l4 = $r0.<android.webkit.WebView: long mLastSentTouchTime>;

        $l4 = $l2 - $l4;

        $b3 = $l4 cmp 100L;

        if $b3 <= 0 goto label06;

     label05:
        $r2 = new android.webkit.WebViewCore$TouchEventData;

        specialinvoke $r2.<android.webkit.WebViewCore$TouchEventData: void <init>()>();

        $r2.<android.webkit.WebViewCore$TouchEventData: int mAction> = $i1;

        $i0 = (int) $f1;

        $i5 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i0 + $i5;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $r2.<android.webkit.WebViewCore$TouchEventData: int mX> = $i0;

        $i0 = (int) $f3;

        $i5 = $r0.<android.view.View: int mScrollY>;

        $i0 = $i0 + $i5;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $r2.<android.webkit.WebViewCore$TouchEventData: int mY> = $i0;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(141, $r2);

        $r0.<android.webkit.WebView: long mLastSentTouchTime> = $l2;

     label06:
        $f2 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $f2 = $f2 - $f1;

        $i5 = (int) $f2;

        $f2 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $f2 = $f2 - $f3;

        $i0 = (int) $f2;

        lookupswitch($i1)
        {
            case 0: goto label08;
            case 1: goto label52;
            case 2: goto label14;
            case 3: goto label60;
            default: goto label07;
        };

     label07:
        return 1;

     label08:
        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 == 9 goto label07;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 == 10 goto label07;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 != 11 goto label11;

        $i0 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $r0.<android.webkit.WebView: int mLastScrollX> = $i0;

        $i0 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        $r0.<android.webkit.WebView: int mLastScrollY> = $i0;

     label09:
        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 != 1 goto label10;

        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r5 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r6 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r6, 200L);

     label10:
        $r0.<android.webkit.WebView: float mLastTouchX> = $f1;

        $r0.<android.webkit.WebView: float mLastTouchY> = $f3;

        $r0.<android.webkit.WebView: long mLastTouchTime> = $l2;

        $r7 = staticinvoke <android.view.VelocityTracker: android.view.VelocityTracker obtain()>();

        $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker> = $r7;

        $r0.<android.webkit.WebView: int mSnapScrollMode> = 1;

        goto label07;

     label11:
        $r8 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $z0 = virtualinvoke $r8.<android.widget.Scroller: boolean isFinished()>();

        if $z0 != 0 goto label12;

        $r8 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        virtualinvoke $r8.<android.widget.Scroller: void abortAnimation()>();

        $r0.<android.webkit.WebView: int mTouchMode> = 2;

        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(8);

        goto label09;

     label12:
        $z0 = $r0.<android.webkit.WebView: boolean mShiftIsPressed>;

        if $z0 == 0 goto label13;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i5 = (int) $f1;

        $i0 = $i0 + $i5;

        $r0.<android.webkit.WebView: int mSelectX> = $i0;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $i5 = (int) $f3;

        $i0 = $i0 + $i5;

        $r0.<android.webkit.WebView: int mSelectY> = $i0;

        $r0.<android.webkit.WebView: int mTouchMode> = 8;

        $i0 = $r0.<android.webkit.WebView: int mSelectX>;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $i5 = $r0.<android.webkit.WebView: int mSelectY>;

        $i5 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i5);

        specialinvoke $r0.<android.webkit.WebView: void nativeMoveSelection(int,int,boolean)>($i0, $i5, 0);

        $r0.<android.webkit.WebView: boolean mExtendSelection> = 1;

        $r0.<android.webkit.WebView: boolean mTouchSelection> = 1;

        goto label09;

     label13:
        $r0.<android.webkit.WebView: int mTouchMode> = 1;

        $z0 = $r0.<android.webkit.WebView: boolean mForwardTouchEvents>;

        $r0.<android.webkit.WebView: boolean mPreventDrag> = $z0;

        $z0 = <android.webkit.WebView: boolean mLogEvent>;

        if $z0 == 0 goto label09;

        $l4 = $r0.<android.webkit.WebView: long mLastTouchUpTime>;

        $l4 = $l2 - $l4;

        $b3 = $l4 cmp 1000L;

        if $b3 >= 0 goto label09;

        $r9 = newarray (java.lang.Object)[2];

        $l4 = $r0.<android.webkit.WebView: long mLastTouchUpTime>;

        $l4 = $l2 - $l4;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r9[0] = $r10;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r9[1] = $r10;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(70102, $r9);

        goto label09;

     label14:
        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 == 7 goto label07;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 == 9 goto label07;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 == 10 goto label07;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 != 11 goto label15;

        specialinvoke $r0.<android.webkit.WebView: void moveZoomScrollWindow(float,float)>($f1, $f3);

        goto label07;

     label15:
        $r7 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r7.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>($r1);

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 == 3 goto label24;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 != 8 goto label16;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i5 = (int) $f1;

        $i0 = $i0 + $i5;

        $r0.<android.webkit.WebView: int mSelectX> = $i0;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $i5 = (int) $f3;

        $i0 = $i0 + $i5;

        $r0.<android.webkit.WebView: int mSelectY> = $i0;

        $i0 = $r0.<android.webkit.WebView: int mSelectX>;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $i5 = $r0.<android.webkit.WebView: int mSelectY>;

        $i5 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i5);

        specialinvoke $r0.<android.webkit.WebView: void nativeMoveSelection(int,int,boolean)>($i0, $i5, 1);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        goto label07;

     label16:
        $z0 = $r0.<android.webkit.WebView: boolean mPreventDrag>;

        if $z0 != 0 goto label07;

        $i1 = $i5 * $i5;

        $i6 = $i0 * $i0;

        $i1 = $i1 + $i6;

        $i6 = $r0.<android.webkit.WebView: int mTouchSlopSquare>;

        if $i1 < $i6 goto label07;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 == 5 goto label17;

        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 != 4 goto label30;

     label17:
        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(4);

     label18:
        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $f2 = (float) $i1;

        $f0 = (float) $i6;

        $f0 = 1.5F * $f0;

        $b3 = $f2 cmpl $f0;

        if $b3 <= 0 goto label32;

        $r0.<android.webkit.WebView: int mSnapScrollMode> = 2;

        if $i5 <= 0 goto label31;

        $z0 = 1;

     label19:
        $r0.<android.webkit.WebView: boolean mSnapPositive> = $z0;

     label20:
        $r0.<android.webkit.WebView: int mTouchMode> = 3;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        staticinvoke <android.webkit.WebViewCore: void pauseUpdate(android.webkit.WebViewCore)>($r3);

        $i1 = (int) $f1;

        $i6 = $r0.<android.view.View: int mScrollX>;

        $i1 = $i1 + $i6;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i1);

        $i6 = (int) $f3;

        $i7 = $r0.<android.view.View: int mScrollY>;

        $i6 = $i6 + $i7;

        $i6 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i6);

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label21;

        $r11 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r11.<android.webkit.TextDialog: void updateCachedTextfield()>();

     label21:
        specialinvoke $r0.<android.webkit.WebView: void nativeClearFocus(int,int)>($i1, $i6);

        $f2 = $r0.<android.webkit.WebView: float mZoomScale>;

        $b3 = $f2 cmpl 0.0F;

        if $b3 == 0 goto label22;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int,int,int)>(121, 0, 0);

     label22:
        $r12 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z0 = virtualinvoke $r12.<android.webkit.WebSettings: boolean supportZoom()>();

        if $z0 == 0 goto label24;

        $z0 = virtualinvoke $r12.<android.webkit.WebSettings: boolean getBuiltInZoomControls()>();

        if $z0 == 0 goto label24;

        $r13 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        $z0 = virtualinvoke $r13.<android.widget.ZoomButtonsController: boolean isVisible()>();

        if $z0 != 0 goto label24;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean canZoomScrollOut()>();

        if $z0 != 0 goto label23;

        $f2 = $r0.<android.webkit.WebView: float mMinZoomScale>;

        $f0 = $r0.<android.webkit.WebView: float mMaxZoomScale>;

        $b3 = $f2 cmpg $f0;

        if $b3 >= 0 goto label24;

     label23:
        $r13 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        virtualinvoke $r13.<android.widget.ZoomButtonsController: void setVisible(boolean)>(1);

     label24:
        $i1 = $r0.<android.view.View: int mScrollX>;

        $i5 = $i1 + $i5;

        $i5 = specialinvoke $r0.<android.webkit.WebView: int pinLocX(int)>($i5);

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i5 = $i5 - $i1;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $i0 = $i1 + $i0;

        $i0 = specialinvoke $r0.<android.webkit.WebView: int pinLocY(int)>($i0);

        $i1 = $r0.<android.view.View: int mScrollY>;

        $i0 = $i0 - $i1;

        $z0 = 0;

        if $i5 != 0 goto label35;

        if $i0 != 0 goto label35;

        $z0 = 1;

     label25:
        $r12 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z1 = virtualinvoke $r12.<android.webkit.WebSettings: boolean getBuiltInZoomControls()>();

        if $z1 != 0 goto label29;

        $f1 = $r0.<android.webkit.WebView: float mMinZoomScale>;

        $f3 = $r0.<android.webkit.WebView: float mMaxZoomScale>;

        $b3 = $f1 cmpg $f3;

        if $b3 >= 0 goto label50;

        $z1 = 1;

     label26:
        $z2 = specialinvoke $r0.<android.webkit.WebView: boolean canZoomScrollOut()>();

        $r14 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        if $r14 == null goto label29;

        if $z1 != 0 goto label27;

        if $z2 == 0 goto label29;

     label27:
        $r14 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        $i0 = virtualinvoke $r14.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label51;

        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r15 = $r0.<android.webkit.WebView: java.lang.Runnable mZoomControlRunnable>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r15);

     label28:
        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r15 = $r0.<android.webkit.WebView: java.lang.Runnable mZoomControlRunnable>;

        $l2 = <android.webkit.WebView: long ZOOM_CONTROLS_TIMEOUT>;

        virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r15, $l2);

     label29:
        if $z0 == 0 goto label07;

        return 0;

     label30:
        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 != 1 goto label18;

        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(3);

        goto label18;

     label31:
        $z0 = 0;

        goto label19;

     label32:
        $f2 = (float) $i6;

        $f0 = (float) $i1;

        $f0 = 1.5F * $f0;

        $b3 = $f2 cmpl $f0;

        if $b3 <= 0 goto label20;

        $r0.<android.webkit.WebView: int mSnapScrollMode> = 3;

        if $i0 <= 0 goto label34;

        $z0 = 1;

     label33:
        $r0.<android.webkit.WebView: boolean mSnapPositive> = $z0;

        goto label20;

     label34:
        $z0 = 0;

        goto label33;

     label35:
        $i1 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i1 == 2 goto label36;

        $i1 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i1 != 3 goto label40;

     label36:
        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i5);

        $i6 = staticinvoke <java.lang.Math: int abs(int)>($i0);

        $i7 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i7 != 2 goto label43;

        $f2 = (float) $i6;

        $f0 = (float) $i1;

        $f0 = 1.5F * $f0;

        $b3 = $f2 cmpl $f0;

        if $b3 <= 0 goto label37;

        if $i6 <= 80 goto label37;

        $r0.<android.webkit.WebView: int mSnapScrollMode> = 1;

     label37:
        $f2 = (float) $i1;

        $f0 = (float) $i6;

        $f0 = 1.5F * $f0;

        $b3 = $f2 cmpl $f0;

        if $b3 <= 0 goto label40;

        $z1 = $r0.<android.webkit.WebView: boolean mSnapPositive>;

        if $z1 == 0 goto label38;

        $i1 = $r0.<android.webkit.WebView: int mMinLockSnapReverseDistance>;

        $i1 = neg $i1;

        if $i5 < $i1 goto label39;

     label38:
        $z1 = $r0.<android.webkit.WebView: boolean mSnapPositive>;

        if $z1 != 0 goto label40;

        $i1 = $r0.<android.webkit.WebView: int mMinLockSnapReverseDistance>;

        if $i5 <= $i1 goto label40;

     label39:
        $r0.<android.webkit.WebView: int mSnapScrollMode> = 4;

     label40:
        $i1 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i1 == 2 goto label41;

        $i1 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i1 != 4 goto label47;

     label41:
        virtualinvoke $r0.<android.view.View: void scrollBy(int,int)>($i5, 0);

        $r0.<android.webkit.WebView: float mLastTouchX> = $f1;

     label42:
        $r0.<android.webkit.WebView: long mLastTouchTime> = $l2;

        $r0.<android.webkit.WebView: boolean mUserScroll> = 1;

        goto label25;

     label43:
        $f2 = (float) $i1;

        $f0 = (float) $i6;

        $f0 = 1.5F * $f0;

        $b3 = $f2 cmpl $f0;

        if $b3 <= 0 goto label44;

        if $i1 <= 80 goto label44;

        $r0.<android.webkit.WebView: int mSnapScrollMode> = 1;

     label44:
        $f2 = (float) $i6;

        $f0 = (float) $i1;

        $f0 = 1.5F * $f0;

        $b3 = $f2 cmpl $f0;

        if $b3 <= 0 goto label40;

        $z1 = $r0.<android.webkit.WebView: boolean mSnapPositive>;

        if $z1 == 0 goto label45;

        $i1 = $r0.<android.webkit.WebView: int mMinLockSnapReverseDistance>;

        $i1 = neg $i1;

        if $i0 < $i1 goto label46;

     label45:
        $z1 = $r0.<android.webkit.WebView: boolean mSnapPositive>;

        if $z1 != 0 goto label40;

        $i1 = $r0.<android.webkit.WebView: int mMinLockSnapReverseDistance>;

        if $i0 <= $i1 goto label40;

     label46:
        $r0.<android.webkit.WebView: int mSnapScrollMode> = 5;

        goto label40;

     label47:
        $i1 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i1 == 3 goto label48;

        $i1 = $r0.<android.webkit.WebView: int mSnapScrollMode>;

        if $i1 != 5 goto label49;

     label48:
        virtualinvoke $r0.<android.view.View: void scrollBy(int,int)>(0, $i0);

        $r0.<android.webkit.WebView: float mLastTouchY> = $f3;

        goto label42;

     label49:
        virtualinvoke $r0.<android.view.View: void scrollBy(int,int)>($i5, $i0);

        $r0.<android.webkit.WebView: float mLastTouchX> = $f1;

        $r0.<android.webkit.WebView: float mLastTouchY> = $f3;

        goto label42;

     label50:
        $z1 = 0;

        goto label26;

     label51:
        $r14 = $r0.<android.webkit.WebView: android.webkit.WebView$ExtendedZoomControls mZoomControls>;

        virtualinvoke $r14.<android.webkit.WebView$ExtendedZoomControls: void show(boolean,boolean)>($z1, $z2);

        goto label28;

     label52:
        $r0.<android.webkit.WebView: long mLastTouchUpTime> = $l2;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        lookupswitch($i0)
        {
            case 1: goto label54;
            case 2: goto label53;
            case 3: goto label58;
            case 4: goto label54;
            case 5: goto label54;
            case 6: goto label53;
            case 7: goto label53;
            case 8: goto label55;
            case 9: goto label53;
            case 10: goto label53;
            case 11: goto label56;
            default: goto label53;
        };

     label53:
        $r7 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        if $r7 == null goto label07;

        $r7 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r7.<android.view.VelocityTracker: void recycle()>();

        $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker> = null;

        goto label07;

     label54:
        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(3);

        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(4);

        $r0.<android.webkit.WebView: int mTouchMode> = 7;

        specialinvoke $r0.<android.webkit.WebView: void doShortPress()>();

        goto label53;

     label55:
        specialinvoke $r0.<android.webkit.WebView: boolean commitCopy()>();

        $r0.<android.webkit.WebView: boolean mTouchSelection> = 0;

        goto label53;

     label56:
        $l4 = $r0.<android.webkit.WebView: long mLastTouchTime>;

        $l2 = $l2 - $l4;

        $b3 = $l2 cmp 200L;

        if $b3 >= 0 goto label57;

        specialinvoke $r0.<android.webkit.WebView: void zoomScrollTap(float,float)>($f1, $f3);

     label57:
        specialinvoke $r0.<android.webkit.WebView: void setZoomScrollIn()>();

        $r0.<android.webkit.WebView: int mTouchMode> = 9;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        goto label53;

     label58:
        $l4 = $r0.<android.webkit.WebView: long mLastTouchTime>;

        $l2 = $l2 - $l4;

        $b3 = $l2 cmp 250L;

        if $b3 > 0 goto label59;

        $r7 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r7.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>($r1);

        specialinvoke $r0.<android.webkit.WebView: void doFling()>();

        goto label53;

     label59:
        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        staticinvoke <android.webkit.WebViewCore: void resumeUpdate(android.webkit.WebViewCore)>($r3);

        goto label53;

     label60:
        $r7 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        if $r7 == null goto label61;

        $r7 = $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r7.<android.view.VelocityTracker: void recycle()>();

        $r0.<android.webkit.WebView: android.view.VelocityTracker mVelocityTracker> = null;

     label61:
        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 == 11 goto label62;

        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 != 9 goto label65;

     label62:
        $i0 = $r0.<android.webkit.WebView: int mZoomScrollX>;

        $i5 = $r0.<android.webkit.WebView: int mZoomScrollY>;

        virtualinvoke $r0.<android.view.View: void scrollTo(int,int)>($i0, $i5);

     label63:
        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(3);

        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(4);

        $r0.<android.webkit.WebView: int mTouchMode> = 7;

        $f1 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i0 = (int) $f1;

        $i5 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i0 + $i5;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $f1 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i5 = (int) $f1;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $i5 = $i5 + $i1;

        $i5 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i5);

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label64;

        $r11 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        virtualinvoke $r11.<android.webkit.TextDialog: void updateCachedTextfield()>();

     label64:
        specialinvoke $r0.<android.webkit.WebView: void nativeClearFocus(int,int)>($i0, $i5);

        goto label07;

     label65:
        $i0 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i0 != 3 goto label63;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        staticinvoke <android.webkit.WebViewCore: void resumeUpdate(android.webkit.WebViewCore)>($r3);

        goto label63;
    }

    public boolean onTrackballEvent(android.view.MotionEvent)
    {
        android.webkit.WebView $r0;
        android.view.MotionEvent $r1;
        long $l0, $l3;
        int $i1;
        float $f0, $f1;
        byte $b2;
        android.os.Handler $r2;
        boolean $z0;
        android.graphics.Rect $r3, $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.view.MotionEvent;

        $l0 = virtualinvoke $r1.<android.view.MotionEvent: long getEventTime()>();

        $i1 = virtualinvoke $r1.<android.view.MotionEvent: int getMetaState()>();

        $i1 = $i1 & 2;

        if $i1 == 0 goto label03;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $b2 = $f0 cmpl 0.0F;

        if $b2 <= 0 goto label01;

        virtualinvoke $r0.<android.webkit.WebView: boolean pageDown(boolean)>(1);

     label01:
        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $b2 = $f0 cmpg 0.0F;

        if $b2 >= 0 goto label02;

        virtualinvoke $r0.<android.webkit.WebView: boolean pageUp(boolean)>(1);

     label02:
        return 1;

     label03:
        $i1 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        if $i1 != 0 goto label09;

        $r2 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(7);

        $r0.<android.webkit.WebView: boolean mTrackballDown> = 1;

        $i1 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i1 == 0 goto label05;

        $z0 = virtualinvoke $r0.<android.view.ViewGroup: boolean hasFocus()>();

        if $z0 == 0 goto label08;

        $z0 = virtualinvoke $r0.<android.view.View: boolean hasWindowFocus()>();

        if $z0 == 0 goto label08;

        $z0 = 1;

     label04:
        specialinvoke $r0.<android.webkit.WebView: void nativeRecordButtons(boolean,boolean,boolean)>($z0, 1, 1);

     label05:
        $l3 = $r0.<android.webkit.WebView: long mLastFocusTime>;

        $l0 = $l0 - $l3;

        $b2 = $l0 cmp 200L;

        if $b2 > 0 goto label06;

        $r3 = $r0.<android.webkit.WebView: android.graphics.Rect mLastFocusBounds>;

        $r4 = specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect nativeGetFocusRingBounds()>();

        $z0 = virtualinvoke $r3.<android.graphics.Rect: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label06;

        $r3 = $r0.<android.webkit.WebView: android.graphics.Rect mLastFocusBounds>;

        specialinvoke $r0.<android.webkit.WebView: void nativeSelectBestAt(android.graphics.Rect)>($r3);

     label06:
        $z0 = virtualinvoke $r0.<android.view.View: boolean isInTouchMode()>();

        if $z0 == 0 goto label07;

        virtualinvoke $r0.<android.view.View: boolean requestFocusFromTouch()>();

     label07:
        return 0;

     label08:
        $z0 = 0;

        goto label04;

     label09:
        $i1 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        if $i1 != 1 goto label12;

        $r2 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(23);

        $r0.<android.webkit.WebView: boolean mTrackballDown> = 0;

        $r0.<android.webkit.WebView: long mTrackballUpTime> = $l0;

        $z0 = $r0.<android.webkit.WebView: boolean mShiftIsPressed>;

        if $z0 == 0 goto label10;

        $z0 = $r0.<android.webkit.WebView: boolean mExtendSelection>;

        if $z0 == 0 goto label11;

        specialinvoke $r0.<android.webkit.WebView: boolean commitCopy()>();

     label10:
        return 0;

     label11:
        $r0.<android.webkit.WebView: boolean mExtendSelection> = 1;

        goto label10;

     label12:
        $z0 = $r0.<android.webkit.WebView: boolean mMapTrackballToArrowKeys>;

        if $z0 == 0 goto label13;

        $z0 = $r0.<android.webkit.WebView: boolean mShiftIsPressed>;

        if $z0 != 0 goto label13;

        return 0;

     label13:
        $i1 = $r0.<android.webkit.WebView: int mTouchMode>;

        if $i1 != 6 goto label14;

        return 1;

     label14:
        $z0 = $r0.<android.webkit.WebView: boolean mTrackballDown>;

        if $z0 == 0 goto label15;

        return 1;

     label15:
        $l3 = $r0.<android.webkit.WebView: long mTrackballUpTime>;

        $l3 = $l0 - $l3;

        $b2 = $l3 cmp 200L;

        if $b2 >= 0 goto label16;

        return 1;

     label16:
        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $l3 = $r0.<android.webkit.WebView: long mTrackballLastTime>;

        $l3 = $l0 - $l3;

        $b2 = $l3 cmp 200L;

        if $b2 <= 0 goto label17;

        $r0.<android.webkit.WebView: long mTrackballFirstTime> = $l0;

        $r0.<android.webkit.WebView: int mTrackballYMove> = 0;

        $r0.<android.webkit.WebView: int mTrackballXMove> = 0;

     label17:
        $r0.<android.webkit.WebView: long mTrackballLastTime> = $l0;

        $f0 = $r0.<android.webkit.WebView: float mTrackballRemainsX>;

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f0 = $f0 + $f1;

        $r0.<android.webkit.WebView: float mTrackballRemainsX> = $f0;

        $f0 = $r0.<android.webkit.WebView: float mTrackballRemainsY>;

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $f0 = $f0 + $f1;

        $r0.<android.webkit.WebView: float mTrackballRemainsY> = $f0;

        specialinvoke $r0.<android.webkit.WebView: void doTrackball(long)>($l0);

        return 1;
    }

    public void onWindowFocusChanged(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0, $z1;
        int $i0;
        android.webkit.WebSettings $r1;
        android.widget.ZoomButtonsController $r2;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke $r0.<android.view.ViewGroup: boolean hasFocus()>();

        if $z1 == 0 goto label3;

        $r0.<android.webkit.WebView: boolean mDrawFocusRing> = 1;

        $z1 = $r0.<android.webkit.WebView: boolean mNeedsUpdateTextEntry>;

        if $z1 == 0 goto label1;

        specialinvoke $r0.<android.webkit.WebView: void updateTextEntry()>();

     label1:
        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 == 0 goto label2;

        specialinvoke $r0.<android.webkit.WebView: void nativeRecordButtons(boolean,boolean,boolean)>(1, 0, 1);

     label2:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

        specialinvoke $r0.<android.view.View: void onWindowFocusChanged(boolean)>($z0);

        return;

     label3:
        $r0.<android.webkit.WebView: boolean mDrawFocusRing> = 0;

        goto label2;

     label4:
        $r1 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebSettings getSettings()>();

        $z1 = virtualinvoke $r1.<android.webkit.WebSettings: boolean getBuiltInZoomControls()>();

        if $z1 == 0 goto label5;

        $r2 = $r0.<android.webkit.WebView: android.widget.ZoomButtonsController mZoomButtonsController>;

        $z1 = virtualinvoke $r2.<android.widget.ZoomButtonsController: boolean isVisible()>();

        if $z1 != 0 goto label5;

        $r0.<android.webkit.WebView: boolean mDrawFocusRing> = 0;

     label5:
        $r0.<android.webkit.WebView: boolean mGotKeyDown> = 0;

        $r0.<android.webkit.WebView: boolean mShiftIsPressed> = 0;

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 == 0 goto label2;

        specialinvoke $r0.<android.webkit.WebView: void nativeRecordButtons(boolean,boolean,boolean)>(0, 0, 1);

        goto label2;
    }

    public boolean overlayHorizontalScrollbar()
    {
        android.webkit.WebView $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebView;

        z0 = $r0.<android.webkit.WebView: boolean mOverlayHorizontalScrollbar>;

        return z0;
    }

    public boolean overlayVerticalScrollbar()
    {
        android.webkit.WebView $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebView;

        z0 = $r0.<android.webkit.WebView: boolean mOverlayVerticalScrollbar>;

        return z0;
    }

    public boolean pageDown(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;
        int $i0, $i1;
        android.widget.Scroller $r1;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke $r0.<android.webkit.WebView: void nativeClearFocus(int,int)>(-1, -1);

        if $z0 == 0 goto label2;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r0.<android.webkit.WebView: int mContentHeight>;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean pinScrollTo(int,int,boolean,int)>($i0, $i1, 1, 0);

        return $z0;

     label2:
        $i0 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        if $i0 <= 48 goto label4;

        $i0 = $i0 - 24;

     label3:
        $r0.<android.webkit.WebView: boolean mUserScroll> = 1;

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $z0 = virtualinvoke $r1.<android.widget.Scroller: boolean isFinished()>();

        if $z0 == 0 goto label5;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>(0, $i0, 1, 0);

        return $z0;

     label4:
        $i0 = $i0 / 2;

        goto label3;

     label5:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean extendScroll(int)>($i0);

        return $z0;
    }

    public boolean pageUp(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;
        int $i0;
        android.widget.Scroller $r1;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        specialinvoke $r0.<android.webkit.WebView: void nativeClearFocus(int,int)>(-1, -1);

        if $z0 == 0 goto label2;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean pinScrollTo(int,int,boolean,int)>($i0, 0, 1, 0);

        return $z0;

     label2:
        $i0 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        if $i0 <= 48 goto label4;

        $i0 = neg $i0;

        $i0 = $i0 + 24;

     label3:
        $r0.<android.webkit.WebView: boolean mUserScroll> = 1;

        $r1 = $r0.<android.webkit.WebView: android.widget.Scroller mScroller>;

        $z0 = virtualinvoke $r1.<android.widget.Scroller: boolean isFinished()>();

        if $z0 == 0 goto label5;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>(0, $i0, 1, 0);

        return $z0;

     label4:
        $i0 = neg $i0;

        $i0 = $i0 / 2;

        goto label3;

     label5:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean extendScroll(int)>($i0);

        return $z0;
    }

    void passToJavaScript(java.lang.String, android.view.KeyEvent)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1;
        android.view.KeyEvent $r2;
        java.util.HashMap $r3;
        android.webkit.WebViewCore$FocusData $r4, $r5;
        int $i0;
        android.webkit.WebViewCore $r6;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.view.KeyEvent;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r4 = new android.webkit.WebViewCore$FocusData;

        $r5 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        specialinvoke $r4.<android.webkit.WebViewCore$FocusData: void <init>(android.webkit.WebViewCore$FocusData)>($r5);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("focusData", $r4);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("event", $r2);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("currentText", $r1);

        $i0 = $r0.<android.webkit.WebView: int mTextGeneration>;

        $i0 = $i0 + 1;

        $r0.<android.webkit.WebView: int mTextGeneration> = $i0;

        $r6 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $i0 = $r0.<android.webkit.WebView: int mTextGeneration>;

        virtualinvoke $r6.<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>(115, $i0, 0, $r3);

        $r6 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r6.<android.webkit.WebViewCore: void removeMessages(int)>(128);

        $r6 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r4 = new android.webkit.WebViewCore$FocusData;

        $r5 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        specialinvoke $r4.<android.webkit.WebViewCore$FocusData: void <init>(android.webkit.WebViewCore$FocusData)>($r5);

        virtualinvoke $r6.<android.webkit.WebViewCore: void sendMessageDelayed(int,java.lang.Object,long)>(128, $r4, 1000L);

        return;
    }

    public void pauseTimers()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int)>(109);

        return;
    }

    public boolean performLongClick()
    {
        android.webkit.WebView $r0;
        boolean $z0;
        android.webkit.TextDialog $r1;

        $r0 := @this: android.webkit.WebView;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $z0 = virtualinvoke $r1.<android.widget.TextView: boolean performLongClick()>();

        return $z0;

     label1:
        $z0 = specialinvoke $r0.<android.view.View: boolean performLongClick()>();

        return $z0;
    }

    public void refreshPlugins(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;
        java.lang.Boolean $r1;
        android.webkit.WebViewCore $r2;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r2.<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>(132, $r1);

        return;

     label1:
        return;
    }

    public void reload()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int)>(102);

        return;
    }

    void replaceTextfieldText(int, int, java.lang.String, int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        java.util.HashMap $r2;
        android.webkit.WebViewCore$FocusData $r3, $r4;
        java.lang.Integer $r5;
        android.webkit.WebViewCore $r6;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.lang.String;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r4 = new android.webkit.WebViewCore$FocusData;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        specialinvoke $r4.<android.webkit.WebViewCore$FocusData: void <init>(android.webkit.WebViewCore$FocusData)>($r3);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("focusData", $r4);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("replace", $r1);

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("start", $r5);

        $r5 = new java.lang.Integer;

        specialinvoke $r5.<java.lang.Integer: void <init>(int)>($i3);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("end", $r5);

        $i2 = $r0.<android.webkit.WebView: int mTextGeneration>;

        $i2 = $i2 + 1;

        $r0.<android.webkit.WebView: int mTextGeneration> = $i2;

        $r6 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r6.<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>(114, $i0, $i1, $r2);

        return;
    }

    public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)
    {
        android.webkit.WebView $r0;
        android.view.View $r1;
        android.graphics.Rect $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.view.View;

        $r2 := @parameter1: android.graphics.Rect;

        $z0 := @parameter2: boolean;

        $i4 = virtualinvoke $r1.<android.view.View: int getLeft()>();

        $i2 = virtualinvoke $r1.<android.view.View: int getScrollX()>();

        $i4 = $i4 - $i2;

        $i2 = virtualinvoke $r1.<android.view.View: int getTop()>();

        $i1 = virtualinvoke $r1.<android.view.View: int getScrollY()>();

        $i2 = $i2 - $i1;

        virtualinvoke $r2.<android.graphics.Rect: void offset(int,int)>($i4, $i2);

        $i4 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $i2 = virtualinvoke $r0.<android.view.View: int getHorizontalScrollbarHeight()>();

        $i0 = $i4 - $i2;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i2 + $i0;

        $i4 = 0;

        $i3 = $r2.<android.graphics.Rect: int bottom>;

        if $i3 <= $i1 goto label5;

        $i3 = $r2.<android.graphics.Rect: int top>;

        if $i3 <= $i2 goto label5;

        $i4 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        if $i4 <= $i0 goto label4;

        $i4 = $r2.<android.graphics.Rect: int top>;

        $i4 = $i4 - $i2;

        $i4 = 0 + $i4;

     label1:
        $i2 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke $r0.<android.view.View: int getVerticalScrollbarWidth()>();

        $i3 = $i2 - $i1;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i1 = $i2 + $i3;

        $i0 = 0;

        $i5 = $r2.<android.graphics.Rect: int right>;

        if $i5 <= $i1 goto label7;

        $i5 = $r2.<android.graphics.Rect: int left>;

        if $i5 <= $i2 goto label7;

        $i0 = virtualinvoke $r2.<android.graphics.Rect: int width()>();

        if $i0 <= $i3 goto label6;

        $i1 = $r2.<android.graphics.Rect: int left>;

        $i2 = $i1 - $i2;

        $i0 = 0 + $i2;

     label2:
        $i2 = $i4 | $i0;

        if $i2 == 0 goto label9;

        if $z0 != 0 goto label8;

        $z0 = 1;

     label3:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean pinScrollBy(int,int,boolean,int)>($i0, $i4, $z0, 0);

        return $z0;

     label4:
        $i4 = $r2.<android.graphics.Rect: int bottom>;

        $i4 = $i4 - $i1;

        $i4 = 0 + $i4;

        goto label1;

     label5:
        $i1 = $r2.<android.graphics.Rect: int top>;

        if $i1 >= $i2 goto label1;

        $i4 = $r2.<android.graphics.Rect: int top>;

        $i4 = $i2 - $i4;

        $i4 = 0 - $i4;

        goto label1;

     label6:
        $i2 = $r2.<android.graphics.Rect: int right>;

        $i2 = $i2 - $i1;

        $i0 = 0 + $i2;

        goto label2;

     label7:
        $i1 = $r2.<android.graphics.Rect: int left>;

        if $i1 >= $i2 goto label2;

        $i1 = $r2.<android.graphics.Rect: int left>;

        $i2 = $i2 - $i1;

        $i0 = 0 - $i2;

        goto label2;

     label8:
        $z0 = 0;

        goto label3;

     label9:
        return 0;
    }

    public boolean requestFocus(int, android.graphics.Rect)
    {
        android.webkit.WebView $r0;
        int $i0;
        android.graphics.Rect $r1;
        boolean $z0, $z1, $z2;
        android.webkit.TextDialog $r2;
        android.webkit.WebViewCore $r3;
        android.webkit.WebSettings $r4;
        byte $b1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label2;

        $r2 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $z0 = virtualinvoke $r2.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>($i0, $r1);

     label1:
        return $z0;

     label2:
        $z1 = specialinvoke $r0.<android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)>($i0, $r1);

        $z0 = $z1;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r4 = virtualinvoke $r3.<android.webkit.WebViewCore: android.webkit.WebSettings getSettings()>();

        $z2 = virtualinvoke $r4.<android.webkit.WebSettings: boolean getNeedInitialFocus()>();

        if $z2 == 0 goto label1;

        lookupswitch($i0)
        {
            case 17: goto label7;
            case 33: goto label4;
            case 66: goto label8;
            case 130: goto label6;
            default: goto label3;
        };

     label3:
        return $z1;

     label4:
        $b1 = 19;

     label5:
        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 == 0 goto label1;

        $z1 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        if $z1 != 0 goto label1;

        specialinvoke $r0.<android.webkit.WebView: boolean navHandledKey(int,int,boolean,long)>($b1, 1, 1, 0L);

        goto label1;

     label6:
        $b1 = 20;

        goto label5;

     label7:
        $b1 = 21;

        goto label5;

     label8:
        $b1 = 22;

        goto label5;
    }

    public void requestFocusNodeHref(android.os.Message)
    {
        android.webkit.WebView $r0;
        android.os.Message $r1;
        android.webkit.WebView$FocusNode $r2;
        int $i0, $i1;
        boolean $z0;
        android.webkit.WebViewCore $r3;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Message;

        if $r1 == null goto label2;

        $i0 = $r0.<android.webkit.WebView: int mNativeClass>;

        if $i0 != 0 goto label1;

        return;

     label1:
        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean nativeUpdateFocusNode()>();

        if $z0 == 0 goto label3;

        $r2 = $r0.<android.webkit.WebView: android.webkit.WebView$FocusNode mFocusNode>;

        $z0 = $r2.<android.webkit.WebView$FocusNode: boolean mIsAnchor>;

        if $z0 == 0 goto label4;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $i0 = $r2.<android.webkit.WebView$FocusNode: int mFramePointer>;

        $i1 = $r2.<android.webkit.WebView$FocusNode: int mNodePointer>;

        virtualinvoke $r3.<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>(137, $i0, $i1, $r1);

        return;

     label2:
        return;

     label3:
        return;

     label4:
        return;
    }

    public void requestImageRef(android.os.Message)
    {
        android.webkit.WebView $r0;
        android.os.Message $r1;
        float $f0;
        int $i0, $i1, $i2;
        java.lang.String $r2;
        android.os.Bundle $r3;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Message;

        $f0 = $r0.<android.webkit.WebView: float mLastTouchX>;

        $i0 = (int) $f0;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i0 + $i1;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $f0 = $r0.<android.webkit.WebView: float mLastTouchY>;

        $i1 = (int) $f0;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i1 + $i2;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i1);

        $r2 = specialinvoke $r0.<android.webkit.WebView: java.lang.String nativeImageURI(int,int)>($i0, $i1);

        $r3 = virtualinvoke $r1.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("url", $r2);

        virtualinvoke $r1.<android.os.Message: void setData(android.os.Bundle)>($r3);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    void requestListBox(java.lang.String[], boolean[], int)
    {
        android.webkit.WebView $r0;
        java.lang.String[] $r1;
        boolean[] $r2;
        int $i0;
        android.webkit.WebView$InvokeListBox $r3;
        android.os.Handler $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: boolean[];

        $i0 := @parameter2: int;

        $r4 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r3 = new android.webkit.WebView$InvokeListBox;

        specialinvoke $r3.<android.webkit.WebView$InvokeListBox: void <init>(android.webkit.WebView,java.lang.String[],boolean[],int,android.webkit.WebView$1)>($r0, $r1, $r2, $i0, null);

        virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>($r3);

        return;
    }

    void requestListBox(java.lang.String[], boolean[], int[])
    {
        android.webkit.WebView $r0;
        java.lang.String[] $r1;
        boolean[] $r2;
        int[] $r3;
        android.webkit.WebView$InvokeListBox $r4;
        android.os.Handler $r5;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: boolean[];

        $r3 := @parameter2: int[];

        $r5 = $r0.<android.webkit.WebView: android.os.Handler mPrivateHandler>;

        $r4 = new android.webkit.WebView$InvokeListBox;

        specialinvoke $r4.<android.webkit.WebView$InvokeListBox: void <init>(android.webkit.WebView,java.lang.String[],boolean[],int[],android.webkit.WebView$1)>($r0, $r1, $r2, $r3, null);

        virtualinvoke $r5.<android.os.Handler: boolean post(java.lang.Runnable)>($r4);

        return;
    }

    void resetTrackballTime()
    {
        android.webkit.WebView $r0;

        $r0 := @this: android.webkit.WebView;

        $r0.<android.webkit.WebView: long mTrackballLastTime> = 0L;

        return;
    }

    public boolean restorePicture(android.os.Bundle, java.io.File)
    {
        android.webkit.WebView $r0;
        android.os.Bundle $r1;
        java.io.File $r2;
        java.io.FileInputStream $r3;
        boolean $z0;
        android.graphics.Picture $r4;
        int $i0, $i1;
        float $f0, $f1;
        java.io.FileNotFoundException $r5;
        java.lang.RuntimeException $r6;
        java.io.IOException $r7;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Bundle;

        $r2 := @parameter1: java.io.File;

        if $r2 == null goto label1;

        if $r1 != null goto label2;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label8;

        $r4 = null;

        $r3 = new java.io.FileInputStream;

     label3:
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        $r4 = staticinvoke <android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)>($r3);

        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

     label4:
        if $r4 == null goto label8;

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>("scrollX", 0);

        $i1 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String,int)>("scrollY", 0);

        $f0 = virtualinvoke $r1.<android.os.Bundle: float getFloat(java.lang.String,float)>("scale", 1.0F);

        $r0.<android.webkit.WebView: boolean mDrawHistory> = 1;

        $r0.<android.webkit.WebView: android.graphics.Picture mHistoryPicture> = $r4;

        $r0.<android.view.View: int mScrollX> = $i0;

        $r0.<android.view.View: int mScrollY> = $i1;

        $i0 = virtualinvoke $r4.<android.graphics.Picture: int getWidth()>();

        $f1 = (float) $i0;

        $f1 = $f1 * $f0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $r0.<android.webkit.WebView: int mHistoryWidth> = $i0;

        $i0 = virtualinvoke $r4.<android.graphics.Picture: int getHeight()>();

        $f1 = (float) $i0;

        $f1 = $f1 * $f0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $r0.<android.webkit.WebView: int mHistoryHeight> = $i0;

        $r0.<android.webkit.WebView: float mActualScale> = $f0;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return 1;

     label5:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Throwable: void printStackTrace()>();

        goto label4;

     label6:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

        goto label4;

     label7:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace()>();

        goto label4;

     label8:
        return 0;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.lang.RuntimeException from label3 to label4 with label6;
        catch java.io.IOException from label3 to label4 with label7;
    }

    public android.webkit.WebBackForwardList restoreState(android.os.Bundle)
    {
        android.webkit.WebView $r0;
        android.os.Bundle $r1, $r4;
        android.webkit.WebHistoryItem $r2;
        android.webkit.WebBackForwardList $r3, $r7, $r12;
        boolean $z0;
        android.net.http.SslCertificate $r5;
        android.webkit.CallbackProxy $r6;
        int $i0, $i1, $i2;
        java.io.Serializable $r8;
        java.util.List $r9;
        java.lang.Object $r10;
        byte[] $r11;
        android.webkit.WebViewCore $r13;
        java.lang.Throwable $r14;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Bundle;

        $r3 = null;

        if $r1 != null goto label01;

        return null;

     label01:
        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("index");

        if $z0 == 0 goto label11;

        $z0 = virtualinvoke $r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("history");

        if $z0 == 0 goto label11;

        $r4 = virtualinvoke $r1.<android.os.Bundle: android.os.Bundle getBundle(java.lang.String)>("certificate");

        $r5 = staticinvoke <android.net.http.SslCertificate: android.net.http.SslCertificate restoreState(android.os.Bundle)>($r4);

        $r0.<android.webkit.WebView: android.net.http.SslCertificate mCertificate> = $r5;

        $r6 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        $r7 = virtualinvoke $r6.<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>();

        $i0 = virtualinvoke $r1.<android.os.Bundle: int getInt(java.lang.String)>("index");

        entermonitor $r7;

     label02:
        $r8 = virtualinvoke $r1.<android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)>("history");

        $r9 = (java.util.List) $r8;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i0 < 0 goto label03;

        if $i0 < $i1 goto label05;

     label03:
        exitmonitor $r7;

     label04:
        return null;

     label05:
        $i2 = 0;

     label06:
        if $i2 >= $i1 goto label09;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object remove(int)>(0);

        $r11 = (byte[]) $r10;

        if $r11 != null goto label08;

        exitmonitor $r7;

     label07:
        return null;

     label08:
        $r2 = new android.webkit.WebHistoryItem;

        specialinvoke $r2.<android.webkit.WebHistoryItem: void <init>(byte[])>($r11);

        virtualinvoke $r7.<android.webkit.WebBackForwardList: void addHistoryItem(android.webkit.WebHistoryItem)>($r2);

        $i2 = $i2 + 1;

        goto label06;

     label09:
        $r12 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()>();

        $r3 = $r12;

        virtualinvoke $r12.<android.webkit.WebBackForwardList: void setCurrentIndex(int)>($i0);

        exitmonitor $r7;

     label10:
        $r13 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r13.<android.webkit.WebViewCore: void removeMessages()>();

        $r13 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r13.<android.webkit.WebViewCore: void sendMessage(int,int)>(108, $i0);

     label11:
        return $r3;

     label12:
        $r14 := @caughtexception;

     label13:
        exitmonitor $r7;

     label14:
        throw $r14;

        catch java.lang.Throwable from label02 to label04 with label12;
        catch java.lang.Throwable from label05 to label07 with label12;
        catch java.lang.Throwable from label08 to label10 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void resumeTimers()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int)>(110);

        return;
    }

    public void savePassword(java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1, $r2, $r3;
        android.webkit.WebViewDatabase $r4;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = $r0.<android.webkit.WebView: android.webkit.WebViewDatabase mDatabase>;

        virtualinvoke $r4.<android.webkit.WebViewDatabase: void setUsernamePassword(java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3);

        return;
    }

    public boolean savePicture(android.os.Bundle, java.io.File)
    {
        android.webkit.WebView $r0;
        android.os.Bundle $r1;
        java.io.File $r2;
        java.io.FileOutputStream $r3;
        android.graphics.Picture $r4;
        long $l0;
        byte $b1;
        int $i2;
        float $f0;
        java.io.FileNotFoundException $r5;
        java.io.IOException $r6;
        java.lang.RuntimeException $r7;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Bundle;

        $r2 := @parameter1: java.io.File;

        if $r2 == null goto label1;

        if $r1 != null goto label2;

     label1:
        return 0;

     label2:
        $r4 = virtualinvoke $r0.<android.webkit.WebView: android.graphics.Picture capturePicture()>();

        $r3 = new java.io.FileOutputStream;

     label3:
        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        virtualinvoke $r4.<android.graphics.Picture: void writeToStream(java.io.OutputStream)>($r3);

        virtualinvoke $r3.<java.io.FileOutputStream: void close()>();

     label4:
        $l0 = virtualinvoke $r2.<java.io.File: long length()>();

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label8;

        $i2 = $r0.<android.view.View: int mScrollX>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("scrollX", $i2);

        $i2 = $r0.<android.view.View: int mScrollY>;

        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("scrollY", $i2);

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        virtualinvoke $r1.<android.os.Bundle: void putFloat(java.lang.String,float)>("scale", $f0);

        return 1;

     label5:
        $r5 := @caughtexception;

        virtualinvoke $r5.<java.lang.Throwable: void printStackTrace()>();

        goto label4;

     label6:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: void printStackTrace()>();

        goto label4;

     label7:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace()>();

        goto label4;

     label8:
        return 0;

        catch java.io.FileNotFoundException from label3 to label4 with label5;
        catch java.io.IOException from label3 to label4 with label6;
        catch java.lang.RuntimeException from label3 to label4 with label7;
    }

    public android.webkit.WebBackForwardList saveState(android.os.Bundle)
    {
        android.webkit.WebView $r0;
        android.os.Bundle $r1, $r7;
        java.util.ArrayList $r2;
        android.webkit.WebBackForwardList $r3;
        int $i0, $i1;
        android.webkit.WebHistoryItem $r4;
        byte[] $r5;
        android.net.http.SslCertificate $r6;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.os.Bundle;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r0.<android.webkit.WebView: android.webkit.WebBackForwardList copyBackForwardList()>();

        $i0 = virtualinvoke $r3.<android.webkit.WebBackForwardList: int getCurrentIndex()>();

        $i1 = virtualinvoke $r3.<android.webkit.WebBackForwardList: int getSize()>();

        if $i0 < 0 goto label2;

        if $i0 >= $i1 goto label2;

        if $i1 != 0 goto label3;

     label2:
        return null;

     label3:
        virtualinvoke $r1.<android.os.Bundle: void putInt(java.lang.String,int)>("index", $i0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        $i0 = 0;

     label4:
        if $i0 >= $i1 goto label6;

        $r4 = virtualinvoke $r3.<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>($i0);

        $r5 = virtualinvoke $r4.<android.webkit.WebHistoryItem: byte[] getFlattenedData()>();

        if $r5 != null goto label5;

        return null;

     label5:
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $i0 = $i0 + 1;

        goto label4;

     label6:
        virtualinvoke $r1.<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>("history", $r2);

        $r6 = $r0.<android.webkit.WebView: android.net.http.SslCertificate mCertificate>;

        if $r6 == null goto label7;

        $r6 = $r0.<android.webkit.WebView: android.net.http.SslCertificate mCertificate>;

        $r7 = staticinvoke <android.net.http.SslCertificate: android.os.Bundle saveState(android.net.http.SslCertificate)>($r6);

        virtualinvoke $r1.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>("certificate", $r7);

     label7:
        return $r3;
    }

    public void setBackgroundColor(int)
    {
        android.webkit.WebView $r0;
        int $i0;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $r0.<android.webkit.WebView: int mBackgroundColor> = $i0;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int,int)>(126, $i0);

        return;
    }

    public void setCertificate(android.net.http.SslCertificate)
    {
        android.webkit.WebView $r0;
        android.net.http.SslCertificate $r1;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.net.http.SslCertificate;

        $r0.<android.webkit.WebView: android.net.http.SslCertificate mCertificate> = $r1;

        return;
    }

    public void setDownloadListener(android.webkit.DownloadListener)
    {
        android.webkit.WebView $r0;
        android.webkit.DownloadListener $r1;
        android.webkit.CallbackProxy $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.webkit.DownloadListener;

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        virtualinvoke $r2.<android.webkit.CallbackProxy: void setDownloadListener(android.webkit.DownloadListener)>($r1);

        return;
    }

    public void setHorizontalScrollbarOverlay(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebView: boolean mOverlayHorizontalScrollbar> = $z0;

        return;
    }

    public void setHttpAuthUsernamePassword(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        android.webkit.WebViewDatabase $r5;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 = $r0.<android.webkit.WebView: android.webkit.WebViewDatabase mDatabase>;

        virtualinvoke $r5.<android.webkit.WebViewDatabase: void setHttpAuthUsernamePassword(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4);

        return;
    }

    public void setInitialScale(int)
    {
        android.webkit.WebView $r0;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $r0.<android.webkit.WebView: int mInitialScale> = $i0;

        return;
    }

    public void setLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.webkit.WebView $r0;
        android.view.ViewGroup$LayoutParams $r1;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $i0 = $r1.<android.view.ViewGroup$LayoutParams: int height>;

        if $i0 != -2 goto label1;

        $r0.<android.webkit.WebView: boolean mWrapContent> = 1;

     label1:
        specialinvoke $r0.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>($r1);

        return;
    }

    public void setMapTrackballToArrowKeys(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebView: boolean mMapTrackballToArrowKeys> = $z0;

        return;
    }

    public void setNetworkAvailable(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;
        android.webkit.WebViewCore $r1;
        byte $b0;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $z0 == 0 goto label2;

        $b0 = 1;

     label1:
        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int,int,int)>(119, $b0, 0);

        return;

     label2:
        $b0 = 0;

        goto label1;
    }

    public void setPictureListener(android.webkit.WebView$PictureListener)
    {
        android.webkit.WebView $r0;
        android.webkit.WebView$PictureListener $r1;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.webkit.WebView$PictureListener;

        $r0.<android.webkit.WebView: android.webkit.WebView$PictureListener mPictureListener> = $r1;

        return;
    }

    public void setScrollBarStyle(int)
    {
        android.webkit.WebView $r0;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        if $i0 == 16777216 goto label1;

        if $i0 != 50331648 goto label3;

     label1:
        $r0.<android.webkit.WebView: boolean mOverlayVerticalScrollbar> = 0;

        $r0.<android.webkit.WebView: boolean mOverlayHorizontalScrollbar> = 0;

     label2:
        specialinvoke $r0.<android.view.View: void setScrollBarStyle(int)>($i0);

        return;

     label3:
        $r0.<android.webkit.WebView: boolean mOverlayVerticalScrollbar> = 1;

        $r0.<android.webkit.WebView: boolean mOverlayHorizontalScrollbar> = 1;

        goto label2;
    }

    void setSelection(int, int)
    {
        android.webkit.WebView $r0;
        int $i0, $i1;
        android.webkit.WebViewCore $r1;
        android.webkit.WebViewCore$FocusData $r2, $r3;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        $r2 = new android.webkit.WebViewCore$FocusData;

        $r3 = $r0.<android.webkit.WebView: android.webkit.WebViewCore$FocusData mFocusData>;

        specialinvoke $r2.<android.webkit.WebViewCore$FocusData: void <init>(android.webkit.WebViewCore$FocusData)>($r3);

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>(113, $i0, $i1, $r2);

        return;
    }

    public void setVerticalScrollbarOverlay(boolean)
    {
        android.webkit.WebView $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebView: boolean mOverlayVerticalScrollbar> = $z0;

        return;
    }

    public void setWebChromeClient(android.webkit.WebChromeClient)
    {
        android.webkit.WebView $r0;
        android.webkit.WebChromeClient $r1;
        android.webkit.CallbackProxy $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.webkit.WebChromeClient;

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        virtualinvoke $r2.<android.webkit.CallbackProxy: void setWebChromeClient(android.webkit.WebChromeClient)>($r1);

        return;
    }

    public void setWebViewClient(android.webkit.WebViewClient)
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewClient $r1;
        android.webkit.CallbackProxy $r2;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: android.webkit.WebViewClient;

        $r2 = $r0.<android.webkit.WebView: android.webkit.CallbackProxy mCallbackProxy>;

        virtualinvoke $r2.<android.webkit.CallbackProxy: void setWebViewClient(android.webkit.WebViewClient)>($r1);

        return;
    }

    void shortPressOnTextField()
    {
        android.webkit.WebView $r0;
        android.webkit.TextDialog $r1;
        boolean $z0;
        int $i0, $i1, $i2;

        $r0 := @this: android.webkit.WebView;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean inEditingMode()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<android.webkit.WebView: android.webkit.TextDialog mTextEntry>;

        $i0 = virtualinvoke $r1.<android.view.View: int getLeft()>();

        $i1 = virtualinvoke $r1.<android.view.View: int getRight()>();

        $i0 = $i0 + $i1;

        $i0 = $i0 >> 1;

        $i0 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i0);

        $i1 = virtualinvoke $r1.<android.view.View: int getTop()>();

        $i2 = virtualinvoke $r1.<android.view.View: int getBottom()>();

        $i1 = $i1 + $i2;

        $i1 = $i1 >> 1;

        $i1 = virtualinvoke $r0.<android.webkit.WebView: int viewToContent(int)>($i1);

        $i2 = $r0.<android.webkit.WebView: int mNavSlop>;

        specialinvoke $r0.<android.webkit.WebView: boolean nativeMotionUp(int,int,int,boolean)>($i0, $i1, $i2, 1);

        return;

     label1:
        return;
    }

    public void stopLoading()
    {
        android.webkit.WebView $r0;
        android.webkit.WebViewCore $r1;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int)>(101);

        return;
    }

    void switchOutDrawHistory()
    {
        android.webkit.WebView $r0;
        int $i0, $i1, $i2;
        android.webkit.WebViewCore $r1;
        boolean $z0;

        $r0 := @this: android.webkit.WebView;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = $r0.<android.webkit.WebView: boolean mDrawHistory>;

        if $z0 == 0 goto label4;

        $r0.<android.webkit.WebView: boolean mDrawHistory> = 0;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i2 = specialinvoke $r0.<android.webkit.WebView: int pinLocX(int)>($i2);

        $r0.<android.view.View: int mScrollX> = $i2;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i2 = specialinvoke $r0.<android.webkit.WebView: int pinLocY(int)>($i2);

        $r0.<android.view.View: int mScrollY> = $i2;

        $i2 = $r0.<android.view.View: int mScrollX>;

        if $i0 != $i2 goto label2;

        $i2 = $r0.<android.view.View: int mScrollY>;

        if $i1 == $i2 goto label3;

     label2:
        $r0.<android.webkit.WebView: boolean mUserScroll> = 0;

        $r1 = $r0.<android.webkit.WebView: android.webkit.WebViewCore mWebViewCore>;

        virtualinvoke $r1.<android.webkit.WebViewCore: void sendMessage(int,int,int)>(131, $i0, $i1);

     label3:
        specialinvoke $r0.<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()>();

        return;

     label4:
        return;
    }

    void updateCachedTextfield(java.lang.String)
    {
        android.webkit.WebView $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: android.webkit.WebView;

        $r1 := @parameter0: java.lang.String;

        $i0 = $r0.<android.webkit.WebView: int mTextGeneration>;

        specialinvoke $r0.<android.webkit.WebView: void nativeUpdateCachedTextfield(java.lang.String,int)>($r1, $i0);

        return;
    }

    int viewToContent(int)
    {
        android.webkit.WebView $r0;
        int $i0;
        float $f0, $f1;

        $r0 := @this: android.webkit.WebView;

        $i0 := @parameter0: int;

        $f1 = (float) $i0;

        $f0 = $r0.<android.webkit.WebView: float mInvActualScale>;

        $f0 = $f1 * $f0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        return $i0;
    }

    public boolean zoomIn()
    {
        android.webkit.WebView $r0;
        boolean $z0;
        float $f0;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        $f0 = $f0 * 1.25F;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean zoomWithPreview(float)>($f0);

        return $z0;
    }

    public boolean zoomOut()
    {
        android.webkit.WebView $r0;
        boolean $z0;
        float $f0;

        $r0 := @this: android.webkit.WebView;

        virtualinvoke $r0.<android.webkit.WebView: void switchOutDrawHistory()>();

        $f0 = $r0.<android.webkit.WebView: float mActualScale>;

        $f0 = $f0 * 0.8F;

        $z0 = specialinvoke $r0.<android.webkit.WebView: boolean zoomWithPreview(float)>($f0);

        return $z0;
    }
}
