public class SQLite.Database extends java.lang.Object
{
    protected int error_code;
    protected long handle;

    static void <clinit>()
    {
        java.lang.Throwable $r0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

     label1:
        staticinvoke <SQLite.Database: void internal_init()>();

     label2:
        return;

     label3:
        $r0 := @caughtexception;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load sqlite: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void <init>()
    {
        SQLite.Database $r0;

        $r0 := @this: SQLite.Database;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<SQLite.Database: long handle> = 0L;

        $r0.<SQLite.Database: int error_code> = 0;

        return;
    }

    private native void _busy_handler(SQLite.BusyHandler);

    private native void _busy_timeout(int);

    private native long _changes();

    private native void _close() throws SQLite.Exception;

    private static native boolean _complete(java.lang.String);

    private native void _create_aggregate(java.lang.String, int, SQLite.Function);

    private native void _create_function(java.lang.String, int, SQLite.Function);

    private native java.lang.String _errmsg();

    private native void _exec(java.lang.String, SQLite.Callback) throws SQLite.Exception;

    private native void _exec(java.lang.String, SQLite.Callback, java.lang.String[]) throws SQLite.Exception;

    private native void _finalize();

    private native void _function_type(java.lang.String, int);

    private native void _interrupt();

    private native long _last_insert_rowid();

    private native void _open(java.lang.String, int) throws SQLite.Exception;

    private native void _open_aux_file(java.lang.String) throws SQLite.Exception;

    private native void _open_blob(java.lang.String, java.lang.String, java.lang.String, long, boolean, SQLite.Blob) throws SQLite.Exception;

    private native void _progress_handler(int, SQLite.ProgressHandler);

    private native void _set_authorizer(SQLite.Authorizer);

    private native void _set_encoding(java.lang.String) throws SQLite.Exception;

    private native void _trace(SQLite.Trace);

    public static boolean complete(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @parameter0: java.lang.String;

        entermonitor class "SQLite/Database";

     label1:
        $z0 = staticinvoke <SQLite.Database: boolean _complete(java.lang.String)>($r0);

     label2:
        exitmonitor class "SQLite/Database";

        return $z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor class "SQLite/Database";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static native java.lang.String error_string(int);

    private static native void internal_init();

    private native void stmt_prepare(java.lang.String, SQLite.Stmt) throws SQLite.Exception;

    public static native java.lang.String version();

    private native void vm_compile(java.lang.String, SQLite.Vm) throws SQLite.Exception;

    private native void vm_compile_args(java.lang.String, SQLite.Vm, java.lang.String[]) throws SQLite.Exception;

    public void busy_handler(SQLite.BusyHandler)
    {
        SQLite.Database $r0;
        SQLite.BusyHandler $r1;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: SQLite.BusyHandler;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _busy_handler(SQLite.BusyHandler)>($r1);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void busy_timeout(int)
    {
        SQLite.Database $r0;
        int $i0;
        java.lang.Throwable $r1;

        $r0 := @this: SQLite.Database;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _busy_timeout(int)>($i0);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public long changes()
    {
        SQLite.Database $r0;
        long $l0;
        java.lang.Throwable $r1;

        $r0 := @this: SQLite.Database;

        entermonitor $r0;

     label1:
        $l0 = specialinvoke $r0.<SQLite.Database: long _changes()>();

        exitmonitor $r0;

     label2:
        return $l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void close() throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.Throwable $r1;

        $r0 := @this: SQLite.Database;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _close()>();

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public SQLite.Vm compile(java.lang.String) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        SQLite.Vm $r2;
        java.lang.Throwable $r3;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        $r2 = new SQLite.Vm;

        specialinvoke $r2.<SQLite.Vm: void <init>()>();

        specialinvoke $r0.<SQLite.Database: void vm_compile(java.lang.String,SQLite.Vm)>($r1, $r2);

        exitmonitor $r0;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public SQLite.Vm compile(java.lang.String, java.lang.String[]) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        SQLite.Vm $r3;
        java.lang.Throwable $r4;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        entermonitor $r0;

     label1:
        $r3 = new SQLite.Vm;

        specialinvoke $r3.<SQLite.Vm: void <init>()>();

        specialinvoke $r0.<SQLite.Database: void vm_compile_args(java.lang.String,SQLite.Vm,java.lang.String[])>($r1, $r3, $r2);

        exitmonitor $r0;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void create_aggregate(java.lang.String, int, SQLite.Function)
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        int $i0;
        SQLite.Function $r2;
        java.lang.Throwable $r3;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: SQLite.Function;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _create_aggregate(java.lang.String,int,SQLite.Function)>($r1, $i0, $r2);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void create_function(java.lang.String, int, SQLite.Function)
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        int $i0;
        SQLite.Function $r2;
        java.lang.Throwable $r3;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: SQLite.Function;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _create_function(java.lang.String,int,SQLite.Function)>($r1, $i0, $r2);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public native java.lang.String dbversion();

    public java.lang.String error_message()
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        entermonitor $r0;

     label1:
        $r1 = specialinvoke $r0.<SQLite.Database: java.lang.String _errmsg()>();

        exitmonitor $r0;

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void exec(java.lang.String, SQLite.Callback) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        SQLite.Callback $r2;
        java.lang.Throwable $r3;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: SQLite.Callback;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _exec(java.lang.String,SQLite.Callback)>($r1, $r2);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void exec(java.lang.String, SQLite.Callback, java.lang.String[]) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        SQLite.Callback $r2;
        java.lang.String[] $r3;
        java.lang.Throwable $r4;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: SQLite.Callback;

        $r3 := @parameter2: java.lang.String[];

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _exec(java.lang.String,SQLite.Callback,java.lang.String[])>($r1, $r2, $r3);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void finalize()
    {
        SQLite.Database $r0;
        java.lang.Throwable $r1;

        $r0 := @this: SQLite.Database;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _finalize()>();

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void function_type(java.lang.String, int)
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _function_type(java.lang.String,int)>($r1, $i0);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public SQLite.TableResult get_table(java.lang.String) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        SQLite.TableResult $r2;
        boolean $z0;
        SQLite.Vm $r3;
        int $i0;
        java.lang.Throwable $r4;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $r2 = new SQLite.TableResult;

        specialinvoke $r2.<SQLite.TableResult: void <init>()>();

        $z0 = virtualinvoke $r0.<SQLite.Database: boolean is3()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<SQLite.Database: void exec(java.lang.String,SQLite.Callback)>($r1, $r2);

        return $r2;

     label1:
        entermonitor $r0;

     label2:
        $r3 = virtualinvoke $r0.<SQLite.Database: SQLite.Vm compile(java.lang.String)>($r1);

        $i0 = $r3.<SQLite.Vm: int error_code>;

        virtualinvoke $r0.<SQLite.Database: void set_last_error(int)>($i0);

     label3:
        $z0 = virtualinvoke $r3.<SQLite.Vm: boolean step(SQLite.Callback)>($r2);

        if $z0 == 0 goto label6;

        $i0 = $r3.<SQLite.Vm: int error_code>;

        virtualinvoke $r0.<SQLite.Database: void set_last_error(int)>($i0);

        goto label3;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r4;

     label6:
        virtualinvoke $r3.<SQLite.Vm: void finalize()>();

        exitmonitor $r0;

     label7:
        return $r2;

        catch java.lang.Throwable from label2 to label5 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public SQLite.TableResult get_table(java.lang.String, java.lang.String[]) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        SQLite.TableResult $r3;
        boolean $z0;
        SQLite.Vm $r4;
        int $i0;
        java.lang.Throwable $r5;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 = new SQLite.TableResult;

        specialinvoke $r3.<SQLite.TableResult: void <init>()>();

        $z0 = virtualinvoke $r0.<SQLite.Database: boolean is3()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<SQLite.Database: void exec(java.lang.String,SQLite.Callback,java.lang.String[])>($r1, $r3, $r2);

        return $r3;

     label1:
        entermonitor $r0;

     label2:
        $r4 = virtualinvoke $r0.<SQLite.Database: SQLite.Vm compile(java.lang.String,java.lang.String[])>($r1, $r2);

        $i0 = $r4.<SQLite.Vm: int error_code>;

        virtualinvoke $r0.<SQLite.Database: void set_last_error(int)>($i0);

     label3:
        $z0 = virtualinvoke $r4.<SQLite.Vm: boolean step(SQLite.Callback)>($r3);

        if $z0 == 0 goto label6;

        $i0 = $r4.<SQLite.Vm: int error_code>;

        virtualinvoke $r0.<SQLite.Database: void set_last_error(int)>($i0);

        goto label3;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r5;

     label6:
        virtualinvoke $r4.<SQLite.Vm: void finalize()>();

        exitmonitor $r0;

     label7:
        return $r3;

        catch java.lang.Throwable from label2 to label5 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public void get_table(java.lang.String, java.lang.String[], SQLite.TableResult) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        SQLite.TableResult $r3;
        boolean $z0;
        SQLite.Vm $r4;
        java.lang.Throwable $r5;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: SQLite.TableResult;

        virtualinvoke $r3.<SQLite.TableResult: void clear()>();

        $z0 = virtualinvoke $r0.<SQLite.Database: boolean is3()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<SQLite.Database: void exec(java.lang.String,SQLite.Callback,java.lang.String[])>($r1, $r3, $r2);

        return;

     label1:
        entermonitor $r0;

     label2:
        $r4 = virtualinvoke $r0.<SQLite.Database: SQLite.Vm compile(java.lang.String,java.lang.String[])>($r1, $r2);

     label3:
        $z0 = virtualinvoke $r4.<SQLite.Vm: boolean step(SQLite.Callback)>($r3);

        if $z0 != 0 goto label3;

        virtualinvoke $r4.<SQLite.Vm: void finalize()>();

        exitmonitor $r0;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void interrupt()
    {
        SQLite.Database $r0;
        java.lang.Throwable $r1;

        $r0 := @this: SQLite.Database;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _interrupt()>();

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public native boolean is3();

    public int last_error()
    {
        SQLite.Database $r0;
        int i0;

        $r0 := @this: SQLite.Database;

        i0 = $r0.<SQLite.Database: int error_code>;

        return i0;
    }

    public long last_insert_rowid()
    {
        SQLite.Database $r0;
        long $l0;
        java.lang.Throwable $r1;

        $r0 := @this: SQLite.Database;

        entermonitor $r0;

     label1:
        $l0 = specialinvoke $r0.<SQLite.Database: long _last_insert_rowid()>();

        exitmonitor $r0;

     label2:
        return $l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void open(java.lang.String, int) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _open(java.lang.String,int)>($r1, $i0);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void open_aux_file(java.lang.String) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _open_aux_file(java.lang.String)>($r1);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public SQLite.Blob open_blob(java.lang.String, java.lang.String, java.lang.String, long, boolean) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1, $r2, $r3;
        long $l0;
        boolean $z0;
        SQLite.Blob $r4;
        java.lang.Throwable $r5;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $l0 := @parameter3: long;

        $z0 := @parameter4: boolean;

        entermonitor $r0;

     label1:
        $r4 = new SQLite.Blob;

        specialinvoke $r4.<SQLite.Blob: void <init>()>();

        specialinvoke $r0.<SQLite.Database: void _open_blob(java.lang.String,java.lang.String,java.lang.String,long,boolean,SQLite.Blob)>($r1, $r2, $r3, $l0, $z0, $r4);

        exitmonitor $r0;

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public SQLite.Stmt prepare(java.lang.String) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        SQLite.Stmt $r2;
        java.lang.Throwable $r3;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        $r2 = new SQLite.Stmt;

        specialinvoke $r2.<SQLite.Stmt: void <init>()>();

        specialinvoke $r0.<SQLite.Database: void stmt_prepare(java.lang.String,SQLite.Stmt)>($r1, $r2);

        exitmonitor $r0;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void progress_handler(int, SQLite.ProgressHandler)
    {
        SQLite.Database $r0;
        int $i0;
        SQLite.ProgressHandler $r1;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        $i0 := @parameter0: int;

        $r1 := @parameter1: SQLite.ProgressHandler;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _progress_handler(int,SQLite.ProgressHandler)>($i0, $r1);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void set_authorizer(SQLite.Authorizer)
    {
        SQLite.Database $r0;
        SQLite.Authorizer $r1;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: SQLite.Authorizer;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _set_authorizer(SQLite.Authorizer)>($r1);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void set_encoding(java.lang.String) throws SQLite.Exception
    {
        SQLite.Database $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _set_encoding(java.lang.String)>($r1);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void set_last_error(int)
    {
        SQLite.Database $r0;
        int $i0;

        $r0 := @this: SQLite.Database;

        $i0 := @parameter0: int;

        $r0.<SQLite.Database: int error_code> = $i0;

        return;
    }

    public void trace(SQLite.Trace)
    {
        SQLite.Database $r0;
        SQLite.Trace $r1;
        java.lang.Throwable $r2;

        $r0 := @this: SQLite.Database;

        $r1 := @parameter0: SQLite.Trace;

        entermonitor $r0;

     label1:
        specialinvoke $r0.<SQLite.Database: void _trace(SQLite.Trace)>($r1);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
