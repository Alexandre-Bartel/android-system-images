public class com.google.image.compression.jpeg.AnalyzeJpegHeader extends java.lang.Object
{
    private static final byte[][] JPEG_HUFFMAN_TABLES;
    private static final byte[] JPEG_QUANT_56_TO_QUALITY;

    static void <clinit>()
    {
        byte[][] $r0;
        byte[] $r1;
        int $i0, $i1, $i4, $i6, $i7;
        byte $b2;
        short $s3, $s5;

        $r0 = newarray (byte[])[4];

        $r1 = newarray (byte)[28];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 5;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 1;

        $r1[6] = 1;

        $r1[7] = 1;

        $r1[8] = 1;

        $r1[9] = 0;

        $r1[10] = 0;

        $r1[11] = 0;

        $r1[12] = 0;

        $r1[13] = 0;

        $r1[14] = 0;

        $r1[15] = 0;

        $r1[16] = 0;

        $r1[17] = 1;

        $r1[18] = 2;

        $r1[19] = 3;

        $r1[20] = 4;

        $r1[21] = 5;

        $r1[22] = 6;

        $r1[23] = 7;

        $r1[24] = 8;

        $r1[25] = 9;

        $r1[26] = 10;

        $r1[27] = 11;

        $r0[0] = $r1;

        $r1 = newarray (byte)[28];

        $r1[0] = 0;

        $r1[1] = 3;

        $r1[2] = 1;

        $r1[3] = 1;

        $r1[4] = 1;

        $r1[5] = 1;

        $r1[6] = 1;

        $r1[7] = 1;

        $r1[8] = 1;

        $r1[9] = 1;

        $r1[10] = 1;

        $r1[11] = 0;

        $r1[12] = 0;

        $r1[13] = 0;

        $r1[14] = 0;

        $r1[15] = 0;

        $r1[16] = 0;

        $r1[17] = 1;

        $r1[18] = 2;

        $r1[19] = 3;

        $r1[20] = 4;

        $r1[21] = 5;

        $r1[22] = 6;

        $r1[23] = 7;

        $r1[24] = 8;

        $r1[25] = 9;

        $r1[26] = 10;

        $r1[27] = 11;

        $r0[1] = $r1;

        $r1 = newarray (byte)[178];

        $r1[0] = 0;

        $r1[1] = 2;

        $r1[2] = 1;

        $r1[3] = 3;

        $r1[4] = 3;

        $r1[5] = 2;

        $r1[6] = 4;

        $r1[7] = 3;

        $r1[8] = 5;

        $r1[9] = 5;

        $r1[10] = 4;

        $r1[11] = 4;

        $r1[12] = 0;

        $r1[13] = 0;

        $r1[14] = 1;

        $r1[15] = 125;

        $r1[16] = 1;

        $r1[17] = 2;

        $r1[18] = 3;

        $r1[19] = 0;

        $r1[20] = 4;

        $r1[21] = 17;

        $r1[22] = 5;

        $r1[23] = 18;

        $r1[24] = 33;

        $r1[25] = 49;

        $r1[26] = 65;

        $r1[27] = 6;

        $r1[28] = 19;

        $r1[29] = 81;

        $r1[30] = 97;

        $r1[31] = 7;

        $r1[32] = 34;

        $r1[33] = 113;

        $r1[34] = 20;

        $r1[35] = 50;

        $r1[36] = -127;

        $r1[37] = -111;

        $r1[38] = -95;

        $r1[39] = 8;

        $r1[40] = 35;

        $r1[41] = 66;

        $r1[42] = -79;

        $r1[43] = -63;

        $r1[44] = 21;

        $r1[45] = 82;

        $r1[46] = -47;

        $r1[47] = -16;

        $r1[48] = 36;

        $r1[49] = 51;

        $r1[50] = 98;

        $r1[51] = 114;

        $r1[52] = -126;

        $r1[53] = 9;

        $r1[54] = 10;

        $r1[55] = 22;

        $r1[56] = 23;

        $r1[57] = 24;

        $r1[58] = 25;

        $r1[59] = 26;

        $r1[60] = 37;

        $r1[61] = 38;

        $r1[62] = 39;

        $r1[63] = 40;

        $r1[64] = 41;

        $r1[65] = 42;

        $r1[66] = 52;

        $r1[67] = 53;

        $r1[68] = 54;

        $r1[69] = 55;

        $r1[70] = 56;

        $r1[71] = 57;

        $r1[72] = 58;

        $r1[73] = 67;

        $r1[74] = 68;

        $r1[75] = 69;

        $r1[76] = 70;

        $r1[77] = 71;

        $r1[78] = 72;

        $r1[79] = 73;

        $r1[80] = 74;

        $r1[81] = 83;

        $r1[82] = 84;

        $r1[83] = 85;

        $r1[84] = 86;

        $r1[85] = 87;

        $r1[86] = 88;

        $r1[87] = 89;

        $r1[88] = 90;

        $r1[89] = 99;

        $r1[90] = 100;

        $r1[91] = 101;

        $r1[92] = 102;

        $r1[93] = 103;

        $r1[94] = 104;

        $r1[95] = 105;

        $r1[96] = 106;

        $r1[97] = 115;

        $r1[98] = 116;

        $r1[99] = 117;

        $r1[100] = 118;

        $r1[101] = 119;

        $r1[102] = 120;

        $r1[103] = 121;

        $r1[104] = 122;

        $r1[105] = -125;

        $r1[106] = -124;

        $r1[107] = -123;

        $r1[108] = -122;

        $r1[109] = -121;

        $r1[110] = -120;

        $r1[111] = -119;

        $r1[112] = -118;

        $r1[113] = -110;

        $r1[114] = -109;

        $r1[115] = -108;

        $r1[116] = -107;

        $r1[117] = -106;

        $r1[118] = -105;

        $r1[119] = -104;

        $r1[120] = -103;

        $r1[121] = -102;

        $r1[122] = -94;

        $r1[123] = -93;

        $r1[124] = -92;

        $r1[125] = -91;

        $r1[126] = -90;

        $r1[127] = -89;

        $r1[128] = -88;

        $r1[129] = -87;

        $r1[130] = -86;

        $r1[131] = -78;

        $r1[132] = -77;

        $r1[133] = -76;

        $r1[134] = -75;

        $r1[135] = -74;

        $r1[136] = -73;

        $r1[137] = -72;

        $r1[138] = -71;

        $r1[139] = -70;

        $r1[140] = -62;

        $r1[141] = -61;

        $r1[142] = -60;

        $r1[143] = -59;

        $r1[144] = -58;

        $r1[145] = -57;

        $r1[146] = -56;

        $r1[147] = -55;

        $r1[148] = -54;

        $r1[149] = -46;

        $r1[150] = -45;

        $r1[151] = -44;

        $r1[152] = -43;

        $r1[153] = -42;

        $r1[154] = -41;

        $r1[155] = -40;

        $r1[156] = -39;

        $r1[157] = -38;

        $r1[158] = -31;

        $r1[159] = -30;

        $r1[160] = -29;

        $r1[161] = -28;

        $r1[162] = -27;

        $r1[163] = -26;

        $r1[164] = -25;

        $r1[165] = -24;

        $r1[166] = -23;

        $r1[167] = -22;

        $r1[168] = -15;

        $r1[169] = -14;

        $r1[170] = -13;

        $r1[171] = -12;

        $r1[172] = -11;

        $r1[173] = -10;

        $r1[174] = -9;

        $r1[175] = -8;

        $r1[176] = -7;

        $r1[177] = -6;

        $r0[2] = $r1;

        $r1 = newarray (byte)[178];

        $r1[0] = 0;

        $r1[1] = 2;

        $r1[2] = 1;

        $r1[3] = 2;

        $r1[4] = 4;

        $r1[5] = 4;

        $r1[6] = 3;

        $r1[7] = 4;

        $r1[8] = 7;

        $r1[9] = 5;

        $r1[10] = 4;

        $r1[11] = 4;

        $r1[12] = 0;

        $r1[13] = 1;

        $r1[14] = 2;

        $r1[15] = 119;

        $r1[16] = 0;

        $r1[17] = 1;

        $r1[18] = 2;

        $r1[19] = 3;

        $r1[20] = 17;

        $r1[21] = 4;

        $r1[22] = 5;

        $r1[23] = 33;

        $r1[24] = 49;

        $r1[25] = 6;

        $r1[26] = 18;

        $r1[27] = 65;

        $r1[28] = 81;

        $r1[29] = 7;

        $r1[30] = 97;

        $r1[31] = 113;

        $r1[32] = 19;

        $r1[33] = 34;

        $r1[34] = 50;

        $r1[35] = -127;

        $r1[36] = 8;

        $r1[37] = 20;

        $r1[38] = 66;

        $r1[39] = -111;

        $r1[40] = -95;

        $r1[41] = -79;

        $r1[42] = -63;

        $r1[43] = 9;

        $r1[44] = 35;

        $r1[45] = 51;

        $r1[46] = 82;

        $r1[47] = -16;

        $r1[48] = 21;

        $r1[49] = 98;

        $r1[50] = 114;

        $r1[51] = -47;

        $r1[52] = 10;

        $r1[53] = 22;

        $r1[54] = 36;

        $r1[55] = 52;

        $r1[56] = -31;

        $r1[57] = 37;

        $r1[58] = -15;

        $r1[59] = 23;

        $r1[60] = 24;

        $r1[61] = 25;

        $r1[62] = 26;

        $r1[63] = 38;

        $r1[64] = 39;

        $r1[65] = 40;

        $r1[66] = 41;

        $r1[67] = 42;

        $r1[68] = 53;

        $r1[69] = 54;

        $r1[70] = 55;

        $r1[71] = 56;

        $r1[72] = 57;

        $r1[73] = 58;

        $r1[74] = 67;

        $r1[75] = 68;

        $r1[76] = 69;

        $r1[77] = 70;

        $r1[78] = 71;

        $r1[79] = 72;

        $r1[80] = 73;

        $r1[81] = 74;

        $r1[82] = 83;

        $r1[83] = 84;

        $r1[84] = 85;

        $r1[85] = 86;

        $r1[86] = 87;

        $r1[87] = 88;

        $r1[88] = 89;

        $r1[89] = 90;

        $r1[90] = 99;

        $r1[91] = 100;

        $r1[92] = 101;

        $r1[93] = 102;

        $r1[94] = 103;

        $r1[95] = 104;

        $r1[96] = 105;

        $r1[97] = 106;

        $r1[98] = 115;

        $r1[99] = 116;

        $r1[100] = 117;

        $r1[101] = 118;

        $r1[102] = 119;

        $r1[103] = 120;

        $r1[104] = 121;

        $r1[105] = 122;

        $r1[106] = -126;

        $r1[107] = -125;

        $r1[108] = -124;

        $r1[109] = -123;

        $r1[110] = -122;

        $r1[111] = -121;

        $r1[112] = -120;

        $r1[113] = -119;

        $r1[114] = -118;

        $r1[115] = -110;

        $r1[116] = -109;

        $r1[117] = -108;

        $r1[118] = -107;

        $r1[119] = -106;

        $r1[120] = -105;

        $r1[121] = -104;

        $r1[122] = -103;

        $r1[123] = -102;

        $r1[124] = -94;

        $r1[125] = -93;

        $r1[126] = -92;

        $r1[127] = -91;

        $r1[128] = -90;

        $r1[129] = -89;

        $r1[130] = -88;

        $r1[131] = -87;

        $r1[132] = -86;

        $r1[133] = -78;

        $r1[134] = -77;

        $r1[135] = -76;

        $r1[136] = -75;

        $r1[137] = -74;

        $r1[138] = -73;

        $r1[139] = -72;

        $r1[140] = -71;

        $r1[141] = -70;

        $r1[142] = -62;

        $r1[143] = -61;

        $r1[144] = -60;

        $r1[145] = -59;

        $r1[146] = -58;

        $r1[147] = -57;

        $r1[148] = -56;

        $r1[149] = -55;

        $r1[150] = -54;

        $r1[151] = -46;

        $r1[152] = -45;

        $r1[153] = -44;

        $r1[154] = -43;

        $r1[155] = -42;

        $r1[156] = -41;

        $r1[157] = -40;

        $r1[158] = -39;

        $r1[159] = -38;

        $r1[160] = -30;

        $r1[161] = -29;

        $r1[162] = -28;

        $r1[163] = -27;

        $r1[164] = -26;

        $r1[165] = -25;

        $r1[166] = -24;

        $r1[167] = -23;

        $r1[168] = -22;

        $r1[169] = -14;

        $r1[170] = -13;

        $r1[171] = -12;

        $r1[172] = -11;

        $r1[173] = -10;

        $r1[174] = -9;

        $r1[175] = -8;

        $r1[176] = -7;

        $r1[177] = -6;

        $r0[3] = $r1;

        <com.google.image.compression.jpeg.AnalyzeJpegHeader: byte[][] JPEG_HUFFMAN_TABLES> = $r0;

        $r1 = newarray (byte)[1024];

        <com.google.image.compression.jpeg.AnalyzeJpegHeader: byte[] JPEG_QUANT_56_TO_QUALITY> = $r1;

        $i0 = 0;

     label1:
        if $i0 > 1 goto label6;

        $i1 = 0;

     label2:
        if $i1 > 1 goto label5;

        $b2 = staticinvoke <com.google.image.compression.jpeg.JpegUtil: byte getQuantizationTableEntry(int,int)>($i0, 56);

        $s3 = $b2 & 255;

        $i4 = 24;

     label3:
        if $i4 > 100 goto label4;

        $b2 = staticinvoke <com.google.image.compression.jpeg.JpegUtil: byte getScaledQuantizationFactor(int,int,int)>($s3, $i4, $i1);

        $s5 = $b2 & 255;

        $i6 = $i0 * 512;

        $i7 = $i1 * 256;

        $i6 = $i6 + $i7;

        $i6 = $s5 + $i6;

        $r1 = <com.google.image.compression.jpeg.AnalyzeJpegHeader: byte[] JPEG_QUANT_56_TO_QUALITY>;

        $b2 = (byte) $i4;

        $r1[$i6] = $b2;

        $i4 = $i4 + 1;

        goto label3;

     label4:
        $i1 = $i1 + 1;

        goto label2;

     label5:
        $i0 = $i0 + 1;

        goto label1;

     label6:
        return;
    }

    private void <init>()
    {
        com.google.image.compression.jpeg.AnalyzeJpegHeader $r0;

        $r0 := @this: com.google.image.compression.jpeg.AnalyzeJpegHeader;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.google.image.compression.jpeg.JpegHeaderParams analyze(byte[], int, int)
    {
        byte $b0, $b9, $b11, $b12;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        byte[] $r0, $r9;
        int[] $r1, $r2;
        boolean[] $r3, $r4;
        java.lang.IllegalStateException $r5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        short $s7;
        byte[][] $r8;
        com.google.image.compression.jpeg.JpegHeaderParams $r10;

        $r0 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        $r1 = newarray (int)[2];

        $r2 = newarray (int)[2];

        $r3 = newarray (boolean)[2];

        $r4 = newarray (boolean)[4];

        $i3 = $i3 + $i2;

        $b0 = $r0[$i2];

        if $b0 != -1 goto label01;

        $i4 = $i2 + 1;

        $b0 = $r0[$i4];

        if $b0 == -40 goto label02;

     label01:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Data must start with 0xff 0xd8");

        throw $r5;

     label02:
        $r1[0] = -1;

        $r1[1] = -2;

        $r2[0] = -1;

        $r2[1] = -2;

        $i5 = $i2 + 2;

        $z0 = 0;

        $i6 = -1;

        $z1 = 0;

        $z2 = 0;

        $z3 = 0;

        $i4 = -1;

     label03:
        if $z2 != 0 goto label26;

        if $i5 >= $i3 goto label26;

        $i1 = $i5 + 1;

        $b0 = $r0[$i5];

        if $b0 == -1 goto label04;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected a marker byte 0xff at offset ");

        $i2 = $i1 - 1;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label04:
        $i5 = $i1 + 1;

        $b0 = $r0[$i1];

        lookupswitch($b0)
        {
            case -64: goto label12;
            case -60: goto label17;
            case -38: goto label22;
            case -37: goto label08;
            case -32: goto label06;
            case -2: goto label25;
            default: goto label05;
        };

     label05:
        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found an unknown marker at offset ");

        $i2 = $i5 - 2;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label06:
        $b0 = $r0[$i5];

        $s7 = $b0 & 255;

        $i1 = $s7 << 8;

        $i8 = $i5 + 1;

        $b0 = $r0[$i8];

        $s7 = $b0 & 255;

        $i1 = $i1 | $s7;

        $i5 = $i1 + $i5;

        $z0 = 1;

     label07:
        goto label03;

     label08:
        $b0 = $r0[$i5];

        $s7 = $b0 & 255;

        $i1 = $s7 << 8;

        $i8 = $i5 + 1;

        $b0 = $r0[$i8];

        $s7 = $b0 & 255;

        $i1 = $i1 | $s7;

        if $i1 == 67 goto label09;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected length 67 for DQT marker, got ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label09:
        $i1 = $i5 + 2;

        $i5 = $i1 + 1;

        $b0 = $r0[$i1];

        if $b0 == 0 goto label10;

        if $b0 == 1 goto label10;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected quant type 0 or 1, got ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label10:
        $i1 = staticinvoke <com.google.image.compression.jpeg.AnalyzeJpegHeader: int getQualityFromQTable(byte[],int,int,int)>($r0, $i5, $b0, 0);

        $r1[$b0] = $i1;

        $i1 = staticinvoke <com.google.image.compression.jpeg.AnalyzeJpegHeader: int getQualityFromQTable(byte[],int,int,int)>($r0, $i5, $b0, 1);

        $r2[$b0] = $i1;

        $i5 = $i5 + 64;

        $i1 = $r1[$b0];

        if $i1 >= 0 goto label11;

        $i1 = $r2[$b0];

        if $i1 >= 0 goto label11;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t compact DQT table ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label11:
        $r3[$b0] = 1;

        goto label07;

     label12:
        $b0 = $r0[$i5];

        $s7 = $b0 & 255;

        $i4 = $s7 << 8;

        $i6 = $i5 + 1;

        $b0 = $r0[$i6];

        $s7 = $b0 & 255;

        $i4 = $i4 | $s7;

        if $i4 == 17 goto label13;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected length 17 for SOF marker, got ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label13:
        $i4 = $i5 + 2;

        $i6 = $i4 + 1;

        $b0 = $r0[$i4];

        if $b0 == 8 goto label14;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SOF marker: expected bit depth 8, got ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label14:
        $b0 = $r0[$i6];

        $s7 = $b0 & 255;

        $i4 = $s7 << 8;

        $i5 = $i6 + 1;

        $b0 = $r0[$i5];

        $s7 = $b0 & 255;

        $i4 = $i4 | $s7;

        $i5 = $i6 + 2;

        $b0 = $r0[$i5];

        $s7 = $b0 & 255;

        $i6 = $s7 << 8;

        $i1 = $i5 + 1;

        $b0 = $r0[$i1];

        $s7 = $b0 & 255;

        $i5 = $i5 + 2;

        $b0 = $r0[$i5];

        if $b0 != 3 goto label15;

        $i1 = $i5 + 1;

        $b0 = $r0[$i1];

        if $b0 != 1 goto label15;

        $i1 = $i5 + 2;

        $b0 = $r0[$i1];

        if $b0 != 34 goto label15;

        $i1 = $i5 + 3;

        $b0 = $r0[$i1];

        if $b0 != 0 goto label15;

        $i1 = $i5 + 4;

        $b0 = $r0[$i1];

        if $b0 != 2 goto label15;

        $i1 = $i5 + 5;

        $b0 = $r0[$i1];

        if $b0 != 17 goto label15;

        $i1 = $i5 + 6;

        $b0 = $r0[$i1];

        if $b0 != 1 goto label15;

        $i1 = $i5 + 7;

        $b0 = $r0[$i1];

        if $b0 != 3 goto label15;

        $i1 = $i5 + 8;

        $b0 = $r0[$i1];

        if $b0 != 17 goto label15;

        $i1 = $i5 + 9;

        $b0 = $r0[$i1];

        if $b0 == 1 goto label16;

     label15:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Expected 4:2:0 subsampling");

        throw $r5;

     label16:
        $i6 = $i6 | $s7;

        $z3 = 1;

        $i5 = $i5 + 10;

        goto label07;

     label17:
        $b0 = $r0[$i5];

        $s7 = $b0 & 255;

        $i1 = $s7 << 8;

        $i8 = $i5 + 1;

        $b0 = $r0[$i8];

        $s7 = $b0 & 255;

        $i1 = $i1 | $s7;

        $i8 = $i5 + 2;

        $i5 = $i8 + 1;

        $b9 = $r0[$i8];

        $b0 = $b9 >> 4;

        $b9 = $b9 & 15;

        $r8 = <com.google.image.compression.jpeg.AnalyzeJpegHeader: byte[][] JPEG_HUFFMAN_TABLES>;

        $i8 = $b0 * 2;

        $i8 = $i8 + $b9;

        $r9 = $r8[$i8];

        $i8 = lengthof $r9;

        $i10 = $i8 + 3;

        if $i1 == $i10 goto label18;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected length ");

        $i2 = $i8 + 3;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for DHT marker");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label18:
        $i10 = 0;

     label19:
        if $i10 >= $i8 goto label21;

        $b11 = $r9[$i10];

        $b12 = $r0[$i5];

        if $b11 == $b12 goto label20;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Found unexpected Huffman table value");

        throw $r5;

     label20:
        $i10 = $i10 + 1;

        $i5 = $i5 + 1;

        goto label19;

     label21:
        $i1 = $b0 * 2;

        $i1 = $b9 + $i1;

        $r4[$i1] = 1;

        goto label07;

     label22:
        $b0 = $r0[$i5];

        if $b0 != 0 goto label23;

        $i1 = $i5 + 1;

        $b0 = $r0[$i1];

        if $b0 != 12 goto label23;

        $i1 = $i5 + 2;

        $b0 = $r0[$i1];

        if $b0 != 3 goto label23;

        $i1 = $i5 + 3;

        $b0 = $r0[$i1];

        if $b0 != 1 goto label23;

        $i1 = $i5 + 4;

        $b0 = $r0[$i1];

        if $b0 != 0 goto label23;

        $i1 = $i5 + 5;

        $b0 = $r0[$i1];

        if $b0 != 2 goto label23;

        $i1 = $i5 + 6;

        $b0 = $r0[$i1];

        if $b0 != 17 goto label23;

        $i1 = $i5 + 7;

        $b0 = $r0[$i1];

        if $b0 != 3 goto label23;

        $i1 = $i5 + 8;

        $b0 = $r0[$i1];

        if $b0 != 17 goto label23;

        $i1 = $i5 + 9;

        $b0 = $r0[$i1];

        if $b0 != 0 goto label23;

        $i1 = $i5 + 10;

        $b0 = $r0[$i1];

        if $b0 != 63 goto label23;

        $i1 = $i5 + 11;

        $b0 = $r0[$i1];

        if $b0 == 0 goto label24;

     label23:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Found unexpected value in SOS marker");

        throw $r5;

     label24:
        $z1 = 1;

        $z2 = 1;

        goto label07;

     label25:
        $b0 = $r0[$i5];

        $s7 = $b0 & 255;

        $i1 = $s7 << 8;

        $i8 = $i5 + 1;

        $b0 = $r0[$i8];

        $s7 = $b0 & 255;

        $i1 = $i1 | $s7;

        $i5 = $i5 + $i1;

        goto label07;

     label26:
        if $z0 != 0 goto label27;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Didn\'t find JFIF marker");

        throw $r5;

     label27:
        if $z1 != 0 goto label28;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Didn\'t find SOS marker");

        throw $r5;

     label28:
        if $z3 != 0 goto label29;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Didn\'t find SOF marker");

        throw $r5;

     label29:
        $z0 = $r3[0];

        if $z0 != 0 goto label30;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Didn\'t find luminance quantization table");

        throw $r5;

     label30:
        $z0 = $r3[1];

        if $z0 != 0 goto label31;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Didn\'t find chrominance quantization table");

        throw $r5;

     label31:
        $i3 = 0;

     label32:
        if $i3 >= 4 goto label34;

        $z0 = $r4[$i3];

        if $z0 != 0 goto label33;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Didn\'t find Huffman table ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label33:
        $i3 = $i3 + 1;

        goto label32;

     label34:
        if $i6 < 0 goto label35;

        if $i4 >= 0 goto label36;

     label35:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Image width or eight is negative");

        throw $r5;

     label36:
        $i3 = $r1[0];

        $i1 = $r1[1];

        if $i3 != $i1 goto label38;

        $b0 = 0;

        $i3 = $r1[0];

     label37:
        $i2 = $i5 - $i2;

        $i2 = $i2 + 12;

        $r10 = new com.google.image.compression.jpeg.JpegHeaderParams;

        specialinvoke $r10.<com.google.image.compression.jpeg.JpegHeaderParams: void <init>(int,int,int,int,int,int)>(0, $i6, $i4, $i3, $b0, $i2);

        return $r10;

     label38:
        $i3 = $r2[0];

        $i1 = $r2[1];

        if $i3 != $i1 goto label39;

        $b0 = 1;

        $i3 = $r2[0];

        goto label37;

     label39:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unable to determine quality parameter");

        throw $r5;
    }

    private static int getQualityFromQTable(byte[], int, int, int)
    {
        byte[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i6;
        byte $b4, $b7;
        short $s5;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 = $i0 + 56;

        $b4 = $r0[$i3];

        $s5 = $b4 & 255;

        $i3 = $i1 * 512;

        $i6 = $i2 * 256;

        $i3 = $i3 + $i6;

        $i3 = $s5 + $i3;

        $r1 = <com.google.image.compression.jpeg.AnalyzeJpegHeader: byte[] JPEG_QUANT_56_TO_QUALITY>;

        $i3 = $r1[$i3];

        if $i3 != 0 goto label1;

        $i0 = $i1 + 1;

        $i3 = neg $i0;

        return $i3;

     label1:
        $r1 = staticinvoke <com.google.image.compression.jpeg.JpegUtil: byte[] getQuantTable(int,int,int)>($i1, $i3, $i2);

        $i2 = 0;

     label2:
        if $i2 >= 64 goto label4;

        $b4 = $r1[$i2];

        $i6 = $i0 + $i2;

        $b7 = $r0[$i6];

        if $b4 == $b7 goto label3;

        $i0 = $i1 + 1;

        $i3 = neg $i0;

        return $i3;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        return $i3;
    }
}
