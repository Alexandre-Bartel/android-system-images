public class org.apache.harmony.luni.lang.reflect.ListOfTypes extends java.lang.Object
{
    static final org.apache.harmony.luni.lang.reflect.ListOfTypes empty;
    java.util.ArrayList list;
    private java.lang.reflect.Type[] resolvedTypes;

    static void <clinit>()
    {
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r0;

        $r0 = new org.apache.harmony.luni.lang.reflect.ListOfTypes;

        specialinvoke $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: void <init>(int)>(0);

        <org.apache.harmony.luni.lang.reflect.ListOfTypes: org.apache.harmony.luni.lang.reflect.ListOfTypes empty> = $r0;

        return;
    }

    void <init>(int)
    {
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r0;
        int $i0;
        java.util.ArrayList $r1;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ListOfTypes;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list> = $r1;

        return;
    }

    void <init>(java.lang.reflect.Type[])
    {
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r0;
        java.lang.reflect.Type[] $r1;
        int $i0, $i1;
        java.lang.reflect.Type $r2;
        java.util.ArrayList $r3;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ListOfTypes;

        $r1 := @parameter0: java.lang.reflect.Type[];

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list> = $r3;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        $r3 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    void add(java.lang.reflect.Type)
    {
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r0;
        java.lang.reflect.Type $r1;
        java.lang.RuntimeException $r2;
        java.util.ArrayList $r3;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ListOfTypes;

        $r1 := @parameter0: java.lang.reflect.Type;

        if $r1 != null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Adding null type is not allowed!");

        throw $r2;

     label1:
        $r3 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    public java.lang.reflect.Type[] getResolvedTypes()
    {
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r0;
        java.lang.reflect.Type[] $r1;
        java.util.ArrayList $r2;
        int $i0;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.reflect.Type $r5, $r7;
        org.apache.harmony.luni.lang.reflect.ImplForType $r6;
        java.lang.ClassCastException $r8;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ListOfTypes;

        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] resolvedTypes>;

        if $r1 != null goto label7;

        $r2 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $r1 = newarray (java.lang.reflect.Type)[$i0];

        $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] resolvedTypes> = $r1;

        $i0 = 0;

        $r2 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list>;

        $r3 = virtualinvoke $r2.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.reflect.Type) $r4;

        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] resolvedTypes>;

     label2:
        $r6 = (org.apache.harmony.luni.lang.reflect.ImplForType) $r5;

        $r7 = virtualinvoke $r6.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type getResolvedType()>();

     label3:
        $r1[$i0] = $r7;

     label4:
        $i0 = $i0 + 1;

        goto label1;

     label5:
        $r8 := @caughtexception;

        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] resolvedTypes>;

        $r1[$i0] = $r5;

        goto label4;

     label6:
        $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list> = null;

     label7:
        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] resolvedTypes>;

        return $r1;

        catch java.lang.ClassCastException from label2 to label3 with label5;
    }

    int length()
    {
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r0;
        int $i0;
        java.util.ArrayList $r1;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ListOfTypes;

        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r0;
        java.lang.StringBuilder $r1;
        java.util.ArrayList $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.reflect.Type $r5;
        java.lang.String $r6;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ListOfTypes;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r0.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.util.ArrayList list>;

        $r3 = virtualinvoke $r2.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.reflect.Type) $r4;

        goto label2;

     label2:
        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label1;

     label3:
        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
