class com.android.internal.policy.impl.LockScreen extends android.widget.LinearLayout implements com.android.internal.policy.impl.KeyguardScreen, com.android.internal.policy.impl.KeyguardUpdateMonitor$ConfigurationChangeCallback, com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallback, com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback
{
    private android.view.View mAlarmSpacer;
    private android.widget.TextView mAlarmText;
    private android.view.ViewGroup mBatteryInfoGroup;
    private android.widget.ImageView mBatteryInfoIcon;
    private android.view.View mBatteryInfoSpacer;
    private android.widget.TextView mBatteryInfoText;
    private int mBatteryLevel;
    private final com.android.internal.policy.impl.KeyguardScreenCallback mCallback;
    private android.widget.TextView mDate;
    private android.widget.Button mEmergencyCallButton;
    private android.widget.TextView mHeaderSimBad1;
    private android.widget.TextView mHeaderSimBad2;
    private android.widget.TextView mHeaderSimOk1;
    private android.widget.TextView mHeaderSimOk2;
    private android.widget.TextView mLockInstructions;
    private final com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private android.view.ViewGroup mNextAlarmGroup;
    private android.view.View[] mOnlyVisibleWhenSimNotOk;
    private android.view.View[] mOnlyVisibleWhenSimOk;
    private boolean mPluggedIn;
    private android.view.ViewGroup mScreenLockedMessageGroup;
    private boolean mShowingBatteryInfo;
    private boolean mSimOk;
    private android.widget.TextView mTime;
    private final com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor;

    void <init>(android.content.Context, com.android.internal.widget.LockPatternUtils, com.android.internal.policy.impl.KeyguardUpdateMonitor, com.android.internal.policy.impl.KeyguardScreenCallback)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        android.content.Context $r1;
        com.android.internal.widget.LockPatternUtils $r2;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r3, $r14;
        com.android.internal.policy.impl.KeyguardScreenCallback $r4;
        android.view.LayoutInflater $r5;
        com.android.internal.telephony.SimCard$State $r6;
        boolean $z0;
        int $i0;
        android.view.View $r7;
        android.widget.TextView $r8;
        android.view.ViewGroup $r9;
        android.widget.ImageView $r10;
        android.widget.Button $r11;
        com.android.internal.policy.impl.LockScreen$1 $r12;
        android.view.View[] $r13;
        java.lang.CharSequence $r15, $r16;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.android.internal.widget.LockPatternUtils;

        $r3 := @parameter2: com.android.internal.policy.impl.KeyguardUpdateMonitor;

        $r4 := @parameter3: com.android.internal.policy.impl.KeyguardScreenCallback;

        specialinvoke $r0.<android.widget.LinearLayout: void <init>(android.content.Context)>($r1);

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mSimOk> = 1;

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mShowingBatteryInfo> = 0;

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mPluggedIn> = 0;

        $r0.<com.android.internal.policy.impl.LockScreen: int mBatteryLevel> = 100;

        $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r2;

        $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor> = $r3;

        $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardScreenCallback mCallback> = $r4;

        $r5 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>($r1);

        virtualinvoke $r5.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)>(17367089, $r0, 1);

        $r6 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: boolean isSimOk(com.android.internal.telephony.SimCard$State)>($r6);

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mSimOk> = $z0;

        $z0 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean shouldShowBatteryInfo()>();

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mShowingBatteryInfo> = $z0;

        $z0 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean isDevicePluggedIn()>();

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mPluggedIn> = $z0;

        $i0 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: int getBatteryLevel()>();

        $r0.<com.android.internal.policy.impl.LockScreen: int mBatteryLevel> = $i0;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908675);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908676);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk2> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908677);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad1> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908678);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad2> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908377);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mTime> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908376);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mDate> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908679);

        $r9 = (android.view.ViewGroup) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mBatteryInfoGroup> = $r9;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908680);

        $r10 = (android.widget.ImageView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.ImageView mBatteryInfoIcon> = $r10;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908681);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mBatteryInfoText> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908682);

        $r0.<com.android.internal.policy.impl.LockScreen: android.view.View mBatteryInfoSpacer> = $r7;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908683);

        $r9 = (android.view.ViewGroup) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mNextAlarmGroup> = $r9;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908684);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mAlarmText> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908685);

        $r0.<com.android.internal.policy.impl.LockScreen: android.view.View mAlarmSpacer> = $r7;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908686);

        $r9 = (android.view.ViewGroup) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mScreenLockedMessageGroup> = $r9;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908687);

        $r8 = (android.widget.TextView) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mLockInstructions> = $r8;

        $r7 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>(16908688);

        $r11 = (android.widget.Button) $r7;

        $r0.<com.android.internal.policy.impl.LockScreen: android.widget.Button mEmergencyCallButton> = $r11;

        $r11 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.Button mEmergencyCallButton>;

        $r12 = new com.android.internal.policy.impl.LockScreen$1;

        specialinvoke $r12.<com.android.internal.policy.impl.LockScreen$1: void <init>(com.android.internal.policy.impl.LockScreen)>($r0);

        virtualinvoke $r11.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r12);

        $r13 = newarray (android.view.View)[8];

        $r8 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        $r13[0] = $r8;

        $r8 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk2>;

        $r13[1] = $r8;

        $r9 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mBatteryInfoGroup>;

        $r13[2] = $r9;

        $r7 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View mBatteryInfoSpacer>;

        $r13[3] = $r7;

        $r9 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mNextAlarmGroup>;

        $r13[4] = $r9;

        $r7 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View mAlarmSpacer>;

        $r13[5] = $r7;

        $r9 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mScreenLockedMessageGroup>;

        $r13[6] = $r9;

        $r8 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mLockInstructions>;

        $r13[7] = $r8;

        $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimOk> = $r13;

        $r13 = newarray (android.view.View)[3];

        $r8 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad1>;

        $r13[0] = $r8;

        $r8 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad2>;

        $r13[1] = $r8;

        $r11 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.Button mEmergencyCallButton>;

        $r13[2] = $r11;

        $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimNotOk> = $r13;

        virtualinvoke $r0.<android.view.View: void setFocusable(boolean)>(1);

        virtualinvoke $r0.<android.view.View: void setFocusableInTouchMode(boolean)>(1);

        virtualinvoke $r0.<android.view.ViewGroup: void setDescendantFocusability(int)>(393216);

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshBatteryDisplay()>();

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshAlarmDisplay()>();

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshTimeAndDateDisplay()>();

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshUnlockIntructions()>();

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshViewsWRTSimOk()>();

        $r14 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r15 = virtualinvoke $r14.<com.android.internal.policy.impl.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonyPlmn()>();

        $r14 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r16 = virtualinvoke $r14.<com.android.internal.policy.impl.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonySpn()>();

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshSimOkHeaders(java.lang.CharSequence,java.lang.CharSequence)>($r15, $r16);

        virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: void registerInfoCallback(com.android.internal.policy.impl.KeyguardUpdateMonitor$InfoCallback)>($r0);

        virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: void registerSimStateCallback(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback)>($r0);

        virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: void registerConfigurationChangeCallback(com.android.internal.policy.impl.KeyguardUpdateMonitor$ConfigurationChangeCallback)>($r0);

        return;
    }

    static com.android.internal.policy.impl.KeyguardScreenCallback access$000(com.android.internal.policy.impl.LockScreen)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        com.android.internal.policy.impl.KeyguardScreenCallback r1;

        $r0 := @parameter0: com.android.internal.policy.impl.LockScreen;

        r1 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardScreenCallback mCallback>;

        return r1;
    }

    private boolean isSimOk(com.android.internal.telephony.SimCard$State)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        com.android.internal.telephony.SimCard$State $r1, $r3;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r1 := @parameter0: com.android.internal.telephony.SimCard$State;

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean isDeviceProvisioned()>();

        if $z0 != 0 goto label2;

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State ABSENT>;

        if $r1 != $r3 goto label2;

        $z0 = 1;

     label1:
        if $z0 != 0 goto label3;

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PUK_REQUIRED>;

        if $r1 == $r3 goto label3;

        return 1;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return 0;
    }

    private void refreshAlarmDisplay()
    {
        com.android.internal.policy.impl.LockScreen $r0;
        java.lang.String $r1;
        com.android.internal.widget.LockPatternUtils $r2;
        boolean $z0;
        android.widget.TextView $r3;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r1 = virtualinvoke $r2.<com.android.internal.widget.LockPatternUtils: java.lang.String getNextAlarm()>();

        if $r1 == null goto label1;

        $z0 = $r0.<com.android.internal.policy.impl.LockScreen: boolean mSimOk>;

        if $z0 == 0 goto label1;

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void setAlarmInfoVisible(boolean)>(1);

        $r3 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mAlarmText>;

        virtualinvoke $r3.<android.widget.TextView: void setText(java.lang.CharSequence)>($r1);

        return;

     label1:
        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void setAlarmInfoVisible(boolean)>(0);

        return;
    }

    private void refreshBatteryDisplay()
    {
        com.android.internal.policy.impl.LockScreen $r0;
        boolean $z0;
        android.view.ViewGroup $r1;
        android.view.View $r2;
        android.widget.ImageView $r3;
        android.widget.TextView $r4;
        android.content.Context $r5;
        java.lang.Object[] $r6;
        int $i0;
        java.lang.Integer $r7;
        java.lang.String $r8;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $z0 = $r0.<com.android.internal.policy.impl.LockScreen: boolean mShowingBatteryInfo>;

        if $z0 == 0 goto label1;

        $z0 = $r0.<com.android.internal.policy.impl.LockScreen: boolean mSimOk>;

        if $z0 != 0 goto label2;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mBatteryInfoGroup>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(8);

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View mBatteryInfoSpacer>;

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(8);

        return;

     label2:
        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mBatteryInfoGroup>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(0);

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View mBatteryInfoSpacer>;

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(0);

        $z0 = $r0.<com.android.internal.policy.impl.LockScreen: boolean mPluggedIn>;

        if $z0 == 0 goto label3;

        $r3 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.ImageView mBatteryInfoIcon>;

        virtualinvoke $r3.<android.widget.ImageView: void setImageResource(int)>(17301534);

        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mBatteryInfoText>;

        $r5 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        $r6 = newarray (java.lang.Object)[1];

        $i0 = $r0.<com.android.internal.policy.impl.LockScreen: int mBatteryLevel>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[0] = $r7;

        $r8 = virtualinvoke $r5.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17039715, $r6);

        virtualinvoke $r4.<android.widget.TextView: void setText(java.lang.CharSequence)>($r8);

        return;

     label3:
        $r3 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.ImageView mBatteryInfoIcon>;

        virtualinvoke $r3.<android.widget.ImageView: void setImageResource(int)>(17301536);

        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mBatteryInfoText>;

        virtualinvoke $r4.<android.widget.TextView: void setText(int)>(17039716);

        return;
    }

    private void refreshSimBadInfo()
    {
        com.android.internal.policy.impl.LockScreen $r0;
        com.android.internal.telephony.SimCard$State $r1, $r3;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;
        android.widget.TextView $r4;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r1 = virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PUK_REQUIRED>;

        if $r1 != $r3 goto label1;

        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad1>;

        virtualinvoke $r4.<android.widget.TextView: void setText(int)>(17039721);

        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad2>;

        virtualinvoke $r4.<android.widget.TextView: void setText(int)>(17039722);

        return;

     label1:
        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State ABSENT>;

        if $r1 != $r3 goto label2;

        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad1>;

        virtualinvoke $r4.<android.widget.TextView: void setText(int)>(17039718);

        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad2>;

        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(8);

        return;

     label2:
        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad1>;

        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(8);

        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimBad2>;

        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(8);

        return;
    }

    private void refreshSimOkHeaders(java.lang.CharSequence, java.lang.CharSequence)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        java.lang.CharSequence $r1, $r2;
        com.android.internal.telephony.SimCard$State $r3, $r5;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r4;
        android.widget.TextView $r6;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.CharSequence;

        $r4 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r3 = virtualinvoke $r4.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r5 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State READY>;

        if $r3 != $r5 goto label4;

        if $r1 == null goto label2;

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(0);

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.widget.TextView: void setText(java.lang.CharSequence)>($r1);

     label1:
        if $r2 == null goto label3;

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk2>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(0);

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk2>;

        virtualinvoke $r6.<android.widget.TextView: void setText(java.lang.CharSequence)>($r2);

        return;

     label2:
        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(8);

        goto label1;

     label3:
        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk2>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(8);

        return;

     label4:
        $r5 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PIN_REQUIRED>;

        if $r3 != $r5 goto label5;

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(0);

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.widget.TextView: void setText(int)>(17039723);

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk2>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(8);

        return;

     label5:
        $r5 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State ABSENT>;

        if $r3 != $r5 goto label6;

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(0);

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.widget.TextView: void setText(int)>(17039717);

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk2>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(8);

        return;

     label6:
        $r5 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State NETWORK_LOCKED>;

        if $r3 != $r5 goto label7;

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(0);

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk1>;

        virtualinvoke $r6.<android.widget.TextView: void setText(int)>(17039720);

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mHeaderSimOk2>;

        virtualinvoke $r6.<android.view.View: void setVisibility(int)>(8);

        return;

     label7:
        return;
    }

    private void refreshTimeAndDateDisplay()
    {
        com.android.internal.policy.impl.LockScreen $r0;
        java.util.Date $r1;
        android.widget.TextView $r2;
        android.content.Context $r3;
        java.text.DateFormat $r4;
        java.lang.String $r5;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mTime>;

        $r3 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        $r4 = staticinvoke <android.text.format.DateFormat: java.text.DateFormat getTimeFormat(android.content.Context)>($r3);

        $r5 = virtualinvoke $r4.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r1);

        virtualinvoke $r2.<android.widget.TextView: void setText(java.lang.CharSequence)>($r5);

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mDate>;

        $r3 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        $r4 = staticinvoke <android.text.format.DateFormat: java.text.DateFormat getDateFormat(android.content.Context)>($r3);

        $r5 = virtualinvoke $r4.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r1);

        virtualinvoke $r2.<android.widget.TextView: void setText(java.lang.CharSequence)>($r5);

        return;
    }

    private void refreshUnlockIntructions()
    {
        com.android.internal.policy.impl.LockScreen $r0;
        com.android.internal.widget.LockPatternUtils $r1;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;
        com.android.internal.telephony.SimCard$State $r3, $r4;
        android.widget.TextView $r5;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z0 = virtualinvoke $r1.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        if $z0 != 0 goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r3 = virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r4 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PIN_REQUIRED>;

        if $r3 != $r4 goto label2;

     label1:
        $r5 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mLockInstructions>;

        virtualinvoke $r5.<android.widget.TextView: void setText(int)>(17039709);

        return;

     label2:
        $r5 = $r0.<com.android.internal.policy.impl.LockScreen: android.widget.TextView mLockInstructions>;

        virtualinvoke $r5.<android.widget.TextView: void setText(int)>(17039710);

        return;
    }

    private void refreshViewsWRTSimOk()
    {
        com.android.internal.policy.impl.LockScreen $r0;
        boolean $z0;
        int $i0, $i1;
        android.view.View[] $r1;
        android.view.View $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r6;
        java.lang.CharSequence $r7, $r8;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $z0 = $r0.<com.android.internal.policy.impl.LockScreen: boolean mSimOk>;

        if $z0 == 0 goto label06;

        $i0 = 0;

     label01:
        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimOk>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label03;

        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimOk>;

        $r2 = $r1[$i0];

        if $r2 != null goto label02;

        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" null");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label02:
        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(0);

        $i0 = $i0 + 1;

        goto label01;

     label03:
        $i0 = 0;

     label04:
        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimNotOk>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label05;

        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimNotOk>;

        $r2 = $r1[$i0];

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(8);

        $i0 = $i0 + 1;

        goto label04;

     label05:
        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r7 = virtualinvoke $r6.<com.android.internal.policy.impl.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonyPlmn()>();

        $r6 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r8 = virtualinvoke $r6.<com.android.internal.policy.impl.KeyguardUpdateMonitor: java.lang.CharSequence getTelephonySpn()>();

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshSimOkHeaders(java.lang.CharSequence,java.lang.CharSequence)>($r7, $r8);

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshAlarmDisplay()>();

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshBatteryDisplay()>();

        return;

     label06:
        $i0 = 0;

     label07:
        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimOk>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label08;

        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimOk>;

        $r2 = $r1[$i0];

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(8);

        $i0 = $i0 + 1;

        goto label07;

     label08:
        $i0 = 0;

     label09:
        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimNotOk>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label10;

        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View[] mOnlyVisibleWhenSimNotOk>;

        $r2 = $r1[$i0];

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>(0);

        $i0 = $i0 + 1;

        goto label09;

     label10:
        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshSimBadInfo()>();

        return;
    }

    private void setAlarmInfoVisible(boolean)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        boolean $z0;
        byte $b0;
        android.view.ViewGroup $r1;
        android.view.View $r2;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $b0 = 0;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.ViewGroup mNextAlarmGroup>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>($b0);

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: android.view.View mAlarmSpacer>;

        virtualinvoke $r2.<android.view.View: void setVisibility(int)>($b0);

        return;

     label2:
        $b0 = 8;

        goto label1;
    }

    public void cleanUp()
    {
        com.android.internal.policy.impl.LockScreen $r0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r1;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardUpdateMonitor: void removeCallback(java.lang.Object)>($r0);

        return;
    }

    public boolean needsInput()
    {
        com.android.internal.policy.impl.LockScreen $r0;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        return 0;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        int $i0;
        android.view.KeyEvent $r1;
        com.android.internal.policy.impl.KeyguardScreenCallback $r2;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        if $i0 != 82 goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardScreenCallback mCallback>;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()>();

     label1:
        return 0;
    }

    public void onKeyboardChange(boolean)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardScreenCallback $r1;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $r1 = $r0.<com.android.internal.policy.impl.LockScreen: com.android.internal.policy.impl.KeyguardScreenCallback mCallback>;

        interfaceinvoke $r1.<com.android.internal.policy.impl.KeyguardScreenCallback: void goToUnlockScreen()>();

        return;

     label1:
        return;
    }

    public void onOrientationChange(boolean)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $z0 := @parameter0: boolean;

        return;
    }

    public void onPause()
    {
        com.android.internal.policy.impl.LockScreen $r0;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        return;
    }

    public void onRefreshBatteryInfo(boolean, boolean, int)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        boolean $z0, $z1;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $i0 := @parameter2: int;

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mShowingBatteryInfo> = $z0;

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mPluggedIn> = $z1;

        $r0.<com.android.internal.policy.impl.LockScreen: int mBatteryLevel> = $i0;

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshBatteryDisplay()>();

        return;
    }

    public void onRefreshCarrierInfo(java.lang.CharSequence, java.lang.CharSequence)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        java.lang.CharSequence $r1, $r2;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: java.lang.CharSequence;

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshSimOkHeaders(java.lang.CharSequence,java.lang.CharSequence)>($r1, $r2);

        return;
    }

    public void onResume()
    {
        com.android.internal.policy.impl.LockScreen $r0;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        return;
    }

    public void onSimStateChanged(com.android.internal.telephony.SimCard$State)
    {
        com.android.internal.policy.impl.LockScreen $r0;
        com.android.internal.telephony.SimCard$State $r1;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        $r1 := @parameter0: com.android.internal.telephony.SimCard$State;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: boolean isSimOk(com.android.internal.telephony.SimCard$State)>($r1);

        $r0.<com.android.internal.policy.impl.LockScreen: boolean mSimOk> = $z0;

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshViewsWRTSimOk()>();

        return;
    }

    public void onTimeChanged()
    {
        com.android.internal.policy.impl.LockScreen $r0;

        $r0 := @this: com.android.internal.policy.impl.LockScreen;

        specialinvoke $r0.<com.android.internal.policy.impl.LockScreen: void refreshTimeAndDateDisplay()>();

        return;
    }
}
