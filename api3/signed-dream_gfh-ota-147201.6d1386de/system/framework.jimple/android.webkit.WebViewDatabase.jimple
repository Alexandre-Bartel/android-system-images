public class android.webkit.WebViewDatabase extends java.lang.Object
{
    private static final java.lang.String CACHE_CONTENTLENGTH_COL;
    private static final java.lang.String CACHE_DATABASE_FILE;
    private static final int CACHE_DATABASE_VERSION;
    private static final java.lang.String CACHE_ENCODING_COL;
    private static final java.lang.String CACHE_ETAG_COL;
    private static final java.lang.String CACHE_EXPIRES_COL;
    private static final java.lang.String CACHE_FILE_PATH_COL;
    private static final java.lang.String CACHE_HTTP_STATUS_COL;
    private static final java.lang.String CACHE_LAST_MODIFY_COL;
    private static final java.lang.String CACHE_LOCATION_COL;
    private static final java.lang.String CACHE_MIMETYPE_COL;
    private static final java.lang.String CACHE_URL_COL;
    private static final java.lang.String COOKIES_DOMAIN_COL;
    private static final java.lang.String COOKIES_EXPIRES_COL;
    private static final java.lang.String COOKIES_NAME_COL;
    private static final java.lang.String COOKIES_PATH_COL;
    private static final java.lang.String COOKIES_SECURE_COL;
    private static final java.lang.String COOKIES_VALUE_COL;
    private static final java.lang.String DATABASE_FILE;
    private static final int DATABASE_VERSION;
    private static final java.lang.String FORMDATA_NAME_COL;
    private static final java.lang.String FORMDATA_URLID_COL;
    private static final java.lang.String FORMDATA_VALUE_COL;
    private static final java.lang.String FORMURL_URL_COL;
    private static final java.lang.String HTTPAUTH_HOST_COL;
    private static final java.lang.String HTTPAUTH_PASSWORD_COL;
    private static final java.lang.String HTTPAUTH_REALM_COL;
    private static final java.lang.String HTTPAUTH_USERNAME_COL;
    private static final java.lang.String ID_COL;
    private static final java.lang.String[] ID_PROJECTION;
    protected static final java.lang.String LOGTAG;
    private static final java.lang.String PASSWORD_HOST_COL;
    private static final java.lang.String PASSWORD_PASSWORD_COL;
    private static final java.lang.String PASSWORD_USERNAME_COL;
    private static final int TABLE_COOKIES_ID;
    private static final int TABLE_FORMDATA_ID;
    private static final int TABLE_FORMURL_ID;
    private static final int TABLE_HTTPAUTH_ID;
    private static final int TABLE_PASSWORD_ID;
    private static int mCacheContentLengthColIndex;
    private static android.database.sqlite.SQLiteDatabase mCacheDatabase;
    private static int mCacheETagColIndex;
    private static int mCacheEncodingColIndex;
    private static int mCacheExpiresColIndex;
    private static int mCacheFilePathColIndex;
    private static int mCacheHttpStatusColIndex;
    private static android.database.DatabaseUtils$InsertHelper mCacheInserter;
    private static int mCacheLastModifyColIndex;
    private static int mCacheLocationColIndex;
    private static int mCacheMimeTypeColIndex;
    private static int mCacheTransactionRefcount;
    private static int mCacheUrlColIndex;
    private static android.database.sqlite.SQLiteDatabase mDatabase;
    private static android.webkit.WebViewDatabase mInstance;
    private static final java.lang.String[] mTableNames;
    private final java.lang.Object mCookieLock;
    private final java.lang.Object mFormLock;
    private final java.lang.Object mHttpAuthLock;
    private final java.lang.Object mPasswordLock;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <android.webkit.WebViewDatabase: int TABLE_PASSWORD_ID> = 1;

        <android.webkit.WebViewDatabase: int TABLE_HTTPAUTH_ID> = 4;

        <android.webkit.WebViewDatabase: int TABLE_FORMURL_ID> = 2;

        <android.webkit.WebViewDatabase: int TABLE_FORMDATA_ID> = 3;

        <android.webkit.WebViewDatabase: int TABLE_COOKIES_ID> = 0;

        <android.webkit.WebViewDatabase: java.lang.String PASSWORD_USERNAME_COL> = "username";

        <android.webkit.WebViewDatabase: java.lang.String PASSWORD_PASSWORD_COL> = "password";

        <android.webkit.WebViewDatabase: java.lang.String PASSWORD_HOST_COL> = "host";

        <android.webkit.WebViewDatabase: java.lang.String LOGTAG> = "webviewdatabase";

        <android.webkit.WebViewDatabase: java.lang.String ID_COL> = "_id";

        <android.webkit.WebViewDatabase: java.lang.String HTTPAUTH_USERNAME_COL> = "username";

        <android.webkit.WebViewDatabase: java.lang.String HTTPAUTH_REALM_COL> = "realm";

        <android.webkit.WebViewDatabase: java.lang.String HTTPAUTH_PASSWORD_COL> = "password";

        <android.webkit.WebViewDatabase: java.lang.String HTTPAUTH_HOST_COL> = "host";

        <android.webkit.WebViewDatabase: java.lang.String FORMURL_URL_COL> = "url";

        <android.webkit.WebViewDatabase: java.lang.String FORMDATA_VALUE_COL> = "value";

        <android.webkit.WebViewDatabase: java.lang.String FORMDATA_URLID_COL> = "urlid";

        <android.webkit.WebViewDatabase: java.lang.String FORMDATA_NAME_COL> = "name";

        <android.webkit.WebViewDatabase: int DATABASE_VERSION> = 9;

        <android.webkit.WebViewDatabase: java.lang.String DATABASE_FILE> = "webview.db";

        <android.webkit.WebViewDatabase: java.lang.String COOKIES_VALUE_COL> = "value";

        <android.webkit.WebViewDatabase: java.lang.String COOKIES_SECURE_COL> = "secure";

        <android.webkit.WebViewDatabase: java.lang.String COOKIES_PATH_COL> = "path";

        <android.webkit.WebViewDatabase: java.lang.String COOKIES_NAME_COL> = "name";

        <android.webkit.WebViewDatabase: java.lang.String COOKIES_EXPIRES_COL> = "expires";

        <android.webkit.WebViewDatabase: java.lang.String COOKIES_DOMAIN_COL> = "domain";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_URL_COL> = "url";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_MIMETYPE_COL> = "mimetype";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_LOCATION_COL> = "location";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_LAST_MODIFY_COL> = "lastmodify";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_HTTP_STATUS_COL> = "httpstatus";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_FILE_PATH_COL> = "filepath";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_EXPIRES_COL> = "expires";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_ETAG_COL> = "etag";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_ENCODING_COL> = "encoding";

        <android.webkit.WebViewDatabase: int CACHE_DATABASE_VERSION> = 1;

        <android.webkit.WebViewDatabase: java.lang.String CACHE_DATABASE_FILE> = "webviewCache.db";

        <android.webkit.WebViewDatabase: java.lang.String CACHE_CONTENTLENGTH_COL> = "contentlength";

        <android.webkit.WebViewDatabase: android.webkit.WebViewDatabase mInstance> = null;

        <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase> = null;

        <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase> = null;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "cookies";

        $r0[1] = "password";

        $r0[2] = "formurl";

        $r0[3] = "formdata";

        $r0[4] = "httpauth";

        <android.webkit.WebViewDatabase: java.lang.String[] mTableNames> = $r0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "_id";

        <android.webkit.WebViewDatabase: java.lang.String[] ID_PROJECTION> = $r0;

        return;
    }

    private void <init>()
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.Object $r1;

        $r0 := @this: android.webkit.WebViewDatabase;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.webkit.WebViewDatabase: java.lang.Object mCookieLock> = $r1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.webkit.WebViewDatabase: java.lang.Object mPasswordLock> = $r1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.webkit.WebViewDatabase: java.lang.Object mFormLock> = $r1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.webkit.WebViewDatabase: java.lang.Object mHttpAuthLock> = $r1;

        return;
    }

    private static void bootstrapCacheDatabase()
    {
        android.database.sqlite.SQLiteDatabase $r0;

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        if $r0 == null goto label1;

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE cache (_id INTEGER PRIMARY KEY, url TEXT, filepath TEXT, lastmodify TEXT, etag TEXT, expires INTEGER, mimetype TEXT, encoding TEXT,httpstatus INTEGER, location TEXT, contentlength INTEGER,  UNIQUE (url) ON CONFLICT REPLACE);");

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE INDEX cacheUrlIndex ON cache (url)");

        return;

     label1:
        return;
    }

    public static android.webkit.WebViewDatabase getInstance(android.content.Context)
    {
        android.content.Context $r0;
        android.webkit.WebViewDatabase $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        int $i0;
        android.database.DatabaseUtils$InsertHelper $r3;
        java.lang.Throwable $r4, $r5, $r6;

        $r0 := @parameter0: android.content.Context;

        entermonitor class "android/webkit/WebViewDatabase";

     label01:
        $r1 = <android.webkit.WebViewDatabase: android.webkit.WebViewDatabase mInstance>;

        if $r1 != null goto label09;

        $r1 = new android.webkit.WebViewDatabase;

        specialinvoke $r1.<android.webkit.WebViewDatabase: void <init>()>();

        <android.webkit.WebViewDatabase: android.webkit.WebViewDatabase mInstance> = $r1;

        $r2 = virtualinvoke $r0.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>("webview.db", 0, null);

        <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase> = $r2;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 == null goto label04;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $i0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if $i0 == 9 goto label04;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label02:
        staticinvoke <android.webkit.WebViewDatabase: void upgradeDatabase()>();

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label03:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

     label04:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 == null goto label05;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>(0);

     label05:
        $r2 = virtualinvoke $r0.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>("webviewCache.db", 0, null);

        <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase> = $r2;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        if $r2 == null goto label08;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        $i0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if $i0 == 1 goto label08;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label06:
        staticinvoke <android.webkit.WebViewDatabase: void upgradeCacheDatabase()>();

        staticinvoke <android.webkit.WebViewDatabase: void bootstrapCacheDatabase()>();

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label07:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        staticinvoke <android.webkit.CacheManager: boolean removeAllCacheFiles()>();

     label08:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        if $r2 == null goto label09;

        $r3 = new android.database.DatabaseUtils$InsertHelper;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        specialinvoke $r3.<android.database.DatabaseUtils$InsertHelper: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r2, "cache");

        <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter> = $r3;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("url");

        <android.webkit.WebViewDatabase: int mCacheUrlColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("filepath");

        <android.webkit.WebViewDatabase: int mCacheFilePathColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("lastmodify");

        <android.webkit.WebViewDatabase: int mCacheLastModifyColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("etag");

        <android.webkit.WebViewDatabase: int mCacheETagColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("expires");

        <android.webkit.WebViewDatabase: int mCacheExpiresColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("mimetype");

        <android.webkit.WebViewDatabase: int mCacheMimeTypeColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("encoding");

        <android.webkit.WebViewDatabase: int mCacheEncodingColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("httpstatus");

        <android.webkit.WebViewDatabase: int mCacheHttpStatusColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("location");

        <android.webkit.WebViewDatabase: int mCacheLocationColIndex> = $i0;

        $r3 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = virtualinvoke $r3.<android.database.DatabaseUtils$InsertHelper: int getColumnIndex(java.lang.String)>("contentlength");

        <android.webkit.WebViewDatabase: int mCacheContentLengthColIndex> = $i0;

     label09:
        $r1 = <android.webkit.WebViewDatabase: android.webkit.WebViewDatabase mInstance>;

     label10:
        exitmonitor class "android/webkit/WebViewDatabase";

        return $r1;

     label11:
        $r4 := @caughtexception;

     label12:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r4;

     label13:
        $r5 := @caughtexception;

        exitmonitor class "android/webkit/WebViewDatabase";

        throw $r5;

     label14:
        $r6 := @caughtexception;

     label15:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r6;

     label16:
        nop;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label06 with label13;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label10 with label13;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label15 to label16 with label13;
    }

    private boolean hasEntries(int)
    {
        android.webkit.WebViewDatabase $r0;
        int $i0;
        java.lang.String[] $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String $r3;
        android.database.Cursor $r4;
        boolean $z0;

        $r0 := @this: android.webkit.WebViewDatabase;

        $i0 := @parameter0: int;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r3 = $r1[$i0];

        $r1 = <android.webkit.WebViewDatabase: java.lang.String[] ID_PROJECTION>;

        $r4 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r3, $r1, null, null, null, null, null);

        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 != 1 goto label3;

        $z0 = 1;

     label2:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }

    private static void upgradeCacheDatabase()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        $i0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if $i0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrading cache database from version ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(9);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", which will destroy all old data");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("webviewdatabase", $r2);

     label1:
        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS cache");

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setVersion(int)>(1);

        return;
    }

    private static void upgradeDatabase()
    {
        android.database.sqlite.SQLiteDatabase $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        boolean $z0;
        java.lang.String[] $r3;

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $i0 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if $i0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrading database from version ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(9);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", which will destroy old data");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("webviewdatabase", $r2);

     label1:
        if 8 != $i0 goto label5;

        $z0 = 1;

     label2:
        if $z0 != 0 goto label3;

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[0];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS cache");

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[2];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[3];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[4];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

     label3:
        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TABLE IF EXISTS ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[1];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void setVersion(int)>(9);

        if $z0 != 0 goto label4;

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[0];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER PRIMARY KEY, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("domain");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("path");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expires");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("secure");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE INDEX cookiesIndex ON ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[0];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (path)");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[2];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER PRIMARY KEY, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("url");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[3];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER PRIMARY KEY, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("urlid");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT,");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UNIQUE (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("urlid");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ON CONFLICT IGNORE);");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[4];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER PRIMARY KEY, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("host");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("realm");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("username");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("password");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT,");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UNIQUE (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("host");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("realm");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("username");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ON CONFLICT REPLACE);");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

     label4:
        $r0 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE ");

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r2 = $r3[1];

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" INTEGER PRIMARY KEY, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("host");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("username");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT, ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("password");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TEXT,");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UNIQUE (");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("host");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("username");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ON CONFLICT REPLACE);");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r2);

        return;

     label5:
        $z0 = 0;

        goto label2;
    }

    void addCache(java.lang.String, android.webkit.CacheManager$CacheResult)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1;
        android.webkit.CacheManager$CacheResult $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.DatabaseUtils$InsertHelper $r4;
        int $i0, $i2;
        long $l1;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.webkit.CacheManager$CacheResult;

        if $r1 == null goto label2;

        $r3 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void prepareForInsert()>();

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheUrlColIndex>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>($i0, $r1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheFilePathColIndex>;

        $r1 = $r2.<android.webkit.CacheManager$CacheResult: java.lang.String localPath>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>($i0, $r1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheLastModifyColIndex>;

        $r1 = $r2.<android.webkit.CacheManager$CacheResult: java.lang.String lastModified>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>($i0, $r1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheETagColIndex>;

        $r1 = $r2.<android.webkit.CacheManager$CacheResult: java.lang.String etag>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>($i0, $r1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheExpiresColIndex>;

        $l1 = $r2.<android.webkit.CacheManager$CacheResult: long expires>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,long)>($i0, $l1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheMimeTypeColIndex>;

        $r1 = $r2.<android.webkit.CacheManager$CacheResult: java.lang.String mimeType>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>($i0, $r1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheEncodingColIndex>;

        $r1 = $r2.<android.webkit.CacheManager$CacheResult: java.lang.String encoding>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>($i0, $r1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheHttpStatusColIndex>;

        $i2 = $r2.<android.webkit.CacheManager$CacheResult: int httpStatusCode>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,int)>($i0, $i2);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheLocationColIndex>;

        $r1 = $r2.<android.webkit.CacheManager$CacheResult: java.lang.String location>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>($i0, $r1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        $i0 = <android.webkit.WebViewDatabase: int mCacheContentLengthColIndex>;

        $l1 = $r2.<android.webkit.CacheManager$CacheResult: long contentLength>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: void bind(int,long)>($i0, $l1);

        $r4 = <android.webkit.WebViewDatabase: android.database.DatabaseUtils$InsertHelper mCacheInserter>;

        virtualinvoke $r4.<android.database.DatabaseUtils$InsertHelper: long execute()>();

        return;

     label2:
        return;
    }

    void addCookie(android.webkit.CookieManager$Cookie)
    {
        android.webkit.WebViewDatabase $r0;
        android.webkit.CookieManager$Cookie $r1;
        android.content.ContentValues $r2;
        java.lang.String $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.Object $r5;
        long $l0;
        byte $b1;
        java.lang.Long $r6;
        boolean $z0;
        java.lang.Boolean $r7;
        java.lang.String[] $r8;
        java.lang.Throwable $r9;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: android.webkit.CookieManager$Cookie;

        $r3 = $r1.<android.webkit.CookieManager$Cookie: java.lang.String domain>;

        if $r3 == null goto label7;

        $r3 = $r1.<android.webkit.CookieManager$Cookie: java.lang.String path>;

        if $r3 == null goto label8;

        $r3 = $r1.<android.webkit.CookieManager$Cookie: java.lang.String name>;

        if $r3 == null goto label9;

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r4 != null goto label1;

        return;

     label1:
        $r5 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mCookieLock>;

        entermonitor $r5;

     label2:
        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        $r3 = $r1.<android.webkit.CookieManager$Cookie: java.lang.String domain>;

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("domain", $r3);

        $r3 = $r1.<android.webkit.CookieManager$Cookie: java.lang.String path>;

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("path", $r3);

        $r3 = $r1.<android.webkit.CookieManager$Cookie: java.lang.String name>;

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r3);

        $r3 = $r1.<android.webkit.CookieManager$Cookie: java.lang.String value>;

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", $r3);

        $l0 = $r1.<android.webkit.CookieManager$Cookie: long expires>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label3;

        $l0 = $r1.<android.webkit.CookieManager$Cookie: long expires>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("expires", $r6);

     label3:
        $z0 = $r1.<android.webkit.CookieManager$Cookie: boolean secure>;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>("secure", $r7);

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r8 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r3 = $r8[0];

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>($r3, null, $r2);

        exitmonitor $r5;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

        exitmonitor $r5;

     label6:
        throw $r9;

     label7:
        return;

     label8:
        return;

     label9:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void clearCache()
    {
        android.webkit.WebViewDatabase $r0;
        android.database.sqlite.SQLiteDatabase $r1;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        if $r1 != null goto label1;

        return;

     label1:
        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("cache", null, null);

        return;
    }

    void clearCookies()
    {
        android.webkit.WebViewDatabase $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Object $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mCookieLock>;

        entermonitor $r2;

     label2:
        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r4 = $r3[0];

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r4, null, null);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void clearExpiredCookies(long)
    {
        android.webkit.WebViewDatabase $r0;
        long $l0;
        java.lang.String $r1, $r5;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.Object $r3;
        java.lang.String[] $r4;
        java.lang.Throwable $r6;

        $r0 := @this: android.webkit.WebViewDatabase;

        $l0 := @parameter0: long;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mCookieLock>;

        entermonitor $r3;

     label2:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r4 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r5 = $r4[0];

        $r4 = newarray (java.lang.String)[1];

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r4[0] = $r1;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r5, "expires <= ?", $r4);

        exitmonitor $r3;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r6;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void clearFormData()
    {
        android.webkit.WebViewDatabase $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Object $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mFormLock>;

        entermonitor $r2;

     label2:
        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r4 = $r3[2];

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r4, null, null);

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r4 = $r3[3];

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r4, null, null);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void clearHttpAuthUsernamePassword()
    {
        android.webkit.WebViewDatabase $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Object $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mHttpAuthLock>;

        entermonitor $r2;

     label2:
        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r4 = $r3[4];

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r4, null, null);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void clearSessionCookies()
    {
        android.webkit.WebViewDatabase $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Object $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mCookieLock>;

        entermonitor $r2;

     label2:
        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r4 = $r3[0];

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r4, "expires ISNULL", null);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void clearUsernamePassword()
    {
        android.webkit.WebViewDatabase $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Object $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mPasswordLock>;

        entermonitor $r2;

     label2:
        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r3 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r4 = $r3[1];

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r4, null, null);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void deleteCookies(java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1, $r2, $r3, $r7;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.Object $r5;
        java.lang.String[] $r6;
        java.lang.Throwable $r8;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        if $r1 == null goto label6;

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r4 != null goto label1;

        return;

     label1:
        $r5 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mCookieLock>;

        entermonitor $r5;

     label2:
        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r7 = $r6[0];

        $r6 = newarray (java.lang.String)[3];

        $r6[0] = $r1;

        $r6[1] = $r2;

        $r6[2] = $r3;

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r7, "(domain == ?) AND (path == ?) AND (name == ?)", $r6);

        exitmonitor $r5;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r5;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    boolean endCacheTransaction()
    {
        android.webkit.WebViewDatabase $r0;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.webkit.WebViewDatabase;

        $i0 = <android.webkit.WebViewDatabase: int mCacheTransactionRefcount>;

        $i0 = $i0 - 1;

        <android.webkit.WebViewDatabase: int mCacheTransactionRefcount> = $i0;

        if $i0 != 0 goto label4;

     label1:
        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label2:
        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return 1;

     label3:
        $r2 := @caughtexception;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r2;

     label4:
        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    android.webkit.CacheManager$CacheResult getCache(java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1;
        android.webkit.CacheManager$CacheResult $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String[] $r4;
        android.database.Cursor $r5;
        boolean $z0;
        long $l0;
        int $i1;
        java.lang.Throwable $r6;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r3 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        if $r3 != null goto label2;

     label1:
        return null;

     label2:
        $r3 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r1;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT filepath, lastmodify, etag, expires, mimetype, encoding, httpstatus, location, contentlength FROM cache WHERE url = ?", $r4);

     label3:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label6;

        $r2 = new android.webkit.CacheManager$CacheResult;

        specialinvoke $r2.<android.webkit.CacheManager$CacheResult: void <init>()>();

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r2.<android.webkit.CacheManager$CacheResult: java.lang.String localPath> = $r1;

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r2.<android.webkit.CacheManager$CacheResult: java.lang.String lastModified> = $r1;

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(2);

        $r2.<android.webkit.CacheManager$CacheResult: java.lang.String etag> = $r1;

        $l0 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>(3);

        $r2.<android.webkit.CacheManager$CacheResult: long expires> = $l0;

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(4);

        $r2.<android.webkit.CacheManager$CacheResult: java.lang.String mimeType> = $r1;

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(5);

        $r2.<android.webkit.CacheManager$CacheResult: java.lang.String encoding> = $r1;

        $i1 = interfaceinvoke $r5.<android.database.Cursor: int getInt(int)>(6);

        $r2.<android.webkit.CacheManager$CacheResult: int httpStatusCode> = $i1;

        $r1 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(7);

        $r2.<android.webkit.CacheManager$CacheResult: java.lang.String location> = $r1;

        $l0 = interfaceinvoke $r5.<android.database.Cursor: long getLong(int)>(8);

        $r2.<android.webkit.CacheManager$CacheResult: long contentLength> = $l0;

     label4:
        if $r5 == null goto label5;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

     label5:
        return $r2;

     label6:
        if $r5 == null goto label7;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

     label7:
        return null;

     label8:
        $r6 := @caughtexception;

        if $r5 == null goto label9;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

     label9:
        throw $r6;

        catch java.lang.Throwable from label3 to label4 with label8;
    }

    long getCacheTotalSize()
    {
        android.webkit.WebViewDatabase $r0;
        long $l0;
        android.database.sqlite.SQLiteDatabase $r1;
        android.database.Cursor $r2;
        boolean $z0;

        $r0 := @this: android.webkit.WebViewDatabase;

        $l0 = 0L;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT SUM(contentlength) as sum FROM cache", null);

        $z0 = interfaceinvoke $r2.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label1;

        $l0 = interfaceinvoke $r2.<android.database.Cursor: long getLong(int)>(0);

     label1:
        interfaceinvoke $r2.<android.database.Cursor: void close()>();

        return $l0;
    }

    java.util.ArrayList getCookiesForDomain(java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1, $r8;
        java.lang.String[] $r2, $r7;
        android.webkit.CookieManager$Cookie $r3;
        java.util.ArrayList $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        java.lang.Object $r6;
        android.database.Cursor $r9;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        short $s6;
        java.lang.Throwable $r10;
        long $l7;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        if $r1 == null goto label13;

        $r5 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r5 != null goto label01;

        return $r4;

     label01:
        $r6 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mCookieLock>;

        entermonitor $r6;

     label02:
        $r2 = newarray (java.lang.String)[7];

        $r2[0] = "_id";

        $r2[1] = "domain";

        $r2[2] = "path";

        $r2[3] = "name";

        $r2[4] = "value";

        $r2[5] = "expires";

        $r2[6] = "secure";

        $r5 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r7 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r8 = $r7[0];

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = $r1;

        $r9 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r8, $r2, "(domain GLOB \'*\' || ?)", $r7, null, null, null);

        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label06;

        $i0 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("domain");

        $i1 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("path");

        $i2 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("name");

        $i3 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("value");

        $i4 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("expires");

        $i5 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("secure");

     label03:
        $r3 = new android.webkit.CookieManager$Cookie;

        specialinvoke $r3.<android.webkit.CookieManager$Cookie: void <init>()>();

        $r1 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r3.<android.webkit.CookieManager$Cookie: java.lang.String domain> = $r1;

        $r1 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i1);

        $r3.<android.webkit.CookieManager$Cookie: java.lang.String path> = $r1;

        $r1 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i2);

        $r3.<android.webkit.CookieManager$Cookie: java.lang.String name> = $r1;

        $r1 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i3);

        $r3.<android.webkit.CookieManager$Cookie: java.lang.String value> = $r1;

        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean isNull(int)>($i4);

        if $z0 == 0 goto label10;

        $r3.<android.webkit.CookieManager$Cookie: long expires> = -1L;

     label04:
        $s6 = interfaceinvoke $r9.<android.database.Cursor: short getShort(int)>($i5);

        if $s6 == 0 goto label12;

        $z0 = 1;

     label05:
        $r3.<android.webkit.CookieManager$Cookie: boolean secure> = $z0;

        $r3.<android.webkit.CookieManager$Cookie: byte mode> = 1;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToNext()>();

        if $z0 != 0 goto label03;

     label06:
        interfaceinvoke $r9.<android.database.Cursor: void close()>();

        exitmonitor $r6;

     label07:
        return $r4;

     label08:
        $r10 := @caughtexception;

        exitmonitor $r6;

     label09:
        throw $r10;

     label10:
        $l7 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>($i4);

        $r3.<android.webkit.CookieManager$Cookie: long expires> = $l7;

     label11:
        goto label04;

     label12:
        $z0 = 0;

        goto label05;

     label13:
        return $r4;

        catch java.lang.Throwable from label02 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label10 to label11 with label08;
    }

    java.util.ArrayList getFormData(java.lang.String, java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1, $r2, $r7;
        java.util.ArrayList $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.Object $r5;
        java.lang.String[] $r6, $r8;
        android.database.Cursor $r9, $r10;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.Throwable $r11;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        if $r1 == null goto label09;

        if $r2 == null goto label10;

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r4 != null goto label01;

        return $r3;

     label01:
        $r5 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mFormLock>;

        entermonitor $r5;

     label02:
        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r7 = $r6[2];

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] ID_PROJECTION>;

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = $r1;

        $r9 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r7, $r6, "(url == ?)", $r8, null, null, null);

        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label05;

        $i0 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("_id");

        $l1 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>($i0);

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r1 = $r6[3];

        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "_id";

        $r6[1] = "value";

        $r8 = newarray (java.lang.String)[2];

        $r7 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        $r8[0] = $r7;

        $r8[1] = $r2;

        $r10 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r1, $r6, "(urlid == ?) AND (name == ?)", $r8, null, null, null);

        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label04;

        $i0 = interfaceinvoke $r10.<android.database.Cursor: int getColumnIndex(java.lang.String)>("value");

     label03:
        $r1 = interfaceinvoke $r10.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $z0 = interfaceinvoke $r10.<android.database.Cursor: boolean moveToNext()>();

        if $z0 != 0 goto label03;

     label04:
        interfaceinvoke $r10.<android.database.Cursor: void close()>();

     label05:
        interfaceinvoke $r9.<android.database.Cursor: void close()>();

        exitmonitor $r5;

     label06:
        return $r3;

     label07:
        $r11 := @caughtexception;

        exitmonitor $r5;

     label08:
        throw $r11;

     label09:
        return $r3;

     label10:
        return $r3;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    java.lang.String[] getHttpAuthUsernamePassword(java.lang.String, java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1, $r2, $r8;
        java.lang.String[] $r3, $r6, $r7;
        java.lang.Object $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        android.database.Cursor $r9;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r10;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        if $r1 == null goto label1;

        if $r2 == null goto label1;

        $r5 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r5 != null goto label2;

     label1:
        return null;

     label2:
        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "username";

        $r3[1] = "password";

        $r4 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mHttpAuthLock>;

        entermonitor $r4;

        $r6 = null;

     label3:
        $r5 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r7 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r8 = $r7[4];

        $r7 = newarray (java.lang.String)[2];

        $r7[0] = $r1;

        $r7[1] = $r2;

        $r9 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r8, $r3, "(host == ?) AND (realm == ?)", $r7, null, null, null);

        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label4;

        $r6 = newarray (java.lang.String)[2];

        $i0 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("username");

        $r1 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r6[0] = $r1;

        $i0 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("password");

        $r1 = interfaceinvoke $r9.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r6[1] = $r1;

     label4:
        interfaceinvoke $r9.<android.database.Cursor: void close()>();

        exitmonitor $r4;

     label5:
        return $r6;

     label6:
        $r10 := @caughtexception;

        exitmonitor $r4;

     label7:
        throw $r10;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    java.lang.String[] getUsernamePassword(java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1, $r7;
        java.lang.String[] $r2, $r5, $r6;
        java.lang.Object $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        android.database.Cursor $r8;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r9;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r4 != null goto label2;

     label1:
        return null;

     label2:
        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "username";

        $r2[1] = "password";

        $r3 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mPasswordLock>;

        entermonitor $r3;

        $r5 = null;

     label3:
        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r7 = $r6[1];

        $r6 = newarray (java.lang.String)[1];

        $r6[0] = $r1;

        $r8 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r7, $r2, "(host == ?)", $r6, null, null, null);

        $z0 = interfaceinvoke $r8.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label4;

        $r5 = newarray (java.lang.String)[2];

        $i0 = interfaceinvoke $r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("username");

        $r1 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r5[0] = $r1;

        $i0 = interfaceinvoke $r8.<android.database.Cursor: int getColumnIndex(java.lang.String)>("password");

        $r1 = interfaceinvoke $r8.<android.database.Cursor: java.lang.String getString(int)>($i0);

        $r5[1] = $r1;

     label4:
        interfaceinvoke $r8.<android.database.Cursor: void close()>();

        exitmonitor $r3;

     label5:
        return $r5;

     label6:
        $r9 := @caughtexception;

        exitmonitor $r3;

     label7:
        throw $r9;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    boolean hasCache()
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String[] $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        android.database.Cursor $r3;
        boolean $z0;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        $r1 = <android.webkit.WebViewDatabase: java.lang.String[] ID_PROJECTION>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("cache", $r1, null, null, null, null, null);

        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 != 1 goto label3;

        $z0 = 1;

     label2:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        return $z0;

     label3:
        $z0 = 0;

        goto label2;
    }

    boolean hasCookies()
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mCookieLock>;

        entermonitor $r1;

     label1:
        $z0 = specialinvoke $r0.<android.webkit.WebViewDatabase: boolean hasEntries(int)>(0);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean hasFormData()
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mFormLock>;

        entermonitor $r1;

     label1:
        $z0 = specialinvoke $r0.<android.webkit.WebViewDatabase: boolean hasEntries(int)>(2);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean hasHttpAuthUsernamePassword()
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mHttpAuthLock>;

        entermonitor $r1;

     label1:
        $z0 = specialinvoke $r0.<android.webkit.WebViewDatabase: boolean hasEntries(int)>(4);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean hasUsernamePassword()
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mPasswordLock>;

        entermonitor $r1;

     label1:
        $z0 = specialinvoke $r0.<android.webkit.WebViewDatabase: boolean hasEntries(int)>(1);

        exitmonitor $r1;

     label2:
        return $z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void removeCache(java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String[] $r3;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label2;

        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        if $r2 != null goto label1;

        return;

     label1:
        $r2 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>("DELETE FROM cache WHERE url = ?", $r3);

        return;

     label2:
        return;
    }

    void setFormData(java.lang.String, java.util.HashMap)
    {
        java.lang.String $r0, $r7;
        java.util.HashMap $r1;
        android.content.ContentValues $r2;
        android.webkit.WebViewDatabase $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.Object $r5, $r13;
        java.lang.String[] $r6, $r8;
        android.database.Cursor $r9;
        boolean $z0;
        int $i0;
        long $l1;
        byte $b2;
        java.util.Set $r10;
        java.util.Iterator $r11;
        java.lang.Long $r12;
        java.util.Map$Entry $r14;
        java.lang.Throwable $r15;

        $r3 := @this: android.webkit.WebViewDatabase;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.HashMap;

        if $r0 == null goto label10;

        if $r1 == null goto label11;

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r4 != null goto label01;

        return;

     label01:
        $r5 = $r3.<android.webkit.WebViewDatabase: java.lang.Object mFormLock>;

        entermonitor $r5;

     label02:
        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r7 = $r6[2];

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] ID_PROJECTION>;

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = $r0;

        $r9 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r7, $r6, "(url == ?)", $r8, null, null, null);

        $z0 = interfaceinvoke $r9.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label07;

        $i0 = interfaceinvoke $r9.<android.database.Cursor: int getColumnIndex(java.lang.String)>("_id");

        $l1 = interfaceinvoke $r9.<android.database.Cursor: long getLong(int)>($i0);

     label03:
        interfaceinvoke $r9.<android.database.Cursor: void close()>();

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label08;

        $r10 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("urlid", $r12);

     label04:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r13 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.util.Map$Entry) $r13;

        $r13 = interfaceinvoke $r14.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r0 = (java.lang.String) $r13;

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r0);

        $r13 = interfaceinvoke $r14.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r0 = (java.lang.String) $r13;

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("value", $r0);

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r0 = $r6[3];

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>($r0, null, $r2);

        goto label04;

     label05:
        $r15 := @caughtexception;

        exitmonitor $r5;

     label06:
        throw $r15;

     label07:
        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("url", $r0);

        $r4 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r6 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r0 = $r6[2];

        $l1 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>($r0, null, $r2);

        goto label03;

     label08:
        exitmonitor $r5;

     label09:
        return;

     label10:
        return;

     label11:
        return;

        catch java.lang.Throwable from label02 to label06 with label05;
        catch java.lang.Throwable from label07 to label09 with label05;
    }

    void setHttpAuthUsernamePassword(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        android.content.ContentValues $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.Object $r7;
        java.lang.String[] $r8;
        java.lang.Throwable $r9;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        if $r1 == null goto label6;

        if $r2 == null goto label7;

        $r6 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r6 != null goto label1;

        return;

     label1:
        $r7 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mHttpAuthLock>;

        entermonitor $r7;

     label2:
        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("host", $r1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("realm", $r2);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("username", $r3);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("password", $r4);

        $r6 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r8 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r1 = $r8[4];

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>($r1, "host", $r5);

        exitmonitor $r7;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

        exitmonitor $r7;

     label5:
        throw $r9;

     label6:
        return;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    void setUsernamePassword(java.lang.String, java.lang.String, java.lang.String)
    {
        android.webkit.WebViewDatabase $r0;
        java.lang.String $r1, $r2, $r3;
        android.content.ContentValues $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        java.lang.Throwable $r8;

        $r0 := @this: android.webkit.WebViewDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        if $r1 == null goto label6;

        $r5 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = $r0.<android.webkit.WebViewDatabase: java.lang.Object mPasswordLock>;

        entermonitor $r6;

     label2:
        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("host", $r1);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("username", $r2);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("password", $r3);

        $r5 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r7 = <android.webkit.WebViewDatabase: java.lang.String[] mTableNames>;

        $r1 = $r7[1];

        virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>($r1, "host", $r4);

        exitmonitor $r6;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r6;

     label5:
        throw $r8;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    boolean startCacheTransaction()
    {
        android.webkit.WebViewDatabase $r0;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r1;

        $r0 := @this: android.webkit.WebViewDatabase;

        $i0 = <android.webkit.WebViewDatabase: int mCacheTransactionRefcount>;

        $i0 = $i0 + 1;

        <android.webkit.WebViewDatabase: int mCacheTransactionRefcount> = $i0;

        if $i0 != 1 goto label1;

        $r1 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        return 1;

     label1:
        return 0;
    }

    java.util.ArrayList trimCache(long)
    {
        android.webkit.WebViewDatabase $r0;
        int $i0, $i2;
        java.util.ArrayList $r1;
        java.lang.StringBuilder $r2;
        long $l1, $l3;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r4;
        boolean $z0;
        java.lang.String $r5;
        android.database.sqlite.SQLiteStatement $r6;
        byte $b4;

        $r0 := @this: android.webkit.WebViewDatabase;

        $l1 := @parameter0: long;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(100);

        $r3 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT contentlength, filepath FROM cache ORDER BY expires ASC", null);

        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label7;

        $r2 = new java.lang.StringBuilder;

        $i0 = 20 + 1600;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM cache WHERE filepath IN (?");

        $i0 = 1;

     label1:
        if $i0 >= 100 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ?");

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = <android.webkit.WebViewDatabase: android.database.sqlite.SQLiteDatabase mCacheDatabase>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r5);

        $i2 = 1;

     label3:
        $l3 = interfaceinvoke $r4.<android.database.Cursor: long getLong(int)>(0);

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label8;

     label4:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label5;

        $b4 = $l1 cmp 0L;

        if $b4 > 0 goto label3;

     label5:
        if $i2 <= 1 goto label6;

        virtualinvoke $r6.<android.database.sqlite.SQLiteStatement: void execute()>();

     label6:
        virtualinvoke $r6.<android.database.sqlite.SQLiteProgram: void close()>();

     label7:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return $r1;

     label8:
        $l1 = $l1 - $l3;

        $r5 = interfaceinvoke $r4.<android.database.Cursor: java.lang.String getString(int)>(1);

        virtualinvoke $r6.<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>($i2, $r5);

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        if $i2 != 100 goto label9;

        virtualinvoke $r6.<android.database.sqlite.SQLiteStatement: void execute()>();

        virtualinvoke $r6.<android.database.sqlite.SQLiteProgram: void clearBindings()>();

        $i2 = 1;

        goto label4;

     label9:
        $i2 = $i2 + 1;

        goto label4;
    }
}
