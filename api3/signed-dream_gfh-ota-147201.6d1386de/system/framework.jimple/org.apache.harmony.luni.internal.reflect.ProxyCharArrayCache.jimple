class org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache extends java.lang.Object
{
    private int elementSize;
    private char[][] keyTable;
    private int threshold;
    private int[] valueTable;

    void <init>(int)
    {
        org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache $r0;
        int $i0, $i1;
        float $f0;
        char[][] $r1;
        int[] $r2;

        $r0 := @this: org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $i0 >= 13 goto label1;

        $i0 = 13;

     label1:
        $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int elementSize> = 0;

        $f0 = (float) $i0;

        $f0 = $f0 * 0.66F;

        $i1 = (int) $f0;

        $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int threshold> = $i1;

        $r1 = newarray (char[])[$i0];

        $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable> = $r1;

        $r2 = newarray (int)[$i0];

        $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int[] valueTable> = $r2;

        return;
    }

    static boolean equals(char[], char[])
    {
        char[] $r0, $r1;
        int $i0, $i1;
        char $c2, $c3;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: char[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $i0 = lengthof $r0;

     label5:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label6;

        $c2 = $r0[$i0];

        $c3 = $r1[$i0];

        if $c2 == $c3 goto label5;

        return 0;

     label6:
        return 1;
    }

    private int hashCodeChar(char[])
    {
        org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache $r0;
        char[] $r1;
        int $i0, $i1, $i2;
        char $c3;
        char[][] $r2;

        $r0 := @this: org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache;

        $r1 := @parameter0: char[];

        $i0 = lengthof $r1;

        $i1 = 0;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $c3 = $r1[$i2];

        $i1 = $i1 + $c3;

        $i2 = $i2 + 2;

        goto label1;

     label2:
        $i0 = 2147483647 & $i1;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $i1 = lengthof $r2;

        $i0 = $i0 % $i1;

        return $i0;
    }

    private void rehash()
    {
        org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache $r0, $r1;
        char[][] $r2;
        int $i0, $i1;
        char[] $r3;
        int[] $r4;

        $r0 := @this: org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache;

        $r1 = new org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $i0 = lengthof $r2;

        $i0 = $i0 * 2;

        specialinvoke $r1.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: void <init>(int)>($i0);

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $i0 = lengthof $r2;

     label1:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label2;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r3 = $r2[$i0];

        if $r3 == null goto label1;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r3 = $r2[$i0];

        $r4 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int[] valueTable>;

        $i1 = $r4[$i0];

        virtualinvoke $r1.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int put(char[],int)>($r3, $i1);

        goto label1;

     label2:
        $r2 = $r1.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable> = $r2;

        $r4 = $r1.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int[] valueTable>;

        $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int[] valueTable> = $r4;

        $i0 = $r1.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int threshold>;

        $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int threshold> = $i0;

        return;
    }

    int get(char[])
    {
        org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache $r0;
        char[] $r1, $r3;
        int $i0, $i1;
        char[][] $r2;
        boolean $z0;
        int[] $r4;

        $r0 := @this: org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache;

        $r1 := @parameter0: char[];

        $i0 = specialinvoke $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int hashCodeChar(char[])>($r1);

     label1:
        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r3 = $r2[$i0];

        if $r3 == null goto label3;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r3 = $r2[$i0];

        $z0 = staticinvoke <org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: boolean equals(char[],char[])>($r3, $r1);

        if $z0 == 0 goto label2;

        $r4 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int[] valueTable>;

        $i0 = $r4[$i0];

        return $i0;

     label2:
        $i0 = $i0 + 1;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $i1 = lengthof $r2;

        $i0 = $i0 % $i1;

        goto label1;

     label3:
        return -1;
    }

    int put(char[], int)
    {
        org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache $r0;
        char[] $r1, $r3;
        int $i0, $i1, $i2;
        char[][] $r2;
        boolean $z0;
        int[] $r4;

        $r0 := @this: org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 = specialinvoke $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int hashCodeChar(char[])>($r1);

     label1:
        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r3 = $r2[$i1];

        if $r3 == null goto label3;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r3 = $r2[$i1];

        $z0 = staticinvoke <org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: boolean equals(char[],char[])>($r3, $r1);

        if $z0 == 0 goto label2;

        $r4 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int[] valueTable>;

        $r4[$i1] = $i0;

        return $i0;

     label2:
        $i1 = $i1 + 1;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $i2 = lengthof $r2;

        $i1 = $i1 % $i2;

        goto label1;

     label3:
        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r2[$i1] = $r1;

        $r4 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int[] valueTable>;

        $r4[$i1] = $i0;

        $i1 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int elementSize>;

        $i1 = $i1 + 1;

        $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int elementSize> = $i1;

        $i2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int threshold>;

        if $i1 <= $i2 goto label4;

        specialinvoke $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: void rehash()>();

        return $i0;

     label4:
        return $i0;
    }

    int size()
    {
        org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache $r0;
        int i0;

        $r0 := @this: org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache;

        i0 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int elementSize>;

        return i0;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache $r0;
        java.lang.StringBuilder $r1, $r4;
        int $i0, $i1, $i2;
        char[][] $r2;
        char[] $r3;
        int[] $r5;
        java.lang.String $r6;

        $r0 := @this: org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache;

        $i0 = virtualinvoke $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int size()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r3 = $r2[$i1];

        if $r3 == null goto label2;

        $r2 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: char[][] keyTable>;

        $r3 = $r2[$i1];

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char[])>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r5 = $r0.<org.apache.harmony.luni.internal.reflect.ProxyCharArrayCache: int[] valueTable>;

        $i2 = $r5[$i1];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

     label2:
        if $i1 >= $i0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }
}
