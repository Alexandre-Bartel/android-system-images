public class org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi extends java.security.cert.CertPathBuilderSpi
{

    public void <init>()
    {
        org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi $r0;

        $r0 := @this: org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi;

        specialinvoke $r0.<java.security.cert.CertPathBuilderSpi: void <init>()>();

        return;
    }

    private final java.util.Collection findCertificates(java.security.cert.CertSelector, java.util.List) throws java.security.cert.CertStoreException
    {
        org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi $r0;
        java.security.cert.CertSelector $r1;
        java.util.List $r2;
        java.util.HashSet $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.security.cert.CertStore $r6;
        java.util.Collection $r7;

        $r0 := @this: org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi;

        $r1 := @parameter0: java.security.cert.CertSelector;

        $r2 := @parameter1: java.util.List;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r4 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.security.cert.CertStore) $r5;

        $r7 = virtualinvoke $r6.<java.security.cert.CertStore: java.util.Collection getCertificates(java.security.cert.CertSelector)>($r1);

        interfaceinvoke $r3.<java.util.Set: boolean addAll(java.util.Collection)>($r7);

        goto label1;

     label2:
        return $r3;
    }

    private final java.security.cert.X509Certificate findIssuer(java.security.cert.X509Certificate, java.util.List) throws java.security.cert.CertPathValidatorException
    {
        org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi $r0;
        java.security.cert.X509Certificate $r1, $r9;
        java.util.List $r2;
        java.security.cert.X509CertSelector $r3;
        java.lang.Exception $r4;
        javax.security.auth.x500.X500Principal $r5;
        byte[] $r6;
        java.util.Collection $r7;
        java.util.Iterator $r8;
        boolean $z0;
        java.lang.Object $r10;
        java.security.PublicKey $r11;
        java.io.IOException $r12;
        java.security.cert.CertPathValidatorException $r13;
        java.security.cert.CertStoreException $r14;

        $r0 := @this: org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 := @parameter1: java.util.List;

        $r4 = null;

        $r3 = new java.security.cert.X509CertSelector;

        specialinvoke $r3.<java.security.cert.X509CertSelector: void <init>()>();

     label01:
        $r5 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r6 = virtualinvoke $r5.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        virtualinvoke $r3.<java.security.cert.X509CertSelector: void setSubject(byte[])>($r6);

     label02:
        $r7 = specialinvoke $r0.<org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi: java.util.Collection findCertificates(java.security.cert.CertSelector,java.util.List)>($r3, $r2);

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $r9 = null;

     label04:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        if $r9 != null goto label10;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.security.cert.X509Certificate) $r10;

     label05:
        $r11 = virtualinvoke $r9.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

        virtualinvoke $r1.<java.security.cert.Certificate: void verify(java.security.PublicKey)>($r11);

     label06:
        goto label04;

     label07:
        $r4 := @caughtexception;

        $r9 = null;

        goto label04;

     label08:
        $r12 := @caughtexception;

        $r13 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r13.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Issuer not found", null, null, -1);

        throw $r13;

     label09:
        $r14 := @caughtexception;

        $r13 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r13.<java.security.cert.CertPathValidatorException: void <init>(java.lang.Throwable)>($r14);

        throw $r13;

     label10:
        if $r9 != null goto label11;

        if $r4 != null goto label11;

        $r13 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r13.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("Issuer not found", null, null, -1);

        throw $r13;

     label11:
        if $r9 != null goto label12;

        if $r4 == null goto label13;

        $r13 = new java.security.cert.CertPathValidatorException;

        specialinvoke $r13.<java.security.cert.CertPathValidatorException: void <init>(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)>("issuer found but certificate validation failed", $r4, null, -1);

        throw $r13;

     label12:
        return $r9;

     label13:
        return $r9;

        catch java.io.IOException from label01 to label02 with label08;
        catch java.security.cert.CertStoreException from label02 to label03 with label09;
        catch java.lang.Exception from label05 to label06 with label07;
    }

    public java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters) throws java.security.cert.CertPathBuilderException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi $r0;
        java.security.cert.CertPathParameters $r1;
        java.util.ArrayList $r2;
        boolean $z0;
        java.security.InvalidAlgorithmParameterException $r3;
        java.security.cert.PKIXBuilderParameters $r4;
        java.security.cert.CertPath $r5, $r19;
        java.security.GeneralSecurityException $r6;
        java.security.cert.CertSelector $r7;
        java.security.cert.CertPathBuilderException $r8;
        java.util.List $r9;
        java.util.Collection $r10;
        java.security.cert.CertStoreException $r11;
        java.security.cert.CertificateFactory $r12;
        java.security.cert.CertPathValidator $r13;
        java.util.Iterator $r14;
        java.lang.Object $r15;
        java.security.cert.X509Certificate $r16, $r30;
        java.util.Set $r17;
        java.security.cert.TrustAnchor $r18;
        java.security.cert.CertPathValidatorResult $r20;
        java.security.cert.PKIXCertPathValidatorResult $r21;
        java.security.cert.PKIXCertPathBuilderResult $r22;
        java.security.cert.PolicyNode $r23;
        java.security.PublicKey $r24;
        java.lang.Exception $r25;
        java.lang.StringBuilder $r26;
        java.lang.String $r27;
        java.security.cert.CertificateException $r28;
        java.security.cert.CertPathValidatorException $r29, $r31;

        $r0 := @this: org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi;

        $r1 := @parameter0: java.security.cert.CertPathParameters;

        $z0 = $r1 instanceof java.security.cert.PKIXBuilderParameters;

        if $z0 != 0 goto label01;

        $r3 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r3.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("params must be a PKIXBuilderParameters instance");

        throw $r3;

     label01:
        $r4 = (java.security.cert.PKIXBuilderParameters) $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r5 = null;

        $r6 = null;

        $r7 = virtualinvoke $r4.<java.security.cert.PKIXParameters: java.security.cert.CertSelector getTargetCertConstraints()>();

        if $r7 != null goto label02;

        $r8 = new java.security.cert.CertPathBuilderException;

        specialinvoke $r8.<java.security.cert.CertPathBuilderException: void <init>(java.lang.String)>("targetCertConstraints must be non-null for CertPath building");

        throw $r8;

     label02:
        $r9 = virtualinvoke $r4.<java.security.cert.PKIXParameters: java.util.List getCertStores()>();

        $r10 = specialinvoke $r0.<org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi: java.util.Collection findCertificates(java.security.cert.CertSelector,java.util.List)>($r7, $r9);

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Collection: boolean isEmpty()>();

        if $z0 == 0 goto label05;

        $r8 = new java.security.cert.CertPathBuilderException;

        specialinvoke $r8.<java.security.cert.CertPathBuilderException: void <init>(java.lang.String)>("no certificate found matching targetCertContraints");

        throw $r8;

     label04:
        $r11 := @caughtexception;

        $r8 = new java.security.cert.CertPathBuilderException;

        specialinvoke $r8.<java.security.cert.CertPathBuilderException: void <init>(java.lang.Throwable)>($r11);

        throw $r8;

     label05:
        $r12 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)>("X.509", "BC");

        $r13 = staticinvoke <java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.lang.String)>("PKIX", "BC");

     label06:
        $r14 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label21;

        $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (java.security.cert.X509Certificate) $r15;

        interfaceinvoke $r2.<java.util.List: void clear()>();

     label08:
        if $r16 == null goto label07;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r17 = virtualinvoke $r4.<java.security.cert.PKIXParameters: java.util.Set getTrustAnchors()>();

        $r18 = virtualinvoke $r0.<org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi: java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate,java.util.Set)>($r16, $r17);

        if $r18 == null goto label17;

     label09:
        $r19 = virtualinvoke $r12.<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List)>($r2);

        $r5 = $r19;

        $r20 = virtualinvoke $r13.<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)>($r19, $r4);

     label10:
        $r21 = (java.security.cert.PKIXCertPathValidatorResult) $r20;

     label11:
        $r22 = new java.security.cert.PKIXCertPathBuilderResult;

        $r18 = virtualinvoke $r21.<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.TrustAnchor getTrustAnchor()>();

        $r23 = virtualinvoke $r21.<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.PolicyNode getPolicyTree()>();

        $r24 = virtualinvoke $r21.<java.security.cert.PKIXCertPathValidatorResult: java.security.PublicKey getPublicKey()>();

        specialinvoke $r22.<java.security.cert.PKIXCertPathBuilderResult: void <init>(java.security.cert.CertPath,java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)>($r19, $r18, $r23, $r24);

     label12:
        return $r22;

     label13:
        $r25 := @caughtexception;

        $r8 = new java.security.cert.CertPathBuilderException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception creating support classes: ");

        $r26 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.cert.CertPathBuilderException: void <init>(java.lang.String)>($r27);

        throw $r8;

     label14:
        $r28 := @caughtexception;

        $r6 = $r28;

     label15:
        $r16 = null;

        goto label08;

     label16:
        $r29 := @caughtexception;

        $r6 = $r29;

        goto label15;

     label17:
        $r9 = virtualinvoke $r4.<java.security.cert.PKIXParameters: java.util.List getCertStores()>();

        $r30 = specialinvoke $r0.<org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi: java.security.cert.X509Certificate findIssuer(java.security.cert.X509Certificate,java.util.List)>($r16, $r9);

        $z0 = virtualinvoke $r30.<java.security.cert.Certificate: boolean equals(java.lang.Object)>($r16);

     label18:
        if $z0 == 0 goto label19;

        $r16 = null;

        goto label08;

     label19:
        $r16 = $r30;

        goto label08;

     label20:
        $r31 := @caughtexception;

        $r6 = $r31;

        $r16 = null;

        goto label08;

     label21:
        if $r5 == null goto label22;

        $r8 = new java.security.cert.CertPathBuilderException;

        specialinvoke $r8.<java.security.cert.CertPathBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("found certificate chain, but could not be validated", $r6);

        throw $r8;

     label22:
        $r8 = new java.security.cert.CertPathBuilderException;

        specialinvoke $r8.<java.security.cert.CertPathBuilderException: void <init>(java.lang.String)>("unable to find certificate chain");

        throw $r8;

        catch java.security.cert.CertStoreException from label02 to label03 with label04;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.security.cert.CertificateException from label09 to label10 with label14;
        catch java.security.cert.CertificateException from label11 to label12 with label14;
        catch java.security.cert.CertPathValidatorException from label09 to label10 with label16;
        catch java.security.cert.CertPathValidatorException from label11 to label12 with label16;
        catch java.security.cert.CertPathValidatorException from label17 to label18 with label20;
    }

    final java.security.cert.TrustAnchor findTrustAnchor(java.security.cert.X509Certificate, java.util.Set) throws java.security.cert.CertPathBuilderException
    {
        org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi $r0;
        java.security.cert.X509Certificate $r1, $r11;
        java.util.Set $r2;
        javax.security.auth.x500.X500Principal $r3, $r16;
        java.security.cert.X509CertSelector $r4;
        java.util.Iterator $r5;
        java.security.cert.TrustAnchor $r6;
        java.security.PublicKey $r7, $r15;
        java.lang.Exception $r8;
        byte[] $r9;
        boolean $z0;
        java.lang.Object $r10;
        java.io.IOException $r12;
        java.security.cert.CertPathBuilderException $r13;
        java.lang.String $r14;
        java.lang.IllegalArgumentException $r17;

        $r0 := @this: org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 := @parameter1: java.util.Set;

        $r5 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r6 = null;

        $r7 = null;

        $r8 = null;

        $r4 = new java.security.cert.X509CertSelector;

        specialinvoke $r4.<java.security.cert.X509CertSelector: void <init>()>();

     label01:
        $r3 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r9 = virtualinvoke $r3.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        virtualinvoke $r4.<java.security.cert.X509CertSelector: void setSubject(byte[])>($r9);

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        if $r6 != null goto label15;

        $r10 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.security.cert.TrustAnchor) $r10;

        $r11 = virtualinvoke $r6.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        if $r11 == null goto label09;

        $r11 = virtualinvoke $r6.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        $z0 = virtualinvoke $r4.<java.security.cert.X509CertSelector: boolean match(java.security.cert.Certificate)>($r11);

        if $z0 == 0 goto label08;

        $r11 = virtualinvoke $r6.<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()>();

        $r7 = virtualinvoke $r11.<java.security.cert.Certificate: java.security.PublicKey getPublicKey()>();

     label03:
        if $r7 == null goto label02;

     label04:
        virtualinvoke $r1.<java.security.cert.Certificate: void verify(java.security.PublicKey)>($r7);

     label05:
        goto label02;

     label06:
        $r8 := @caughtexception;

        $r6 = null;

        goto label02;

     label07:
        $r12 := @caughtexception;

        $r13 = new java.security.cert.CertPathBuilderException;

        specialinvoke $r13.<java.security.cert.CertPathBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("can\'t get trust anchor principal", null);

        throw $r13;

     label08:
        $r6 = null;

        goto label03;

     label09:
        $r14 = virtualinvoke $r6.<java.security.cert.TrustAnchor: java.lang.String getCAName()>();

        if $r14 == null goto label14;

        $r15 = virtualinvoke $r6.<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()>();

        if $r15 == null goto label14;

     label10:
        $r16 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r3 = new javax.security.auth.x500.X500Principal;

        $r14 = virtualinvoke $r6.<java.security.cert.TrustAnchor: java.lang.String getCAName()>();

        specialinvoke $r3.<javax.security.auth.x500.X500Principal: void <init>(java.lang.String)>($r14);

        $z0 = virtualinvoke $r16.<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label12;

        $r7 = virtualinvoke $r6.<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()>();

     label11:
        goto label03;

     label12:
        $r6 = null;

        goto label03;

     label13:
        $r17 := @caughtexception;

        $r6 = null;

        goto label03;

     label14:
        $r6 = null;

        goto label03;

     label15:
        if $r6 != null goto label16;

        if $r8 == null goto label17;

        $r13 = new java.security.cert.CertPathBuilderException;

        specialinvoke $r13.<java.security.cert.CertPathBuilderException: void <init>(java.lang.String,java.lang.Throwable)>("TrustAnchor found put certificate validation failed", $r8);

        throw $r13;

     label16:
        return $r6;

     label17:
        return $r6;

        catch java.io.IOException from label01 to label02 with label07;
        catch java.lang.Exception from label04 to label05 with label06;
        catch java.lang.IllegalArgumentException from label10 to label11 with label13;
    }
}
