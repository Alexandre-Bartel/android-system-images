class SQLite.DBDump extends java.lang.Object implements SQLite.Callback
{
    SQLite.Shell s;

    void <init>(SQLite.Shell, java.lang.String[])
    {
        SQLite.DBDump $r0;
        SQLite.Shell $r1;
        java.lang.String[] $r2, $r3;
        java.io.PrintWriter $r4;
        int $i0, $i1;
        SQLite.Database $r5;
        SQLite.Exception $r6, $r9;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        $r0 := @this: SQLite.DBDump;

        $r1 := @parameter0: SQLite.Shell;

        $r2 := @parameter1: java.lang.String[];

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<SQLite.DBDump: SQLite.Shell s> = $r1;

        $r4 = $r1.<SQLite.Shell: java.io.PrintWriter pw>;

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>("BEGIN TRANSACTION;");

        if $r2 == null goto label1;

        $i0 = lengthof $r2;

        if $i0 != 0 goto label5;

     label1:
        $r5 = $r1.<SQLite.Shell: SQLite.Database db>;

     label2:
        virtualinvoke $r5.<SQLite.Database: void exec(java.lang.String,SQLite.Callback)>("SELECT name, type, sql FROM sqlite_master WHERE type!=\'meta\' AND sql NOT NULL ORDER BY substr(type,2,1), name", $r0);

     label3:
        $r4 = $r1.<SQLite.Shell: java.io.PrintWriter pw>;

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>("COMMIT;");

        return;

     label4:
        $r6 := @caughtexception;

        $r4 = $r1.<SQLite.Shell: java.io.PrintWriter err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQL Error: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $r4 = $r1.<SQLite.Shell: java.io.PrintWriter err>;

        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

        goto label3;

     label5:
        $r3 = newarray (java.lang.String)[1];

        $i0 = 0;

     label6:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r8 = $r2[$i0];

        $r3[0] = $r8;

        $r5 = $r1.<SQLite.Shell: SQLite.Database db>;

     label7:
        virtualinvoke $r5.<SQLite.Database: void exec(java.lang.String,SQLite.Callback,java.lang.String[])>("SELECT name, type, sql FROM sqlite_master WHERE tbl_name LIKE \'%q\' AND type!=\'meta\'  AND sql NOT NULL  ORDER BY substr(type,2,1), name", $r0, $r3);

     label8:
        $i0 = $i0 + 1;

        goto label6;

     label9:
        $r9 := @caughtexception;

        $r4 = $r1.<SQLite.Shell: java.io.PrintWriter err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQL Error: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $r4 = $r1.<SQLite.Shell: java.io.PrintWriter err>;

        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

        goto label8;

        catch SQLite.Exception from label2 to label3 with label4;
        catch SQLite.Exception from label7 to label8 with label9;
    }

    public void columns(java.lang.String[])
    {
        SQLite.DBDump $r0;
        java.lang.String[] $r1;

        $r0 := @this: SQLite.DBDump;

        $r1 := @parameter0: java.lang.String[];

        return;
    }

    public boolean newrow(java.lang.String[])
    {
        SQLite.DBDump $r0;
        java.lang.String[] $r1, $r3;
        java.lang.String $r2, $r11;
        java.lang.StringBuffer $r4;
        int $i0, $i1;
        SQLite.Shell $r5;
        java.io.PrintWriter $r6;
        java.lang.StringBuilder $r7;
        java.lang.Object $r8;
        SQLite.Database $r9;
        boolean $z0;
        SQLite.TableResult $r10;
        java.util.Vector $r12;
        SQLite.Exception $r13;

        $r0 := @this: SQLite.DBDump;

        $r1 := @parameter0: java.lang.String[];

        $i0 = lengthof $r1;

        if $i0 == 3 goto label01;

        return 1;

     label01:
        $r5 = $r0.<SQLite.DBDump: SQLite.Shell s>;

        $r6 = $r5.<SQLite.Shell: java.io.PrintWriter pw>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r1[2];

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";");

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintWriter: void println(java.lang.String)>($r2);

        $r2 = $r1[1];

        $i0 = virtualinvoke $r2.<java.lang.String: int compareTo(java.lang.String)>("table");

        if $i0 != 0 goto label16;

        $r5 = $r0.<SQLite.DBDump: SQLite.Shell s>;

        $r8 = virtualinvoke $r5.<SQLite.Shell: java.lang.Object clone()>();

        $r5 = (SQLite.Shell) $r8;

        $r5.<SQLite.Shell: int mode> = 5;

        $r2 = $r1[0];

        virtualinvoke $r5.<SQLite.Shell: void set_table_name(java.lang.String)>($r2);

        $r3 = newarray (java.lang.String)[1];

        $r2 = $r1[0];

        $r3[0] = $r2;

        $r9 = $r5.<SQLite.Shell: SQLite.Database db>;

     label02:
        $z0 = virtualinvoke $r9.<SQLite.Database: boolean is3()>();

     label03:
        if $z0 == 0 goto label18;

     label04:
        $r9 = $r5.<SQLite.Shell: SQLite.Database db>;

        $r10 = virtualinvoke $r9.<SQLite.Database: SQLite.TableResult get_table(java.lang.String,java.lang.String[])>("PRAGMA table_info(\'%q\')", $r3);

     label05:
        if $r10 == null goto label17;

     label06:
        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r11 = "";

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SELECT ");

     label07:
        $i0 = 0;

     label08:
        $i1 = $r10.<SQLite.TableResult: int nrows>;

     label09:
        if $i0 >= $i1 goto label13;

        $r12 = $r10.<SQLite.TableResult: java.util.Vector rows>;

        $r8 = virtualinvoke $r12.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

     label10:
        $r1 = (java.lang.String[]) $r8;

        $r1 = (java.lang.String[]) $r1;

        $r2 = $r1[1];

     label11:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("quote(");

        $r2 = staticinvoke <SQLite.Shell: java.lang.String sql_quote_dbl(java.lang.String)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label12:
        $r11 = ",";

        $i0 = $i0 + 1;

        goto label08;

     label13:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from \'%q\'");

        $r2 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

     label14:
        $r5.<SQLite.Shell: int mode> = 6;

     label15:
        $r9 = $r5.<SQLite.Shell: SQLite.Database db>;

        virtualinvoke $r9.<SQLite.Database: void exec(java.lang.String,SQLite.Callback,java.lang.String[])>($r2, $r5, $r3);

     label16:
        return 0;

     label17:
        $r2 = "SELECT * from \'%q\'";

        goto label15;

     label18:
        $r9 = $r5.<SQLite.Shell: SQLite.Database db>;

        virtualinvoke $r9.<SQLite.Database: void exec(java.lang.String,SQLite.Callback,java.lang.String[])>("SELECT * from \'%q\'", $r5, $r3);

     label19:
        goto label16;

     label20:
        $r13 := @caughtexception;

        $r5 = $r0.<SQLite.DBDump: SQLite.Shell s>;

        $r6 = $r5.<SQLite.Shell: java.io.PrintWriter err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQL Error: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintWriter: void println(java.lang.String)>($r2);

        $r5 = $r0.<SQLite.DBDump: SQLite.Shell s>;

        $r6 = $r5.<SQLite.Shell: java.io.PrintWriter err>;

        virtualinvoke $r6.<java.io.PrintWriter: void flush()>();

        return 1;

        catch SQLite.Exception from label02 to label03 with label20;
        catch SQLite.Exception from label04 to label05 with label20;
        catch SQLite.Exception from label06 to label07 with label20;
        catch SQLite.Exception from label09 to label10 with label20;
        catch SQLite.Exception from label11 to label12 with label20;
        catch SQLite.Exception from label13 to label14 with label20;
        catch SQLite.Exception from label15 to label16 with label20;
        catch SQLite.Exception from label18 to label19 with label20;
    }

    public void types(java.lang.String[])
    {
        SQLite.DBDump $r0;
        java.lang.String[] $r1;

        $r0 := @this: SQLite.DBDump;

        $r1 := @parameter0: java.lang.String[];

        return;
    }
}
