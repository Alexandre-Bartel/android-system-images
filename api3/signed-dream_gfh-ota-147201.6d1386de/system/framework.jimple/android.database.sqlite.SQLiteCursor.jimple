public class android.database.sqlite.SQLiteCursor extends android.database.AbstractWindowedCursor
{
    static final int NO_COUNT;
    static final java.lang.String TAG;
    private java.util.Map mColumnNameMap;
    private java.lang.String[] mColumns;
    private int mCount;
    private int mCursorState;
    private android.database.sqlite.SQLiteDatabase mDatabase;
    private android.database.sqlite.SQLiteCursorDriver mDriver;
    private java.lang.String mEditTable;
    private int mInitialRead;
    private java.util.concurrent.locks.ReentrantLock mLock;
    private int mMaxRead;
    protected android.database.sqlite.SQLiteCursor$MainThreadNotificationHandler mNotificationHandler;
    private boolean mPendingData;
    private android.database.sqlite.SQLiteQuery mQuery;
    private java.lang.StackTraceElement[] mStackTraceElements;

    public void <init>(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteCursorDriver, java.lang.String, android.database.sqlite.SQLiteQuery)
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        android.database.sqlite.SQLiteCursorDriver $r2;
        java.lang.String $r3, $r6;
        android.database.sqlite.SQLiteQuery $r4;
        int $i0, $i1;
        java.lang.String[] $r5;
        boolean $z0;
        java.lang.Throwable $r7;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: android.database.sqlite.SQLiteCursorDriver;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: android.database.sqlite.SQLiteQuery;

        specialinvoke $r0.<android.database.AbstractWindowedCursor: void <init>()>();

        $r0.<android.database.sqlite.SQLiteCursor: int mCount> = -1;

        $r0.<android.database.sqlite.SQLiteCursor: int mMaxRead> = 2147483647;

        $r0.<android.database.sqlite.SQLiteCursor: int mInitialRead> = 2147483647;

        $r0.<android.database.sqlite.SQLiteCursor: int mCursorState> = 0;

        $r0.<android.database.sqlite.SQLiteCursor: java.util.concurrent.locks.ReentrantLock mLock> = null;

        $r0.<android.database.sqlite.SQLiteCursor: boolean mPendingData> = 0;

        $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase> = $r1;

        $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver> = $r2;

        $r0.<android.database.sqlite.SQLiteCursor: java.lang.String mEditTable> = $r3;

        $r0.<android.database.sqlite.SQLiteCursor: java.util.Map mColumnNameMap> = null;

        $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery> = $r4;

     label1:
        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void lock()>();

        $r4 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        $i0 = virtualinvoke $r4.<android.database.sqlite.SQLiteQuery: int columnCountLocked()>();

        $r5 = newarray (java.lang.String)[$i0];

        $r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns> = $r5;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        $r4 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        $r3 = virtualinvoke $r4.<android.database.sqlite.SQLiteQuery: java.lang.String columnNameLocked(int)>($i1);

        $r5 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns>;

        $r5[$i1] = $r3;

        $r6 = "_id";

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label4;

        $r0.<android.database.AbstractCursor: int mRowIdColumnIndex> = $i1;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return;

     label6:
        $r7 := @caughtexception;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
    }

    static boolean access$002(android.database.sqlite.SQLiteCursor, boolean)
    {
        android.database.sqlite.SQLiteCursor $r0;
        boolean $z0;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        $z0 := @parameter1: boolean;

        $r0.<android.database.sqlite.SQLiteCursor: boolean mPendingData> = $z0;

        return $z0;
    }

    static android.database.CursorWindow access$100(android.database.sqlite.SQLiteCursor)
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.CursorWindow r1;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        return r1;
    }

    static java.util.concurrent.locks.ReentrantLock access$200(android.database.sqlite.SQLiteCursor)
    {
        android.database.sqlite.SQLiteCursor $r0;
        java.util.concurrent.locks.ReentrantLock r1;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        r1 = $r0.<android.database.sqlite.SQLiteCursor: java.util.concurrent.locks.ReentrantLock mLock>;

        return r1;
    }

    static int access$300(android.database.sqlite.SQLiteCursor)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int i0;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        i0 = $r0.<android.database.sqlite.SQLiteCursor: int mCursorState>;

        return i0;
    }

    static int access$400(android.database.sqlite.SQLiteCursor)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int i0;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        i0 = $r0.<android.database.sqlite.SQLiteCursor: int mMaxRead>;

        return i0;
    }

    static int access$500(android.database.sqlite.SQLiteCursor)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int i0;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        i0 = $r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        return i0;
    }

    static int access$502(android.database.sqlite.SQLiteCursor, int)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int $i0;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        $i0 := @parameter1: int;

        $r0.<android.database.sqlite.SQLiteCursor: int mCount> = $i0;

        return $i0;
    }

    static int access$512(android.database.sqlite.SQLiteCursor, int)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int $i0, $i1;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        $i0 := @parameter1: int;

        $i1 = $r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        $i0 = $i1 + $i0;

        $r0.<android.database.sqlite.SQLiteCursor: int mCount> = $i0;

        return $i0;
    }

    static android.database.sqlite.SQLiteQuery access$600(android.database.sqlite.SQLiteCursor)
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.sqlite.SQLiteQuery r1;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        r1 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        return r1;
    }

    static void access$700(android.database.sqlite.SQLiteCursor)
    {
        android.database.sqlite.SQLiteCursor $r0;

        $r0 := @parameter0: android.database.sqlite.SQLiteCursor;

        virtualinvoke $r0.<android.database.AbstractCursor: void notifyDataSetChange()>();

        return;
    }

    private void deactivateCommon()
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.CursorWindow $r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r0.<android.database.sqlite.SQLiteCursor: int mCursorState> = 0;

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        virtualinvoke $r1.<android.database.CursorWindow: void close()>();

        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = null;

        return;

     label1:
        return;
    }

    private void fillWindow(int)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int $i0, $i1;
        java.lang.Thread $r1;
        android.database.CursorWindow $r2;
        android.database.sqlite.SQLiteQuery $r3;
        android.database.sqlite.SQLiteCursor$QueryThread $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $i0 := @parameter0: int;

        $r2 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        if $r2 != null goto label2;

        $r2 = new android.database.CursorWindow;

        specialinvoke $r2.<android.database.CursorWindow: void <init>(boolean)>(1);

        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = $r2;

     label1:
        $r2 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        virtualinvoke $r2.<android.database.CursorWindow: void setStartPosition(int)>($i0);

        $r3 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        $r2 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        $i1 = $r0.<android.database.sqlite.SQLiteCursor: int mInitialRead>;

        $i1 = virtualinvoke $r3.<android.database.sqlite.SQLiteQuery: int fillWindow(android.database.CursorWindow,int,int)>($r2, $i1, 0);

        $r0.<android.database.sqlite.SQLiteCursor: int mCount> = $i1;

        $i1 = $r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        if $i1 != -1 goto label6;

        $i1 = $r0.<android.database.sqlite.SQLiteCursor: int mInitialRead>;

        $i0 = $i1 + $i0;

        $r0.<android.database.sqlite.SQLiteCursor: int mCount> = $i0;

        $r1 = new java.lang.Thread;

        $r4 = new android.database.sqlite.SQLiteCursor$QueryThread;

        $i0 = $r0.<android.database.sqlite.SQLiteCursor: int mCursorState>;

        specialinvoke $r4.<android.database.sqlite.SQLiteCursor$QueryThread: void <init>(android.database.sqlite.SQLiteCursor,int)>($r0, $i0);

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>($r4, "query thread");

        virtualinvoke $r1.<java.lang.Thread: void start()>();

        return;

     label2:
        $i1 = $r0.<android.database.sqlite.SQLiteCursor: int mCursorState>;

        $i1 = $i1 + 1;

        $r0.<android.database.sqlite.SQLiteCursor: int mCursorState> = $i1;

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadLock()>();

     label3:
        $r2 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        virtualinvoke $r2.<android.database.CursorWindow: void clear()>();

     label4:
        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadUnlock()>();

        goto label1;

     label5:
        $r5 := @caughtexception;

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadUnlock()>();

        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void queryThreadLock()
    {
        android.database.sqlite.SQLiteCursor $r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: java.util.concurrent.locks.ReentrantLock mLock>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        return;

     label1:
        return;
    }

    private void queryThreadUnlock()
    {
        android.database.sqlite.SQLiteCursor $r0;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: java.util.concurrent.locks.ReentrantLock mLock>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        return;

     label1:
        return;
    }

    public void close()
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.sqlite.SQLiteQuery $r1;
        android.database.sqlite.SQLiteCursorDriver $r2;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        specialinvoke $r0.<android.database.AbstractCursor: void close()>();

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void deactivateCommon()>();

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteQuery: void close()>();

        $r2 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver>;

        interfaceinvoke $r2.<android.database.sqlite.SQLiteCursorDriver: void cursorClosed()>();

        return;
    }

    public boolean commitUpdates(java.util.Map)
    {
        android.database.sqlite.SQLiteCursor $r0;
        java.lang.Object[] $r1;
        java.lang.StringBuilder $r2, $r17;
        java.util.Map $r3;
        boolean $z0;
        java.util.HashMap $r4, $r5;
        int $i0;
        android.database.sqlite.SQLiteDatabase $r6;
        java.util.Set $r7;
        java.util.Iterator $r8, $r16;
        java.lang.Object $r9;
        java.util.Map$Entry $r10;
        java.lang.Long $r11;
        java.lang.IllegalStateException $r12;
        java.lang.String $r13;
        java.lang.Throwable $r14, $r15;
        long $l1;
        java.lang.String[] $r18;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r3 := @parameter0: java.util.Map;

        $z0 = virtualinvoke $r0.<android.database.sqlite.SQLiteCursor: boolean supportsUpdates()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Cursor", "commitUpdates not supported on this cursor, did you include the _id column?");

        return 0;

     label01:
        $r4 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        entermonitor $r4;

        if $r3 == null goto label03;

     label02:
        $r5 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        virtualinvoke $r5.<java.util.HashMap: void putAll(java.util.Map)>($r3);

     label03:
        $r5 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        $i0 = virtualinvoke $r5.<java.util.HashMap: int size()>();

        if $i0 != 0 goto label05;

        exitmonitor $r4;

     label04:
        return 1;

     label05:
        $r6 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label06:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(128);

        $r5 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        $r7 = virtualinvoke $r5.<java.util.HashMap: java.util.Set entrySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label17;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.util.Map$Entry) $r9;

        $r9 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r3 = (java.util.Map) $r9;

        $r9 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = (java.lang.Long) $r9;

        if $r11 == null goto label08;

        if $r3 != null goto label13;

     label08:
        $r12 = new java.lang.IllegalStateException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null rowId or values found! rowId = ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", values = ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label09:
        $r14 := @caughtexception;

     label10:
        $r6 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r14;

     label11:
        $r15 := @caughtexception;

        exitmonitor $r4;

     label12:
        throw $r15;

     label13:
        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i0 == 0 goto label07;

        $l1 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $r7 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r16 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>(0);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ");

        $r13 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String mEditTable>;

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ");

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $r1 = newarray (java.lang.Object)[$i0];

        $i0 = 0;

     label14:
        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r9 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.util.Map$Entry) $r9;

        $r9 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r13 = (java.lang.String) $r9;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r9 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r1[$i0] = $r9;

        $z0 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label15:
        $i0 = $i0 + 1;

        goto label14;

     label16:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE ");

        $r18 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns>;

        $i0 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        $r13 = $r18[$i0];

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r17 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r13 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r6 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>($r13, $r1);

        $r6 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r13 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String mEditTable>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void rowUpdated(java.lang.String,long)>($r13, $l1);

        goto label07;

     label17:
        $r6 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label18:
        $r6 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        $r5 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        virtualinvoke $r5.<java.util.HashMap: void clear()>();

        exitmonitor $r4;

     label19:
        virtualinvoke $r0.<android.database.AbstractCursor: void onChange(boolean)>(1);

        return 1;

        catch java.lang.Throwable from label02 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label09 with label09;
        catch java.lang.Throwable from label10 to label12 with label11;
        catch java.lang.Throwable from label13 to label18 with label09;
        catch java.lang.Throwable from label18 to label19 with label11;
    }

    public void deactivate()
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.sqlite.SQLiteCursorDriver $r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        specialinvoke $r0.<android.database.AbstractCursor: void deactivate()>();

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void deactivateCommon()>();

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver>;

        interfaceinvoke $r1.<android.database.sqlite.SQLiteCursorDriver: void cursorDeactivated()>();

        return;
    }

    public boolean deleteRow()
    {
        android.database.sqlite.SQLiteCursor $r0;
        int $i0;
        java.lang.Long $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String $r3, $r6, $r7;
        java.lang.StringBuilder $r4;
        java.lang.String[] $r5;
        boolean $z0;
        android.database.SQLException $r8;
        java.lang.Throwable $r9;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        virtualinvoke $r0.<android.database.AbstractWindowedCursor: void checkPosition()>();

        $i0 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

        if $i0 == -1 goto label01;

        $r1 = $r0.<android.database.AbstractCursor: java.lang.Long mCurrentRowID>;

        if $r1 != null goto label02;

     label01:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Cursor", "Could not delete row because either the row ID column is not available or ithas not been read.");

        return 0;

     label02:
        $r2 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label03:
        $r2 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        $r3 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String mEditTable>;

        $r4 = new java.lang.StringBuilder;

     label04:
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

     label05:
        $r5 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns>;

        $i0 = $r0.<android.database.AbstractCursor: int mRowIdColumnIndex>;

     label06:
        $r6 = $r5[$i0];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=?");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        $r5 = newarray (java.lang.String)[1];

     label08:
        $r1 = $r0.<android.database.AbstractCursor: java.lang.Long mCurrentRowID>;

        $r7 = virtualinvoke $r1.<java.lang.Long: java.lang.String toString()>();

        $r5[0] = $r7;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r3, $r6, $r5);

     label09:
        $z0 = 1;

     label10:
        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        virtualinvoke $r0.<android.database.sqlite.SQLiteCursor: boolean requery()>();

        virtualinvoke $r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

     label11:
        $r2 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        if $z0 == 0 goto label14;

        virtualinvoke $r0.<android.database.AbstractCursor: void onChange(boolean)>(1);

        return 1;

     label12:
        $r8 := @caughtexception;

        $z0 = 0;

        goto label10;

     label13:
        $r9 := @caughtexception;

        $r2 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r9;

     label14:
        return 0;

        catch android.database.SQLException from label04 to label05 with label12;
        catch android.database.SQLException from label06 to label07 with label12;
        catch android.database.SQLException from label08 to label09 with label12;
        catch java.lang.Throwable from label03 to label09 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
    }

    protected void finalize()
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.CursorWindow $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.IllegalStateException $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

     label1:
        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        if $r1 == null goto label3;

        virtualinvoke $r0.<android.database.sqlite.SQLiteCursor: void close()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finalizing cursor ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on ");

        $r3 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String mEditTable>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that has not been deactivated or closed");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.database.sqlite.SQLiteDebug: void notifyActiveCursorFinalized()>();

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label2:
        $r5 := @caughtexception;

        specialinvoke $r0.<android.database.AbstractCursor: void finalize()>();

        throw $r5;

     label3:
        specialinvoke $r0.<android.database.AbstractCursor: void finalize()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public int getColumnIndex(java.lang.String)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        java.lang.Exception $r2;
        java.util.HashMap $r3;
        java.lang.String $r4, $r6;
        java.util.Map $r5;
        java.lang.Integer $r7;
        java.lang.StringBuilder $r8;
        java.lang.Object $r9;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r4 := @parameter0: java.lang.String;

        $r5 = $r0.<android.database.sqlite.SQLiteCursor: java.util.Map mColumnNameMap>;

        if $r5 != null goto label3;

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns>;

        $i0 = lengthof $r1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int,float)>($i0, 1.0F);

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r6 = $r1[$i1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r0.<android.database.sqlite.SQLiteCursor: java.util.Map mColumnNameMap> = $r3;

     label3:
        $i0 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 == -1 goto label4;

        $r2 = new java.lang.Exception;

        specialinvoke $r2.<java.lang.Exception: void <init>()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requesting column name with table name -- ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Cursor", $r6, $r2);

        $i0 = $i0 + 1;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0);

     label4:
        $r5 = $r0.<android.database.sqlite.SQLiteCursor: java.util.Map mColumnNameMap>;

        $r9 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (java.lang.Integer) $r9;

        if $r7 == null goto label5;

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        return $i0;

     label5:
        return -1;
    }

    public java.lang.String[] getColumnNames()
    {
        android.database.sqlite.SQLiteCursor $r0;
        java.lang.String[] r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        r1 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String[] mColumns>;

        return r1;
    }

    public int getCount()
    {
        android.database.sqlite.SQLiteCursor $r0;
        int $i0;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $i0 = $r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        if $i0 != -1 goto label1;

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void fillWindow(int)>(0);

     label1:
        $i0 = $r0.<android.database.sqlite.SQLiteCursor: int mCount>;

        return $i0;
    }

    public android.database.sqlite.SQLiteDatabase getDatabase()
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.sqlite.SQLiteDatabase r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        r1 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        return r1;
    }

    public boolean onMove(int, int)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int $i0, $i1, $i2;
        android.database.CursorWindow $r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        $i0 = virtualinvoke $r1.<android.database.CursorWindow: int getStartPosition()>();

        if $i1 < $i0 goto label1;

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        $i0 = virtualinvoke $r1.<android.database.CursorWindow: int getStartPosition()>();

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        $i2 = virtualinvoke $r1.<android.database.CursorWindow: int getNumRows()>();

        $i0 = $i0 + $i2;

        if $i1 < $i0 goto label2;

     label1:
        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void fillWindow(int)>($i1);

     label2:
        return 1;
    }

    public void registerDataSetObserver(android.database.DataSetObserver)
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.DataSetObserver $r1;
        int $i0;
        android.database.sqlite.SQLiteCursor$MainThreadNotificationHandler $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r1 := @parameter0: android.database.DataSetObserver;

        specialinvoke $r0.<android.database.AbstractCursor: void registerDataSetObserver(android.database.DataSetObserver)>($r1);

        $i0 = $r0.<android.database.sqlite.SQLiteCursor: int mMaxRead>;

        if 2147483647 != $i0 goto label1;

        $i0 = $r0.<android.database.sqlite.SQLiteCursor: int mInitialRead>;

        if 2147483647 == $i0 goto label5;

     label1:
        $r2 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursor$MainThreadNotificationHandler mNotificationHandler>;

        if $r2 != null goto label6;

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadLock()>();

     label2:
        $r2 = new android.database.sqlite.SQLiteCursor$MainThreadNotificationHandler;

        specialinvoke $r2.<android.database.sqlite.SQLiteCursor$MainThreadNotificationHandler: void <init>(android.database.sqlite.SQLiteCursor)>($r0);

        $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursor$MainThreadNotificationHandler mNotificationHandler> = $r2;

        $z0 = $r0.<android.database.sqlite.SQLiteCursor: boolean mPendingData>;

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<android.database.AbstractCursor: void notifyDataSetChange()>();

        $r0.<android.database.sqlite.SQLiteCursor: boolean mPendingData> = 0;

     label3:
        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadUnlock()>();

        return;

     label4:
        $r3 := @caughtexception;

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadUnlock()>();

        throw $r3;

     label5:
        return;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean requery()
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        boolean $z0;
        android.database.CursorWindow $r2;
        android.database.sqlite.SQLiteCursorDriver $r3;
        int $i0;
        android.database.sqlite.SQLiteQuery $r4;
        java.lang.Throwable $r5, $r6;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean isClosed()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void lock()>();

     label2:
        $r2 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        if $r2 == null goto label3;

        $r2 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        virtualinvoke $r2.<android.database.CursorWindow: void clear()>();

     label3:
        $r0.<android.database.AbstractCursor: int mPos> = -1;

        $r3 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver>;

        interfaceinvoke $r3.<android.database.sqlite.SQLiteCursorDriver: void cursorRequeried(android.database.Cursor)>($r0);

        $r0.<android.database.sqlite.SQLiteCursor: int mCount> = -1;

        $i0 = $r0.<android.database.sqlite.SQLiteCursor: int mCursorState>;

        $i0 = $i0 + 1;

        $r0.<android.database.sqlite.SQLiteCursor: int mCursorState> = $i0;

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadLock()>();

     label4:
        $r4 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery mQuery>;

        virtualinvoke $r4.<android.database.sqlite.SQLiteQuery: void requery()>();

     label5:
        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadUnlock()>();

     label6:
        $r1 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        $z0 = specialinvoke $r0.<android.database.AbstractCursor: boolean requery()>();

        return $z0;

     label7:
        $r5 := @caughtexception;

     label8:
        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadUnlock()>();

        throw $r5;

     label9:
        $r6 := @caughtexception;

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label2 to label4 with label9;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public void setLoadStyle(int, int)
    {
        android.database.sqlite.SQLiteCursor $r0;
        int $i0, $i1;
        java.util.concurrent.locks.ReentrantLock $r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0.<android.database.sqlite.SQLiteCursor: int mMaxRead> = $i1;

        $r0.<android.database.sqlite.SQLiteCursor: int mInitialRead> = $i0;

        $r1 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(1);

        $r0.<android.database.sqlite.SQLiteCursor: java.util.concurrent.locks.ReentrantLock mLock> = $r1;

        return;
    }

    public void setSelectionArguments(java.lang.String[])
    {
        android.database.sqlite.SQLiteCursor $r0;
        java.lang.String[] $r1;
        android.database.sqlite.SQLiteCursorDriver $r2;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r1 := @parameter0: java.lang.String[];

        $r2 = $r0.<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteCursorDriver mDriver>;

        interfaceinvoke $r2.<android.database.sqlite.SQLiteCursorDriver: void setBindArguments(java.lang.String[])>($r1);

        return;
    }

    public void setWindow(android.database.CursorWindow)
    {
        android.database.sqlite.SQLiteCursor $r0;
        android.database.CursorWindow $r1, $r2;
        int $i0;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $r1 := @parameter0: android.database.CursorWindow;

        $r2 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        if $r2 == null goto label3;

        $i0 = $r0.<android.database.sqlite.SQLiteCursor: int mCursorState>;

        $i0 = $i0 + 1;

        $r0.<android.database.sqlite.SQLiteCursor: int mCursorState> = $i0;

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadLock()>();

     label1:
        $r2 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        virtualinvoke $r2.<android.database.CursorWindow: void close()>();

     label2:
        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadUnlock()>();

        $r0.<android.database.sqlite.SQLiteCursor: int mCount> = -1;

     label3:
        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = $r1;

        return;

     label4:
        $r3 := @caughtexception;

        specialinvoke $r0.<android.database.sqlite.SQLiteCursor: void queryThreadUnlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public boolean supportsUpdates()
    {
        android.database.sqlite.SQLiteCursor $r0;
        boolean $z0;
        java.lang.String $r1;

        $r0 := @this: android.database.sqlite.SQLiteCursor;

        $z0 = specialinvoke $r0.<android.database.AbstractCursor: boolean supportsUpdates()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<android.database.sqlite.SQLiteCursor: java.lang.String mEditTable>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <android.database.sqlite.SQLiteCursor: java.lang.String TAG> = "Cursor";

        <android.database.sqlite.SQLiteCursor: int NO_COUNT> = -1;

        return;
    }
}
