public abstract class android.opengl.Object3D extends java.lang.Object
{
    private float mBoundsMaxX;
    private float mBoundsMaxY;
    private float mBoundsMaxZ;
    private float mBoundsMinX;
    private float mBoundsMinY;
    private float mBoundsMinZ;
    private java.util.Map mGroups;
    private boolean mHasTexcoords;
    private java.util.Map mMaterials;
    private java.nio.IntBuffer mNormalBuffer;
    private java.nio.IntBuffer mTexcoordBuffer;
    private java.util.Map mTextures;
    private java.nio.IntBuffer mVertexBuffer;

    public void <init>()
    {
        android.opengl.Object3D $r0;

        $r0 := @this: android.opengl.Object3D;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.opengl.Object3D: boolean mHasTexcoords> = 0;

        $r0.<android.opengl.Object3D: float mBoundsMinX> = 3.4028235E38F;

        $r0.<android.opengl.Object3D: float mBoundsMaxX> = 1.4E-45F;

        $r0.<android.opengl.Object3D: float mBoundsMinY> = 3.4028235E38F;

        $r0.<android.opengl.Object3D: float mBoundsMaxY> = 1.4E-45F;

        $r0.<android.opengl.Object3D: float mBoundsMinZ> = 3.4028235E38F;

        $r0.<android.opengl.Object3D: float mBoundsMaxZ> = 1.4E-45F;

        specialinvoke $r0.<android.opengl.Object3D: void reset()>();

        return;
    }

    private void reset()
    {
        android.opengl.Object3D $r0;
        java.util.HashMap $r1;

        $r0 := @this: android.opengl.Object3D;

        $r0.<android.opengl.Object3D: java.nio.IntBuffer mTexcoordBuffer> = null;

        $r0.<android.opengl.Object3D: java.nio.IntBuffer mNormalBuffer> = null;

        $r0.<android.opengl.Object3D: java.nio.IntBuffer mVertexBuffer> = null;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<android.opengl.Object3D: java.util.Map mGroups> = $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<android.opengl.Object3D: java.util.Map mMaterials> = $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<android.opengl.Object3D: java.util.Map mTextures> = $r1;

        return;
    }

    private static void verifyByte(java.io.DataInputStream, int) throws java.io.IOException
    {
        java.io.DataInputStream $r0;
        int $i0, $i1;
        java.lang.RuntimeException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.io.DataInputStream;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<java.io.FilterInputStream: int read()>();

        $i1 = $i1 & 255;

        if $i1 == $i0 goto label1;

        $r1 = new java.lang.RuntimeException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad byte: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (expected ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        return;
    }

    public void draw(javax.microedition.khronos.opengles.GL10)
    {
        javax.microedition.khronos.opengles.GL10 $r0;
        android.opengl.Object3D $r1;
        java.util.Map $r2;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.opengl.Group $r6;

        $r1 := @this: android.opengl.Object3D;

        $r0 := @parameter0: javax.microedition.khronos.opengles.GL10;

        $r2 = $r1.<android.opengl.Object3D: java.util.Map mGroups>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.opengl.Group) $r5;

        virtualinvoke $r6.<android.opengl.Group: void draw(javax.microedition.khronos.opengles.GL10)>($r0);

        goto label1;

     label2:
        return;
    }

    public float getBoundsMaxX()
    {
        android.opengl.Object3D $r0;
        float f0;

        $r0 := @this: android.opengl.Object3D;

        f0 = $r0.<android.opengl.Object3D: float mBoundsMaxX>;

        return f0;
    }

    public float getBoundsMaxY()
    {
        android.opengl.Object3D $r0;
        float f0;

        $r0 := @this: android.opengl.Object3D;

        f0 = $r0.<android.opengl.Object3D: float mBoundsMaxY>;

        return f0;
    }

    public float getBoundsMaxZ()
    {
        android.opengl.Object3D $r0;
        float f0;

        $r0 := @this: android.opengl.Object3D;

        f0 = $r0.<android.opengl.Object3D: float mBoundsMaxZ>;

        return f0;
    }

    public float getBoundsMinX()
    {
        android.opengl.Object3D $r0;
        float f0;

        $r0 := @this: android.opengl.Object3D;

        f0 = $r0.<android.opengl.Object3D: float mBoundsMinX>;

        return f0;
    }

    public float getBoundsMinY()
    {
        android.opengl.Object3D $r0;
        float f0;

        $r0 := @this: android.opengl.Object3D;

        f0 = $r0.<android.opengl.Object3D: float mBoundsMinY>;

        return f0;
    }

    public float getBoundsMinZ()
    {
        android.opengl.Object3D $r0;
        float f0;

        $r0 := @this: android.opengl.Object3D;

        f0 = $r0.<android.opengl.Object3D: float mBoundsMinZ>;

        return f0;
    }

    public android.opengl.Material getMaterial(java.lang.String)
    {
        android.opengl.Object3D $r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        android.opengl.Material $r4;

        $r0 := @this: android.opengl.Object3D;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.opengl.Object3D: java.util.Map mMaterials>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (android.opengl.Material) $r3;

        return $r4;
    }

    public java.nio.IntBuffer getNormalBuffer()
    {
        android.opengl.Object3D $r0;
        java.nio.IntBuffer r1;

        $r0 := @this: android.opengl.Object3D;

        r1 = $r0.<android.opengl.Object3D: java.nio.IntBuffer mNormalBuffer>;

        return r1;
    }

    public int getNumTriangles()
    {
        android.opengl.Object3D $r0;
        int $i0, $i1;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.opengl.Group $r5;

        $r0 := @this: android.opengl.Object3D;

        $i0 = 0;

        $r1 = $r0.<android.opengl.Object3D: java.util.Map mGroups>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.opengl.Group) $r4;

        $i1 = virtualinvoke $r5.<android.opengl.Group: int getNumTriangles()>();

        $i0 = $i0 + $i1;

        goto label1;

     label2:
        return $i0;
    }

    public java.nio.IntBuffer getTexcoordBuffer()
    {
        android.opengl.Object3D $r0;
        java.nio.IntBuffer r1;

        $r0 := @this: android.opengl.Object3D;

        r1 = $r0.<android.opengl.Object3D: java.nio.IntBuffer mTexcoordBuffer>;

        return r1;
    }

    public android.opengl.Texture getTexture(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        android.opengl.Object3D $r3;
        android.opengl.Texture $r4;

        $r3 := @this: android.opengl.Object3D;

        $r0 := @parameter0: java.lang.String;

        $r1 = $r3.<android.opengl.Object3D: java.util.Map mTextures>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (android.opengl.Texture) $r2;

        return $r4;
    }

    public java.nio.IntBuffer getVertexBuffer()
    {
        android.opengl.Object3D $r0;
        java.nio.IntBuffer r1;

        $r0 := @this: android.opengl.Object3D;

        r1 = $r0.<android.opengl.Object3D: java.nio.IntBuffer mVertexBuffer>;

        return r1;
    }

    public boolean hasTexcoords()
    {
        android.opengl.Object3D $r0;
        boolean z0;

        $r0 := @this: android.opengl.Object3D;

        z0 = $r0.<android.opengl.Object3D: boolean mHasTexcoords>;

        return z0;
    }

    public void load(java.lang.String) throws java.io.IOException
    {
        android.opengl.Object3D $r0;
        java.lang.String $r1;
        java.io.DataInputStream $r2;
        android.opengl.Group $r3;
        int $i0, $i5, $i6, $i7;
        android.opengl.Material $r4;
        byte $b1, $b2, $b3, $b4;
        java.io.InputStream $r5;
        float $f0;
        boolean $z0;
        byte[] $r6;
        java.nio.ByteOrder $r7, $r8;
        java.nio.ByteBuffer $r9, $r10;
        java.nio.IntBuffer $r11;
        java.util.Map $r12;

        $r0 := @this: android.opengl.Object3D;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<android.opengl.Object3D: void reset()>();

        $r2 = new java.io.DataInputStream;

        $r5 = virtualinvoke $r0.<android.opengl.Object3D: java.io.InputStream readFile(java.lang.String)>($r1);

        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r5);

        staticinvoke <android.opengl.Object3D: void verifyByte(java.io.DataInputStream,int)>($r2, 231);

        staticinvoke <android.opengl.Object3D: void verifyByte(java.io.DataInputStream,int)>($r2, 108);

        staticinvoke <android.opengl.Object3D: void verifyByte(java.io.DataInputStream,int)>($r2, 101);

        staticinvoke <android.opengl.Object3D: void verifyByte(java.io.DataInputStream,int)>($r2, 115);

        $i5 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();

        $f0 = virtualinvoke $r2.<java.io.DataInputStream: float readFloat()>();

        $r0.<android.opengl.Object3D: float mBoundsMinX> = $f0;

        $f0 = virtualinvoke $r2.<java.io.DataInputStream: float readFloat()>();

        $r0.<android.opengl.Object3D: float mBoundsMaxX> = $f0;

        $f0 = virtualinvoke $r2.<java.io.DataInputStream: float readFloat()>();

        $r0.<android.opengl.Object3D: float mBoundsMinY> = $f0;

        $f0 = virtualinvoke $r2.<java.io.DataInputStream: float readFloat()>();

        $r0.<android.opengl.Object3D: float mBoundsMaxY> = $f0;

        $f0 = virtualinvoke $r2.<java.io.DataInputStream: float readFloat()>();

        $r0.<android.opengl.Object3D: float mBoundsMinZ> = $f0;

        $f0 = virtualinvoke $r2.<java.io.DataInputStream: float readFloat()>();

        $r0.<android.opengl.Object3D: float mBoundsMaxZ> = $f0;

        $i0 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();

        if $i0 != 1 goto label05;

        $z0 = 1;

     label01:
        $r0.<android.opengl.Object3D: boolean mHasTexcoords> = $z0;

        $z0 = $r0.<android.opengl.Object3D: boolean mHasTexcoords>;

        if $z0 == 0 goto label06;

     label02:
        $i0 = $i5 * 4;

        $z0 = $r0.<android.opengl.Object3D: boolean mHasTexcoords>;

        if $z0 == 0 goto label07;

        $b1 = 8;

     label03:
        $i0 = $i0 * $b1;

        $r6 = newarray (byte)[$i0];

        $i6 = 0;

     label04:
        if $i6 >= $i0 goto label08;

        $i7 = $i0 - $i6;

        $i7 = virtualinvoke $r2.<java.io.DataInputStream: int read(byte[],int,int)>($r6, $i6, $i7);

        $i6 = $i6 + $i7;

        goto label04;

     label05:
        $z0 = 0;

        goto label01;

     label06:
        goto label02;

     label07:
        $b1 = 6;

        goto label03;

     label08:
        $r7 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r8 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        if $r7 != $r8 goto label10;

        $i6 = 0;

     label09:
        if $i6 >= $i0 goto label10;

        $b1 = $r6[$i6];

        $i7 = $i6 + 1;

        $b2 = $r6[$i7];

        $i7 = $i6 + 2;

        $b3 = $r6[$i7];

        $i7 = $i6 + 3;

        $b4 = $r6[$i7];

        $r6[$i6] = $b4;

        $i7 = $i6 + 1;

        $r6[$i7] = $b3;

        $i7 = $i6 + 2;

        $r6[$i7] = $b2;

        $i7 = $i6 + 3;

        $r6[$i7] = $b1;

        $i6 = $i6 + 4;

        goto label09;

     label10:
        $r9 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i0);

        $r7 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r7);

        virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r6);

        virtualinvoke $r9.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        $i0 = $i5 * 12;

        virtualinvoke $r9.<java.nio.Buffer: java.nio.Buffer limit(int)>($i0);

        $r10 = virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r11 = virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>();

        $r0.<android.opengl.Object3D: java.nio.IntBuffer mVertexBuffer> = $r11;

        $r11 = $r0.<android.opengl.Object3D: java.nio.IntBuffer mVertexBuffer>;

        virtualinvoke $r11.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        $z0 = $r0.<android.opengl.Object3D: boolean mHasTexcoords>;

        if $z0 == 0 goto label11;

        $i0 = virtualinvoke $r9.<java.nio.Buffer: int limit()>();

        virtualinvoke $r9.<java.nio.Buffer: java.nio.Buffer position(int)>($i0);

        $i0 = virtualinvoke $r9.<java.nio.Buffer: int position()>();

        $i6 = $i5 * 8;

        $i0 = $i0 + $i6;

        virtualinvoke $r9.<java.nio.Buffer: java.nio.Buffer limit(int)>($i0);

        $r10 = virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r11 = virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>();

        $r0.<android.opengl.Object3D: java.nio.IntBuffer mTexcoordBuffer> = $r11;

        $r11 = $r0.<android.opengl.Object3D: java.nio.IntBuffer mTexcoordBuffer>;

        virtualinvoke $r11.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

     label11:
        $i0 = virtualinvoke $r9.<java.nio.Buffer: int limit()>();

        virtualinvoke $r9.<java.nio.Buffer: java.nio.Buffer position(int)>($i0);

        $i0 = virtualinvoke $r9.<java.nio.Buffer: int position()>();

        $i5 = $i5 * 12;

        $i5 = $i0 + $i5;

        virtualinvoke $r9.<java.nio.Buffer: java.nio.Buffer limit(int)>($i5);

        $r9 = virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $r11 = virtualinvoke $r9.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>();

        $r0.<android.opengl.Object3D: java.nio.IntBuffer mNormalBuffer> = $r11;

        $r11 = $r0.<android.opengl.Object3D: java.nio.IntBuffer mNormalBuffer>;

        virtualinvoke $r11.<java.nio.Buffer: java.nio.Buffer position(int)>(0);

        $i5 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();

        $i0 = 0;

     label12:
        if $i0 >= $i5 goto label13;

        $r4 = new android.opengl.Material;

        specialinvoke $r4.<android.opengl.Material: void <init>(android.opengl.Object3D)>($r0);

        virtualinvoke $r4.<android.opengl.Material: void load(java.io.DataInputStream)>($r2);

        $r12 = $r0.<android.opengl.Object3D: java.util.Map mMaterials>;

        $r1 = virtualinvoke $r4.<android.opengl.Material: java.lang.String getName()>();

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        $i0 = $i0 + 1;

        goto label12;

     label13:
        $i5 = virtualinvoke $r2.<java.io.DataInputStream: int readInt()>();

        $i0 = 0;

     label14:
        if $i0 >= $i5 goto label15;

        $r3 = new android.opengl.Group;

        specialinvoke $r3.<android.opengl.Group: void <init>(android.opengl.Object3D)>($r0);

        virtualinvoke $r3.<android.opengl.Group: void load(java.io.DataInputStream)>($r2);

        $r12 = $r0.<android.opengl.Object3D: java.util.Map mGroups>;

        $r1 = virtualinvoke $r3.<android.opengl.Group: java.lang.String getName()>();

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        $i0 = $i0 + 1;

        goto label14;

     label15:
        return;
    }

    public void loadTexture(java.lang.String) throws java.io.IOException
    {
        android.opengl.Object3D $r0;
        java.lang.String $r1, $r4;
        android.opengl.Texture $r2;
        java.lang.StringBuilder $r3;
        java.io.InputStream $r5;
        java.util.Map $r6;

        $r0 := @this: android.opengl.Object3D;

        $r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".raw");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = virtualinvoke $r0.<android.opengl.Object3D: java.io.InputStream readFile(java.lang.String)>($r4);

        $r2 = new android.opengl.Texture;

        specialinvoke $r2.<android.opengl.Texture: void <init>(java.io.InputStream)>($r5);

        $r6 = $r0.<android.opengl.Object3D: java.util.Map mTextures>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public abstract java.io.InputStream readFile(java.lang.String) throws java.io.IOException;
}
