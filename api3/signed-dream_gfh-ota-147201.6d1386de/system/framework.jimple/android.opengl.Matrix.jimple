public class android.opengl.Matrix extends java.lang.Object
{

    public void <init>()
    {
        android.opengl.Matrix $r0;

        $r0 := @this: android.opengl.Matrix;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void frustumM(float[], int, float, float, float, float, float, float)
    {
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        float[] $r0;
        int $i0, $i2;
        byte $b1;
        java.lang.IllegalArgumentException r2;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $f2 := @parameter2: float;

        $f3 := @parameter3: float;

        $f4 := @parameter4: float;

        $f5 := @parameter5: float;

        $f6 := @parameter6: float;

        $f0 := @parameter7: float;

        $b1 = $f2 cmpl $f3;

        if $b1 != 0 goto label1;

        r2 = new java.lang.IllegalArgumentException;

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("left == right");

        throw r2;

     label1:
        $b1 = $f5 cmpl $f4;

        if $b1 != 0 goto label2;

        r2 = new java.lang.IllegalArgumentException;

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("top == bottom");

        throw r2;

     label2:
        $b1 = $f6 cmpl $f0;

        if $b1 != 0 goto label3;

        r2 = new java.lang.IllegalArgumentException;

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near == far");

        throw r2;

     label3:
        $b1 = $f6 cmpg 0.0F;

        if $b1 > 0 goto label4;

        r2 = new java.lang.IllegalArgumentException;

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near <= 0.0f");

        throw r2;

     label4:
        $b1 = $f0 cmpg 0.0F;

        if $b1 > 0 goto label5;

        r2 = new java.lang.IllegalArgumentException;

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("far <= 0.0f");

        throw r2;

     label5:
        $f7 = $f3 - $f2;

        $f1 = 1.0F / $f7;

        $f7 = $f5 - $f4;

        $f8 = 1.0F / $f7;

        $f7 = $f6 - $f0;

        $f9 = 1.0F / $f7;

        $f7 = $f6 * $f1;

        $f7 = 2.0F * $f7;

        $f10 = $f6 * $f8;

        $f10 = 2.0F * $f10;

        $f2 = $f2 + $f3;

        $f2 = $f2 * $f1;

        $f2 = $f2 * 2.0F;

        $f3 = $f5 + $f4;

        $f3 = $f3 * $f8;

        $f4 = $f0 + $f6;

        $f4 = $f4 * $f9;

        $f5 = $f6 * $f0;

        $f5 = $f5 * $f9;

        $f5 = 2.0F * $f5;

        $i2 = $i0 + 0;

        $r0[$i2] = $f7;

        $i2 = $i0 + 5;

        $r0[$i2] = $f10;

        $i2 = $i0 + 8;

        $r0[$i2] = $f2;

        $i2 = $i0 + 9;

        $r0[$i2] = $f3;

        $i2 = $i0 + 10;

        $r0[$i2] = $f4;

        $i2 = $i0 + 14;

        $r0[$i2] = $f5;

        $i2 = $i0 + 11;

        $f2 = -1.08213043E9F;

        $r0[$i2] = $f2;

        $i2 = $i0 + 1;

        $f2 = 0.0F;

        $r0[$i2] = $f2;

        $i2 = $i0 + 2;

        $f2 = 0.0F;

        $r0[$i2] = $f2;

        $i2 = $i0 + 3;

        $f2 = 0.0F;

        $r0[$i2] = $f2;

        $i2 = $i0 + 4;

        $f2 = 0.0F;

        $r0[$i2] = $f2;

        $i2 = $i0 + 6;

        $f2 = 0.0F;

        $r0[$i2] = $f2;

        $i2 = $i0 + 7;

        $f2 = 0.0F;

        $r0[$i2] = $f2;

        $i2 = $i0 + 12;

        $f2 = 0.0F;

        $r0[$i2] = $f2;

        $i2 = $i0 + 13;

        $f2 = 0.0F;

        $r0[$i2] = $f2;

        $i0 = $i0 + 15;

        $f2 = 0.0F;

        $r0[$i0] = $f2;

        return;
    }

    public static boolean invertM(float[], int, float[], int)
    {
        int $i0, $i1, $i3;
        float[] $r0, $r1, $r2, $r3;
        float $f0, $f1, $f2, $f3;
        byte $b2;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: float[];

        $i1 := @parameter3: int;

        $r2 = newarray (float)[16];

        staticinvoke <android.opengl.Matrix: void transposeM(float[],int,float[],int)>($r2, 0, $r1, $i1);

        $r1 = newarray (float)[12];

        $f0 = $r2[10];

        $f1 = $r2[15];

        $f0 = $f0 * $f1;

        $r1[0] = $f0;

        $f0 = $r2[11];

        $f1 = $r2[14];

        $f0 = $f0 * $f1;

        $r1[1] = $f0;

        $f0 = $r2[9];

        $f1 = $r2[15];

        $f0 = $f0 * $f1;

        $r1[2] = $f0;

        $f0 = $r2[11];

        $f1 = $r2[13];

        $f0 = $f0 * $f1;

        $r1[3] = $f0;

        $f0 = $r2[9];

        $f1 = $r2[14];

        $f0 = $f0 * $f1;

        $r1[4] = $f0;

        $f0 = $r2[10];

        $f1 = $r2[13];

        $f0 = $f0 * $f1;

        $r1[5] = $f0;

        $f0 = $r2[8];

        $f1 = $r2[15];

        $f0 = $f0 * $f1;

        $r1[6] = $f0;

        $f0 = $r2[11];

        $f1 = $r2[12];

        $f0 = $f0 * $f1;

        $r1[7] = $f0;

        $f0 = $r2[8];

        $f1 = $r2[14];

        $f0 = $f0 * $f1;

        $r1[8] = $f0;

        $f0 = $r2[10];

        $f1 = $r2[12];

        $f0 = $f0 * $f1;

        $r1[9] = $f0;

        $f0 = $r2[8];

        $f1 = $r2[13];

        $f0 = $f0 * $f1;

        $r1[10] = $f0;

        $f0 = $r2[9];

        $f1 = $r2[12];

        $f0 = $f0 * $f1;

        $r1[11] = $f0;

        $r3 = newarray (float)[16];

        $f0 = $r1[0];

        $f1 = $r2[5];

        $f0 = $f0 * $f1;

        $f1 = $r1[3];

        $f2 = $r2[6];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[4];

        $f2 = $r2[7];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[0] = $f0;

        $f0 = $r3[0];

        $f1 = $r1[1];

        $f2 = $r2[5];

        $f1 = $f1 * $f2;

        $f2 = $r1[2];

        $f3 = $r2[6];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[5];

        $f3 = $r2[7];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[0] = $f0;

        $f0 = $r1[1];

        $f1 = $r2[4];

        $f0 = $f0 * $f1;

        $f1 = $r1[6];

        $f2 = $r2[6];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[9];

        $f2 = $r2[7];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[1] = $f0;

        $f0 = $r3[1];

        $f1 = $r1[0];

        $f2 = $r2[4];

        $f1 = $f1 * $f2;

        $f2 = $r1[7];

        $f3 = $r2[6];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[8];

        $f3 = $r2[7];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[1] = $f0;

        $f0 = $r1[2];

        $f1 = $r2[4];

        $f0 = $f0 * $f1;

        $f1 = $r1[7];

        $f2 = $r2[5];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[10];

        $f2 = $r2[7];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[2] = $f0;

        $f0 = $r3[2];

        $f1 = $r1[3];

        $f2 = $r2[4];

        $f1 = $f1 * $f2;

        $f2 = $r1[6];

        $f3 = $r2[5];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[11];

        $f3 = $r2[7];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[2] = $f0;

        $f0 = $r1[5];

        $f1 = $r2[4];

        $f0 = $f0 * $f1;

        $f1 = $r1[8];

        $f2 = $r2[5];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[11];

        $f2 = $r2[6];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[3] = $f0;

        $f0 = $r3[3];

        $f1 = $r1[4];

        $f2 = $r2[4];

        $f1 = $f1 * $f2;

        $f2 = $r1[9];

        $f3 = $r2[5];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[10];

        $f3 = $r2[6];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[3] = $f0;

        $f0 = $r1[1];

        $f1 = $r2[1];

        $f0 = $f0 * $f1;

        $f1 = $r1[2];

        $f2 = $r2[2];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[5];

        $f2 = $r2[3];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[4] = $f0;

        $f0 = $r3[4];

        $f1 = $r1[0];

        $f2 = $r2[1];

        $f1 = $f1 * $f2;

        $f2 = $r1[3];

        $f3 = $r2[2];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[4];

        $f3 = $r2[3];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[4] = $f0;

        $f0 = $r1[0];

        $f1 = $r2[0];

        $f0 = $f0 * $f1;

        $f1 = $r1[7];

        $f2 = $r2[2];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[8];

        $f2 = $r2[3];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[5] = $f0;

        $f0 = $r3[5];

        $f1 = $r1[1];

        $f2 = $r2[0];

        $f1 = $f1 * $f2;

        $f2 = $r1[6];

        $f3 = $r2[2];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[9];

        $f3 = $r2[3];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[5] = $f0;

        $f0 = $r1[3];

        $f1 = $r2[0];

        $f0 = $f0 * $f1;

        $f1 = $r1[6];

        $f2 = $r2[1];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[11];

        $f2 = $r2[3];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[6] = $f0;

        $f0 = $r3[6];

        $f1 = $r1[2];

        $f2 = $r2[0];

        $f1 = $f1 * $f2;

        $f2 = $r1[7];

        $f3 = $r2[1];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[10];

        $f3 = $r2[3];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[6] = $f0;

        $f0 = $r1[4];

        $f1 = $r2[0];

        $f0 = $f0 * $f1;

        $f1 = $r1[9];

        $f2 = $r2[1];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[10];

        $f2 = $r2[2];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[7] = $f0;

        $f0 = $r3[7];

        $f1 = $r1[5];

        $f2 = $r2[0];

        $f1 = $f1 * $f2;

        $f2 = $r1[8];

        $f3 = $r2[1];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[11];

        $f3 = $r2[2];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[7] = $f0;

        $f0 = $r2[2];

        $f1 = $r2[7];

        $f0 = $f0 * $f1;

        $r1[0] = $f0;

        $f0 = $r2[3];

        $f1 = $r2[6];

        $f0 = $f0 * $f1;

        $r1[1] = $f0;

        $f0 = $r2[1];

        $f1 = $r2[7];

        $f0 = $f0 * $f1;

        $r1[2] = $f0;

        $f0 = $r2[3];

        $f1 = $r2[5];

        $f0 = $f0 * $f1;

        $r1[3] = $f0;

        $f0 = $r2[1];

        $f1 = $r2[6];

        $f0 = $f0 * $f1;

        $r1[4] = $f0;

        $f0 = $r2[2];

        $f1 = $r2[5];

        $f0 = $f0 * $f1;

        $r1[5] = $f0;

        $f0 = $r2[0];

        $f1 = $r2[7];

        $f0 = $f0 * $f1;

        $r1[6] = $f0;

        $f0 = $r2[3];

        $f1 = $r2[4];

        $f0 = $f0 * $f1;

        $r1[7] = $f0;

        $f0 = $r2[0];

        $f1 = $r2[6];

        $f0 = $f0 * $f1;

        $r1[8] = $f0;

        $f0 = $r2[2];

        $f1 = $r2[4];

        $f0 = $f0 * $f1;

        $r1[9] = $f0;

        $f0 = $r2[0];

        $f1 = $r2[5];

        $f0 = $f0 * $f1;

        $r1[10] = $f0;

        $f0 = $r2[1];

        $f1 = $r2[4];

        $f0 = $f0 * $f1;

        $r1[11] = $f0;

        $f0 = $r1[0];

        $f1 = $r2[13];

        $f0 = $f0 * $f1;

        $f1 = $r1[3];

        $f2 = $r2[14];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[4];

        $f2 = $r2[15];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[8] = $f0;

        $f0 = $r3[8];

        $f1 = $r1[1];

        $f2 = $r2[13];

        $f1 = $f1 * $f2;

        $f2 = $r1[2];

        $f3 = $r2[14];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[5];

        $f3 = $r2[15];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[8] = $f0;

        $f0 = $r1[1];

        $f1 = $r2[12];

        $f0 = $f0 * $f1;

        $f1 = $r1[6];

        $f2 = $r2[14];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[9];

        $f2 = $r2[15];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[9] = $f0;

        $f0 = $r3[9];

        $f1 = $r1[0];

        $f2 = $r2[12];

        $f1 = $f1 * $f2;

        $f2 = $r1[7];

        $f3 = $r2[14];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[8];

        $f3 = $r2[15];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[9] = $f0;

        $f0 = $r1[2];

        $f1 = $r2[12];

        $f0 = $f0 * $f1;

        $f1 = $r1[7];

        $f2 = $r2[13];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[10];

        $f2 = $r2[15];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[10] = $f0;

        $f0 = $r3[10];

        $f1 = $r1[3];

        $f2 = $r2[12];

        $f1 = $f1 * $f2;

        $f2 = $r1[6];

        $f3 = $r2[13];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[11];

        $f3 = $r2[15];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[10] = $f0;

        $f0 = $r1[5];

        $f1 = $r2[12];

        $f0 = $f0 * $f1;

        $f1 = $r1[8];

        $f2 = $r2[13];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[11];

        $f2 = $r2[14];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[11] = $f0;

        $f0 = $r3[11];

        $f1 = $r1[4];

        $f2 = $r2[12];

        $f1 = $f1 * $f2;

        $f2 = $r1[9];

        $f3 = $r2[13];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[10];

        $f3 = $r2[14];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[11] = $f0;

        $f0 = $r1[2];

        $f1 = $r2[10];

        $f0 = $f0 * $f1;

        $f1 = $r1[5];

        $f2 = $r2[11];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[1];

        $f2 = $r2[9];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[12] = $f0;

        $f0 = $r3[12];

        $f1 = $r1[4];

        $f2 = $r2[11];

        $f1 = $f1 * $f2;

        $f2 = $r1[0];

        $f3 = $r2[9];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[3];

        $f3 = $r2[10];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[12] = $f0;

        $f0 = $r1[8];

        $f1 = $r2[11];

        $f0 = $f0 * $f1;

        $f1 = $r1[0];

        $f2 = $r2[8];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[7];

        $f2 = $r2[10];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[13] = $f0;

        $f0 = $r3[13];

        $f1 = $r1[6];

        $f2 = $r2[10];

        $f1 = $f1 * $f2;

        $f2 = $r1[9];

        $f3 = $r2[11];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[1];

        $f3 = $r2[8];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[13] = $f0;

        $f0 = $r1[6];

        $f1 = $r2[9];

        $f0 = $f0 * $f1;

        $f1 = $r1[11];

        $f2 = $r2[11];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[3];

        $f2 = $r2[8];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[14] = $f0;

        $f0 = $r3[14];

        $f1 = $r1[10];

        $f2 = $r2[11];

        $f1 = $f1 * $f2;

        $f2 = $r1[2];

        $f3 = $r2[8];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[7];

        $f3 = $r2[9];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f0 = $f0 - $f1;

        $r3[14] = $f0;

        $f0 = $r1[10];

        $f1 = $r2[10];

        $f0 = $f0 * $f1;

        $f1 = $r1[4];

        $f2 = $r2[8];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r1[9];

        $f2 = $r2[9];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $r3[15] = $f0;

        $f0 = $r3[15];

        $f1 = $r1[8];

        $f2 = $r2[9];

        $f1 = $f1 * $f2;

        $f2 = $r1[11];

        $f3 = $r2[10];

        $f2 = $f2 * $f3;

        $f1 = $f1 + $f2;

        $f2 = $r1[5];

        $f3 = $r2[8];

        $f2 = $f2 * $f3;

        $f1 = $f2 + $f1;

        $f0 = $f0 - $f1;

        $r3[15] = $f0;

        $f0 = $r2[0];

        $f1 = $r3[0];

        $f0 = $f0 * $f1;

        $f1 = $r2[1];

        $f2 = $r3[1];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r2[2];

        $f2 = $r3[2];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $f1 = $r2[3];

        $f2 = $r3[3];

        $f1 = $f1 * $f2;

        $f0 = $f0 + $f1;

        $b2 = $f0 cmpl 0.0F;

        if $b2 != 0 goto label1;

     label1:
        $f0 = 1.0F / $f0;

        $i1 = 0;

     label2:
        if $i1 >= 16 goto label3;

        $i3 = $i1 + $i0;

        $f1 = $r3[$i1];

        $f1 = $f1 * $f0;

        $r0[$i3] = $f1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return 1;
    }

    public static float length(float, float, float)
    {
        float $f0, $f1, $f2;
        double $d0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $f2 := @parameter2: float;

        $f0 = $f0 * $f0;

        $f1 = $f1 * $f1;

        $f0 = $f0 + $f1;

        $f1 = $f2 * $f2;

        $f0 = $f0 + $f1;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f0 = (float) $d0;

        return $f0;
    }

    public static native void multiplyMM(float[], int, float[], int, float[], int);

    public static native void multiplyMV(float[], int, float[], int, float[], int);

    public static void orthoM(float[], int, float, float, float, float, float, float)
    {
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        float[] $r0;
        int $i0, $i2;
        byte $b1;
        java.lang.IllegalArgumentException r2;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $f3 := @parameter2: float;

        $f4 := @parameter3: float;

        $f5 := @parameter4: float;

        $f6 := @parameter5: float;

        $f0 := @parameter6: float;

        $f1 := @parameter7: float;

        $b1 = $f3 cmpl $f4;

        if $b1 != 0 goto label1;

        r2 = new java.lang.IllegalArgumentException;

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("left == right");

        throw r2;

     label1:
        $b1 = $f5 cmpl $f6;

        if $b1 != 0 goto label2;

        r2 = new java.lang.IllegalArgumentException;

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bottom == top");

        throw r2;

     label2:
        $b1 = $f0 cmpl $f1;

        if $b1 != 0 goto label3;

        r2 = new java.lang.IllegalArgumentException;

        specialinvoke r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("near == far");

        throw r2;

     label3:
        $f7 = $f4 - $f3;

        $f2 = 1.0F / $f7;

        $f7 = $f6 - $f5;

        $f8 = 1.0F / $f7;

        $f7 = $f1 - $f0;

        $f9 = 1.0F / $f7;

        $f7 = 2.0F * $f2;

        $f10 = 2.0F * $f8;

        $f11 = -2.0F * $f9;

        $f3 = $f3 + $f4;

        $f3 = neg $f3;

        $f3 = $f3 * $f2;

        $f4 = $f6 + $f5;

        $f4 = neg $f4;

        $f4 = $f4 * $f8;

        $f5 = $f1 + $f0;

        $f5 = neg $f5;

        $f5 = $f5 * $f9;

        $i2 = $i0 + 0;

        $r0[$i2] = $f7;

        $i2 = $i0 + 5;

        $r0[$i2] = $f10;

        $i2 = $i0 + 10;

        $r0[$i2] = $f11;

        $i2 = $i0 + 12;

        $r0[$i2] = $f3;

        $i2 = $i0 + 13;

        $r0[$i2] = $f4;

        $i2 = $i0 + 14;

        $r0[$i2] = $f5;

        $i2 = $i0 + 15;

        $f3 = 1.06535322E9F;

        $r0[$i2] = $f3;

        $i2 = $i0 + 1;

        $f3 = 0.0F;

        $r0[$i2] = $f3;

        $i2 = $i0 + 2;

        $f3 = 0.0F;

        $r0[$i2] = $f3;

        $i2 = $i0 + 3;

        $f3 = 0.0F;

        $r0[$i2] = $f3;

        $i2 = $i0 + 4;

        $f3 = 0.0F;

        $r0[$i2] = $f3;

        $i2 = $i0 + 6;

        $f3 = 0.0F;

        $r0[$i2] = $f3;

        $i2 = $i0 + 7;

        $f3 = 0.0F;

        $r0[$i2] = $f3;

        $i2 = $i0 + 8;

        $f3 = 0.0F;

        $r0[$i2] = $f3;

        $i2 = $i0 + 9;

        $f3 = 0.0F;

        $r0[$i2] = $f3;

        $i0 = $i0 + 11;

        $f3 = 0.0F;

        $r0[$i0] = $f3;

        return;
    }

    public static void rotateM(float[], int, float, float, float, float)
    {
        float[] $r0, $r1;
        int $i0;
        float $f0, $f1, $f2, $f3;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $f0 := @parameter2: float;

        $f1 := @parameter3: float;

        $f2 := @parameter4: float;

        $f3 := @parameter5: float;

        $r1 = newarray (float)[32];

        staticinvoke <android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>($r1, 0, $f0, $f1, $f2, $f3);

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>($r1, 16, $r0, $i0, $r1, 0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 16, $r0, $i0, 16);

        return;
    }

    public static void rotateM(float[], int, float[], int, float, float, float, float)
    {
        float[] $r0, $r1, $r2;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: float[];

        $i1 := @parameter3: int;

        $f0 := @parameter4: float;

        $f1 := @parameter5: float;

        $f2 := @parameter6: float;

        $f3 := @parameter7: float;

        $r2 = newarray (float)[16];

        staticinvoke <android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>($r2, 0, $f0, $f1, $f2, $f3);

        staticinvoke <android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>($r0, $i0, $r1, $i1, $r2, 0);

        return;
    }

    public static void scaleM(float[], int, float, float, float)
    {
        float[] $r0;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $f0 := @parameter2: float;

        $f1 := @parameter3: float;

        $f2 := @parameter4: float;

        $i2 = 0;

     label1:
        if $i2 >= 4 goto label2;

        $i1 = $i0 + $i2;

        $f3 = $r0[$i1];

        $f3 = $f3 * $f0;

        $r0[$i1] = $f3;

        $i3 = $i1 + 4;

        $f3 = $r0[$i3];

        $f3 = $f3 * $f1;

        $r0[$i3] = $f3;

        $i1 = $i1 + 8;

        $f3 = $r0[$i1];

        $f3 = $f3 * $f2;

        $r0[$i1] = $f3;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void scaleM(float[], int, float[], int, float, float, float)
    {
        float[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0, $f1, $f2, $f3;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: float[];

        $i1 := @parameter3: int;

        $f0 := @parameter4: float;

        $f1 := @parameter5: float;

        $f2 := @parameter6: float;

        $i4 = 0;

     label1:
        if $i4 >= 4 goto label2;

        $i3 = $i0 + $i4;

        $i2 = $i1 + $i4;

        $f3 = $r1[$i2];

        $f3 = $f3 * $f0;

        $r0[$i3] = $f3;

        $i5 = $i3 + 4;

        $i6 = $i2 + 4;

        $f3 = $r1[$i6];

        $f3 = $f3 * $f1;

        $r0[$i5] = $f3;

        $i5 = $i3 + 8;

        $i6 = $i2 + 8;

        $f3 = $r1[$i6];

        $f3 = $f3 * $f2;

        $r0[$i5] = $f3;

        $i3 = $i3 + 12;

        $i2 = $i2 + 12;

        $f3 = $r1[$i2];

        $r0[$i3] = $f3;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return;
    }

    public static void setIdentityM(float[], int)
    {
        float[] $r0;
        int $i0, $i1, $i2;
        float f0;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $i1 = 0;

     label1:
        if $i1 >= 16 goto label2;

        $i2 = $i0 + $i1;

        f0 = 0.0F;

        $r0[$i2] = f0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= 16 goto label4;

        $i2 = $i0 + $i1;

        f0 = 1.06535322E9F;

        $r0[$i2] = f0;

        $i1 = $i1 + 5;

        goto label3;

     label4:
        return;
    }

    public static void setRotateEulerM(float[], int, float, float, float)
    {
        float[] $r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        int $i0, $i1;
        double $d0;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $f1 := @parameter2: float;

        $f2 := @parameter3: float;

        $f0 := @parameter4: float;

        $f3 = $f1 * 0.017453292F;

        $f4 = $f2 * 0.017453292F;

        $f5 = $f0 * 0.017453292F;

        $d0 = (double) $f3;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f1 = (float) $d0;

        $d0 = (double) $f3;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f0 = (float) $d0;

        $d0 = (double) $f4;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f2 = (float) $d0;

        $d0 = (double) $f4;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f6 = (float) $d0;

        $d0 = (double) $f5;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f4 = (float) $d0;

        $d0 = (double) $f5;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f5 = (float) $d0;

        $f7 = $f1 * $f6;

        $f3 = $f0 * $f6;

        $i1 = $i0 + 0;

        $f8 = $f2 * $f4;

        $r0[$i1] = $f8;

        $i1 = $i0 + 1;

        $f8 = neg $f2;

        $f8 = $f8 * $f5;

        $r0[$i1] = $f8;

        $i1 = $i0 + 2;

        $r0[$i1] = $f6;

        $i1 = $i0 + 3;

        $f6 = 0.0F;

        $r0[$i1] = $f6;

        $i1 = $i0 + 4;

        $f6 = $f7 * $f4;

        $f8 = $f1 * $f5;

        $f6 = $f6 + $f8;

        $r0[$i1] = $f6;

        $i1 = $i0 + 5;

        $f7 = neg $f7;

        $f7 = $f7 * $f5;

        $f6 = $f1 * $f4;

        $f7 = $f7 + $f6;

        $r0[$i1] = $f7;

        $i1 = $i0 + 6;

        $f7 = neg $f0;

        $f7 = $f7 * $f2;

        $r0[$i1] = $f7;

        $i1 = $i0 + 7;

        $f7 = 0.0F;

        $r0[$i1] = $f7;

        $i1 = $i0 + 8;

        $f7 = neg $f3;

        $f7 = $f7 * $f4;

        $f6 = $f0 * $f5;

        $f7 = $f7 + $f6;

        $r0[$i1] = $f7;

        $i1 = $i0 + 9;

        $f5 = $f3 * $f5;

        $f0 = $f4 * $f0;

        $f0 = $f0 + $f5;

        $r0[$i1] = $f0;

        $i1 = $i0 + 10;

        $f1 = $f1 * $f2;

        $r0[$i1] = $f1;

        $i1 = $i0 + 11;

        $f1 = 0.0F;

        $r0[$i1] = $f1;

        $i1 = $i0 + 12;

        $f1 = 0.0F;

        $r0[$i1] = $f1;

        $i1 = $i0 + 13;

        $f1 = 0.0F;

        $r0[$i1] = $f1;

        $i1 = $i0 + 14;

        $f1 = 0.0F;

        $r0[$i1] = $f1;

        $i0 = $i0 + 15;

        $f1 = 1.06535322E9F;

        $r0[$i0] = $f1;

        return;
    }

    public static void setRotateM(float[], int, float, float, float, float)
    {
        float[] $r0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        int $i0, $i1;
        double $d0;
        byte $b2;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $f3 := @parameter2: float;

        $f4 := @parameter3: float;

        $f5 := @parameter4: float;

        $f6 := @parameter5: float;

        $i1 = $i0 + 3;

        $f8 = 0.0F;

        $r0[$i1] = $f8;

        $i1 = $i0 + 7;

        $f8 = 0.0F;

        $r0[$i1] = $f8;

        $i1 = $i0 + 11;

        $f8 = 0.0F;

        $r0[$i1] = $f8;

        $i1 = $i0 + 12;

        $f8 = 0.0F;

        $r0[$i1] = $f8;

        $i1 = $i0 + 13;

        $f8 = 0.0F;

        $r0[$i1] = $f8;

        $i1 = $i0 + 14;

        $f8 = 0.0F;

        $r0[$i1] = $f8;

        $i1 = $i0 + 15;

        $f8 = 1.06535322E9F;

        $r0[$i1] = $f8;

        $f3 = $f3 * 0.017453292F;

        $d0 = (double) $f3;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f7 = (float) $d0;

        $d0 = (double) $f3;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f3 = (float) $d0;

        $b2 = 1.0F cmpl $f4;

        if $b2 != 0 goto label1;

        $b2 = 0.0F cmpl $f5;

        if $b2 != 0 goto label1;

        $b2 = 0.0F cmpl $f6;

        if $b2 != 0 goto label1;

        $i1 = $i0 + 5;

        $r0[$i1] = $f3;

        $i1 = $i0 + 10;

        $r0[$i1] = $f3;

        $i1 = $i0 + 6;

        $r0[$i1] = $f7;

        $i1 = $i0 + 9;

        $f3 = neg $f7;

        $r0[$i1] = $f3;

        $i1 = $i0 + 1;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 2;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 4;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 8;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i0 = $i0 + 0;

        $f3 = 1.06535322E9F;

        $r0[$i0] = $f3;

        return;

     label1:
        $b2 = 0.0F cmpl $f4;

        if $b2 != 0 goto label2;

        $b2 = 1.0F cmpl $f5;

        if $b2 != 0 goto label2;

        $b2 = 0.0F cmpl $f6;

        if $b2 != 0 goto label2;

        $i1 = $i0 + 0;

        $r0[$i1] = $f3;

        $i1 = $i0 + 10;

        $r0[$i1] = $f3;

        $i1 = $i0 + 8;

        $r0[$i1] = $f7;

        $i1 = $i0 + 2;

        $f3 = neg $f7;

        $r0[$i1] = $f3;

        $i1 = $i0 + 1;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 4;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 6;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 9;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i0 = $i0 + 5;

        $f3 = 1.06535322E9F;

        $r0[$i0] = $f3;

        return;

     label2:
        $b2 = 0.0F cmpl $f4;

        if $b2 != 0 goto label3;

        $b2 = 0.0F cmpl $f5;

        if $b2 != 0 goto label3;

        $b2 = 1.0F cmpl $f6;

        if $b2 != 0 goto label3;

        $i1 = $i0 + 0;

        $r0[$i1] = $f3;

        $i1 = $i0 + 5;

        $r0[$i1] = $f3;

        $i1 = $i0 + 1;

        $r0[$i1] = $f7;

        $i1 = $i0 + 4;

        $f3 = neg $f7;

        $r0[$i1] = $f3;

        $i1 = $i0 + 2;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 6;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 8;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i1 = $i0 + 9;

        $f3 = 0.0F;

        $r0[$i1] = $f3;

        $i0 = $i0 + 10;

        $f3 = 1.06535322E9F;

        $r0[$i0] = $f3;

        return;

     label3:
        $f8 = staticinvoke <android.opengl.Matrix: float length(float,float,float)>($f4, $f5, $f6);

        $b2 = 1.0F cmpl $f8;

        if $b2 == 0 goto label4;

        $f8 = 1.0F / $f8;

        $f4 = $f4 * $f8;

        $f5 = $f5 * $f8;

        $f6 = $f6 * $f8;

     label4:
        $f8 = 1.0F - $f3;

        $f9 = $f4 * $f5;

        $f1 = $f5 * $f6;

        $f2 = $f6 * $f4;

        $f10 = $f4 * $f7;

        $f0 = $f5 * $f7;

        $f7 = $f7 * $f6;

        $i1 = $i0 + 0;

        $f4 = $f4 * $f4;

        $f4 = $f4 * $f8;

        $f4 = $f4 + $f3;

        $r0[$i1] = $f4;

        $i1 = $i0 + 4;

        $f4 = $f9 * $f8;

        $f4 = $f4 - $f7;

        $r0[$i1] = $f4;

        $i1 = $i0 + 8;

        $f4 = $f2 * $f8;

        $f4 = $f4 + $f0;

        $r0[$i1] = $f4;

        $i1 = $i0 + 1;

        $f4 = $f9 * $f8;

        $f4 = $f7 + $f4;

        $r0[$i1] = $f4;

        $i1 = $i0 + 5;

        $f4 = $f5 * $f5;

        $f4 = $f4 * $f8;

        $f4 = $f4 + $f3;

        $r0[$i1] = $f4;

        $i1 = $i0 + 9;

        $f4 = $f1 * $f8;

        $f4 = $f4 - $f10;

        $r0[$i1] = $f4;

        $i1 = $i0 + 2;

        $f4 = $f2 * $f8;

        $f4 = $f4 - $f0;

        $r0[$i1] = $f4;

        $i1 = $i0 + 6;

        $f4 = $f1 * $f8;

        $f4 = $f10 + $f4;

        $r0[$i1] = $f4;

        $i0 = $i0 + 10;

        $f4 = $f6 * $f6;

        $f4 = $f8 * $f4;

        $f3 = $f3 + $f4;

        $r0[$i0] = $f3;

        return;
    }

    public static void translateM(float[], int, float, float, float)
    {
        float[] $r0;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $f0 := @parameter2: float;

        $f1 := @parameter3: float;

        $f2 := @parameter4: float;

        $i2 = 0;

     label1:
        if $i2 >= 4 goto label2;

        $i1 = $i0 + $i2;

        $i3 = $i1 + 12;

        $f3 = $r0[$i3];

        $f4 = $r0[$i1];

        $f4 = $f4 * $f0;

        $i4 = $i1 + 4;

        $f5 = $r0[$i4];

        $f5 = $f5 * $f1;

        $f4 = $f4 + $f5;

        $i1 = $i1 + 8;

        $f5 = $r0[$i1];

        $f5 = $f5 * $f2;

        $f4 = $f4 + $f5;

        $f3 = $f3 + $f4;

        $r0[$i3] = $f3;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static void translateM(float[], int, float[], int, float, float, float)
    {
        float[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3, $f4;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: float[];

        $i1 := @parameter3: int;

        $f0 := @parameter4: float;

        $f1 := @parameter5: float;

        $f2 := @parameter6: float;

        $i4 = 0;

     label1:
        if $i4 >= 12 goto label2;

        $i2 = $i0 + $i4;

        $i3 = $i1 + $i4;

        $f3 = $r1[$i3];

        $r0[$i2] = $f3;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        $i4 = 0;

     label3:
        if $i4 >= 4 goto label4;

        $i3 = $i0 + $i4;

        $i2 = $i1 + $i4;

        $i3 = $i3 + 12;

        $f3 = $r1[$i2];

        $f3 = $f3 * $f0;

        $i5 = $i2 + 4;

        $f4 = $r1[$i5];

        $f4 = $f4 * $f1;

        $f3 = $f3 + $f4;

        $i5 = $i2 + 8;

        $f4 = $r1[$i5];

        $f4 = $f4 * $f2;

        $f3 = $f3 + $f4;

        $i2 = $i2 + 12;

        $f4 = $r1[$i2];

        $f3 = $f3 + $f4;

        $r0[$i3] = $f3;

        $i4 = $i4 + 1;

        goto label3;

     label4:
        return;
    }

    public static void transposeM(float[], int, float[], int)
    {
        float[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $r1 := @parameter2: float[];

        $i1 := @parameter3: int;

        $i3 = 0;

     label1:
        if $i3 >= 4 goto label2;

        $i2 = $i3 * 4;

        $i2 = $i2 + $i1;

        $i4 = $i3 + $i0;

        $f0 = $r1[$i2];

        $r0[$i4] = $f0;

        $i4 = $i3 + 4;

        $i4 = $i4 + $i0;

        $i5 = $i2 + 1;

        $f0 = $r1[$i5];

        $r0[$i4] = $f0;

        $i4 = $i3 + 8;

        $i4 = $i4 + $i0;

        $i5 = $i2 + 2;

        $f0 = $r1[$i5];

        $r0[$i4] = $f0;

        $i4 = $i3 + 12;

        $i4 = $i4 + $i0;

        $i2 = $i2 + 3;

        $f0 = $r1[$i2];

        $r0[$i4] = $f0;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return;
    }
}
