public class org.json.JSONTokener extends java.lang.Object
{
    private int myIndex;
    private java.lang.String mySource;

    public void <init>(java.lang.String)
    {
        org.json.JSONTokener $r0;
        java.lang.String $r1;

        $r0 := @this: org.json.JSONTokener;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.json.JSONTokener: int myIndex> = 0;

        $r0.<org.json.JSONTokener: java.lang.String mySource> = $r1;

        return;
    }

    public static int dehexchar(char)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        if $c0 < 48 goto label1;

        if $c0 > 57 goto label1;

        $i1 = $c0 - 48;

        return $i1;

     label1:
        if $c0 < 65 goto label2;

        if $c0 > 70 goto label2;

        $i1 = $c0 - 55;

        return $i1;

     label2:
        if $c0 < 97 goto label3;

        if $c0 > 102 goto label3;

        $i1 = $c0 - 87;

        return $i1;

     label3:
        return -1;
    }

    public void back()
    {
        org.json.JSONTokener $r0;
        int $i0;

        $r0 := @this: org.json.JSONTokener;

        $i0 = $r0.<org.json.JSONTokener: int myIndex>;

        if $i0 <= 0 goto label1;

        $i0 = $r0.<org.json.JSONTokener: int myIndex>;

        $i0 = $i0 - 1;

        $r0.<org.json.JSONTokener: int myIndex> = $i0;

        return;

     label1:
        return;
    }

    public boolean more()
    {
        org.json.JSONTokener $r0;
        int $i0, $i1;
        java.lang.String $r1;

        $r0 := @this: org.json.JSONTokener;

        $i1 = $r0.<org.json.JSONTokener: int myIndex>;

        $r1 = $r0.<org.json.JSONTokener: java.lang.String mySource>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public char next()
    {
        org.json.JSONTokener $r0;
        int $i0;
        boolean $z0;
        java.lang.String $r1;
        char $c1;

        $r0 := @this: org.json.JSONTokener;

        $z0 = virtualinvoke $r0.<org.json.JSONTokener: boolean more()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<org.json.JSONTokener: java.lang.String mySource>;

        $i0 = $r0.<org.json.JSONTokener: int myIndex>;

        $c1 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i0 = $r0.<org.json.JSONTokener: int myIndex>;

        $i0 = $i0 + 1;

        $r0.<org.json.JSONTokener: int myIndex> = $i0;

        return $c1;

     label1:
        return 0;
    }

    public char next(char) throws org.json.JSONException
    {
        org.json.JSONTokener $r0;
        char $c0, $c1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.json.JSONException $r3;

        $r0 := @this: org.json.JSONTokener;

        $c0 := @parameter0: char;

        $c1 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if $c1 == $c0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected \'");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' and instead saw \'");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>($r2);

        throw $r3;

     label1:
        return $c1;
    }

    public java.lang.String next(int) throws org.json.JSONException
    {
        org.json.JSONTokener $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        org.json.JSONException $r2;

        $r0 := @this: org.json.JSONTokener;

        $i0 := @parameter0: int;

        $i1 = $r0.<org.json.JSONTokener: int myIndex>;

        $i2 = $i1 + $i0;

        $r1 = $r0.<org.json.JSONTokener: java.lang.String mySource>;

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i2 < $i3 goto label1;

        $r2 = virtualinvoke $r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Substring bounds error");

        throw $r2;

     label1:
        $i3 = $r0.<org.json.JSONTokener: int myIndex>;

        $i0 = $i3 + $i0;

        $r0.<org.json.JSONTokener: int myIndex> = $i0;

        $r1 = $r0.<org.json.JSONTokener: java.lang.String mySource>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        return $r1;
    }

    public char nextClean() throws org.json.JSONException
    {
        org.json.JSONTokener $r0;
        char $c0;
        org.json.JSONException $r1;

        $r0 := @this: org.json.JSONTokener;

     label01:
        $c0 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if $c0 != 47 goto label07;

        $c0 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        lookupswitch($c0)
        {
            case 42: goto label05;
            case 47: goto label03;
            default: goto label02;
        };

     label02:
        virtualinvoke $r0.<org.json.JSONTokener: void back()>();

        return 47;

     label03:
        $c0 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if $c0 == 10 goto label01;

        if $c0 == 13 goto label01;

        if $c0 != 0 goto label03;

        goto label01;

     label04:
        virtualinvoke $r0.<org.json.JSONTokener: void back()>();

     label05:
        $c0 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if $c0 != 0 goto label06;

        $r1 = virtualinvoke $r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unclosed comment.");

        throw $r1;

     label06:
        if $c0 != 42 goto label05;

        $c0 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if $c0 != 47 goto label04;

        goto label01;

     label07:
        if $c0 != 35 goto label09;

     label08:
        $c0 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if $c0 == 10 goto label01;

        if $c0 == 13 goto label01;

        if $c0 != 0 goto label08;

        goto label01;

     label09:
        if $c0 == 0 goto label10;

        if $c0 <= 32 goto label01;

     label10:
        return $c0;
    }

    public java.lang.String nextString(char) throws org.json.JSONException
    {
        org.json.JSONTokener $r0;
        char $c0, $c1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.json.JSONException $r3;
        int $i2;

        $r0 := @this: org.json.JSONTokener;

        $c0 := @parameter0: char;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

     label01:
        $c1 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        lookupswitch($c1)
        {
            case 0: goto label03;
            case 10: goto label03;
            case 13: goto label03;
            case 92: goto label04;
            default: goto label02;
        };

     label02:
        if $c1 != $c0 goto label13;

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label03:
        $r3 = virtualinvoke $r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Unterminated string");

        throw $r3;

     label04:
        $c1 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        lookupswitch($c1)
        {
            case 98: goto label06;
            case 102: goto label09;
            case 110: goto label08;
            case 114: goto label10;
            case 116: goto label07;
            case 117: goto label11;
            case 120: goto label12;
            default: goto label05;
        };

     label05:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label01;

     label06:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(8);

        goto label01;

     label07:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(9);

        goto label01;

     label08:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        goto label01;

     label09:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(12);

        goto label01;

     label10:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(13);

        goto label01;

     label11:
        $r2 = virtualinvoke $r0.<org.json.JSONTokener: java.lang.String next(int)>(4);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $c1 = (char) $i2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label01;

     label12:
        $r2 = virtualinvoke $r0.<org.json.JSONTokener: java.lang.String next(int)>(2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        $c1 = (char) $i2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label01;

     label13:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label01;
    }

    public java.lang.String nextTo(char)
    {
        org.json.JSONTokener $r0;
        char $c0, $c1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: org.json.JSONTokener;

        $c0 := @parameter0: char;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        $c1 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if $c1 == $c0 goto label2;

        if $c1 == 0 goto label2;

        if $c1 == 10 goto label2;

        if $c1 != 13 goto label4;

     label2:
        if $c1 == 0 goto label3;

        virtualinvoke $r0.<org.json.JSONTokener: void back()>();

     label3:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r2;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label1;
    }

    public java.lang.String nextTo(java.lang.String)
    {
        org.json.JSONTokener $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        char $c0;
        int $i1;

        $r0 := @this: org.json.JSONTokener;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

     label1:
        $c0 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($c0);

        if $i1 >= 0 goto label2;

        if $c0 == 0 goto label2;

        if $c0 == 10 goto label2;

        if $c0 != 13 goto label4;

     label2:
        if $c0 == 0 goto label3;

        virtualinvoke $r0.<org.json.JSONTokener: void back()>();

     label3:
        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        return $r1;

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        goto label1;
    }

    public java.lang.Object nextValue() throws org.json.JSONException
    {
        org.json.JSONTokener $r0;
        java.lang.StringBuilder $r1, r12;
        char $c0, $c1;
        java.lang.String $r2, $r5;
        int $i2;
        java.lang.Object $r3;
        boolean $z0;
        org.json.JSONException $r4;
        java.lang.Exception $r6, $r7, $r8, $r9, $r10;
        java.lang.Boolean r11;
        org.json.JSONObject r13;
        org.json.JSONArray r14;
        java.lang.Integer r15;
        java.lang.Long r16;
        java.lang.Double r17;

        $r0 := @this: org.json.JSONTokener;

        $c0 = virtualinvoke $r0.<org.json.JSONTokener: char nextClean()>();

        $c1 = $c0;

        lookupswitch($c0)
        {
            case 34: goto label03;
            case 39: goto label03;
            case 91: goto label05;
            case 123: goto label04;
            default: goto label01;
        };

     label01:
        r12 = new java.lang.StringBuilder;

        $r1 = r12;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

     label02:
        if $c1 < 32 goto label06;

        $r2 = ",:]}/\\\"[{;=#";

        $i2 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($c1);

        if $i2 >= 0 goto label06;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $c1 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        goto label02;

     label03:
        $r2 = virtualinvoke $r0.<org.json.JSONTokener: java.lang.String nextString(char)>($c0);

        return $r2;

     label04:
        virtualinvoke $r0.<org.json.JSONTokener: void back()>();

        r13 = new org.json.JSONObject;

        specialinvoke r13.<org.json.JSONObject: void <init>(org.json.JSONTokener)>($r0);

        return r13;

     label05:
        virtualinvoke $r0.<org.json.JSONTokener: void back()>();

        r14 = new org.json.JSONArray;

        specialinvoke r14.<org.json.JSONArray: void <init>(org.json.JSONTokener)>($r0);

        return r14;

     label06:
        virtualinvoke $r0.<org.json.JSONTokener: void back()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label07;

        $r4 = virtualinvoke $r0.<org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)>("Missing value.");

        throw $r4;

     label07:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z0 == 0 goto label08;

        r11 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        return r11;

     label08:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z0 == 0 goto label09;

        r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return r11;

     label09:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("null");

        if $z0 == 0 goto label10;

        $r3 = <org.json.JSONObject: java.lang.Object NULL>;

        return $r3;

     label10:
        if $c0 < 48 goto label11;

        if $c0 <= 57 goto label12;

     label11:
        if $c0 == 46 goto label12;

        if $c0 == 45 goto label12;

        if $c0 != 43 goto label31;

     label12:
        if $c0 != 48 goto label17;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 <= 2 goto label27;

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        if $c0 == 120 goto label13;

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(1);

        if $c0 != 88 goto label27;

     label13:
        r15 = new java.lang.Integer;

     label14:
        $r5 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r5, 16);

        specialinvoke r15.<java.lang.Integer: void <init>(int)>($i2);

     label15:
        return r15;

     label16:
        $r6 := @caughtexception;

     label17:
        r15 = new java.lang.Integer;

     label18:
        specialinvoke r15.<java.lang.Integer: void <init>(java.lang.String)>($r2);

     label19:
        return r15;

     label20:
        $r7 := @caughtexception;

        r16 = new java.lang.Long;

     label21:
        specialinvoke r16.<java.lang.Long: void <init>(java.lang.String)>($r2);

     label22:
        return r16;

     label23:
        $r8 := @caughtexception;

        r17 = new java.lang.Double;

     label24:
        specialinvoke r17.<java.lang.Double: void <init>(java.lang.String)>($r2);

     label25:
        return r17;

     label26:
        $r9 := @caughtexception;

        return $r2;

     label27:
        r15 = new java.lang.Integer;

     label28:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 8);

        specialinvoke r15.<java.lang.Integer: void <init>(int)>($i2);

     label29:
        return r15;

     label30:
        $r10 := @caughtexception;

        goto label17;

     label31:
        return $r2;

        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Exception from label18 to label19 with label20;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.lang.Exception from label24 to label25 with label26;
        catch java.lang.Exception from label28 to label29 with label30;
    }

    public void skipPast(java.lang.String)
    {
        org.json.JSONTokener $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        $r0 := @this: org.json.JSONTokener;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.json.JSONTokener: java.lang.String mySource>;

        $i0 = $r0.<org.json.JSONTokener: int myIndex>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String,int)>($r1, $i0);

        $r0.<org.json.JSONTokener: int myIndex> = $i0;

        $i0 = $r0.<org.json.JSONTokener: int myIndex>;

        if $i0 >= 0 goto label1;

        $r1 = $r0.<org.json.JSONTokener: java.lang.String mySource>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r0.<org.json.JSONTokener: int myIndex> = $i0;

        return;

     label1:
        $i0 = $r0.<org.json.JSONTokener: int myIndex>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 + $i1;

        $r0.<org.json.JSONTokener: int myIndex> = $i0;

        return;
    }

    public char skipTo(char)
    {
        org.json.JSONTokener $r0;
        char $c0, $c2;
        int $i1;

        $r0 := @this: org.json.JSONTokener;

        $c0 := @parameter0: char;

        $i1 = $r0.<org.json.JSONTokener: int myIndex>;

     label1:
        $c2 = virtualinvoke $r0.<org.json.JSONTokener: char next()>();

        if $c2 != 0 goto label2;

        $r0.<org.json.JSONTokener: int myIndex> = $i1;

        return $c2;

     label2:
        if $c2 != $c0 goto label1;

        virtualinvoke $r0.<org.json.JSONTokener: void back()>();

        return $c2;
    }

    public org.json.JSONException syntaxError(java.lang.String)
    {
        org.json.JSONTokener $r0;
        java.lang.String $r1;
        org.json.JSONException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.json.JSONTokener;

        $r1 := @parameter0: java.lang.String;

        $r2 = new org.json.JSONException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<org.json.JSONTokener: java.lang.String toString()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>($r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        org.json.JSONTokener $r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @this: org.json.JSONTokener;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at character ");

        $i0 = $r0.<org.json.JSONTokener: int myIndex>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $r2 = $r0.<org.json.JSONTokener: java.lang.String mySource>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
