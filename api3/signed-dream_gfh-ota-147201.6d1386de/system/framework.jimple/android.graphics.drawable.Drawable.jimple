public abstract class android.graphics.drawable.Drawable extends java.lang.Object
{
    private android.graphics.Rect mBounds;
    android.graphics.drawable.Drawable$Callback mCallback;
    private int mChangingConfigurations;
    private int mLevel;
    private int[] mStateSet;
    private boolean mVisible;

    public void <init>()
    {
        android.graphics.drawable.Drawable $r0;
        int[] $r1;
        android.graphics.Rect $r2;

        $r0 := @this: android.graphics.drawable.Drawable;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = <android.util.StateSet: int[] WILD_CARD>;

        $r0.<android.graphics.drawable.Drawable: int[] mStateSet> = $r1;

        $r0.<android.graphics.drawable.Drawable: int mLevel> = 0;

        $r0.<android.graphics.drawable.Drawable: int mChangingConfigurations> = 0;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        $r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds> = $r2;

        $r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback> = null;

        $r0.<android.graphics.drawable.Drawable: boolean mVisible> = 1;

        return;
    }

    public static android.graphics.drawable.Drawable createFromPath(java.lang.String)
    {
        java.lang.String $r0;
        android.graphics.Bitmap $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>($r0);

        if $r1 == null goto label2;

        $r2 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)>(null, $r1, null, null, $r0);

        return $r2;

     label2:
        return null;
    }

    public static android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources, android.util.TypedValue, java.io.InputStream, java.lang.String)
    {
        android.content.res.Resources $r0;
        android.util.TypedValue $r1;
        java.io.InputStream $r2;
        java.lang.String $r3;
        android.graphics.Rect $r4;
        android.graphics.Bitmap $r5;
        byte[] $r6, $r7;
        boolean $z0;
        android.graphics.drawable.Drawable $r8;

        $r0 := @parameter0: android.content.res.Resources;

        $r1 := @parameter1: android.util.TypedValue;

        $r2 := @parameter2: java.io.InputStream;

        $r3 := @parameter3: java.lang.String;

        if $r2 != null goto label1;

        return null;

     label1:
        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        $r5 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>($r0, $r1, $r2, $r4, null);

        if $r5 == null goto label4;

        $r6 = virtualinvoke $r5.<android.graphics.Bitmap: byte[] getNinePatchChunk()>();

        $r7 = $r6;

        if $r6 == null goto label2;

        $z0 = staticinvoke <android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>($r6);

        if $z0 != 0 goto label3;

     label2:
        $r7 = null;

        $r4 = null;

     label3:
        $r8 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources,android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)>($r0, $r5, $r7, $r4, $r3);

        return $r8;

     label4:
        return null;
    }

    public static android.graphics.drawable.Drawable createFromStream(java.io.InputStream, java.lang.String)
    {
        java.io.InputStream $r0;
        java.lang.String $r1;
        android.graphics.drawable.Drawable $r2;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)>(null, null, $r0, $r1);

        return $r2;
    }

    public static android.graphics.drawable.Drawable createFromXml(android.content.res.Resources, org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources $r0;
        org.xmlpull.v1.XmlPullParser $r1;
        android.util.AttributeSet $r2;
        int $i0;
        org.xmlpull.v1.XmlPullParserException $r3;
        android.graphics.drawable.Drawable $r4;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @parameter0: android.content.res.Resources;

        $r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r2 = staticinvoke <android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>($r1);

     label1:
        $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        if $i0 == 2 goto label2;

        if $i0 != 1 goto label1;

     label2:
        if $i0 == 2 goto label3;

        $r3 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("No start tag found");

        throw $r3;

     label3:
        $r4 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>($r0, $r1, $r2);

        if $r4 != null goto label4;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown initial tag: ");

        $r7 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label4:
        return $r4;
    }

    public static android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.content.res.Resources $r0;
        org.xmlpull.v1.XmlPullParser $r1;
        android.util.AttributeSet $r2;
        java.lang.String $r3, $r9;
        boolean $z0;
        android.graphics.drawable.Drawable $r4;
        android.graphics.drawable.BitmapDrawable $r5;
        android.util.DisplayMetrics $r6;
        java.lang.StringBuilder $r8, r22;
        android.graphics.drawable.StateListDrawable r10;
        android.graphics.drawable.LevelListDrawable r11;
        android.graphics.drawable.LayerDrawable r12;
        android.graphics.drawable.TransitionDrawable r13;
        android.graphics.drawable.ColorDrawable r14;
        android.graphics.drawable.GradientDrawable r15;
        android.graphics.drawable.ScaleDrawable r16;
        android.graphics.drawable.ClipDrawable r17;
        android.graphics.drawable.RotateDrawable r18;
        android.graphics.drawable.AnimationDrawable r19;
        android.graphics.drawable.InsetDrawable r20;
        android.graphics.drawable.NinePatchDrawable r21;
        org.xmlpull.v1.XmlPullParserException r23;

        $r0 := @parameter0: android.content.res.Resources;

        $r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r2 := @parameter2: android.util.AttributeSet;

        $r3 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("selector");

        if $z0 == 0 goto label02;

        r10 = new android.graphics.drawable.StateListDrawable;

        $r4 = r10;

        specialinvoke r10.<android.graphics.drawable.StateListDrawable: void <init>()>();

     label01:
        virtualinvoke $r4.<android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)>($r0, $r1, $r2);

        return $r4;

     label02:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("level-list");

        if $z0 == 0 goto label03;

        r11 = new android.graphics.drawable.LevelListDrawable;

        $r4 = r11;

        specialinvoke r11.<android.graphics.drawable.LevelListDrawable: void <init>()>();

        goto label01;

     label03:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("layer-list");

        if $z0 == 0 goto label04;

        r12 = new android.graphics.drawable.LayerDrawable;

        $r4 = r12;

        specialinvoke r12.<android.graphics.drawable.LayerDrawable: void <init>()>();

        goto label01;

     label04:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("transition");

        if $z0 == 0 goto label05;

        r13 = new android.graphics.drawable.TransitionDrawable;

        $r4 = r13;

        specialinvoke r13.<android.graphics.drawable.TransitionDrawable: void <init>()>();

        goto label01;

     label05:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("color");

        if $z0 == 0 goto label06;

        r14 = new android.graphics.drawable.ColorDrawable;

        $r4 = r14;

        specialinvoke r14.<android.graphics.drawable.ColorDrawable: void <init>()>();

        goto label01;

     label06:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("shape");

        if $z0 == 0 goto label07;

        r15 = new android.graphics.drawable.GradientDrawable;

        $r4 = r15;

        specialinvoke r15.<android.graphics.drawable.GradientDrawable: void <init>()>();

        goto label01;

     label07:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("scale");

        if $z0 == 0 goto label08;

        r16 = new android.graphics.drawable.ScaleDrawable;

        $r4 = r16;

        specialinvoke r16.<android.graphics.drawable.ScaleDrawable: void <init>()>();

        goto label01;

     label08:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("clip");

        if $z0 == 0 goto label09;

        r17 = new android.graphics.drawable.ClipDrawable;

        $r4 = r17;

        specialinvoke r17.<android.graphics.drawable.ClipDrawable: void <init>()>();

        goto label01;

     label09:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("rotate");

        if $z0 == 0 goto label10;

        r18 = new android.graphics.drawable.RotateDrawable;

        $r4 = r18;

        specialinvoke r18.<android.graphics.drawable.RotateDrawable: void <init>()>();

        goto label01;

     label10:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("animation-list");

        if $z0 == 0 goto label11;

        r19 = new android.graphics.drawable.AnimationDrawable;

        $r4 = r19;

        specialinvoke r19.<android.graphics.drawable.AnimationDrawable: void <init>()>();

        goto label01;

     label11:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("inset");

        if $z0 == 0 goto label12;

        r20 = new android.graphics.drawable.InsetDrawable;

        $r4 = r20;

        specialinvoke r20.<android.graphics.drawable.InsetDrawable: void <init>()>();

        goto label01;

     label12:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("bitmap");

        if $z0 == 0 goto label13;

        $r5 = new android.graphics.drawable.BitmapDrawable;

        $r4 = $r5;

        specialinvoke $r5.<android.graphics.drawable.BitmapDrawable: void <init>()>();

        if $r0 == null goto label01;

        $r5 = (android.graphics.drawable.BitmapDrawable) $r4;

        $r6 = virtualinvoke $r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        virtualinvoke $r5.<android.graphics.drawable.BitmapDrawable: void setDensityScale(android.util.DisplayMetrics)>($r6);

        goto label01;

     label13:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("nine-patch");

        if $z0 == 0 goto label14;

        r21 = new android.graphics.drawable.NinePatchDrawable;

        $r4 = r21;

        specialinvoke r21.<android.graphics.drawable.NinePatchDrawable: void <init>()>();

        goto label01;

     label14:
        r23 = new org.xmlpull.v1.XmlPullParserException;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        $r9 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r8 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": invalid drawable tag ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r3);

        throw r23;
    }

    private static android.graphics.drawable.Drawable drawableFromBitmap(android.content.res.Resources, android.graphics.Bitmap, byte[], android.graphics.Rect, java.lang.String)
    {
        android.content.res.Resources $r0;
        android.graphics.Bitmap $r1;
        byte[] $r2;
        android.graphics.Rect $r3;
        java.lang.String $r4;
        android.graphics.drawable.BitmapDrawable $r5;
        android.util.DisplayMetrics $r6;
        android.graphics.drawable.NinePatchDrawable $r7;

        $r0 := @parameter0: android.content.res.Resources;

        $r1 := @parameter1: android.graphics.Bitmap;

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: android.graphics.Rect;

        $r4 := @parameter4: java.lang.String;

        if $r2 == null goto label1;

        $r7 = new android.graphics.drawable.NinePatchDrawable;

        specialinvoke $r7.<android.graphics.drawable.NinePatchDrawable: void <init>(android.graphics.Bitmap,byte[],android.graphics.Rect,java.lang.String)>($r1, $r2, $r3, $r4);

        return $r7;

     label1:
        $r5 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r5.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>($r1);

        if $r0 == null goto label2;

        $r6 = virtualinvoke $r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        virtualinvoke $r5.<android.graphics.drawable.BitmapDrawable: void setDensityScale(android.util.DisplayMetrics)>($r6);

     label2:
        return $r5;
    }

    public static int resolveOpacity(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 != $i1 goto label1;

        return $i0;

     label1:
        if $i0 == 0 goto label2;

        if $i1 != 0 goto label3;

     label2:
        return 0;

     label3:
        if $i0 == -3 goto label6;

        if $i1 == -3 goto label7;

        if $i0 == -2 goto label4;

        if $i1 != -2 goto label5;

     label4:
        return -2;

     label5:
        return -1;

     label6:
        return -3;

     label7:
        return -3;
    }

    public void clearColorFilter()
    {
        android.graphics.drawable.Drawable $r0;

        $r0 := @this: android.graphics.drawable.Drawable;

        virtualinvoke $r0.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(null);

        return;
    }

    public final android.graphics.Rect copyBounds()
    {
        android.graphics.drawable.Drawable $r0;
        android.graphics.Rect $r1, $r2;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 = new android.graphics.Rect;

        $r2 = $r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        specialinvoke $r1.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r2);

        return $r1;
    }

    public final void copyBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable $r0;
        android.graphics.Rect $r1, $r2;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 = $r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke $r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return;
    }

    public abstract void draw(android.graphics.Canvas);

    public final android.graphics.Rect getBounds()
    {
        android.graphics.drawable.Drawable $r0;
        android.graphics.Rect r1;

        $r0 := @this: android.graphics.drawable.Drawable;

        r1 = $r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        return r1;
    }

    public int getChangingConfigurations()
    {
        android.graphics.drawable.Drawable $r0;
        int i0;

        $r0 := @this: android.graphics.drawable.Drawable;

        i0 = $r0.<android.graphics.drawable.Drawable: int mChangingConfigurations>;

        return i0;
    }

    public android.graphics.drawable.Drawable$ConstantState getConstantState()
    {
        android.graphics.drawable.Drawable $r0;

        $r0 := @this: android.graphics.drawable.Drawable;

        return null;
    }

    public android.graphics.drawable.Drawable getCurrent()
    {
        android.graphics.drawable.Drawable $r0;

        $r0 := @this: android.graphics.drawable.Drawable;

        return $r0;
    }

    public int getIntrinsicHeight()
    {
        android.graphics.drawable.Drawable $r0;

        $r0 := @this: android.graphics.drawable.Drawable;

        return -1;
    }

    public int getIntrinsicWidth()
    {
        android.graphics.drawable.Drawable $r0;

        $r0 := @this: android.graphics.drawable.Drawable;

        return -1;
    }

    public final int getLevel()
    {
        android.graphics.drawable.Drawable $r0;
        int i0;

        $r0 := @this: android.graphics.drawable.Drawable;

        i0 = $r0.<android.graphics.drawable.Drawable: int mLevel>;

        return i0;
    }

    public int getMinimumHeight()
    {
        android.graphics.drawable.Drawable $r0;
        int $i0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $i0 = virtualinvoke $r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if $i0 <= 0 goto label1;

        return $i0;

     label1:
        return 0;
    }

    public int getMinimumWidth()
    {
        android.graphics.drawable.Drawable $r0;
        int $i0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $i0 = virtualinvoke $r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        if $i0 <= 0 goto label1;

        return $i0;

     label1:
        return 0;
    }

    public abstract int getOpacity();

    public boolean getPadding(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable $r0;
        android.graphics.Rect $r1;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: android.graphics.Rect;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, 0, 0);

        return 0;
    }

    public int[] getState()
    {
        android.graphics.drawable.Drawable $r0;
        int[] r1;

        $r0 := @this: android.graphics.drawable.Drawable;

        r1 = $r0.<android.graphics.drawable.Drawable: int[] mStateSet>;

        return r1;
    }

    public android.graphics.Region getTransparentRegion()
    {
        android.graphics.drawable.Drawable $r0;

        $r0 := @this: android.graphics.drawable.Drawable;

        return null;
    }

    public void inflate(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.util.AttributeSet) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.Drawable $r0;
        android.content.res.Resources $r1;
        org.xmlpull.v1.XmlPullParser $r2;
        android.util.AttributeSet $r3;
        android.content.res.TypedArray $r4;
        int[] $r5;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r3 := @parameter2: android.util.AttributeSet;

        $r5 = <com.android.internal.R$styleable: int[] Drawable>;

        $r4 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>($r3, $r5);

        virtualinvoke $r0.<android.graphics.drawable.Drawable: void inflateWithAttributes(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.TypedArray,int)>($r1, $r2, $r4, 0);

        virtualinvoke $r4.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    void inflateWithAttributes(android.content.res.Resources, org.xmlpull.v1.XmlPullParser, android.content.res.TypedArray, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        android.graphics.drawable.Drawable $r0;
        android.content.res.Resources $r1;
        org.xmlpull.v1.XmlPullParser $r2;
        android.content.res.TypedArray $r3;
        int $i0;
        boolean $z0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: org.xmlpull.v1.XmlPullParser;

        $r3 := @parameter2: android.content.res.TypedArray;

        $i0 := @parameter3: int;

        $z0 = $r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        $z0 = virtualinvoke $r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i0, $z0);

        $r0.<android.graphics.drawable.Drawable: boolean mVisible> = $z0;

        return;
    }

    public void invalidateSelf()
    {
        android.graphics.drawable.Drawable $r0;
        android.graphics.drawable.Drawable$Callback $r1;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 = $r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback>;

        interfaceinvoke $r1.<android.graphics.drawable.Drawable$Callback: void invalidateDrawable(android.graphics.drawable.Drawable)>($r0);

        return;

     label1:
        return;
    }

    public boolean isStateful()
    {
        android.graphics.drawable.Drawable $r0;

        $r0 := @this: android.graphics.drawable.Drawable;

        return 0;
    }

    public final boolean isVisible()
    {
        android.graphics.drawable.Drawable $r0;
        boolean z0;

        $r0 := @this: android.graphics.drawable.Drawable;

        z0 = $r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        return z0;
    }

    public android.graphics.drawable.Drawable mutate()
    {
        android.graphics.drawable.Drawable $r0;

        $r0 := @this: android.graphics.drawable.Drawable;

        return $r0;
    }

    protected void onBoundsChange(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable $r0;
        android.graphics.Rect $r1;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: android.graphics.Rect;

        return;
    }

    protected boolean onLevelChange(int)
    {
        android.graphics.drawable.Drawable $r0;
        int $i0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $i0 := @parameter0: int;

        return 0;
    }

    protected boolean onStateChange(int[])
    {
        android.graphics.drawable.Drawable $r0;
        int[] $r1;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: int[];

        return 0;
    }

    public void scheduleSelf(java.lang.Runnable, long)
    {
        android.graphics.drawable.Drawable $r0;
        java.lang.Runnable $r1;
        long $l0;
        android.graphics.drawable.Drawable$Callback $r2;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: java.lang.Runnable;

        $l0 := @parameter1: long;

        $r2 = $r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback>;

        interfaceinvoke $r2.<android.graphics.drawable.Drawable$Callback: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>($r0, $r1, $l0);

        return;

     label1:
        return;
    }

    public abstract void setAlpha(int);

    public void setBounds(int, int, int, int)
    {
        android.graphics.drawable.Drawable $r0;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Rect $r1;

        $r0 := @this: android.graphics.drawable.Drawable;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = $r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        $i4 = $r1.<android.graphics.Rect: int left>;

        if $i4 != $i0 goto label1;

        $i4 = $r1.<android.graphics.Rect: int top>;

        if $i4 != $i1 goto label1;

        $i4 = $r1.<android.graphics.Rect: int right>;

        if $i4 != $i2 goto label1;

        $i4 = $r1.<android.graphics.Rect: int bottom>;

        if $i4 == $i3 goto label2;

     label1:
        $r1 = $r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r1 = $r0.<android.graphics.drawable.Drawable: android.graphics.Rect mBounds>;

        virtualinvoke $r0.<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>($r1);

        return;

     label2:
        return;
    }

    public void setBounds(android.graphics.Rect)
    {
        android.graphics.drawable.Drawable $r0;
        android.graphics.Rect $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: android.graphics.Rect;

        $i0 = $r1.<android.graphics.Rect: int left>;

        $i1 = $r1.<android.graphics.Rect: int top>;

        $i2 = $r1.<android.graphics.Rect: int right>;

        $i3 = $r1.<android.graphics.Rect: int bottom>;

        virtualinvoke $r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    public final void setCallback(android.graphics.drawable.Drawable$Callback)
    {
        android.graphics.drawable.Drawable $r0;
        android.graphics.drawable.Drawable$Callback $r1;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: android.graphics.drawable.Drawable$Callback;

        $r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback> = $r1;

        return;
    }

    public void setChangingConfigurations(int)
    {
        android.graphics.drawable.Drawable $r0;
        int $i0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $i0 := @parameter0: int;

        $r0.<android.graphics.drawable.Drawable: int mChangingConfigurations> = $i0;

        return;
    }

    public void setColorFilter(int, android.graphics.PorterDuff$Mode)
    {
        android.graphics.drawable.Drawable $r0;
        int $i0;
        android.graphics.PorterDuff$Mode $r1;
        android.graphics.PorterDuffColorFilter $r2;

        $r0 := @this: android.graphics.drawable.Drawable;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.PorterDuff$Mode;

        $r2 = new android.graphics.PorterDuffColorFilter;

        specialinvoke $r2.<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>($i0, $r1);

        virtualinvoke $r0.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>($r2);

        return;
    }

    public abstract void setColorFilter(android.graphics.ColorFilter);

    public void setDither(boolean)
    {
        android.graphics.drawable.Drawable $r0;
        boolean $z0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $z0 := @parameter0: boolean;

        return;
    }

    public void setFilterBitmap(boolean)
    {
        android.graphics.drawable.Drawable $r0;
        boolean $z0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $z0 := @parameter0: boolean;

        return;
    }

    public final boolean setLevel(int)
    {
        android.graphics.drawable.Drawable $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.graphics.drawable.Drawable: int mLevel>;

        if $i1 == $i0 goto label1;

        $r0.<android.graphics.drawable.Drawable: int mLevel> = $i0;

        $z0 = virtualinvoke $r0.<android.graphics.drawable.Drawable: boolean onLevelChange(int)>($i0);

        return $z0;

     label1:
        return 0;
    }

    public boolean setState(int[])
    {
        android.graphics.drawable.Drawable $r0;
        int[] $r1, $r2;
        boolean $z0;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: int[];

        $r2 = $r0.<android.graphics.drawable.Drawable: int[] mStateSet>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r2, $r1);

        if $z0 != 0 goto label1;

        $r0.<android.graphics.drawable.Drawable: int[] mStateSet> = $r1;

        $z0 = virtualinvoke $r0.<android.graphics.drawable.Drawable: boolean onStateChange(int[])>($r1);

        return $z0;

     label1:
        return 0;
    }

    public boolean setVisible(boolean, boolean)
    {
        android.graphics.drawable.Drawable $r0;
        boolean $z0, $z1;

        $r0 := @this: android.graphics.drawable.Drawable;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $z1 = $r0.<android.graphics.drawable.Drawable: boolean mVisible>;

        if $z1 == $z0 goto label2;

        $z1 = 1;

     label1:
        $r0.<android.graphics.drawable.Drawable: boolean mVisible> = $z0;

        return $z1;

     label2:
        $z1 = 0;

        goto label1;
    }

    public void unscheduleSelf(java.lang.Runnable)
    {
        android.graphics.drawable.Drawable $r0;
        java.lang.Runnable $r1;
        android.graphics.drawable.Drawable$Callback $r2;

        $r0 := @this: android.graphics.drawable.Drawable;

        $r1 := @parameter0: java.lang.Runnable;

        $r2 = $r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback mCallback>;

        interfaceinvoke $r2.<android.graphics.drawable.Drawable$Callback: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>($r0, $r1);

        return;

     label1:
        return;
    }
}
