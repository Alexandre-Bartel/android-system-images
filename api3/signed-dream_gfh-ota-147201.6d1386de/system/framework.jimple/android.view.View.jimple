public class android.view.View extends java.lang.Object implements android.graphics.drawable.Drawable$Callback, android.view.KeyEvent$Callback
{
    static final boolean $assertionsDisabled;
    static final int ALPHA_SET;
    static final int ANIMATION_STARTED;
    static final int CLICKABLE;
    private static final boolean DBG;
    static final int DISABLED;
    static final int DRAWABLE_STATE_DIRTY;
    static final int DRAWING_CACHE_ENABLED;
    public static final int DRAWING_CACHE_QUALITY_AUTO;
    private static final int[] DRAWING_CACHE_QUALITY_FLAGS;
    public static final int DRAWING_CACHE_QUALITY_HIGH;
    public static final int DRAWING_CACHE_QUALITY_LOW;
    static final int DRAWING_CACHE_QUALITY_MASK;
    static final int DRAWING_CACHE_VALID;
    static final int DRAWN;
    static final int DRAW_ANIMATION;
    static final int DRAW_MASK;
    static final int DUPLICATE_PARENT_STATE;
    protected static final int[] EMPTY_STATE_SET;
    static final int ENABLED;
    protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    static final int ENABLED_MASK;
    protected static final int[] ENABLED_SELECTED_STATE_SET;
    protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_STATE_SET;
    protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET;
    static final int FADING_EDGE_HORIZONTAL;
    static final int FADING_EDGE_MASK;
    static final int FADING_EDGE_NONE;
    static final int FADING_EDGE_VERTICAL;
    protected static final int[] FIRST_STATE_SET;
    private static final int FITS_SYSTEM_WINDOWS;
    private static final int FOCUSABLE;
    static final int FOCUSABLE_IN_TOUCH_MODE;
    private static final int FOCUSABLE_MASK;
    static final int FOCUSED;
    protected static final int[] FOCUSED_SELECTED_STATE_SET;
    protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] FOCUSED_STATE_SET;
    protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET;
    public static final int FOCUS_BACKWARD;
    public static final int FOCUS_DOWN;
    public static final int FOCUS_FORWARD;
    public static final int FOCUS_LEFT;
    public static final int FOCUS_RIGHT;
    public static final int FOCUS_UP;
    static final int FORCE_LAYOUT;
    public static final int GONE;
    public static final int HAPTIC_FEEDBACK_ENABLED;
    static final int HAS_BOUNDS;
    public static final int INVISIBLE;
    static final int IS_ROOT_NAMESPACE;
    public static final int KEEP_SCREEN_ON;
    protected static final int[] LAST_STATE_SET;
    private static final int LAYOUT_REQUIRED;
    static final int LONG_CLICKABLE;
    static final int MEASURED_DIMENSION_SET;
    protected static final int[] MIDDLE_STATE_SET;
    private static final int NOT_FOCUSABLE;
    public static final int NO_ID;
    static final int ONLY_DRAWS_BACKGROUND;
    private static final int PRESSED;
    protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FIRST_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_LAST_STATE_SET;
    protected static final int[] PRESSED_MIDDLE_STATE_SET;
    protected static final int[] PRESSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_SINGLE_STATE_SET;
    protected static final int[] PRESSED_STATE_SET;
    protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET;
    static final int REQUEST_TRANSPARENT_REGIONS;
    static final int SAVE_DISABLED;
    static final int SAVE_DISABLED_MASK;
    private static final int SAVE_STATE_CALLED;
    static final int SCROLLBARS_HORIZONTAL;
    static final int SCROLLBARS_INSET_MASK;
    public static final int SCROLLBARS_INSIDE_INSET;
    public static final int SCROLLBARS_INSIDE_OVERLAY;
    static final int SCROLLBARS_MASK;
    static final int SCROLLBARS_NONE;
    public static final int SCROLLBARS_OUTSIDE_INSET;
    static final int SCROLLBARS_OUTSIDE_MASK;
    public static final int SCROLLBARS_OUTSIDE_OVERLAY;
    static final int SCROLLBARS_STYLE_MASK;
    static final int SCROLLBARS_VERTICAL;
    static final int SCROLL_CONTAINER;
    static final int SCROLL_CONTAINER_ADDED;
    static final int SELECTED;
    protected static final int[] SELECTED_STATE_SET;
    protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] SINGLE_STATE_SET;
    static final int SKIP_DRAW;
    public static final int SOUND_EFFECTS_ENABLED;
    protected static final java.lang.String VIEW_LOG_TAG;
    private static final int[][] VIEW_STATE_SETS;
    private static final int[] VISIBILITY_FLAGS;
    static final int VISIBILITY_MASK;
    public static final int VISIBLE;
    static final int WANTS_FOCUS;
    static final int WILL_NOT_CACHE_DRAWING;
    static final int WILL_NOT_DRAW;
    protected static final int[] WINDOW_FOCUSED_STATE_SET;
    static long sInstanceCount;
    static final java.lang.ThreadLocal sThreadLocal;
    android.view.View$AttachInfo mAttachInfo;
    private android.graphics.drawable.Drawable mBGDrawable;
    private int mBackgroundResource;
    private boolean mBackgroundSizeChanged;
    protected int mBottom;
    protected android.content.Context mContext;
    protected android.view.animation.Animation mCurrentAnimation;
    private int[] mDrawableState;
    private java.lang.ref.SoftReference mDrawingCache;
    private int mDrawingCacheBackgroundColor;
    private android.view.ViewTreeObserver mFloatingTreeObserver;
    private boolean mHasPerformedLongPress;
    int mID;
    protected android.view.ViewGroup$LayoutParams mLayoutParams;
    protected int mLeft;
    protected int mMeasuredHeight;
    protected int mMeasuredWidth;
    private int mMinHeight;
    private int mMinWidth;
    private int mNextFocusDownId;
    private int mNextFocusLeftId;
    private int mNextFocusRightId;
    private int mNextFocusUpId;
    int mOldHeightMeasureSpec;
    int mOldWidthMeasureSpec;
    protected android.view.View$OnClickListener mOnClickListener;
    protected android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener;
    protected android.view.View$OnFocusChangeListener mOnFocusChangeListener;
    private android.view.View$OnKeyListener mOnKeyListener;
    protected android.view.View$OnLongClickListener mOnLongClickListener;
    private android.view.View$OnTouchListener mOnTouchListener;
    protected int mPaddingBottom;
    protected int mPaddingLeft;
    protected int mPaddingRight;
    protected int mPaddingTop;
    protected android.view.ViewParent mParent;
    private android.view.View$CheckForLongPress mPendingCheckForLongPress;
    int mPrivateFlags;
    private android.content.res.Resources mResources;
    protected int mRight;
    private android.view.View$ScrollabilityCache mScrollCache;
    protected int mScrollX;
    protected int mScrollY;
    protected java.lang.Object mTag;
    protected int mTop;
    private android.view.TouchDelegate mTouchDelegate;
    private android.view.View$UnsetPressedState mUnsetPressedState;
    int mUserPaddingBottom;
    int mUserPaddingRight;
    int mViewFlags;
    int mWindowAttachCount;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;
        int[] $r1, $r2;
        int[][] $r3;
        java.lang.ThreadLocal $r4;

        <android.view.View: int WILL_NOT_DRAW> = 128;

        <android.view.View: int WILL_NOT_CACHE_DRAWING> = 131072;

        <android.view.View: int WANTS_FOCUS> = 1;

        <android.view.View: int VISIBLE> = 0;

        <android.view.View: int VISIBILITY_MASK> = 12;

        <android.view.View: java.lang.String VIEW_LOG_TAG> = "View";

        <android.view.View: int SOUND_EFFECTS_ENABLED> = 134217728;

        <android.view.View: int SKIP_DRAW> = 128;

        <android.view.View: int SELECTED> = 4;

        <android.view.View: int SCROLL_CONTAINER_ADDED> = 1048576;

        <android.view.View: int SCROLL_CONTAINER> = 524288;

        <android.view.View: int SCROLLBARS_VERTICAL> = 512;

        <android.view.View: int SCROLLBARS_STYLE_MASK> = 50331648;

        <android.view.View: int SCROLLBARS_OUTSIDE_OVERLAY> = 33554432;

        <android.view.View: int SCROLLBARS_OUTSIDE_MASK> = 33554432;

        <android.view.View: int SCROLLBARS_OUTSIDE_INSET> = 50331648;

        <android.view.View: int SCROLLBARS_NONE> = 0;

        <android.view.View: int SCROLLBARS_MASK> = 768;

        <android.view.View: int SCROLLBARS_INSIDE_OVERLAY> = 0;

        <android.view.View: int SCROLLBARS_INSIDE_INSET> = 16777216;

        <android.view.View: int SCROLLBARS_INSET_MASK> = 16777216;

        <android.view.View: int SCROLLBARS_HORIZONTAL> = 256;

        <android.view.View: int SAVE_STATE_CALLED> = 131072;

        <android.view.View: int SAVE_DISABLED_MASK> = 65536;

        <android.view.View: int SAVE_DISABLED> = 65536;

        <android.view.View: int REQUEST_TRANSPARENT_REGIONS> = 512;

        <android.view.View: int PRESSED> = 16384;

        <android.view.View: int ONLY_DRAWS_BACKGROUND> = 256;

        <android.view.View: int NO_ID> = -1;

        <android.view.View: int NOT_FOCUSABLE> = 0;

        <android.view.View: int MEASURED_DIMENSION_SET> = 2048;

        <android.view.View: int LONG_CLICKABLE> = 2097152;

        <android.view.View: int LAYOUT_REQUIRED> = 8192;

        <android.view.View: int KEEP_SCREEN_ON> = 67108864;

        <android.view.View: int IS_ROOT_NAMESPACE> = 8;

        <android.view.View: int INVISIBLE> = 4;

        <android.view.View: int HAS_BOUNDS> = 16;

        <android.view.View: int HAPTIC_FEEDBACK_ENABLED> = 268435456;

        <android.view.View: int GONE> = 8;

        <android.view.View: int FORCE_LAYOUT> = 4096;

        <android.view.View: int FOCUS_UP> = 33;

        <android.view.View: int FOCUS_RIGHT> = 66;

        <android.view.View: int FOCUS_LEFT> = 17;

        <android.view.View: int FOCUS_FORWARD> = 2;

        <android.view.View: int FOCUS_DOWN> = 130;

        <android.view.View: int FOCUS_BACKWARD> = 1;

        <android.view.View: int FOCUSED> = 2;

        <android.view.View: int FOCUSABLE_MASK> = 1;

        <android.view.View: int FOCUSABLE_IN_TOUCH_MODE> = 262144;

        <android.view.View: int FOCUSABLE> = 1;

        <android.view.View: int FITS_SYSTEM_WINDOWS> = 2;

        <android.view.View: int FADING_EDGE_VERTICAL> = 8192;

        <android.view.View: int FADING_EDGE_NONE> = 0;

        <android.view.View: int FADING_EDGE_MASK> = 12288;

        <android.view.View: int FADING_EDGE_HORIZONTAL> = 4096;

        <android.view.View: int ENABLED_MASK> = 32;

        <android.view.View: int ENABLED> = 0;

        <android.view.View: int DUPLICATE_PARENT_STATE> = 4194304;

        <android.view.View: int DRAW_MASK> = 128;

        <android.view.View: int DRAW_ANIMATION> = 64;

        <android.view.View: int DRAWN> = 32;

        <android.view.View: int DRAWING_CACHE_VALID> = 32768;

        <android.view.View: int DRAWING_CACHE_QUALITY_MASK> = 1572864;

        <android.view.View: int DRAWING_CACHE_QUALITY_LOW> = 524288;

        <android.view.View: int DRAWING_CACHE_QUALITY_HIGH> = 1048576;

        <android.view.View: int DRAWING_CACHE_QUALITY_AUTO> = 0;

        <android.view.View: int DRAWING_CACHE_ENABLED> = 32768;

        <android.view.View: int DRAWABLE_STATE_DIRTY> = 1024;

        <android.view.View: int DISABLED> = 32;

        <android.view.View: boolean DBG> = 0;

        <android.view.View: int CLICKABLE> = 16384;

        <android.view.View: int ANIMATION_STARTED> = 65536;

        <android.view.View: int ALPHA_SET> = 262144;

        $r0 = class "android/view/View";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label2;

        $z0 = 1;

     label1:
        <android.view.View: boolean $assertionsDisabled> = $z0;

        $r1 = newarray (int)[3];

        $r1[0] = 0;

        $r1[1] = 4;

        $r1[2] = 8;

        <android.view.View: int[] VISIBILITY_FLAGS> = $r1;

        $r1 = newarray (int)[3];

        $r1[0] = 0;

        $r1[1] = 524288;

        $r1[2] = 1048576;

        <android.view.View: int[] DRAWING_CACHE_QUALITY_FLAGS> = $r1;

        $r1 = newarray (int)[0];

        <android.view.View: int[] EMPTY_STATE_SET> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842910;

        <android.view.View: int[] ENABLED_STATE_SET> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842908;

        <android.view.View: int[] FOCUSED_STATE_SET> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842913;

        <android.view.View: int[] SELECTED_STATE_SET> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842919;

        <android.view.View: int[] PRESSED_STATE_SET> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842909;

        <android.view.View: int[] WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] ENABLED_STATE_SET>;

        $r2 = <android.view.View: int[] FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] ENABLED_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] ENABLED_STATE_SET>;

        $r2 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] ENABLED_SELECTED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] ENABLED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] ENABLED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] FOCUSED_STATE_SET>;

        $r2 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] FOCUSED_SELECTED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] FOCUSED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] SELECTED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] ENABLED_FOCUSED_STATE_SET>;

        $r2 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] ENABLED_FOCUSED_SELECTED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] ENABLED_FOCUSED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] ENABLED_SELECTED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] FOCUSED_SELECTED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] ENABLED_FOCUSED_SELECTED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_STATE_SET>;

        $r2 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_SELECTED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_SELECTED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_STATE_SET>;

        $r2 = <android.view.View: int[] FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_FOCUSED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_FOCUSED_STATE_SET>;

        $r2 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_FOCUSED_SELECTED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_FOCUSED_SELECTED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_STATE_SET>;

        $r2 = <android.view.View: int[] ENABLED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_ENABLED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_STATE_SET>;

        $r2 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_ENABLED_SELECTED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_SELECTED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_STATE_SET>;

        $r2 = <android.view.View: int[] FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_FOCUSED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_FOCUSED_STATE_SET>;

        $r2 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET> = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET>;

        $r2 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r1 = staticinvoke <android.view.View: int[] stateSetUnion(int[],int[])>($r1, $r2);

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r1;

        $r3 = newarray (int[])[32];

        $r1 = <android.view.View: int[] EMPTY_STATE_SET>;

        $r3[0] = $r1;

        $r1 = <android.view.View: int[] WINDOW_FOCUSED_STATE_SET>;

        $r3[1] = $r1;

        $r1 = <android.view.View: int[] SELECTED_STATE_SET>;

        $r3[2] = $r1;

        $r1 = <android.view.View: int[] SELECTED_WINDOW_FOCUSED_STATE_SET>;

        $r3[3] = $r1;

        $r1 = <android.view.View: int[] FOCUSED_STATE_SET>;

        $r3[4] = $r1;

        $r1 = <android.view.View: int[] FOCUSED_WINDOW_FOCUSED_STATE_SET>;

        $r3[5] = $r1;

        $r1 = <android.view.View: int[] FOCUSED_SELECTED_STATE_SET>;

        $r3[6] = $r1;

        $r1 = <android.view.View: int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET>;

        $r3[7] = $r1;

        $r1 = <android.view.View: int[] ENABLED_STATE_SET>;

        $r3[8] = $r1;

        $r1 = <android.view.View: int[] ENABLED_WINDOW_FOCUSED_STATE_SET>;

        $r3[9] = $r1;

        $r1 = <android.view.View: int[] ENABLED_SELECTED_STATE_SET>;

        $r3[10] = $r1;

        $r1 = <android.view.View: int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET>;

        $r3[11] = $r1;

        $r1 = <android.view.View: int[] ENABLED_FOCUSED_STATE_SET>;

        $r3[12] = $r1;

        $r1 = <android.view.View: int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET>;

        $r3[13] = $r1;

        $r1 = <android.view.View: int[] ENABLED_FOCUSED_SELECTED_STATE_SET>;

        $r3[14] = $r1;

        $r1 = <android.view.View: int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET>;

        $r3[15] = $r1;

        $r1 = <android.view.View: int[] PRESSED_STATE_SET>;

        $r3[16] = $r1;

        $r1 = <android.view.View: int[] PRESSED_WINDOW_FOCUSED_STATE_SET>;

        $r3[17] = $r1;

        $r1 = <android.view.View: int[] PRESSED_SELECTED_STATE_SET>;

        $r3[18] = $r1;

        $r1 = <android.view.View: int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET>;

        $r3[19] = $r1;

        $r1 = <android.view.View: int[] PRESSED_FOCUSED_STATE_SET>;

        $r3[20] = $r1;

        $r1 = <android.view.View: int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET>;

        $r3[21] = $r1;

        $r1 = <android.view.View: int[] PRESSED_FOCUSED_SELECTED_STATE_SET>;

        $r3[22] = $r1;

        $r1 = <android.view.View: int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET>;

        $r3[23] = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_STATE_SET>;

        $r3[24] = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET>;

        $r3[25] = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_SELECTED_STATE_SET>;

        $r3[26] = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET>;

        $r3[27] = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_FOCUSED_STATE_SET>;

        $r3[28] = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET>;

        $r3[29] = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET>;

        $r3[30] = $r1;

        $r1 = <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET>;

        $r3[31] = $r1;

        <android.view.View: int[][] VIEW_STATE_SETS> = $r3;

        $r1 = newarray (int)[1];

        $r1[0] = 16842918;

        <android.view.View: int[] LAST_STATE_SET> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842916;

        <android.view.View: int[] FIRST_STATE_SET> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842917;

        <android.view.View: int[] MIDDLE_STATE_SET> = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 16842915;

        <android.view.View: int[] SINGLE_STATE_SET> = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 16842918;

        $r1[1] = 16842919;

        <android.view.View: int[] PRESSED_LAST_STATE_SET> = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 16842916;

        $r1[1] = 16842919;

        <android.view.View: int[] PRESSED_FIRST_STATE_SET> = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 16842917;

        $r1[1] = 16842919;

        <android.view.View: int[] PRESSED_MIDDLE_STATE_SET> = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 16842915;

        $r1[1] = 16842919;

        <android.view.View: int[] PRESSED_SINGLE_STATE_SET> = $r1;

        $r4 = new java.lang.ThreadLocal;

        specialinvoke $r4.<java.lang.ThreadLocal: void <init>()>();

        <android.view.View: java.lang.ThreadLocal sThreadLocal> = $r4;

        <android.view.View: long sInstanceCount> = 0L;

        return;

     label2:
        $z0 = 0;

        goto label1;

        return;
    }

    void <init>()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        $r0.<android.view.View: int mID> = -1;

        $r0.<android.view.View: int mOldWidthMeasureSpec> = -2147483648;

        $r0.<android.view.View: int mOldHeightMeasureSpec> = -2147483648;

        $r0.<android.view.View: android.content.res.Resources mResources> = null;

        $r0.<android.view.View: int[] mDrawableState> = null;

        $r0.<android.view.View: int mNextFocusLeftId> = -1;

        $r0.<android.view.View: int mNextFocusRightId> = -1;

        $r0.<android.view.View: int mNextFocusUpId> = -1;

        $r0.<android.view.View: int mNextFocusDownId> = -1;

        $r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = null;

        $r0.<android.view.View: int mDrawingCacheBackgroundColor> = 0;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.view.View $r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        long $l0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        $r0.<android.view.View: int mID> = -1;

        $r0.<android.view.View: int mOldWidthMeasureSpec> = -2147483648;

        $r0.<android.view.View: int mOldHeightMeasureSpec> = -2147483648;

        $r0.<android.view.View: android.content.res.Resources mResources> = null;

        $r0.<android.view.View: int[] mDrawableState> = null;

        $r0.<android.view.View: int mNextFocusLeftId> = -1;

        $r0.<android.view.View: int mNextFocusRightId> = -1;

        $r0.<android.view.View: int mNextFocusUpId> = -1;

        $r0.<android.view.View: int mNextFocusDownId> = -1;

        $r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = null;

        $r0.<android.view.View: int mDrawingCacheBackgroundColor> = 0;

        $r0.<android.view.View: android.content.Context mContext> = $r1;

        if $r1 == null goto label2;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

     label1:
        $r0.<android.view.View: android.content.res.Resources mResources> = $r2;

        $r0.<android.view.View: int mViewFlags> = 402653184;

        $l0 = <android.view.View: long sInstanceCount>;

        $l0 = $l0 + 1L;

        <android.view.View: long sInstanceCount> = $l0;

        return;

     label2:
        $r2 = null;

        goto label1;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.View $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke $r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.view.View $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        int[] $r3;
        android.content.res.TypedArray $r4;
        android.graphics.drawable.Drawable $r5;
        boolean $z0, $z1;
        java.lang.CharSequence $r6;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke $r0.<android.view.View: void <init>(android.content.Context)>($r1);

        $r3 = <com.android.internal.R$styleable: int[] View>;

        $r4 = virtualinvoke $r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r2, $r3, $i0, 0);

        $r5 = null;

        $i1 = -1;

        $i2 = -1;

        $i3 = -1;

        $i4 = -1;

        $i5 = -1;

        $i6 = 0;

        $i7 = 0;

        $z0 = 0;

        $i8 = 0;

        $i9 = 0;

        $i0 = 0;

        $i10 = virtualinvoke $r4.<android.content.res.TypedArray: int getIndexCount()>();

        $i11 = 0;

     label01:
        if $i11 >= $i10 goto label35;

        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getIndex(int)>($i11);

        lookupswitch($i12)
        {
            case 7: goto label26;
            case 8: goto label11;
            case 9: goto label12;
            case 10: goto label09;
            case 11: goto label10;
            case 12: goto label03;
            case 13: goto label04;
            case 14: goto label05;
            case 15: goto label06;
            case 16: goto label07;
            case 17: goto label08;
            case 18: goto label14;
            case 19: goto label15;
            case 20: goto label20;
            case 21: goto label13;
            case 22: goto label24;
            case 23: goto label25;
            case 24: goto label02;
            case 25: goto label29;
            case 26: goto label30;
            case 27: goto label31;
            case 28: goto label32;
            case 29: goto label16;
            case 30: goto label17;
            case 31: goto label18;
            case 32: goto label21;
            case 33: goto label19;
            case 34: goto label33;
            case 35: goto label34;
            case 36: goto label22;
            case 37: goto label28;
            case 38: goto label27;
            case 39: goto label23;
            default: goto label02;
        };

     label02:
        $i11 = $i11 + 1;

        goto label01;

     label03:
        $r5 = virtualinvoke $r4.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>($i12);

        goto label02;

     label04:
        $i5 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i12, -1);

        goto label02;

     label05:
        $i1 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i12, -1);

        goto label02;

     label06:
        $i2 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i12, -1);

        goto label02;

     label07:
        $i3 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i12, -1);

        goto label02;

     label08:
        $i4 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i12, -1);

        goto label02;

     label09:
        $i8 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>($i12, 0);

        goto label02;

     label10:
        $i9 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>($i12, 0);

        goto label02;

     label11:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getResourceId(int,int)>($i12, -1);

        $r0.<android.view.View: int mID> = $i12;

        goto label02;

     label12:
        $r6 = virtualinvoke $r4.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>($i12);

        $r0.<android.view.View: java.lang.Object mTag> = $r6;

        goto label02;

     label13:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 0);

        if $z1 == 0 goto label02;

        $i6 = $i6 | 2;

        $i7 = $i7 | 2;

        goto label02;

     label14:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 0);

        if $z1 == 0 goto label02;

        $i6 = $i6 | 1;

        $i7 = $i7 | 1;

        goto label02;

     label15:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 0);

        if $z1 == 0 goto label02;

        $i6 = $i6 | 262145;

        $i7 = $i7 | 262145;

        goto label02;

     label16:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 0);

        if $z1 == 0 goto label02;

        $i6 = $i6 | 16384;

        $i7 = $i7 | 16384;

        goto label02;

     label17:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 0);

        if $z1 == 0 goto label02;

        $i6 = $i6 | 2097152;

        $i7 = $i7 | 2097152;

        goto label02;

     label18:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 1);

        if $z1 != 0 goto label02;

        $i6 = $i6 | 65536;

        $i7 = $i7 | 65536;

        goto label02;

     label19:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 0);

        if $z1 == 0 goto label02;

        $i6 = $i6 | 4194304;

        $i7 = $i7 | 4194304;

        goto label02;

     label20:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getInt(int,int)>($i12, 0);

        if $i12 == 0 goto label02;

        $r3 = <android.view.View: int[] VISIBILITY_FLAGS>;

        $i12 = $r3[$i12];

        $i6 = $i6 | $i12;

        $i7 = $i7 | 12;

        goto label02;

     label21:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getInt(int,int)>($i12, 0);

        if $i12 == 0 goto label02;

        $r3 = <android.view.View: int[] DRAWING_CACHE_QUALITY_FLAGS>;

        $i12 = $r3[$i12];

        $i6 = $i6 | $i12;

        $i7 = $i7 | 1572864;

        goto label02;

     label22:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 1);

        if $z1 != 0 goto label23;

        $i6 = $i6 & -134217729;

        $i7 = $i7 | 134217728;

     label23:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 1);

        if $z1 != 0 goto label24;

        $i6 = $i6 & -268435457;

        $i7 = $i7 | 268435456;

     label24:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getInt(int,int)>($i12, 0);

        if $i12 == 0 goto label02;

        $i6 = $i6 | $i12;

        $i7 = $i7 | 768;

        virtualinvoke $r0.<android.view.View: void initializeScrollbars(android.content.res.TypedArray)>($r4);

        goto label02;

     label25:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getInt(int,int)>($i12, 0);

        if $i12 == 0 goto label02;

        $i6 = $i6 | $i12;

        $i7 = $i7 | 12288;

        virtualinvoke $r0.<android.view.View: void initializeFadingEdge(android.content.res.TypedArray)>($r4);

        goto label02;

     label26:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getInt(int,int)>($i12, 0);

        $i0 = $i12;

        if $i12 == 0 goto label02;

        $i12 = 50331648 & $i12;

        $i6 = $i6 | $i12;

        $i7 = $i7 | 50331648;

        goto label02;

     label27:
        $z0 = 1;

        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 0);

        if $z1 == 0 goto label02;

        virtualinvoke $r0.<android.view.View: void setScrollContainer(boolean)>(1);

        goto label02;

     label28:
        $z1 = virtualinvoke $r4.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>($i12, 0);

        if $z1 == 0 goto label02;

        $i6 = $i6 | 67108864;

        $i7 = $i7 | 67108864;

        goto label02;

     label29:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getResourceId(int,int)>($i12, -1);

        $r0.<android.view.View: int mNextFocusLeftId> = $i12;

        goto label02;

     label30:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getResourceId(int,int)>($i12, -1);

        $r0.<android.view.View: int mNextFocusRightId> = $i12;

        goto label02;

     label31:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getResourceId(int,int)>($i12, -1);

        $r0.<android.view.View: int mNextFocusUpId> = $i12;

        goto label02;

     label32:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getResourceId(int,int)>($i12, -1);

        $r0.<android.view.View: int mNextFocusDownId> = $i12;

        goto label02;

     label33:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i12, 0);

        $r0.<android.view.View: int mMinWidth> = $i12;

        goto label02;

     label34:
        $i12 = virtualinvoke $r4.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>($i12, 0);

        $r0.<android.view.View: int mMinHeight> = $i12;

        goto label02;

     label35:
        if $r5 == null goto label36;

        virtualinvoke $r0.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r5);

     label36:
        if $i5 < 0 goto label37;

        $i1 = $i5;

        $i2 = $i5;

        $i3 = $i5;

        $i4 = $i5;

     label37:
        if $i1 < 0 goto label47;

        $i10 = $i1;

     label38:
        if $i2 < 0 goto label48;

     label39:
        if $i3 < 0 goto label49;

     label40:
        if $i4 < 0 goto label50;

     label41:
        virtualinvoke $r0.<android.view.View: void setPadding(int,int,int,int)>($i10, $i2, $i3, $i4);

        if $i7 == 0 goto label42;

        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i6, $i7);

     label42:
        if $i0 == 0 goto label43;

        specialinvoke $r0.<android.view.View: void recomputePadding()>();

     label43:
        if $i8 != 0 goto label44;

        if $i9 == 0 goto label45;

     label44:
        virtualinvoke $r0.<android.view.View: void scrollTo(int,int)>($i8, $i9);

     label45:
        if $z0 != 0 goto label46;

        $i0 = $i6 & 512;

        if $i0 == 0 goto label46;

        virtualinvoke $r0.<android.view.View: void setScrollContainer(boolean)>(1);

     label46:
        virtualinvoke $r4.<android.content.res.TypedArray: void recycle()>();

        return;

     label47:
        $i10 = $r0.<android.view.View: int mPaddingLeft>;

        goto label38;

     label48:
        $i2 = $r0.<android.view.View: int mPaddingTop>;

        goto label39;

     label49:
        $i3 = $r0.<android.view.View: int mPaddingRight>;

        goto label40;

     label50:
        $i4 = $r0.<android.view.View: int mPaddingBottom>;

        goto label41;
    }

    static boolean access$102(android.view.View, boolean)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $z0 := @parameter1: boolean;

        $r0.<android.view.View: boolean mHasPerformedLongPress> = $z0;

        return $z0;
    }

    private static void captureViewInfo(java.lang.String, android.view.View)
    {
        java.lang.String $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.view.View;

        if $r1 == null goto label2;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("debug.captureview", 0);

        if $i0 != 0 goto label1;

        return;

     label1:
        staticinvoke <android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)>($r0, $r1);

        return;

     label2:
        return;
    }

    protected static java.lang.String debugIndent(int)
    {
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r0, $r1;
        java.lang.String $r2;

        $i0 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        $i1 = $i0 * 2;

        $i1 = $i1 + 3;

        $i1 = $i1 * 2;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i1);

        $i1 = 0;

     label1:
        $i2 = $i0 * 2;

        $i2 = $i2 + 3;

        if $i1 >= $i2 goto label2;

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static android.view.View findViewShouldExist(android.view.View, int)
    {
        android.view.View $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r0 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>($i0);

        if $r0 != null goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t find next focus view specified by user for id ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r2);

        return $r0;

     label1:
        return $r0;
    }

    public static int getDefaultSize(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i1);

        $i1 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i1);

        lookupswitch($i2)
        {
            case -2147483648: goto label3;
            case 0: goto label2;
            case 1073741824: goto label3;
            default: goto label1;
        };

     label1:
        return $i0;

     label2:
        return $i0;

     label3:
        return $i1;
    }

    private boolean hasAncestorThatBlocksDescendantFocus()
    {
        android.view.View $r0;
        android.view.ViewParent $r1;
        boolean $z0;
        android.view.ViewGroup $r2;
        int $i0;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

     label1:
        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label3;

        $r2 = (android.view.ViewGroup) $r1;

        $i0 = virtualinvoke $r2.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 393216 goto label2;

        return 1;

     label2:
        $r1 = virtualinvoke $r2.<android.view.View: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return 0;
    }

    public static android.view.View inflate(android.content.Context, int, android.view.ViewGroup)
    {
        android.content.Context $r0;
        int $i0;
        android.view.ViewGroup $r1;
        android.view.LayoutInflater $r2;
        android.view.View $r3;

        $r0 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.view.ViewGroup;

        $r2 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>($r0);

        $r3 = virtualinvoke $r2.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>($i0, $r1);

        return $r3;
    }

    private void initScrollCache()
    {
        android.view.View $r0;
        android.view.ViewConfiguration $r1;
        android.view.View$ScrollabilityCache $r2;
        android.content.Context $r3;

        $r0 := @this: android.view.View;

        $r2 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r2 != null goto label1;

        $r2 = new android.view.View$ScrollabilityCache;

        $r3 = $r0.<android.view.View: android.content.Context mContext>;

        $r1 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        specialinvoke $r2.<android.view.View$ScrollabilityCache: void <init>(android.view.ViewConfiguration)>($r1);

        $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache> = $r2;

        return;

     label1:
        return;
    }

    protected static int[] mergeDrawableStates(int[], int[])
    {
        int[] $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i0 = lengthof $r0;

        $i0 = $i0 - 1;

     label1:
        if $i0 < 0 goto label2;

        $i1 = $r0[$i0];

        if $i1 != 0 goto label2;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        $i0 = $i0 + 1;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r0, $i0, $i1);

        return $r0;
    }

    private void onDrawHorizontalScrollBar(android.graphics.Canvas, android.widget.ScrollBarDrawable, int, int, int)
    {
        android.view.View $r0;
        android.graphics.Canvas $r1;
        android.widget.ScrollBarDrawable $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        byte $b7;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.widget.ScrollBarDrawable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i5 = $r0.<android.view.View: int mViewFlags>;

        $i3 = $r0.<android.view.View: int mScrollX>;

        $i4 = $r0.<android.view.View: int mScrollY>;

        $i6 = 33554432 & $i5;

        if $i6 != 0 goto label3;

        $b7 = -1;

     label1:
        $i1 = $i4 + $i1;

        $i1 = $i1 - $i2;

        $i4 = $r0.<android.view.View: int mUserPaddingBottom>;

        $i4 = $i4 & $b7;

        $i1 = $i1 - $i4;

        $i5 = $i5 & 512;

        if $i5 != 512 goto label4;

        $i5 = virtualinvoke $r0.<android.view.View: int getVerticalScrollbarWidth()>();

     label2:
        $i4 = $r0.<android.view.View: int mPaddingLeft>;

        $i4 = $i4 & $b7;

        $i4 = $i4 + $i3;

        $i0 = $i3 + $i0;

        $i3 = $r0.<android.view.View: int mUserPaddingRight>;

        $i3 = $i3 & $b7;

        $i0 = $i0 - $i3;

        $i0 = $i0 - $i5;

        $i2 = $i1 + $i2;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i4, $i1, $i0, $i2);

        $i0 = virtualinvoke $r0.<android.view.View: int computeHorizontalScrollRange()>();

        $i1 = virtualinvoke $r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i2 = virtualinvoke $r0.<android.view.View: int computeHorizontalScrollExtent()>();

        virtualinvoke $r2.<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)>($i0, $i1, $i2, 0);

        virtualinvoke $r2.<android.widget.ScrollBarDrawable: void draw(android.graphics.Canvas)>($r1);

        return;

     label3:
        $b7 = 0;

        goto label1;

     label4:
        $i5 = 0;

        goto label2;
    }

    private void onDrawScrollBars(android.graphics.Canvas)
    {
        android.view.View $r0;
        android.graphics.Canvas $r1;
        android.widget.ScrollBarDrawable $r2;
        int $i0, $i1, $i2, $i3;
        android.view.View$ScrollabilityCache $r3;
        boolean $z0, $z1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Canvas;

        $r3 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r3 == null goto label08;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 256;

        if $i1 != 256 goto label06;

        $z0 = 1;

     label01:
        $i0 = $i0 & 512;

        if $i0 != 512 goto label07;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isVerticalScrollBarHidden()>();

        if $z1 != 0 goto label07;

        $z1 = 1;

     label02:
        if $z1 != 0 goto label03;

        if $z0 == 0 goto label09;

     label03:
        $i0 = $r0.<android.view.View: int mRight>;

        $i1 = $r0.<android.view.View: int mLeft>;

        $i0 = $i0 - $i1;

        $i1 = $r0.<android.view.View: int mBottom>;

        $i2 = $r0.<android.view.View: int mTop>;

        $i1 = $i1 - $i2;

        $r2 = $r3.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        $i2 = virtualinvoke $r2.<android.widget.ScrollBarDrawable: int getSize(boolean)>(0);

        $i3 = $i2;

        if $i2 > 0 goto label04;

        $i3 = $r3.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label04:
        if $z0 == 0 goto label05;

        specialinvoke $r0.<android.view.View: void onDrawHorizontalScrollBar(android.graphics.Canvas,android.widget.ScrollBarDrawable,int,int,int)>($r1, $r2, $i0, $i1, $i3);

     label05:
        if $z1 == 0 goto label10;

        specialinvoke $r0.<android.view.View: void onDrawVerticalScrollBar(android.graphics.Canvas,android.widget.ScrollBarDrawable,int,int,int)>($r1, $r2, $i0, $i1, $i3);

        return;

     label06:
        $z0 = 0;

        goto label01;

     label07:
        $z1 = 0;

        goto label02;

     label08:
        return;

     label09:
        return;

     label10:
        return;
    }

    private void onDrawVerticalScrollBar(android.graphics.Canvas, android.widget.ScrollBarDrawable, int, int, int)
    {
        android.view.View $r0;
        android.graphics.Canvas $r1;
        android.widget.ScrollBarDrawable $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        byte $b6;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.widget.ScrollBarDrawable;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 = $r0.<android.view.View: int mScrollX>;

        $i4 = $r0.<android.view.View: int mScrollY>;

        $i5 = $r0.<android.view.View: int mViewFlags>;

        $i5 = $i5 & 33554432;

        if $i5 != 0 goto label2;

        $b6 = -1;

     label1:
        $i0 = $i3 + $i0;

        $i0 = $i0 - $i2;

        $i3 = $r0.<android.view.View: int mUserPaddingRight>;

        $i3 = $i3 & $b6;

        $i0 = $i0 - $i3;

        $i3 = $r0.<android.view.View: int mPaddingTop>;

        $i3 = $i3 & $b6;

        $i3 = $i3 + $i4;

        $i2 = $i0 + $i2;

        $i1 = $i4 + $i1;

        $i4 = $r0.<android.view.View: int mUserPaddingBottom>;

        $i4 = $i4 & $b6;

        $i1 = $i1 - $i4;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i0, $i3, $i2, $i1);

        $i0 = virtualinvoke $r0.<android.view.View: int computeVerticalScrollRange()>();

        $i1 = virtualinvoke $r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i2 = virtualinvoke $r0.<android.view.View: int computeVerticalScrollExtent()>();

        virtualinvoke $r2.<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)>($i0, $i1, $i2, 1);

        virtualinvoke $r2.<android.widget.ScrollBarDrawable: void draw(android.graphics.Canvas)>($r1);

        return;

     label2:
        $b6 = 0;

        goto label1;
    }

    private void postCheckForLongClick()
    {
        android.view.View $r0;
        int $i0;
        android.view.View$CheckForLongPress $r1;
        long $l1;

        $r0 := @this: android.view.View;

        $r0.<android.view.View: boolean mHasPerformedLongPress> = 0;

        $r1 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r1 != null goto label1;

        $r1 = new android.view.View$CheckForLongPress;

        specialinvoke $r1.<android.view.View$CheckForLongPress: void <init>(android.view.View)>($r0);

        $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress> = $r1;

     label1:
        $r1 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r1.<android.view.View$CheckForLongPress: void rememberWindowAttachCount()>();

        $r1 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l1 = (long) $i0;

        virtualinvoke $r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r1, $l1);

        return;
    }

    private static java.lang.String printFlags(int)
    {
        int $i0, $i1, $i2;
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $i0 := @parameter0: int;

        $r0 = "";

        $i1 = 0;

        $i2 = $i0 & 1;

        if $i2 != 1 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TAKES_FOCUS");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = 0 + 1;

     label1:
        $i0 = $i0 & 12;

        lookupswitch($i0)
        {
            case 4: goto label3;
            case 8: goto label5;
            default: goto label2;
        };

     label2:
        return $r0;

     label3:
        if $i1 <= 0 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INVISIBLE");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label5:
        if $i1 <= 0 goto label6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GONE");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    private static java.lang.String printPrivateFlags(int)
    {
        int $i0, $i1, $i2;
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $i0 := @parameter0: int;

        $r0 = "";

        $i1 = 0;

        $i2 = $i0 & 1;

        if $i2 != 1 goto label01;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WANTS_FOCUS");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = 0 + 1;

     label01:
        $i2 = $i0 & 2;

        if $i2 != 2 goto label03;

        if $i1 <= 0 goto label02;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FOCUSED");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

     label03:
        $i2 = $i0 & 4;

        if $i2 != 4 goto label05;

        if $i1 <= 0 goto label04;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECTED");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

     label05:
        $i2 = $i0 & 8;

        if $i2 != 8 goto label07;

        if $i1 <= 0 goto label06;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IS_ROOT_NAMESPACE");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

     label07:
        $i2 = $i0 & 16;

        if $i2 != 16 goto label09;

        if $i1 <= 0 goto label08;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HAS_BOUNDS");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = $i1 + 1;

     label09:
        $i0 = $i0 & 32;

        if $i0 != 32 goto label11;

        if $i1 <= 0 goto label10;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DRAWN");

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label11:
        return $r0;
    }

    private void recomputePadding()
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPaddingLeft>;

        $i1 = $r0.<android.view.View: int mPaddingTop>;

        $i2 = $r0.<android.view.View: int mUserPaddingRight>;

        $i3 = $r0.<android.view.View: int mUserPaddingBottom>;

        virtualinvoke $r0.<android.view.View: void setPadding(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    public static int resolveSize(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i1);

        $i1 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i1);

        lookupswitch($i2)
        {
            case -2147483648: goto label3;
            case 0: goto label2;
            case 1073741824: goto label4;
            default: goto label1;
        };

     label1:
        return $i0;

     label2:
        return $i0;

     label3:
        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        return $i0;

     label4:
        return $i1;
    }

    private static int[] stateSetUnion(int[], int[])
    {
        int[] $r0, $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;
        java.lang.AssertionError $r4;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        $i1 = lengthof $r0;

        $i2 = lengthof $r1;

        $i0 = $i1 + $i2;

        $r3 = newarray (int)[$i0];

        $i4 = 0;

        $i5 = 0;

        $r2 = <com.android.internal.R$styleable: int[] ViewDrawableStates>;

        $i0 = lengthof $r2;

        $i6 = 0;

        $i7 = 0;

     label1:
        if $i6 >= $i0 goto label5;

        $i3 = $r2[$i6];

        if $i4 >= $i1 goto label3;

        $i8 = $r0[$i4];

        if $i8 != $i3 goto label3;

        $i8 = $i7 + 1;

        $r3[$i7] = $i3;

        $i4 = $i4 + 1;

     label2:
        if $i8 <= 1 goto label4;

        $z0 = <android.view.View: boolean $assertionsDisabled>;

        if $z0 != 0 goto label4;

        $i3 = $i8 - 1;

        $i3 = $r3[$i3];

        $i7 = $i8 - 2;

        $i7 = $r3[$i7];

        if $i3 > $i7 goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label3:
        if $i5 >= $i2 goto label6;

        $i8 = $r1[$i5];

        if $i8 != $i3 goto label6;

        $i8 = $i7 + 1;

        $r3[$i7] = $i3;

        $i5 = $i5 + 1;

        goto label2;

     label4:
        $i6 = $i6 + 1;

        $i7 = $i8;

        goto label1;

     label5:
        return $r3;

     label6:
        $i8 = $i7;

        goto label2;
    }

    public void addFocusables(java.util.ArrayList, int)
    {
        android.view.View $r0;
        java.util.ArrayList $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: java.util.ArrayList;

        $i0 := @parameter1: int;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isFocusable()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke $r0.<android.view.View: boolean isInTouchMode()>();

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z0 == 0 goto label3;

     label2:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        return;

     label3:
        return;
    }

    public void addTouchables(java.util.ArrayList)
    {
        android.view.View $r0;
        java.util.ArrayList $r1;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: java.util.ArrayList;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 16384;

        if $i1 == 16384 goto label1;

        $i1 = $i0 & 2097152;

        if $i1 != 2097152 goto label2;

     label1:
        $i0 = $i0 & 32;

        if $i0 != 0 goto label3;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        return;

     label2:
        return;

     label3:
        return;
    }

    public void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable, android.graphics.Region)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1;
        android.graphics.Region $r2, $r4;
        int $i0, $i1, $i2;
        android.graphics.Region$Op $r3;
        android.graphics.Rect $r5;
        android.view.View$AttachInfo $r6;
        int[] $r7;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 := @parameter1: android.graphics.Region;

        $r4 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>();

        $r5 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $r6 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label5;

        if $r6 == null goto label5;

        $i1 = virtualinvoke $r0.<android.view.View: int getRight()>();

        $i0 = virtualinvoke $r0.<android.view.View: int getLeft()>();

        $i1 = $i1 - $i0;

        $i0 = virtualinvoke $r0.<android.view.View: int getBottom()>();

        $i2 = virtualinvoke $r0.<android.view.View: int getTop()>();

        $i0 = $i0 - $i2;

        $i2 = $r5.<android.graphics.Rect: int left>;

        if $i2 <= 0 goto label1;

        $i2 = $r5.<android.graphics.Rect: int left>;

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r4.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, 0, $i2, $i0, $r3);

     label1:
        $i2 = $r5.<android.graphics.Rect: int right>;

        if $i2 >= $i1 goto label2;

        $i2 = $r5.<android.graphics.Rect: int right>;

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r4.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i2, 0, $i1, $i0, $r3);

     label2:
        $i2 = $r5.<android.graphics.Rect: int top>;

        if $i2 <= 0 goto label3;

        $i2 = $r5.<android.graphics.Rect: int top>;

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r4.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, 0, $i1, $i2, $r3);

     label3:
        $i2 = $r5.<android.graphics.Rect: int bottom>;

        if $i2 >= $i0 goto label4;

        $i2 = $r5.<android.graphics.Rect: int bottom>;

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r4.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, $i2, $i1, $i0, $r3);

     label4:
        $r7 = $r6.<android.view.View$AttachInfo: int[] mTransparentLocation>;

        virtualinvoke $r0.<android.view.View: void getLocationInWindow(int[])>($r7);

        $i1 = $r7[0];

        $i0 = $r7[1];

        virtualinvoke $r4.<android.graphics.Region: void translate(int,int)>($i1, $i0);

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke $r2.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>($r4, $r3);

        return;

     label5:
        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke $r2.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>($r5, $r3);

        return;
    }

    void assignParent(android.view.ViewParent)
    {
        android.view.View $r0;
        android.view.ViewParent $r1, $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.ViewParent;

        $r2 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 != null goto label1;

        $r0.<android.view.View: android.view.ViewParent mParent> = $r1;

        return;

     label1:
        if $r1 != null goto label2;

        $r0.<android.view.View: android.view.ViewParent mParent> = null;

        return;

     label2:
        $r3 = new java.lang.RuntimeException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" being added, but");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" it already has a parent");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r3;
    }

    public void bringToFront()
    {
        android.view.View $r0;
        android.view.ViewParent $r1;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r1.<android.view.ViewParent: void bringChildToFront(android.view.View)>($r0);

        return;

     label1:
        return;
    }

    public void buildDrawingCache()
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.ref.SoftReference $r1;
        java.lang.Object $r2;
        android.graphics.drawable.Drawable $r3;
        boolean $z0, $z1;
        byte $b4;
        android.content.Context $r4;
        android.view.ViewConfiguration $r5;
        android.graphics.Bitmap $r6, $r8;
        android.graphics.Bitmap$Config $r7;
        android.view.View$AttachInfo $r9;
        android.graphics.Canvas $r10;
        float $f0, $f1;
        java.lang.OutOfMemoryError $r11;

        $r0 := @this: android.view.View;

        $i2 = $r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i2 & 32768;

        if $i2 == 0 goto label01;

        $r1 = $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache>;

        if $r1 == null goto label01;

        $r1 = $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache>;

        $r2 = virtualinvoke $r1.<java.lang.ref.Reference: java.lang.Object get()>();

        if $r2 != null goto label30;

     label01:
        $i2 = $r0.<android.view.View: int mRight>;

        $i0 = $r0.<android.view.View: int mLeft>;

        $i2 = $i2 - $i0;

        $i0 = $r0.<android.view.View: int mBottom>;

        $i1 = $r0.<android.view.View: int mTop>;

        $i1 = $i0 - $i1;

        $i0 = $r0.<android.view.View: int mDrawingCacheBackgroundColor>;

        if $i0 != 0 goto label02;

        $r3 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r3 == null goto label06;

        $r3 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        $i3 = virtualinvoke $r3.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i3 != -1 goto label06;

     label02:
        $z0 = 1;

     label03:
        if $i2 <= 0 goto label05;

        if $i1 <= 0 goto label05;

        $i3 = $i2 * $i1;

        if $z0 == 0 goto label07;

        $b4 = 2;

     label04:
        $i3 = $i3 * $b4;

        $r4 = $r0.<android.view.View: android.content.Context mContext>;

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $i5 = virtualinvoke $r5.<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>();

        if $i3 <= $i5 goto label08;

     label05:
        virtualinvoke $r0.<android.view.View: void destroyDrawingCache()>();

        return;

     label06:
        $z0 = 0;

        goto label03;

     label07:
        $b4 = 4;

        goto label04;

     label08:
        $z1 = 1;

        $r1 = $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache>;

        if $r1 != null goto label21;

        $r6 = null;

     label09:
        if $r6 == null goto label10;

        $i3 = virtualinvoke $r6.<android.graphics.Bitmap: int getWidth()>();

        if $i3 != $i2 goto label10;

        $i3 = virtualinvoke $r6.<android.graphics.Bitmap: int getHeight()>();

        if $i3 == $i1 goto label15;

     label10:
        if $z0 != 0 goto label25;

        $i3 = $r0.<android.view.View: int mViewFlags>;

        $i3 = $i3 & 1572864;

        lookupswitch($i3)
        {
            case 0: goto label22;
            case 524288: goto label23;
            case 1048576: goto label24;
            default: goto label11;
        };

     label11:
        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

     label12:
        if $r6 == null goto label13;

        virtualinvoke $r6.<android.graphics.Bitmap: void recycle()>();

     label13:
        $r8 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i2, $i1, $r7);

        $r6 = $r8;

        $r1 = new java.lang.ref.SoftReference;

        specialinvoke $r1.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r8);

     label14:
        $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache> = $r1;

        if $i0 == 0 goto label27;

        $z1 = 1;

     label15:
        $r9 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r9 == null goto label28;

        $r10 = $r9.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas>;

        if $r10 != null goto label16;

        $r10 = new android.graphics.Canvas;

        specialinvoke $r10.<android.graphics.Canvas: void <init>()>();

     label16:
        virtualinvoke $r10.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>($r6);

        $r9.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = null;

     label17:
        if $z1 == 0 goto label18;

        virtualinvoke $r6.<android.graphics.Bitmap: void eraseColor(int)>($i0);

     label18:
        virtualinvoke $r0.<android.view.View: void computeScroll()>();

        $i2 = virtualinvoke $r10.<android.graphics.Canvas: int save()>();

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i0 = neg $i0;

        $f0 = (float) $i0;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $i0 = neg $i0;

        $f1 = (float) $i0;

        virtualinvoke $r10.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 32;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 128;

        if $i0 != 128 goto label29;

        virtualinvoke $r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>($r10);

     label19:
        virtualinvoke $r10.<android.graphics.Canvas: void restoreToCount(int)>($i2);

        if $r9 == null goto label20;

        $r9.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = $r10;

     label20:
        $i2 = $r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i2 | 32768;

        $r0.<android.view.View: int mPrivateFlags> = $i2;

        return;

     label21:
        $r1 = $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache>;

        $r2 = virtualinvoke $r1.<java.lang.ref.Reference: java.lang.Object get()>();

        $r6 = (android.graphics.Bitmap) $r2;

        goto label09;

     label22:
        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label12;

     label23:
        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_4444>;

        goto label12;

     label24:
        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label12;

     label25:
        $r7 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        goto label12;

     label26:
        $r11 := @caughtexception;

        $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache> = null;

        return;

     label27:
        $z1 = 0;

        goto label15;

     label28:
        $r10 = new android.graphics.Canvas;

        specialinvoke $r10.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r6);

        goto label17;

     label29:
        virtualinvoke $r0.<android.view.View: void draw(android.graphics.Canvas)>($r10);

        goto label19;

     label30:
        return;

        catch java.lang.OutOfMemoryError from label13 to label14 with label26;
    }

    public void cancelLongPress()
    {
        android.view.View $r0;
        android.view.View$CheckForLongPress $r1;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r1);

        return;

     label1:
        return;
    }

    public boolean checkInputConnectionProxy(android.view.View)
    {
        android.view.View $r0, $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View;

        return 0;
    }

    public void clearAnimation()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        $r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        return;
    }

    public void clearFocus()
    {
        android.view.View $r0;
        int $i0;
        android.view.ViewParent $r1;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label2;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -3;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r1.<android.view.ViewParent: void clearChildFocus(android.view.View)>($r0);

     label1:
        virtualinvoke $r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>(0, 0, null);

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        return;

     label2:
        return;
    }

    void clearFocusForRemoval()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -3;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>(0, 0, null);

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        return;

     label1:
        return;
    }

    protected int computeHorizontalScrollExtent()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        return $i0;
    }

    protected int computeHorizontalScrollOffset()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mScrollX>;

        return i0;
    }

    protected int computeHorizontalScrollRange()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        return $i0;
    }

    public void computeScroll()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return;
    }

    protected int computeVerticalScrollExtent()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        return $i0;
    }

    protected int computeVerticalScrollOffset()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mScrollY>;

        return i0;
    }

    protected int computeVerticalScrollRange()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        return $i0;
    }

    public void createContextMenu(android.view.ContextMenu)
    {
        android.view.View $r0;
        android.view.ContextMenu $r1;
        android.view.ContextMenu$ContextMenuInfo $r2;
        com.android.internal.view.menu.MenuBuilder $r3;
        android.view.View$OnCreateContextMenuListener $r4;
        android.view.ViewParent $r5;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.ContextMenu;

        $r2 = virtualinvoke $r0.<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>();

        $r3 = (com.android.internal.view.menu.MenuBuilder) $r1;

        virtualinvoke $r3.<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)>($r2);

        virtualinvoke $r0.<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>($r1);

        $r4 = $r0.<android.view.View: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener>;

        if $r4 == null goto label1;

        $r4 = $r0.<android.view.View: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener>;

        interfaceinvoke $r4.<android.view.View$OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>($r1, $r0, $r2);

     label1:
        $r3 = (com.android.internal.view.menu.MenuBuilder) $r1;

        virtualinvoke $r3.<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)>(null);

        $r5 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r5 == null goto label2;

        $r5 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r5.<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>($r1);

        return;

     label2:
        return;
    }

    android.graphics.Bitmap createSnapshot(android.graphics.Bitmap$Config, int)
    {
        android.view.View $r0;
        android.graphics.Bitmap$Config $r1;
        int $i0, $i1, $i2, $i3;
        android.view.View$AttachInfo $r2;
        android.graphics.Bitmap $r3;
        java.lang.OutOfMemoryError $r4;
        android.graphics.Canvas $r5;
        float $f0, $f1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Bitmap$Config;

        $i0 := @parameter1: int;

        $i2 = $r0.<android.view.View: int mRight>;

        $i1 = $r0.<android.view.View: int mLeft>;

        $i2 = $i2 - $i1;

        $i1 = $r0.<android.view.View: int mBottom>;

        $i3 = $r0.<android.view.View: int mTop>;

        $i1 = $i1 - $i3;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>($i2, $i1, $r1);

        if $r3 != null goto label1;

        $r4 = new java.lang.OutOfMemoryError;

        specialinvoke $r4.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r4;

     label1:
        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label6;

        $r5 = $r2.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas>;

        if $r5 != null goto label2;

        $r5 = new android.graphics.Canvas;

        specialinvoke $r5.<android.graphics.Canvas: void <init>()>();

     label2:
        virtualinvoke $r5.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>($r3);

        $r2.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = null;

     label3:
        $i2 = -16777216 & $i0;

        if $i2 == 0 goto label4;

        virtualinvoke $r3.<android.graphics.Bitmap: void eraseColor(int)>($i0);

     label4:
        virtualinvoke $r0.<android.view.View: void computeScroll()>();

        $i0 = virtualinvoke $r5.<android.graphics.Canvas: int save()>();

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i2 = neg $i2;

        $f0 = (float) $i2;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i2 = neg $i2;

        $f1 = (float) $i2;

        virtualinvoke $r5.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $i2 = $r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i2 & 128;

        if $i2 != 128 goto label7;

        virtualinvoke $r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>($r5);

     label5:
        virtualinvoke $r5.<android.graphics.Canvas: void restoreToCount(int)>($i0);

        if $r2 == null goto label8;

        $r2.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = $r5;

        return $r3;

     label6:
        $r5 = new android.graphics.Canvas;

        specialinvoke $r5.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r3);

        goto label3;

     label7:
        virtualinvoke $r0.<android.view.View: void draw(android.graphics.Canvas)>($r5);

        goto label5;

     label8:
        return $r3;
    }

    public void debug()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        virtualinvoke $r0.<android.view.View: void debug(int)>(0);

        return;
    }

    protected void debug(int)
    {
        android.view.View $r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        java.lang.StringBuilder $r2;
        java.lang.Object $r4;
        android.view.ViewGroup$LayoutParams $r5;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 = $i0 - 1;

        $r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+ ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = $r1;

        $i1 = virtualinvoke $r0.<android.view.View: int getId()>();

        if $i1 == -1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (id=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = virtualinvoke $r0.<android.view.View: java.lang.Object getTag()>();

        if $r4 == null goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (tag=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r3);

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FOCUSED");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r1);

     label3:
        $r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("frame={");

        $i1 = $r0.<android.view.View: int mLeft>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = $r0.<android.view.View: int mTop>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = $r0.<android.view.View: int mRight>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = $r0.<android.view.View: int mBottom>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} scroll={");

        $i1 = $r0.<android.view.View: int mScrollX>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = $r0.<android.view.View: int mScrollY>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r1);

        $i1 = $r0.<android.view.View: int mPaddingLeft>;

        if $i1 != 0 goto label4;

        $i1 = $r0.<android.view.View: int mPaddingTop>;

        if $i1 != 0 goto label4;

        $i1 = $r0.<android.view.View: int mPaddingRight>;

        if $i1 != 0 goto label4;

        $i1 = $r0.<android.view.View: int mPaddingBottom>;

        if $i1 == 0 goto label5;

     label4:
        $r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("padding={");

        $i1 = $r0.<android.view.View: int mPaddingLeft>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = $r0.<android.view.View: int mPaddingTop>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = $r0.<android.view.View: int mPaddingRight>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i1 = $r0.<android.view.View: int mPaddingBottom>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r1);

     label5:
        $r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mMeasureWidth=");

        $i1 = $r0.<android.view.View: int mMeasuredWidth>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mMeasureHeight=");

        $i1 = $r0.<android.view.View: int mMeasuredHeight>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r1);

        $r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i0);

        $r5 = $r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        if $r5 != null goto label7;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BAD! no layout params");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r1);

        $r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("flags={");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i1 = $r0.<android.view.View: int mViewFlags>;

        $r1 = staticinvoke <android.view.View: java.lang.String printFlags(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r1);

        $r1 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("privateFlags={");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $r1 = staticinvoke <android.view.View: java.lang.String printPrivateFlags(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r1);

        return;

     label7:
        $r5 = $r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        $r1 = virtualinvoke $r5.<android.view.ViewGroup$LayoutParams: java.lang.String debug(java.lang.String)>($r1);

        goto label6;
    }

    public void destroyDrawingCache()
    {
        android.view.View $r0;
        java.lang.Object $r1;
        java.lang.ref.SoftReference $r2;
        android.graphics.Bitmap $r3;

        $r0 := @this: android.view.View;

        $r2 = $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache>;

        if $r2 == null goto label2;

        $r2 = $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache>;

        $r1 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        $r3 = (android.graphics.Bitmap) $r1;

        if $r3 == null goto label1;

        virtualinvoke $r3.<android.graphics.Bitmap: void recycle()>();

     label1:
        $r0.<android.view.View: java.lang.ref.SoftReference mDrawingCache> = null;

        return;

     label2:
        return;
    }

    void dispatchAttachedToWindow(android.view.View$AttachInfo, int)
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1, $r4;
        int $i0, $i1;
        android.view.ViewTreeObserver $r2, $r3;
        java.util.ArrayList $r5;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View$AttachInfo;

        $i0 := @parameter1: int;

        $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo> = $r1;

        $i1 = $r0.<android.view.View: int mWindowAttachCount>;

        $i1 = $i1 + 1;

        $r0.<android.view.View: int mWindowAttachCount> = $i1;

        $r2 = $r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        if $r2 == null goto label1;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $r3 = $r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        virtualinvoke $r2.<android.view.ViewTreeObserver: void merge(android.view.ViewTreeObserver)>($r3);

        $r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver> = null;

     label1:
        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & 524288;

        if $i1 == 0 goto label2;

        $r4 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 | 1048576;

        $r0.<android.view.View: int mPrivateFlags> = $i1;

     label2:
        virtualinvoke $r0.<android.view.View: void performCollectViewAttributes(int)>($i0);

        virtualinvoke $r0.<android.view.View: void onAttachedToWindow()>();

        $i0 = $r1.<android.view.View$AttachInfo: int mWindowVisibility>;

        if $i0 == 8 goto label3;

        virtualinvoke $r0.<android.view.View: void onWindowVisibilityChanged(int)>($i0);

        return;

     label3:
        return;
    }

    void dispatchCollectViewAttributes(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<android.view.View: void performCollectViewAttributes(int)>($i0);

        return;
    }

    void dispatchDetachedFromWindow()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        int $i0;
        java.util.ArrayList $r2;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $i0 = $r1.<android.view.View$AttachInfo: int mWindowVisibility>;

        if $i0 == 8 goto label1;

        virtualinvoke $r0.<android.view.View: void onWindowVisibilityChanged(int)>(8);

     label1:
        virtualinvoke $r0.<android.view.View: void onDetachedFromWindow()>();

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 1048576;

        if $i0 == 0 goto label2;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>($r0);

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -1048577;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

     label2:
        $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo> = null;

        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.view.View $r0;
        android.graphics.Canvas $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Canvas;

        return;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.view.View $r0;
        android.view.KeyEvent $r1;
        android.view.View$OnKeyListener $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.KeyEvent;

        $r2 = $r0.<android.view.View: android.view.View$OnKeyListener mOnKeyListener>;

        if $r2 == null goto label1;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 32;

        if $i0 != 0 goto label1;

        $r2 = $r0.<android.view.View: android.view.View$OnKeyListener mOnKeyListener>;

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = interfaceinvoke $r2.<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>($r0, $i0, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke $r1.<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)>($r0);

        return $z0;
    }

    public boolean dispatchKeyEventPreIme(android.view.KeyEvent)
    {
        android.view.View $r0;
        android.view.KeyEvent $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = virtualinvoke $r0.<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;
    }

    public boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        android.view.View $r0;
        android.view.KeyEvent $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = virtualinvoke $r0.<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>($i0, $r1);

        return $z0;
    }

    protected void dispatchRestoreInstanceState(android.util.SparseArray)
    {
        android.view.View $r0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        int $i0;
        android.os.Parcelable $r3;
        java.lang.IllegalStateException $r4;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.util.SparseArray;

        $i0 = $r0.<android.view.View: int mID>;

        if $i0 == -1 goto label1;

        $i0 = $r0.<android.view.View: int mID>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        $r3 = (android.os.Parcelable) $r2;

        if $r3 == null goto label2;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -131073;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>($r3);

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 131072;

        if $i0 != 0 goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Derived class did not call super.onRestoreInstanceState()");

        throw $r4;

     label1:
        return;

     label2:
        return;

     label3:
        return;
    }

    protected void dispatchSaveInstanceState(android.util.SparseArray)
    {
        android.view.View $r0;
        android.util.SparseArray $r1;
        android.os.Parcelable $r2;
        int $i0;
        java.lang.IllegalStateException $r3;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.util.SparseArray;

        $i0 = $r0.<android.view.View: int mID>;

        if $i0 == -1 goto label2;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 65536;

        if $i0 != 0 goto label3;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -131073;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $r2 = virtualinvoke $r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 131072;

        if $i0 != 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Derived class did not call super.onSaveInstanceState()");

        throw $r3;

     label1:
        if $r2 == null goto label4;

        $i0 = $r0.<android.view.View: int mID>;

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i0, $r2);

        return;

     label2:
        return;

     label3:
        return;

     label4:
        return;
    }

    protected void dispatchSetPressed(boolean)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        return;
    }

    protected void dispatchSetSelected(boolean)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        return;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        android.view.View $r0;
        android.view.MotionEvent $r1;
        android.view.View$OnTouchListener $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.MotionEvent;

        $r2 = $r0.<android.view.View: android.view.View$OnTouchListener mOnTouchListener>;

        if $r2 == null goto label1;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 32;

        if $i0 != 0 goto label1;

        $r2 = $r0.<android.view.View: android.view.View$OnTouchListener mOnTouchListener>;

        $z0 = interfaceinvoke $r2.<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>($r0, $r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke $r0.<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>($r1);

        return $z0;
    }

    public boolean dispatchTrackballEvent(android.view.MotionEvent)
    {
        android.view.View $r0;
        android.view.MotionEvent $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke $r0.<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>($r1);

        return $z0;
    }

    public boolean dispatchUnhandledMove(android.view.View, int)
    {
        android.view.View $r0, $r1;
        int $i0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        return 0;
    }

    public void dispatchWindowFocusChanged(boolean)
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        virtualinvoke $r0.<android.view.View: void onWindowFocusChanged(boolean)>($z0);

        return;
    }

    public void dispatchWindowVisibilityChanged(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<android.view.View: void onWindowVisibilityChanged(int)>($i0);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.view.View $r0;
        android.graphics.Canvas $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.graphics.drawable.Drawable $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.view.View$ScrollabilityCache $r3;
        byte $b7;
        android.graphics.Paint $r4;
        android.graphics.Matrix $r5;
        android.graphics.Shader $r6;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 32;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $r2 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r2 == null goto label02;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $z0 = $r0.<android.view.View: boolean mBackgroundSizeChanged>;

        if $z0 == 0 goto label01;

        $i1 = $r0.<android.view.View: int mRight>;

        $i3 = $r0.<android.view.View: int mLeft>;

        $i1 = $i1 - $i3;

        $i3 = $r0.<android.view.View: int mBottom>;

        $i4 = $r0.<android.view.View: int mTop>;

        $i3 = $i3 - $i4;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i1, $i3);

        $r0.<android.view.View: boolean mBackgroundSizeChanged> = 0;

     label01:
        $i1 = $i2 | $i0;

        if $i1 != 0 goto label05;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

     label02:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i2 = $i0 & 4096;

        if $i2 == 0 goto label06;

        $z0 = 1;

     label03:
        $i0 = $i0 & 8192;

        if $i0 == 0 goto label07;

        $z1 = 1;

     label04:
        if $z1 != 0 goto label08;

        if $z0 != 0 goto label08;

        virtualinvoke $r0.<android.view.View: void onDraw(android.graphics.Canvas)>($r1);

        virtualinvoke $r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>($r1);

        specialinvoke $r0.<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>($r1);

        return;

     label05:
        $f0 = (float) $i2;

        $f1 = (float) $i0;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r1);

        $i2 = neg $i2;

        $f0 = (float) $i2;

        $i0 = neg $i0;

        $f1 = (float) $i0;

        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        goto label02;

     label06:
        $z0 = 0;

        goto label03;

     label07:
        $z1 = 0;

        goto label04;

     label08:
        $z2 = 0;

        $z3 = 0;

        $z4 = 0;

        $z5 = 0;

        $f2 = 0.0F;

        $f3 = 0.0F;

        $f1 = 0.0F;

        $f0 = 0.0F;

        $i1 = $r0.<android.view.View: int mPaddingLeft>;

        $i2 = $i1;

        $i0 = $r0.<android.view.View: int mPaddingTop>;

        $i3 = $i0;

        $z6 = virtualinvoke $r0.<android.view.View: boolean isPaddingOffsetRequired()>();

        if $z6 == 0 goto label09;

        $i2 = virtualinvoke $r0.<android.view.View: int getLeftPaddingOffset()>();

        $i2 = $i1 + $i2;

        $i1 = virtualinvoke $r0.<android.view.View: int getTopPaddingOffset()>();

        $i3 = $i0 + $i1;

     label09:
        $i0 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i0 + $i2;

        $i1 = $r0.<android.view.View: int mRight>;

        $i1 = $i1 + $i0;

        $i4 = $r0.<android.view.View: int mLeft>;

        $i1 = $i1 - $i4;

        $i4 = $r0.<android.view.View: int mPaddingRight>;

        $i1 = $i1 - $i4;

        $i2 = $i1 - $i2;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i1 + $i3;

        $i4 = $r0.<android.view.View: int mBottom>;

        $i4 = $i4 + $i1;

        $i5 = $r0.<android.view.View: int mTop>;

        $i4 = $i4 - $i5;

        $i5 = $r0.<android.view.View: int mPaddingBottom>;

        $i4 = $i4 - $i5;

        $i3 = $i4 - $i3;

        if $z6 == 0 goto label10;

        $i4 = virtualinvoke $r0.<android.view.View: int getRightPaddingOffset()>();

        $i2 = $i2 + $i4;

        $i4 = virtualinvoke $r0.<android.view.View: int getBottomPaddingOffset()>();

        $i3 = $i3 + $i4;

     label10:
        $r3 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i6 = $r3.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        $i4 = $i6;

        if $z1 == 0 goto label11;

        $i5 = $i1 + $i6;

        $i6 = $i3 - $i6;

        if $i5 <= $i6 goto label11;

        $i4 = $i3 - $i1;

        $i4 = $i4 / 2;

     label11:
        if $z0 == 0 goto label12;

        $i5 = $i0 + $i4;

        $i6 = $i2 - $i4;

        if $i5 <= $i6 goto label12;

        $i4 = $i2 - $i0;

        $i4 = $i4 / 2;

     label12:
        if $z1 == 0 goto label14;

        $f3 = virtualinvoke $r0.<android.view.View: float getTopFadingEdgeStrength()>();

        $f3 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f3);

        $f3 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f3);

        $f2 = $f3;

        $b7 = $f3 cmpl 0.0F;

        if $b7 < 0 goto label25;

        $z2 = 1;

     label13:
        $f3 = virtualinvoke $r0.<android.view.View: float getBottomFadingEdgeStrength()>();

        $f3 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f3);

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f3);

        $f3 = $f4;

        $b7 = $f4 cmpl 0.0F;

        if $b7 < 0 goto label26;

        $z3 = 1;

     label14:
        if $z0 == 0 goto label16;

        $f0 = virtualinvoke $r0.<android.view.View: float getLeftFadingEdgeStrength()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f0);

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f0);

        $f1 = $f0;

        $b7 = $f0 cmpl 0.0F;

        if $b7 < 0 goto label27;

        $z4 = 1;

     label15:
        $f0 = virtualinvoke $r0.<android.view.View: float getRightFadingEdgeStrength()>();

        $f0 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f0);

        $f4 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f0);

        $f0 = $f4;

        $b7 = $f4 cmpl 0.0F;

        if $b7 < 0 goto label28;

        $z5 = 1;

     label16:
        $i5 = virtualinvoke $r1.<android.graphics.Canvas: int getSaveCount()>();

        $i6 = virtualinvoke $r0.<android.view.View: int getSolidColor()>();

        if $i6 != 0 goto label29;

        if $z2 == 0 goto label17;

        $f4 = (float) $i0;

        $f5 = (float) $i1;

        $f6 = (float) $i2;

        $i6 = $i1 + $i4;

        $f7 = (float) $i6;

        virtualinvoke $r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f4, $f5, $f6, $f7, null, 4);

     label17:
        if $z3 == 0 goto label18;

        $f4 = (float) $i0;

        $i6 = $i3 - $i4;

        $f5 = (float) $i6;

        $f6 = (float) $i2;

        $f7 = (float) $i3;

        virtualinvoke $r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f4, $f5, $f6, $f7, null, 4);

     label18:
        if $z4 == 0 goto label19;

        $f4 = (float) $i0;

        $f5 = (float) $i1;

        $i6 = $i0 + $i4;

        $f6 = (float) $i6;

        $f7 = (float) $i3;

        virtualinvoke $r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f4, $f5, $f6, $f7, null, 4);

     label19:
        if $z5 == 0 goto label20;

        $i6 = $i2 - $i4;

        $f4 = (float) $i6;

        $f5 = (float) $i1;

        $f6 = (float) $i2;

        $f7 = (float) $i3;

        virtualinvoke $r1.<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>($f4, $f5, $f6, $f7, null, 4);

     label20:
        virtualinvoke $r0.<android.view.View: void onDraw(android.graphics.Canvas)>($r1);

        virtualinvoke $r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>($r1);

        $r4 = $r3.<android.view.View$ScrollabilityCache: android.graphics.Paint paint>;

        $r5 = $r3.<android.view.View$ScrollabilityCache: android.graphics.Matrix matrix>;

        $r6 = $r3.<android.view.View$ScrollabilityCache: android.graphics.Shader shader>;

        $i6 = $r3.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        $f4 = (float) $i6;

        if $z2 == 0 goto label21;

        $f2 = $f4 * $f2;

        virtualinvoke $r5.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f2);

        $f2 = (float) $i0;

        $f5 = (float) $i1;

        virtualinvoke $r5.<android.graphics.Matrix: boolean postTranslate(float,float)>($f2, $f5);

        virtualinvoke $r6.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r5);

        $f2 = (float) $i0;

        $f5 = (float) $i1;

        $f6 = (float) $i2;

        $i6 = $i1 + $i4;

        $f7 = (float) $i6;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f2, $f5, $f6, $f7, $r4);

     label21:
        if $z3 == 0 goto label22;

        $f3 = $f4 * $f3;

        virtualinvoke $r5.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f3);

        virtualinvoke $r5.<android.graphics.Matrix: boolean postRotate(float)>(180.0F);

        $f3 = (float) $i0;

        $f2 = (float) $i3;

        virtualinvoke $r5.<android.graphics.Matrix: boolean postTranslate(float,float)>($f3, $f2);

        virtualinvoke $r6.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r5);

        $f3 = (float) $i0;

        $i6 = $i3 - $i4;

        $f2 = (float) $i6;

        $f5 = (float) $i2;

        $f6 = (float) $i3;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f5, $f6, $r4);

     label22:
        if $z4 == 0 goto label23;

        $f1 = $f4 * $f1;

        virtualinvoke $r5.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f1);

        virtualinvoke $r5.<android.graphics.Matrix: boolean postRotate(float)>(-90.0F);

        $f1 = (float) $i0;

        $f3 = (float) $i1;

        virtualinvoke $r5.<android.graphics.Matrix: boolean postTranslate(float,float)>($f1, $f3);

        virtualinvoke $r6.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r5);

        $f1 = (float) $i0;

        $f3 = (float) $i1;

        $i0 = $i0 + $i4;

        $f2 = (float) $i0;

        $f5 = (float) $i3;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f1, $f3, $f2, $f5, $r4);

     label23:
        if $z5 == 0 goto label24;

        $f0 = $f4 * $f0;

        virtualinvoke $r5.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f0);

        virtualinvoke $r5.<android.graphics.Matrix: boolean postRotate(float)>(90.0F);

        $f0 = (float) $i2;

        $f1 = (float) $i1;

        virtualinvoke $r5.<android.graphics.Matrix: boolean postTranslate(float,float)>($f0, $f1);

        virtualinvoke $r6.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>($r5);

        $i0 = $i2 - $i4;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $f3 = (float) $i2;

        $f2 = (float) $i3;

        virtualinvoke $r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f3, $f2, $r4);

     label24:
        virtualinvoke $r1.<android.graphics.Canvas: void restoreToCount(int)>($i5);

        specialinvoke $r0.<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>($r1);

        return;

     label25:
        $z2 = 0;

        goto label13;

     label26:
        $z3 = 0;

        goto label14;

     label27:
        $z4 = 0;

        goto label15;

     label28:
        $z5 = 0;

        goto label16;

     label29:
        virtualinvoke $r3.<android.view.View$ScrollabilityCache: void setFadeColor(int)>($i6);

        goto label20;
    }

    protected void drawableStateChanged()
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;
        int[] $r2;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r1 == null goto label1;

        $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r2);

        return;

     label1:
        return;

     label2:
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.View $r0;
        long $l0;

        $r0 := @this: android.view.View;

        specialinvoke $r0.<java.lang.Object: void finalize()>();

        $l0 = <android.view.View: long sInstanceCount>;

        $l0 = $l0 - 1L;

        <android.view.View: long sInstanceCount> = $l0;

        return;
    }

    public android.view.View findFocus()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        return $r0;

     label1:
        return null;
    }

    android.view.View findUserSetNextFocus(android.view.View, int)
    {
        android.view.View $r0, $r1;
        int $i0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        lookupswitch($i0)
        {
            case 17: goto label2;
            case 33: goto label6;
            case 66: goto label4;
            case 130: goto label8;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        $i0 = $r0.<android.view.View: int mNextFocusLeftId>;

        if $i0 != -1 goto label3;

        return null;

     label3:
        $i0 = $r0.<android.view.View: int mNextFocusLeftId>;

        $r0 = staticinvoke <android.view.View: android.view.View findViewShouldExist(android.view.View,int)>($r1, $i0);

        return $r0;

     label4:
        $i0 = $r0.<android.view.View: int mNextFocusRightId>;

        if $i0 != -1 goto label5;

        return null;

     label5:
        $i0 = $r0.<android.view.View: int mNextFocusRightId>;

        $r0 = staticinvoke <android.view.View: android.view.View findViewShouldExist(android.view.View,int)>($r1, $i0);

        return $r0;

     label6:
        $i0 = $r0.<android.view.View: int mNextFocusUpId>;

        if $i0 != -1 goto label7;

        return null;

     label7:
        $i0 = $r0.<android.view.View: int mNextFocusUpId>;

        $r0 = staticinvoke <android.view.View: android.view.View findViewShouldExist(android.view.View,int)>($r1, $i0);

        return $r0;

     label8:
        $i0 = $r0.<android.view.View: int mNextFocusDownId>;

        if $i0 != -1 goto label9;

        return null;

     label9:
        $i0 = $r0.<android.view.View: int mNextFocusDownId>;

        $r0 = staticinvoke <android.view.View: android.view.View findViewShouldExist(android.view.View,int)>($r1, $i0);

        return $r0;
    }

    public final android.view.View findViewById(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r0 = virtualinvoke $r0.<android.view.View: android.view.View findViewTraversal(int)>($i0);

        return $r0;
    }

    protected android.view.View findViewTraversal(int)
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.view.View: int mID>;

        if $i0 != $i1 goto label1;

        return $r0;

     label1:
        return null;
    }

    public final android.view.View findViewWithTag(java.lang.Object)
    {
        android.view.View $r0;
        java.lang.Object $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label1;

        return null;

     label1:
        $r0 = virtualinvoke $r0.<android.view.View: android.view.View findViewWithTagTraversal(java.lang.Object)>($r1);

        return $r0;
    }

    protected android.view.View findViewWithTagTraversal(java.lang.Object)
    {
        android.view.View $r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = $r0.<android.view.View: java.lang.Object mTag>;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return $r0;

     label1:
        return null;
    }

    protected boolean fitSystemWindows(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1;
        int $i0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 2;

        if $i0 != 2 goto label1;

        $i0 = $r1.<android.graphics.Rect: int left>;

        $r0.<android.view.View: int mPaddingLeft> = $i0;

        $i0 = $r1.<android.graphics.Rect: int top>;

        $r0.<android.view.View: int mPaddingTop> = $i0;

        $i0 = $r1.<android.graphics.Rect: int right>;

        $r0.<android.view.View: int mPaddingRight> = $i0;

        $i0 = $r1.<android.graphics.Rect: int bottom>;

        $r0.<android.view.View: int mPaddingBottom> = $i0;

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        return 1;

     label1:
        return 0;
    }

    public android.view.View focusSearch(int)
    {
        android.view.View $r0;
        int $i0;
        android.view.ViewParent $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $r0 = interfaceinvoke $r1.<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>($r0, $i0);

        return $r0;

     label1:
        return null;
    }

    public void forceLayout()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 4096;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        android.view.View $r0;
        android.graphics.Region $r1;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Region$Op $r2;
        android.view.View$AttachInfo $r3;
        int[] $r4;
        android.graphics.drawable.Drawable $r5;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Region;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label2;

        if $r3 == null goto label3;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 128;

        if $i1 != 0 goto label1;

        $r4 = $r3.<android.view.View$AttachInfo: int[] mTransparentLocation>;

        virtualinvoke $r0.<android.view.View: void getLocationInWindow(int[])>($r4);

        $i0 = $r4[0];

        $i1 = $r4[1];

        $i2 = $r4[0];

        $i3 = $r0.<android.view.View: int mRight>;

        $i2 = $i2 + $i3;

        $i3 = $r0.<android.view.View: int mLeft>;

        $i2 = $i2 - $i3;

        $i3 = $r4[1];

        $i4 = $r0.<android.view.View: int mBottom>;

        $i3 = $i3 + $i4;

        $i4 = $r0.<android.view.View: int mTop>;

        $i3 = $i3 - $i4;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke $r1.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i0, $i1, $i2, $i3, $r2);

        return 1;

     label1:
        $i0 = $i0 & 256;

        if $i0 == 0 goto label4;

        $r5 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r5 == null goto label5;

        $r5 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        virtualinvoke $r0.<android.view.View: void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable,android.graphics.Region)>($r5, $r1);

        return 1;

     label2:
        return 1;

     label3:
        return 1;

     label4:
        return 1;

     label5:
        return 1;
    }

    public android.view.animation.Animation getAnimation()
    {
        android.view.View $r0;
        android.view.animation.Animation r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: android.view.animation.Animation mCurrentAnimation>;

        return r1;
    }

    public android.os.IBinder getApplicationWindowToken()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        android.os.IBinder $r2;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label2;

        $r2 = $r1.<android.view.View$AttachInfo: android.os.IBinder mPanelParentWindowToken>;

        if $r2 != null goto label1;

        $r2 = $r1.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

     label1:
        return $r2;

     label2:
        return null;
    }

    public android.graphics.drawable.Drawable getBackground()
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        return r1;
    }

    public int getBaseline()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return -1;
    }

    public final int getBottom()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mBottom>;

        return i0;
    }

    protected float getBottomFadingEdgeStrength()
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i1 = virtualinvoke $r0.<android.view.View: int computeVerticalScrollExtent()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r0.<android.view.View: int computeVerticalScrollRange()>();

        if $i0 >= $i1 goto label1;

        return 1.0F;

     label1:
        return 0.0F;
    }

    protected int getBottomPaddingOffset()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    public final android.content.Context getContext()
    {
        android.view.View $r0;
        android.content.Context r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: android.content.Context mContext>;

        return r1;
    }

    protected android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return null;
    }

    public final int[] getDrawableState()
    {
        android.view.View $r0;
        int[] $r1;
        int $i0;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: int[] mDrawableState>;

        if $r1 == null goto label1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 1024;

        if $i0 != 0 goto label1;

        $r1 = $r0.<android.view.View: int[] mDrawableState>;

        return $r1;

     label1:
        $r1 = virtualinvoke $r0.<android.view.View: int[] onCreateDrawableState(int)>(0);

        $r0.<android.view.View: int[] mDrawableState> = $r1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -1025;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $r1 = $r0.<android.view.View: int[] mDrawableState>;

        return $r1;
    }

    public android.graphics.Bitmap getDrawingCache()
    {
        java.lang.Object $r0;
        android.view.View $r1;
        int $i0;
        java.lang.ref.SoftReference $r2;
        android.graphics.Bitmap $r3;

        $r1 := @this: android.view.View;

        $i0 = $r1.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 131072;

        if $i0 != 131072 goto label1;

        return null;

     label1:
        $i0 = $r1.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 32768;

        if $i0 != 32768 goto label2;

        virtualinvoke $r1.<android.view.View: void buildDrawingCache()>();

     label2:
        $r2 = $r1.<android.view.View: java.lang.ref.SoftReference mDrawingCache>;

        if $r2 != null goto label3;

        return null;

     label3:
        $r2 = $r1.<android.view.View: java.lang.ref.SoftReference mDrawingCache>;

        $r0 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        $r3 = (android.graphics.Bitmap) $r0;

        return $r3;
    }

    public int getDrawingCacheBackgroundColor()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mDrawingCacheBackgroundColor>;

        return i0;
    }

    public int getDrawingCacheQuality()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 1572864;

        return $i0;
    }

    public void getDrawingRect(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1;
        int $i0, $i1, $i2;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $r1.<android.graphics.Rect: int left> = $i0;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $r1.<android.graphics.Rect: int top> = $i0;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r0.<android.view.View: int mRight>;

        $i2 = $r0.<android.view.View: int mLeft>;

        $i1 = $i1 - $i2;

        $i0 = $i0 + $i1;

        $r1.<android.graphics.Rect: int right> = $i0;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $i1 = $r0.<android.view.View: int mBottom>;

        $i2 = $r0.<android.view.View: int mTop>;

        $i1 = $i1 - $i2;

        $i0 = $i0 + $i1;

        $r1.<android.graphics.Rect: int bottom> = $i0;

        return;
    }

    public long getDrawingTime()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        long l0;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        l0 = $r1.<android.view.View$AttachInfo: long mDrawingTime>;

        return l0;

     label1:
        return 0L;
    }

    public java.util.ArrayList getFocusables(int)
    {
        android.view.View $r0;
        int $i0;
        java.util.ArrayList $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(24);

        virtualinvoke $r0.<android.view.View: void addFocusables(java.util.ArrayList,int)>($r1, $i0);

        return $r1;
    }

    public void getFocusedRect(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        virtualinvoke $r0.<android.view.View: void getDrawingRect(android.graphics.Rect)>($r1);

        return;
    }

    public final boolean getGlobalVisibleRect(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke $r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>($r1, null);

        return $z0;
    }

    public boolean getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point)
    {
        android.view.View $r0;
        android.graphics.Rect $r1;
        android.graphics.Point $r2;
        int $i0, $i1, $i2;
        boolean $z0;
        android.view.ViewParent $r3;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 := @parameter1: android.graphics.Point;

        $i1 = $r0.<android.view.View: int mRight>;

        $i0 = $r0.<android.view.View: int mLeft>;

        $i1 = $i1 - $i0;

        $i0 = $r0.<android.view.View: int mBottom>;

        $i2 = $r0.<android.view.View: int mTop>;

        $i0 = $i0 - $i2;

        if $i1 <= 0 goto label4;

        if $i0 <= 0 goto label4;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        if $r2 == null goto label1;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i1 = neg $i1;

        $i0 = $r0.<android.view.View: int mScrollY>;

        $i0 = neg $i0;

        virtualinvoke $r2.<android.graphics.Point: void set(int,int)>($i1, $i0);

     label1:
        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r3 == null goto label2;

        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = interfaceinvoke $r3.<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>($r0, $r1, $r2);

        if $z0 == 0 goto label3;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        return 0;
    }

    public android.os.Handler getHandler()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        android.os.Handler r2;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        return r2;

     label1:
        return null;
    }

    public final int getHeight()
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i1 = $r0.<android.view.View: int mBottom>;

        $i0 = $r0.<android.view.View: int mTop>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    public void getHitRect(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $i0 = $r0.<android.view.View: int mLeft>;

        $i1 = $r0.<android.view.View: int mTop>;

        $i2 = $r0.<android.view.View: int mRight>;

        $i3 = $r0.<android.view.View: int mBottom>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    public int getHorizontalFadingEdgeLength()
    {
        android.view.View $r0;
        android.view.View$ScrollabilityCache $r1;
        boolean $z0;
        int i0;

        $r0 := @this: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isHorizontalFadingEdgeEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 == null goto label1;

        i0 = $r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        return i0;

     label1:
        return 0;
    }

    protected int getHorizontalScrollbarHeight()
    {
        android.view.View $r0;
        android.view.View$ScrollabilityCache $r1;
        android.widget.ScrollBarDrawable $r2;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 == null goto label2;

        $r2 = $r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if $r2 == null goto label3;

        $i0 = virtualinvoke $r2.<android.widget.ScrollBarDrawable: int getSize(boolean)>(0);

        $i1 = $i0;

        if $i0 > 0 goto label1;

        $i1 = $r1.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label1:
        return $i1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public int getId()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mID>;

        return i0;
    }

    public boolean getKeepScreenOn()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 67108864;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public android.view.ViewGroup$LayoutParams getLayoutParams()
    {
        android.view.View $r0;
        android.view.ViewGroup$LayoutParams r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        return r1;
    }

    public final int getLeft()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mLeft>;

        return i0;
    }

    protected float getLeftFadingEdgeStrength()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int computeHorizontalScrollOffset()>();

        if $i0 <= 0 goto label1;

        return 1.0F;

     label1:
        return 0.0F;
    }

    protected int getLeftPaddingOffset()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    public final boolean getLocalVisibleRect(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1;
        android.graphics.Point $r2;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>()>();

        $z0 = virtualinvoke $r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>($r1, $r2);

        if $z0 == 0 goto label1;

        $i0 = $r2.<android.graphics.Point: int x>;

        $i0 = neg $i0;

        $i1 = $r2.<android.graphics.Point: int y>;

        $i1 = neg $i1;

        virtualinvoke $r1.<android.graphics.Rect: void offset(int,int)>($i0, $i1);

        return 1;

     label1:
        return 0;
    }

    public void getLocationInWindow(int[])
    {
        android.view.View $r0;
        int[] $r1;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;
        android.view.ViewParent $r3;
        boolean $z0;
        android.view.ViewRoot $r4;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: int[];

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        if $i0 >= 2 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("location must be an array of two integers");

        throw $r2;

     label2:
        $i0 = $r0.<android.view.View: int mLeft>;

        $r1[0] = $i0;

        $i0 = $r0.<android.view.View: int mTop>;

        $r1[1] = $i0;

        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

     label3:
        $z0 = $r3 instanceof android.view.View;

        if $z0 == 0 goto label4;

        $r0 = (android.view.View) $r3;

        $i0 = $r1[0];

        $i1 = $r0.<android.view.View: int mLeft>;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i1 = $i1 - $i2;

        $i0 = $i0 + $i1;

        $r1[0] = $i0;

        $i0 = $r1[1];

        $i1 = $r0.<android.view.View: int mTop>;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i1 - $i2;

        $i0 = $i0 + $i1;

        $r1[1] = $i0;

        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        goto label3;

     label4:
        $z0 = $r3 instanceof android.view.ViewRoot;

        if $z0 == 0 goto label5;

        $r4 = (android.view.ViewRoot) $r3;

        $i0 = $r1[1];

        $i1 = $r4.<android.view.ViewRoot: int mCurScrollY>;

        $i0 = $i0 - $i1;

        $r1[1] = $i0;

        return;

     label5:
        return;
    }

    public void getLocationOnScreen(int[])
    {
        android.view.View $r0;
        int[] $r1;
        android.view.View$AttachInfo $r2;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: int[];

        virtualinvoke $r0.<android.view.View: void getLocationInWindow(int[])>($r1);

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r1[0];

        $i1 = $r2.<android.view.View$AttachInfo: int mWindowLeft>;

        $i0 = $i0 + $i1;

        $r1[0] = $i0;

        $i0 = $r1[1];

        $i1 = $r2.<android.view.View$AttachInfo: int mWindowTop>;

        $i0 = $i0 + $i1;

        $r1[1] = $i0;

        return;
    }

    public final int getMeasuredHeight()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mMeasuredHeight>;

        return i0;
    }

    public final int getMeasuredWidth()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mMeasuredWidth>;

        return i0;
    }

    public int getNextFocusDownId()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mNextFocusDownId>;

        return i0;
    }

    public int getNextFocusLeftId()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mNextFocusLeftId>;

        return i0;
    }

    public int getNextFocusRightId()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mNextFocusRightId>;

        return i0;
    }

    public int getNextFocusUpId()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mNextFocusUpId>;

        return i0;
    }

    public android.view.View$OnFocusChangeListener getOnFocusChangeListener()
    {
        android.view.View $r0;
        android.view.View$OnFocusChangeListener r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        return r1;
    }

    public int getPaddingBottom()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mPaddingBottom>;

        return i0;
    }

    public int getPaddingLeft()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mPaddingLeft>;

        return i0;
    }

    public int getPaddingRight()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mPaddingRight>;

        return i0;
    }

    public int getPaddingTop()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mPaddingTop>;

        return i0;
    }

    public final android.view.ViewParent getParent()
    {
        android.view.View $r0;
        android.view.ViewParent r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        return r1;
    }

    public android.content.res.Resources getResources()
    {
        android.view.View $r0;
        android.content.res.Resources r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: android.content.res.Resources mResources>;

        return r1;
    }

    public final int getRight()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mRight>;

        return i0;
    }

    protected float getRightFadingEdgeStrength()
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i1 = virtualinvoke $r0.<android.view.View: int computeHorizontalScrollExtent()>();

        $i0 = $i0 + $i1;

        $i1 = virtualinvoke $r0.<android.view.View: int computeHorizontalScrollRange()>();

        if $i0 >= $i1 goto label1;

        return 1.0F;

     label1:
        return 0.0F;
    }

    protected int getRightPaddingOffset()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    public android.view.View getRootView()
    {
        android.view.View $r0, $r1;
        android.view.View$AttachInfo $r2;
        android.view.ViewParent $r3;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r1 = $r2.<android.view.View$AttachInfo: android.view.View mRootView>;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r3 == null goto label2;

        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r3 instanceof android.view.View;

        if $z0 == 0 goto label2;

        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $r0 = (android.view.View) $r3;

        goto label1;

     label2:
        return $r0;
    }

    public int getScrollBarStyle()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 50331648;

        return $i0;
    }

    public final int getScrollX()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mScrollX>;

        return i0;
    }

    public final int getScrollY()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mScrollY>;

        return i0;
    }

    public int getSolidColor()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    protected int getSuggestedMinimumHeight()
    {
        android.view.View $r0;
        int $i0, $i1;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: android.view.View;

        $i1 = $r0.<android.view.View: int mMinHeight>;

        $r1 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        if $i1 >= $i0 goto label2;

        return $i0;

     label1:
        return $i1;

     label2:
        return $i1;
    }

    protected int getSuggestedMinimumWidth()
    {
        android.view.View $r0;
        int $i0, $i1;
        android.graphics.drawable.Drawable $r1;

        $r0 := @this: android.view.View;

        $i1 = $r0.<android.view.View: int mMinWidth>;

        $r1 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        if $i1 >= $i0 goto label2;

        return $i0;

     label1:
        return $i1;

     label2:
        return $i1;
    }

    public java.lang.Object getTag()
    {
        android.view.View $r0;
        java.lang.Object r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: java.lang.Object mTag>;

        return r1;
    }

    public final int getTop()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mTop>;

        return i0;
    }

    protected float getTopFadingEdgeStrength()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.View: int computeVerticalScrollOffset()>();

        if $i0 <= 0 goto label1;

        return 1.0F;

     label1:
        return 0.0F;
    }

    protected int getTopPaddingOffset()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    public android.view.TouchDelegate getTouchDelegate()
    {
        android.view.View $r0;
        android.view.TouchDelegate r1;

        $r0 := @this: android.view.View;

        r1 = $r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        return r1;
    }

    public java.util.ArrayList getTouchables()
    {
        android.view.View $r0;
        java.util.ArrayList $r1;

        $r0 := @this: android.view.View;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r0.<android.view.View: void addTouchables(java.util.ArrayList)>($r1);

        return $r1;
    }

    public int getVerticalFadingEdgeLength()
    {
        android.view.View $r0;
        android.view.View$ScrollabilityCache $r1;
        boolean $z0;
        int i0;

        $r0 := @this: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isVerticalFadingEdgeEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 == null goto label1;

        i0 = $r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        return i0;

     label1:
        return 0;
    }

    public int getVerticalScrollbarWidth()
    {
        android.view.View $r0;
        android.view.View$ScrollabilityCache $r1;
        android.widget.ScrollBarDrawable $r2;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 == null goto label2;

        $r2 = $r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if $r2 == null goto label3;

        $i0 = virtualinvoke $r2.<android.widget.ScrollBarDrawable: int getSize(boolean)>(1);

        $i1 = $i0;

        if $i0 > 0 goto label1;

        $i1 = $r1.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label1:
        return $i1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public android.view.ViewTreeObserver getViewTreeObserver()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        android.view.ViewTreeObserver $r2;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        return $r2;

     label1:
        $r2 = $r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        if $r2 != null goto label2;

        $r2 = new android.view.ViewTreeObserver;

        specialinvoke $r2.<android.view.ViewTreeObserver: void <init>()>();

        $r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver> = $r2;

     label2:
        $r2 = $r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        return $r2;
    }

    public int getVisibility()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 12;

        return $i0;
    }

    public final int getWidth()
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i1 = $r0.<android.view.View: int mRight>;

        $i0 = $r0.<android.view.View: int mLeft>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    protected int getWindowAttachCount()
    {
        android.view.View $r0;
        int i0;

        $r0 := @this: android.view.View;

        i0 = $r0.<android.view.View: int mWindowAttachCount>;

        return i0;
    }

    android.view.IWindowSession getWindowSession()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        android.view.IWindowSession r2;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r1.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        return r2;

     label1:
        return null;
    }

    public android.os.IBinder getWindowToken()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        android.os.IBinder r2;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r1.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

        return r2;

     label1:
        return null;
    }

    public int getWindowVisibility()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        int i0;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        i0 = $r1.<android.view.View$AttachInfo: int mWindowVisibility>;

        return i0;

     label1:
        return 8;
    }

    public void getWindowVisibleDisplayFrame(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1, $r2;
        android.view.View$AttachInfo $r3;
        android.view.IWindowSession $r4;
        android.view.IWindow $r5;
        int $i0, $i1;
        android.os.RemoteException $r6;
        android.view.WindowManagerImpl $r7;
        android.view.Display $r8;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label4;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r3.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

     label1:
        interfaceinvoke $r4.<android.view.IWindowSession: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)>($r5, $r1);

     label2:
        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r3.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $i0 = $r1.<android.graphics.Rect: int left>;

        $i1 = $r2.<android.graphics.Rect: int left>;

        $i0 = $i0 + $i1;

        $r1.<android.graphics.Rect: int left> = $i0;

        $i0 = $r1.<android.graphics.Rect: int top>;

        $i1 = $r2.<android.graphics.Rect: int top>;

        $i0 = $i0 + $i1;

        $r1.<android.graphics.Rect: int top> = $i0;

        $i0 = $r1.<android.graphics.Rect: int right>;

        $i1 = $r2.<android.graphics.Rect: int right>;

        $i0 = $i0 - $i1;

        $r1.<android.graphics.Rect: int right> = $i0;

        $i0 = $r1.<android.graphics.Rect: int bottom>;

        $i1 = $r2.<android.graphics.Rect: int bottom>;

        $i0 = $i0 - $i1;

        $r1.<android.graphics.Rect: int bottom> = $i0;

        return;

     label3:
        $r6 := @caughtexception;

        return;

     label4:
        $r7 = staticinvoke <android.view.WindowManagerImpl: android.view.WindowManagerImpl getDefault()>();

        $r8 = virtualinvoke $r7.<android.view.WindowManagerImpl: android.view.Display getDefaultDisplay()>();

        $i0 = virtualinvoke $r8.<android.view.Display: int getWidth()>();

        $i1 = virtualinvoke $r8.<android.view.Display: int getHeight()>();

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i0, $i1);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void handleFocusGainInternal(int, android.graphics.Rect)
    {
        android.view.View $r0;
        int $i0, $i1;
        android.graphics.Rect $r1;
        android.view.ViewParent $r2;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.Rect;

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & 2;

        if $i1 != 0 goto label2;

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 | 2;

        $r0.<android.view.View: int mPrivateFlags> = $i1;

        $r2 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>($r0, $r0);

     label1:
        virtualinvoke $r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>(1, $i0, $r1);

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        return;

     label2:
        return;
    }

    public boolean hasFocus()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasFocusable()
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 12;

        if $i0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isFocusable()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasWindowFocus()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r1.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void initializeFadingEdge(android.content.res.TypedArray)
    {
        android.view.View $r0;
        android.content.res.TypedArray $r1;
        android.view.View$ScrollabilityCache $r2;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;
        int $i0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.content.res.TypedArray;

        specialinvoke $r0.<android.view.View: void initScrollCache()>();

        $r2 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r3 = $r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        $i0 = virtualinvoke $r4.<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>();

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(24, $i0);

        $r2.<android.view.View$ScrollabilityCache: int fadingEdgeLength> = $i0;

        return;
    }

    protected void initializeScrollbars(android.content.res.TypedArray)
    {
        android.view.View $r0;
        android.content.res.TypedArray $r1;
        android.view.View$ScrollabilityCache $r2;
        android.widget.ScrollBarDrawable $r3;
        android.content.Context $r4;
        android.view.ViewConfiguration $r5;
        int $i0;
        android.graphics.drawable.Drawable $r6;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.content.res.TypedArray;

        specialinvoke $r0.<android.view.View: void initScrollCache()>();

        $r2 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if $r3 != null goto label1;

        $r2 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r3 = new android.widget.ScrollBarDrawable;

        specialinvoke $r3.<android.widget.ScrollBarDrawable: void <init>()>();

        $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar> = $r3;

     label1:
        $r2 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r4 = $r0.<android.view.View: android.content.Context mContext>;

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $i0 = virtualinvoke $r5.<android.view.ViewConfiguration: int getScaledScrollBarSize()>();

        $i0 = virtualinvoke $r1.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(0, $i0);

        $r2.<android.view.View$ScrollabilityCache: int scrollBarSize> = $i0;

        $r6 = virtualinvoke $r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(3);

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)>($r6);

        $r6 = virtualinvoke $r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(1);

        if $r6 == null goto label2;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)>($r6);

     label2:
        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(5, 0);

        if $z0 == 0 goto label3;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setAlwaysDrawHorizontalTrack(boolean)>(1);

     label3:
        $r6 = virtualinvoke $r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(4);

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setVerticalTrackDrawable(android.graphics.drawable.Drawable)>($r6);

        $r6 = virtualinvoke $r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(2);

        if $r6 == null goto label4;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setVerticalThumbDrawable(android.graphics.drawable.Drawable)>($r6);

     label4:
        $z0 = virtualinvoke $r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(6, 0);

        if $z0 == 0 goto label5;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setAlwaysDrawVerticalTrack(boolean)>(1);

     label5:
        specialinvoke $r0.<android.view.View: void recomputePadding()>();

        return;
    }

    public void invalidate()
    {
        android.view.View $r0;
        android.view.View$AttachInfo $r1;
        android.view.ViewParent $r2;
        android.graphics.Rect $r3;
        int $i0, $i1, $i2;

        $r0 := @this: android.view.View;

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & 48;

        if $i1 != 48 goto label1;

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & -32801;

        $r0.<android.view.View: int mPrivateFlags> = $i1;

        $r2 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label2;

        if $r1 == null goto label3;

        $r3 = $r1.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        $i1 = $r0.<android.view.View: int mRight>;

        $i0 = $r0.<android.view.View: int mLeft>;

        $i1 = $i1 - $i0;

        $i2 = $r0.<android.view.View: int mBottom>;

        $i0 = $r0.<android.view.View: int mTop>;

        $i0 = $i2 - $i0;

        virtualinvoke $r3.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        interfaceinvoke $r2.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>($r0, $r3);

        return;

     label1:
        return;

     label2:
        return;

     label3:
        return;
    }

    public void invalidate(int, int, int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.View$AttachInfo $r1;
        android.view.ViewParent $r2;
        android.graphics.Rect $r3;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i5 = $r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i5 & 48;

        if $i5 != 48 goto label1;

        $i5 = $r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i5 & -32769;

        $r0.<android.view.View: int mPrivateFlags> = $i5;

        $r2 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label2;

        if $r1 == null goto label3;

        if $i0 >= $i2 goto label4;

        if $i1 >= $i3 goto label5;

        $i4 = $r0.<android.view.View: int mScrollX>;

        $i5 = $r0.<android.view.View: int mScrollY>;

        $r3 = $r1.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        $i0 = $i0 - $i4;

        $i1 = $i1 - $i5;

        $i2 = $i2 - $i4;

        $i3 = $i3 - $i5;

        virtualinvoke $r3.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i1, $i2, $i3);

        interfaceinvoke $r2.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>($r0, $r3);

        return;

     label1:
        return;

     label2:
        return;

     label3:
        return;

     label4:
        return;

     label5:
        return;
    }

    public void invalidate(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1, $r4;
        android.view.View$AttachInfo $r2;
        android.view.ViewParent $r3;
        int $i0, $i1, $i2, $i3, $i4;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & 48;

        if $i1 != 48 goto label1;

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & -32769;

        $r0.<android.view.View: int mPrivateFlags> = $i1;

        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label2;

        if $r2 == null goto label3;

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $r4 = $r2.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        $i2 = $r1.<android.graphics.Rect: int left>;

        $i2 = $i2 - $i0;

        $i3 = $r1.<android.graphics.Rect: int top>;

        $i3 = $i3 - $i1;

        $i4 = $r1.<android.graphics.Rect: int right>;

        $i0 = $i4 - $i0;

        $i4 = $r1.<android.graphics.Rect: int bottom>;

        $i1 = $i4 - $i1;

        virtualinvoke $r4.<android.graphics.Rect: void set(int,int,int,int)>($i2, $i3, $i0, $i1);

        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>($r0, $r4);

        return;

     label1:
        return;

     label2:
        return;

     label3:
        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        android.graphics.Rect $r2;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = virtualinvoke $r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>($r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i0 = $r0.<android.view.View: int mScrollX>;

        $i1 = $r0.<android.view.View: int mScrollY>;

        $i2 = $r2.<android.graphics.Rect: int left>;

        $i2 = $i2 + $i0;

        $i3 = $r2.<android.graphics.Rect: int top>;

        $i3 = $i3 + $i1;

        $i4 = $r2.<android.graphics.Rect: int right>;

        $i0 = $i4 + $i0;

        $i4 = $r2.<android.graphics.Rect: int bottom>;

        $i1 = $i4 + $i1;

        virtualinvoke $r0.<android.view.View: void invalidate(int,int,int,int)>($i2, $i3, $i0, $i1);

        return;

     label1:
        return;
    }

    public boolean isClickable()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 16384;

        if $i0 != 16384 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isDrawingCacheEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 32768;

        if $i0 != 32768 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isDuplicateParentStateEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 4194304;

        if $i0 != 4194304 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 32;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isFocusable()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 1;

        if 1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isFocusableInTouchMode()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 262144;

        if 262144 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isFocused()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isHapticFeedbackEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 268435456;

        if 268435456 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isHorizontalFadingEdgeEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 4096;

        if $i0 != 4096 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isHorizontalScrollBarEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 256;

        if $i0 != 256 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isInEditMode()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    public boolean isInTouchMode()
    {
        android.view.View $r0;
        boolean $z0;
        android.view.View$AttachInfo $r1;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r1.<android.view.View$AttachInfo: boolean mInTouchMode>;

        return $z0;

     label1:
        $z0 = staticinvoke <android.view.ViewRoot: boolean isInTouchMode()>();

        return $z0;
    }

    public boolean isLayoutRequested()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 4096;

        if $i0 != 4096 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isLongClickable()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 2097152;

        if $i0 != 2097152 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isPaddingOffsetRequired()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    public boolean isPressed()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 16384;

        if $i0 != 16384 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isRootNamespace()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 8;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isSaveEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 65536;

        if $i0 == 65536 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isSelected()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 4;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isShown()
    {
        android.view.View $r0, $r2;
        android.view.ViewParent $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.View;

     label1:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 12;

        if $i0 == 0 goto label2;

        return 0;

     label2:
        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 != null goto label3;

        return 0;

     label3:
        $z0 = $r1 instanceof android.view.View;

        if $z0 != 0 goto label4;

        return 1;

     label4:
        $r2 = (android.view.View) $r1;

        $r0 = $r2;

        if $r2 != null goto label1;

        return 0;
    }

    public boolean isSoundEffectsEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 134217728;

        if 134217728 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isVerticalFadingEdgeEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 8192;

        if $i0 != 8192 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isVerticalScrollBarEnabled()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 512;

        if $i0 != 512 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isVerticalScrollBarHidden()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    public final void layout(int, int, int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $z0 = virtualinvoke $r0.<android.view.View: boolean setFrame(int,int,int,int)>($i0, $i1, $i2, $i3);

        if $z0 != 0 goto label1;

        $i4 = $r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i4 & 8192;

        if $i4 != 8192 goto label2;

     label1:
        virtualinvoke $r0.<android.view.View: void onLayout(boolean,int,int,int,int)>($z0, $i0, $i1, $i2, $i3);

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -8193;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

     label2:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -4097;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;
    }

    public final void measure(int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i2 & 4096;

        if $i2 == 4096 goto label1;

        $i2 = $r0.<android.view.View: int mOldWidthMeasureSpec>;

        if $i0 != $i2 goto label1;

        $i2 = $r0.<android.view.View: int mOldHeightMeasureSpec>;

        if $i1 == $i2 goto label3;

     label1:
        $i2 = $r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i2 & -2049;

        $r0.<android.view.View: int mPrivateFlags> = $i2;

        virtualinvoke $r0.<android.view.View: void onMeasure(int,int)>($i0, $i1);

        $i2 = $r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i2 & 2048;

        if $i2 == 2048 goto label2;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("onMeasure() did not set the measured dimension by calling setMeasuredDimension()");

        throw $r1;

     label2:
        $i2 = $r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i2 | 8192;

        $r0.<android.view.View: int mPrivateFlags> = $i2;

     label3:
        $r0.<android.view.View: int mOldWidthMeasureSpec> = $i0;

        $r0.<android.view.View: int mOldHeightMeasureSpec> = $i1;

        return;
    }

    void needGlobalAttributesUpdate(boolean)
    {
        android.view.View $r0;
        boolean $z0, $z1;
        android.view.View$AttachInfo $r1;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label2;

        $z1 = $r1.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z1 != 0 goto label1;

        if $z0 == 0 goto label3;

     label1:
        $r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

        return;

     label2:
        return;

     label3:
        return;
    }

    public void offsetLeftAndRight(int)
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.view.View: int mLeft>;

        $i1 = $i1 + $i0;

        $r0.<android.view.View: int mLeft> = $i1;

        $i1 = $r0.<android.view.View: int mRight>;

        $i0 = $i1 + $i0;

        $r0.<android.view.View: int mRight> = $i0;

        return;
    }

    public void offsetTopAndBottom(int)
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.view.View: int mTop>;

        $i1 = $i1 + $i0;

        $r0.<android.view.View: int mTop> = $i1;

        $i1 = $r0.<android.view.View: int mBottom>;

        $i0 = $i1 + $i0;

        $r0.<android.view.View: int mBottom> = $i0;

        return;
    }

    protected void onAnimationEnd()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -65537;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;
    }

    protected void onAnimationStart()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 65536;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;
    }

    protected void onAttachedToWindow()
    {
        android.view.View $r0;
        int $i0;
        android.view.ViewParent $r1;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 512;

        if $i0 == 0 goto label1;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r1.<android.view.ViewParent: void requestTransparentRegion(android.view.View)>($r0);

        return;

     label1:
        return;
    }

    public boolean onCheckIsTextEditor()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return 0;
    }

    protected void onCreateContextMenu(android.view.ContextMenu)
    {
        android.view.View $r0;
        android.view.ContextMenu $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.ContextMenu;

        return;
    }

    protected int[] onCreateDrawableState(int)
    {
        int $i0, $i1, $i2, $i4;
        int[] $r0, $r4;
        android.view.View $r1;
        android.view.ViewParent $r2;
        boolean $z0;
        byte $b3;
        int[][] $r3;

        $r1 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 = $r1.<android.view.View: int mViewFlags>;

        $i1 = $i1 & 4194304;

        if $i1 != 4194304 goto label01;

        $r2 = $r1.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r2 instanceof android.view.View;

        if $z0 == 0 goto label01;

        $r2 = $r1.<android.view.View: android.view.ViewParent mParent>;

        $r1 = (android.view.View) $r2;

        $r0 = virtualinvoke $r1.<android.view.View: int[] onCreateDrawableState(int)>($i0);

        return $r0;

     label01:
        $i1 = $r1.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 16384;

        if $i2 == 0 goto label07;

        $b3 = 1;

     label02:
        $i2 = $b3 << 1;

        $i4 = $r1.<android.view.View: int mViewFlags>;

        $i4 = $i4 & 32;

        if $i4 != 0 goto label08;

        $b3 = 1;

     label03:
        $i2 = $i2 + $b3;

        $i2 = $i2 << 1;

        $z0 = virtualinvoke $r1.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label09;

        $b3 = 1;

     label04:
        $i2 = $i2 + $b3;

        $i2 = $i2 << 1;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label10;

        $b3 = 1;

     label05:
        $i1 = $i2 + $b3;

        $z0 = virtualinvoke $r1.<android.view.View: boolean hasWindowFocus()>();

        $i1 = $i1 << 1;

        if $z0 == 0 goto label11;

        $b3 = 1;

     label06:
        $i1 = $i1 + $b3;

        $r3 = <android.view.View: int[][] VIEW_STATE_SETS>;

        $r0 = $r3[$i1];

        if $i0 != 0 goto label12;

        return $r0;

     label07:
        $b3 = 0;

        goto label02;

     label08:
        $b3 = 0;

        goto label03;

     label09:
        $b3 = 0;

        goto label04;

     label10:
        $b3 = 0;

        goto label05;

     label11:
        $b3 = 0;

        goto label06;

     label12:
        if $r0 == null goto label14;

        $i1 = lengthof $r0;

        $i0 = $i1 + $i0;

        $r4 = newarray (int)[$i0];

        $i0 = lengthof $r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, $r4, 0, $i0);

     label13:
        return $r4;

     label14:
        $r4 = newarray (int)[$i0];

        goto label13;
    }

    public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
    {
        android.view.View $r0;
        android.view.inputmethod.EditorInfo $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.inputmethod.EditorInfo;

        return null;
    }

    protected void onDetachedFromWindow()
    {
        android.view.View $r0;
        android.view.View$CheckForLongPress $r1;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r1);

     label1:
        virtualinvoke $r0.<android.view.View: void destroyDrawingCache()>();

        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.view.View $r0;
        android.graphics.Canvas $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Canvas;

        return;
    }

    protected void onFinishInflate()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return;
    }

    public void onFinishTemporaryDetach()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        android.view.View $r0;
        boolean $z0, $z1;
        int $i0;
        android.graphics.Rect $r1;
        android.view.inputmethod.InputMethodManager $r2;
        android.view.View$AttachInfo $r3;
        android.view.View$OnFocusChangeListener $r4;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 := @parameter2: android.graphics.Rect;

        $r2 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isPressed()>();

        if $z1 == 0 goto label1;

        virtualinvoke $r0.<android.view.View: void setPressed(boolean)>(0);

     label1:
        if $r2 == null goto label2;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label2;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r3.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z1 == 0 goto label2;

        virtualinvoke $r2.<android.view.inputmethod.InputMethodManager: void focusOut(android.view.View)>($r0);

     label2:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

        $r4 = $r0.<android.view.View: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        if $r4 == null goto label4;

        $r4 = $r0.<android.view.View: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        interfaceinvoke $r4.<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>($r0, $z0);

        return;

     label3:
        if $r2 == null goto label2;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label2;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r3.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z1 == 0 goto label2;

        virtualinvoke $r2.<android.view.inputmethod.InputMethodManager: void focusIn(android.view.View)>($r0);

        goto label2;

     label4:
        return;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.view.View $r0;
        int $i0;
        android.view.KeyEvent $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        lookupswitch($i0)
        {
            case 23: goto label2;
            case 66: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 32;

        if $i0 != 32 goto label3;

        return 1;

     label3:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 16384;

        if $i0 == 16384 goto label4;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 2097152;

        if $i0 != 2097152 goto label1;

     label4:
        $i0 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i0 != 0 goto label1;

        virtualinvoke $r0.<android.view.View: void setPressed(boolean)>(1);

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 2097152;

        if $i0 != 2097152 goto label5;

        specialinvoke $r0.<android.view.View: void postCheckForLongClick()>();

     label5:
        return 1;
    }

    public boolean onKeyMultiple(int, int, android.view.KeyEvent)
    {
        android.view.View $r0;
        int $i0, $i1;
        android.view.KeyEvent $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyPreIme(int, android.view.KeyEvent)
    {
        android.view.View $r0;
        int $i0;
        android.view.KeyEvent $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyShortcut(int, android.view.KeyEvent)
    {
        android.view.View $r0;
        int $i0;
        android.view.KeyEvent $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        android.view.View $r0;
        int $i0;
        android.view.KeyEvent $r1;
        boolean $z0, $z1;
        android.view.View$CheckForLongPress $r2;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.KeyEvent;

        $z0 = 0;

        lookupswitch($i0)
        {
            case 23: goto label2;
            case 66: goto label2;
            default: goto label1;
        };

     label1:
        return $z0;

     label2:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 32;

        if $i0 != 32 goto label3;

        return 1;

     label3:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 16384;

        if $i0 != 16384 goto label1;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isPressed()>();

        if $z1 == 0 goto label1;

        virtualinvoke $r0.<android.view.View: void setPressed(boolean)>(0);

        $z1 = $r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z1 != 0 goto label1;

        $r2 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r2 == null goto label4;

        $r2 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

     label4:
        $z0 = virtualinvoke $r0.<android.view.View: boolean performClick()>();

        goto label1;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        return;
    }

    protected void onMeasure(int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = virtualinvoke $r0.<android.view.View: int getSuggestedMinimumWidth()>();

        $i0 = staticinvoke <android.view.View: int getDefaultSize(int,int)>($i2, $i0);

        $i2 = virtualinvoke $r0.<android.view.View: int getSuggestedMinimumHeight()>();

        $i1 = staticinvoke <android.view.View: int getDefaultSize(int,int)>($i2, $i1);

        virtualinvoke $r0.<android.view.View: void setMeasuredDimension(int,int)>($i0, $i1);

        return;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        android.view.View $r0;
        android.os.Parcelable $r1;
        int $i0;
        android.view.AbsSavedState $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.os.Parcelable;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 131072;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $r2 = <android.view.View$BaseSavedState: android.view.AbsSavedState EMPTY_STATE>;

        if $r1 == $r2 goto label1;

        if $r1 == null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Wrong state class -- expecting View State");

        throw $r3;

     label1:
        return;

     label2:
        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        android.view.View $r0;
        int $i0;
        android.view.AbsSavedState r1;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 131072;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        r1 = <android.view.View$BaseSavedState: android.view.AbsSavedState EMPTY_STATE>;

        return r1;
    }

    protected void onScrollChanged(int, int, int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3;
        android.view.View$AttachInfo $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r1.<android.view.View$AttachInfo: boolean mViewScrollChanged> = 1;

        return;

     label1:
        return;
    }

    protected boolean onSetAlpha(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        return 0;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        return;
    }

    public void onStartTemporaryDetach()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.view.View $r0;
        android.view.MotionEvent $r1;
        int $i0, $i1, $i2, $i3;
        android.view.TouchDelegate $r2;
        boolean $z0, $z1;
        android.view.View$CheckForLongPress $r3;
        android.view.View$UnsetPressedState $r4;
        float $f0;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.MotionEvent;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i2 = $i0 & 32;

        if $i2 != 32 goto label03;

        $i2 = $i0 & 16384;

        if $i2 == 16384 goto label01;

        $i0 = $i0 & 2097152;

        if $i0 != 2097152 goto label02;

     label01:
        return 1;

     label02:
        return 0;

     label03:
        $r2 = $r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        if $r2 == null goto label04;

        $r2 = $r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        $z0 = virtualinvoke $r2.<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>($r1);

        if $z0 == 0 goto label04;

        return 1;

     label04:
        $i2 = $i0 & 16384;

        if $i2 == 16384 goto label05;

        $i0 = $i0 & 2097152;

        if $i0 != 2097152 goto label18;

     label05:
        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        lookupswitch($i0)
        {
            case 0: goto label12;
            case 1: goto label07;
            case 2: goto label14;
            case 3: goto label13;
            default: goto label06;
        };

     label06:
        return 1;

     label07:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 16384;

        if $i0 == 0 goto label06;

        $z0 = 0;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isFocusable()>();

        if $z1 == 0 goto label08;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z1 == 0 goto label08;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isFocused()>();

        if $z1 != 0 goto label08;

        $z0 = virtualinvoke $r0.<android.view.View: boolean requestFocus()>();

     label08:
        $z1 = $r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z1 != 0 goto label10;

        $r3 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r3 == null goto label09;

        $r3 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r3);

     label09:
        if $z0 != 0 goto label10;

        virtualinvoke $r0.<android.view.View: boolean performClick()>();

     label10:
        $r4 = $r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        if $r4 != null goto label11;

        $r4 = new android.view.View$UnsetPressedState;

        specialinvoke $r4.<android.view.View$UnsetPressedState: void <init>(android.view.View,android.view.View$1)>($r0, null);

        $r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState> = $r4;

     label11:
        $r4 = $r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        $z0 = virtualinvoke $r0.<android.view.View: boolean post(java.lang.Runnable)>($r4);

        if $z0 != 0 goto label06;

        $r4 = $r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        virtualinvoke $r4.<android.view.View$UnsetPressedState: void run()>();

        goto label06;

     label12:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 16384;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 2097152;

        if $i0 != 2097152 goto label06;

        specialinvoke $r0.<android.view.View: void postCheckForLongClick()>();

        goto label06;

     label13:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -16385;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        goto label06;

     label14:
        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $i1 = (int) $f0;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $i0 = (int) $f0;

        $r5 = $r0.<android.view.View: android.content.Context mContext>;

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $i2 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $i3 = 0 - $i2;

        if $i1 < $i3 goto label15;

        $i3 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i3 = $i3 + $i2;

        if $i1 >= $i3 goto label15;

        $i1 = 0 - $i2;

        if $i0 < $i1 goto label15;

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $i2 = $i1 + $i2;

        if $i0 < $i2 goto label17;

     label15:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 16384;

        if $i0 == 0 goto label06;

        $r3 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r3 == null goto label16;

        $r3 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r3);

     label16:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -16385;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        goto label06;

     label17:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 16384;

        if $i0 != 0 goto label06;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 16384;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        goto label06;

     label18:
        return 0;
    }

    public boolean onTrackballEvent(android.view.MotionEvent)
    {
        android.view.View $r0;
        android.view.MotionEvent $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    public void onWindowFocusChanged(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        android.view.inputmethod.InputMethodManager $r1;
        int $i0;
        android.view.View$CheckForLongPress $r2;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $r1 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>();

        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isPressed()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<android.view.View: void setPressed(boolean)>(0);

     label1:
        if $r1 == null goto label2;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label2;

        virtualinvoke $r1.<android.view.inputmethod.InputMethodManager: void focusOut(android.view.View)>($r0);

     label2:
        $r2 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r2 == null goto label3;

        $r2 = $r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

     label3:
        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        return;

     label4:
        if $r1 == null goto label3;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label3;

        virtualinvoke $r1.<android.view.inputmethod.InputMethodManager: void focusIn(android.view.View)>($r0);

        goto label3;
    }

    protected void onWindowVisibilityChanged(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        return;
    }

    public boolean performClick()
    {
        android.view.View $r0;
        android.view.View$OnClickListener $r1;

        $r0 := @this: android.view.View;

        $r1 = $r0.<android.view.View: android.view.View$OnClickListener mOnClickListener>;

        if $r1 == null goto label1;

        virtualinvoke $r0.<android.view.View: void playSoundEffect(int)>(0);

        $r1 = $r0.<android.view.View: android.view.View$OnClickListener mOnClickListener>;

        interfaceinvoke $r1.<android.view.View$OnClickListener: void onClick(android.view.View)>($r0);

        return 1;

     label1:
        return 0;
    }

    void performCollectViewAttributes(int)
    {
        android.view.View $r0;
        int $i0, $i1;
        android.view.View$AttachInfo $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i1 | $i0;

        $i0 = $i0 & 67108876;

        if $i0 != 67108864 goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r1.<android.view.View$AttachInfo: boolean mKeepScreenOn> = 1;

        return;

     label1:
        return;
    }

    public boolean performHapticFeedback(int)
    {
        android.view.View $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<android.view.View: boolean performHapticFeedback(int,int)>($i0, 0);

        return $z0;
    }

    public boolean performHapticFeedback(int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2;
        android.view.View$AttachInfo $r1;
        boolean $z0;
        android.view.View$AttachInfo$Callbacks $r2;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i2 = $i1 & 1;

        if $i2 != 0 goto label2;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isHapticFeedbackEnabled()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label4;

        $z0 = 1;

     label3:
        $z0 = interfaceinvoke $r2.<android.view.View$AttachInfo$Callbacks: boolean performHapticFeedback(int,boolean)>($i0, $z0);

        return $z0;

     label4:
        $z0 = 0;

        goto label3;
    }

    public boolean performLongClick()
    {
        android.view.View $r0;
        boolean $z0;
        android.view.View$OnLongClickListener $r1;

        $r0 := @this: android.view.View;

        $z0 = 0;

        $r1 = $r0.<android.view.View: android.view.View$OnLongClickListener mOnLongClickListener>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.View$OnLongClickListener mOnLongClickListener>;

        $z0 = interfaceinvoke $r1.<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)>($r0);

     label1:
        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r0.<android.view.View: boolean showContextMenu()>();

     label2:
        if $z0 == 0 goto label3;

        virtualinvoke $r0.<android.view.View: boolean performHapticFeedback(int)>(0);

        return $z0;

     label3:
        return $z0;
    }

    public void playSoundEffect(int)
    {
        android.view.View $r0;
        int $i0;
        boolean $z0;
        android.view.View$AttachInfo $r1;
        android.view.View$AttachInfo$Callbacks $r2;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label2;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        if $r2 == null goto label3;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isSoundEffectsEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        interfaceinvoke $r2.<android.view.View$AttachInfo$Callbacks: void playSoundEffect(int)>($i0);

        return;

     label2:
        return;

     label3:
        return;
    }

    public boolean post(java.lang.Runnable)
    {
        android.view.View $r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;
        android.view.View$AttachInfo $r3;
        boolean $z0;
        android.view.ViewRoot$RunQueue $r4;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: java.lang.Runnable;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r3.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r1);

        return $z0;

     label1:
        $r4 = staticinvoke <android.view.ViewRoot: android.view.ViewRoot$RunQueue getRunQueue()>();

        virtualinvoke $r4.<android.view.ViewRoot$RunQueue: void post(java.lang.Runnable)>($r1);

        return 1;
    }

    public boolean postDelayed(java.lang.Runnable, long)
    {
        android.view.View $r0;
        java.lang.Runnable $r1;
        long $l0;
        android.os.Handler $r2;
        android.view.View$AttachInfo $r3;
        boolean $z0;
        android.view.ViewRoot$RunQueue $r4;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: java.lang.Runnable;

        $l0 := @parameter1: long;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label1;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r3.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r1, $l0);

        return $z0;

     label1:
        $r4 = staticinvoke <android.view.ViewRoot: android.view.ViewRoot$RunQueue getRunQueue()>();

        virtualinvoke $r4.<android.view.ViewRoot$RunQueue: void postDelayed(java.lang.Runnable,long)>($r1, $l0);

        return 1;
    }

    public void postInvalidate()
    {
        android.view.View $r0;

        $r0 := @this: android.view.View;

        virtualinvoke $r0.<android.view.View: void postInvalidateDelayed(long)>(0L);

        return;
    }

    public void postInvalidate(int, int, int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        virtualinvoke $r0.<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>(0L, $i0, $i1, $i2, $i3);

        return;
    }

    public void postInvalidateDelayed(long)
    {
        android.view.View $r0;
        long $l0;
        android.os.Message $r1;
        android.view.View$AttachInfo $r2;
        android.os.Handler $r3;

        $r0 := @this: android.view.View;

        $l0 := @parameter0: long;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        $r1 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        $r1.<android.os.Message: int what> = 1;

        $r1.<android.os.Message: java.lang.Object obj> = $r0;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r1, $l0);

        return;

     label1:
        return;
    }

    public void postInvalidateDelayed(long, int, int, int, int)
    {
        android.view.View $r0;
        long $l0;
        int $i1, $i2, $i3, $i4;
        android.view.View$AttachInfo $r1;
        android.view.View$AttachInfo$InvalidateInfo $r2;
        android.os.Message $r3;
        android.os.Handler $r4;

        $r0 := @this: android.view.View;

        $l0 := @parameter0: long;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = staticinvoke <android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo acquire()>();

        $r2.<android.view.View$AttachInfo$InvalidateInfo: android.view.View target> = $r0;

        $r2.<android.view.View$AttachInfo$InvalidateInfo: int left> = $i1;

        $r2.<android.view.View$AttachInfo$InvalidateInfo: int top> = $i2;

        $r2.<android.view.View$AttachInfo$InvalidateInfo: int right> = $i3;

        $r2.<android.view.View$AttachInfo$InvalidateInfo: int bottom> = $i4;

        $r3 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        $r3.<android.os.Message: int what> = 2;

        $r3.<android.os.Message: java.lang.Object obj> = $r2;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r3, $l0);

        return;

     label1:
        return;
    }

    public void refreshDrawableState()
    {
        android.view.View $r0;
        android.view.ViewParent $r1;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 1024;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void drawableStateChanged()>();

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>($r0);

        return;

     label1:
        return;
    }

    public boolean removeCallbacks(java.lang.Runnable)
    {
        android.view.View $r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;
        android.view.ViewRoot$RunQueue $r3;
        android.view.View$AttachInfo $r4;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: java.lang.Runnable;

        $r4 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label1;

        $r4 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r4.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        return 1;

     label1:
        $r3 = staticinvoke <android.view.ViewRoot: android.view.ViewRoot$RunQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.ViewRoot$RunQueue: void removeCallbacks(java.lang.Runnable)>($r1);

        return 1;
    }

    public final boolean requestFocus()
    {
        android.view.View $r0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean requestFocus(int)>(130);

        return $z0;
    }

    public final boolean requestFocus(int)
    {
        android.view.View $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>($i0, null);

        return $z0;
    }

    public boolean requestFocus(int, android.graphics.Rect)
    {
        android.view.View $r0;
        int $i0, $i1;
        android.graphics.Rect $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.graphics.Rect;

        $i1 = $r0.<android.view.View: int mViewFlags>;

        $i1 = $i1 & 1;

        if $i1 != 1 goto label1;

        $i1 = $r0.<android.view.View: int mViewFlags>;

        $i1 = $i1 & 12;

        if $i1 == 0 goto label2;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke $r0.<android.view.View: boolean isInTouchMode()>();

        if $z0 == 0 goto label3;

        $i1 = $r0.<android.view.View: int mViewFlags>;

        $i1 = $i1 & 262144;

        if 262144 == $i1 goto label3;

        return 0;

     label3:
        $z0 = specialinvoke $r0.<android.view.View: boolean hasAncestorThatBlocksDescendantFocus()>();

        if $z0 == 0 goto label4;

        return 0;

     label4:
        virtualinvoke $r0.<android.view.View: void handleFocusGainInternal(int,android.graphics.Rect)>($i0, $r1);

        return 1;
    }

    public final boolean requestFocusFromTouch()
    {
        android.view.View $r0, $r1;
        boolean $z0;
        android.view.ViewParent $r2;
        android.view.ViewRoot $r3;

        $r0 := @this: android.view.View;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isInTouchMode()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r0.<android.view.View: android.view.View getRootView()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewParent getParent()>();

        $r3 = (android.view.ViewRoot) $r2;

        if $r3 == null goto label1;

        virtualinvoke $r3.<android.view.ViewRoot: boolean ensureTouchMode(boolean)>(0);

     label1:
        $z0 = virtualinvoke $r0.<android.view.View: boolean requestFocus(int)>(130);

        return $z0;
    }

    public void requestLayout()
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;
        android.view.ViewParent $r1;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 4096;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = interfaceinvoke $r1.<android.view.ViewParent: boolean isLayoutRequested()>();

        if $z0 != 0 goto label2;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r1.<android.view.ViewParent: void requestLayout()>();

        return;

     label1:
        return;

     label2:
        return;
    }

    public boolean requestRectangleOnScreen(android.graphics.Rect)
    {
        android.view.View $r0;
        android.graphics.Rect $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke $r0.<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>($r1, 0);

        return $z0;
    }

    public boolean requestRectangleOnScreen(android.graphics.Rect, boolean)
    {
        android.view.View $r0, $r2;
        android.graphics.Rect $r1;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r3;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.Rect;

        $z0 := @parameter1: boolean;

        $r2 = $r0;

        $r3 = $r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = 0;

     label1:
        if $r3 == null goto label3;

        $z2 = interfaceinvoke $r3.<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>($r2, $r1, $z0);

        $z1 = $z1 | $z2;

        $i0 = virtualinvoke $r2.<android.view.View: int getLeft()>();

        $i1 = virtualinvoke $r2.<android.view.View: int getTop()>();

        virtualinvoke $r1.<android.graphics.Rect: void offset(int,int)>($i0, $i1);

        $i0 = virtualinvoke $r2.<android.view.View: int getScrollX()>();

        $i0 = neg $i0;

        $i1 = virtualinvoke $r2.<android.view.View: int getScrollY()>();

        $i1 = neg $i1;

        virtualinvoke $r1.<android.graphics.Rect: void offset(int,int)>($i0, $i1);

        $z2 = $r3 instanceof android.view.View;

        if $z2 != 0 goto label2;

        return $z1;

     label2:
        $r0 = (android.view.View) $r3;

        $r2 = $r0;

        $r3 = virtualinvoke $r0.<android.view.View: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return $z1;
    }

    public void restoreHierarchyState(android.util.SparseArray)
    {
        android.view.View $r0;
        android.util.SparseArray $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.util.SparseArray;

        virtualinvoke $r0.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>($r1);

        return;
    }

    public void saveHierarchyState(android.util.SparseArray)
    {
        android.view.View $r0;
        android.util.SparseArray $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.util.SparseArray;

        virtualinvoke $r0.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>($r1);

        return;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1;
        java.lang.Runnable $r2;
        long $l0;
        boolean $z0;
        android.view.View$AttachInfo $r3;
        android.os.Handler $r4;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 := @parameter1: java.lang.Runnable;

        $l0 := @parameter2: long;

        $z0 = virtualinvoke $r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>($r1);

        if $z0 == 0 goto label1;

        if $r2 == null goto label2;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label3;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>($r2, $r1, $l0);

        return;

     label1:
        return;

     label2:
        return;

     label3:
        return;
    }

    public void scrollBy(int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $r0.<android.view.View: int mScrollX>;

        $i0 = $i2 + $i0;

        $i2 = $r0.<android.view.View: int mScrollY>;

        $i1 = $i2 + $i1;

        virtualinvoke $r0.<android.view.View: void scrollTo(int,int)>($i0, $i1);

        return;
    }

    public void scrollTo(int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $r0.<android.view.View: int mScrollX>;

        if $i2 != $i0 goto label1;

        $i2 = $r0.<android.view.View: int mScrollY>;

        if $i2 == $i1 goto label2;

     label1:
        $i2 = $r0.<android.view.View: int mScrollX>;

        $i3 = $r0.<android.view.View: int mScrollY>;

        $r0.<android.view.View: int mScrollX> = $i0;

        $r0.<android.view.View: int mScrollY> = $i1;

        $i1 = $r0.<android.view.View: int mScrollX>;

        $i0 = $r0.<android.view.View: int mScrollY>;

        virtualinvoke $r0.<android.view.View: void onScrollChanged(int,int,int,int)>($i1, $i0, $i2, $i3);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label2:
        return;
    }

    public void setAnimation(android.view.animation.Animation)
    {
        android.view.View $r0;
        android.view.animation.Animation $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.animation.Animation;

        $r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = $r1;

        if $r1 == null goto label1;

        virtualinvoke $r1.<android.view.animation.Animation: void reset()>();

        return;

     label1:
        return;
    }

    public void setBackgroundColor(int)
    {
        android.view.View $r0;
        int $i0;
        android.graphics.drawable.ColorDrawable $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r1 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r1.<android.graphics.drawable.ColorDrawable: void <init>(int)>($i0);

        virtualinvoke $r0.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r1);

        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;
        android.graphics.Rect $r5;
        int[] $r6;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = 0;

        $r0.<android.view.View: int mBackgroundResource> = 0;

        $r2 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r2 == null goto label01;

        $r2 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

        $r2 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        virtualinvoke $r0.<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>($r2);

     label01:
        if $r1 == null goto label11;

        $r3 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r5 = (android.graphics.Rect) $r4;

        if $r5 != null goto label02;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        $r3 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r5);

     label02:
        $z1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>($r5);

        if $z1 == 0 goto label03;

        $i2 = $r5.<android.graphics.Rect: int left>;

        $i3 = $r5.<android.graphics.Rect: int top>;

        $i0 = $r5.<android.graphics.Rect: int right>;

        $i1 = $r5.<android.graphics.Rect: int bottom>;

        virtualinvoke $r0.<android.view.View: void setPadding(int,int,int,int)>($i2, $i3, $i0, $i1);

     label03:
        $r2 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r2 == null goto label04;

        $r2 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        $i1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        if $i0 != $i1 goto label04;

        $r2 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        $i1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        if $i0 == $i1 goto label05;

     label04:
        $z0 = 1;

     label05:
        virtualinvoke $r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>($r0);

        $z1 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z1 == 0 goto label06;

        $r6 = virtualinvoke $r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r6);

     label06:
        $i0 = virtualinvoke $r0.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label10;

        $z1 = 1;

     label07:
        virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0);

        $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable> = $r1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 128;

        if $i0 == 0 goto label08;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -129;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 256;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $z0 = 1;

     label08:
        if $z0 == 0 goto label09;

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

     label09:
        $r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label10:
        $z1 = 0;

        goto label07;

     label11:
        $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable> = null;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 256;

        if $i0 == 0 goto label12;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -257;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 128;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

     label12:
        $z0 = 1;

        goto label08;
    }

    public void setBackgroundResource(int)
    {
        android.view.View $r0;
        int $i0, $i1;
        android.graphics.drawable.Drawable $r1;
        android.content.res.Resources $r2;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        if $i0 == 0 goto label1;

        $i1 = $r0.<android.view.View: int mBackgroundResource>;

        if $i0 != $i1 goto label1;

        return;

     label1:
        $r1 = null;

        if $i0 == 0 goto label2;

        $r2 = $r0.<android.view.View: android.content.res.Resources mResources>;

        $r1 = virtualinvoke $r2.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i0);

     label2:
        virtualinvoke $r0.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r1);

        $r0.<android.view.View: int mBackgroundResource> = $i0;

        return;
    }

    public void setClickable(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        short $s0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $s0 = 16384;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($s0, 16384);

        return;

     label2:
        $s0 = 0;

        goto label1;
    }

    public void setDrawingCacheBackgroundColor(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r0.<android.view.View: int mDrawingCacheBackgroundColor> = $i0;

        return;
    }

    public void setDrawingCacheEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        char $c0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $c0 = 32768;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($c0, 32768);

        return;

     label2:
        $c0 = 0;

        goto label1;
    }

    public void setDrawingCacheQuality(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 1572864);

        return;
    }

    public void setDuplicateParentStateEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = 4194304;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 4194304);

        return;

     label2:
        $i0 = 0;

        goto label1;
    }

    public void setEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        byte $b0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $b0 = 0;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($b0, 32);

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label2:
        $b0 = 32;

        goto label1;
    }

    public void setFadingEdgeLength(int)
    {
        android.view.View $r0;
        int $i0;
        android.view.View$ScrollabilityCache $r1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        specialinvoke $r0.<android.view.View: void initScrollCache()>();

        $r1 = $r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength> = $i0;

        return;
    }

    void setFlags(int, int)
    {
        android.view.View $r0, $r3;
        int $i0, $i1, $i2, $i3, $i4;
        android.view.ViewParent $r1;
        boolean $z0;
        android.view.View$AttachInfo $r2;
        android.graphics.drawable.Drawable $r4;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $r0.<android.view.View: int mViewFlags>;

        $i3 = $r0.<android.view.View: int mViewFlags>;

        $i4 = $i1 ^ -1;

        $i3 = $i3 & $i4;

        $i1 = $i0 & $i1;

        $i1 = $i3 | $i1;

        $r0.<android.view.View: int mViewFlags> = $i1;

        $i1 = $r0.<android.view.View: int mViewFlags>;

        $i1 = $i1 ^ $i2;

        if $i1 != 0 goto label01;

        return;

     label01:
        $i3 = $r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i1 & 1;

        if $i4 == 0 goto label02;

        $i4 = $i3 & 16;

        if $i4 == 0 goto label02;

        $i4 = $i2 & 1;

        if $i4 != 1 goto label13;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label13;

        virtualinvoke $r0.<android.view.View: void clearFocus()>();

     label02:
        $i0 = $i0 & 12;

        if $i0 != 0 goto label03;

        $i0 = $i1 & 12;

        if $i0 == 0 goto label03;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 32;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(1);

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label03;

        $i0 = $r0.<android.view.View: int mBottom>;

        $i2 = $r0.<android.view.View: int mTop>;

        if $i0 <= $i2 goto label03;

        $i0 = $r0.<android.view.View: int mRight>;

        $i2 = $r0.<android.view.View: int mLeft>;

        if $i0 <= $i2 goto label03;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r1.<android.view.ViewParent: void focusableViewAvailable(android.view.View)>($r0);

     label03:
        $i0 = $i1 & 8;

        if $i0 == 0 goto label05;

        virtualinvoke $r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(0);

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 12;

        if $i0 != 8 goto label04;

        $z0 = virtualinvoke $r0.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label04;

        virtualinvoke $r0.<android.view.View: void clearFocus()>();

     label04:
        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label05;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 1;

     label05:
        $i0 = $i1 & 4;

        if $i0 == 0 goto label07;

        virtualinvoke $r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(0);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 12;

        if $i0 != 4 goto label06;

        $z0 = virtualinvoke $r0.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label06;

        $r3 = virtualinvoke $r0.<android.view.View: android.view.View getRootView()>();

        if $r3 == $r0 goto label06;

        virtualinvoke $r0.<android.view.View: void clearFocus()>();

     label06:
        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label07;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 1;

     label07:
        $i0 = 131072 & $i1;

        if $i0 == 0 goto label08;

        virtualinvoke $r0.<android.view.View: void destroyDrawingCache()>();

     label08:
        $i0 = 32768 & $i1;

        if $i0 == 0 goto label09;

        virtualinvoke $r0.<android.view.View: void destroyDrawingCache()>();

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -32769;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

     label09:
        $i0 = 1572864 & $i1;

        if $i0 == 0 goto label10;

        virtualinvoke $r0.<android.view.View: void destroyDrawingCache()>();

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -32769;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

     label10:
        $i0 = $i1 & 128;

        if $i0 == 0 goto label12;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 128;

        if $i0 == 0 goto label15;

        $r4 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r4 == null goto label14;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -129;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 256;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

     label11:
        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        virtualinvoke $r0.<android.view.View: void invalidate()>();

     label12:
        $i0 = 67108864 & $i1;

        if $i0 == 0 goto label16;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label17;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r1.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>($r0);

        return;

     label13:
        $i2 = $i2 & 1;

        if $i2 != 0 goto label02;

        $i2 = $i3 & 2;

        if $i2 != 0 goto label02;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 == null goto label02;

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r1.<android.view.ViewParent: void focusableViewAvailable(android.view.View)>($r0);

        goto label02;

     label14:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 128;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        goto label11;

     label15:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -129;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        goto label11;

     label16:
        return;

     label17:
        return;
    }

    public void setFocusable(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        byte $b0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>(0, 262144);

     label1:
        if $z0 == 0 goto label3;

        $b0 = 1;

     label2:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($b0, 1);

        return;

     label3:
        $b0 = 0;

        goto label2;
    }

    public void setFocusableInTouchMode(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = 262144;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 262144);

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>(1, 1);

        return;

     label2:
        $i0 = 0;

        goto label1;

     label3:
        return;
    }

    protected boolean setFrame(int, int, int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 = $r0.<android.view.View: int mLeft>;

        if $i4 != $i0 goto label1;

        $i4 = $r0.<android.view.View: int mRight>;

        if $i4 != $i2 goto label1;

        $i4 = $r0.<android.view.View: int mTop>;

        if $i4 != $i1 goto label1;

        $i4 = $r0.<android.view.View: int mBottom>;

        if $i4 == $i3 goto label5;

     label1:
        $i4 = $r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i4 & 32;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        $i6 = $r0.<android.view.View: int mRight>;

        $i5 = $r0.<android.view.View: int mLeft>;

        $i6 = $i6 - $i5;

        $i5 = $r0.<android.view.View: int mBottom>;

        $i7 = $r0.<android.view.View: int mTop>;

        $i5 = $i5 - $i7;

        $r0.<android.view.View: int mLeft> = $i0;

        $r0.<android.view.View: int mTop> = $i1;

        $r0.<android.view.View: int mRight> = $i2;

        $r0.<android.view.View: int mBottom> = $i3;

        $i7 = $r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i7 | 16;

        $r0.<android.view.View: int mPrivateFlags> = $i7;

        $i0 = $i2 - $i0;

        $i1 = $i3 - $i1;

        if $i0 != $i6 goto label2;

        if $i1 == $i5 goto label3;

     label2:
        virtualinvoke $r0.<android.view.View: void onSizeChanged(int,int,int,int)>($i0, $i1, $i6, $i5);

     label3:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 12;

        if $i0 != 0 goto label4;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 32;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

     label4:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | $i4;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        $r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        return 1;

     label5:
        return 0;
    }

    public void setHapticFeedbackEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = 268435456;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 268435456);

        return;

     label2:
        $i0 = 0;

        goto label1;
    }

    public void setHorizontalFadingEdgeEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0, $z1;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isHorizontalFadingEdgeEnabled()>();

        if $z1 == $z0 goto label2;

        if $z0 == 0 goto label1;

        specialinvoke $r0.<android.view.View: void initScrollCache()>();

     label1:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 ^ 4096;

        $r0.<android.view.View: int mViewFlags> = $i0;

        return;

     label2:
        return;
    }

    public void setHorizontalScrollBarEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0, $z1;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        if $z1 == $z0 goto label1;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 ^ 256;

        $r0.<android.view.View: int mViewFlags> = $i0;

        specialinvoke $r0.<android.view.View: void recomputePadding()>();

        return;

     label1:
        return;
    }

    public void setId(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r0.<android.view.View: int mID> = $i0;

        return;
    }

    public void setIsRootNamespace(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 8;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;

     label1:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -9;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;
    }

    public void setKeepScreenOn(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = 67108864;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 67108864);

        return;

     label2:
        $i0 = 0;

        goto label1;
    }

    public void setLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.view.View $r0;
        android.view.ViewGroup$LayoutParams $r1;
        java.lang.NullPointerException $r2;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("params == null");

        throw $r2;

     label1:
        $r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams> = $r1;

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        return;
    }

    public void setLongClickable(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = 2097152;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 2097152);

        return;

     label2:
        $i0 = 0;

        goto label1;
    }

    protected final void setMeasuredDimension(int, int)
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r0.<android.view.View: int mMeasuredWidth> = $i0;

        $r0.<android.view.View: int mMeasuredHeight> = $i1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 2048;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;
    }

    public void setMinimumHeight(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r0.<android.view.View: int mMinHeight> = $i0;

        return;
    }

    public void setMinimumWidth(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r0.<android.view.View: int mMinWidth> = $i0;

        return;
    }

    public void setNextFocusDownId(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r0.<android.view.View: int mNextFocusDownId> = $i0;

        return;
    }

    public void setNextFocusLeftId(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r0.<android.view.View: int mNextFocusLeftId> = $i0;

        return;
    }

    public void setNextFocusRightId(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r0.<android.view.View: int mNextFocusRightId> = $i0;

        return;
    }

    public void setNextFocusUpId(int)
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $r0.<android.view.View: int mNextFocusUpId> = $i0;

        return;
    }

    public void setOnClickListener(android.view.View$OnClickListener)
    {
        android.view.View $r0;
        android.view.View$OnClickListener $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View$OnClickListener;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<android.view.View: void setClickable(boolean)>(1);

     label1:
        $r0.<android.view.View: android.view.View$OnClickListener mOnClickListener> = $r1;

        return;
    }

    public void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)
    {
        android.view.View $r0;
        android.view.View$OnCreateContextMenuListener $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View$OnCreateContextMenuListener;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isLongClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<android.view.View: void setLongClickable(boolean)>(1);

     label1:
        $r0.<android.view.View: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener> = $r1;

        return;
    }

    public void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)
    {
        android.view.View $r0;
        android.view.View$OnFocusChangeListener $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View$OnFocusChangeListener;

        $r0.<android.view.View: android.view.View$OnFocusChangeListener mOnFocusChangeListener> = $r1;

        return;
    }

    public void setOnKeyListener(android.view.View$OnKeyListener)
    {
        android.view.View $r0;
        android.view.View$OnKeyListener $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View$OnKeyListener;

        $r0.<android.view.View: android.view.View$OnKeyListener mOnKeyListener> = $r1;

        return;
    }

    public void setOnLongClickListener(android.view.View$OnLongClickListener)
    {
        android.view.View $r0;
        android.view.View$OnLongClickListener $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View$OnLongClickListener;

        $z0 = virtualinvoke $r0.<android.view.View: boolean isLongClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<android.view.View: void setLongClickable(boolean)>(1);

     label1:
        $r0.<android.view.View: android.view.View$OnLongClickListener mOnLongClickListener> = $r1;

        return;
    }

    public void setOnTouchListener(android.view.View$OnTouchListener)
    {
        android.view.View $r0;
        android.view.View$OnTouchListener $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.View$OnTouchListener;

        $r0.<android.view.View: android.view.View$OnTouchListener mOnTouchListener> = $r1;

        return;
    }

    public void setPadding(int, int, int, int)
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i3 := @parameter2: int;

        $i4 := @parameter3: int;

        $z0 = 0;

        $r0.<android.view.View: int mUserPaddingRight> = $i3;

        $r0.<android.view.View: int mUserPaddingBottom> = $i4;

        $i2 = $r0.<android.view.View: int mViewFlags>;

        $i5 = $i2 & 768;

        if $i5 == 0 goto label04;

        $i5 = $i2 & 512;

        if $i5 == 0 goto label02;

        $i5 = $i2 & 16777216;

        if $i5 != 0 goto label09;

        $i5 = 0;

     label01:
        $i3 = $i3 + $i5;

     label02:
        $i5 = $i2 & 256;

        if $i5 != 0 goto label04;

        $i2 = $i2 & 16777216;

        if $i2 != 0 goto label10;

        $i2 = 0;

     label03:
        $i4 = $i4 + $i2;

     label04:
        $i2 = $r0.<android.view.View: int mPaddingLeft>;

        if $i2 == $i0 goto label05;

        $z0 = 1;

        $r0.<android.view.View: int mPaddingLeft> = $i0;

     label05:
        $i0 = $r0.<android.view.View: int mPaddingTop>;

        if $i0 == $i1 goto label06;

        $z0 = 1;

        $r0.<android.view.View: int mPaddingTop> = $i1;

     label06:
        $i0 = $r0.<android.view.View: int mPaddingRight>;

        if $i0 == $i3 goto label07;

        $z0 = 1;

        $r0.<android.view.View: int mPaddingRight> = $i3;

     label07:
        $i0 = $r0.<android.view.View: int mPaddingBottom>;

        if $i0 == $i4 goto label08;

        $z0 = 1;

        $r0.<android.view.View: int mPaddingBottom> = $i4;

     label08:
        if $z0 == 0 goto label11;

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        return;

     label09:
        $i5 = virtualinvoke $r0.<android.view.View: int getVerticalScrollbarWidth()>();

        goto label01;

     label10:
        $i2 = virtualinvoke $r0.<android.view.View: int getHorizontalScrollbarHeight()>();

        goto label03;

     label11:
        return;
    }

    public void setPressed(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 16384;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

     label1:
        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke $r0.<android.view.View: void dispatchSetPressed(boolean)>($z0);

        return;

     label2:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -16385;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        goto label1;
    }

    public void setSaveEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = 0;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 65536);

        return;

     label2:
        $i0 = 65536;

        goto label1;
    }

    public void setScrollBarStyle(int)
    {
        android.view.View $r0;
        int $i0, $i1;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.view.View: int mViewFlags>;

        $i1 = $i1 & 50331648;

        if $i0 == $i1 goto label1;

        $i1 = $r0.<android.view.View: int mViewFlags>;

        $i1 = $i1 & -50331649;

        $i0 = $i0 & 50331648;

        $i0 = $i1 | $i0;

        $r0.<android.view.View: int mViewFlags> = $i0;

        specialinvoke $r0.<android.view.View: void recomputePadding()>();

        return;

     label1:
        return;
    }

    public void setScrollContainer(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        android.view.View$AttachInfo $r1;
        int $i0;
        java.util.ArrayList $r2;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 1048576;

        if $i0 != 0 goto label1;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 1048576;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

     label1:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 | 524288;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;

     label2:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 1048576;

        if $i0 == 0 goto label3;

        $r1 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>($r0);

     label3:
        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -1572865;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        return;
    }

    public void setSelected(boolean)
    {
        android.view.View $r0;
        boolean $z0, $z1;
        byte $b0;
        int $i1;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $b0 = 0;

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & 4;

        if $i1 == 0 goto label3;

        $z1 = 1;

     label1:
        if $z1 == $z0 goto label4;

        $i1 = $r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i1 & -5;

        if $z0 == 0 goto label2;

        $b0 = 4;

     label2:
        $i1 = $i1 | $b0;

        $r0.<android.view.View: int mPrivateFlags> = $i1;

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke $r0.<android.view.View: void dispatchSetSelected(boolean)>($z0);

        return;

     label3:
        $z1 = 0;

        goto label1;

     label4:
        return;
    }

    public void setSoundEffectsEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = 134217728;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 134217728);

        return;

     label2:
        $i0 = 0;

        goto label1;
    }

    public void setTag(java.lang.Object)
    {
        android.view.View $r0;
        java.lang.Object $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: java.lang.Object;

        $r0.<android.view.View: java.lang.Object mTag> = $r1;

        return;
    }

    public void setTouchDelegate(android.view.TouchDelegate)
    {
        android.view.View $r0;
        android.view.TouchDelegate $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.TouchDelegate;

        $r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = $r1;

        return;
    }

    public void setVerticalFadingEdgeEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0, $z1;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isVerticalFadingEdgeEnabled()>();

        if $z1 == $z0 goto label2;

        if $z0 == 0 goto label1;

        specialinvoke $r0.<android.view.View: void initScrollCache()>();

     label1:
        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 ^ 8192;

        $r0.<android.view.View: int mViewFlags> = $i0;

        return;

     label2:
        return;
    }

    public void setVerticalScrollBarEnabled(boolean)
    {
        android.view.View $r0;
        boolean $z0, $z1;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke $r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z1 == $z0 goto label1;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 ^ 512;

        $r0.<android.view.View: int mViewFlags> = $i0;

        specialinvoke $r0.<android.view.View: void recomputePadding()>();

        return;

     label1:
        return;
    }

    public void setVisibility(int)
    {
        android.view.View $r0;
        int $i0;
        android.graphics.drawable.Drawable $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 12);

        $r1 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r1 == null goto label3;

        $r1 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $i0 != 0 goto label2;

        $z0 = 1;

     label1:
        virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z0, 0);

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return;
    }

    public void setWillNotCacheDrawing(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        int $i0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $i0 = 131072;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($i0, 131072);

        return;

     label2:
        $i0 = 0;

        goto label1;
    }

    public void setWillNotDraw(boolean)
    {
        android.view.View $r0;
        boolean $z0;
        short $s0;

        $r0 := @this: android.view.View;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $s0 = 128;

     label1:
        virtualinvoke $r0.<android.view.View: void setFlags(int,int)>($s0, 128);

        return;

     label2:
        $s0 = 0;

        goto label1;
    }

    public boolean showContextMenu()
    {
        android.view.View $r0;
        android.view.ViewParent $r1;
        boolean $z0;

        $r0 := @this: android.view.View;

        $r1 = virtualinvoke $r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = interfaceinvoke $r1.<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>($r0);

        return $z0;
    }

    public void startAnimation(android.view.animation.Animation)
    {
        android.view.View $r0;
        android.view.animation.Animation $r1;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.view.animation.Animation;

        virtualinvoke $r1.<android.view.animation.Animation: void setStartTime(long)>(-1L);

        virtualinvoke $r0.<android.view.View: void setAnimation(android.view.animation.Animation)>($r1);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;
    }

    void unFocus()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & -3;

        $r0.<android.view.View: int mPrivateFlags> = $i0;

        virtualinvoke $r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>(0, 0, null);

        virtualinvoke $r0.<android.view.View: void refreshDrawableState()>();

        return;

     label1:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1;
        android.view.View$AttachInfo $r2;
        android.os.Handler $r3;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>($r1);

        return;

     label1:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1;
        java.lang.Runnable $r2;
        boolean $z0;
        android.view.View$AttachInfo $r3;
        android.os.Handler $r4;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 := @parameter1: java.lang.Runnable;

        $z0 = virtualinvoke $r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>($r1);

        if $z0 == 0 goto label1;

        if $r2 == null goto label2;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label3;

        $r3 = $r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>($r2, $r1);

        return;

     label1:
        return;

     label2:
        return;

     label3:
        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View $r0;
        android.graphics.drawable.Drawable $r1, $r2;

        $r0 := @this: android.view.View;

        $r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = $r0.<android.view.View: android.graphics.drawable.Drawable mBGDrawable>;

        if $r1 != $r2 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean willNotCacheDrawing()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 131072;

        if $i0 != 131072 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean willNotDraw()
    {
        android.view.View $r0;
        int $i0;

        $r0 := @this: android.view.View;

        $i0 = $r0.<android.view.View: int mViewFlags>;

        $i0 = $i0 & 128;

        if $i0 != 128 goto label1;

        return 1;

     label1:
        return 0;
    }
}
