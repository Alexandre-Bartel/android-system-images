public class org.apache.http.impl.DefaultHttpClientConnection extends org.apache.http.impl.SocketHttpClientConnection
{

    public void <init>()
    {
        org.apache.http.impl.DefaultHttpClientConnection $r0;

        $r0 := @this: org.apache.http.impl.DefaultHttpClientConnection;

        specialinvoke $r0.<org.apache.http.impl.SocketHttpClientConnection: void <init>()>();

        return;
    }

    public void bind(java.net.Socket, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.DefaultHttpClientConnection $r0;
        java.net.Socket $r1;
        org.apache.http.params.HttpParams $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;
        int $i0;

        $r0 := @this: org.apache.http.impl.DefaultHttpClientConnection;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: org.apache.http.params.HttpParams;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r3;

     label2:
        virtualinvoke $r0.<org.apache.http.impl.SocketHttpClientConnection: void assertNotOpen()>();

        $z0 = staticinvoke <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>($r2);

        virtualinvoke $r1.<java.net.Socket: void setTcpNoDelay(boolean)>($z0);

        $i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>($r2);

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i0);

        $i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>($r2);

        if $i0 < 0 goto label4;

        if $i0 <= 0 goto label5;

        $z0 = 1;

     label3:
        virtualinvoke $r1.<java.net.Socket: void setSoLinger(boolean,int)>($z0, $i0);

     label4:
        specialinvoke $r0.<org.apache.http.impl.SocketHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>($r1, $r2);

        return;

     label5:
        $z0 = 0;

        goto label3;
    }

    public java.lang.String toString()
    {
        org.apache.http.impl.DefaultHttpClientConnection $r0;
        java.lang.StringBuffer $r1;
        boolean $z0;
        int $i0;
        java.lang.String $r2;

        $r0 := @this: org.apache.http.impl.DefaultHttpClientConnection;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $z0 = virtualinvoke $r0.<org.apache.http.impl.SocketHttpClientConnection: boolean isOpen()>();

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r0.<org.apache.http.impl.SocketHttpClientConnection: int getRemotePort()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

     label1:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label2:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("closed");

        goto label1;
    }
}
