public final class android.database.BulkCursorToCursorAdaptor extends android.database.AbstractWindowedCursor
{
    private static final java.lang.String TAG;
    private android.database.IBulkCursor mBulkCursor;
    private java.lang.String[] mColumns;
    private int mCount;
    private android.database.AbstractCursor$SelfContentObserver mObserverBridge;
    private boolean mWantsAllOnMoveCalls;

    public void <init>()
    {
        android.database.BulkCursorToCursorAdaptor $r0;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        specialinvoke $r0.<android.database.AbstractWindowedCursor: void <init>()>();

        return;
    }

    public void close()
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        android.database.IBulkCursor $r1;
        android.os.RemoteException $r2;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        specialinvoke $r0.<android.database.AbstractCursor: void close()>();

        $r1 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

     label1:
        interfaceinvoke $r1.<android.database.IBulkCursor: void close()>();

     label2:
        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = null;

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BulkCursor", "Remote process exception when closing");

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean commitUpdates(java.util.Map)
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        java.util.Map $r1;
        boolean $z0;
        java.util.HashMap $r2, $r3;
        int $i0;
        android.database.IBulkCursor $r4;
        android.os.RemoteException $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        $r1 := @parameter0: java.util.Map;

        $z0 = virtualinvoke $r0.<android.database.AbstractCursor: boolean supportsUpdates()>();

        if $z0 != 0 goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BulkCursor", "commitUpdates not supported on this cursor, did you include the _id column?");

        return 0;

     label01:
        $r2 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        entermonitor $r2;

        if $r1 == null goto label03;

     label02:
        $r3 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        virtualinvoke $r3.<java.util.HashMap: void putAll(java.util.Map)>($r1);

     label03:
        $r3 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        $i0 = virtualinvoke $r3.<java.util.HashMap: int size()>();

        if $i0 > 0 goto label05;

        exitmonitor $r2;

     label04:
        return 0;

     label05:
        $r4 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

        $r3 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

     label06:
        $z0 = interfaceinvoke $r4.<android.database.IBulkCursor: boolean updateRows(java.util.Map)>($r3);

     label07:
        if $z0 != 1 goto label09;

     label08:
        $r3 = $r0.<android.database.AbstractCursor: java.util.HashMap mUpdatedRows>;

        virtualinvoke $r3.<java.util.HashMap: void clear()>();

        virtualinvoke $r0.<android.database.AbstractCursor: void onChange(boolean)>(1);

     label09:
        exitmonitor $r2;

     label10:
        return $z0;

     label11:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BulkCursor", "Unable to commit updates because the remote process is dead");

        exitmonitor $r2;

     label12:
        return 0;

     label13:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label14:
        throw $r6;

        catch java.lang.Throwable from label02 to label04 with label13;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch android.os.RemoteException from label08 to label09 with label11;
        catch java.lang.Throwable from label05 to label09 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    public void deactivate()
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        android.database.IBulkCursor $r1;
        android.os.RemoteException $r2;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        specialinvoke $r0.<android.database.AbstractCursor: void deactivate()>();

        $r1 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

     label1:
        interfaceinvoke $r1.<android.database.IBulkCursor: void deactivate()>();

     label2:
        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = null;

        return;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("BulkCursor", "Remote process exception when deactivating");

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean deleteRow()
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        int $i0, $i1;
        android.database.IBulkCursor $r1;
        boolean $z0;
        android.os.RemoteException $r2;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        $r1 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

     label1:
        $z0 = interfaceinvoke $r1.<android.database.IBulkCursor: boolean deleteRow(int)>($i0);

     label2:
        if $z0 == 0 goto label7;

        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = null;

     label3:
        $r1 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

        $i0 = interfaceinvoke $r1.<android.database.IBulkCursor: int count()>();

     label4:
        $r0.<android.database.BulkCursorToCursorAdaptor: int mCount> = $i0;

        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

        $i1 = $r0.<android.database.BulkCursorToCursorAdaptor: int mCount>;

        if $i0 >= $i1 goto label8;

        $i0 = $r0.<android.database.AbstractCursor: int mPos>;

     label5:
        $r0.<android.database.AbstractCursor: int mPos> = -1;

        virtualinvoke $r0.<android.database.AbstractCursor: boolean moveToPosition(int)>($i0);

     label6:
        virtualinvoke $r0.<android.database.AbstractCursor: void onChange(boolean)>(1);

     label7:
        return $z0;

     label8:
        $i0 = $r0.<android.database.BulkCursorToCursorAdaptor: int mCount>;

        $r0.<android.database.AbstractCursor: int mPos> = $i0;

        goto label6;

     label9:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BulkCursor", "Unable to delete row because the remote process is dead");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label9;
        catch android.os.RemoteException from label3 to label4 with label9;
        catch android.os.RemoteException from label5 to label7 with label9;
    }

    public java.lang.String[] getColumnNames()
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        java.lang.String[] r1;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        r1 = $r0.<android.database.BulkCursorToCursorAdaptor: java.lang.String[] mColumns>;

        return r1;
    }

    public int getCount()
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        int i0;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        i0 = $r0.<android.database.BulkCursorToCursorAdaptor: int mCount>;

        return i0;
    }

    public android.os.Bundle getExtras()
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        android.os.Bundle $r1;
        android.database.IBulkCursor $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

     label1:
        $r1 = interfaceinvoke $r2.<android.database.IBulkCursor: android.os.Bundle getExtras()>();

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.database.IContentObserver getObserver()
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        android.database.IContentObserver $r1;
        android.database.AbstractCursor$SelfContentObserver $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        entermonitor $r0;

     label1:
        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.AbstractCursor$SelfContentObserver mObserverBridge>;

        if $r2 != null goto label2;

        $r2 = new android.database.AbstractCursor$SelfContentObserver;

        specialinvoke $r2.<android.database.AbstractCursor$SelfContentObserver: void <init>(android.database.AbstractCursor)>($r0);

        $r0.<android.database.BulkCursorToCursorAdaptor: android.database.AbstractCursor$SelfContentObserver mObserverBridge> = $r2;

     label2:
        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.AbstractCursor$SelfContentObserver mObserverBridge>;

        $r1 = virtualinvoke $r2.<android.database.ContentObserver: android.database.IContentObserver getContentObserver()>();

     label3:
        exitmonitor $r0;

        return $r1;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public boolean onMove(int, int)
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        int $i0, $i1, $i2;
        android.database.CursorWindow $r1;
        android.database.IBulkCursor $r2;
        boolean $z0;
        android.os.RemoteException $r3;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        if $r1 == null goto label12;

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

     label01:
        $i0 = virtualinvoke $r1.<android.database.CursorWindow: int getStartPosition()>();

     label02:
        if $i1 < $i0 goto label05;

     label03:
        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        $i0 = virtualinvoke $r1.<android.database.CursorWindow: int getStartPosition()>();

        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        $i2 = virtualinvoke $r1.<android.database.CursorWindow: int getNumRows()>();

     label04:
        $i0 = $i0 + $i2;

        if $i1 < $i0 goto label08;

     label05:
        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

        $r1 = interfaceinvoke $r2.<android.database.IBulkCursor: android.database.CursorWindow getWindow(int)>($i1);

     label06:
        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = $r1;

     label07:
        $r1 = $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow>;

        if $r1 != null goto label15;

        return 0;

     label08:
        $z0 = $r0.<android.database.BulkCursorToCursorAdaptor: boolean mWantsAllOnMoveCalls>;

        if $z0 == 0 goto label07;

        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

     label09:
        interfaceinvoke $r2.<android.database.IBulkCursor: void onMove(int)>($i1);

     label10:
        goto label07;

     label11:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BulkCursor", "Unable to get window because the remote process is dead");

        return 0;

     label12:
        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

     label13:
        $r1 = interfaceinvoke $r2.<android.database.IBulkCursor: android.database.CursorWindow getWindow(int)>($i1);

     label14:
        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = $r1;

        goto label07;

     label15:
        return 1;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label03 to label04 with label11;
        catch android.os.RemoteException from label05 to label06 with label11;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch android.os.RemoteException from label13 to label14 with label11;
    }

    public boolean requery()
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        android.database.IBulkCursor $r1;
        android.database.IContentObserver $r2;
        android.database.CursorWindow $r3;
        int $i0;
        java.lang.Exception $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

     label1:
        $r1 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

        $r2 = virtualinvoke $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()>();

        $r3 = new android.database.CursorWindow;

        specialinvoke $r3.<android.database.CursorWindow: void <init>(boolean)>(0);

        $i0 = interfaceinvoke $r1.<android.database.IBulkCursor: int requery(android.database.IContentObserver,android.database.CursorWindow)>($r2, $r3);

        $r0.<android.database.BulkCursorToCursorAdaptor: int mCount> = $i0;

        $i0 = $r0.<android.database.BulkCursorToCursorAdaptor: int mCount>;

        if $i0 == -1 goto label3;

        $r0.<android.database.AbstractCursor: int mPos> = -1;

        $r0.<android.database.AbstractWindowedCursor: android.database.CursorWindow mWindow> = null;

        specialinvoke $r0.<android.database.AbstractCursor: boolean requery()>();

     label2:
        return 1;

     label3:
        virtualinvoke $r0.<android.database.BulkCursorToCursorAdaptor: void deactivate()>();

     label4:
        return 0;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to requery because the remote process exception ");

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BulkCursor", $r6);

        virtualinvoke $r0.<android.database.BulkCursorToCursorAdaptor: void deactivate()>();

        return 0;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    public android.os.Bundle respond(android.os.Bundle)
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        android.os.Bundle $r1;
        android.database.IBulkCursor $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

     label1:
        $r1 = interfaceinvoke $r2.<android.database.IBulkCursor: android.os.Bundle respond(android.os.Bundle)>($r1);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void set(android.database.IBulkCursor)
    {
        android.database.BulkCursorToCursorAdaptor $r0;
        android.database.IBulkCursor $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.String[] $r2;
        java.lang.String $r3;
        android.os.RemoteException $r4;

        $r0 := @this: android.database.BulkCursorToCursorAdaptor;

        $r1 := @parameter0: android.database.IBulkCursor;

        $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor> = $r1;

        $r1 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

     label01:
        $i0 = interfaceinvoke $r1.<android.database.IBulkCursor: int count()>();

     label02:
        $r0.<android.database.BulkCursorToCursorAdaptor: int mCount> = $i0;

     label03:
        $r1 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

        $z0 = interfaceinvoke $r1.<android.database.IBulkCursor: boolean getWantsAllOnMoveCalls()>();

     label04:
        $r0.<android.database.BulkCursorToCursorAdaptor: boolean mWantsAllOnMoveCalls> = $z0;

     label05:
        $r1 = $r0.<android.database.BulkCursorToCursorAdaptor: android.database.IBulkCursor mBulkCursor>;

        $r2 = interfaceinvoke $r1.<android.database.IBulkCursor: java.lang.String[] getColumnNames()>();

     label06:
        $r0.<android.database.BulkCursorToCursorAdaptor: java.lang.String[] mColumns> = $r2;

        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: java.lang.String[] mColumns>;

        $i0 = lengthof $r2;

        $i1 = 0;

     label07:
        if $i1 >= $i0 goto label12;

        $r2 = $r0.<android.database.BulkCursorToCursorAdaptor: java.lang.String[] mColumns>;

     label08:
        $r3 = $r2[$i1];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("_id");

     label09:
        if $z0 == 0 goto label10;

        $r0.<android.database.AbstractCursor: int mRowIdColumnIndex> = $i1;

        return;

     label10:
        $i1 = $i1 + 1;

        goto label07;

     label11:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("BulkCursor", "Setup failed because the remote process is dead");

        return;

     label12:
        return;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch android.os.RemoteException from label03 to label04 with label11;
        catch android.os.RemoteException from label05 to label06 with label11;
        catch android.os.RemoteException from label08 to label09 with label11;
    }

    public static void <clinit>()
    {
        <android.database.BulkCursorToCursorAdaptor: java.lang.String TAG> = "BulkCursor";

        return;
    }
}
