public final class android.speech.srec.MicrophoneInputStream extends java.io.InputStream
{
    private static final java.lang.String TAG;
    private int mAudioRecord;
    private byte[] mOneByte;

    static void <clinit>()
    {
        <android.speech.srec.MicrophoneInputStream: java.lang.String TAG> = "MicrophoneInputStream";

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("srec_jni");

        return;
    }

    public void <init>(int, int) throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream $r0;
        int $i0, $i1;
        byte[] $r1;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.speech.srec.MicrophoneInputStream;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<java.io.InputStream: void <init>()>();

        $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord> = 0;

        $r1 = newarray (byte)[1];

        $r0.<android.speech.srec.MicrophoneInputStream: byte[] mOneByte> = $r1;

        $i0 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordNew(int,int)>($i0, $i1);

        $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord> = $i0;

        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        if $i0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("AudioRecord constructor failed - busy?");

        throw $r2;

     label1:
        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        $i0 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordStart(int)>($i0);

        if $i0 == 0 goto label2;

        virtualinvoke $r0.<android.speech.srec.MicrophoneInputStream: void close()>();

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AudioRecord start failed: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        return;
    }

    private static native void AudioRecordDelete(int) throws java.io.IOException;

    private static native int AudioRecordNew(int, int);

    private static native int AudioRecordRead(int, byte[], int, int) throws java.io.IOException;

    private static native int AudioRecordStart(int);

    private static native void AudioRecordStop(int) throws java.io.IOException;

    public void close() throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream $r0;
        int $i0;
        java.lang.Throwable $r1, $r2, $r3;

        $r0 := @this: android.speech.srec.MicrophoneInputStream;

        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        if $i0 == 0 goto label9;

     label1:
        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        staticinvoke <android.speech.srec.MicrophoneInputStream: void AudioRecordStop(int)>($i0);

     label2:
        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        staticinvoke <android.speech.srec.MicrophoneInputStream: void AudioRecordDelete(int)>($i0);

     label3:
        $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord> = 0;

        return;

     label4:
        $r1 := @caughtexception;

        $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord> = 0;

        throw $r1;

     label5:
        $r2 := @caughtexception;

     label6:
        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        staticinvoke <android.speech.srec.MicrophoneInputStream: void AudioRecordDelete(int)>($i0);

     label7:
        $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord> = 0;

        throw $r2;

     label8:
        $r3 := @caughtexception;

        $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord> = 0;

        throw $r3;

     label9:
        return;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.speech.srec.MicrophoneInputStream $r0;
        int $i0;
        java.io.IOException $r1;

        $r0 := @this: android.speech.srec.MicrophoneInputStream;

        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        if $i0 == 0 goto label1;

        virtualinvoke $r0.<android.speech.srec.MicrophoneInputStream: void close()>();

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("someone forgot to close MicrophoneInputStream");

        throw $r1;

     label1:
        return;
    }

    public int read() throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        byte[] $r2;
        byte $b1;
        short $s2;

        $r0 := @this: android.speech.srec.MicrophoneInputStream;

        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        if $i0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not open");

        throw $r1;

     label1:
        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        $r2 = $r0.<android.speech.srec.MicrophoneInputStream: byte[] mOneByte>;

        $i0 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordRead(int,byte[],int,int)>($i0, $r2, 0, 1);

        if $i0 != 1 goto label2;

        $r2 = $r0.<android.speech.srec.MicrophoneInputStream: byte[] mOneByte>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

        return $s2;

     label2:
        return -1;
    }

    public int read(byte[]) throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream $r0;
        byte[] $r1;
        int $i0, $i1;
        java.lang.IllegalStateException $r2;

        $r0 := @this: android.speech.srec.MicrophoneInputStream;

        $r1 := @parameter0: byte[];

        $i0 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not open");

        throw $r2;

     label1:
        $i1 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        $i0 = lengthof $r1;

        $i0 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordRead(int,byte[],int,int)>($i1, $r1, 0, $i0);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        android.speech.srec.MicrophoneInputStream $r0;
        byte[] $r1;
        int $i0, $i1, $i2;
        java.lang.IllegalStateException $r2;

        $r0 := @this: android.speech.srec.MicrophoneInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        if $i2 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not open");

        throw $r2;

     label1:
        $i2 = $r0.<android.speech.srec.MicrophoneInputStream: int mAudioRecord>;

        $i0 = staticinvoke <android.speech.srec.MicrophoneInputStream: int AudioRecordRead(int,byte[],int,int)>($i2, $r1, $i0, $i1);

        return $i0;
    }
}
