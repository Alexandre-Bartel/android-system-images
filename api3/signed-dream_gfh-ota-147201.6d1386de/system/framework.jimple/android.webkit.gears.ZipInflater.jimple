public final class android.webkit.gears.ZipInflater extends java.lang.Object
{
    private static final int BUFFER_SIZE_BYTES;
    private static final java.lang.String DATA_PARTITION_ROOT;
    private static final java.lang.String PATH_NAVIGATION_COMPONENT;
    private static final long SIZE_MULTIPLIER;
    private static final java.lang.String TAG;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        <android.webkit.gears.ZipInflater: java.lang.String TAG> = "Gears-J-ZipInflater";

        <android.webkit.gears.ZipInflater: long SIZE_MULTIPLIER> = 4L;

        <android.webkit.gears.ZipInflater: java.lang.String DATA_PARTITION_ROOT> = "/data";

        <android.webkit.gears.ZipInflater: int BUFFER_SIZE_BYTES> = 32768;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("..");

        $r1 = <java.io.File: java.lang.String separator>;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <android.webkit.gears.ZipInflater: java.lang.String PATH_NAVIGATION_COMPONENT> = $r1;

        return;
    }

    public void <init>()
    {
        android.webkit.gears.ZipInflater $r0;

        $r0 := @this: android.webkit.gears.ZipInflater;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static final long freeSpace()
    {
        android.os.StatFs $r0;
        long $l0;
        int $i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 = new android.os.StatFs;

        specialinvoke $r0.<android.os.StatFs: void <init>(java.lang.String)>("/data");

        $i1 = virtualinvoke $r0.<android.os.StatFs: int getAvailableBlocks()>();

        $i2 = virtualinvoke $r0.<android.os.StatFs: int getBlockSize()>();

        $i1 = $i1 * $i2;

        $l0 = (long) $i1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Free space on the data partition: ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Gears-J-ZipInflater", $r2);

        return $l0;
    }

    public static boolean inflate(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r3, $r8;
        java.lang.StringBuilder $r2;
        boolean $z0;
        java.util.zip.ZipFile $r4;
        java.util.Enumeration $r5;
        long $l0, $l1;
        java.lang.Object $r6;
        java.util.zip.ZipEntry $r7;
        int $i2;
        java.io.IOException $r9, $r23, $r25, $r27, $r28, $r29, $r30, $r36;
        java.lang.Throwable $r10, $r22, $r26, $r31, $r32, $r33, $r34, $r37;
        java.io.FileNotFoundException $r11, $r12;
        java.util.zip.ZipInputStream $r13, $r15;
        java.io.File $r14;
        byte $b3;
        java.io.BufferedInputStream $r16;
        java.io.FileInputStream $r17;
        byte[] $r18;
        java.util.zip.CRC32 $r19;
        java.io.BufferedOutputStream $r20;
        java.io.FileOutputStream $r21;
        java.lang.IllegalArgumentException $r24, $r35;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extracting ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Gears-J-ZipInflater", $r3);

        $r3 = <java.io.File: java.lang.String separator>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>($r3);

        if $z0 != 0 goto label01;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Path missing trailing separator: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Gears-J-ZipInflater", $r0);

        return 0;

     label01:
        $r4 = new java.util.zip.ZipFile;

     label02:
        specialinvoke $r4.<java.util.zip.ZipFile: void <init>(java.lang.String)>($r0);

     label03:
        $r5 = virtualinvoke $r4.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label04:
        $l0 = 0L;

     label05:
        $z0 = interfaceinvoke $r5.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label14;

        $r6 = interfaceinvoke $r5.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r7 = (java.util.zip.ZipEntry) $r6;

        $l1 = virtualinvoke $r7.<java.util.zip.ZipEntry: long getSize()>();

        $l0 = $l0 + $l1;

        $r3 = virtualinvoke $r7.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r8 = <android.webkit.gears.ZipInflater: java.lang.String PATH_NAVIGATION_COMPONENT>;

        $i2 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>($r8);

        if $i2 < 0 goto label13;

        $r9 = new java.io.IOException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal entry name: ");

        $r0 = virtualinvoke $r7.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r0);

        throw $r9;

     label06:
        $r10 := @caughtexception;

     label07:
        virtualinvoke $r4.<java.util.zip.ZipFile: void close()>();

        throw $r10;

     label08:
        $r11 := @caughtexception;

        $r12 = $r11;

        $r13 = null;

     label09:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The zip file could not be found. ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Gears-J-ZipInflater", $r0);

     label10:
        if $r13 == null goto label12;

     label11:
        virtualinvoke $r13.<java.util.zip.ZipInputStream: void close()>();

     label12:
        return 0;

     label13:
        $r14 = new java.io.File;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r7.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r3);

        $z0 = virtualinvoke $r14.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label05;

        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("A file or directory with the same name already exists.");

        throw $r9;

     label14:
        virtualinvoke $r4.<java.util.zip.ZipFile: void close()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Determined uncompressed size: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Gears-J-ZipInflater", $r3);

        $l1 = staticinvoke <android.webkit.gears.ZipInflater: long freeSpace()>();

     label15:
        $l0 = 4L * $l0;

        $b3 = $l1 cmp $l0;

     label16:
        if $b3 > 0 goto label20;

     label17:
        $r9 = new java.io.IOException;

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>("Not enough space to unpack this archive.");

     label18:
        throw $r9;

     label19:
        $r12 := @caughtexception;

        $r13 = null;

        goto label09;

     label20:
        $r15 = new java.util.zip.ZipInputStream;

        $r16 = new java.io.BufferedInputStream;

     label21:
        $r17 = new java.io.FileInputStream;

        specialinvoke $r17.<java.io.FileInputStream: void <init>(java.lang.String)>($r0);

        specialinvoke $r16.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r17);

        specialinvoke $r15.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r16);

     label22:
        $r18 = newarray (byte)[32768];

     label23:
        $r7 = virtualinvoke $r15.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

     label24:
        if $r7 == null goto label52;

        $r14 = new java.io.File;

     label25:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r7.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r0);

        $z0 = virtualinvoke $r7.<java.util.zip.ZipEntry: boolean isDirectory()>();

        if $z0 == 0 goto label28;

        virtualinvoke $r14.<java.io.File: boolean mkdirs()>();

     label26:
        virtualinvoke $r15.<java.util.zip.ZipInputStream: void closeEntry()>();

        goto label23;

     label27:
        $r12 := @caughtexception;

        $r13 = $r15;

        goto label09;

     label28:
        $r19 = new java.util.zip.CRC32;

        specialinvoke $r19.<java.util.zip.CRC32: void <init>()>();

     label29:
        $r20 = new java.io.BufferedOutputStream;

     label30:
        $r21 = new java.io.FileOutputStream;

        specialinvoke $r21.<java.io.FileOutputStream: void <init>(java.io.File)>($r14);

        specialinvoke $r20.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r21, 32768);

     label31:
        $i2 = virtualinvoke $r15.<java.util.zip.ZipInputStream: int read(byte[],int,int)>($r18, 0, 32768);

        if $i2 == -1 goto label40;

        virtualinvoke $r20.<java.io.BufferedOutputStream: void write(byte[],int,int)>($r18, 0, $i2);

        virtualinvoke $r19.<java.util.zip.CRC32: void update(byte[],int,int)>($r18, 0, $i2);

     label32:
        goto label31;

     label33:
        $r22 := @caughtexception;

     label34:
        virtualinvoke $r20.<java.io.FilterOutputStream: void close()>();

        throw $r22;

     label35:
        $r23 := @caughtexception;

        $r13 = $r15;

     label36:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read or write an entry. ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Gears-J-ZipInflater", $r0);

     label37:
        if $r13 == null goto label39;

     label38:
        virtualinvoke $r13.<java.util.zip.ZipInputStream: void close()>();

     label39:
        return 0;

     label40:
        virtualinvoke $r20.<java.io.BufferedOutputStream: void flush()>();

     label41:
        virtualinvoke $r20.<java.io.FilterOutputStream: void close()>();

        $l0 = virtualinvoke $r19.<java.util.zip.CRC32: long getValue()>();

        $l1 = virtualinvoke $r7.<java.util.zip.ZipEntry: long getCrc()>();

     label42:
        $b3 = $l0 cmp $l1;

     label43:
        if $b3 == 0 goto label26;

     label44:
        $r9 = new java.io.IOException;

     label45:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Integrity check failed for: ");

        $r0 = virtualinvoke $r7.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r0);

     label46:
        throw $r9;

     label47:
        $r24 := @caughtexception;

        $r13 = $r15;

     label48:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create the BufferedOutputStream. ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Gears-J-ZipInflater", $r0);

     label49:
        if $r13 == null goto label51;

     label50:
        virtualinvoke $r13.<java.util.zip.ZipInputStream: void close()>();

     label51:
        return 0;

     label52:
        if $r15 == null goto label76;

     label53:
        virtualinvoke $r15.<java.util.zip.ZipInputStream: void close()>();

     label54:
        return 1;

     label55:
        $r25 := @caughtexception;

        return 1;

     label56:
        $r26 := @caughtexception;

        $r13 = null;

     label57:
        if $r13 == null goto label59;

     label58:
        virtualinvoke $r13.<java.util.zip.ZipInputStream: void close()>();

     label59:
        return 0;

     label60:
        $r27 := @caughtexception;

        goto label12;

     label61:
        $r28 := @caughtexception;

        goto label39;

     label62:
        $r29 := @caughtexception;

        goto label51;

     label63:
        $r30 := @caughtexception;

        goto label59;

     label64:
        $r31 := @caughtexception;

        $r13 = null;

        goto label57;

     label65:
        $r32 := @caughtexception;

        $r13 = null;

        goto label57;

     label66:
        $r33 := @caughtexception;

        $r13 = $r15;

        goto label57;

     label67:
        $r34 := @caughtexception;

        goto label57;

     label68:
        $r24 := @caughtexception;

        $r13 = null;

        goto label48;

     label69:
        $r24 := @caughtexception;

        $r13 = null;

        goto label48;

     label70:
        $r35 := @caughtexception;

        $r24 = $r35;

        $r13 = null;

        goto label48;

     label71:
        $r23 := @caughtexception;

        $r13 = null;

        goto label36;

     label72:
        $r23 := @caughtexception;

        $r13 = null;

        goto label36;

     label73:
        $r36 := @caughtexception;

        $r23 = $r36;

        $r13 = null;

        goto label36;

     label74:
        $r12 := @caughtexception;

        $r13 = null;

        goto label09;

     label75:
        $r37 := @caughtexception;

        $r10 = $r37;

        goto label07;

     label76:
        return 1;

        catch java.io.FileNotFoundException from label02 to label03 with label74;
        catch java.io.IOException from label02 to label03 with label71;
        catch java.lang.IllegalArgumentException from label02 to label03 with label68;
        catch java.lang.Throwable from label01 to label03 with label56;
        catch java.lang.Throwable from label03 to label04 with label75;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.io.FileNotFoundException from label07 to label08 with label08;
        catch java.io.IOException from label07 to label08 with label73;
        catch java.lang.IllegalArgumentException from label07 to label08 with label70;
        catch java.lang.Throwable from label07 to label08 with label65;
        catch java.lang.Throwable from label09 to label10 with label67;
        catch java.io.IOException from label11 to label12 with label60;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.io.FileNotFoundException from label14 to label15 with label19;
        catch java.io.FileNotFoundException from label17 to label19 with label19;
        catch java.io.FileNotFoundException from label21 to label22 with label19;
        catch java.io.IOException from label14 to label15 with label72;
        catch java.io.IOException from label17 to label19 with label72;
        catch java.io.IOException from label21 to label22 with label72;
        catch java.lang.IllegalArgumentException from label14 to label15 with label69;
        catch java.lang.IllegalArgumentException from label17 to label18 with label69;
        catch java.lang.IllegalArgumentException from label21 to label22 with label69;
        catch java.lang.Throwable from label14 to label15 with label64;
        catch java.lang.Throwable from label16 to label19 with label64;
        catch java.lang.Throwable from label20 to label22 with label64;
        catch java.io.FileNotFoundException from label23 to label24 with label27;
        catch java.io.FileNotFoundException from label25 to label27 with label27;
        catch java.io.FileNotFoundException from label28 to label29 with label27;
        catch java.io.FileNotFoundException from label30 to label31 with label27;
        catch java.io.IOException from label23 to label24 with label35;
        catch java.io.IOException from label25 to label27 with label35;
        catch java.io.IOException from label28 to label29 with label35;
        catch java.io.IOException from label30 to label31 with label35;
        catch java.lang.IllegalArgumentException from label23 to label24 with label47;
        catch java.lang.IllegalArgumentException from label25 to label27 with label47;
        catch java.lang.IllegalArgumentException from label28 to label29 with label47;
        catch java.lang.IllegalArgumentException from label30 to label31 with label47;
        catch java.lang.Throwable from label22 to label27 with label66;
        catch java.lang.Throwable from label28 to label31 with label66;
        catch java.lang.Throwable from label31 to label32 with label33;
        catch java.io.FileNotFoundException from label34 to label35 with label27;
        catch java.io.IOException from label34 to label35 with label35;
        catch java.lang.IllegalArgumentException from label34 to label35 with label47;
        catch java.lang.Throwable from label34 to label35 with label66;
        catch java.lang.Throwable from label36 to label37 with label67;
        catch java.io.IOException from label38 to label39 with label61;
        catch java.lang.Throwable from label40 to label41 with label33;
        catch java.io.FileNotFoundException from label41 to label42 with label27;
        catch java.io.FileNotFoundException from label43 to label44 with label27;
        catch java.io.FileNotFoundException from label45 to label47 with label27;
        catch java.io.IOException from label41 to label42 with label35;
        catch java.io.IOException from label43 to label44 with label35;
        catch java.io.IOException from label45 to label47 with label35;
        catch java.lang.IllegalArgumentException from label41 to label42 with label47;
        catch java.lang.IllegalArgumentException from label43 to label44 with label47;
        catch java.lang.IllegalArgumentException from label45 to label46 with label47;
        catch java.lang.Throwable from label41 to label42 with label66;
        catch java.lang.Throwable from label43 to label47 with label66;
        catch java.lang.Throwable from label48 to label49 with label67;
        catch java.io.IOException from label50 to label51 with label62;
        catch java.io.IOException from label53 to label54 with label55;
        catch java.io.IOException from label58 to label59 with label63;
    }
}
