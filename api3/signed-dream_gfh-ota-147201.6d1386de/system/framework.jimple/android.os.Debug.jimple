public final class android.os.Debug extends java.lang.Object
{
    private static final java.lang.String DEFAULT_TRACE_BODY;
    private static final java.lang.String DEFAULT_TRACE_EXTENSION;
    private static final java.lang.String DEFAULT_TRACE_FILE_PATH;
    private static final java.lang.String DEFAULT_TRACE_PATH_PREFIX;
    private static final int MIN_DEBUGGER_IDLE;
    public static final int SHOW_CLASSLOADER;
    public static final int SHOW_FULL_DETAIL;
    public static final int SHOW_INITIALIZED;
    private static final int SPIN_DELAY;
    private static final java.lang.String SYSFS_QEMU_TRACE_STATE;
    public static final int TRACE_COUNT_ALLOCS;
    private static volatile boolean mWaiting;

    static void <clinit>()
    {
        <android.os.Debug: int TRACE_COUNT_ALLOCS> = 1;

        <android.os.Debug: java.lang.String SYSFS_QEMU_TRACE_STATE> = "/sys/qemu_trace/state";

        <android.os.Debug: int SPIN_DELAY> = 200;

        <android.os.Debug: int SHOW_INITIALIZED> = 4;

        <android.os.Debug: int SHOW_FULL_DETAIL> = 1;

        <android.os.Debug: int SHOW_CLASSLOADER> = 2;

        <android.os.Debug: int MIN_DEBUGGER_IDLE> = 1300;

        <android.os.Debug: java.lang.String DEFAULT_TRACE_PATH_PREFIX> = "/sdcard/";

        <android.os.Debug: java.lang.String DEFAULT_TRACE_FILE_PATH> = "/sdcard/dmtrace.trace";

        <android.os.Debug: java.lang.String DEFAULT_TRACE_EXTENSION> = ".trace";

        <android.os.Debug: java.lang.String DEFAULT_TRACE_BODY> = "dmtrace";

        <android.os.Debug: boolean mWaiting> = 0;

        return;
    }

    private void <init>()
    {
        android.os.Debug $r0;

        $r0 := @this: android.os.Debug;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void changeDebugPort(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return;
    }

    public static void dumpHprofData(java.lang.String) throws java.io.IOException
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <dalvik.system.VMDebug: void dumpHprofData(java.lang.String)>($r0);

        return;
    }

    public static void enableEmulatorTraceOutput()
    {
        staticinvoke <dalvik.system.VMDebug: void startEmulatorTracing()>();

        return;
    }

    public static final native int getBinderDeathObjectCount();

    public static final native int getBinderLocalObjectCount();

    public static final native int getBinderProxyObjectCount();

    public static native int getBinderReceivedTransactions();

    public static native int getBinderSentTransactions();

    public static int getGlobalAllocCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(1);

        return $i0;
    }

    public static int getGlobalAllocSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(2);

        return $i0;
    }

    public static int getGlobalExternalAllocCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(4096);

        return $i0;
    }

    public static int getGlobalExternalAllocSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(8192);

        return $i0;
    }

    public static int getGlobalExternalFreedCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(16384);

        return $i0;
    }

    public static int getGlobalExternalFreedSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(32768);

        return $i0;
    }

    public static int getGlobalFreedCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(4);

        return $i0;
    }

    public static int getGlobalFreedSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(8);

        return $i0;
    }

    public static int getGlobalGcInvocationCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(16);

        return $i0;
    }

    public static int getLoadedClassCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getLoadedClassCount()>();

        return $i0;
    }

    public static native void getMemoryInfo(android.os.Debug$MemoryInfo);

    public static native long getNativeHeapAllocatedSize();

    public static native long getNativeHeapFreeSize();

    public static native long getNativeHeapSize();

    public static int getThreadAllocCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(65536);

        return $i0;
    }

    public static int getThreadAllocSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(131072);

        return $i0;
    }

    public static int getThreadExternalAllocCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(268435456);

        return $i0;
    }

    public static int getThreadExternalAllocSize()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(536870912);

        return $i0;
    }

    public static int getThreadGcInvocationCount()
    {
        int $i0;

        $i0 = staticinvoke <dalvik.system.VMDebug: int getAllocCount(int)>(1048576);

        return $i0;
    }

    public static boolean isDebuggerConnected()
    {
        boolean $z0;

        $z0 = staticinvoke <dalvik.system.VMDebug: boolean isDebuggerConnected()>();

        return $z0;
    }

    public static void printLoadedClasses(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        staticinvoke <dalvik.system.VMDebug: void printLoadedClasses(int)>($i0);

        return;
    }

    public static void resetAllCounts()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(-1);

        return;
    }

    public static void resetGlobalAllocCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(1);

        return;
    }

    public static void resetGlobalAllocSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(2);

        return;
    }

    public static void resetGlobalExternalAllocCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(4096);

        return;
    }

    public static void resetGlobalExternalAllocSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(8192);

        return;
    }

    public static void resetGlobalExternalFreedCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(16384);

        return;
    }

    public static void resetGlobalExternalFreedSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(32768);

        return;
    }

    public static void resetGlobalFreedCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(4);

        return;
    }

    public static void resetGlobalFreedSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(8);

        return;
    }

    public static void resetGlobalGcInvocationCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(16);

        return;
    }

    public static void resetThreadAllocCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(65536);

        return;
    }

    public static void resetThreadAllocSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(131072);

        return;
    }

    public static void resetThreadExternalAllocCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(268435456);

        return;
    }

    public static void resetThreadExternalAllocSize()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(536870912);

        return;
    }

    public static void resetThreadGcInvocationCount()
    {
        staticinvoke <dalvik.system.VMDebug: void resetAllocCount(int)>(1048576);

        return;
    }

    public static int setAllocationLimit(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <dalvik.system.VMDebug: int setAllocationLimit(int)>($i0);

        return $i0;
    }

    public static int setGlobalAllocationLimit(int)
    {
        int $i0;
        java.lang.IllegalArgumentException $r0;

        $i0 := @parameter0: int;

        if $i0 == 0 goto label1;

        if $i0 == -1 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("limit must be 0 or -1");

        throw $r0;

     label1:
        $i0 = staticinvoke <dalvik.system.VMDebug: int setGlobalAllocationLimit(int)>($i0);

        return $i0;
    }

    public static void startAllocCounting()
    {
        staticinvoke <dalvik.system.VMDebug: void startAllocCounting()>();

        return;
    }

    public static void startMethodTracing()
    {
        staticinvoke <dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>("/sdcard/dmtrace.trace", 0, 0);

        return;
    }

    public static void startMethodTracing(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String,int,int)>($r0, 0, 0);

        return;
    }

    public static void startMethodTracing(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String,int,int)>($r0, $i0, 0);

        return;
    }

    public static void startMethodTracing(java.lang.String, int, int)
    {
        java.lang.String $r0, $r1;
        int $i0, $i1;
        char $c2;
        java.lang.StringBuilder $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = $r0;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c2 == 47 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/sdcard/");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".trace");

        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".trace");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        staticinvoke <dalvik.system.VMDebug: void startMethodTracing(java.lang.String,int,int)>($r1, $i0, $i1);

        return;
    }

    public static void startNativeTracing()
    {
        java.io.FileOutputStream $r0;
        java.io.PrintWriter $r1, $r2;
        java.io.OutputStreamWriter $r3;
        java.lang.Exception $r4, $r6;
        java.lang.Throwable $r5;

        $r2 = null;

     label01:
        $r0 = new java.io.FileOutputStream;

     label02:
        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>("/sys/qemu_trace/state");

     label03:
        $r1 = new java.io.PrintWriter;

     label04:
        $r3 = new java.io.OutputStreamWriter;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r0);

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r3);

     label05:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("1");

     label06:
        if $r1 == null goto label15;

        virtualinvoke $r1.<java.io.PrintWriter: void close()>();

     label07:
        staticinvoke <dalvik.system.VMDebug: void startEmulatorTracing()>();

        return;

     label08:
        $r4 := @caughtexception;

     label09:
        if $r2 == null goto label07;

        virtualinvoke $r2.<java.io.PrintWriter: void close()>();

        goto label07;

     label10:
        $r5 := @caughtexception;

     label11:
        if $r2 == null goto label12;

        virtualinvoke $r2.<java.io.PrintWriter: void close()>();

     label12:
        throw $r5;

     label13:
        $r5 := @caughtexception;

        $r2 = $r1;

        goto label11;

     label14:
        $r6 := @caughtexception;

        $r2 = $r1;

        goto label09;

     label15:
        goto label07;

        catch java.lang.Exception from label02 to label03 with label08;
        catch java.lang.Exception from label04 to label05 with label08;
        catch java.lang.Throwable from label01 to label05 with label10;
        catch java.lang.Exception from label05 to label06 with label14;
        catch java.lang.Throwable from label05 to label06 with label13;
    }

    public static void stopAllocCounting()
    {
        staticinvoke <dalvik.system.VMDebug: void stopAllocCounting()>();

        return;
    }

    public static void stopMethodTracing()
    {
        staticinvoke <dalvik.system.VMDebug: void stopMethodTracing()>();

        return;
    }

    public static void stopNativeTracing()
    {
        java.io.FileOutputStream $r0;
        java.io.PrintWriter $r1, $r2;
        java.io.OutputStreamWriter $r3;
        java.lang.Exception $r4, $r6;
        java.lang.Throwable $r5;

        staticinvoke <dalvik.system.VMDebug: void stopEmulatorTracing()>();

        $r2 = null;

     label01:
        $r0 = new java.io.FileOutputStream;

     label02:
        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.lang.String)>("/sys/qemu_trace/state");

     label03:
        $r1 = new java.io.PrintWriter;

     label04:
        $r3 = new java.io.OutputStreamWriter;

        specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r0);

        specialinvoke $r1.<java.io.PrintWriter: void <init>(java.io.Writer)>($r3);

     label05:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("0");

     label06:
        if $r1 == null goto label14;

        virtualinvoke $r1.<java.io.PrintWriter: void close()>();

        return;

     label07:
        $r4 := @caughtexception;

     label08:
        if $r2 == null goto label15;

        virtualinvoke $r2.<java.io.PrintWriter: void close()>();

        return;

     label09:
        $r5 := @caughtexception;

     label10:
        if $r2 == null goto label11;

        virtualinvoke $r2.<java.io.PrintWriter: void close()>();

     label11:
        throw $r5;

     label12:
        $r5 := @caughtexception;

        $r2 = $r1;

        goto label10;

     label13:
        $r6 := @caughtexception;

        $r2 = $r1;

        goto label08;

     label14:
        return;

     label15:
        return;

        catch java.lang.Exception from label02 to label03 with label07;
        catch java.lang.Exception from label04 to label05 with label07;
        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Exception from label05 to label06 with label13;
        catch java.lang.Throwable from label05 to label06 with label12;
    }

    public static long threadCpuTimeNanos()
    {
        long $l0;

        $l0 = staticinvoke <dalvik.system.VMDebug: long threadCpuTimeNanos()>();

        return $l0;
    }

    public static void waitForDebugger()
    {
        byte[] $r0;
        org.apache.harmony.dalvik.ddmc.Chunk $r1;
        boolean $z0;
        java.io.PrintStream $r2;
        int $i0;
        java.lang.InterruptedException $r3, $r4;
        long $l1;
        byte $b2;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $z0 = staticinvoke <dalvik.system.VMDebug: boolean isDebuggingEnabled()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        $z0 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

        if $z0 != 0 goto label13;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Sending WAIT chunk");

        $r0 = newarray (byte)[1];

        $r0[0] = 0;

        $r1 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i0 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: int type(java.lang.String)>("WAIT");

        specialinvoke $r1.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i0, $r0, 0, 1);

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        <android.os.Debug: boolean mWaiting> = 1;

     label02:
        $z0 = staticinvoke <android.os.Debug: boolean isDebuggerConnected()>();

        if $z0 != 0 goto label06;

     label03:
        staticinvoke <java.lang.Thread: void sleep(long)>(200L);

     label04:
        goto label02;

     label05:
        $r3 := @caughtexception;

        goto label02;

     label06:
        <android.os.Debug: boolean mWaiting> = 0;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Debugger has connected");

     label07:
        $l1 = staticinvoke <dalvik.system.VMDebug: long lastDebuggerActivity()>();

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label08;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("debugger detached?");

        return;

     label08:
        $b2 = $l1 cmp 1300L;

        if $b2 >= 0 goto label12;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("waiting for debugger to settle...");

     label09:
        staticinvoke <java.lang.Thread: void sleep(long)>(200L);

     label10:
        goto label07;

     label11:
        $r4 := @caughtexception;

        goto label07;

     label12:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("debugger has settled (");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;

     label13:
        return;

        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.InterruptedException from label09 to label10 with label11;
    }

    public static boolean waitingForDebugger()
    {
        boolean z0;

        z0 = <android.os.Debug: boolean mWaiting>;

        return z0;
    }
}
