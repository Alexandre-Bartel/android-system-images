public class android.database.sqlite.SQLiteQueryBuilder extends java.lang.Object
{
    private static final java.lang.String TAG;
    private boolean mDistinct;
    private android.database.sqlite.SQLiteDatabase$CursorFactory mFactory;
    private java.util.Map mProjectionMap;
    private java.lang.String mTables;
    private java.lang.StringBuilder mWhereClause;

    public void <init>()
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.lang.StringBuilder $r1;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap> = null;

        $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables> = "";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(64);

        $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause> = $r1;

        $r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct> = 0;

        $r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = null;

        return;
    }

    private static void appendClause(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        return;

     label1:
        return;
    }

    private static void appendClauseEscapeClause(java.lang.StringBuilder, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        staticinvoke <android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>($r0, $r2);

        return;

     label1:
        return;
    }

    public static void appendColumns(java.lang.StringBuilder, java.lang.String[])
    {
        java.lang.StringBuilder $r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.String[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r2 = $r1[$i1];

        if $r2 == null goto label3;

        if $i1 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        return;
    }

    public static java.lang.String buildQueryString(boolean, java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        boolean $z0, $z1;
        java.lang.String $r0, $r2, $r3, $r4, $r5, $r6;
        java.lang.String[] $r1;
        java.lang.StringBuilder $r7;
        java.lang.IllegalArgumentException $r8;
        int $i0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String[];

        $r2 := @parameter3: java.lang.String;

        $r3 := @parameter4: java.lang.String;

        $r4 := @parameter5: java.lang.String;

        $r5 := @parameter6: java.lang.String;

        $r6 := @parameter7: java.lang.String;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z1 == 0 goto label1;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z1 != 0 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HAVING clauses are only permitted when using a groupBy clause");

        throw $r8;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(120);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ");

        if $z0 == 0 goto label2;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTINCT ");

     label2:
        if $r1 == null goto label4;

        $i0 = lengthof $r1;

        if $i0 == 0 goto label4;

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>($r7, $r1);

     label3:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FROM ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r7, " WHERE ", $r2);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r7, " GROUP BY ", $r3);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r7, " HAVING ", $r4);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r7, " ORDER BY ", $r5);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClauseEscapeClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r7, " LIMIT ", $r6);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label4:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("* ");

        goto label3;
    }

    private java.lang.String[] computeProjection(java.lang.String[])
    {
        java.lang.String[] $r0, $r4;
        int $i0, $i1;
        java.lang.String $r1;
        android.database.sqlite.SQLiteQueryBuilder $r2;
        java.util.Map $r3;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.util.Set $r8;
        java.util.Iterator $r9;
        boolean $z0;
        java.util.Map$Entry $r10;

        $r2 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r0 := @parameter0: java.lang.String[];

        if $r0 == null goto label5;

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label5;

        $r3 = $r2.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        if $r3 == null goto label4;

        $i0 = lengthof $r0;

        $r4 = newarray (java.lang.String)[$i0];

        $i0 = lengthof $r0;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r1 = $r0[$i1];

        $r3 = $r2.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r1 = (java.lang.String) $r5;

        if $r1 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid column ");

        $r1 = $r0[$i1];

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label2:
        $r4[$i1] = $r1;

        $i1 = $i1 + 1;

        goto label1;

     label3:
        return $r4;

     label4:
        return $r0;

     label5:
        $r3 = $r2.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        if $r3 == null goto label8;

        $r3 = $r2.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap>;

        $r8 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $i0 = interfaceinvoke $r8.<java.util.Set: int size()>();

        $r0 = newarray (java.lang.String)[$i0];

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        $i1 = 0;

     label6:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r1 = (java.lang.String) $r5;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("_count");

        if $z0 != 0 goto label6;

        $r5 = interfaceinvoke $r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r1 = (java.lang.String) $r5;

        $r0[$i1] = $r1;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        return $r0;

     label8:
        return null;
    }

    public void appendWhere(java.lang.CharSequence)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.lang.CharSequence $r1;
        int $i0;
        java.lang.StringBuilder $r2;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $i0 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label1;

        $r2 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label1:
        $r2 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r1);

        return;
    }

    public void appendWhereEscapeString(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.StringBuilder $r2;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $i0 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label1;

        $r2 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

     label1:
        $r2 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        staticinvoke <android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>($r2, $r1);

        return;
    }

    public java.lang.String buildQuery(java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.lang.String[] $r1, $r3;
        java.lang.String $r2, $r4, $r5, $r6, $r7, $r9;
        java.lang.StringBuilder $r8;
        int $i0;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String[];

        $r4 := @parameter3: java.lang.String;

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.lang.String;

        $r1 = specialinvoke $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String[] computeProjection(java.lang.String[])>($r1);

        $r8 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $i0 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label1;

        $r8 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label1:
        if $r2 == null goto label3;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r8 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $i0 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label2;

        $r8 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ");

     label2:
        $r8 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r8 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

     label3:
        $z0 = $r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct>;

        $r2 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r8 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.StringBuilder mWhereClause>;

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2 = staticinvoke <android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($z0, $r2, $r1, $r9, $r4, $r5, $r6, $r7);

        return $r2;
    }

    public java.lang.String buildUnionQuery(java.lang.String[], java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.lang.String[] $r1;
        java.lang.String $r2, $r3, $r5, $r6;
        java.lang.StringBuilder $r4;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(128);

        $i0 = lengthof $r1;

        $z0 = $r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct>;

        if $z0 == 0 goto label4;

        $r5 = " UNION ";

     label1:
        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        if $i1 <= 0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label3:
        $r6 = $r1[$i1];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r5 = " UNION ALL ";

        goto label1;

     label5:
        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r4, " ORDER BY ", $r2);

        staticinvoke <android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r4, " LIMIT ", $r3);

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String buildUnionSubQuery(java.lang.String, java.lang.String[], java.util.Set, int, java.lang.String, java.lang.String, java.lang.String[], java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.lang.String $r1, $r4, $r5, $r7, $r8, $r10;
        java.lang.String[] $r2, $r6, $r9;
        java.util.Set $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.StringBuilder $r11;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.util.Set;

        $i0 := @parameter3: int;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String;

        $r6 := @parameter6: java.lang.String[];

        $r7 := @parameter7: java.lang.String;

        $r8 := @parameter8: java.lang.String;

        $i1 = lengthof $r2;

        $r9 = newarray (java.lang.String)[$i1];

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label6;

        $r10 = $r2[$i2];

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' AS ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9[$i2] = $r10;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        if $i2 <= $i0 goto label4;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r10);

        if $z0 == 0 goto label5;

     label4:
        $r9[$i2] = $r10;

        goto label2;

     label5:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NULL AS ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9[$i2] = $r10;

        goto label2;

     label6:
        $r1 = virtualinvoke $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r9, $r5, $r6, $r7, $r8, null, null);

        return $r1;
    }

    public java.lang.String getTables()
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.lang.String r1;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        r1 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        return r1;
    }

    public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5, $r6, $r7;
        android.database.Cursor $r8;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.lang.String;

        $r8 = virtualinvoke $r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, $r3, $r4, $r5, $r6, $r7, null);

        return $r8;
    }

    public android.database.Cursor query(android.database.sqlite.SQLiteDatabase, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5, $r6, $r7, $r8, $r9;
        boolean $z0;
        java.lang.StringBuilder $r10;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r11;
        android.database.Cursor $r12;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $r5 := @parameter4: java.lang.String;

        $r6 := @parameter5: java.lang.String;

        $r7 := @parameter6: java.lang.String;

        $r8 := @parameter7: java.lang.String;

        $r9 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        if $r9 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4, $r5, $r6, $r7, $r8);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SQLiteQueryBuilder", 3);

        if $z0 == 0 goto label2;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Performing query: ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SQLiteQueryBuilder", $r5);

     label2:
        $r11 = $r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory>;

        $r5 = $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables>;

        $r5 = staticinvoke <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)>($r5);

        $r12 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)>($r11, $r3, $r4, $r5);

        return $r12;
    }

    public void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r1;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r0.<android.database.sqlite.SQLiteQueryBuilder: android.database.sqlite.SQLiteDatabase$CursorFactory mFactory> = $r1;

        return;
    }

    public void setDistinct(boolean)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $z0 := @parameter0: boolean;

        $r0.<android.database.sqlite.SQLiteQueryBuilder: boolean mDistinct> = $z0;

        return;
    }

    public void setProjectionMap(java.util.Map)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.util.Map $r1;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: java.util.Map;

        $r0.<android.database.sqlite.SQLiteQueryBuilder: java.util.Map mProjectionMap> = $r1;

        return;
    }

    public void setTables(java.lang.String)
    {
        android.database.sqlite.SQLiteQueryBuilder $r0;
        java.lang.String $r1;

        $r0 := @this: android.database.sqlite.SQLiteQueryBuilder;

        $r1 := @parameter0: java.lang.String;

        $r0.<android.database.sqlite.SQLiteQueryBuilder: java.lang.String mTables> = $r1;

        return;
    }

    public static void <clinit>()
    {
        <android.database.sqlite.SQLiteQueryBuilder: java.lang.String TAG> = "SQLiteQueryBuilder";

        return;
    }
}
