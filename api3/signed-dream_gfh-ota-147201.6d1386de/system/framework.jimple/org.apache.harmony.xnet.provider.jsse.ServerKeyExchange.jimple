public class org.apache.harmony.xnet.provider.jsse.ServerKeyExchange extends org.apache.harmony.xnet.provider.jsse.Message
{
    final byte[] bytes1;
    final byte[] bytes2;
    final byte[] bytes3;
    final byte[] hash;
    private java.security.interfaces.RSAPublicKey key;
    final java.math.BigInteger par1;
    final java.math.BigInteger par2;
    final java.math.BigInteger par3;

    public void <init>(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, byte[])
    {
        org.apache.harmony.xnet.provider.jsse.ServerKeyExchange $r0;
        java.math.BigInteger $r1, $r2, $r3;
        byte[] $r4, $r5, $r6, $r7;
        byte $b0;
        int $i1, $i2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerKeyExchange;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        $r4 := @parameter3: byte[];

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par1> = $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par2> = $r2;

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par3> = $r3;

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] hash> = $r4;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par1>;

        $r5 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = $r5[0];

        if $b0 != 0 goto label4;

        $i1 = lengthof $r5;

        $i1 = $i1 - 1;

        $r6 = newarray (byte)[$i1];

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1> = $r6;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1>;

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1>;

        $i1 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 1, $r6, 0, $i1);

     label1:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par2>;

        $r5 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = $r5[0];

        if $b0 != 0 goto label5;

        $i1 = lengthof $r5;

        $i1 = $i1 - 1;

        $r6 = newarray (byte)[$i1];

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2> = $r6;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2>;

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2>;

        $i1 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 1, $r6, 0, $i1);

     label2:
        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1>;

        $i1 = lengthof $r5;

        $i1 = $i1 + 4;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2>;

        $i2 = lengthof $r5;

        $i1 = $i1 + $i2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i1;

        if $r4 == null goto label3;

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        $i2 = lengthof $r4;

        $i2 = $i2 + 2;

        $i1 = $i1 + $i2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i1;

     label3:
        if $r3 != null goto label6;

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3> = null;

        return;

     label4:
        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1> = $r5;

        goto label1;

     label5:
        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2> = $r5;

        goto label2;

     label6:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par3>;

        $r4 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = $r4[0];

        if $b0 != 0 goto label8;

        $i1 = lengthof $r4;

        $i1 = $i1 - 1;

        $r5 = newarray (byte)[$i1];

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3> = $r5;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3>;

        $i1 = lengthof $r6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 1, $r5, 0, $i1);

     label7:
        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3>;

        $i2 = lengthof $r4;

        $i2 = $i2 + 2;

        $i1 = $i1 + $i2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i1;

        return;

     label8:
        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3> = $r4;

        goto label7;
    }

    public void <init>(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream, int, int) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.ServerKeyExchange $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        int $i0, $i1, $i2, $i3;
        byte[] $r2;
        java.math.BigInteger $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerKeyExchange;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $i2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)>($i2);

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1> = $r2;

        $r3 = new java.math.BigInteger;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par1> = $r3;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1>;

        $i2 = lengthof $r2;

        $i2 = $i2 + 2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i2;

        $i2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)>($i2);

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2> = $r2;

        $r3 = new java.math.BigInteger;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par2> = $r3;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2>;

        $i3 = lengthof $r2;

        $i3 = $i3 + 2;

        $i2 = $i2 + $i3;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i2;

        $i2 = <org.apache.harmony.xnet.provider.jsse.CipherSuite: int KeyExchange_RSA_EXPORT>;

        if $i1 == $i2 goto label3;

        $i2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)>($i2);

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3> = $r2;

        $r3 = new java.math.BigInteger;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3>;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r2);

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par3> = $r3;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3>;

        $i3 = lengthof $r2;

        $i3 = $i3 + 2;

        $i2 = $i2 + $i3;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i2;

     label1:
        $i2 = <org.apache.harmony.xnet.provider.jsse.CipherSuite: int KeyExchange_DH_anon_EXPORT>;

        if $i1 == $i2 goto label4;

        $i2 = <org.apache.harmony.xnet.provider.jsse.CipherSuite: int KeyExchange_DH_anon>;

        if $i1 == $i2 goto label4;

        $i1 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)>($i1);

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] hash> = $r2;

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] hash>;

        $i2 = lengthof $r2;

        $i2 = $i2 + 2;

        $i1 = $i1 + $i2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i1;

     label2:
        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        if $i1 == $i0 goto label5;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect ServerKeyExchange");

        return;

     label3:
        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par3> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3> = null;

        goto label1;

     label4:
        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] hash> = null;

        goto label2;

     label5:
        return;
    }

    public java.security.interfaces.RSAPublicKey getRSAPublicKey()
    {
        org.apache.harmony.xnet.provider.jsse.ServerKeyExchange $r0;
        java.math.BigInteger $r1, $r2;
        java.security.interfaces.RSAPublicKey $r3;
        java.security.KeyFactory $r4;
        java.security.spec.RSAPublicKeySpec $r5;
        java.security.PublicKey $r6;
        java.lang.Exception $r7;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerKeyExchange;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.security.interfaces.RSAPublicKey key>;

        if $r3 == null goto label1;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.security.interfaces.RSAPublicKey key>;

        return $r3;

     label1:
        $r4 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)>("RSA");

        $r5 = new java.security.spec.RSAPublicKeySpec;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par1>;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.math.BigInteger par2>;

        specialinvoke $r5.<java.security.spec.RSAPublicKeySpec: void <init>(java.math.BigInteger,java.math.BigInteger)>($r1, $r2);

        $r6 = virtualinvoke $r4.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r5);

        $r3 = (java.security.interfaces.RSAPublicKey) $r6;

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.security.interfaces.RSAPublicKey key> = $r3;

     label2:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: java.security.interfaces.RSAPublicKey key>;

        return $r3;

     label3:
        $r7 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public int getType()
    {
        org.apache.harmony.xnet.provider.jsse.ServerKeyExchange $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerKeyExchange;

        return 12;
    }

    public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)
    {
        org.apache.harmony.xnet.provider.jsse.ServerKeyExchange $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        byte[] $r2;
        int $i0;
        long $l1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerKeyExchange;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes1>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes2>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3>;

        if $r2 == null goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] bytes3>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] hash>;

        if $r2 == null goto label2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] hash>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerKeyExchange: byte[] hash>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        return;

     label2:
        return;
    }
}
