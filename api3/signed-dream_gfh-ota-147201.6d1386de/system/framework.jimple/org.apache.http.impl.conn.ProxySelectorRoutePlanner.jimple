public class org.apache.http.impl.conn.ProxySelectorRoutePlanner extends java.lang.Object implements org.apache.http.conn.routing.HttpRoutePlanner
{
    protected java.net.ProxySelector proxySelector;
    protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry, java.net.ProxySelector)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner $r0;
        org.apache.http.conn.scheme.SchemeRegistry $r1;
        java.net.ProxySelector $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        $r2 := @parameter1: java.net.ProxySelector;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SchemeRegistry must not be null.");

        throw $r3;

     label1:
        $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = $r1;

        $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector> = $r2;

        return;
    }

    protected java.net.Proxy chooseProxy(java.util.List, org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner $r0;
        java.util.List $r1;
        org.apache.http.HttpHost $r2;
        org.apache.http.HttpRequest $r3;
        org.apache.http.protocol.HttpContext $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r5;
        java.net.Proxy $r6, $r8;
        int $i0, $i1;
        java.lang.Object $r7;
        int[] $r9;
        java.net.Proxy$Type $r10;

        $r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: org.apache.http.HttpHost;

        $r3 := @parameter2: org.apache.http.HttpRequest;

        $r4 := @parameter3: org.apache.http.protocol.HttpContext;

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

     label1:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxy list must not be empty.");

        throw $r5;

     label2:
        $r6 = null;

        $i0 = 0;

     label3:
        if $r6 != null goto label6;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label6;

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r8 = (java.net.Proxy) $r7;

        $r9 = <org.apache.http.impl.conn.ProxySelectorRoutePlanner$1: int[] $SwitchMap$java$net$Proxy$Type>;

        $r10 = virtualinvoke $r8.<java.net.Proxy: java.net.Proxy$Type type()>();

        $i1 = virtualinvoke $r10.<java.lang.Enum: int ordinal()>();

        $i1 = $r9[$i1];

        lookupswitch($i1)
        {
            case 1: goto label5;
            case 2: goto label5;
            default: goto label4;
        };

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        $r6 = $r8;

        goto label4;

     label6:
        if $r6 != null goto label7;

        $r6 = <java.net.Proxy: java.net.Proxy NO_PROXY>;

        return $r6;

     label7:
        return $r6;
    }

    protected org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner $r0;
        org.apache.http.HttpHost $r1;
        org.apache.http.HttpRequest $r2;
        org.apache.http.protocol.HttpContext $r3;
        java.net.ProxySelector $r4;
        java.net.URI $r5;
        java.lang.String $r6;
        java.util.List $r7;
        java.net.Proxy $r8;
        java.net.Proxy$Type $r9, $r10;
        java.net.SocketAddress $r11;
        boolean $z0;
        org.apache.http.HttpException $r12;
        java.lang.StringBuilder $r13;
        java.net.URISyntaxException $r14;
        java.net.InetSocketAddress $r15;
        int $i0;

        $r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 := @parameter0: org.apache.http.HttpHost;

        $r2 := @parameter1: org.apache.http.HttpRequest;

        $r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r4 = $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector>;

        if $r4 != null goto label1;

        $r4 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>();

     label1:
        if $r4 != null goto label2;

        return null;

     label2:
        $r5 = new java.net.URI;

     label3:
        $r6 = virtualinvoke $r1.<org.apache.http.HttpHost: java.lang.String toURI()>();

        specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r6);

     label4:
        $r7 = virtualinvoke $r4.<java.net.ProxySelector: java.util.List select(java.net.URI)>($r5);

        $r8 = virtualinvoke $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.Proxy chooseProxy(java.util.List,org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r7, $r1, $r2, $r3);

        $r1 = null;

        $r9 = virtualinvoke $r8.<java.net.Proxy: java.net.Proxy$Type type()>();

        $r10 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP>;

        if $r9 != $r10 goto label7;

        $r11 = virtualinvoke $r8.<java.net.Proxy: java.net.SocketAddress address()>();

        $z0 = $r11 instanceof java.net.InetSocketAddress;

        if $z0 != 0 goto label6;

        $r12 = new org.apache.http.HttpException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to handle non-Inet proxy address: ");

        $r11 = virtualinvoke $r8.<java.net.Proxy: java.net.SocketAddress address()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.http.HttpException: void <init>(java.lang.String)>($r6);

        throw $r12;

     label5:
        $r14 := @caughtexception;

        $r12 = new org.apache.http.HttpException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert host to URI: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.http.HttpException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r14);

        throw $r12;

     label6:
        $r11 = virtualinvoke $r8.<java.net.Proxy: java.net.SocketAddress address()>();

        $r15 = (java.net.InetSocketAddress) $r11;

        $r1 = new org.apache.http.HttpHost;

        $r6 = virtualinvoke $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.lang.String getHost(java.net.InetSocketAddress)>($r15);

        $i0 = virtualinvoke $r15.<java.net.InetSocketAddress: int getPort()>();

        specialinvoke $r1.<org.apache.http.HttpHost: void <init>(java.lang.String,int)>($r6, $i0);

     label7:
        return $r1;

        catch java.net.URISyntaxException from label3 to label4 with label5;
    }

    public org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner $r0;
        org.apache.http.HttpHost $r1, $r8;
        org.apache.http.HttpRequest $r2;
        org.apache.http.protocol.HttpContext $r3;
        java.lang.IllegalStateException $r4;
        org.apache.http.params.HttpParams $r5;
        org.apache.http.conn.routing.HttpRoute $r6;
        java.net.InetAddress $r7;
        org.apache.http.conn.scheme.SchemeRegistry $r9;
        java.lang.String $r10;
        org.apache.http.conn.scheme.Scheme $r11;
        boolean $z0;

        $r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 := @parameter0: org.apache.http.HttpHost;

        $r2 := @parameter1: org.apache.http.HttpRequest;

        $r3 := @parameter2: org.apache.http.protocol.HttpContext;

        if $r2 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Request must not be null.");

        throw $r4;

     label1:
        $r5 = interfaceinvoke $r2.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r6 = staticinvoke <org.apache.http.conn.params.ConnRouteParams: org.apache.http.conn.routing.HttpRoute getForcedRoute(org.apache.http.params.HttpParams)>($r5);

        if $r6 == null goto label2;

        return $r6;

     label2:
        if $r1 != null goto label3;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host must not be null.");

        throw $r4;

     label3:
        $r5 = interfaceinvoke $r2.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r7 = staticinvoke <org.apache.http.conn.params.ConnRouteParams: java.net.InetAddress getLocalAddress(org.apache.http.params.HttpParams)>($r5);

        $r8 = virtualinvoke $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.HttpHost determineProxy(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r1, $r2, $r3);

        $r9 = $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        $r10 = virtualinvoke $r1.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r11 = virtualinvoke $r9.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r10);

        $z0 = virtualinvoke $r11.<org.apache.http.conn.scheme.Scheme: boolean isLayered()>();

        if $r8 != null goto label5;

        $r6 = new org.apache.http.conn.routing.HttpRoute;

        specialinvoke $r6.<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,boolean)>($r1, $r7, $z0);

     label4:
        return $r6;

     label5:
        $r6 = new org.apache.http.conn.routing.HttpRoute;

        specialinvoke $r6.<org.apache.http.conn.routing.HttpRoute: void <init>(org.apache.http.HttpHost,java.net.InetAddress,org.apache.http.HttpHost,boolean)>($r1, $r7, $r8, $z0);

        goto label4;
    }

    protected java.lang.String getHost(java.net.InetSocketAddress)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner $r0;
        java.net.InetSocketAddress $r1;
        boolean $z0;
        java.lang.String $r2;
        java.net.InetAddress $r3;

        $r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 := @parameter0: java.net.InetSocketAddress;

        $z0 = virtualinvoke $r1.<java.net.InetSocketAddress: boolean isUnresolved()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r1.<java.net.InetSocketAddress: java.lang.String getHostName()>();

        return $r2;

     label1:
        $r3 = virtualinvoke $r1.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r2 = virtualinvoke $r3.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r2;
    }

    public java.net.ProxySelector getProxySelector()
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner $r0;
        java.net.ProxySelector r1;

        $r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        r1 = $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector>;

        return r1;
    }

    public void setProxySelector(java.net.ProxySelector)
    {
        org.apache.http.impl.conn.ProxySelectorRoutePlanner $r0;
        java.net.ProxySelector $r1;

        $r0 := @this: org.apache.http.impl.conn.ProxySelectorRoutePlanner;

        $r1 := @parameter0: java.net.ProxySelector;

        $r0.<org.apache.http.impl.conn.ProxySelectorRoutePlanner: java.net.ProxySelector proxySelector> = $r1;

        return;
    }
}
