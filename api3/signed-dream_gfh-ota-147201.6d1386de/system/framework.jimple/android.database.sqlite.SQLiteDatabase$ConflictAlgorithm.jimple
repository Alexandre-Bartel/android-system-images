public final enum class android.database.sqlite.SQLiteDatabase$ConflictAlgorithm extends java.lang.Enum
{
    private static final android.database.sqlite.SQLiteDatabase$ConflictAlgorithm[] $VALUES;
    public static final enum android.database.sqlite.SQLiteDatabase$ConflictAlgorithm ABORT;
    public static final enum android.database.sqlite.SQLiteDatabase$ConflictAlgorithm FAIL;
    public static final enum android.database.sqlite.SQLiteDatabase$ConflictAlgorithm IGNORE;
    public static final enum android.database.sqlite.SQLiteDatabase$ConflictAlgorithm REPLACE;
    public static final enum android.database.sqlite.SQLiteDatabase$ConflictAlgorithm ROLLBACK;
    private final java.lang.String mValue;

    static void <clinit>()
    {
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm $r0;
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm[] $r1;

        $r0 = new android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: void <init>(java.lang.String,int,java.lang.String)>("ROLLBACK", 0, "ROLLBACK");

        <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm ROLLBACK> = $r0;

        $r0 = new android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: void <init>(java.lang.String,int,java.lang.String)>("ABORT", 1, "ABORT");

        <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm ABORT> = $r0;

        $r0 = new android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: void <init>(java.lang.String,int,java.lang.String)>("FAIL", 2, "FAIL");

        <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm FAIL> = $r0;

        $r0 = new android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: void <init>(java.lang.String,int,java.lang.String)>("IGNORE", 3, "IGNORE");

        <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm IGNORE> = $r0;

        $r0 = new android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        specialinvoke $r0.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: void <init>(java.lang.String,int,java.lang.String)>("REPLACE", 4, "REPLACE");

        <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm REPLACE> = $r0;

        $r1 = newarray (android.database.sqlite.SQLiteDatabase$ConflictAlgorithm)[5];

        $r0 = <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm ROLLBACK>;

        $r1[0] = $r0;

        $r0 = <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm ABORT>;

        $r1[1] = $r0;

        $r0 = <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm FAIL>;

        $r1[2] = $r0;

        $r0 = <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm IGNORE>;

        $r1[3] = $r0;

        $r0 = <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm REPLACE>;

        $r1[4] = $r0;

        <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm[] $VALUES> = $r1;

        return;
    }

    private void <init>(java.lang.String, int, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm $r0;
        java.lang.String $r1, $r2;
        int $i0;

        $r0 := @this: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        specialinvoke $r0.<java.lang.Enum: void <init>(java.lang.String,int)>($r1, $i0);

        $r0.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: java.lang.String mValue> = $r2;

        return;
    }

    public static android.database.sqlite.SQLiteDatabase$ConflictAlgorithm valueOf(java.lang.String)
    {
        java.lang.Enum $r0;
        java.lang.String $r1;
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "android/database/sqlite/SQLiteDatabase$ConflictAlgorithm", $r1);

        $r2 = (android.database.sqlite.SQLiteDatabase$ConflictAlgorithm) $r0;

        return $r2;
    }

    public static final android.database.sqlite.SQLiteDatabase$ConflictAlgorithm[] values()
    {
        java.lang.Object $r0;
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm[] $r1;

        $r1 = <android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm[] $VALUES>;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r1 = (android.database.sqlite.SQLiteDatabase$ConflictAlgorithm[]) $r0;

        return $r1;
    }

    public java.lang.String value()
    {
        android.database.sqlite.SQLiteDatabase$ConflictAlgorithm $r0;
        java.lang.String r1;

        $r0 := @this: android.database.sqlite.SQLiteDatabase$ConflictAlgorithm;

        r1 = $r0.<android.database.sqlite.SQLiteDatabase$ConflictAlgorithm: java.lang.String mValue>;

        return r1;
    }
}
