public final class android.webkit.WebIconDatabase extends java.lang.Object
{
    private static android.webkit.WebIconDatabase sIconDatabase;
    private final android.webkit.WebIconDatabase$EventHandler mEventHandler;

    private void <init>()
    {
        android.webkit.WebIconDatabase $r0;
        android.webkit.WebIconDatabase$EventHandler $r1;

        $r0 := @this: android.webkit.WebIconDatabase;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new android.webkit.WebIconDatabase$EventHandler;

        specialinvoke $r1.<android.webkit.WebIconDatabase$EventHandler: void <init>(android.webkit.WebIconDatabase,android.webkit.WebIconDatabase$1)>($r0, null);

        $r0.<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase$EventHandler mEventHandler> = $r1;

        return;
    }

    static void access$100(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <android.webkit.WebIconDatabase: void nativeOpen(java.lang.String)>($r0);

        return;
    }

    static void access$200()
    {
        staticinvoke <android.webkit.WebIconDatabase: void nativeClose()>();

        return;
    }

    static void access$300()
    {
        staticinvoke <android.webkit.WebIconDatabase: void nativeRemoveAllIcons()>();

        return;
    }

    static android.graphics.Bitmap access$400(java.lang.String)
    {
        java.lang.String $r0;
        android.graphics.Bitmap $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.webkit.WebIconDatabase: android.graphics.Bitmap nativeIconForPageUrl(java.lang.String)>($r0);

        return $r1;
    }

    static void access$500(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <android.webkit.WebIconDatabase: void nativeRetainIconForPageUrl(java.lang.String)>($r0);

        return;
    }

    static void access$600(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <android.webkit.WebIconDatabase: void nativeReleaseIconForPageUrl(java.lang.String)>($r0);

        return;
    }

    public static android.webkit.WebIconDatabase getInstance()
    {
        android.webkit.WebIconDatabase $r0;

        $r0 = <android.webkit.WebIconDatabase: android.webkit.WebIconDatabase sIconDatabase>;

        if $r0 != null goto label1;

        $r0 = new android.webkit.WebIconDatabase;

        specialinvoke $r0.<android.webkit.WebIconDatabase: void <init>()>();

        <android.webkit.WebIconDatabase: android.webkit.WebIconDatabase sIconDatabase> = $r0;

     label1:
        $r0 = <android.webkit.WebIconDatabase: android.webkit.WebIconDatabase sIconDatabase>;

        return $r0;
    }

    private static native void nativeClose();

    private static native android.graphics.Bitmap nativeIconForPageUrl(java.lang.String);

    private static native void nativeOpen(java.lang.String);

    private static native void nativeReleaseIconForPageUrl(java.lang.String);

    private static native void nativeRemoveAllIcons();

    private static native void nativeRetainIconForPageUrl(java.lang.String);

    public void close()
    {
        android.webkit.WebIconDatabase $r0;
        android.webkit.WebIconDatabase$EventHandler $r1;
        android.os.Message $r2;

        $r0 := @this: android.webkit.WebIconDatabase;

        $r1 = $r0.<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase$EventHandler mEventHandler>;

        $r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(null, 1);

        staticinvoke <android.webkit.WebIconDatabase$EventHandler: void access$700(android.webkit.WebIconDatabase$EventHandler,android.os.Message)>($r1, $r2);

        return;
    }

    void createHandler()
    {
        android.webkit.WebIconDatabase $r0;
        android.webkit.WebIconDatabase$EventHandler $r1;

        $r0 := @this: android.webkit.WebIconDatabase;

        $r1 = $r0.<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase$EventHandler mEventHandler>;

        staticinvoke <android.webkit.WebIconDatabase$EventHandler: void access$800(android.webkit.WebIconDatabase$EventHandler)>($r1);

        return;
    }

    public void open(java.lang.String)
    {
        android.webkit.WebIconDatabase $r0;
        java.lang.String $r1;
        android.webkit.WebIconDatabase$EventHandler $r2;
        android.os.Message $r3;

        $r0 := @this: android.webkit.WebIconDatabase;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = $r0.<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase$EventHandler mEventHandler>;

        $r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>(null, 0, $r1);

        staticinvoke <android.webkit.WebIconDatabase$EventHandler: void access$700(android.webkit.WebIconDatabase$EventHandler,android.os.Message)>($r2, $r3);

        return;

     label1:
        return;
    }

    public void releaseIconForPageUrl(java.lang.String)
    {
        android.webkit.WebIconDatabase $r0;
        java.lang.String $r1;
        android.webkit.WebIconDatabase$EventHandler $r2;
        android.os.Message $r3;

        $r0 := @this: android.webkit.WebIconDatabase;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = $r0.<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase$EventHandler mEventHandler>;

        $r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>(null, 5, $r1);

        staticinvoke <android.webkit.WebIconDatabase$EventHandler: void access$700(android.webkit.WebIconDatabase$EventHandler,android.os.Message)>($r2, $r3);

        return;

     label1:
        return;
    }

    public void removeAllIcons()
    {
        android.webkit.WebIconDatabase $r0;
        android.webkit.WebIconDatabase$EventHandler $r1;
        android.os.Message $r2;

        $r0 := @this: android.webkit.WebIconDatabase;

        $r1 = $r0.<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase$EventHandler mEventHandler>;

        $r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(null, 2);

        staticinvoke <android.webkit.WebIconDatabase$EventHandler: void access$700(android.webkit.WebIconDatabase$EventHandler,android.os.Message)>($r1, $r2);

        return;
    }

    public void requestIconForPageUrl(java.lang.String, android.webkit.WebIconDatabase$IconListener)
    {
        android.webkit.WebIconDatabase $r0;
        java.lang.String $r1;
        android.webkit.WebIconDatabase$IconListener $r2;
        android.os.Message $r3;
        android.os.Bundle $r4;
        android.webkit.WebIconDatabase$EventHandler $r5;

        $r0 := @this: android.webkit.WebIconDatabase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.webkit.WebIconDatabase$IconListener;

        if $r2 == null goto label2;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>(null, 3, $r2);

        $r4 = virtualinvoke $r3.<android.os.Message: android.os.Bundle getData()>();

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("url", $r1);

        $r5 = $r0.<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase$EventHandler mEventHandler>;

        staticinvoke <android.webkit.WebIconDatabase$EventHandler: void access$700(android.webkit.WebIconDatabase$EventHandler,android.os.Message)>($r5, $r3);

        return;

     label2:
        return;
    }

    public void retainIconForPageUrl(java.lang.String)
    {
        android.webkit.WebIconDatabase $r0;
        java.lang.String $r1;
        android.webkit.WebIconDatabase$EventHandler $r2;
        android.os.Message $r3;

        $r0 := @this: android.webkit.WebIconDatabase;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $r2 = $r0.<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase$EventHandler mEventHandler>;

        $r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>(null, 4, $r1);

        staticinvoke <android.webkit.WebIconDatabase$EventHandler: void access$700(android.webkit.WebIconDatabase$EventHandler,android.os.Message)>($r2, $r3);

        return;

     label1:
        return;
    }
}
