public class android.telephony.TelephonyManager extends java.lang.Object
{
    public static final java.lang.String ACTION_PHONE_STATE_CHANGED;
    public static final int CALL_STATE_IDLE;
    public static final int CALL_STATE_OFFHOOK;
    public static final int CALL_STATE_RINGING;
    public static final int DATA_ACTIVITY_IN;
    public static final int DATA_ACTIVITY_INOUT;
    public static final int DATA_ACTIVITY_NONE;
    public static final int DATA_ACTIVITY_OUT;
    public static final int DATA_CONNECTED;
    public static final int DATA_CONNECTING;
    public static final int DATA_DISCONNECTED;
    public static final int DATA_SUSPENDED;
    public static final java.lang.String EXTRA_INCOMING_NUMBER;
    public static final java.lang.String EXTRA_STATE;
    public static final java.lang.String EXTRA_STATE_IDLE;
    public static final java.lang.String EXTRA_STATE_OFFHOOK;
    public static final java.lang.String EXTRA_STATE_RINGING;
    public static final int NETWORK_TYPE_EDGE;
    public static final int NETWORK_TYPE_GPRS;
    public static final int NETWORK_TYPE_UMTS;
    public static final int NETWORK_TYPE_UNKNOWN;
    public static final int PHONE_TYPE_GSM;
    public static final int PHONE_TYPE_NONE;
    public static final int SIM_STATE_ABSENT;
    public static final int SIM_STATE_NETWORK_LOCKED;
    public static final int SIM_STATE_PIN_REQUIRED;
    public static final int SIM_STATE_PUK_REQUIRED;
    public static final int SIM_STATE_READY;
    public static final int SIM_STATE_UNKNOWN;
    private static final java.lang.String TAG;
    private static android.telephony.TelephonyManager sInstance;
    private android.content.Context mContext;
    private com.android.internal.telephony.ITelephonyRegistry mRegistry;

    static void <clinit>()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.Phone$State $r1;
        java.lang.String $r2;

        <android.telephony.TelephonyManager: java.lang.String TAG> = "TelephonyManager";

        <android.telephony.TelephonyManager: int SIM_STATE_UNKNOWN> = 0;

        <android.telephony.TelephonyManager: int SIM_STATE_READY> = 5;

        <android.telephony.TelephonyManager: int SIM_STATE_PUK_REQUIRED> = 3;

        <android.telephony.TelephonyManager: int SIM_STATE_PIN_REQUIRED> = 2;

        <android.telephony.TelephonyManager: int SIM_STATE_NETWORK_LOCKED> = 4;

        <android.telephony.TelephonyManager: int SIM_STATE_ABSENT> = 1;

        <android.telephony.TelephonyManager: int PHONE_TYPE_NONE> = 0;

        <android.telephony.TelephonyManager: int PHONE_TYPE_GSM> = 1;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_UNKNOWN> = 0;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_UMTS> = 3;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_GPRS> = 1;

        <android.telephony.TelephonyManager: int NETWORK_TYPE_EDGE> = 2;

        <android.telephony.TelephonyManager: java.lang.String EXTRA_STATE> = "state";

        <android.telephony.TelephonyManager: java.lang.String EXTRA_INCOMING_NUMBER> = "incoming_number";

        <android.telephony.TelephonyManager: int DATA_SUSPENDED> = 3;

        <android.telephony.TelephonyManager: int DATA_DISCONNECTED> = 0;

        <android.telephony.TelephonyManager: int DATA_CONNECTING> = 1;

        <android.telephony.TelephonyManager: int DATA_CONNECTED> = 2;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_OUT> = 2;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_NONE> = 0;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_INOUT> = 3;

        <android.telephony.TelephonyManager: int DATA_ACTIVITY_IN> = 1;

        <android.telephony.TelephonyManager: int CALL_STATE_RINGING> = 1;

        <android.telephony.TelephonyManager: int CALL_STATE_OFFHOOK> = 2;

        <android.telephony.TelephonyManager: int CALL_STATE_IDLE> = 0;

        <android.telephony.TelephonyManager: java.lang.String ACTION_PHONE_STATE_CHANGED> = "android.intent.action.PHONE_STATE";

        $r0 = new android.telephony.TelephonyManager;

        specialinvoke $r0.<android.telephony.TelephonyManager: void <init>()>();

        <android.telephony.TelephonyManager: android.telephony.TelephonyManager sInstance> = $r0;

        $r1 = <com.android.internal.telephony.Phone$State: com.android.internal.telephony.Phone$State IDLE>;

        $r2 = virtualinvoke $r1.<java.lang.Enum: java.lang.String toString()>();

        <android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_IDLE> = $r2;

        $r1 = <com.android.internal.telephony.Phone$State: com.android.internal.telephony.Phone$State RINGING>;

        $r2 = virtualinvoke $r1.<java.lang.Enum: java.lang.String toString()>();

        <android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_RINGING> = $r2;

        $r1 = <com.android.internal.telephony.Phone$State: com.android.internal.telephony.Phone$State OFFHOOK>;

        $r2 = virtualinvoke $r1.<java.lang.Enum: java.lang.String toString()>();

        <android.telephony.TelephonyManager: java.lang.String EXTRA_STATE_OFFHOOK> = $r2;

        return;
    }

    private void <init>()
    {
        android.telephony.TelephonyManager $r0;

        $r0 := @this: android.telephony.TelephonyManager;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(android.content.Context)
    {
        android.telephony.TelephonyManager $r0;
        android.content.Context $r1;
        android.os.IBinder $r2;
        com.android.internal.telephony.ITelephonyRegistry $r3;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.telephony.TelephonyManager: android.content.Context mContext> = $r1;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("telephony.registry");

        $r3 = staticinvoke <com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)>($r2);

        $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephonyRegistry mRegistry> = $r3;

        return;
    }

    public static android.telephony.TelephonyManager getDefault()
    {
        android.telephony.TelephonyManager r0;

        r0 = <android.telephony.TelephonyManager: android.telephony.TelephonyManager sInstance>;

        return r0;
    }

    private com.android.internal.telephony.ITelephony getITelephony()
    {
        android.telephony.TelephonyManager $r0;
        android.os.IBinder $r1;
        com.android.internal.telephony.ITelephony $r2;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("phone");

        $r2 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    private com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()
    {
        android.telephony.TelephonyManager $r0;
        android.os.IBinder $r1;
        com.android.internal.telephony.IPhoneSubInfo $r2;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("iphonesubinfo");

        $r2 = staticinvoke <com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    public void disableLocationUpdates()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.ITelephony $r1;
        android.os.RemoteException $r2;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: void disableLocationUpdates()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void enableLocationUpdates()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.ITelephony $r1;
        android.os.RemoteException $r2;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: void enableLocationUpdates()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getCallState()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.ITelephony $r1;
        int $i0;
        android.os.RemoteException $r2;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: int getCallState()>();

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.telephony.CellLocation getCellLocation()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.ITelephony $r1;
        android.os.Bundle $r2;
        android.telephony.CellLocation $r3;
        android.os.RemoteException $r4;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()>();

        $r3 = staticinvoke <android.telephony.CellLocation: android.telephony.CellLocation newFromBundle(android.os.Bundle)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDataActivity()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.ITelephony $r1;
        int $i0;
        android.os.RemoteException $r2;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: int getDataActivity()>();

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getDataState()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.ITelephony $r1;
        int $i0;
        android.os.RemoteException $r2;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $i0 = interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: int getDataState()>();

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDeviceId()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceId()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getDeviceSoftwareVersion()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getDeviceSvn()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getLine1AlphaTag()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1AlphaTag()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getLine1Number()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getLine1Number()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getNeighboringCellInfo()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.ITelephony $r1;
        java.util.List $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getNetworkCountryIso()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.operator.iso-country");

        return $r1;
    }

    public java.lang.String getNetworkOperator()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.operator.numeric");

        return $r1;
    }

    public java.lang.String getNetworkOperatorName()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.operator.alpha");

        return $r1;
    }

    public int getNetworkType()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.network.type");

        $r2 = "GPRS";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = "EDGE";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 2;

     label2:
        $r2 = "UMTS";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        return 3;

     label3:
        return 0;
    }

    public java.lang.String getNetworkTypeName()
    {
        android.telephony.TelephonyManager $r0;
        int $i0;

        $r0 := @this: android.telephony.TelephonyManager;

        $i0 = virtualinvoke $r0.<android.telephony.TelephonyManager: int getNetworkType()>();

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        return "UNKNOWN";

     label2:
        return "GPRS";

     label3:
        return "EDGE";

     label4:
        return "UMTS";
    }

    public int getPhoneType()
    {
        android.telephony.TelephonyManager $r0;

        $r0 := @this: android.telephony.TelephonyManager;

        return 1;
    }

    public java.lang.String getSimCountryIso()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.sim.operator.iso-country");

        return $r1;
    }

    public java.lang.String getSimOperator()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.sim.operator.numeric");

        return $r1;
    }

    public java.lang.String getSimOperatorName()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.sim.operator.alpha");

        return $r1;
    }

    public java.lang.String getSimSerialNumber()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSimSerialNumber()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getSimState()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.sim.state");

        $r2 = "ABSENT";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = "PIN_REQUIRED";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 2;

     label2:
        $r2 = "PUK_REQUIRED";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        return 3;

     label3:
        $r2 = "NETWORK_LOCKED";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

        return 4;

     label4:
        $r2 = "READY";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        return 5;

     label5:
        return 0;
    }

    public java.lang.String getSubscriberId()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getSubscriberId()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getVoiceMailAlphaTag()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailAlphaTag()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.lang.String getVoiceMailNumber()
    {
        android.telephony.TelephonyManager $r0;
        com.android.internal.telephony.IPhoneSubInfo $r1;
        java.lang.String $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.telephony.TelephonyManager;

     label1:
        $r1 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.IPhoneSubInfo getSubscriberInfo()>();

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.IPhoneSubInfo: java.lang.String getVoiceMailNumber()>();

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isNetworkRoaming()
    {
        android.telephony.TelephonyManager $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 = "true";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("gsm.operator.isroaming");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    public void listen(android.telephony.PhoneStateListener, int)
    {
        android.telephony.TelephonyManager $r0;
        android.telephony.PhoneStateListener $r1;
        int $i0;
        com.android.internal.telephony.IPhoneStateListener $r2;
        android.content.Context $r3;
        java.lang.String $r4;
        com.android.internal.telephony.ITelephony $r5;
        boolean $z0;
        java.lang.Boolean $r6;
        com.android.internal.telephony.ITelephonyRegistry $r7;
        android.os.RemoteException $r8;

        $r0 := @this: android.telephony.TelephonyManager;

        $r1 := @parameter0: android.telephony.PhoneStateListener;

        $i0 := @parameter1: int;

        $r3 = $r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        if $r3 == null goto label08;

        $r3 = $r0.<android.telephony.TelephonyManager: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

     label01:
        $r5 = specialinvoke $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephony getITelephony()>();

     label02:
        if $r5 == null goto label09;

     label03:
        $z0 = 1;

     label04:
        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

     label05:
        $r7 = $r0.<android.telephony.TelephonyManager: com.android.internal.telephony.ITelephonyRegistry mRegistry>;

     label06:
        $r2 = $r1.<android.telephony.PhoneStateListener: com.android.internal.telephony.IPhoneStateListener callback>;

        $z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        interfaceinvoke $r7.<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>($r4, $r2, $i0, $z0);

     label07:
        return;

     label08:
        $r4 = "<unknown>";

        goto label01;

     label09:
        $z0 = 0;

        goto label04;

     label10:
        $r8 := @caughtexception;

        return;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label05 with label10;
        catch android.os.RemoteException from label06 to label07 with label10;
    }
}
