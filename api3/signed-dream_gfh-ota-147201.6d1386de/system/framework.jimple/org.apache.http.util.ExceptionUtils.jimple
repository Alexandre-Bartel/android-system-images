public final class org.apache.http.util.ExceptionUtils extends java.lang.Object
{
    private static final java.lang.reflect.Method INIT_CAUSE_METHOD;

    static void <clinit>()
    {
        java.lang.reflect.Method $r0;

        $r0 = staticinvoke <org.apache.http.util.ExceptionUtils: java.lang.reflect.Method getInitCauseMethod()>();

        <org.apache.http.util.ExceptionUtils: java.lang.reflect.Method INIT_CAUSE_METHOD> = $r0;

        return;
    }

    private void <init>()
    {
        org.apache.http.util.ExceptionUtils $r0;

        $r0 := @this: org.apache.http.util.ExceptionUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.reflect.Method getInitCauseMethod()
    {
        java.lang.Class[] $r0;
        java.lang.reflect.Method $r1;
        java.lang.Class $r2;
        java.lang.NoSuchMethodException $r3;

        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "java/lang/Throwable";

        $r2 = class "java/lang/Throwable";

     label1:
        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("initCause", $r0);

     label2:
        return $r1;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static void initCause(java.lang.Throwable, java.lang.Throwable)
    {
        java.lang.Throwable $r0, $r1;
        java.lang.reflect.Method $r2;
        java.lang.Object[] $r3;
        java.lang.Exception $r4;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = <org.apache.http.util.ExceptionUtils: java.lang.reflect.Method INIT_CAUSE_METHOD>;

        if $r2 == null goto label4;

        $r2 = <org.apache.http.util.ExceptionUtils: java.lang.reflect.Method INIT_CAUSE_METHOD>;

     label1:
        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = $r1;

        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
