public class android.test.InstrumentationCoreTestRunner extends android.test.InstrumentationTestRunner
{
    private static final java.lang.String TAG;
    private boolean singleTest;

    public void <init>()
    {
        android.test.InstrumentationCoreTestRunner $r0;

        $r0 := @this: android.test.InstrumentationCoreTestRunner;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void <init>()>();

        $r0.<android.test.InstrumentationCoreTestRunner: boolean singleTest> = 0;

        return;
    }

    protected android.test.AndroidTestRunner getAndroidTestRunner()
    {
        android.test.InstrumentationCoreTestRunner $r0;
        android.test.InstrumentationCoreTestRunner$1 $r1;
        android.test.AndroidTestRunner $r2;

        $r0 := @this: android.test.InstrumentationCoreTestRunner;

        $r2 = specialinvoke $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner getAndroidTestRunner()>();

        $r1 = new android.test.InstrumentationCoreTestRunner$1;

        specialinvoke $r1.<android.test.InstrumentationCoreTestRunner$1: void <init>(android.test.InstrumentationCoreTestRunner)>($r0);

        virtualinvoke $r2.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r1);

        return $r2;
    }

    java.util.List getBuilderRequirements()
    {
        android.test.InstrumentationCoreTestRunner $r0;
        java.util.List $r1;
        android.test.suitebuilder.annotation.HasAnnotation $r2;
        com.android.internal.util.Predicate $r3;
        boolean $z0;

        $r0 := @this: android.test.InstrumentationCoreTestRunner;

        $r1 = specialinvoke $r0.<android.test.InstrumentationTestRunner: java.util.List getBuilderRequirements()>();

        $r2 = new android.test.suitebuilder.annotation.HasAnnotation;

        specialinvoke $r2.<android.test.suitebuilder.annotation.HasAnnotation: void <init>(java.lang.Class)>(class "dalvik/annotation/BrokenTest");

        $r3 = staticinvoke <com.android.internal.util.Predicates: com.android.internal.util.Predicate not(com.android.internal.util.Predicate)>($r2);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $z0 = $r0.<android.test.InstrumentationCoreTestRunner: boolean singleTest>;

        if $z0 != 0 goto label1;

        $r2 = new android.test.suitebuilder.annotation.HasAnnotation;

        specialinvoke $r2.<android.test.suitebuilder.annotation.HasAnnotation: void <init>(java.lang.Class)>(class "dalvik/annotation/SideEffect");

        $r3 = staticinvoke <com.android.internal.util.Predicates: com.android.internal.util.Predicate not(com.android.internal.util.Predicate)>($r2);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r1;

     label1:
        return $r1;
    }

    public void onCreate(android.os.Bundle)
    {
        android.test.InstrumentationCoreTestRunner $r0;
        android.os.Bundle $r1;
        android.content.Context $r2;
        java.io.File $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @this: android.test.InstrumentationCoreTestRunner;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = virtualinvoke $r0.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.io.File getCacheDir()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("user.language", "en");

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("user.region", "US");

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.home", $r4);

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("user.home", $r4);

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.io.tmpdir", $r4);

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("javax.net.ssl.trustStore", "/etc/security/cacerts.bks");

        if $r1 == null goto label2;

        $r4 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("class");

        if $r4 == null goto label3;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("#");

        if $z0 == 0 goto label3;

        $z0 = 1;

     label1:
        $r0.<android.test.InstrumentationCoreTestRunner: boolean singleTest> = $z0;

     label2:
        specialinvoke $r0.<android.test.InstrumentationTestRunner: void onCreate(android.os.Bundle)>($r1);

        return;

     label3:
        $z0 = 0;

        goto label1;
    }

    public static void <clinit>()
    {
        <android.test.InstrumentationCoreTestRunner: java.lang.String TAG> = "InstrumentationCoreTestRunner";

        return;
    }
}
