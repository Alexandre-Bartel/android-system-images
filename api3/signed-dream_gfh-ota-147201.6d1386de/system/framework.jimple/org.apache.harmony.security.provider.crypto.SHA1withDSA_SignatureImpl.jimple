public class org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl extends java.security.Signature
{
    private java.security.interfaces.DSAKey dsaKey;
    private java.security.MessageDigest msgDigest;

    public void <init>() throws java.security.NoSuchAlgorithmException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        java.security.MessageDigest $r1;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        specialinvoke $r0.<java.security.Signature: void <init>(java.lang.String)>("SHA1withDSA");

        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA1");

        $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.MessageDigest msgDigest> = $r1;

        return;
    }

    private boolean checkSignature(byte[], int, int) throws java.security.SignatureException
    {
        byte[] $r0, $r8, $r9;
        int $i0, $i1, $i4;
        byte $b2, $b3, $b5;
        java.math.BigInteger $r1, $r2, $r12, $r13, $r14, $r16, $r17;
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r3;
        java.security.SignatureException $r4;
        java.lang.String $r5;
        java.lang.ArrayIndexOutOfBoundsException $r6;
        java.security.MessageDigest $r7;
        java.security.interfaces.DSAKey $r10;
        java.security.interfaces.DSAParams $r11;
        java.security.interfaces.DSAPublicKey $r15;

        $r3 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i4 = $i0 + 3;

     label01:
        $b2 = $r0[$i4];

     label02:
        $i4 = $i0 + $b2;

     label03:
        $i4 = $i4 + 5;

        $b3 = $r0[$i4];

        $i4 = $i0 + 0;

        $b5 = $r0[$i4];

     label04:
        if $b5 != 48 goto label13;

     label05:
        $i4 = $i0 + 2;

        $b5 = $r0[$i4];

     label06:
        if $b5 != 2 goto label13;

        $i4 = $i0 + $b2;

     label07:
        $i4 = $i4 + 4;

        $b5 = $r0[$i4];

     label08:
        if $b5 != 2 goto label13;

     label09:
        $i4 = $i0 + 1;

        $b5 = $r0[$i4];

     label10:
        $i4 = $b2 + $b3;

        $i4 = $i4 + 4;

        if $b5 != $i4 goto label13;

        if $b2 > 21 goto label13;

        if $b3 > 21 goto label13;

        if $i1 == 0 goto label16;

     label11:
        $i4 = $i0 + 1;

        $b5 = $r0[$i4];

     label12:
        $i4 = $b5 + 2;

        if $i4 <= $i1 goto label16;

     label13:
        $r4 = new java.security.SignatureException;

        $r5 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.16F");

        specialinvoke $r4.<java.security.SignatureException: void <init>(java.lang.String)>($r5);

     label14:
        throw $r4;

     label15:
        $r6 := @caughtexception;

        $r4 = new java.security.SignatureException;

        $r5 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.170");

        specialinvoke $r4.<java.security.SignatureException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label16:
        $i1 = $b2 + 5;

        $i1 = $i1 + $b3;

     label17:
        $b5 = $r0[$i1];

     label18:
        $r7 = $r3.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.MessageDigest msgDigest>;

        $r8 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>();

        $r9 = newarray (byte)[$b2];

        $i1 = $i0 + 4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i1, $r9, 0, $b2);

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(byte[])>($r9);

        $r9 = newarray (byte)[$b3];

        $i0 = $i0 + 6;

        $i0 = $i0 + $b2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r9, 0, $b3);

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>($r9);

        $r10 = $r3.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.interfaces.DSAKey dsaKey>;

        $r11 = interfaceinvoke $r10.<java.security.interfaces.DSAKey: java.security.interfaces.DSAParams getParams()>();

        $r12 = interfaceinvoke $r11.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r13 = interfaceinvoke $r11.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r14 = interfaceinvoke $r11.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $r10 = $r3.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.interfaces.DSAKey dsaKey>;

        $r15 = (java.security.interfaces.DSAPublicKey) $r10;

        $r16 = interfaceinvoke $r15.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int signum()>();

        if $i0 != 1 goto label19;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r13);

        if $i0 != -1 goto label19;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int signum()>();

        if $i0 != 1 goto label19;

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r13);

        if $i0 == -1 goto label20;

     label19:
        return 0;

     label20:
        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r13);

        $r17 = new java.math.BigInteger;

        specialinvoke $r17.<java.math.BigInteger: void <init>(int,byte[])>(1, $r8);

        $r17 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r17 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r13);

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r2);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r13);

        $r14 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r17, $r12);

        $r16 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r12);

        $r16 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r16);

        $r12 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r12);

        $r13 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r13);

        $i0 = virtualinvoke $r13.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 == 0 goto label21;

        return 0;

     label21:
        return 1;

        catch java.lang.ArrayIndexOutOfBoundsException from label01 to label02 with label15;
        catch java.lang.ArrayIndexOutOfBoundsException from label03 to label04 with label15;
        catch java.lang.ArrayIndexOutOfBoundsException from label05 to label06 with label15;
        catch java.lang.ArrayIndexOutOfBoundsException from label07 to label08 with label15;
        catch java.lang.ArrayIndexOutOfBoundsException from label09 to label10 with label15;
        catch java.lang.ArrayIndexOutOfBoundsException from label11 to label12 with label15;
        catch java.lang.ArrayIndexOutOfBoundsException from label13 to label14 with label15;
        catch java.lang.ArrayIndexOutOfBoundsException from label17 to label18 with label15;
    }

    protected java.lang.Object engineGetParameter(java.lang.String) throws java.security.InvalidParameterException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        java.lang.String $r1;
        java.lang.NullPointerException $r2;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        $r1 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.01");

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        return null;
    }

    protected void engineInitSign(java.security.PrivateKey) throws java.security.InvalidKeyException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        java.security.PrivateKey $r1;
        boolean $z0;
        java.security.InvalidKeyException $r2;
        java.lang.String $r3;
        java.security.interfaces.DSAPrivateKey $r4;
        java.security.interfaces.DSAParams $r5;
        java.math.BigInteger $r6, $r7, $r8, $r9;
        int $i0, $i1;
        java.security.interfaces.DSAKey $r10;
        java.security.MessageDigest $r11;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r1 := @parameter0: java.security.PrivateKey;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof java.security.interfaces.DSAPrivateKey;

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.168");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        $r4 = (java.security.interfaces.DSAPrivateKey) $r1;

        $r5 = interfaceinvoke $r4.<java.security.interfaces.DSAPrivateKey: java.security.interfaces.DSAParams getParams()>();

        $r6 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r7 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $r4 = (java.security.interfaces.DSAPrivateKey) $r1;

        $r8 = interfaceinvoke $r4.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        $r9 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        $i1 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i1 != 1 goto label3;

        if $i0 < 512 goto label3;

        if $i0 > 1024 goto label3;

        $i0 = $i0 & 63;

        if $i0 == 0 goto label4;

     label3:
        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.169");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label4:
        $i0 = virtualinvoke $r7.<java.math.BigInteger: int signum()>();

        if $i0 == 1 goto label5;

        $i0 = virtualinvoke $r7.<java.math.BigInteger: int bitLength()>();

        if $i0 == 160 goto label5;

        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.16A");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label5:
        $i0 = virtualinvoke $r8.<java.math.BigInteger: int signum()>();

        if $i0 != 1 goto label6;

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r7);

        if $i0 == -1 goto label7;

     label6:
        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.16B");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label7:
        $r10 = (java.security.interfaces.DSAKey) $r1;

        $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.interfaces.DSAKey dsaKey> = $r10;

        $r11 = $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.MessageDigest msgDigest>;

        virtualinvoke $r11.<java.security.MessageDigest: void reset()>();

        return;
    }

    protected void engineInitVerify(java.security.PublicKey) throws java.security.InvalidKeyException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        java.security.PublicKey $r1;
        boolean $z0;
        java.security.InvalidKeyException $r2;
        java.lang.String $r3;
        java.security.interfaces.DSAPublicKey $r4;
        java.security.interfaces.DSAParams $r5;
        java.math.BigInteger $r6, $r7, $r8, $r9;
        int $i0, $i1;
        java.security.interfaces.DSAKey $r10;
        java.security.MessageDigest $r11;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r1 := @parameter0: java.security.PublicKey;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof java.security.interfaces.DSAPublicKey;

        if $z0 != 0 goto label2;

     label1:
        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.16C");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        $r4 = (java.security.interfaces.DSAPublicKey) $r1;

        $r5 = interfaceinvoke $r4.<java.security.interfaces.DSAPublicKey: java.security.interfaces.DSAParams getParams()>();

        $r6 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r7 = interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        interfaceinvoke $r5.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $r4 = (java.security.interfaces.DSAPublicKey) $r1;

        $r8 = interfaceinvoke $r4.<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

        $r9 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        $i1 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i1 != 1 goto label3;

        if $i0 < 512 goto label3;

        if $i0 > 1024 goto label3;

        $i0 = $i0 & 63;

        if $i0 == 0 goto label4;

     label3:
        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.169");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label4:
        $i0 = virtualinvoke $r7.<java.math.BigInteger: int signum()>();

        if $i0 != 1 goto label5;

        $i0 = virtualinvoke $r7.<java.math.BigInteger: int bitLength()>();

        if $i0 == 160 goto label6;

     label5:
        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.16A");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label6:
        $i0 = virtualinvoke $r8.<java.math.BigInteger: int signum()>();

        if $i0 == 1 goto label7;

        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.16D");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label7:
        $r10 = (java.security.interfaces.DSAKey) $r1;

        $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.interfaces.DSAKey dsaKey> = $r10;

        $r11 = $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.MessageDigest msgDigest>;

        virtualinvoke $r11.<java.security.MessageDigest: void reset()>();

        return;
    }

    protected void engineSetParameter(java.lang.String, java.lang.Object) throws java.security.InvalidParameterException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;
        java.security.InvalidParameterException $r4;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        $r1 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.83", "param");

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        $r4 = new java.security.InvalidParameterException;

        $r1 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.16E");

        specialinvoke $r4.<java.security.InvalidParameterException: void <init>(java.lang.String)>($r1);

        throw $r4;
    }

    protected byte[] engineSign() throws java.security.SignatureException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        java.security.SecureRandom $r1;
        java.security.interfaces.DSAKey $r2;
        java.security.interfaces.DSAParams $r3;
        java.math.BigInteger $r4, $r5, $r6, $r8, $r9, $r12, $r13, $r14;
        java.security.interfaces.DSAPrivateKey $r7;
        java.security.MessageDigest $r10;
        byte[] $r11, $r15, $r16;
        int $i0, $i3, $i4;
        byte $b1;
        short $s2;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r1 = $r0.<java.security.SignatureSpi: java.security.SecureRandom appRandom>;

        if $r1 != null goto label1;

        $r1 = new java.security.SecureRandom;

        specialinvoke $r1.<java.security.SecureRandom: void <init>()>();

        $r0.<java.security.SignatureSpi: java.security.SecureRandom appRandom> = $r1;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.interfaces.DSAKey dsaKey>;

        $r3 = interfaceinvoke $r2.<java.security.interfaces.DSAKey: java.security.interfaces.DSAParams getParams()>();

        $r4 = interfaceinvoke $r3.<java.security.interfaces.DSAParams: java.math.BigInteger getP()>();

        $r5 = interfaceinvoke $r3.<java.security.interfaces.DSAParams: java.math.BigInteger getQ()>();

        $r6 = interfaceinvoke $r3.<java.security.interfaces.DSAParams: java.math.BigInteger getG()>();

        $r2 = $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.interfaces.DSAKey dsaKey>;

        $r7 = (java.security.interfaces.DSAPrivateKey) $r2;

        $r8 = interfaceinvoke $r7.<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()>();

        $r9 = new java.math.BigInteger;

        $r10 = $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.MessageDigest msgDigest>;

        $r11 = virtualinvoke $r10.<java.security.MessageDigest: byte[] digest()>();

        specialinvoke $r9.<java.math.BigInteger: void <init>(int,byte[])>(1, $r11);

        $r11 = newarray (byte)[20];

     label2:
        $r1 = $r0.<java.security.SignatureSpi: java.security.SecureRandom appRandom>;

        virtualinvoke $r1.<java.security.SecureRandom: void nextBytes(byte[])>($r11);

        $r12 = new java.math.BigInteger;

        specialinvoke $r12.<java.math.BigInteger: void <init>(int,byte[])>(1, $r11);

        $i0 = virtualinvoke $r12.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r5);

        if $i0 != -1 goto label2;

        $r13 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r12, $r4);

        $r13 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r5);

        $i0 = virtualinvoke $r13.<java.math.BigInteger: int signum()>();

        if $i0 == 0 goto label2;

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r5);

        $r14 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r13);

        $r14 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r14);

        $r14 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r5);

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        $r12 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r5);

        $i0 = virtualinvoke $r12.<java.math.BigInteger: int signum()>();

        if $i0 == 0 goto label2;

        $r11 = virtualinvoke $r13.<java.math.BigInteger: byte[] toByteArray()>();

        $i0 = lengthof $r11;

        $b1 = $r11[0];

        $s2 = $b1 & 128;

        if $s2 == 0 goto label3;

        $i0 = $i0 + 1;

     label3:
        $r15 = virtualinvoke $r12.<java.math.BigInteger: byte[] toByteArray()>();

        $i3 = lengthof $r15;

        $i4 = $i3;

        $b1 = $r15[0];

        $s2 = $b1 & 128;

        if $s2 == 0 goto label4;

        $i4 = $i3 + 1;

     label4:
        $i3 = $i0 + 6;

        $i3 = $i3 + $i4;

        $r16 = newarray (byte)[$i3];

        $r16[0] = 48;

        $i3 = $i0 + 4;

        $i3 = $i3 + $i4;

        $b1 = (byte) $i3;

        $r16[1] = $b1;

        $r16[2] = 2;

        $b1 = (byte) $i0;

        $r16[3] = $b1;

        $i3 = $i0 + 4;

        $r16[$i3] = 2;

        $i3 = $i0 + 5;

        $b1 = (byte) $i4;

        $r16[$i3] = $b1;

        $i3 = lengthof $r11;

        if $i0 != $i3 goto label7;

        $b1 = 4;

     label5:
        $i3 = lengthof $r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, 0, $r16, $b1, $i3);

        $i3 = lengthof $r15;

        if $i4 != $i3 goto label8;

        $i0 = $i0 + 6;

     label6:
        $i4 = lengthof $r15;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r15, 0, $r16, $i0, $i4);

        return $r16;

     label7:
        $b1 = 5;

        goto label5;

     label8:
        $i0 = $i0 + 7;

        goto label6;
    }

    protected void engineUpdate(byte) throws java.security.SignatureException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        byte $b0;
        java.security.MessageDigest $r1;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $b0 := @parameter0: byte;

        $r1 = $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.MessageDigest msgDigest>;

        virtualinvoke $r1.<java.security.MessageDigest: void update(byte)>($b0);

        return;
    }

    protected void engineUpdate(byte[], int, int) throws java.security.SignatureException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        byte[] $r1;
        int $i0, $i1;
        java.security.MessageDigest $r2;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: java.security.MessageDigest msgDigest>;

        virtualinvoke $r2.<java.security.MessageDigest: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }

    protected boolean engineVerify(byte[]) throws java.security.SignatureException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        byte[] $r1;
        java.lang.NullPointerException $r2;
        java.lang.String $r3;
        boolean $z0;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.83", "sigBytes");

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $z0 = specialinvoke $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: boolean checkSignature(byte[],int,int)>($r1, 0, 0);

        return $z0;
    }

    protected boolean engineVerify(byte[], int, int) throws java.security.SignatureException
    {
        org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl $r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = specialinvoke $r0.<org.apache.harmony.security.provider.crypto.SHA1withDSA_SignatureImpl: boolean checkSignature(byte[],int,int)>($r1, $i0, $i1);

        return $z0;
    }
}
