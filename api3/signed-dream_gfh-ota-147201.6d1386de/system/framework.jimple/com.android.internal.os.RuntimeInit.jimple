public class com.android.internal.os.RuntimeInit extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static boolean initialized;
    private static android.os.IBinder mApplicationObject;
    private static final java.util.concurrent.atomic.AtomicInteger sInReportException;

    static void <clinit>()
    {
        java.util.concurrent.atomic.AtomicInteger $r0;

        <com.android.internal.os.RuntimeInit: java.lang.String TAG> = "AndroidRuntime";

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        <com.android.internal.os.RuntimeInit: java.util.concurrent.atomic.AtomicInteger sInReportException> = $r0;

        staticinvoke <android.ddm.DdmRegister: void registerHandlers()>();

        return;
    }

    public void <init>()
    {
        com.android.internal.os.RuntimeInit $r0;

        $r0 := @this: com.android.internal.os.RuntimeInit;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static final void commonInit()
    {
        com.android.internal.os.RuntimeInit$UncaughtHandler $r0;
        int $i0;
        com.android.internal.os.RuntimeInit$1 $r1;
        java.util.logging.LogManager $r2;
        com.android.internal.logging.AndroidConfig $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 = new com.android.internal.os.RuntimeInit$UncaughtHandler;

        specialinvoke $r0.<com.android.internal.os.RuntimeInit$UncaughtHandler: void <init>(com.android.internal.os.RuntimeInit$1)>(null);

        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>($r0);

        $i0 = staticinvoke <com.android.internal.os.RuntimeInit: int getQwertyKeyboard()>();

        if $i0 != 1 goto label1;

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("qwerty", "1");

     label1:
        $r1 = new com.android.internal.os.RuntimeInit$1;

        specialinvoke $r1.<com.android.internal.os.RuntimeInit$1: void <init>()>();

        staticinvoke <org.apache.harmony.luni.internal.util.TimezoneGetter: void setInstance(org.apache.harmony.luni.internal.util.TimezoneGetter)>($r1);

        staticinvoke <java.util.TimeZone: void setDefault(java.util.TimeZone)>(null);

        $r2 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r2.<java.util.logging.LogManager: void reset()>();

        $r3 = new com.android.internal.logging.AndroidConfig;

        specialinvoke $r3.<com.android.internal.logging.AndroidConfig: void <init>()>();

        $r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.kernel.android.tracing");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("AndroidRuntime", "NOTE: emulator trace profiling enabled");

        staticinvoke <android.os.Debug: void enableEmulatorTraceOutput()>();

     label2:
        <com.android.internal.os.RuntimeInit: boolean initialized> = 1;

        return;
    }

    public static void crash(java.lang.String, java.lang.Throwable)
    {
        java.lang.String $r0, $r4, $r9;
        java.lang.Throwable $r1, $r7, $r12, $r13, $r14, $r15;
        android.os.IBinder $r2;
        byte[] $r3, $r5;
        java.lang.NullPointerException $r6;
        java.lang.StringBuilder $r8;
        android.app.IActivityManager $r10;
        int $i0;
        android.os.RemoteException $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

        if $r2 == null goto label18;

        $r3 = null;

     label01:
        $r4 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r1);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidRuntime", $r4);

        $r5 = staticinvoke <com.android.internal.os.RuntimeInit: byte[] marshallException(java.lang.String,java.lang.Throwable)>($r0, $r1);

     label02:
        $r3 = $r5;

     label03:
        if $r5 != null goto label06;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("Can\'t marshall crash data");

        throw $r6;

     label04:
        $r7 := @caughtexception;

     label05:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reporting crash: ");

        $r4 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r7);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidRuntime", $r4);

     label06:
        $r9 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

     label07:
        $r4 = $r9;

     label08:
        if $r9 != null goto label09;

        $r4 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String toString()>();

     label09:
        $r10 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

     label10:
        $r2 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

     label11:
        $r9 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String toString()>();

        $i0 = interfaceinvoke $r10.<android.app.IActivityManager: int handleApplicationError(android.os.IBinder,int,java.lang.String,java.lang.String,java.lang.String,byte[])>($r2, 0, $r0, $r4, $r9, $r3);

        if $i0 != 1 goto label14;

        staticinvoke <android.os.Debug: void waitForDebugger()>();

     label12:
        $i0 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i0);

        staticinvoke <java.lang.System: void exit(int)>(10);

        return;

     label13:
        $r11 := @caughtexception;

     label14:
        $i0 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i0);

        staticinvoke <java.lang.System: void exit(int)>(10);

        return;

     label15:
        $r12 := @caughtexception;

     label16:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reporting crash: ");

        $r0 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r12);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidRuntime", $r0);

     label17:
        $i0 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i0);

        staticinvoke <java.lang.System: void exit(int)>(10);

        return;

     label18:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidRuntime", "*** EXCEPTION IN SYSTEM PROCESS.  System will crash.");

        $r4 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>($r1);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r0, $r4);

        staticinvoke <com.android.internal.os.RuntimeInit: void reportException(java.lang.String,java.lang.Throwable,boolean)>($r0, $r1, 1);

     label19:
        $i0 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i0);

        staticinvoke <java.lang.System: void exit(int)>(10);

        return;

     label20:
        $r13 := @caughtexception;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i0);

        staticinvoke <java.lang.System: void exit(int)>(10);

        return;

     label21:
        $r14 := @caughtexception;

        goto label17;

     label22:
        $r15 := @caughtexception;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label04;
        catch java.lang.Throwable from label03 to label04 with label04;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label10 with label15;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label10 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label18 to label19 with label20;
    }

    public static final native void finishInit();

    public static native int getQwertyKeyboard();

    private static void invokeStaticMain(java.lang.String, java.lang.String[]) throws com.android.internal.os.ZygoteInit$MethodAndArgsCaller
    {
        java.lang.String $r0;
        java.lang.String[] $r1;
        dalvik.system.VMRuntime $r2;
        java.lang.Class $r3;
        java.lang.Class[] $r4;
        java.lang.reflect.Method $r5;
        int $i0;
        boolean $z0;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7;
        java.lang.ClassNotFoundException $r8;
        java.lang.NoSuchMethodException $r9;
        java.lang.SecurityException $r10;
        com.android.internal.os.ZygoteInit$MethodAndArgsCaller $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r2.<dalvik.system.VMRuntime: float setTargetHeapUtilization(float)>(0.75F);

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r0);

     label2:
        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "[Ljava/lang/String;";

     label3:
        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("main", $r4);

     label4:
        $i0 = virtualinvoke $r5.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label5;

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label9;

     label5:
        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Main method is not public and static on ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r0);

        throw $r6;

     label6:
        $r8 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing class when invoking static main ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r8);

        throw $r6;

     label7:
        $r9 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing static main on ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r9);

        throw $r6;

     label8:
        $r10 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem getting static main on ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r10);

        throw $r6;

     label9:
        $r11 = new com.android.internal.os.ZygoteInit$MethodAndArgsCaller;

        specialinvoke $r11.<com.android.internal.os.ZygoteInit$MethodAndArgsCaller: void <init>(java.lang.reflect.Method,java.lang.String[])>($r5, $r1);

        throw $r11;

        catch java.lang.ClassNotFoundException from label1 to label2 with label6;
        catch java.lang.NoSuchMethodException from label3 to label4 with label7;
        catch java.lang.SecurityException from label3 to label4 with label8;
    }

    public static final native int isComputerOn();

    public static final void main(java.lang.String[])
    {
        java.lang.String[] $r0;

        $r0 := @parameter0: java.lang.String[];

        staticinvoke <com.android.internal.os.RuntimeInit: void commonInit()>();

        staticinvoke <com.android.internal.os.RuntimeInit: void finishInit()>();

        return;
    }

    private static byte[] marshallException(java.lang.String, java.lang.Throwable)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;
        java.io.ByteArrayOutputStream $r2;
        java.io.DataOutputStream $r3;
        byte[] $r4;
        android.server.data.CrashData $r5;
        java.io.IOException $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = new java.io.DataOutputStream;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r2);

        $r5 = new android.server.data.CrashData;

     label1:
        specialinvoke $r5.<android.server.data.CrashData: void <init>(java.lang.String,java.lang.Throwable)>($r0, $r1);

        virtualinvoke $r5.<android.server.data.CrashData: void write(java.io.DataOutput)>($r3);

        virtualinvoke $r3.<java.io.FilterOutputStream: void close()>();

     label2:
        $r4 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;

     label3:
        $r6 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void reportException(java.lang.String, java.lang.Throwable, boolean)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1, $r6, $r8;
        boolean $z0, $z1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0;
        byte[] $r3;
        android.os.IBinder $r4;
        android.os.ICheckinService $r5;
        java.lang.StringBuilder $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Throwable;

        $z0 := @parameter2: boolean;

        $z1 = <com.android.internal.os.RuntimeInit: boolean initialized>;

        if $z1 != 0 goto label01;

        return;

     label01:
        $r2 = <com.android.internal.os.RuntimeInit: java.util.concurrent.atomic.AtomicInteger sInReportException>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        if $i0 == 0 goto label02;

        $r2 = <com.android.internal.os.RuntimeInit: java.util.concurrent.atomic.AtomicInteger sInReportException>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidRuntime", "Crash logging skipped, already logging another crash");

        return;

     label02:
        $r3 = staticinvoke <com.android.internal.os.RuntimeInit: byte[] marshallException(java.lang.String,java.lang.Throwable)>($r0, $r1);

        $r4 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("checkin");

        $r5 = staticinvoke <android.os.ICheckinService$Stub: android.os.ICheckinService asInterface(android.os.IBinder)>($r4);

        if $r5 != null goto label04;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidRuntime", "Crash logging skipped, no checkin service");

     label03:
        $r2 = <com.android.internal.os.RuntimeInit: java.util.concurrent.atomic.AtomicInteger sInReportException>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;

     label04:
        if $z0 == 0 goto label10;

     label05:
        interfaceinvoke $r5.<android.os.ICheckinService: void reportCrashSync(byte[])>($r3);

     label06:
        goto label03;

     label07:
        $r6 := @caughtexception;

     label08:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Crash logging failed: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r0 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidRuntime", $r0);

     label09:
        $r2 = <com.android.internal.os.RuntimeInit: java.util.concurrent.atomic.AtomicInteger sInReportException>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        return;

     label10:
        interfaceinvoke $r5.<android.os.ICheckinService: void reportCrashAsync(byte[])>($r3);

     label11:
        goto label03;

     label12:
        $r8 := @caughtexception;

        $r2 = <com.android.internal.os.RuntimeInit: java.util.concurrent.atomic.AtomicInteger sInReportException>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label07;
    }

    public static final void setApplicationObject(android.os.IBinder)
    {
        android.os.IBinder $r0;

        $r0 := @parameter0: android.os.IBinder;

        <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject> = $r0;

        return;
    }

    public static final native void turnComputerOn();

    public static android.server.data.CrashData unmarshallException(byte[])
    {
        byte[] $r0;
        java.io.ByteArrayInputStream $r1;
        java.io.DataInputStream $r2;
        android.server.data.CrashData $r3;
        java.io.IOException $r4;

        $r0 := @parameter0: byte[];

        $r1 = new java.io.ByteArrayInputStream;

     label1:
        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r0);

        $r2 = new java.io.DataInputStream;

        specialinvoke $r2.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        $r3 = new android.server.data.CrashData;

        specialinvoke $r3.<android.server.data.CrashData: void <init>(java.io.DataInput)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static final void zygoteInit(java.lang.String[]) throws com.android.internal.os.ZygoteInit$MethodAndArgsCaller
    {
        java.lang.String[] $r0, $r2;
        java.lang.String $r1;
        int $i0, $i1;
        com.android.internal.os.AndroidPrintStream $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String[];

        $r3 = new com.android.internal.os.AndroidPrintStream;

        specialinvoke $r3.<com.android.internal.os.AndroidPrintStream: void <init>(int,java.lang.String)>(4, "System.out");

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($r3);

        $r3 = new com.android.internal.os.AndroidPrintStream;

        specialinvoke $r3.<com.android.internal.os.AndroidPrintStream: void <init>(int,java.lang.String)>(5, "System.err");

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>($r3);

        staticinvoke <com.android.internal.os.RuntimeInit: void commonInit()>();

        staticinvoke <com.android.internal.os.RuntimeInit: void zygoteInitNative()>();

        $i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label2;

        $r1 = $r0[$i1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("--");

        if $z0 == 0 goto label3;

        $i1 = $i1 + 1;

     label2:
        $i0 = lengthof $r0;

        if $i1 != $i0 goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AndroidRuntime", "Missing classname argument to RuntimeInit!");

        return;

     label3:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("--");

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("--nice-name=");

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(61);

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        staticinvoke <android.os.Process: void setArgV0(java.lang.String)>($r1);

     label4:
        $i1 = $i1 + 1;

        goto label1;

     label5:
        $i0 = $i1 + 1;

        $r1 = $r0[$i1];

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        $r2 = newarray (java.lang.String)[$i1];

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r2, 0, $i1);

        staticinvoke <com.android.internal.os.RuntimeInit: void invokeStaticMain(java.lang.String,java.lang.String[])>($r1, $r2);

        return;
    }

    public static final native void zygoteInitNative();
}
