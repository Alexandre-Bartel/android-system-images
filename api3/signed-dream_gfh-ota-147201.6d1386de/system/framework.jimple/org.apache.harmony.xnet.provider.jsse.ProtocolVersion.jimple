public class org.apache.harmony.xnet.provider.jsse.ProtocolVersion extends java.lang.Object
{
    public static org.apache.harmony.xnet.provider.jsse.ProtocolVersion SSLv3;
    public static org.apache.harmony.xnet.provider.jsse.ProtocolVersion TLSv1;
    private static java.util.Hashtable protocolsByName;
    public static final java.lang.String[] supportedProtocols;
    public final java.lang.String name;
    public final byte[] version;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.Hashtable $r1;
        org.apache.harmony.xnet.provider.jsse.ProtocolVersion $r2;
        byte[] $r3;
        java.lang.String $r4;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "TLSv1";

        $r0[1] = "SSLv3";

        <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.lang.String[] supportedProtocols> = $r0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(4);

        <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.util.Hashtable protocolsByName> = $r1;

        $r2 = new org.apache.harmony.xnet.provider.jsse.ProtocolVersion;

        $r3 = newarray (byte)[2];

        $r3[0] = 3;

        $r3[1] = 0;

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: void <init>(java.lang.String,byte[])>("SSLv3", $r3);

        <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion SSLv3> = $r2;

        $r2 = new org.apache.harmony.xnet.provider.jsse.ProtocolVersion;

        $r3 = newarray (byte)[2];

        $r3[0] = 3;

        $r3[1] = 1;

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: void <init>(java.lang.String,byte[])>("TLSv1", $r3);

        <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion TLSv1> = $r2;

        $r1 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.util.Hashtable protocolsByName>;

        $r2 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion SSLv3>;

        $r4 = $r2.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.lang.String name>;

        $r2 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion SSLv3>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

        $r1 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.util.Hashtable protocolsByName>;

        $r2 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion TLSv1>;

        $r4 = $r2.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.lang.String name>;

        $r2 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion TLSv1>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

        $r1 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.util.Hashtable protocolsByName>;

        $r2 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion SSLv3>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("SSL", $r2);

        $r1 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.util.Hashtable protocolsByName>;

        $r2 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion TLSv1>;

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("TLS", $r2);

        return;
    }

    private void <init>(java.lang.String, byte[])
    {
        org.apache.harmony.xnet.provider.jsse.ProtocolVersion $r0;
        java.lang.String $r1;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ProtocolVersion;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.lang.String name> = $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version> = $r2;

        return;
    }

    public static org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByName(java.lang.String)
    {
        java.util.Hashtable $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        org.apache.harmony.xnet.provider.jsse.ProtocolVersion $r3;

        $r2 := @parameter0: java.lang.String;

        $r0 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.util.Hashtable protocolsByName>;

        $r1 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        $r3 = (org.apache.harmony.xnet.provider.jsse.ProtocolVersion) $r1;

        return $r3;
    }

    public static org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByVersion(byte[])
    {
        byte[] $r0;
        byte $b0;
        org.apache.harmony.xnet.provider.jsse.ProtocolVersion r1;

        $r0 := @parameter0: byte[];

        $b0 = $r0[0];

        if $b0 != 3 goto label2;

        $b0 = $r0[1];

        if $b0 != 1 goto label1;

        r1 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion TLSv1>;

        return r1;

     label1:
        $b0 = $r0[1];

        if $b0 != 0 goto label2;

        r1 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion SSLv3>;

        return r1;

     label2:
        return null;
    }

    public static org.apache.harmony.xnet.provider.jsse.ProtocolVersion getLatestVersion(java.lang.String[])
    {
        java.lang.String[] $r0;
        int $i0, $i1;
        java.lang.String $r1;
        org.apache.harmony.xnet.provider.jsse.ProtocolVersion $r2, $r3;
        byte[] $r4;
        byte $b2, $b3;

        $r0 := @parameter0: java.lang.String[];

        if $r0 == null goto label1;

        $i0 = lengthof $r0;

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r1 = $r0[0];

        $r2 = staticinvoke <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByName(java.lang.String)>($r1);

        $i0 = 1;

     label3:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label7;

        $r1 = $r0[$i0];

        $r3 = staticinvoke <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: org.apache.harmony.xnet.provider.jsse.ProtocolVersion getByName(java.lang.String)>($r1);

        if $r3 != null goto label5;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        if $r2 == null goto label6;

        $r4 = $r2.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b2 = $r4[0];

        $r4 = $r3.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b3 = $r4[0];

        if $b2 < $b3 goto label6;

        $r4 = $r2.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b2 = $r4[0];

        $r4 = $r3.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b3 = $r4[0];

        if $b2 != $b3 goto label4;

        $r4 = $r2.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b2 = $r4[1];

        $r4 = $r3.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b3 = $r4[1];

        if $b2 >= $b3 goto label4;

     label6:
        $r2 = $r3;

        goto label4;

     label7:
        return $r2;
    }

    public static boolean isSupported(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        java.util.Hashtable $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.util.Hashtable protocolsByName>;

        $z0 = virtualinvoke $r1.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r0);

        return $z0;
    }

    public static boolean isSupported(byte[])
    {
        byte[] $r0;
        byte $b0;

        $r0 := @parameter0: byte[];

        $b0 = $r0[0];

        if $b0 != 3 goto label1;

        $b0 = $r0[1];

        if $b0 == 0 goto label2;

        $b0 = $r0[1];

        if $b0 == 1 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.harmony.xnet.provider.jsse.ProtocolVersion $r0, $r3;
        java.lang.Object $r1;
        boolean $z0;
        byte[] $r2;
        byte $b0, $b1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ProtocolVersion;

        $r1 := @parameter0: java.lang.Object;

        $z0 = $r1 instanceof org.apache.harmony.xnet.provider.jsse.ProtocolVersion;

        if $z0 == 0 goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b0 = $r2[0];

        $r3 = (org.apache.harmony.xnet.provider.jsse.ProtocolVersion) $r1;

        $r2 = $r3.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b1 = $r2[0];

        if $b0 != $b1 goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b0 = $r2[1];

        $r0 = (org.apache.harmony.xnet.provider.jsse.ProtocolVersion) $r1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: byte[] version>;

        $b1 = $r2[1];

        if $b0 != $b1 goto label1;

        return 1;

     label1:
        return 0;
    }
}
