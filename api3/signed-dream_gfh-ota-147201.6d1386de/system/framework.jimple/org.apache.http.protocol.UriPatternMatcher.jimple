public class org.apache.http.protocol.UriPatternMatcher extends java.lang.Object
{
    private final java.util.Map handlerMap;

    public void <init>()
    {
        org.apache.http.protocol.UriPatternMatcher $r0;
        java.util.HashMap $r1;

        $r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap> = $r1;

        return;
    }

    public java.lang.Object lookup(java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher $r0;
        java.lang.String $r1, $r6, $r9;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;
        java.util.Map $r3;
        java.lang.Object $r4, $r5;
        java.util.Set $r7;
        java.util.Iterator $r8;
        boolean $z0;

        $r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request URI may not be null");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("?");

        if $i0 == -1 goto label2;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label2:
        $r3 = $r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = $r4;

        if $r4 != null goto label5;

        $r6 = null;

        $r3 = $r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        $r7 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r4 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.String) $r4;

        $z0 = virtualinvoke $r0.<org.apache.http.protocol.UriPatternMatcher: boolean matchUriRequestPattern(java.lang.String,java.lang.String)>($r9, $r1);

        if $z0 == 0 goto label3;

        if $r6 == null goto label4;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 < $i1 goto label4;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i0 != $i1 goto label3;

        $z0 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z0 == 0 goto label3;

     label4:
        $r3 = $r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        $r6 = $r9;

        goto label3;

     label5:
        return $r4;

     label6:
        return $r5;
    }

    protected boolean matchUriRequestPattern(java.lang.String, java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher $r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        int $i0;

        $r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 - 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r3);

        if $z0 != 0 goto label3;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("*");

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>($r1);

        if $z0 == 0 goto label4;

     label3:
        return 1;

     label4:
        return 0;
    }

    public void register(java.lang.String, java.lang.Object)
    {
        org.apache.http.protocol.UriPatternMatcher $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        java.util.Map $r4;

        $r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("URI request pattern may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request handelr may not be null");

        throw $r3;

     label2:
        $r4 = $r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void setHandlers(java.util.Map)
    {
        org.apache.http.protocol.UriPatternMatcher $r0;
        java.util.Map $r1, $r3;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        $r1 := @parameter0: java.util.Map;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Map of handlers may not be null");

        throw $r2;

     label1:
        $r3 = $r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r3 = $r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r1);

        return;
    }

    public void unregister(java.lang.String)
    {
        org.apache.http.protocol.UriPatternMatcher $r0;
        java.lang.String $r1;
        java.util.Map $r2;

        $r0 := @this: org.apache.http.protocol.UriPatternMatcher;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r0.<org.apache.http.protocol.UriPatternMatcher: java.util.Map handlerMap>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }
}
