public class org.apache.harmony.security.provider.cert.Cache extends java.lang.Object
{
    private static final long HASH_MASK;
    private static final int INDEX_MASK;
    private static final long PREFIX_HASH_MASK;
    private final java.lang.Object[] cache;
    private boolean cache_is_full;
    private final int cache_size;
    private final byte[][] encodings;
    private final long[] hashes;
    private final long[] hashes_idx;
    private int last_cached;
    private final int prefix_size;

    public void <init>()
    {
        org.apache.harmony.security.provider.cert.Cache $r0;

        $r0 := @this: org.apache.harmony.security.provider.cert.Cache;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.Cache: void <init>(int,int)>(28, 9);

        return;
    }

    public void <init>(int)
    {
        org.apache.harmony.security.provider.cert.Cache $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.security.provider.cert.Cache;

        $i0 := @parameter0: int;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.Cache: void <init>(int,int)>($i0, 9);

        return;
    }

    public void <init>(int, int)
    {
        org.apache.harmony.security.provider.cert.Cache $r0;
        int $i0, $i1;
        long[] $r1;
        byte[][] $r2;
        java.lang.Object[] $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.Cache;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.security.provider.cert.Cache: int last_cached> = 0;

        $r0.<org.apache.harmony.security.provider.cert.Cache: boolean cache_is_full> = 0;

        $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size> = $i1;

        $r0.<org.apache.harmony.security.provider.cert.Cache: int prefix_size> = $i0;

        $i0 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        $r1 = newarray (long)[$i0];

        $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes> = $r1;

        $i0 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        $r1 = newarray (long)[$i0];

        $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx> = $r1;

        $i0 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        $r2 = newarray (byte[])[$i0];

        $r0.<org.apache.harmony.security.provider.cert.Cache: byte[][] encodings> = $r2;

        $i0 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        $r3 = newarray (java.lang.Object)[$i0];

        $r0.<org.apache.harmony.security.provider.cert.Cache: java.lang.Object[] cache> = $r3;

        return;
    }

    private long getSuffHash(byte[])
    {
        org.apache.harmony.security.provider.cert.Cache $r0;
        byte[] $r1;
        long $l0, $l6;
        int $i1, $i2, $i3;
        byte $b4;
        short $s5;

        $r0 := @this: org.apache.harmony.security.provider.cert.Cache;

        $r1 := @parameter0: byte[];

        $l0 = 0L;

        $i1 = lengthof $r1;

        $i1 = $i1 - 1;

     label1:
        $i2 = lengthof $r1;

        $i3 = $r0.<org.apache.harmony.security.provider.cert.Cache: int prefix_size>;

        $i2 = $i2 - $i3;

        if $i1 <= $i2 goto label2;

        $b4 = $r1[$i1];

        $s5 = $b4 & 255;

        $l6 = (long) $s5;

        $l0 = $l0 + $l6;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        $l0 = $l0 << 16;

        return $l0;
    }

    public boolean contains(long)
    {
        org.apache.harmony.security.provider.cert.Cache $r0;
        long $l0, $l3;
        int $i1, $i2;
        long[] $r1;
        byte $b4;

        $r0 := @this: org.apache.harmony.security.provider.cert.Cache;

        $l0 := @parameter0: long;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r1, $l0);

        $i1 = $i1 * -1;

        $i1 = $i1 - 1;

        $i2 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        if $i1 != $i2 goto label1;

        return 0;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $l3 = $r1[$i1];

        $l3 = $l3 & -4294967296L;

        $b4 = $l3 cmp $l0;

        if $b4 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.lang.Object get(long, byte[])
    {
        org.apache.harmony.security.provider.cert.Cache $r0;
        byte[] $r1, $r5;
        int $i0, $i3;
        long $l1, $l2;
        long[] $r2;
        java.lang.Object $r3;
        byte $b4;
        byte[][] $r4;
        boolean $z0;
        java.lang.Object[] $r6;

        $r0 := @this: org.apache.harmony.security.provider.cert.Cache;

        $l1 := @parameter0: long;

        $r1 := @parameter1: byte[];

        $l2 = specialinvoke $r0.<org.apache.harmony.security.provider.cert.Cache: long getSuffHash(byte[])>($r1);

        $l1 = $l1 | $l2;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i3 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r2, $l1);

        $i3 = $i3 * -1;

        $i3 = $i3 - 1;

        $i0 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        if $i3 != $i0 goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $l2 = $r2[$i3];

        $l2 = $l2 & -65536L;

        $b4 = $l2 cmp $l1;

        if $b4 != 0 goto label3;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $l2 = $r2[$i3];

        $l2 = $l2 & 65535L;

        $i0 = (int) $l2;

        $i0 = $i0 - 1;

        $r4 = $r0.<org.apache.harmony.security.provider.cert.Cache: byte[][] encodings>;

        $r5 = $r4[$i0];

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r1, $r5);

        if $z0 == 0 goto label2;

        $r6 = $r0.<org.apache.harmony.security.provider.cert.Cache: java.lang.Object[] cache>;

        $r3 = $r6[$i0];

        return $r3;

     label2:
        $i3 = $i3 + 1;

        $i0 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        if $i3 != $i0 goto label1;

        return null;

     label3:
        return null;
    }

    public long getHash(byte[])
    {
        org.apache.harmony.security.provider.cert.Cache $r0;
        byte[] $r1;
        long $l0, $l5;
        int $i1, $i2;
        byte $b3;
        short $s4;

        $r0 := @this: org.apache.harmony.security.provider.cert.Cache;

        $r1 := @parameter0: byte[];

        $l0 = 0L;

        $i1 = 1;

     label1:
        $i2 = $r0.<org.apache.harmony.security.provider.cert.Cache: int prefix_size>;

        if $i1 >= $i2 goto label2;

        $b3 = $r1[$i1];

        $s4 = $b3 & 255;

        $l5 = (long) $s4;

        $l0 = $l0 + $l5;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $l0 = $l0 << 32;

        return $l0;
    }

    public void put(long, byte[], java.lang.Object)
    {
        org.apache.harmony.security.provider.cert.Cache $r0;
        byte[] $r1;
        java.lang.Object $r2;
        int $i0, $i3, $i5, $i6, $i7;
        long $l1, $l2, $l4;
        boolean $z0;
        long[] $r3, $r9;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        byte[][] $r7;
        java.lang.Object[] $r8;

        $r0 := @this: org.apache.harmony.security.provider.cert.Cache;

        $l2 := @parameter0: long;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: java.lang.Object;

        $i0 = $r0.<org.apache.harmony.security.provider.cert.Cache: int last_cached>;

        $i3 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        if $i0 != $i3 goto label1;

        $r0.<org.apache.harmony.security.provider.cert.Cache: int last_cached> = 0;

        $r0.<org.apache.harmony.security.provider.cert.Cache: boolean cache_is_full> = 1;

     label1:
        $i0 = $r0.<org.apache.harmony.security.provider.cert.Cache: int last_cached>;

        $i3 = $i0 + 1;

        $r0.<org.apache.harmony.security.provider.cert.Cache: int last_cached> = $i3;

        $l1 = specialinvoke $r0.<org.apache.harmony.security.provider.cert.Cache: long getSuffHash(byte[])>($r1);

        $l2 = $l2 | $l1;

        $z0 = $r0.<org.apache.harmony.security.provider.cert.Cache: boolean cache_is_full>;

        if $z0 == 0 goto label7;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes>;

        $l1 = $r3[$i0];

        $i3 = $i0 + 1;

        $l4 = (long) $i3;

        $l1 = $l1 | $l4;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i5 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r3, $l1);

        $i3 = $i5;

        if $i5 >= 0 goto label2;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING! ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $i3 = $i5 + 1;

        $i3 = neg $i3;

     label2:
        $i5 = $i0 + 1;

        $l1 = (long) $i5;

        $l1 = $l2 | $l1;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i5 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r3, $l1);

        if $i5 < 0 goto label4;

        if $i3 == $i5 goto label3;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("WARNING: ");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">> idx: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new_idx: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label3:
        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes>;

        $r3[$i0] = $l2;

        $r7 = $r0.<org.apache.harmony.security.provider.cert.Cache: byte[][] encodings>;

        $r7[$i0] = $r1;

        $r8 = $r0.<org.apache.harmony.security.provider.cert.Cache: java.lang.Object[] cache>;

        $r8[$i0] = $r2;

        return;

     label4:
        $i5 = $i5 + 1;

        $i5 = neg $i5;

        if $i5 <= $i3 goto label5;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i6 = $i3 + 1;

        $r9 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i7 = $i5 - $i3;

        $i7 = $i7 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, $r9, $i3, $i7);

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i3 = $i5 - 1;

        $r3[$i3] = $l1;

        goto label3;

     label5:
        if $i3 <= $i5 goto label6;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $r9 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i6 = $i5 + 1;

        $i3 = $i3 - $i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, $r9, $i6, $i3);

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $r3[$i5] = $l1;

        goto label3;

     label6:
        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $r3[$i5] = $l1;

        goto label3;

     label7:
        $i3 = $i0 + 1;

        $l1 = (long) $i3;

        $l1 = $l2 | $l1;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i3 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>($r3, $l1);

        $i5 = $i3;

        if $i3 >= 0 goto label8;

        $i3 = $i3 + 1;

        $i5 = neg $i3;

     label8:
        $i3 = $i5 - 1;

        $i5 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        $i5 = $i5 - $i0;

        $i5 = $i5 - 1;

        if $i3 == $i5 goto label9;

        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i5 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        $i5 = $i5 - $i0;

        $r9 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $i6 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        $i6 = $i6 - $i0;

        $i6 = $i6 - 1;

        $i7 = $r0.<org.apache.harmony.security.provider.cert.Cache: int cache_size>;

        $i7 = $i7 - $i0;

        $i7 = $i3 - $i7;

        $i7 = $i7 + 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i5, $r9, $i6, $i7);

     label9:
        $r3 = $r0.<org.apache.harmony.security.provider.cert.Cache: long[] hashes_idx>;

        $r3[$i3] = $l1;

        goto label3;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.security.provider.cert.Cache: long PREFIX_HASH_MASK> = -4294967296L;

        <org.apache.harmony.security.provider.cert.Cache: int INDEX_MASK> = 65535;

        <org.apache.harmony.security.provider.cert.Cache: long HASH_MASK> = -65536L;

        return;
    }
}
