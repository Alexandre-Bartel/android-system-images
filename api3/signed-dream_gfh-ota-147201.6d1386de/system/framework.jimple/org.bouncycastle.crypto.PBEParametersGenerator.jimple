public abstract class org.bouncycastle.crypto.PBEParametersGenerator extends java.lang.Object
{
    protected int iterationCount;
    protected byte[] password;
    protected byte[] salt;

    protected void <init>()
    {
        org.bouncycastle.crypto.PBEParametersGenerator $r0;

        $r0 := @this: org.bouncycastle.crypto.PBEParametersGenerator;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] PKCS12PasswordToBytes(char[])
    {
        char[] $r0;
        byte[] $r1;
        int $i0, $i1;
        char $c2;
        byte $b3;

        $r0 := @parameter0: char[];

        if $r0 == null goto label3;

        $i0 = lengthof $r0;

        if $i0 <= 0 goto label3;

        $i0 = lengthof $r0;

        $i0 = $i0 + 1;

        $i0 = $i0 * 2;

        $r1 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 == $i1 goto label2;

        $i1 = $i0 * 2;

        $c2 = $r0[$i0];

        $c2 = $c2 >>> 8;

        $b3 = (byte) $c2;

        $r1[$i1] = $b3;

        $i1 = $i0 * 2;

        $i1 = $i1 + 1;

        $c2 = $r0[$i0];

        $b3 = (byte) $c2;

        $r1[$i1] = $b3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;

     label3:
        $r1 = newarray (byte)[0];

        return $r1;
    }

    public static byte[] PKCS5PasswordToBytes(char[])
    {
        char[] $r0;
        byte[] $r1;
        int $i0, $i1;
        char $c2;
        byte $b3;

        $r0 := @parameter0: char[];

        $i0 = lengthof $r0;

        $r1 = newarray (byte)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label2;

        $c2 = $r0[$i0];

        $b3 = (byte) $c2;

        $r1[$i0] = $b3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public abstract org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int);

    public abstract org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int);

    public abstract org.bouncycastle.crypto.CipherParameters generateDerivedParameters(int, int);

    public int getIterationCount()
    {
        org.bouncycastle.crypto.PBEParametersGenerator $r0;
        int i0;

        $r0 := @this: org.bouncycastle.crypto.PBEParametersGenerator;

        i0 = $r0.<org.bouncycastle.crypto.PBEParametersGenerator: int iterationCount>;

        return i0;
    }

    public byte[] getPassword()
    {
        org.bouncycastle.crypto.PBEParametersGenerator $r0;
        byte[] r1;

        $r0 := @this: org.bouncycastle.crypto.PBEParametersGenerator;

        r1 = $r0.<org.bouncycastle.crypto.PBEParametersGenerator: byte[] password>;

        return r1;
    }

    public byte[] getSalt()
    {
        org.bouncycastle.crypto.PBEParametersGenerator $r0;
        byte[] r1;

        $r0 := @this: org.bouncycastle.crypto.PBEParametersGenerator;

        r1 = $r0.<org.bouncycastle.crypto.PBEParametersGenerator: byte[] salt>;

        return r1;
    }

    public void init(byte[], byte[], int)
    {
        org.bouncycastle.crypto.PBEParametersGenerator $r0;
        byte[] $r1, $r2;
        int $i0;

        $r0 := @this: org.bouncycastle.crypto.PBEParametersGenerator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $r0.<org.bouncycastle.crypto.PBEParametersGenerator: byte[] password> = $r1;

        $r0.<org.bouncycastle.crypto.PBEParametersGenerator: byte[] salt> = $r2;

        $r0.<org.bouncycastle.crypto.PBEParametersGenerator: int iterationCount> = $i0;

        return;
    }
}
