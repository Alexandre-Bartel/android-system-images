public interface  org.apache.harmony.luni.platform.INetworkSystem extends java.lang.Object
{
    public static final int SOCKET_CONNECT_STEP_CHECK;
    public static final int SOCKET_CONNECT_STEP_START;

    public abstract void accept(java.io.FileDescriptor, java.net.SocketImpl, java.io.FileDescriptor, int) throws java.io.IOException;

    public abstract int availableStream(java.io.FileDescriptor) throws java.net.SocketException;

    public abstract void bind(java.io.FileDescriptor, int, java.net.InetAddress) throws java.net.SocketException;

    public abstract boolean bind2(java.io.FileDescriptor, int, boolean, java.net.InetAddress) throws java.net.SocketException;

    public abstract int connect(java.io.FileDescriptor, int, java.net.InetAddress, int) throws java.io.IOException;

    public abstract void connectDatagram(java.io.FileDescriptor, int, int, java.net.InetAddress) throws java.net.SocketException;

    public abstract void connectStreamWithTimeoutSocket(java.io.FileDescriptor, int, int, int, java.net.InetAddress) throws java.io.IOException;

    public abstract int connectWithTimeout(java.io.FileDescriptor, int, int, java.net.InetAddress, int, int, byte[]) throws java.io.IOException;

    public abstract void createDatagramSocket(java.io.FileDescriptor, boolean) throws java.net.SocketException;

    public abstract void createMulticastSocket(java.io.FileDescriptor, boolean) throws java.net.SocketException;

    public abstract void createServerStreamSocket(java.io.FileDescriptor, boolean) throws java.net.SocketException;

    public abstract void createSocket(java.io.FileDescriptor, boolean) throws java.io.IOException;

    public abstract void disconnectDatagram(java.io.FileDescriptor) throws java.net.SocketException;

    public abstract java.net.InetAddress getHostByAddr(byte[]) throws java.net.UnknownHostException;

    public abstract java.net.InetAddress getHostByName(java.lang.String, boolean) throws java.net.UnknownHostException;

    public abstract int getSocketFlags();

    public abstract java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor, boolean);

    public abstract int getSocketLocalPort(java.io.FileDescriptor, boolean);

    public abstract java.lang.Object getSocketOption(java.io.FileDescriptor, int) throws java.net.SocketException;

    public abstract java.nio.channels.Channel inheritedChannel();

    public abstract void listenStreamSocket(java.io.FileDescriptor, int) throws java.net.SocketException;

    public abstract void oneTimeInitialization(boolean);

    public abstract int peekDatagram(java.io.FileDescriptor, java.net.InetAddress, int) throws java.io.IOException;

    public abstract int read(java.io.FileDescriptor, byte[], int, int, int) throws java.io.IOException;

    public abstract int readDirect(java.io.FileDescriptor, int, int, int, int) throws java.io.IOException;

    public abstract int receiveDatagram(java.io.FileDescriptor, java.net.DatagramPacket, byte[], int, int, int, boolean) throws java.io.IOException;

    public abstract int receiveDatagramDirect(java.io.FileDescriptor, java.net.DatagramPacket, int, int, int, int, boolean) throws java.io.IOException;

    public abstract int receiveStream(java.io.FileDescriptor, byte[], int, int, int) throws java.io.IOException;

    public abstract int recvConnectedDatagram(java.io.FileDescriptor, java.net.DatagramPacket, byte[], int, int, int, boolean) throws java.io.IOException;

    public abstract int recvConnectedDatagramDirect(java.io.FileDescriptor, java.net.DatagramPacket, int, int, int, int, boolean) throws java.io.IOException;

    public abstract int[] select(java.io.FileDescriptor[], java.io.FileDescriptor[], long) throws java.net.SocketException;

    public abstract int sendConnectedDatagram(java.io.FileDescriptor, byte[], int, int, boolean) throws java.io.IOException;

    public abstract int sendConnectedDatagramDirect(java.io.FileDescriptor, int, int, int, boolean) throws java.io.IOException;

    public abstract int sendDatagram(java.io.FileDescriptor, byte[], int, int, int, boolean, int, java.net.InetAddress) throws java.io.IOException;

    public abstract int sendDatagram2(java.io.FileDescriptor, byte[], int, int, int, java.net.InetAddress) throws java.io.IOException;

    public abstract int sendDatagramDirect(java.io.FileDescriptor, int, int, int, int, boolean, int, java.net.InetAddress) throws java.io.IOException;

    public abstract int sendStream(java.io.FileDescriptor, byte[], int, int) throws java.io.IOException;

    public abstract void sendUrgentData(java.io.FileDescriptor, byte);

    public abstract void setInetAddress(java.net.InetAddress, byte[]);

    public abstract void setNonBlocking(java.io.FileDescriptor, boolean) throws java.io.IOException;

    public abstract void setSocketOption(java.io.FileDescriptor, int, java.lang.Object) throws java.net.SocketException;

    public abstract void shutdownInput(java.io.FileDescriptor) throws java.io.IOException;

    public abstract void shutdownOutput(java.io.FileDescriptor) throws java.io.IOException;

    public abstract void socketClose(java.io.FileDescriptor) throws java.io.IOException;

    public abstract boolean supportsUrgentData(java.io.FileDescriptor);

    public abstract int write(java.io.FileDescriptor, byte[], int, int) throws java.io.IOException;

    public abstract int writeDirect(java.io.FileDescriptor, int, int, int) throws java.io.IOException;

    public static void <clinit>()
    {
        <org.apache.harmony.luni.platform.INetworkSystem: int SOCKET_CONNECT_STEP_CHECK> = 1;

        return;
    }
}
