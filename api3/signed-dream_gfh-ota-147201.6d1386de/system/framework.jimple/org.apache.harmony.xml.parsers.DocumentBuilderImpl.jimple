class org.apache.harmony.xml.parsers.DocumentBuilderImpl extends javax.xml.parsers.DocumentBuilder
{
    private static org.w3c.dom.DOMImplementation dom;
    private org.xml.sax.EntityResolver entityResolver;
    private org.xml.sax.ErrorHandler errorHandler;
    private boolean ignoreComments;
    private boolean ignoreElementContentWhitespace;
    private boolean namespaceAware;

    static void <clinit>()
    {
        org.apache.harmony.xml.dom.DOMImplementationImpl $r0;

        $r0 = staticinvoke <org.apache.harmony.xml.dom.DOMImplementationImpl: org.apache.harmony.xml.dom.DOMImplementationImpl getInstance()>();

        <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation dom> = $r0;

        return;
    }

    void <init>()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        specialinvoke $r0.<javax.xml.parsers.DocumentBuilder: void <init>()>();

        return;
    }

    private void parse(org.xmlpull.v1.XmlPullParser, org.w3c.dom.Document, org.w3c.dom.Node, int) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        org.xmlpull.v1.XmlPullParser $r1;
        org.w3c.dom.Document $r2;
        org.w3c.dom.Node $r3;
        int $i0, $i1, $i2;
        java.util.StringTokenizer $r4;
        java.lang.String $r5, $r6, $r8, $r9, $r10, $r19, $r20, $r21;
        org.w3c.dom.ProcessingInstruction $r7;
        boolean $z0;
        org.w3c.dom.DOMImplementation $r11;
        org.w3c.dom.DocumentType $r12;
        org.w3c.dom.Comment $r13;
        org.w3c.dom.Text $r14;
        org.w3c.dom.CDATASection $r15;
        org.xml.sax.EntityResolver $r16;
        org.w3c.dom.EntityReference $r17;
        org.w3c.dom.Element $r18;
        org.w3c.dom.Attr $r22;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r1 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r2 := @parameter1: org.w3c.dom.Document;

        $r3 := @parameter2: org.w3c.dom.Node;

        $i0 := @parameter3: int;

        $i1 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

     label01:
        if $i1 == $i0 goto label28;

        if $i1 == 1 goto label29;

        if $i1 != 8 goto label07;

        $r5 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(32);

        if $i1 == -1 goto label05;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label02:
        if $i1 == -1 goto label06;

        $i1 = $i1 + 1;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i1);

     label03:
        $r7 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r6, $r5);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r7);

     label04:
        $i1 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

        goto label01;

     label05:
        $r6 = $r5;

        goto label02;

     label06:
        $r5 = "";

        goto label03;

     label07:
        if $i1 != 10 goto label13;

        $r4 = new java.util.StringTokenizer;

        $r6 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String)>($r6);

        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label04;

        $r6 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r5 = null;

        $r8 = null;

        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label08;

        $r9 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r10 = "SYSTEM";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label11;

        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label08;

        $r8 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label08:
        if $r5 == null goto label09;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 < 2 goto label09;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label09;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label09;

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i1 = $i1 - 1;

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

     label09:
        if $r8 == null goto label10;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 < 2 goto label10;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label10;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean endsWith(java.lang.String)>("\"");

        if $z0 == 0 goto label10;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        $i1 = $i1 - 1;

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(1, $i1);

     label10:
        $r11 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation dom>;

        $r12 = interfaceinvoke $r11.<org.w3c.dom.DOMImplementation: org.w3c.dom.DocumentType createDocumentType(java.lang.String,java.lang.String,java.lang.String)>($r6, $r5, $r8);

        interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

        goto label04;

     label11:
        $r10 = "PUBLIC";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label08;

        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label12;

        $r5 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

     label12:
        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label08;

        $r8 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        goto label08;

     label13:
        if $i1 != 9 goto label14;

        $z0 = $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments>;

        if $z0 != 0 goto label04;

        $r6 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $r13 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Comment createComment(java.lang.String)>($r6);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r13);

        goto label04;

     label14:
        if $i1 != 7 goto label15;

        $z0 = $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace>;

        if $z0 != 0 goto label04;

        $r6 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $r14 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r6);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r14);

        goto label04;

     label15:
        if $i1 != 4 goto label16;

        $r6 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $r14 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r6);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r14);

        goto label04;

     label16:
        if $i1 != 5 goto label17;

        $r6 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        $r15 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>($r6);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r15);

        goto label04;

     label17:
        if $i1 != 6 goto label20;

        $r6 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r16 = $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.EntityResolver entityResolver>;

        if $r16 == null goto label18;

     label18:
        $r5 = specialinvoke $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: java.lang.String resolveStandardEntity(java.lang.String)>($r6);

        if $r5 == null goto label19;

        $r14 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r5);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r14);

        goto label04;

     label19:
        $r17 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.EntityReference createEntityReference(java.lang.String)>($r6);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r17);

        goto label04;

     label20:
        if $i1 != 2 goto label04;

        $z0 = $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        if $z0 == 0 goto label25;

        $r8 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getNamespace()>();

        $r6 = $r8;

        $r5 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r9 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPrefix()>();

        $r10 = "";

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label21;

        $r6 = null;

     label21:
        $r18 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r6, $r5);

        interfaceinvoke $r18.<org.w3c.dom.Element: void setPrefix(java.lang.String)>($r9);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r18);

        $i1 = 0;

     label22:
        $i2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        if $i1 >= $i2 goto label24;

        $r8 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeNamespace(int)>($i1);

        $r9 = $r8;

        $r10 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributePrefix(int)>($i1);

        $r19 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>($i1);

        $r20 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>($i1);

        $r21 = "";

        $z0 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label23;

        $r9 = null;

     label23:
        $r22 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>($r9, $r19);

        interfaceinvoke $r22.<org.w3c.dom.Attr: void setPrefix(java.lang.String)>($r10);

        interfaceinvoke $r22.<org.w3c.dom.Attr: void setValue(java.lang.String)>($r20);

        interfaceinvoke $r18.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>($r22);

        $i1 = $i1 + 1;

        goto label22;

     label24:
        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

        specialinvoke $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.xmlpull.v1.XmlPullParser,org.w3c.dom.Document,org.w3c.dom.Node,int)>($r1, $r2, $r18, 3);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, $r6, $r5);

        goto label04;

     label25:
        $r6 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $r18 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>($r6);

        interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r18);

        $i1 = 0;

     label26:
        $i2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>();

        if $i1 >= $i2 goto label27;

        $r5 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeName(int)>($i1);

        $r8 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(int)>($i1);

        $r22 = interfaceinvoke $r2.<org.w3c.dom.Document: org.w3c.dom.Attr createAttribute(java.lang.String)>($r5);

        interfaceinvoke $r22.<org.w3c.dom.Attr: void setValue(java.lang.String)>($r8);

        interfaceinvoke $r18.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>($r22);

        $i1 = $i1 + 1;

        goto label26;

     label27:
        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

        specialinvoke $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.xmlpull.v1.XmlPullParser,org.w3c.dom.Document,org.w3c.dom.Node,int)>($r1, $r2, $r18, 3);

        interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(3, "", $r6);

        goto label04;

     label28:
        return;

     label29:
        return;
    }

    private java.lang.String resolveStandardEntity(java.lang.String)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = "lt";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return "<";

     label1:
        $r2 = "gt";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return ">";

     label2:
        $r2 = "amp";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        return "&";

     label3:
        $r2 = "apos";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

        return "\'";

     label4:
        $r2 = "quot";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label5;

        return "\"";

     label5:
        return null;
    }

    public org.w3c.dom.DOMImplementation getDOMImplementation()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        org.w3c.dom.DOMImplementation r1;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        r1 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation dom>;

        return r1;
    }

    public boolean isIgnoringComments()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 = $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments>;

        return z0;
    }

    public boolean isIgnoringElementContentWhitespace()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 = $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace>;

        return z0;
    }

    public boolean isNamespaceAware()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        z0 = $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        return z0;
    }

    public boolean isValidating()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        return 0;
    }

    public org.w3c.dom.Document newDocument()
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        org.w3c.dom.Document $r1;
        org.w3c.dom.DOMImplementation $r2;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r2 = <org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.DOMImplementation dom>;

        $r1 = interfaceinvoke $r2.<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>(null, null, null);

        return $r1;
    }

    public org.w3c.dom.Document parse(org.xml.sax.InputSource) throws org.xml.sax.SAXException, java.io.IOException
    {
        org.xml.sax.InputSource $r0;
        org.xml.sax.helpers.LocatorImpl $r1;
        org.xml.sax.SAXParseException $r2;
        org.kxml2.io.KXmlParser $r3;
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r4;
        java.lang.IllegalArgumentException $r5;
        org.w3c.dom.Document $r6;
        boolean $z0;
        java.io.InputStream $r7;
        java.lang.String $r8;
        int $i0;
        org.xmlpull.v1.XmlPullParserException $r9;
        java.lang.Throwable $r10;
        java.io.IOException $r11;
        java.io.Reader $r12;
        java.lang.RuntimeException $r13;
        org.xml.sax.ErrorHandler $r14;

        $r4 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r0 := @parameter0: org.xml.sax.InputSource;

        if $r0 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label01:
        $r6 = virtualinvoke $r4.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.w3c.dom.Document newDocument()>();

        $r3 = new org.kxml2.io.KXmlParser;

     label02:
        specialinvoke $r3.<org.kxml2.io.KXmlParser: void <init>()>();

        $z0 = $r4.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware>;

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void setFeature(java.lang.String,boolean)>("http://xmlpull.org/v1/doc/features.html#process-namespaces", $z0);

        $r7 = virtualinvoke $r0.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        if $r7 == null goto label06;

        $r7 = virtualinvoke $r0.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        $r8 = virtualinvoke $r0.<org.xml.sax.InputSource: java.lang.String getEncoding()>();

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>($r7, $r8);

     label03:
        $i0 = interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: int nextToken()>();

        if $i0 != 1 goto label09;

        $r2 = new org.xml.sax.SAXParseException;

        specialinvoke $r2.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>("Unexpected end of document", null);

     label04:
        throw $r2;

     label05:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $z0 = $r10 instanceof java.io.IOException;

        if $z0 == 0 goto label11;

        $r10 = virtualinvoke $r9.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $r11 = (java.io.IOException) $r10;

        throw $r11;

     label06:
        $r12 = virtualinvoke $r0.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        if $r12 == null goto label07;

        $r12 = virtualinvoke $r0.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>($r12);

        goto label03;

     label07:
        $r2 = new org.xml.sax.SAXParseException;

        specialinvoke $r2.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>("InputSource needs either stream or reader", null);

     label08:
        throw $r2;

     label09:
        specialinvoke $r4.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: void parse(org.xmlpull.v1.XmlPullParser,org.w3c.dom.Document,org.w3c.dom.Node,int)>($r3, $r6, $r6, 1);

        interfaceinvoke $r3.<org.xmlpull.v1.XmlPullParser: void require(int,java.lang.String,java.lang.String)>(1, null, null);

     label10:
        return $r6;

     label11:
        $r10 = virtualinvoke $r9.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $z0 = $r10 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label12;

        $r10 = virtualinvoke $r9.<org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()>();

        $r13 = (java.lang.RuntimeException) $r10;

        throw $r13;

     label12:
        $r1 = new org.xml.sax.helpers.LocatorImpl;

        specialinvoke $r1.<org.xml.sax.helpers.LocatorImpl: void <init>()>();

        $r8 = virtualinvoke $r0.<org.xml.sax.InputSource: java.lang.String getPublicId()>();

        virtualinvoke $r1.<org.xml.sax.helpers.LocatorImpl: void setPublicId(java.lang.String)>($r8);

        $r8 = virtualinvoke $r0.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        virtualinvoke $r1.<org.xml.sax.helpers.LocatorImpl: void setSystemId(java.lang.String)>($r8);

        $i0 = virtualinvoke $r9.<org.xmlpull.v1.XmlPullParserException: int getLineNumber()>();

        virtualinvoke $r1.<org.xml.sax.helpers.LocatorImpl: void setLineNumber(int)>($i0);

        $i0 = virtualinvoke $r9.<org.xmlpull.v1.XmlPullParserException: int getColumnNumber()>();

        virtualinvoke $r1.<org.xml.sax.helpers.LocatorImpl: void setColumnNumber(int)>($i0);

        $r2 = new org.xml.sax.SAXParseException;

        $r8 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r2.<org.xml.sax.SAXParseException: void <init>(java.lang.String,org.xml.sax.Locator)>($r8, $r1);

        $r14 = $r4.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler>;

        if $r14 == null goto label13;

        $r14 = $r4.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler>;

        interfaceinvoke $r14.<org.xml.sax.ErrorHandler: void error(org.xml.sax.SAXParseException)>($r2);

     label13:
        throw $r2;

        catch org.xmlpull.v1.XmlPullParserException from label02 to label04 with label05;
        catch org.xmlpull.v1.XmlPullParserException from label06 to label08 with label05;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label05;
    }

    public void setEntityResolver(org.xml.sax.EntityResolver)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        org.xml.sax.EntityResolver $r1;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r1 := @parameter0: org.xml.sax.EntityResolver;

        $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.EntityResolver entityResolver> = $r1;

        return;
    }

    public void setErrorHandler(org.xml.sax.ErrorHandler)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        org.xml.sax.ErrorHandler $r1;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $r1 := @parameter0: org.xml.sax.ErrorHandler;

        $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: org.xml.sax.ErrorHandler errorHandler> = $r1;

        return;
    }

    public void setIgnoreComments(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreComments> = $z0;

        return;
    }

    public void setIgnoreElementContentWhitespace(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean ignoreElementContentWhitespace> = $z0;

        return;
    }

    public void setNamespaceAware(boolean)
    {
        org.apache.harmony.xml.parsers.DocumentBuilderImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.parsers.DocumentBuilderImpl;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.xml.parsers.DocumentBuilderImpl: boolean namespaceAware> = $z0;

        return;
    }
}
