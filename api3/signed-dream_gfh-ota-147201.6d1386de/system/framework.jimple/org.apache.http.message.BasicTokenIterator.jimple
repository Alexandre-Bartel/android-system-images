public class org.apache.http.message.BasicTokenIterator extends java.lang.Object implements org.apache.http.TokenIterator
{
    public static final java.lang.String HTTP_SEPARATORS;
    protected java.lang.String currentHeader;
    protected java.lang.String currentToken;
    protected final org.apache.http.HeaderIterator headerIt;
    protected int searchPos;

    public void <init>(org.apache.http.HeaderIterator)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        org.apache.http.HeaderIterator $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 := @parameter0: org.apache.http.HeaderIterator;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header iterator must not be null.");

        throw $r2;

     label1:
        $r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt> = $r1;

        $i0 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: int findNext(int)>(-1);

        $r0.<org.apache.http.message.BasicTokenIterator: int searchPos> = $i0;

        return;
    }

    protected java.lang.String createToken(java.lang.String, int, int)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        java.lang.String $r1;
        int $i0, $i1;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r1;
    }

    protected int findNext(int) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator $r0;
        int $i0, $i1;
        org.apache.http.HeaderIterator $r1;
        boolean $z0;
        org.apache.http.Header $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label3;

        $r1 = $r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $z0 = interfaceinvoke $r1.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $r1 = $r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $r2 = interfaceinvoke $r1.<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>();

        $r3 = interfaceinvoke $r2.<org.apache.http.Header: java.lang.String getValue()>();

        $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = $r3;

        $i0 = 0;

     label2:
        $i0 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: int findTokenStart(int)>($i0);

        if $i0 >= 0 goto label4;

        $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken> = null;

        return -1;

     label3:
        $i0 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: int findTokenSeparator(int)>($i0);

        goto label2;

     label4:
        $i1 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: int findTokenEnd(int)>($i0);

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r3 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String createToken(java.lang.String,int,int)>($r3, $i0, $i1);

        $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken> = $r3;

        return $i1;
    }

    protected int findTokenEnd(int)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        char $c2;
        boolean $z0;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Token start position must not be negative: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 + 1;

     label2:
        if $i0 >= $i1 goto label3;

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i0);

        $z0 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>($c2);

        if $z0 == 0 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return $i0;

     label4:
        return $i0;
    }

    protected int findTokenSeparator(int)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0, $z1;
        char $c2;
        org.apache.http.ParseException $r4;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search position must not be negative: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label1:
        $z0 = 0;

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

     label2:
        if $z0 != 0 goto label6;

        if $i0 >= $i1 goto label7;

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i0);

        $z1 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>($c2);

        if $z1 == 0 goto label3;

        $z0 = 1;

        goto label2;

     label3:
        $z1 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>($c2);

        if $z1 == 0 goto label4;

        $i0 = $i0 + 1;

        goto label2;

     label4:
        $z0 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>($c2);

        if $z0 == 0 goto label5;

        $r4 = new org.apache.http.ParseException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tokens without separator (pos ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.ParseException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label5:
        $r4 = new org.apache.http.ParseException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character after token (pos ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.ParseException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label6:
        return $i0;

     label7:
        return $i0;
    }

    protected int findTokenStart(int)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0, $z1;
        char $c2;
        org.apache.http.ParseException $r4;
        org.apache.http.HeaderIterator $r5;
        org.apache.http.Header $r6;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label01;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Search position must not be negative: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label01:
        $z0 = 0;

     label02:
        if $z0 != 0 goto label09;

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        if $r3 == null goto label09;

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

     label03:
        if $z0 != 0 goto label07;

        if $i0 >= $i1 goto label07;

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i0);

        $z1 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenSeparator(char)>($c2);

        if $z1 != 0 goto label04;

        $z1 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: boolean isWhitespace(char)>($c2);

        if $z1 == 0 goto label05;

     label04:
        $i0 = $i0 + 1;

        goto label03;

     label05:
        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>($i0);

        $z0 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: boolean isTokenChar(char)>($c2);

        if $z0 == 0 goto label06;

        $z0 = 1;

        goto label03;

     label06:
        $r4 = new org.apache.http.ParseException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid character before token (pos ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r3 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.ParseException: void <init>(java.lang.String)>($r3);

        throw $r4;

     label07:
        if $z0 != 0 goto label02;

        $r5 = $r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $z1 = interfaceinvoke $r5.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z1 == 0 goto label08;

        $r5 = $r0.<org.apache.http.message.BasicTokenIterator: org.apache.http.HeaderIterator headerIt>;

        $r6 = interfaceinvoke $r5.<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>();

        $r3 = interfaceinvoke $r6.<org.apache.http.Header: java.lang.String getValue()>();

        $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = $r3;

        $i0 = 0;

        goto label02;

     label08:
        $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentHeader> = null;

        goto label02;

     label09:
        if $z0 == 0 goto label10;

        return $i0;

     label10:
        return -1;
    }

    public boolean hasNext()
    {
        org.apache.http.message.BasicTokenIterator $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isHttpSeparator(char)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        char $c0;
        int $i1;
        java.lang.String $r1;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $c0 := @parameter0: char;

        $r1 = " ,;=()<>@:\\\"/[]?{}\t";

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>($c0);

        if $i1 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isTokenChar(char)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        char $c0;
        boolean $z0;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>($c0);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: boolean isHttpSeparator(char)>($c0);

        if $z0 == 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    protected boolean isTokenSeparator(char)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        char $c0;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $c0 := @parameter0: char;

        if $c0 != 44 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isWhitespace(char)
    {
        org.apache.http.message.BasicTokenIterator $r0;
        char $c0;
        boolean $z0;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $c0 := @parameter0: char;

        if $c0 == 9 goto label1;

        $z0 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>($c0);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public final java.lang.Object next() throws java.util.NoSuchElementException, org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String nextToken()>();

        return $r1;
    }

    public java.lang.String nextToken() throws java.util.NoSuchElementException, org.apache.http.ParseException
    {
        org.apache.http.message.BasicTokenIterator $r0;
        int $i0;
        java.lang.String $r1;
        java.util.NoSuchElementException $r2;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        if $r1 != null goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Iteration already finished.");

        throw $r2;

     label1:
        $r1 = $r0.<org.apache.http.message.BasicTokenIterator: java.lang.String currentToken>;

        $i0 = $r0.<org.apache.http.message.BasicTokenIterator: int searchPos>;

        $i0 = virtualinvoke $r0.<org.apache.http.message.BasicTokenIterator: int findNext(int)>($i0);

        $r0.<org.apache.http.message.BasicTokenIterator: int searchPos> = $i0;

        return $r1;
    }

    public final void remove() throws java.lang.UnsupportedOperationException
    {
        org.apache.http.message.BasicTokenIterator $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: org.apache.http.message.BasicTokenIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Removing tokens is not supported.");

        throw $r1;
    }

    public static void <clinit>()
    {
        <org.apache.http.message.BasicTokenIterator: java.lang.String HTTP_SEPARATORS> = " ,;=()<>@:\\\"/[]?{}\t";

        return;
    }
}
