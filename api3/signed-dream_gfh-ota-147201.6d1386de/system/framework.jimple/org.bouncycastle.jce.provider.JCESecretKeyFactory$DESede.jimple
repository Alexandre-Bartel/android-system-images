public class org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede extends org.bouncycastle.jce.provider.JCESecretKeyFactory
{

    public void <init>()
    {
        org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede $r0;

        $r0 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede;

        specialinvoke $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: void <init>(java.lang.String,org.bouncycastle.asn1.DERObjectIdentifier)>("DESede", null);

        return;
    }

    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede $r0;
        java.security.spec.KeySpec $r1;
        boolean $z0;
        javax.crypto.spec.DESedeKeySpec $r2;
        javax.crypto.spec.SecretKeySpec $r3;
        byte[] $r4;
        javax.crypto.SecretKey $r5;

        $r0 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede;

        $r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = $r1 instanceof javax.crypto.spec.DESedeKeySpec;

        if $z0 == 0 goto label1;

        $r2 = (javax.crypto.spec.DESedeKeySpec) $r1;

        $r3 = new javax.crypto.spec.SecretKeySpec;

        $r4 = virtualinvoke $r2.<javax.crypto.spec.DESedeKeySpec: byte[] getKey()>();

        specialinvoke $r3.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, "DESede");

        return $r3;

     label1:
        $r5 = specialinvoke $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)>($r1);

        return $r5;
    }

    protected java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey, java.lang.Class) throws java.security.spec.InvalidKeySpecException
    {
        org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede $r0;
        javax.crypto.SecretKey $r1;
        java.lang.Class $r2, $r5;
        byte[] $r3, $r8;
        boolean $z0;
        java.security.spec.KeySpec $r6;
        java.lang.String $r7;
        int $i0;
        java.lang.Exception $r9;
        java.security.spec.InvalidKeySpecException r10;
        javax.crypto.spec.SecretKeySpec r11;
        javax.crypto.spec.DESedeKeySpec r12;

        $r0 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory$DESede;

        $r1 := @parameter0: javax.crypto.SecretKey;

        $r2 := @parameter1: java.lang.Class;

        if $r2 != null goto label01;

        r10 = new java.security.spec.InvalidKeySpecException;

        specialinvoke r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("keySpec parameter is null");

        throw r10;

     label01:
        if $r1 != null goto label02;

        r10 = new java.security.spec.InvalidKeySpecException;

        specialinvoke r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("key parameter is null");

        throw r10;

     label02:
        $r5 = class "javax/crypto/spec/SecretKeySpec";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label03;

        r11 = new javax.crypto.spec.SecretKeySpec;

        $r3 = interfaceinvoke $r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

        $r7 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: java.lang.String algName>;

        specialinvoke r11.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r3, $r7);

        return r11;

     label03:
        $r5 = class "javax/crypto/spec/DESedeKeySpec";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label12;

        $r8 = interfaceinvoke $r1.<javax.crypto.SecretKey: byte[] getEncoded()>();

     label04:
        $i0 = lengthof $r8;

        if $i0 != 16 goto label09;

        $r3 = newarray (byte)[24];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r3, 0, 16);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, $r3, 16, 8);

     label05:
        r12 = new javax.crypto.spec.DESedeKeySpec;

     label06:
        $r6 = r12;

        specialinvoke r12.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>($r3);

     label07:
        return $r6;

     label08:
        $r9 := @caughtexception;

        r10 = new java.security.spec.InvalidKeySpecException;

        $r7 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r7);

        throw r10;

     label09:
        r12 = new javax.crypto.spec.DESedeKeySpec;

     label10:
        specialinvoke r12.<javax.crypto.spec.DESedeKeySpec: void <init>(byte[])>($r8);

     label11:
        return r12;

     label12:
        r10 = new java.security.spec.InvalidKeySpecException;

        specialinvoke r10.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw r10;

        catch java.lang.Exception from label04 to label05 with label08;
        catch java.lang.Exception from label06 to label07 with label08;
        catch java.lang.Exception from label10 to label11 with label08;
    }
}
