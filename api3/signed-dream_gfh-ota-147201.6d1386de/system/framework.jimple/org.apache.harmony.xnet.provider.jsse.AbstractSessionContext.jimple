abstract class org.apache.harmony.xnet.provider.jsse.AbstractSessionContext extends java.lang.Object implements javax.net.ssl.SSLSessionContext
{
    static final int OPEN_SSL;
    volatile int maximumSize;
    final org.apache.harmony.xnet.provider.jsse.SSLParameters parameters;
    volatile int timeout;

    void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters, int, int)
    {
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext $r0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AbstractSessionContext;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: org.apache.harmony.xnet.provider.jsse.SSLParameters parameters> = $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int maximumSize> = $i0;

        $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int timeout> = $i1;

        return;
    }

    static void log(java.lang.Throwable)
    {
        java.lang.Throwable $r0;
        java.util.logging.Logger $r1;
        java.util.logging.Level $r2;

        $r0 := @parameter0: java.lang.Throwable;

        $r1 = <java.util.logging.Logger: java.util.logging.Logger global>;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, "Error converting session.", $r0);

        return;
    }

    public final java.util.Enumeration getIds()
    {
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext $r0;
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$1 $r1;
        java.util.Iterator $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AbstractSessionContext;

        $r2 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: java.util.Iterator sessionIterator()>();

        $r1 = new org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$1;

        specialinvoke $r1.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$1: void <init>(org.apache.harmony.xnet.provider.jsse.AbstractSessionContext,java.util.Iterator)>($r0, $r2);

        return $r1;
    }

    public final int getSessionCacheSize()
    {
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AbstractSessionContext;

        i0 = $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int maximumSize>;

        return i0;
    }

    public final int getSessionTimeout()
    {
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AbstractSessionContext;

        i0 = $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int timeout>;

        return i0;
    }

    abstract java.util.Iterator sessionIterator();

    public final void setSessionCacheSize(int) throws java.lang.IllegalArgumentException
    {
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext $r0;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AbstractSessionContext;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("size < 0");

        throw $r1;

     label1:
        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int maximumSize>;

        $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int maximumSize> = $i0;

        if $i0 >= $i1 goto label2;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void trimToSize()>();

        return;

     label2:
        return;
    }

    byte[] toBytes(javax.net.ssl.SSLSession)
    {
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext $r0;
        javax.net.ssl.SSLSession $r1;
        java.io.ByteArrayOutputStream $r2;
        javax.security.cert.X509Certificate $r3;
        java.io.DataOutputStream $r4;
        int $i0, $i1, $i2;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r5;
        byte[] $r6;
        javax.security.cert.X509Certificate[] $r7;
        java.io.IOException $r8;
        javax.security.cert.CertificateEncodingException $r9;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AbstractSessionContext;

        $r1 := @parameter0: javax.net.ssl.SSLSession;

        $z0 = $r1 instanceof org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r5 = (org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl) $r1;

        $r2 = new java.io.ByteArrayOutputStream;

     label2:
        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r4 = new java.io.DataOutputStream;

        specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r2);

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>(1);

        $r6 = virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] getEncoded()>();

        $i0 = lengthof $r6;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke $r4.<java.io.FilterOutputStream: void write(byte[])>($r6);

        $r7 = interfaceinvoke $r1.<javax.net.ssl.SSLSession: javax.security.cert.X509Certificate[] getPeerCertificateChain()>();

        $i0 = lengthof $r7;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>($i0);

     label3:
        $i0 = lengthof $r7;

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label6;

        $r3 = $r7[$i1];

        $r6 = virtualinvoke $r3.<javax.security.cert.Certificate: byte[] getEncoded()>();

        $i2 = lengthof $r6;

        virtualinvoke $r4.<java.io.DataOutputStream: void writeInt(int)>($i2);

        virtualinvoke $r4.<java.io.FilterOutputStream: void write(byte[])>($r6);

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        $r6 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label7:
        return $r6;

     label8:
        $r8 := @caughtexception;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void log(java.lang.Throwable)>($r8);

        return null;

     label9:
        $r9 := @caughtexception;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void log(java.lang.Throwable)>($r9);

        return null;

        catch java.io.IOException from label2 to label3 with label8;
        catch java.io.IOException from label4 to label5 with label8;
        catch java.io.IOException from label6 to label7 with label8;
        catch javax.security.cert.CertificateEncodingException from label2 to label3 with label9;
        catch javax.security.cert.CertificateEncodingException from label4 to label5 with label9;
        catch javax.security.cert.CertificateEncodingException from label6 to label7 with label9;
    }

    javax.net.ssl.SSLSession toSession(byte[], java.lang.String, int)
    {
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext $r0;
        byte[] $r1, $r9;
        java.lang.String $r2;
        int $i0, $i1, $i2, $i3;
        javax.security.cert.X509Certificate[] $r3;
        java.io.ByteArrayInputStream $r4;
        java.io.DataInputStream $r5;
        java.lang.AssertionError $r6;
        java.lang.StringBuilder $r7;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r8;
        javax.security.cert.X509Certificate $r10;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r11;
        java.io.IOException $r12;
        javax.security.cert.CertificateException $r13;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AbstractSessionContext;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r1);

        $r5 = new java.io.DataInputStream;

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r4);

     label01:
        $i1 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        if $i1 == 1 goto label05;

     label02:
        $r6 = new java.lang.AssertionError;

     label03:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected type ID: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r2);

        staticinvoke <org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void log(java.lang.Throwable)>($r6);

     label04:
        return null;

     label05:
        $i1 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        $r9 = newarray (byte)[$i1];

        virtualinvoke $r5.<java.io.DataInputStream: void readFully(byte[])>($r9);

        $i1 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

     label06:
        $r3 = newarray (javax.security.cert.X509Certificate)[$i1];

        $i2 = 0;

     label07:
        if $i2 >= $i1 goto label09;

        $i3 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        $r1 = newarray (byte)[$i3];

        virtualinvoke $r5.<java.io.DataInputStream: void readFully(byte[])>($r1);

        $r10 = staticinvoke <javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])>($r1);

     label08:
        $r3[$i2] = $r10;

        $i2 = $i2 + 1;

        goto label07;

     label09:
        $r8 = new org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

     label10:
        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: org.apache.harmony.xnet.provider.jsse.SSLParameters parameters>;

        specialinvoke $r8.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: void <init>(byte[],org.apache.harmony.xnet.provider.jsse.SSLParameters,java.lang.String,int,javax.security.cert.X509Certificate[],javax.net.ssl.SSLSessionContext)>($r9, $r11, $r2, $i0, $r3, $r0);

     label11:
        return $r8;

     label12:
        $r12 := @caughtexception;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void log(java.lang.Throwable)>($r12);

        return null;

     label13:
        $r13 := @caughtexception;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void log(java.lang.Throwable)>($r13);

        return null;

        catch java.io.IOException from label01 to label02 with label12;
        catch java.io.IOException from label03 to label04 with label12;
        catch java.io.IOException from label05 to label06 with label12;
        catch java.io.IOException from label07 to label08 with label12;
        catch java.io.IOException from label10 to label11 with label12;
        catch javax.security.cert.CertificateException from label01 to label02 with label13;
        catch javax.security.cert.CertificateException from label03 to label04 with label13;
        catch javax.security.cert.CertificateException from label05 to label06 with label13;
        catch javax.security.cert.CertificateException from label07 to label08 with label13;
        catch javax.security.cert.CertificateException from label10 to label11 with label13;
    }

    abstract void trimToSize();

    public static void <clinit>()
    {
        <org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int OPEN_SSL> = 1;

        return;
    }
}
