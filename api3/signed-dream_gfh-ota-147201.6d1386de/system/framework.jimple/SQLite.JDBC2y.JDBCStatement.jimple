public class SQLite.JDBC2y.JDBCStatement extends java.lang.Object implements java.sql.Statement
{
    private java.util.ArrayList batch;
    protected SQLite.JDBC2y.JDBCConnection conn;
    protected SQLite.JDBC2y.JDBCResultSet rs;
    protected int updcnt;

    public void <init>(SQLite.JDBC2y.JDBCConnection)
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        SQLite.JDBC2y.JDBCConnection $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: SQLite.JDBC2y.JDBCConnection;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn> = $r1;

        $r0.<SQLite.JDBC2y.JDBCStatement: int updcnt> = 0;

        $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs> = null;

        $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch> = null;

        return;
    }

    public void addBatch(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        java.util.ArrayList $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch>;

        if $r2 != null goto label1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(1);

        $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch> = $r2;

     label1:
        $r2 = $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void cancel() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        SQLite.JDBC2y.JDBCConnection $r1;
        SQLite.JDBC2y.DatabaseX $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        if $r1 == null goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r2 = $r1.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        if $r2 != null goto label2;

     label1:
        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("stale connection");

        throw $r3;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r2 = $r1.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        virtualinvoke $r2.<SQLite.Database: void interrupt()>();

        return;
    }

    public void clearBatch() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.util.ArrayList $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch>;

        if $r1 == null goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch> = null;

        return;

     label1:
        return;
    }

    public void clearWarnings() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return;
    }

    public void close() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        virtualinvoke $r0.<SQLite.JDBC2y.JDBCStatement: void clearBatch()>();

        $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn> = null;

        return;
    }

    public boolean execute(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        java.sql.ResultSet $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean execute(java.lang.String, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 == 2 goto label1;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCStatement: boolean execute(java.lang.String)>($r1);

        return $z0;
    }

    public boolean execute(java.lang.String, int[]) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        int[] $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: int[];

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public boolean execute(java.lang.String, java.lang.String[]) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public int[] executeBatch() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        int[] $r1;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.sql.SQLException $r5;
        java.sql.BatchUpdateException $r6;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r2 = $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch>;

        if $r2 != null goto label01;

        $r1 = newarray (int)[0];

        return $r1;

     label01:
        $r2 = $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $r1 = newarray (int)[$i0];

        $i0 = 0;

     label02:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label03;

        $r1[$i0] = -3;

        $i0 = $i0 + 1;

        goto label02;

     label03:
        $i0 = 0;

        $i1 = 0;

     label04:
        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label09;

        $r2 = $r0.<SQLite.JDBC2y.JDBCStatement: java.util.ArrayList batch>;

     label05:
        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (java.lang.String) $r3;

        virtualinvoke $r0.<SQLite.JDBC2y.JDBCStatement: boolean execute(java.lang.String)>($r4);

     label06:
        $i2 = $r0.<SQLite.JDBC2y.JDBCStatement: int updcnt>;

        $r1[$i1] = $i2;

     label07:
        $i1 = $i1 + 1;

        goto label04;

     label08:
        $r5 := @caughtexception;

        $i0 = $i0 + 1;

        goto label07;

     label09:
        if $i0 <= 0 goto label10;

        $r6 = new java.sql.BatchUpdateException;

        specialinvoke $r6.<java.sql.BatchUpdateException: void <init>(java.lang.String,int[])>("batch failed", $r1);

        throw $r6;

     label10:
        return $r1;

        catch java.sql.SQLException from label05 to label06 with label08;
    }

    public java.sql.ResultSet executeQuery(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        java.sql.ResultSet $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String,java.lang.String[],boolean)>($r1, null, 0);

        return $r2;
    }

    java.sql.ResultSet executeQuery(java.lang.String, java.lang.String[], boolean) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        boolean $z0, $z1, $z2;
        SQLite.TableResult $r3;
        SQLite.JDBC2y.JDBCResultSet $r4;
        SQLite.JDBC2y.JDBCConnection $r5, $r9;
        SQLite.JDBC2y.DatabaseX $r6;
        java.sql.SQLException $r7;
        int $i0, $i2;
        long $l1;
        SQLite.Exception $r8, $r13;
        java.lang.Throwable $r10;
        java.lang.Exception $r11;
        SQLite.JDBC2y.TableResultX $r12;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $z0 := @parameter2: boolean;

        $r3 = null;

        $r4 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs>;

        if $r4 == null goto label01;

        $r4 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs>;

        virtualinvoke $r4.<SQLite.JDBC2y.JDBCResultSet: void close()>();

        $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs> = null;

     label01:
        $r0.<SQLite.JDBC2y.JDBCStatement: int updcnt> = -1;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        if $r5 == null goto label02;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        if $r6 != null goto label03;

     label02:
        $r7 = new java.sql.SQLException;

        specialinvoke $r7.<java.sql.SQLException: void <init>(java.lang.String)>("stale connection");

        throw $r7;

     label03:
        $i0 = 0;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $z1 = $r5.<SQLite.JDBC2y.JDBCConnection: boolean autocommit>;

        if $z1 != 0 goto label12;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $z1 = $r5.<SQLite.JDBC2y.JDBCConnection: boolean intrans>;

        if $z1 != 0 goto label12;

        $z1 = 1;

     label04:
        if $z1 == 0 goto label07;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

     label05:
        virtualinvoke $r6.<SQLite.JDBC2y.DatabaseX: void exec(java.lang.String,SQLite.Callback)>("BEGIN TRANSACTION", null);

     label06:
        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r5.<SQLite.JDBC2y.JDBCConnection: boolean intrans> = 1;

     label07:
        if $r2 != null goto label16;

        if $z0 == 0 goto label13;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

     label08:
        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        virtualinvoke $r6.<SQLite.JDBC2y.DatabaseX: void exec(java.lang.String,SQLite.Callback)>($r1, null);

     label09:
        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

     label10:
        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        $l1 = virtualinvoke $r6.<SQLite.Database: long changes()>();

     label11:
        $i2 = (int) $l1;

        $r0.<SQLite.JDBC2y.JDBCStatement: int updcnt> = $i2;

        if $z0 != 0 goto label34;

        if $r3 != null goto label34;

        $r7 = new java.sql.SQLException;

        specialinvoke $r7.<java.sql.SQLException: void <init>(java.lang.String)>("no result set produced");

        throw $r7;

     label12:
        $z1 = 0;

        goto label04;

     label13:
        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

     label14:
        $r3 = virtualinvoke $r6.<SQLite.Database: SQLite.TableResult get_table(java.lang.String)>($r1);

     label15:
        goto label09;

     label16:
        if $z0 == 0 goto label30;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

     label17:
        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        virtualinvoke $r6.<SQLite.JDBC2y.DatabaseX: void exec(java.lang.String,SQLite.Callback,java.lang.String[])>($r1, null, $r2);

     label18:
        goto label09;

     label19:
        $r8 := @caughtexception;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        $z2 = virtualinvoke $r6.<SQLite.Database: boolean is3()>();

        if $z2 == 0 goto label33;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        $i2 = virtualinvoke $r6.<SQLite.Database: int last_error()>();

        if $i2 != 5 goto label33;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r9 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r6 = $r9.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

        $i0 = $i0 + 1;

        $z2 = virtualinvoke $r5.<SQLite.JDBC2y.JDBCConnection: boolean busy3(SQLite.JDBC2y.DatabaseX,int)>($r6, $i0);

        if $z2 == 0 goto label33;

        if $z1 == 0 goto label22;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $z2 = $r5.<SQLite.JDBC2y.JDBCConnection: boolean intrans>;

        if $z2 == 0 goto label22;

        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

     label20:
        virtualinvoke $r6.<SQLite.JDBC2y.DatabaseX: void exec(java.lang.String,SQLite.Callback)>("ROLLBACK", null);

     label21:
        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r5.<SQLite.JDBC2y.JDBCConnection: boolean intrans> = 0;

     label22:
        $i2 = $i0 * 10;

        $i2 = $i2 + 20;

        if $i2 <= 1000 goto label23;

        $i2 = 1000;

     label23:
        entermonitor $r0;

     label24:
        $l1 = (long) $i2;

     label25:
        virtualinvoke $r0.<java.lang.Object: void wait(long)>($l1);

        exitmonitor $r0;

     label26:
        goto label04;

     label27:
        $r10 := @caughtexception;

        exitmonitor $r0;

     label28:
        throw $r10;

     label29:
        $r11 := @caughtexception;

        goto label04;

     label30:
        $r5 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r6 = $r5.<SQLite.JDBC2y.JDBCConnection: SQLite.JDBC2y.DatabaseX db>;

     label31:
        $r3 = virtualinvoke $r6.<SQLite.JDBC2y.DatabaseX: SQLite.TableResult get_table(java.lang.String,java.lang.String[])>($r1, $r2);

     label32:
        goto label09;

     label33:
        $r7 = new java.sql.SQLException;

        $r1 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r7.<java.sql.SQLException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label34:
        if $z0 != 0 goto label35;

        if $r3 == null goto label35;

        $r4 = new SQLite.JDBC2y.JDBCResultSet;

        $r12 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r12.<SQLite.JDBC2y.TableResultX: void <init>(SQLite.TableResult)>($r3);

        specialinvoke $r4.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r12, $r0);

        $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs> = $r4;

     label35:
        $r4 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs>;

        return $r4;

     label36:
        $r13 := @caughtexception;

        goto label22;

        catch SQLite.Exception from label05 to label06 with label19;
        catch SQLite.Exception from label08 to label09 with label19;
        catch SQLite.Exception from label10 to label11 with label19;
        catch SQLite.Exception from label14 to label15 with label19;
        catch SQLite.Exception from label17 to label18 with label19;
        catch SQLite.Exception from label20 to label21 with label36;
        catch java.lang.Exception from label23 to label24 with label29;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.lang.Throwable from label27 to label28 with label27;
        catch java.lang.Exception from label28 to label29 with label29;
        catch SQLite.Exception from label31 to label32 with label19;
    }

    public int executeUpdate(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        int i0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        virtualinvoke $r0.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String,java.lang.String[],boolean)>($r1, null, 1);

        i0 = $r0.<SQLite.JDBC2y.JDBCStatement: int updcnt>;

        return i0;
    }

    public int executeUpdate(java.lang.String, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        int $i0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 == 2 goto label1;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;

     label1:
        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCStatement: int executeUpdate(java.lang.String)>($r1);

        return $i0;
    }

    public int executeUpdate(java.lang.String, int[]) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        int[] $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: int[];

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public int executeUpdate(java.lang.String, java.lang.String[]) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String[];

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public java.sql.Connection getConnection() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        SQLite.JDBC2y.JDBCConnection r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        return r1;
    }

    public int getFetchDirection() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return 1002;
    }

    public int getFetchSize() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return 1;
    }

    public java.sql.ResultSet getGeneratedKeys() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public int getMaxFieldSize() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return 0;
    }

    public int getMaxRows() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return 0;
    }

    public boolean getMoreResults() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        SQLite.JDBC2y.JDBCResultSet $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs>;

        if $r1 == null goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs>;

        virtualinvoke $r1.<SQLite.JDBC2y.JDBCResultSet: void close()>();

        $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs> = null;

     label1:
        return 0;
    }

    public boolean getMoreResults(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public int getQueryTimeout() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        SQLite.JDBC2y.JDBCConnection $r1;
        int i0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        i0 = $r1.<SQLite.JDBC2y.JDBCConnection: int timeout>;

        return i0;
    }

    public java.sql.ResultSet getResultSet() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        SQLite.JDBC2y.JDBCResultSet r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCResultSet rs>;

        return r1;
    }

    public int getResultSetConcurrency() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return 1007;
    }

    public int getResultSetHoldability() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return 1;
    }

    public int getResultSetType() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return 1004;
    }

    public int getUpdateCount() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        int i0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        i0 = $r0.<SQLite.JDBC2y.JDBCStatement: int updcnt>;

        return i0;
    }

    public java.sql.SQLWarning getWarnings() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        return null;
    }

    public void setCursorName(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void setEscapeProcessing(boolean) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        boolean $z0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $z0 := @parameter0: boolean;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void setFetchDirection(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void setFetchSize(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void setMaxFieldSize(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void setMaxRows(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void setQueryTimeout(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCStatement $r0;
        int $i0;
        SQLite.JDBC2y.JDBCConnection $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCStatement;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $i0 = $i0 * 1000;

        $r1.<SQLite.JDBC2y.JDBCConnection: int timeout> = $i0;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $i0 = $r1.<SQLite.JDBC2y.JDBCConnection: int timeout>;

        if $i0 >= 0 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r1.<SQLite.JDBC2y.JDBCConnection: int timeout> = 120000;

        return;

     label1:
        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $i0 = $r1.<SQLite.JDBC2y.JDBCConnection: int timeout>;

        if $i0 >= 1000 goto label2;

        $r1 = $r0.<SQLite.JDBC2y.JDBCStatement: SQLite.JDBC2y.JDBCConnection conn>;

        $r1.<SQLite.JDBC2y.JDBCConnection: int timeout> = 5000;

        return;

     label2:
        return;
    }
}
