public class org.bouncycastle.crypto.encodings.PKCS1Encoding extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricBlockCipher
{
    private static int HEADER_LENGTH;
    public static java.lang.String STRICT_LENGTH_ENABLED_PROPERTY;
    private org.bouncycastle.crypto.AsymmetricBlockCipher engine;
    private boolean forEncryption;
    private boolean forPrivateKey;
    private java.security.SecureRandom random;
    private boolean useStrictLength;

    static void <clinit>()
    {
        <org.bouncycastle.crypto.encodings.PKCS1Encoding: java.lang.String STRICT_LENGTH_ENABLED_PROPERTY> = "org.bouncycastle.pkcs1.strict";

        <org.bouncycastle.crypto.encodings.PKCS1Encoding: int HEADER_LENGTH> = 10;

        return;
    }

    public void <init>(org.bouncycastle.crypto.AsymmetricBlockCipher)
    {
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: org.bouncycastle.crypto.AsymmetricBlockCipher;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine> = $r1;

        $r2 = <org.bouncycastle.crypto.encodings.PKCS1Encoding: java.lang.String STRICT_LENGTH_ENABLED_PROPERTY>;

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>($r2, "true");

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("true");

        $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: boolean useStrictLength> = $z0;

        return;
    }

    private byte[] decodeBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r0;
        byte[] $r1, $r3;
        int $i0, $i1;
        byte $b2, $b3;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r2;
        org.bouncycastle.crypto.InvalidCipherTextException $r4;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $r3 = interfaceinvoke $r2.<org.bouncycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r1, $i0, $i1);

        $i0 = lengthof $r3;

        $i1 = virtualinvoke $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: int getOutputBlockSize()>();

        if $i0 >= $i1 goto label1;

        $r4 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("block truncated");

        throw $r4;

     label1:
        $b3 = $r3[0];

        if $b3 == 1 goto label2;

        if $b3 == 2 goto label2;

        $r4 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("unknown block type");

        throw $r4;

     label2:
        $z0 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: boolean useStrictLength>;

        if $z0 == 0 goto label3;

        $i0 = lengthof $r3;

        $r2 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i1 = interfaceinvoke $r2.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        if $i0 == $i1 goto label3;

        $r4 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("block incorrect size");

        throw $r4;

     label3:
        $i0 = 1;

     label4:
        $i1 = lengthof $r3;

        if $i0 == $i1 goto label5;

        $b2 = $r3[$i0];

        if $b2 != 0 goto label7;

     label5:
        $i0 = $i0 + 1;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label6;

        $i1 = <org.bouncycastle.crypto.encodings.PKCS1Encoding: int HEADER_LENGTH>;

        if $i0 >= $i1 goto label9;

     label6:
        $r4 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("no data in block");

        throw $r4;

     label7:
        if $b3 != 1 goto label8;

        if $b2 == -1 goto label8;

        $r4 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("block padding incorrect");

        throw $r4;

     label8:
        $i0 = $i0 + 1;

        goto label4;

     label9:
        $i1 = lengthof $r3;

        $i1 = $i1 - $i0;

        $r1 = newarray (byte)[$i1];

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i0, $r1, 0, $i1);

        return $r1;
    }

    private byte[] encodeBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r3;
        boolean $z0;
        java.security.SecureRandom $r4;
        byte $b4;

        $r0 := @this: org.bouncycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i2 = interfaceinvoke $r3.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $r2 = newarray (byte)[$i2];

        $z0 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: boolean forPrivateKey>;

        if $z0 == 0 goto label2;

        $r2[0] = 1;

        $i2 = 1;

     label1:
        $i3 = lengthof $r2;

        $i3 = $i3 - $i1;

        $i3 = $i3 - 1;

        if $i2 == $i3 goto label6;

        $r2[$i2] = -1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r4 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random>;

        virtualinvoke $r4.<java.security.SecureRandom: void nextBytes(byte[])>($r2);

        $r2[0] = 2;

        $i2 = 1;

     label3:
        $i3 = lengthof $r2;

        $i3 = $i3 - $i1;

        $i3 = $i3 - 1;

        if $i2 == $i3 goto label6;

     label4:
        $b4 = $r2[$i2];

        if $b4 != 0 goto label5;

        $r4 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random>;

        $i3 = virtualinvoke $r4.<java.util.Random: int nextInt()>();

        $b4 = (byte) $i3;

        $r2[$i2] = $b4;

        goto label4;

     label5:
        $i2 = $i2 + 1;

        goto label3;

     label6:
        $i2 = lengthof $r2;

        $i2 = $i2 - $i1;

        $i2 = $i2 - 1;

        $r2[$i2] = 0;

        $i2 = lengthof $r2;

        $i2 = $i2 - $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r2, $i2, $i1);

        $r3 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = lengthof $r2;

        $r1 = interfaceinvoke $r3.<org.bouncycastle.crypto.AsymmetricBlockCipher: byte[] processBlock(byte[],int,int)>($r2, 0, $i0);

        return $r1;
    }

    public int getInputBlockSize()
    {
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r0;
        int $i0, $i1;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.encodings.PKCS1Encoding;

        $r1 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getInputBlockSize()>();

        $z0 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i1 = <org.bouncycastle.crypto.encodings.PKCS1Encoding: int HEADER_LENGTH>;

        $i0 = $i0 - $i1;

        return $i0;

     label1:
        return $i0;
    }

    public int getOutputBlockSize()
    {
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r0;
        int $i0, $i1;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r1;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.encodings.PKCS1Encoding;

        $r1 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.AsymmetricBlockCipher: int getOutputBlockSize()>();

        $z0 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        return $i0;

     label1:
        $i1 = <org.bouncycastle.crypto.encodings.PKCS1Encoding: int HEADER_LENGTH>;

        $i0 = $i0 - $i1;

        return $i0;
    }

    public org.bouncycastle.crypto.AsymmetricBlockCipher getUnderlyingCipher()
    {
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r0;
        org.bouncycastle.crypto.AsymmetricBlockCipher r1;

        $r0 := @this: org.bouncycastle.crypto.encodings.PKCS1Encoding;

        r1 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        return r1;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r0;
        boolean $z0, $z1;
        org.bouncycastle.crypto.CipherParameters $r1;
        org.bouncycastle.crypto.params.ParametersWithRandom $r2;
        java.security.SecureRandom $r3;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r4;
        org.bouncycastle.crypto.AsymmetricBlockCipher $r5;

        $r0 := @this: org.bouncycastle.crypto.encodings.PKCS1Encoding;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label2;

        $r2 = (org.bouncycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random> = $r3;

        $r1 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.bouncycastle.crypto.params.AsymmetricKeyParameter) $r1;

     label1:
        $r5 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: org.bouncycastle.crypto.AsymmetricBlockCipher engine>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.AsymmetricBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>($z0, $r4);

        $z1 = virtualinvoke $r4.<org.bouncycastle.crypto.params.AsymmetricKeyParameter: boolean isPrivate()>();

        $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: boolean forPrivateKey> = $z1;

        $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: boolean forEncryption> = $z0;

        return;

     label2:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: java.security.SecureRandom random> = $r3;

        $r4 = (org.bouncycastle.crypto.params.AsymmetricKeyParameter) $r1;

        goto label1;
    }

    public byte[] processBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.encodings.PKCS1Encoding $r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.encodings.PKCS1Encoding;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r1 = specialinvoke $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: byte[] encodeBlock(byte[],int,int)>($r1, $i0, $i1);

        return $r1;

     label1:
        $r1 = specialinvoke $r0.<org.bouncycastle.crypto.encodings.PKCS1Encoding: byte[] decodeBlock(byte[],int,int)>($r1, $i0, $i1);

        return $r1;
    }
}
