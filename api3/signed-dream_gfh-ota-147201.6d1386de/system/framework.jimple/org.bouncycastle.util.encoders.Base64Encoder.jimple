public class org.bouncycastle.util.encoders.Base64Encoder extends java.lang.Object implements org.bouncycastle.util.encoders.Encoder
{
    protected final byte[] decodingTable;
    protected final byte[] encodingTable;
    protected byte padding;

    public void <init>()
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        byte[] $r1;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte)[64];

        $r1[0] = 65;

        $r1[1] = 66;

        $r1[2] = 67;

        $r1[3] = 68;

        $r1[4] = 69;

        $r1[5] = 70;

        $r1[6] = 71;

        $r1[7] = 72;

        $r1[8] = 73;

        $r1[9] = 74;

        $r1[10] = 75;

        $r1[11] = 76;

        $r1[12] = 77;

        $r1[13] = 78;

        $r1[14] = 79;

        $r1[15] = 80;

        $r1[16] = 81;

        $r1[17] = 82;

        $r1[18] = 83;

        $r1[19] = 84;

        $r1[20] = 85;

        $r1[21] = 86;

        $r1[22] = 87;

        $r1[23] = 88;

        $r1[24] = 89;

        $r1[25] = 90;

        $r1[26] = 97;

        $r1[27] = 98;

        $r1[28] = 99;

        $r1[29] = 100;

        $r1[30] = 101;

        $r1[31] = 102;

        $r1[32] = 103;

        $r1[33] = 104;

        $r1[34] = 105;

        $r1[35] = 106;

        $r1[36] = 107;

        $r1[37] = 108;

        $r1[38] = 109;

        $r1[39] = 110;

        $r1[40] = 111;

        $r1[41] = 112;

        $r1[42] = 113;

        $r1[43] = 114;

        $r1[44] = 115;

        $r1[45] = 116;

        $r1[46] = 117;

        $r1[47] = 118;

        $r1[48] = 119;

        $r1[49] = 120;

        $r1[50] = 121;

        $r1[51] = 122;

        $r1[52] = 48;

        $r1[53] = 49;

        $r1[54] = 50;

        $r1[55] = 51;

        $r1[56] = 52;

        $r1[57] = 53;

        $r1[58] = 54;

        $r1[59] = 55;

        $r1[60] = 56;

        $r1[61] = 57;

        $r1[62] = 43;

        $r1[63] = 47;

        $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable> = $r1;

        $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding> = 61;

        $r1 = newarray (byte)[128];

        $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable> = $r1;

        virtualinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: void initialiseDecodingTable()>();

        return;
    }

    private int decodeLastBlock(java.io.OutputStream, char, char, char, char) throws java.io.IOException
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        java.io.OutputStream $r1;
        char $c0, $c1, $c2, $c3;
        byte $b4, $b5, $b7, $b8;
        byte[] $r2;
        int $i6;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        $r1 := @parameter0: java.io.OutputStream;

        $c0 := @parameter1: char;

        $c1 := @parameter2: char;

        $c2 := @parameter3: char;

        $c3 := @parameter4: char;

        $b4 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        if $c2 != $b4 goto label1;

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b4 = $r2[$c0];

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b5 = $r2[$c1];

        $i6 = $b4 << 2;

        $b4 = $b5 >> 4;

        $i6 = $i6 | $b4;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        return 1;

     label1:
        $b4 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        if $c3 != $b4 goto label2;

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b7 = $r2[$c0];

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b4 = $r2[$c1];

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b5 = $r2[$c2];

        $i6 = $b7 << 2;

        $b7 = $b4 >> 4;

        $i6 = $i6 | $b7;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        $i6 = $b4 << 4;

        $b4 = $b5 >> 2;

        $i6 = $i6 | $b4;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        return 2;

     label2:
        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b8 = $r2[$c0];

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b7 = $r2[$c1];

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b5 = $r2[$c2];

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $b4 = $r2[$c3];

        $i6 = $b8 << 2;

        $b8 = $b7 >> 4;

        $i6 = $i6 | $b8;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        $i6 = $b7 << 4;

        $b7 = $b5 >> 2;

        $i6 = $i6 | $b7;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        $i6 = $b5 << 6;

        $i6 = $i6 | $b4;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i6);

        return 3;
    }

    private boolean ignore(char)
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        char $c0;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        $c0 := @parameter0: char;

        if $c0 == 10 goto label1;

        if $c0 == 13 goto label1;

        if $c0 == 9 goto label1;

        if $c0 != 32 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private int nextI(java.lang.String, int, int)
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        java.lang.String $r1;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        $r1 := @parameter0: java.lang.String;

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

     label1:
        if $i1 >= $i0 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        $z0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: boolean ignore(char)>($c2);

        if $z0 == 0 goto label3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i1;

     label3:
        return $i1;
    }

    private int nextI(byte[], int, int)
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;
        byte $b2;
        char $c3;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        $r1 := @parameter0: byte[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

     label1:
        if $i1 >= $i0 goto label2;

        $b2 = $r1[$i1];

        $c3 = (char) $b2;

        $z0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: boolean ignore(char)>($c3);

        if $z0 == 0 goto label3;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return $i1;

     label3:
        return $i1;
    }

    public int decode(java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        java.lang.String $r1;
        java.io.OutputStream $r2;
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i8, $i9;
        char $c7, $c10, $c11, $c12;
        boolean $z0;
        byte[] $r3;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.OutputStream;

        $i5 = 0;

        $i6 = virtualinvoke $r1.<java.lang.String: int length()>();

     label1:
        if $i6 <= 0 goto label2;

        $i4 = $i6 - 1;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        $z0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: boolean ignore(char)>($c7);

        if $z0 != 0 goto label4;

     label2:
        $i4 = $i6 - 4;

        $i8 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, 0, $i4);

     label3:
        if $i8 >= $i4 goto label5;

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i9 = $i8 + 1;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i8);

        $b0 = $r3[$c7];

        $i8 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, $i9, $i4);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i9 = $i8 + 1;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i8);

        $b1 = $r3[$c7];

        $i8 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, $i9, $i4);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i9 = $i8 + 1;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i8);

        $b2 = $r3[$c7];

        $i9 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, $i9, $i4);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i8 = $i9 + 1;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i9);

        $b3 = $r3[$c7];

        $i9 = $b0 << 2;

        $b0 = $b1 >> 4;

        $i9 = $i9 | $b0;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i9);

        $i9 = $b1 << 4;

        $b1 = $b2 >> 2;

        $i9 = $i9 | $b1;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i9);

        $i9 = $b2 << 6;

        $i9 = $i9 | $b3;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i9);

        $i5 = $i5 + 3;

        $i8 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(java.lang.String,int,int)>($r1, $i8, $i4);

        goto label3;

     label4:
        $i6 = $i6 + -1;

        goto label1;

     label5:
        $i4 = $i6 - 4;

        $c7 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        $i4 = $i6 - 3;

        $c10 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        $i4 = $i6 - 2;

        $c11 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i4);

        $i6 = $i6 - 1;

        $c12 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i6);

        $i6 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int decodeLastBlock(java.io.OutputStream,char,char,char,char)>($r2, $c7, $c10, $c11, $c12);

        $i5 = $i5 + $i6;

        return $i5;
    }

    public int decode(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        byte[] $r1, $r3;
        int $i0, $i1, $i10, $i11, $i12;
        java.io.OutputStream $r2;
        char $c2, $c3, $c4, $c5;
        byte $b6, $b7, $b8, $b9;
        boolean $z0;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.io.OutputStream;

        $i11 = 0;

        $i1 = $i0 + $i1;

     label1:
        if $i1 <= $i0 goto label2;

        $i10 = $i1 - 1;

        $b6 = $r1[$i10];

        $c2 = (char) $b6;

        $z0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: boolean ignore(char)>($c2);

        if $z0 != 0 goto label4;

     label2:
        $i10 = $i1 - 4;

        $i0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>($r1, $i0, $i10);

     label3:
        if $i0 >= $i10 goto label5;

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i12 = $i0 + 1;

        $b6 = $r1[$i0];

        $b6 = $r3[$b6];

        $i0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>($r1, $i12, $i10);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i12 = $i0 + 1;

        $b7 = $r1[$i0];

        $b7 = $r3[$b7];

        $i0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>($r1, $i12, $i10);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i12 = $i0 + 1;

        $b8 = $r1[$i0];

        $b8 = $r3[$b8];

        $i12 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>($r1, $i12, $i10);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $i0 = $i12 + 1;

        $b9 = $r1[$i12];

        $b9 = $r3[$b9];

        $i12 = $b6 << 2;

        $b6 = $b7 >> 4;

        $i12 = $i12 | $b6;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i12);

        $i12 = $b7 << 4;

        $b6 = $b8 >> 2;

        $i12 = $i12 | $b6;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i12);

        $i12 = $b8 << 6;

        $i12 = $i12 | $b9;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($i12);

        $i11 = $i11 + 3;

        $i0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int nextI(byte[],int,int)>($r1, $i0, $i10);

        goto label3;

     label4:
        $i1 = $i1 + -1;

        goto label1;

     label5:
        $i0 = $i1 - 4;

        $b6 = $r1[$i0];

        $c2 = (char) $b6;

        $i0 = $i1 - 3;

        $b6 = $r1[$i0];

        $c3 = (char) $b6;

        $i0 = $i1 - 2;

        $b6 = $r1[$i0];

        $c4 = (char) $b6;

        $i0 = $i1 - 1;

        $b6 = $r1[$i0];

        $c5 = (char) $b6;

        $i0 = specialinvoke $r0.<org.bouncycastle.util.encoders.Base64Encoder: int decodeLastBlock(java.io.OutputStream,char,char,char,char)>($r2, $c2, $c3, $c4, $c5);

        $i0 = $i11 + $i0;

        return $i0;
    }

    public int encode(byte[], int, int, java.io.OutputStream) throws java.io.IOException
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        byte[] $r1, $r3;
        int $i0, $i1, $i5, $i6, $i7;
        java.io.OutputStream $r2;
        short $s2, $s3, $s4, $s9;
        byte $b8;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.io.OutputStream;

        $i6 = $i1 % 3;

        $i1 = $i1 - $i6;

        $i5 = $i0;

     label1:
        $i7 = $i0 + $i1;

        if $i5 >= $i7 goto label2;

        $b8 = $r1[$i5];

        $s2 = $b8 & 255;

        $i7 = $i5 + 1;

        $b8 = $r1[$i7];

        $s3 = $b8 & 255;

        $i7 = $i5 + 2;

        $b8 = $r1[$i7];

        $s4 = $b8 & 255;

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $s9 = $s2 >>> 2;

        $s9 = $s9 & 63;

        $b8 = $r3[$s9];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $i7 = $s2 << 4;

        $s2 = $s3 >>> 4;

        $i7 = $i7 | $s2;

        $i7 = $i7 & 63;

        $b8 = $r3[$i7];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $i7 = $s3 << 2;

        $s3 = $s4 >>> 6;

        $i7 = $i7 | $s3;

        $i7 = $i7 & 63;

        $b8 = $r3[$i7];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $r3 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $s4 = $s4 & 63;

        $b8 = $r3[$s4];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $i5 = $i5 + 3;

        goto label1;

     label2:
        lookupswitch($i6)
        {
            case 0: goto label3;
            case 1: goto label5;
            case 2: goto label6;
            default: goto label3;
        };

     label3:
        $i0 = $i1 / 3;

        $i0 = $i0 * 4;

        if $i6 != 0 goto label7;

        $b8 = 0;

     label4:
        $i0 = $i0 + $b8;

        return $i0;

     label5:
        $i0 = $i0 + $i1;

        $b8 = $r1[$i0];

        $s4 = $b8 & 255;

        $s3 = $s4 >>> 2;

        $s3 = $s3 & 63;

        $i0 = $s4 << 4;

        $i0 = $i0 & 63;

        $r1 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[$s3];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $r1 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[$i0];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $b8 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $b8 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        goto label3;

     label6:
        $i5 = $i0 + $i1;

        $b8 = $r1[$i5];

        $s3 = $b8 & 255;

        $i0 = $i0 + $i1;

        $i0 = $i0 + 1;

        $b8 = $r1[$i0];

        $s4 = $b8 & 255;

        $s2 = $s3 >>> 2;

        $s2 = $s2 & 63;

        $i0 = $s3 << 4;

        $s3 = $s4 >>> 4;

        $i0 = $i0 | $s3;

        $i0 = $i0 & 63;

        $i5 = $s4 << 2;

        $i5 = $i5 & 63;

        $r1 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[$s2];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $r1 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[$i0];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $r1 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b8 = $r1[$i5];

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        $b8 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte padding>;

        virtualinvoke $r2.<java.io.OutputStream: void write(int)>($b8);

        goto label3;

     label7:
        $b8 = 4;

        goto label4;
    }

    protected void initialiseDecodingTable()
    {
        org.bouncycastle.util.encoders.Base64Encoder $r0;
        byte $b0, $b3;
        int $i1, $i2;
        byte[] $r1, $r2;

        $r0 := @this: org.bouncycastle.util.encoders.Base64Encoder;

        $i1 = 0;

     label1:
        $r1 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $i2 = lengthof $r1;

        if $i1 >= $i2 goto label2;

        $r1 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] decodingTable>;

        $r2 = $r0.<org.bouncycastle.util.encoders.Base64Encoder: byte[] encodingTable>;

        $b3 = $r2[$i1];

        $b0 = (byte) $i1;

        $r1[$b3] = $b0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }
}
