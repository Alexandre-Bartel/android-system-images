public class org.apache.http.impl.conn.DefaultClientConnectionOperator extends java.lang.Object implements org.apache.http.conn.ClientConnectionOperator
{
    protected org.apache.http.conn.scheme.SchemeRegistry schemeRegistry;

    public void <init>(org.apache.http.conn.scheme.SchemeRegistry)
    {
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r0;
        org.apache.http.conn.scheme.SchemeRegistry $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        $r1 := @parameter0: org.apache.http.conn.scheme.SchemeRegistry;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Scheme registry must not be null.");

        throw $r2;

     label1:
        $r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry> = $r1;

        return;
    }

    public org.apache.http.conn.OperatedClientConnection createConnection()
    {
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r0;
        org.apache.http.impl.conn.DefaultClientConnection $r1;

        $r0 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        $r1 = new org.apache.http.impl.conn.DefaultClientConnection;

        specialinvoke $r1.<org.apache.http.impl.conn.DefaultClientConnection: void <init>()>();

        return $r1;
    }

    public void openConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, java.net.InetAddress, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r0;
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.HttpHost $r2;
        java.net.InetAddress $r3;
        org.apache.http.protocol.HttpContext $r4;
        org.apache.http.params.HttpParams $r5;
        java.lang.IllegalArgumentException $r6;
        boolean $z0;
        org.apache.http.conn.scheme.SchemeRegistry $r7;
        java.lang.String $r8;
        org.apache.http.conn.scheme.Scheme $r9;
        org.apache.http.conn.scheme.SocketFactory $r10;
        java.net.Socket $r11;
        int $i0;
        java.net.ConnectException $r12;
        org.apache.http.conn.HttpHostConnectException $r13;

        $r0 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        $r1 := @parameter0: org.apache.http.conn.OperatedClientConnection;

        $r2 := @parameter1: org.apache.http.HttpHost;

        $r3 := @parameter2: java.net.InetAddress;

        $r4 := @parameter3: org.apache.http.protocol.HttpContext;

        $r5 := @parameter4: org.apache.http.params.HttpParams;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection must not be null.");

        throw $r6;

     label1:
        if $r2 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host must not be null.");

        throw $r6;

     label2:
        if $r5 != null goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r6;

     label3:
        $z0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: boolean isOpen()>();

        if $z0 == 0 goto label4;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection must not be open.");

        throw $r6;

     label4:
        $r7 = $r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        $r8 = virtualinvoke $r2.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r9 = virtualinvoke $r7.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()>();

        $r11 = interfaceinvoke $r10.<org.apache.http.conn.scheme.SocketFactory: java.net.Socket createSocket()>();

        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void opening(java.net.Socket,org.apache.http.HttpHost)>($r11, $r2);

     label5:
        $r8 = virtualinvoke $r2.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i0 = virtualinvoke $r2.<org.apache.http.HttpHost: int getPort()>();

        $i0 = virtualinvoke $r9.<org.apache.http.conn.scheme.Scheme: int resolvePort(int)>($i0);

        $r11 = interfaceinvoke $r10.<org.apache.http.conn.scheme.SocketFactory: java.net.Socket connectSocket(java.net.Socket,java.lang.String,int,java.net.InetAddress,int,org.apache.http.params.HttpParams)>($r11, $r8, $i0, $r3, 0, $r5);

     label6:
        virtualinvoke $r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r11, $r4, $r5);

        $z0 = interfaceinvoke $r10.<org.apache.http.conn.scheme.SocketFactory: boolean isSecure(java.net.Socket)>($r11);

        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void openCompleted(boolean,org.apache.http.params.HttpParams)>($z0, $r5);

        return;

     label7:
        $r12 := @caughtexception;

        $r13 = new org.apache.http.conn.HttpHostConnectException;

        specialinvoke $r13.<org.apache.http.conn.HttpHostConnectException: void <init>(org.apache.http.HttpHost,java.net.ConnectException)>($r2, $r12);

        throw $r13;

        catch java.net.ConnectException from label5 to label6 with label7;
    }

    protected void prepareSocket(java.net.Socket, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r0;
        java.net.Socket $r1;
        org.apache.http.protocol.HttpContext $r2;
        org.apache.http.params.HttpParams $r3;
        boolean $z0;
        int $i0;

        $r0 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: org.apache.http.protocol.HttpContext;

        $r3 := @parameter2: org.apache.http.params.HttpParams;

        $z0 = staticinvoke <org.apache.http.params.HttpConnectionParams: boolean getTcpNoDelay(org.apache.http.params.HttpParams)>($r3);

        virtualinvoke $r1.<java.net.Socket: void setTcpNoDelay(boolean)>($z0);

        $i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>($r3);

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i0);

        $i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getLinger(org.apache.http.params.HttpParams)>($r3);

        if $i0 < 0 goto label3;

        if $i0 <= 0 goto label2;

        $z0 = 1;

     label1:
        virtualinvoke $r1.<java.net.Socket: void setSoLinger(boolean,int)>($z0, $i0);

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return;
    }

    public void updateSecureConnection(org.apache.http.conn.OperatedClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.conn.DefaultClientConnectionOperator $r0;
        org.apache.http.conn.OperatedClientConnection $r1;
        org.apache.http.HttpHost $r2;
        org.apache.http.protocol.HttpContext $r3;
        org.apache.http.params.HttpParams $r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        org.apache.http.conn.scheme.SchemeRegistry $r6;
        java.lang.String $r7;
        org.apache.http.conn.scheme.Scheme $r8;
        org.apache.http.conn.scheme.SocketFactory $r9;
        java.lang.StringBuilder $r10;
        org.apache.http.conn.scheme.LayeredSocketFactory $r11;
        java.net.Socket $r12;
        int $i0;
        java.net.ConnectException $r13;
        org.apache.http.conn.HttpHostConnectException $r14;

        $r0 := @this: org.apache.http.impl.conn.DefaultClientConnectionOperator;

        $r1 := @parameter0: org.apache.http.conn.OperatedClientConnection;

        $r2 := @parameter1: org.apache.http.HttpHost;

        $r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r4 := @parameter3: org.apache.http.params.HttpParams;

        if $r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection must not be null.");

        throw $r5;

     label1:
        if $r2 != null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host must not be null.");

        throw $r5;

     label2:
        if $r4 != null goto label3;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters must not be null.");

        throw $r5;

     label3:
        $z0 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: boolean isOpen()>();

        if $z0 != 0 goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection must be open.");

        throw $r5;

     label4:
        $r6 = $r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: org.apache.http.conn.scheme.SchemeRegistry schemeRegistry>;

        $r7 = virtualinvoke $r2.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r8 = virtualinvoke $r6.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()>();

        $z0 = $r9 instanceof org.apache.http.conn.scheme.LayeredSocketFactory;

        if $z0 != 0 goto label5;

        $r5 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target scheme (");

        $r7 = virtualinvoke $r8.<org.apache.http.conn.scheme.Scheme: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") must have layered socket factory.");

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label5:
        $r9 = virtualinvoke $r8.<org.apache.http.conn.scheme.Scheme: org.apache.http.conn.scheme.SocketFactory getSocketFactory()>();

        $r11 = (org.apache.http.conn.scheme.LayeredSocketFactory) $r9;

     label6:
        $r12 = interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: java.net.Socket getSocket()>();

        $r7 = virtualinvoke $r2.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i0 = virtualinvoke $r2.<org.apache.http.HttpHost: int getPort()>();

        $r12 = interfaceinvoke $r11.<org.apache.http.conn.scheme.LayeredSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r12, $r7, $i0, 1);

     label7:
        virtualinvoke $r0.<org.apache.http.impl.conn.DefaultClientConnectionOperator: void prepareSocket(java.net.Socket,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r12, $r3, $r4);

        $z0 = interfaceinvoke $r11.<org.apache.http.conn.scheme.LayeredSocketFactory: boolean isSecure(java.net.Socket)>($r12);

        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void update(java.net.Socket,org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>($r12, $r2, $z0, $r4);

        return;

     label8:
        $r13 := @caughtexception;

        $r14 = new org.apache.http.conn.HttpHostConnectException;

        specialinvoke $r14.<org.apache.http.conn.HttpHostConnectException: void <init>(org.apache.http.HttpHost,java.net.ConnectException)>($r2, $r13);

        throw $r14;

        catch java.net.ConnectException from label6 to label7 with label8;
    }
}
