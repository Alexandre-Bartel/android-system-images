public final class org.apache.harmony.security.asn1.ASN1Explicit extends org.apache.harmony.security.asn1.ASN1Constructured
{
    public final org.apache.harmony.security.asn1.ASN1Type type;

    public void <init>(int, int, org.apache.harmony.security.asn1.ASN1Type)
    {
        org.apache.harmony.security.asn1.ASN1Explicit $r0;
        int $i0, $i1;
        org.apache.harmony.security.asn1.ASN1Type $r1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Explicit;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.harmony.security.asn1.ASN1Type;

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Constructured: void <init>(int,int)>($i0, $i1);

        $r0.<org.apache.harmony.security.asn1.ASN1Explicit: org.apache.harmony.security.asn1.ASN1Type type> = $r1;

        return;
    }

    public void <init>(int, org.apache.harmony.security.asn1.ASN1Type)
    {
        org.apache.harmony.security.asn1.ASN1Explicit $r0;
        int $i0;
        org.apache.harmony.security.asn1.ASN1Type $r1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Explicit;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.harmony.security.asn1.ASN1Type;

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Explicit: void <init>(int,int,org.apache.harmony.security.asn1.ASN1Type)>(128, $i0, $r1);

        return;
    }

    public java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.ASN1Explicit $r0;
        org.apache.harmony.security.asn1.BerInputStream $r1;
        int $i0, $i1;
        org.apache.harmony.security.asn1.ASN1Exception $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.lang.String $r5;
        org.apache.harmony.security.asn1.ASN1Type $r6;
        java.lang.Object $r7;
        boolean $z0;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Explicit;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        $i1 = $r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 == $i1 goto label1;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r3 = newarray (java.lang.Object)[3];

        $i0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $i0 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r3[1] = $r5;

        $i0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r3[2] = $r5;

        $r5 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])>("security.13F", $r3);

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        virtualinvoke $r1.<org.apache.harmony.security.asn1.BerInputStream: int next()>();

        $r6 = $r0.<org.apache.harmony.security.asn1.ASN1Explicit: org.apache.harmony.security.asn1.ASN1Type type>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>($r1);

        $r1.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object content> = $r7;

        $z0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r7 = virtualinvoke $r0.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)>($r1);

        return $r7;
    }

    public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Explicit $r0;
        org.apache.harmony.security.asn1.BerOutputStream $r1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Explicit;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke $r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeExplicit(org.apache.harmony.security.asn1.ASN1Explicit)>($r0);

        return;
    }

    public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Explicit $r0;
        org.apache.harmony.security.asn1.BerOutputStream $r1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Explicit;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke $r1.<org.apache.harmony.security.asn1.BerOutputStream: void getExplicitLength(org.apache.harmony.security.asn1.ASN1Explicit)>($r0);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.security.asn1.ASN1Explicit $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.apache.harmony.security.asn1.ASN1Type $r3;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Explicit;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Type: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for type ");

        $r3 = $r0.<org.apache.harmony.security.asn1.ASN1Explicit: org.apache.harmony.security.asn1.ASN1Type type>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
