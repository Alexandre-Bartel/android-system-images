public abstract class android.view.WindowOrientationListener extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private static final boolean localLOGV;
    private boolean mEnabled;
    private int mRate;
    private android.hardware.Sensor mSensor;
    private android.hardware.SensorEventListener mSensorEventListener;
    private android.hardware.SensorManager mSensorManager;
    private int mSensorRotation;

    public void <init>(android.content.Context)
    {
        android.view.WindowOrientationListener $r0;
        android.content.Context $r1;

        $r0 := @this: android.view.WindowOrientationListener;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<android.view.WindowOrientationListener: void <init>(android.content.Context,int)>($r1, 3);

        return;
    }

    public void <init>(android.content.Context, int)
    {
        android.view.WindowOrientationListener $r0;
        android.content.Context $r1;
        int $i0;
        java.lang.Object $r2;
        android.hardware.SensorManager $r3;
        android.hardware.Sensor $r4;
        android.view.WindowOrientationListener$SensorEventListenerImpl $r5;

        $r0 := @this: android.view.WindowOrientationListener;

        $r1 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.view.WindowOrientationListener: boolean mEnabled> = 0;

        $r0.<android.view.WindowOrientationListener: int mSensorRotation> = -1;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r3 = (android.hardware.SensorManager) $r2;

        $r0.<android.view.WindowOrientationListener: android.hardware.SensorManager mSensorManager> = $r3;

        $r0.<android.view.WindowOrientationListener: int mRate> = $i0;

        $r3 = $r0.<android.view.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r4 = virtualinvoke $r3.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        $r0.<android.view.WindowOrientationListener: android.hardware.Sensor mSensor> = $r4;

        $r4 = $r0.<android.view.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r4 == null goto label1;

        $r5 = new android.view.WindowOrientationListener$SensorEventListenerImpl;

        specialinvoke $r5.<android.view.WindowOrientationListener$SensorEventListenerImpl: void <init>(android.view.WindowOrientationListener)>($r0);

        $r0.<android.view.WindowOrientationListener: android.hardware.SensorEventListener mSensorEventListener> = $r5;

        return;

     label1:
        return;
    }

    static int access$000(android.view.WindowOrientationListener)
    {
        android.view.WindowOrientationListener $r0;
        int i0;

        $r0 := @parameter0: android.view.WindowOrientationListener;

        i0 = $r0.<android.view.WindowOrientationListener: int mSensorRotation>;

        return i0;
    }

    static int access$002(android.view.WindowOrientationListener, int)
    {
        android.view.WindowOrientationListener $r0;
        int $i0;

        $r0 := @parameter0: android.view.WindowOrientationListener;

        $i0 := @parameter1: int;

        $r0.<android.view.WindowOrientationListener: int mSensorRotation> = $i0;

        return $i0;
    }

    public boolean canDetectOrientation()
    {
        android.view.WindowOrientationListener $r0;
        android.hardware.Sensor $r1;

        $r0 := @this: android.view.WindowOrientationListener;

        $r1 = $r0.<android.view.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void disable()
    {
        android.view.WindowOrientationListener $r0;
        android.hardware.Sensor $r1;
        boolean $z0;
        android.hardware.SensorManager $r2;
        android.hardware.SensorEventListener $r3;

        $r0 := @this: android.view.WindowOrientationListener;

        $r1 = $r0.<android.view.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowOrientationListener", "Cannot detect sensors. Invalid disable");

        return;

     label1:
        $z0 = $r0.<android.view.WindowOrientationListener: boolean mEnabled>;

        if $z0 != 1 goto label2;

        $r0.<android.view.WindowOrientationListener: int mSensorRotation> = -1;

        $r2 = $r0.<android.view.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r3 = $r0.<android.view.WindowOrientationListener: android.hardware.SensorEventListener mSensorEventListener>;

        virtualinvoke $r2.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r3);

        $r0.<android.view.WindowOrientationListener: boolean mEnabled> = 0;

        return;

     label2:
        return;
    }

    public void enable()
    {
        android.view.WindowOrientationListener $r0;
        android.hardware.Sensor $r1;
        int $i0;
        boolean $z0;
        android.hardware.SensorManager $r2;
        android.hardware.SensorEventListener $r3;

        $r0 := @this: android.view.WindowOrientationListener;

        $r1 = $r0.<android.view.WindowOrientationListener: android.hardware.Sensor mSensor>;

        if $r1 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowOrientationListener", "Cannot detect sensors. Not enabled");

        return;

     label1:
        $z0 = $r0.<android.view.WindowOrientationListener: boolean mEnabled>;

        if $z0 != 0 goto label2;

        $r0.<android.view.WindowOrientationListener: int mSensorRotation> = -1;

        $r2 = $r0.<android.view.WindowOrientationListener: android.hardware.SensorManager mSensorManager>;

        $r3 = $r0.<android.view.WindowOrientationListener: android.hardware.SensorEventListener mSensorEventListener>;

        $r1 = $r0.<android.view.WindowOrientationListener: android.hardware.Sensor mSensor>;

        $i0 = $r0.<android.view.WindowOrientationListener: int mRate>;

        virtualinvoke $r2.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>($r3, $r1, $i0);

        $r0.<android.view.WindowOrientationListener: boolean mEnabled> = 1;

        return;

     label2:
        return;
    }

    public int getCurrentRotation()
    {
        android.view.WindowOrientationListener $r0;
        int i0;

        $r0 := @this: android.view.WindowOrientationListener;

        i0 = $r0.<android.view.WindowOrientationListener: int mSensorRotation>;

        return i0;
    }

    public abstract void onOrientationChanged(int);

    public static void <clinit>()
    {
        <android.view.WindowOrientationListener: java.lang.String TAG> = "WindowOrientationListener";

        <android.view.WindowOrientationListener: boolean DEBUG> = 0;

        return;
    }
}
