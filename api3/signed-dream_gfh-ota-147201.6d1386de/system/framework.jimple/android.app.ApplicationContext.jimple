class android.app.ApplicationContext extends android.content.Context
{
    private static final boolean DEBUG_ICONS;
    private static final java.lang.String[] EMPTY_FILE_LIST;
    private static final java.lang.String TAG;
    private static android.app.AlarmManager sAlarmManager;
    private static android.bluetooth.BluetoothDevice sBluetoothDevice;
    private static android.net.ConnectivityManager sConnectivityManager;
    private static long sInstanceCount;
    private static boolean sIsBluetoothDeviceCached;
    private static android.location.LocationManager sLocationManager;
    private static android.os.PowerManager sPowerManager;
    private static final java.util.HashMap sSharedPrefs;
    private static final java.lang.Object sSync;
    private static android.app.IWallpaperService sWallpaperService;
    private static android.net.wifi.WifiManager sWifiManager;
    private android.app.ActivityManager mActivityManager;
    private android.os.IBinder mActivityToken;
    private android.media.AudioManager mAudioManager;
    private java.io.File mCacheDir;
    private android.text.ClipboardManager mClipboardManager;
    private android.app.ApplicationContext$ApplicationContentResolver mContentResolver;
    private java.io.File mDatabasesDir;
    private java.io.File mFilesDir;
    private android.view.LayoutInflater mLayoutInflater;
    android.app.ActivityThread mMainThread;
    private android.app.NotificationManager mNotificationManager;
    private android.content.Context mOuterContext;
    android.app.ActivityThread$PackageInfo mPackageInfo;
    private android.content.pm.PackageManager mPackageManager;
    private java.io.File mPreferencesDir;
    private android.content.Context mReceiverRestrictedContext;
    private android.content.res.Resources mResources;
    private android.app.SearchManager mSearchManager;
    private android.hardware.SensorManager mSensorManager;
    private android.app.StatusBarManager mStatusBarManager;
    private final java.lang.Object mSync;
    private android.telephony.TelephonyManager mTelephonyManager;
    private android.content.res.Resources$Theme mTheme;
    private int mThemeResource;
    private android.os.Vibrator mVibrator;
    private android.graphics.drawable.Drawable mWallpaper;
    private android.app.IWallpaperServiceCallback mWallpaperCallback;

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.util.HashMap $r1;
        java.lang.String[] $r2;

        <android.app.ApplicationContext: java.lang.String TAG> = "ApplicationContext";

        <android.app.ApplicationContext: boolean DEBUG_ICONS> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.app.ApplicationContext: java.lang.Object sSync> = $r0;

        <android.app.ApplicationContext: boolean sIsBluetoothDeviceCached> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.app.ApplicationContext: java.util.HashMap sSharedPrefs> = $r1;

        <android.app.ApplicationContext: long sInstanceCount> = 0L;

        $r2 = newarray (java.lang.String)[0];

        <android.app.ApplicationContext: java.lang.String[] EMPTY_FILE_LIST> = $r2;

        return;
    }

    void <init>()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        long $l0;

        $r0 := @this: android.app.ApplicationContext;

        specialinvoke $r0.<android.content.Context: void <init>()>();

        $r0.<android.app.ApplicationContext: android.os.IBinder mActivityToken> = null;

        $r0.<android.app.ApplicationContext: int mThemeResource> = 0;

        $r0.<android.app.ApplicationContext: android.content.res.Resources$Theme mTheme> = null;

        $r0.<android.app.ApplicationContext: android.app.NotificationManager mNotificationManager> = null;

        $r0.<android.app.ApplicationContext: android.app.ActivityManager mActivityManager> = null;

        $r0.<android.app.ApplicationContext: android.content.Context mReceiverRestrictedContext> = null;

        $r0.<android.app.ApplicationContext: android.app.SearchManager mSearchManager> = null;

        $r0.<android.app.ApplicationContext: android.hardware.SensorManager mSensorManager> = null;

        $r0.<android.app.ApplicationContext: android.os.Vibrator mVibrator> = null;

        $r0.<android.app.ApplicationContext: android.view.LayoutInflater mLayoutInflater> = null;

        $r0.<android.app.ApplicationContext: android.app.StatusBarManager mStatusBarManager> = null;

        $r0.<android.app.ApplicationContext: android.telephony.TelephonyManager mTelephonyManager> = null;

        $r0.<android.app.ApplicationContext: android.text.ClipboardManager mClipboardManager> = null;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.app.ApplicationContext: java.lang.Object mSync> = $r1;

        $r0.<android.app.ApplicationContext: android.app.IWallpaperServiceCallback mWallpaperCallback> = null;

        $l0 = <android.app.ApplicationContext: long sInstanceCount>;

        $l0 = $l0 + 1L;

        <android.app.ApplicationContext: long sInstanceCount> = $l0;

        $r0.<android.app.ApplicationContext: android.content.Context mOuterContext> = $r0;

        return;
    }

    public void <init>(android.app.ApplicationContext)
    {
        android.app.ApplicationContext $r0, $r1;
        java.lang.Object $r2;
        long $l0;
        android.app.ActivityThread$PackageInfo $r3;
        android.content.res.Resources $r4;
        android.app.ActivityThread $r5;
        android.app.ApplicationContext$ApplicationContentResolver $r6;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.app.ApplicationContext;

        specialinvoke $r0.<android.content.Context: void <init>()>();

        $r0.<android.app.ApplicationContext: android.os.IBinder mActivityToken> = null;

        $r0.<android.app.ApplicationContext: int mThemeResource> = 0;

        $r0.<android.app.ApplicationContext: android.content.res.Resources$Theme mTheme> = null;

        $r0.<android.app.ApplicationContext: android.app.NotificationManager mNotificationManager> = null;

        $r0.<android.app.ApplicationContext: android.app.ActivityManager mActivityManager> = null;

        $r0.<android.app.ApplicationContext: android.content.Context mReceiverRestrictedContext> = null;

        $r0.<android.app.ApplicationContext: android.app.SearchManager mSearchManager> = null;

        $r0.<android.app.ApplicationContext: android.hardware.SensorManager mSensorManager> = null;

        $r0.<android.app.ApplicationContext: android.os.Vibrator mVibrator> = null;

        $r0.<android.app.ApplicationContext: android.view.LayoutInflater mLayoutInflater> = null;

        $r0.<android.app.ApplicationContext: android.app.StatusBarManager mStatusBarManager> = null;

        $r0.<android.app.ApplicationContext: android.telephony.TelephonyManager mTelephonyManager> = null;

        $r0.<android.app.ApplicationContext: android.text.ClipboardManager mClipboardManager> = null;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<android.app.ApplicationContext: java.lang.Object mSync> = $r2;

        $r0.<android.app.ApplicationContext: android.app.IWallpaperServiceCallback mWallpaperCallback> = null;

        $l0 = <android.app.ApplicationContext: long sInstanceCount>;

        $l0 = $l0 + 1L;

        <android.app.ApplicationContext: long sInstanceCount> = $l0;

        $r3 = $r1.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo> = $r3;

        $r4 = $r1.<android.app.ApplicationContext: android.content.res.Resources mResources>;

        $r0.<android.app.ApplicationContext: android.content.res.Resources mResources> = $r4;

        $r5 = $r1.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread> = $r5;

        $r6 = $r1.<android.app.ApplicationContext: android.app.ApplicationContext$ApplicationContentResolver mContentResolver>;

        $r0.<android.app.ApplicationContext: android.app.ApplicationContext$ApplicationContentResolver mContentResolver> = $r6;

        $r0.<android.app.ApplicationContext: android.content.Context mOuterContext> = $r0;

        return;
    }

    static android.content.Intent access$100(android.app.ApplicationContext, android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler, android.content.Context)
    {
        android.app.ApplicationContext $r0;
        android.content.BroadcastReceiver $r1;
        android.content.IntentFilter $r2;
        java.lang.String $r3;
        android.os.Handler $r4;
        android.content.Context $r5;
        android.content.Intent $r6;

        $r0 := @parameter0: android.app.ApplicationContext;

        $r1 := @parameter1: android.content.BroadcastReceiver;

        $r2 := @parameter2: android.content.IntentFilter;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: android.os.Handler;

        $r5 := @parameter5: android.content.Context;

        $r6 = specialinvoke $r0.<android.app.ApplicationContext: android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context)>($r1, $r2, $r3, $r4, $r5);

        return $r6;
    }

    static android.graphics.drawable.Drawable access$1002(android.app.ApplicationContext, android.graphics.drawable.Drawable)
    {
        android.app.ApplicationContext $r0;
        android.graphics.drawable.Drawable $r1;

        $r0 := @parameter0: android.app.ApplicationContext;

        $r1 := @parameter1: android.graphics.drawable.Drawable;

        $r0.<android.app.ApplicationContext: android.graphics.drawable.Drawable mWallpaper> = $r1;

        return $r1;
    }

    static java.io.File access$500(java.io.File)
    {
        java.io.File $r0;

        $r0 := @parameter0: java.io.File;

        $r0 = staticinvoke <android.app.ApplicationContext: java.io.File makeBackupFile(java.io.File)>($r0);

        return $r0;
    }

    static void access$900(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        staticinvoke <android.app.ApplicationContext: void setFilePermissionsFromMode(java.lang.String,int,int)>($r0, $i0, $i1);

        return;
    }

    static android.app.ApplicationContext createSystemContext(android.app.ActivityThread)
    {
        android.app.ActivityThread $r0;
        android.app.ApplicationContext $r1;
        android.content.res.Resources $r2;

        $r0 := @parameter0: android.app.ActivityThread;

        $r1 = new android.app.ApplicationContext;

        specialinvoke $r1.<android.app.ApplicationContext: void <init>()>();

        $r2 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        virtualinvoke $r1.<android.app.ApplicationContext: void init(android.content.res.Resources,android.app.ActivityThread)>($r2, $r0);

        return $r1;
    }

    private void enforce(java.lang.String, int, boolean, int, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $i1 := @parameter3: int;

        $r2 := @parameter4: java.lang.String;

        if $i0 == 0 goto label5;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if $r2 == null goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        if $z0 == 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Neither user ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor current process has ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label3:
        $r2 = "";

        goto label1;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label5:
        return;
    }

    private void enforceForUri(int, int, boolean, int, android.net.Uri, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        int $i0, $i1, $i2;
        boolean $z0;
        android.net.Uri $r1;
        java.lang.String $r2;
        java.lang.SecurityException $r3;
        java.lang.StringBuilder $r4, $r5;

        $r0 := @this: android.app.ApplicationContext;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $i2 := @parameter3: int;

        $r1 := @parameter4: android.net.Uri;

        $r2 := @parameter5: java.lang.String;

        if $i1 == 0 goto label5;

        $r3 = new java.lang.SecurityException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        if $r2 == null goto label3;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        if $z0 == 0 goto label4;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Neither user ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" nor current process has ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.lang.String uriModeFlagToString(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" permission on ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r2 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>($r2);

        throw $r3;

     label3:
        $r2 = "";

        goto label1;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have ");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label5:
        return;
    }

    private android.app.ActivityManager getActivityManager()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.app.ActivityManager $r2;
        android.content.Context $r3;
        android.app.ActivityThread $r4;
        android.os.Handler $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityManager mActivityManager>;

        if $r2 != null goto label2;

        $r2 = new android.app.ActivityManager;

        $r3 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r4 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.os.Handler getHandler()>();

        specialinvoke $r2.<android.app.ActivityManager: void <init>(android.content.Context,android.os.Handler)>($r3, $r5);

        $r0.<android.app.ApplicationContext: android.app.ActivityManager mActivityManager> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityManager mActivityManager>;

        return $r2;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.app.AlarmManager getAlarmManager()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.app.AlarmManager $r2;
        android.os.IBinder $r3;
        android.app.IAlarmManager $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = <android.app.ApplicationContext: java.lang.Object sSync>;

        entermonitor $r1;

     label1:
        $r2 = <android.app.ApplicationContext: android.app.AlarmManager sAlarmManager>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("alarm");

        $r4 = staticinvoke <android.app.IAlarmManager$Stub: android.app.IAlarmManager asInterface(android.os.IBinder)>($r3);

        $r2 = new android.app.AlarmManager;

        specialinvoke $r2.<android.app.AlarmManager: void <init>(android.app.IAlarmManager)>($r4);

        <android.app.ApplicationContext: android.app.AlarmManager sAlarmManager> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = <android.app.ApplicationContext: android.app.AlarmManager sAlarmManager>;

        return $r2;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.media.AudioManager getAudioManager()
    {
        android.app.ApplicationContext $r0;
        android.media.AudioManager $r1;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: android.media.AudioManager mAudioManager>;

        if $r1 != null goto label1;

        $r1 = new android.media.AudioManager;

        specialinvoke $r1.<android.media.AudioManager: void <init>(android.content.Context)>($r0);

        $r0.<android.app.ApplicationContext: android.media.AudioManager mAudioManager> = $r1;

     label1:
        $r1 = $r0.<android.app.ApplicationContext: android.media.AudioManager mAudioManager>;

        return $r1;
    }

    private android.bluetooth.BluetoothDevice getBluetoothDevice()
    {
        android.app.ApplicationContext $r0;
        boolean $z0;
        java.lang.Object $r1;
        android.os.IBinder $r2;
        android.bluetooth.IBluetoothDevice $r3;
        android.bluetooth.BluetoothDevice $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.app.ApplicationContext;

        $z0 = <android.app.ApplicationContext: boolean sIsBluetoothDeviceCached>;

        if $z0 == 0 goto label1;

        $r4 = <android.app.ApplicationContext: android.bluetooth.BluetoothDevice sBluetoothDevice>;

        return $r4;

     label1:
        $r1 = <android.app.ApplicationContext: java.lang.Object sSync>;

        entermonitor $r1;

     label2:
        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("bluetooth");

        if $r2 != null goto label5;

        <android.app.ApplicationContext: android.bluetooth.BluetoothDevice sBluetoothDevice> = null;

     label3:
        <android.app.ApplicationContext: boolean sIsBluetoothDeviceCached> = 1;

        exitmonitor $r1;

     label4:
        $r4 = <android.app.ApplicationContext: android.bluetooth.BluetoothDevice sBluetoothDevice>;

        return $r4;

     label5:
        $r3 = staticinvoke <android.bluetooth.IBluetoothDevice$Stub: android.bluetooth.IBluetoothDevice asInterface(android.os.IBinder)>($r2);

        $r4 = new android.bluetooth.BluetoothDevice;

        specialinvoke $r4.<android.bluetooth.BluetoothDevice: void <init>(android.bluetooth.IBluetoothDevice)>($r3);

        <android.app.ApplicationContext: android.bluetooth.BluetoothDevice sBluetoothDevice> = $r4;

        goto label3;

     label6:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label2 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    private android.text.ClipboardManager getClipboardManager()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.text.ClipboardManager $r2;
        android.content.Context $r3;
        android.app.ActivityThread $r4;
        android.os.Handler $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: android.text.ClipboardManager mClipboardManager>;

        if $r2 != null goto label2;

        $r2 = new android.text.ClipboardManager;

        $r3 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r4 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.os.Handler getHandler()>();

        specialinvoke $r2.<android.text.ClipboardManager: void <init>(android.content.Context,android.os.Handler)>($r3, $r5);

        $r0.<android.app.ApplicationContext: android.text.ClipboardManager mClipboardManager> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = $r0.<android.app.ApplicationContext: android.text.ClipboardManager mClipboardManager>;

        return $r2;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.net.ConnectivityManager getConnectivityManager()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.net.ConnectivityManager $r2;
        android.os.IBinder $r3;
        android.net.IConnectivityManager $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = <android.app.ApplicationContext: java.lang.Object sSync>;

        entermonitor $r1;

     label1:
        $r2 = <android.app.ApplicationContext: android.net.ConnectivityManager sConnectivityManager>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("connectivity");

        $r4 = staticinvoke <android.net.IConnectivityManager$Stub: android.net.IConnectivityManager asInterface(android.os.IBinder)>($r3);

        $r2 = new android.net.ConnectivityManager;

        specialinvoke $r2.<android.net.ConnectivityManager: void <init>(android.net.IConnectivityManager)>($r4);

        <android.app.ApplicationContext: android.net.ConnectivityManager sConnectivityManager> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = <android.app.ApplicationContext: android.net.ConnectivityManager sConnectivityManager>;

        return $r2;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.graphics.drawable.Drawable getCurrentWallpaperLocked()
    {
        android.app.ApplicationContext $r0;
        android.app.IWallpaperServiceCallback $r1;
        android.app.IWallpaperService $r2;
        android.os.ParcelFileDescriptor $r3;
        java.io.FileDescriptor $r4;
        android.graphics.Bitmap $r5;
        android.graphics.drawable.BitmapDrawable $r6;
        android.os.RemoteException $r7;

        $r0 := @this: android.app.ApplicationContext;

     label1:
        $r2 = specialinvoke $r0.<android.app.ApplicationContext: android.app.IWallpaperService getWallpaperService()>();

        $r1 = $r0.<android.app.ApplicationContext: android.app.IWallpaperServiceCallback mWallpaperCallback>;

        $r3 = interfaceinvoke $r2.<android.app.IWallpaperService: android.os.ParcelFileDescriptor getWallpaper(android.app.IWallpaperServiceCallback)>($r1);

        if $r3 == null goto label6;

        $r4 = virtualinvoke $r3.<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $r5 = staticinvoke <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>($r4);

     label2:
        if $r5 == null goto label6;

     label3:
        $r6 = new android.graphics.drawable.BitmapDrawable;

        specialinvoke $r6.<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)>($r5);

     label4:
        return $r6;

     label5:
        $r7 := @caughtexception;

     label6:
        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    private java.io.File getDataDirFile()
    {
        android.app.ApplicationContext $r0;
        java.io.File $r1;
        android.app.ActivityThread$PackageInfo $r2;
        java.lang.RuntimeException $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r1 = virtualinvoke $r2.<android.app.ActivityThread$PackageInfo: java.io.File getDataDirFile()>();

        return $r1;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r3;
    }

    private java.io.File getDatabasesDir()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        java.io.File $r2, $r3;
        java.lang.String $r4;
        boolean $z0;
        java.lang.Throwable $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mDatabasesDir>;

        if $r2 != null goto label2;

        $r2 = new java.io.File;

        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDataDirFile()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "databases");

        $r0.<android.app.ApplicationContext: java.io.File mDatabasesDir> = $r2;

     label2:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mDatabasesDir>;

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("databases");

        if $z0 == 0 goto label3;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("/data/system");

        $r0.<android.app.ApplicationContext: java.io.File mDatabasesDir> = $r2;

     label3:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mDatabasesDir>;

        exitmonitor $r1;

     label4:
        return $r2;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static long getInstanceCount()
    {
        long l0;

        l0 = <android.app.ApplicationContext: long sInstanceCount>;

        return l0;
    }

    private android.location.LocationManager getLocationManager()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.location.LocationManager $r2;
        android.os.IBinder $r3;
        android.location.ILocationManager $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = <android.app.ApplicationContext: java.lang.Object sSync>;

        entermonitor $r1;

     label1:
        $r2 = <android.app.ApplicationContext: android.location.LocationManager sLocationManager>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("location");

        $r4 = staticinvoke <android.location.ILocationManager$Stub: android.location.ILocationManager asInterface(android.os.IBinder)>($r3);

        $r2 = new android.location.LocationManager;

        specialinvoke $r2.<android.location.LocationManager: void <init>(android.location.ILocationManager)>($r4);

        <android.app.ApplicationContext: android.location.LocationManager sLocationManager> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = <android.app.ApplicationContext: android.location.LocationManager sLocationManager>;

        return $r2;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.app.NotificationManager getNotificationManager()
    {
        android.app.ApplicationContext $r0;
        android.view.ContextThemeWrapper $r1;
        java.lang.Object $r2;
        android.app.NotificationManager $r3;
        android.content.Context $r4;
        android.app.ActivityThread $r5;
        android.os.Handler $r6;
        java.lang.Throwable $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<android.app.ApplicationContext: android.app.NotificationManager mNotificationManager>;

        if $r3 != null goto label2;

        $r3 = new android.app.NotificationManager;

        $r1 = new android.view.ContextThemeWrapper;

        $r4 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        specialinvoke $r1.<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>($r4, 16973835);

        $r5 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.os.Handler getHandler()>();

        specialinvoke $r3.<android.app.NotificationManager: void <init>(android.content.Context,android.os.Handler)>($r1, $r6);

        $r0.<android.app.ApplicationContext: android.app.NotificationManager mNotificationManager> = $r3;

     label2:
        exitmonitor $r2;

     label3:
        $r3 = $r0.<android.app.ApplicationContext: android.app.NotificationManager mNotificationManager>;

        return $r3;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor $r2;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.os.PowerManager getPowerManager()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.os.PowerManager $r2;
        android.os.IBinder $r3;
        android.os.IPowerManager $r4;
        android.app.ActivityThread $r5;
        android.os.Handler $r6;
        java.lang.Throwable $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = <android.app.ApplicationContext: java.lang.Object sSync>;

        entermonitor $r1;

     label1:
        $r2 = <android.app.ApplicationContext: android.os.PowerManager sPowerManager>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("power");

        $r4 = staticinvoke <android.os.IPowerManager$Stub: android.os.IPowerManager asInterface(android.os.IBinder)>($r3);

        $r2 = new android.os.PowerManager;

        $r5 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.os.Handler getHandler()>();

        specialinvoke $r2.<android.os.PowerManager: void <init>(android.os.IPowerManager,android.os.Handler)>($r4, $r6);

        <android.app.ApplicationContext: android.os.PowerManager sPowerManager> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = <android.app.ApplicationContext: android.os.PowerManager sPowerManager>;

        return $r2;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private java.io.File getPreferencesDir()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        java.io.File $r2, $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mPreferencesDir>;

        if $r2 != null goto label2;

        $r3 = new java.io.File;

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDataDirFile()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, "shared_prefs");

        $r0.<android.app.ApplicationContext: java.io.File mPreferencesDir> = $r3;

     label2:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mPreferencesDir>;

        exitmonitor $r1;

     label3:
        return $r2;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private android.app.SearchManager getSearchManager()
    {
        android.app.ApplicationContext $r0;
        android.os.IBinder $r1;
        android.util.AndroidRuntimeException $r2;
        java.lang.Object $r3;
        android.app.SearchManager $r4;
        android.content.Context $r5;
        android.app.ActivityThread $r6;
        android.os.Handler $r7;
        java.lang.Throwable $r8;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = virtualinvoke $r0.<android.app.ApplicationContext: android.os.IBinder getActivityToken()>();

        if $r1 != null goto label1;

        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Acquiring SearchManager objects only valid in Activity Contexts.");

        throw $r2;

     label1:
        $r3 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r3;

     label2:
        $r4 = $r0.<android.app.ApplicationContext: android.app.SearchManager mSearchManager>;

        if $r4 != null goto label3;

        $r4 = new android.app.SearchManager;

        $r5 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r6 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.os.Handler getHandler()>();

        specialinvoke $r4.<android.app.SearchManager: void <init>(android.content.Context,android.os.Handler)>($r5, $r7);

        $r0.<android.app.ApplicationContext: android.app.SearchManager mSearchManager> = $r4;

     label3:
        exitmonitor $r3;

     label4:
        $r4 = $r0.<android.app.ApplicationContext: android.app.SearchManager mSearchManager>;

        return $r4;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor $r3;

     label7:
        throw $r8;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private android.hardware.SensorManager getSensorManager()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.hardware.SensorManager $r2;
        android.app.ActivityThread $r3;
        android.os.Handler $r4;
        android.os.Looper $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: android.hardware.SensorManager mSensorManager>;

        if $r2 != null goto label2;

        $r2 = new android.hardware.SensorManager;

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.os.Handler getHandler()>();

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r2.<android.hardware.SensorManager: void <init>(android.os.Looper)>($r5);

        $r0.<android.app.ApplicationContext: android.hardware.SensorManager mSensorManager> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = $r0.<android.app.ApplicationContext: android.hardware.SensorManager mSensorManager>;

        return $r2;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.telephony.TelephonyManager getTelephonyManager()
    {
        android.app.ApplicationContext $r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telephony.TelephonyManager $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<android.app.ApplicationContext: android.telephony.TelephonyManager mTelephonyManager>;

        if $r3 != null goto label2;

        $r3 = new android.telephony.TelephonyManager;

        $r1 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        specialinvoke $r3.<android.telephony.TelephonyManager: void <init>(android.content.Context)>($r1);

        $r0.<android.app.ApplicationContext: android.telephony.TelephonyManager mTelephonyManager> = $r3;

     label2:
        exitmonitor $r2;

     label3:
        $r3 = $r0.<android.app.ApplicationContext: android.telephony.TelephonyManager mTelephonyManager>;

        return $r3;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor $r2;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.os.Vibrator getVibrator()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.os.Vibrator $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: android.os.Vibrator mVibrator>;

        if $r2 != null goto label2;

        $r2 = new android.os.Vibrator;

        specialinvoke $r2.<android.os.Vibrator: void <init>()>();

        $r0.<android.app.ApplicationContext: android.os.Vibrator mVibrator> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = $r0.<android.app.ApplicationContext: android.os.Vibrator mVibrator>;

        return $r2;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.app.IWallpaperService getWallpaperService()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.app.IWallpaperService $r2;
        android.os.IBinder $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = <android.app.ApplicationContext: java.lang.Object sSync>;

        entermonitor $r1;

     label1:
        $r2 = <android.app.ApplicationContext: android.app.IWallpaperService sWallpaperService>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("wallpaper");

        $r2 = staticinvoke <android.app.IWallpaperService$Stub: android.app.IWallpaperService asInterface(android.os.IBinder)>($r3);

        <android.app.ApplicationContext: android.app.IWallpaperService sWallpaperService> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = <android.app.ApplicationContext: android.app.IWallpaperService sWallpaperService>;

        return $r2;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.net.wifi.WifiManager getWifiManager()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        android.net.wifi.WifiManager $r2;
        android.os.IBinder $r3;
        android.net.wifi.IWifiManager $r4;
        android.app.ActivityThread $r5;
        android.os.Handler $r6;
        java.lang.Throwable $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = <android.app.ApplicationContext: java.lang.Object sSync>;

        entermonitor $r1;

     label1:
        $r2 = <android.app.ApplicationContext: android.net.wifi.WifiManager sWifiManager>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("wifi");

        $r4 = staticinvoke <android.net.wifi.IWifiManager$Stub: android.net.wifi.IWifiManager asInterface(android.os.IBinder)>($r3);

        $r2 = new android.net.wifi.WifiManager;

        $r5 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.os.Handler getHandler()>();

        specialinvoke $r2.<android.net.wifi.WifiManager: void <init>(android.net.wifi.IWifiManager,android.os.Handler)>($r4, $r6);

        <android.app.ApplicationContext: android.net.wifi.WifiManager sWifiManager> = $r2;

     label2:
        exitmonitor $r1;

     label3:
        $r2 = <android.app.ApplicationContext: android.net.wifi.WifiManager sWifiManager>;

        return $r2;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor $r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static java.io.File makeBackupFile(java.io.File)
    {
        java.io.File $r0, $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.io.File;

        $r1 = new java.io.File;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.io.File: java.lang.String getPath()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".bak");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r3);

        return $r1;
    }

    private java.io.File makeFilename(java.io.File, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.io.File $r1, $r3;
        java.lang.String $r2;
        char $c0;
        int $i1;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $c0 = <java.io.File: char separatorChar>;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>($c0);

        if $i1 >= 0 goto label1;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r2);

        return $r3;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains a path separator");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r4;
    }

    private android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler, android.content.Context)
    {
        android.app.ApplicationContext $r0;
        android.content.BroadcastReceiver $r1;
        android.content.IntentFilter $r2;
        java.lang.String $r3;
        android.content.Context $r4;
        android.os.Handler $r5;
        android.app.IIntentReceiver $r6;
        android.app.ActivityThread$PackageInfo $r7;
        android.app.ActivityThread $r8;
        android.app.Instrumentation $r9;
        android.app.IActivityManager $r10;
        android.app.ActivityThread$ApplicationThread $r11;
        android.content.Intent $r12;
        android.app.ActivityThread$PackageInfo$ReceiverDispatcher $r13;
        android.os.RemoteException $r14;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.BroadcastReceiver;

        $r2 := @parameter1: android.content.IntentFilter;

        $r3 := @parameter2: java.lang.String;

        $r5 := @parameter3: android.os.Handler;

        $r4 := @parameter4: android.content.Context;

        $r6 = null;

        if $r1 == null goto label2;

        $r7 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r7 == null goto label4;

        if $r4 == null goto label4;

        if $r5 != null goto label1;

        $r8 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r8.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label1:
        $r7 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r8 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r9 = virtualinvoke $r8.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r6 = virtualinvoke $r7.<android.app.ActivityThread$PackageInfo: android.app.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>($r1, $r4, $r5, $r9, 1);

     label2:
        $r10 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r8 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r11 = virtualinvoke $r8.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r12 = interfaceinvoke $r10.<android.app.IActivityManager: android.content.Intent registerReceiver(android.app.IApplicationThread,android.app.IIntentReceiver,android.content.IntentFilter,java.lang.String)>($r11, $r6, $r2, $r3);

     label3:
        return $r12;

     label4:
        if $r5 != null goto label5;

        $r8 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r8.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label5:
        $r13 = new android.app.ActivityThread$PackageInfo$ReceiverDispatcher;

        specialinvoke $r13.<android.app.ActivityThread$PackageInfo$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>($r1, $r4, $r5, null, 0);

        $r6 = virtualinvoke $r13.<android.app.ActivityThread$PackageInfo$ReceiverDispatcher: android.app.IIntentReceiver getIIntentReceiver()>();

        goto label2;

     label6:
        $r14 := @caughtexception;

        return null;

        catch android.os.RemoteException from label2 to label3 with label6;
    }

    private static void setFilePermissionsFromMode(java.lang.String, int, int)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = $i1 | 432;

        $i2 = $i0 & 1;

        if $i2 == 0 goto label1;

        $i1 = $i1 | 4;

     label1:
        $i0 = $i0 & 2;

        if $i0 == 0 goto label2;

        $i1 = $i1 | 2;

     label2:
        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r0, $i1, -1, -1);

        return;
    }

    private void setWallpaper(java.io.InputStream, java.io.FileOutputStream) throws java.io.IOException
    {
        android.app.ApplicationContext $r0;
        java.io.InputStream $r1;
        java.io.FileOutputStream $r2;
        byte[] $r3;
        int $i0;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.io.FileOutputStream;

        $r3 = newarray (byte)[32768];

     label1:
        $i0 = virtualinvoke $r1.<java.io.InputStream: int read(byte[])>($r3);

        if $i0 <= 0 goto label2;

        virtualinvoke $r2.<java.io.FileOutputStream: void write(byte[],int,int)>($r3, 0, $i0);

        goto label1;

     label2:
        return;
    }

    private java.lang.String uriModeFlagToString(int)
    {
        android.app.ApplicationContext $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: android.app.ApplicationContext;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label2;
            default: goto label1;
        };

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown permission mode flags: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        return "read and write";

     label3:
        return "read";

     label4:
        return "write";
    }

    public boolean bindService(android.content.Intent, android.content.ServiceConnection, int)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        android.content.ServiceConnection $r2;
        int $i0;
        android.app.ActivityThread$PackageInfo $r3;
        android.content.Context $r4;
        android.app.ActivityThread $r5;
        android.os.Handler $r6;
        android.app.IServiceConnection $r7;
        android.app.IActivityManager $r8;
        android.app.ActivityThread$ApplicationThread $r9;
        android.os.IBinder $r10;
        android.content.ContentResolver $r11;
        java.lang.String $r12;
        java.lang.SecurityException $r13;
        java.lang.StringBuilder $r14;
        android.os.RemoteException $r15;
        java.lang.RuntimeException $r16;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

        $r2 := @parameter1: android.content.ServiceConnection;

        $i0 := @parameter2: int;

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r3 == null goto label6;

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r4 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r5 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.os.Handler getHandler()>();

        $r7 = virtualinvoke $r3.<android.app.ActivityThread$PackageInfo: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)>($r2, $r4, $r6, $i0);

     label1:
        $r8 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r5 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r9 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r10 = virtualinvoke $r0.<android.app.ApplicationContext: android.os.IBinder getActivityToken()>();

        $r11 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r12 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r11);

        $i0 = interfaceinvoke $r8.<android.app.IActivityManager: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int)>($r9, $r10, $r1, $r12, $r7, $i0);

     label2:
        if $i0 >= 0 goto label7;

        $r13 = new java.lang.SecurityException;

     label3:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to bind to service ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>($r12);

     label4:
        throw $r13;

     label5:
        $r15 := @caughtexception;

        return 0;

     label6:
        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r16;

     label7:
        if $i0 == 0 goto label8;

        return 1;

     label8:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public int checkCallingOrSelfPermission(java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkPermission(java.lang.String,int,int)>($r1, $i0, $i1);

        return $i0;
    }

    public int checkCallingOrSelfUriPermission(android.net.Uri, int)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        int $i0, $i1, $i2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $i0 := @parameter1: int;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkUriPermission(android.net.Uri,int,int,int)>($r1, $i1, $i2, $i0);

        return $i0;
    }

    public int checkCallingPermission(java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        int $i0, $i1;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;

     label1:
        $z0 = staticinvoke <android.os.Process: boolean supportsProcesses()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 == $i1 goto label3;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkPermission(java.lang.String,int,int)>($r1, $i0, $i1);

        return $i0;

     label3:
        return -1;
    }

    public int checkCallingUriPermission(android.net.Uri, int)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $i0 := @parameter1: int;

        $z0 = staticinvoke <android.os.Process: boolean supportsProcesses()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        if $i1 == $i2 goto label2;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkUriPermission(android.net.Uri,int,int,int)>($r1, $i1, $i2, $i0);

        return $i0;

     label2:
        return -1;
    }

    public int checkPermission(java.lang.String, int, int)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;
        android.app.IActivityManager $r3;
        android.os.RemoteException $r4;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("permission is null");

        throw $r2;

     label1:
        $z0 = staticinvoke <android.os.Process: boolean supportsProcesses()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = interfaceinvoke $r3.<android.app.IActivityManager: int checkPermission(java.lang.String,int,int)>($r1, $i0, $i1);

     label3:
        return $i0;

     label4:
        $r4 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public int checkUriPermission(android.net.Uri, int, int, int)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        int $i0, $i1, $i2;
        boolean $z0;
        android.app.IActivityManager $r2;
        android.os.RemoteException $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $z0 = staticinvoke <android.os.Process: boolean supportsProcesses()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $i0 = interfaceinvoke $r2.<android.app.IActivityManager: int checkUriPermission(android.net.Uri,int,int,int)>($r1, $i0, $i1, $i2);

     label2:
        return $i0;

     label3:
        $r3 := @caughtexception;

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int checkUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        java.lang.String $r2, $r3;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label2;

        if $r2 == null goto label1;

        $i3 = virtualinvoke $r0.<android.app.ApplicationContext: int checkPermission(java.lang.String,int,int)>($r2, $i0, $i1);

        if $i3 != 0 goto label2;

     label1:
        return 0;

     label2:
        $i3 = $i2 & 2;

        if $i3 == 0 goto label4;

        if $r3 == null goto label3;

        $i3 = virtualinvoke $r0.<android.app.ApplicationContext: int checkPermission(java.lang.String,int,int)>($r3, $i0, $i1);

        if $i3 != 0 goto label4;

     label3:
        return 0;

     label4:
        if $r1 == null goto label5;

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkUriPermission(android.net.Uri,int,int,int)>($r1, $i0, $i1, $i2);

        return $i0;

     label5:
        return -1;
    }

    public void clearWallpaper() throws java.io.IOException
    {
        android.app.ApplicationContext $r0;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream $r1, $r4;
        android.app.IWallpaperService $r2;
        android.os.ParcelFileDescriptor $r3;
        android.content.res.Resources $r5;
        java.io.InputStream $r6;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;

        $r0 := @this: android.app.ApplicationContext;

     label01:
        $r2 = specialinvoke $r0.<android.app.ApplicationContext: android.app.IWallpaperService getWallpaperService()>();

        $r3 = interfaceinvoke $r2.<android.app.IWallpaperService: android.os.ParcelFileDescriptor setWallpaper()>();

     label02:
        if $r3 == null goto label13;

        $r4 = null;

     label03:
        $r1 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r1.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>($r3);

     label04:
        $r5 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: java.io.InputStream openRawResource(int)>(17301802);

        specialinvoke $r0.<android.app.ApplicationContext: void setWallpaper(java.io.InputStream,java.io.FileOutputStream)>($r6, $r1);

     label05:
        if $r1 == null goto label14;

     label06:
        virtualinvoke $r1.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>();

     label07:
        return;

     label08:
        $r7 := @caughtexception;

     label09:
        if $r4 == null goto label10;

        virtualinvoke $r4.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>();

     label10:
        throw $r7;

     label11:
        $r8 := @caughtexception;

        return;

     label12:
        $r7 := @caughtexception;

        $r4 = $r1;

        goto label09;

     label13:
        return;

     label14:
        return;

        catch android.os.RemoteException from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch android.os.RemoteException from label09 to label11 with label11;
    }

    public android.content.Context createPackageContext(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.app.ApplicationContext $r0, $r2;
        java.lang.String $r1;
        int $i0;
        boolean $z0;
        android.app.ActivityThread $r3;
        android.app.ActivityThread$PackageInfo $r4;
        android.content.res.Resources $r5;
        android.content.pm.PackageManager$NameNotFoundException $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("system");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("android");

        if $z0 == 0 goto label2;

     label1:
        $r2 = new android.app.ApplicationContext;

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r0 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ApplicationContext getSystemContext()>();

        specialinvoke $r2.<android.app.ApplicationContext: void <init>(android.app.ApplicationContext)>($r0);

        return $r2;

     label2:
        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$PackageInfo getPackageInfo(java.lang.String,int)>($r1, $i0);

        if $r4 == null goto label3;

        $r2 = new android.app.ApplicationContext;

        specialinvoke $r2.<android.app.ApplicationContext: void <init>()>();

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        virtualinvoke $r2.<android.app.ApplicationContext: void init(android.app.ActivityThread$PackageInfo,android.os.IBinder,android.app.ActivityThread)>($r4, null, $r3);

        $r5 = $r2.<android.app.ApplicationContext: android.content.res.Resources mResources>;

        if $r5 == null goto label3;

        return $r2;

     label3:
        $r6 = new android.content.pm.PackageManager$NameNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Application package ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>($r1);

        throw $r6;
    }

    public java.lang.String[] databaseList()
    {
        android.app.ApplicationContext $r0;
        java.io.File $r1;
        java.lang.String[] $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDatabasesDir()>();

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String[] list()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r2 = <android.app.ApplicationContext: java.lang.String[] EMPTY_FILE_LIST>;

        return $r2;
    }

    public boolean deleteDatabase(java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        java.io.File $r2;
        boolean $z0;
        java.lang.Exception $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDatabasesDir()>();

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, $r1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean delete()>();

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean deleteFile(java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        java.io.File $r2;
        boolean $z0;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.app.ApplicationContext: java.io.File getFilesDir()>();

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, $r1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean delete()>();

        return $z0;
    }

    public void enforceCallingOrSelfPermission(java.lang.String, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkCallingOrSelfPermission(java.lang.String)>($r1);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r0.<android.app.ApplicationContext: void enforce(java.lang.String,int,boolean,int,java.lang.String)>($r1, $i0, 1, $i1, $r2);

        return;
    }

    public void enforceCallingOrSelfUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke $r0.<android.app.ApplicationContext: int checkCallingOrSelfUriPermission(android.net.Uri,int)>($r1, $i0);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r0.<android.app.ApplicationContext: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>($i0, $i1, 1, $i2, $r1, $r2);

        return;
    }

    public void enforceCallingPermission(java.lang.String, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkCallingPermission(java.lang.String)>($r1);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r0.<android.app.ApplicationContext: void enforce(java.lang.String,int,boolean,int,java.lang.String)>($r1, $i0, 0, $i1, $r2);

        return;
    }

    public void enforceCallingUriPermission(android.net.Uri, int, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke $r0.<android.app.ApplicationContext: int checkCallingUriPermission(android.net.Uri,int)>($r1, $i0);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r0.<android.app.ApplicationContext: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>($i0, $i1, 0, $i2, $r1, $r2);

        return;
    }

    public void enforcePermission(java.lang.String, int, int, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkPermission(java.lang.String,int,int)>($r1, $i0, $i1);

        specialinvoke $r0.<android.app.ApplicationContext: void enforce(java.lang.String,int,boolean,int,java.lang.String)>($r1, $i0, 0, $i1, $r2);

        return;
    }

    public void enforceUriPermission(android.net.Uri, int, int, int, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 := @parameter4: java.lang.String;

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkUriPermission(android.net.Uri,int,int,int)>($r1, $i0, $i1, $i2);

        specialinvoke $r0.<android.app.ApplicationContext: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>($i2, $i0, 0, $i1, $r1, $r2);

        return;
    }

    public void enforceUriPermission(android.net.Uri, java.lang.String, java.lang.String, int, int, int, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        java.lang.String $r2, $r3, $r4;
        int $i0, $i1, $i2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r4 := @parameter6: java.lang.String;

        $i0 = virtualinvoke $r0.<android.app.ApplicationContext: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>($r1, $r2, $r3, $i0, $i1, $i2);

        specialinvoke $r0.<android.app.ApplicationContext: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>($i2, $i0, 0, $i1, $r1, $r4);

        return;
    }

    public java.lang.String[] fileList()
    {
        android.app.ApplicationContext $r0;
        java.io.File $r1;
        java.lang.String[] $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = virtualinvoke $r0.<android.app.ApplicationContext: java.io.File getFilesDir()>();

        $r2 = virtualinvoke $r1.<java.io.File: java.lang.String[] list()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r2 = <android.app.ApplicationContext: java.lang.String[] EMPTY_FILE_LIST>;

        return $r2;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.app.ApplicationContext $r0;
        long $l0;

        $r0 := @this: android.app.ApplicationContext;

        specialinvoke $r0.<java.lang.Object: void finalize()>();

        $l0 = <android.app.ApplicationContext: long sInstanceCount>;

        $l0 = $l0 - 1L;

        <android.app.ApplicationContext: long sInstanceCount> = $l0;

        return;
    }

    final android.os.IBinder getActivityToken()
    {
        android.app.ApplicationContext $r0;
        android.os.IBinder r1;

        $r0 := @this: android.app.ApplicationContext;

        r1 = $r0.<android.app.ApplicationContext: android.os.IBinder mActivityToken>;

        return r1;
    }

    public android.content.Context getApplicationContext()
    {
        android.app.ApplicationContext $r0;
        android.app.Application $r1;
        android.app.ActivityThread $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r1 = virtualinvoke $r2.<android.app.ActivityThread: android.app.Application getApplication()>();

        return $r1;
    }

    public android.content.res.AssetManager getAssets()
    {
        android.app.ApplicationContext $r0;
        android.content.res.AssetManager $r1;
        android.content.res.Resources $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: android.content.res.Resources mResources>;

        $r1 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        return $r1;
    }

    public java.io.File getCacheDir()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        java.io.File $r2, $r3;
        boolean $z0;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mCacheDir>;

        if $r2 != null goto label2;

        $r2 = new java.io.File;

        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDataDirFile()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "cache");

        $r0.<android.app.ApplicationContext: java.io.File mCacheDir> = $r2;

     label2:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mCacheDir>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label5;

        $r2 = $r0.<android.app.ApplicationContext: java.io.File mCacheDir>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ApplicationContext", "Unable to create cache directory");

        exitmonitor $r1;

     label3:
        return null;

     label4:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mCacheDir>;

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r4, 505, -1, -1);

     label5:
        exitmonitor $r1;

     label6:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mCacheDir>;

        return $r2;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor $r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.ClassLoader getClassLoader()
    {
        android.app.ApplicationContext $r0;
        android.app.ActivityThread$PackageInfo $r1;
        java.lang.ClassLoader $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r2 = virtualinvoke $r1.<android.app.ActivityThread$PackageInfo: java.lang.ClassLoader getClassLoader()>();

        return $r2;

     label1:
        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        return $r2;
    }

    public android.content.ContentResolver getContentResolver()
    {
        android.app.ApplicationContext $r0;
        android.app.ApplicationContext$ApplicationContentResolver r1;

        $r0 := @this: android.app.ApplicationContext;

        r1 = $r0.<android.app.ApplicationContext: android.app.ApplicationContext$ApplicationContentResolver mContentResolver>;

        return r1;
    }

    public java.io.File getDatabasePath(java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        java.io.File $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDatabasesDir()>();

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, $r1);

        return $r2;
    }

    public java.io.File getDir(java.lang.String, int)
    {
        android.app.ApplicationContext $r0;
        int $i0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;
        java.io.File $r3;
        boolean $z0;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("app_");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDataDirFile()>();

        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r3, $r1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r3.<java.io.File: boolean mkdir()>();

        $r1 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ApplicationContext: void setFilePermissionsFromMode(java.lang.String,int,int)>($r1, $i0, 505);

        return $r3;

     label1:
        return $r3;
    }

    public java.io.File getFileStreamPath(java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        java.io.File $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.app.ApplicationContext: java.io.File getFilesDir()>();

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, $r1);

        return $r2;
    }

    public java.io.File getFilesDir()
    {
        android.app.ApplicationContext $r0;
        java.lang.Object $r1;
        java.io.File $r2, $r3;
        boolean $z0;
        java.lang.String $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mFilesDir>;

        if $r2 != null goto label2;

        $r2 = new java.io.File;

        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDataDirFile()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, "files");

        $r0.<android.app.ApplicationContext: java.io.File mFilesDir> = $r2;

     label2:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mFilesDir>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label5;

        $r2 = $r0.<android.app.ApplicationContext: java.io.File mFilesDir>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label4;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ApplicationContext", "Unable to create files directory");

        exitmonitor $r1;

     label3:
        return null;

     label4:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mFilesDir>;

        $r4 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r4, 505, -1, -1);

     label5:
        $r2 = $r0.<android.app.ApplicationContext: java.io.File mFilesDir>;

        exitmonitor $r1;

     label6:
        return $r2;

     label7:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label4 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public android.os.Looper getMainLooper()
    {
        android.app.ApplicationContext $r0;
        android.os.Looper $r1;
        android.app.ActivityThread $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r1 = virtualinvoke $r2.<android.app.ActivityThread: android.os.Looper getLooper()>();

        return $r1;
    }

    final android.content.Context getOuterContext()
    {
        android.app.ApplicationContext $r0;
        android.content.Context r1;

        $r0 := @this: android.app.ApplicationContext;

        r1 = $r0.<android.app.ApplicationContext: android.content.Context mOuterContext>;

        return r1;
    }

    public java.lang.String getPackageCodePath()
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        android.app.ActivityThread$PackageInfo $r2;
        java.lang.RuntimeException $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r1 = virtualinvoke $r2.<android.app.ActivityThread$PackageInfo: java.lang.String getAppDir()>();

        return $r1;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r3;
    }

    public android.content.pm.PackageManager getPackageManager()
    {
        android.app.ApplicationContext $r0;
        android.content.pm.IPackageManager $r1;
        android.content.pm.PackageManager $r2;
        android.app.ApplicationContext$ApplicationPackageManager $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: android.content.pm.PackageManager mPackageManager>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.app.ApplicationContext: android.content.pm.PackageManager mPackageManager>;

        return $r2;

     label1:
        $r1 = staticinvoke <android.app.ActivityThread: android.content.pm.IPackageManager getPackageManager()>();

        if $r1 == null goto label2;

        $r3 = new android.app.ApplicationContext$ApplicationPackageManager;

        specialinvoke $r3.<android.app.ApplicationContext$ApplicationPackageManager: void <init>(android.app.ApplicationContext,android.content.pm.IPackageManager)>($r0, $r1);

        $r0.<android.app.ApplicationContext: android.content.pm.PackageManager mPackageManager> = $r3;

        return $r3;

     label2:
        return null;
    }

    public java.lang.String getPackageName()
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        android.app.ActivityThread$PackageInfo $r2;
        java.lang.RuntimeException $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r1 = virtualinvoke $r2.<android.app.ActivityThread$PackageInfo: java.lang.String getPackageName()>();

        return $r1;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r3;
    }

    public java.lang.String getPackageResourcePath()
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        android.app.ActivityThread$PackageInfo $r2;
        java.lang.RuntimeException $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r1 = virtualinvoke $r2.<android.app.ActivityThread$PackageInfo: java.lang.String getResDir()>();

        return $r1;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r3;
    }

    final android.content.Context getReceiverRestrictedContext()
    {
        android.app.ApplicationContext $r0;
        android.content.Context $r1;
        android.app.ReceiverRestrictedContext $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: android.content.Context mReceiverRestrictedContext>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.app.ApplicationContext: android.content.Context mReceiverRestrictedContext>;

        return $r1;

     label1:
        $r2 = new android.app.ReceiverRestrictedContext;

        $r1 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        specialinvoke $r2.<android.app.ReceiverRestrictedContext: void <init>(android.content.Context)>($r1);

        $r0.<android.app.ApplicationContext: android.content.Context mReceiverRestrictedContext> = $r2;

        return $r2;
    }

    public android.content.res.Resources getResources()
    {
        android.app.ApplicationContext $r0;
        android.content.res.Resources r1;

        $r0 := @this: android.app.ApplicationContext;

        r1 = $r0.<android.app.ApplicationContext: android.content.res.Resources mResources>;

        return r1;
    }

    public android.content.SharedPreferences getSharedPreferences(java.lang.String, int)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        int $i0;
        java.io.FileInputStream $r2;
        java.io.File $r3, $r9;
        java.lang.StringBuilder $r4;
        java.util.HashMap $r5, $r6, $r14;
        java.lang.Object $r7;
        android.app.ApplicationContext$SharedPreferencesImpl $r8, $r15;
        boolean $z0;
        java.lang.Throwable $r10, $r16;
        org.xmlpull.v1.XmlPullParserException $r11, $r19;
        java.io.FileNotFoundException $r12, $r18;
        java.io.IOException $r13, $r17;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getPreferencesDir()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r3, $r1);

        $r5 = <android.app.ApplicationContext: java.util.HashMap sSharedPrefs>;

        entermonitor $r5;

     label01:
        $r6 = <android.app.ApplicationContext: java.util.HashMap sSharedPrefs>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r8 = (android.app.ApplicationContext$SharedPreferencesImpl) $r7;

        if $r8 == null goto label03;

        $z0 = virtualinvoke $r8.<android.app.ApplicationContext$SharedPreferencesImpl: boolean hasFileChanged()>();

        if $z0 != 0 goto label03;

        exitmonitor $r5;

     label02:
        return $r8;

     label03:
        exitmonitor $r5;

     label04:
        $r9 = staticinvoke <android.app.ApplicationContext: java.io.File makeBackupFile(java.io.File)>($r3);

        $z0 = virtualinvoke $r9.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label05;

        virtualinvoke $r3.<java.io.File: boolean delete()>();

        virtualinvoke $r9.<java.io.File: boolean renameTo(java.io.File)>($r3);

     label05:
        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label06;

        $z0 = virtualinvoke $r3.<java.io.File: boolean canRead()>();

        if $z0 != 0 goto label06;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to read preferences file ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ApplicationContext", $r1);

     label06:
        $r6 = null;

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label09;

        $z0 = virtualinvoke $r3.<java.io.File: boolean canRead()>();

        if $z0 == 0 goto label09;

        $r2 = new java.io.FileInputStream;

     label07:
        specialinvoke $r2.<java.io.FileInputStream: void <init>(java.io.File)>($r3);

     label08:
        $r6 = staticinvoke <com.android.internal.util.XmlUtils: java.util.HashMap readMapXml(java.io.InputStream)>($r2);

        virtualinvoke $r2.<java.io.FileInputStream: void close()>();

     label09:
        $r5 = <android.app.ApplicationContext: java.util.HashMap sSharedPrefs>;

        entermonitor $r5;

        if $r8 == null goto label22;

     label10:
        virtualinvoke $r8.<android.app.ApplicationContext$SharedPreferencesImpl: void replace(java.util.Map)>($r6);

     label11:
        exitmonitor $r5;

     label12:
        return $r8;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor $r5;

     label15:
        throw $r10;

     label16:
        $r11 := @caughtexception;

     label17:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ApplicationContext", "getSharedPreferences", $r11);

        goto label09;

     label18:
        $r12 := @caughtexception;

     label19:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ApplicationContext", "getSharedPreferences", $r12);

        goto label09;

     label20:
        $r13 := @caughtexception;

     label21:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ApplicationContext", "getSharedPreferences", $r13);

        goto label09;

     label22:
        $r14 = <android.app.ApplicationContext: java.util.HashMap sSharedPrefs>;

        $r7 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r15 = (android.app.ApplicationContext$SharedPreferencesImpl) $r7;

        $r8 = $r15;

        if $r15 != null goto label11;

        $r8 = new android.app.ApplicationContext$SharedPreferencesImpl;

        specialinvoke $r8.<android.app.ApplicationContext$SharedPreferencesImpl: void <init>(java.io.File,int,java.util.Map)>($r3, $i0, $r6);

     label23:
        $r6 = <android.app.ApplicationContext: java.util.HashMap sSharedPrefs>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r8);

     label24:
        goto label11;

     label25:
        $r16 := @caughtexception;

     label26:
        exitmonitor $r5;

     label27:
        throw $r16;

     label28:
        $r16 := @caughtexception;

        goto label26;

     label29:
        $r17 := @caughtexception;

        $r13 = $r17;

        goto label21;

     label30:
        $r18 := @caughtexception;

        $r12 = $r18;

        goto label19;

     label31:
        $r19 := @caughtexception;

        $r11 = $r19;

        goto label17;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label16;
        catch java.io.FileNotFoundException from label07 to label08 with label18;
        catch java.io.IOException from label07 to label08 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label31;
        catch java.io.FileNotFoundException from label08 to label09 with label30;
        catch java.io.IOException from label08 to label09 with label29;
        catch java.lang.Throwable from label10 to label12 with label25;
        catch java.lang.Throwable from label14 to label15 with label13;
        catch java.lang.Throwable from label22 to label23 with label25;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label26 to label27 with label25;
    }

    public java.lang.Object getSystemService(java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        android.view.WindowManagerImpl $r3;
        android.app.KeyguardManager $r4;
        java.lang.Object $r5;
        android.view.LayoutInflater $r6;
        android.content.Context $r7;
        java.lang.Throwable $r8, $r21;
        android.app.ActivityManager $r9;
        android.app.AlarmManager $r10;
        android.os.PowerManager $r11;
        android.net.ConnectivityManager $r12;
        android.net.wifi.WifiManager $r13;
        android.app.NotificationManager $r14;
        android.location.LocationManager $r15;
        android.app.SearchManager $r16;
        android.hardware.SensorManager $r17;
        android.bluetooth.BluetoothDevice $r18;
        android.os.Vibrator $r19;
        android.app.StatusBarManager $r20;
        android.media.AudioManager $r22;
        android.telephony.TelephonyManager $r23;
        android.text.ClipboardManager $r24;
        android.view.inputmethod.InputMethodManager $r25;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = "window";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label01;

        $r3 = staticinvoke <android.view.WindowManagerImpl: android.view.WindowManagerImpl getDefault()>();

        return $r3;

     label01:
        $r2 = "layout_inflater";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label08;

        $r5 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r5;

     label02:
        $r6 = $r0.<android.app.ApplicationContext: android.view.LayoutInflater mLayoutInflater>;

        if $r6 == null goto label04;

        exitmonitor $r5;

     label03:
        return $r6;

     label04:
        $r7 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r6 = staticinvoke <com.android.internal.policy.PolicyManager: android.view.LayoutInflater makeNewLayoutInflater(android.content.Context)>($r7);

        $r0.<android.app.ApplicationContext: android.view.LayoutInflater mLayoutInflater> = $r6;

        exitmonitor $r5;

     label05:
        return $r6;

     label06:
        $r8 := @caughtexception;

        exitmonitor $r5;

     label07:
        throw $r8;

     label08:
        $r2 = "activity";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label09;

        $r9 = specialinvoke $r0.<android.app.ApplicationContext: android.app.ActivityManager getActivityManager()>();

        return $r9;

     label09:
        $r2 = "alarm";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label10;

        $r10 = specialinvoke $r0.<android.app.ApplicationContext: android.app.AlarmManager getAlarmManager()>();

        return $r10;

     label10:
        $r2 = "power";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label11;

        $r11 = specialinvoke $r0.<android.app.ApplicationContext: android.os.PowerManager getPowerManager()>();

        return $r11;

     label11:
        $r2 = "connectivity";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label12;

        $r12 = specialinvoke $r0.<android.app.ApplicationContext: android.net.ConnectivityManager getConnectivityManager()>();

        return $r12;

     label12:
        $r2 = "wifi";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label13;

        $r13 = specialinvoke $r0.<android.app.ApplicationContext: android.net.wifi.WifiManager getWifiManager()>();

        return $r13;

     label13:
        $r2 = "notification";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label14;

        $r14 = specialinvoke $r0.<android.app.ApplicationContext: android.app.NotificationManager getNotificationManager()>();

        return $r14;

     label14:
        $r2 = "keyguard";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label15;

        $r4 = new android.app.KeyguardManager;

        specialinvoke $r4.<android.app.KeyguardManager: void <init>()>();

        return $r4;

     label15:
        $r2 = "location";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label16;

        $r15 = specialinvoke $r0.<android.app.ApplicationContext: android.location.LocationManager getLocationManager()>();

        return $r15;

     label16:
        $r2 = "search";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label17;

        $r16 = specialinvoke $r0.<android.app.ApplicationContext: android.app.SearchManager getSearchManager()>();

        return $r16;

     label17:
        $r2 = "sensor";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label18;

        $r17 = specialinvoke $r0.<android.app.ApplicationContext: android.hardware.SensorManager getSensorManager()>();

        return $r17;

     label18:
        $r2 = "bluetooth";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label19;

        $r18 = specialinvoke $r0.<android.app.ApplicationContext: android.bluetooth.BluetoothDevice getBluetoothDevice()>();

        return $r18;

     label19:
        $r2 = "vibrator";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label20;

        $r19 = specialinvoke $r0.<android.app.ApplicationContext: android.os.Vibrator getVibrator()>();

        return $r19;

     label20:
        $r2 = "statusbar";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label26;

        $r5 = $r0.<android.app.ApplicationContext: java.lang.Object mSync>;

        entermonitor $r5;

     label21:
        $r20 = $r0.<android.app.ApplicationContext: android.app.StatusBarManager mStatusBarManager>;

        if $r20 != null goto label22;

        $r20 = new android.app.StatusBarManager;

        $r7 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        specialinvoke $r20.<android.app.StatusBarManager: void <init>(android.content.Context)>($r7);

        $r0.<android.app.ApplicationContext: android.app.StatusBarManager mStatusBarManager> = $r20;

     label22:
        $r20 = $r0.<android.app.ApplicationContext: android.app.StatusBarManager mStatusBarManager>;

        exitmonitor $r5;

     label23:
        return $r20;

     label24:
        $r21 := @caughtexception;

        exitmonitor $r5;

     label25:
        throw $r21;

     label26:
        $r2 = "audio";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label27;

        $r22 = specialinvoke $r0.<android.app.ApplicationContext: android.media.AudioManager getAudioManager()>();

        return $r22;

     label27:
        $r2 = "phone";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label28;

        $r23 = specialinvoke $r0.<android.app.ApplicationContext: android.telephony.TelephonyManager getTelephonyManager()>();

        return $r23;

     label28:
        $r2 = "clipboard";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label29;

        $r24 = specialinvoke $r0.<android.app.ApplicationContext: android.text.ClipboardManager getClipboardManager()>();

        return $r24;

     label29:
        $r2 = "input_method";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label30;

        $r25 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.content.Context)>($r0);

        return $r25;

     label30:
        return null;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label21 to label23 with label24;
        catch java.lang.Throwable from label24 to label25 with label24;
    }

    public android.content.res.Resources$Theme getTheme()
    {
        android.app.ApplicationContext $r0;
        int $i0;
        android.content.res.Resources$Theme $r1;
        android.content.res.Resources $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = $r0.<android.app.ApplicationContext: android.content.res.Resources$Theme mTheme>;

        if $r1 != null goto label2;

        $i0 = $r0.<android.app.ApplicationContext: int mThemeResource>;

        if $i0 != 0 goto label1;

        $r0.<android.app.ApplicationContext: int mThemeResource> = 16973829;

     label1:
        $r2 = $r0.<android.app.ApplicationContext: android.content.res.Resources mResources>;

        $r1 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>();

        $r0.<android.app.ApplicationContext: android.content.res.Resources$Theme mTheme> = $r1;

        $r1 = $r0.<android.app.ApplicationContext: android.content.res.Resources$Theme mTheme>;

        $i0 = $r0.<android.app.ApplicationContext: int mThemeResource>;

        virtualinvoke $r1.<android.content.res.Resources$Theme: void applyStyle(int,boolean)>($i0, 1);

     label2:
        $r1 = $r0.<android.app.ApplicationContext: android.content.res.Resources$Theme mTheme>;

        return $r1;
    }

    public android.graphics.drawable.Drawable getWallpaper()
    {
        android.app.ApplicationContext $r0;
        android.graphics.drawable.Drawable $r1;
        android.content.res.Resources $r2;

        $r0 := @this: android.app.ApplicationContext;

        $r1 = virtualinvoke $r0.<android.app.ApplicationContext: android.graphics.drawable.Drawable peekWallpaper()>();

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r2 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.res.Resources getResources()>();

        $r1 = virtualinvoke $r2.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(17301802);

        return $r1;
    }

    public int getWallpaperDesiredMinimumHeight()
    {
        android.app.ApplicationContext $r0;
        android.app.IWallpaperService $r1;
        int $i0;
        android.os.RemoteException $r2;

        $r0 := @this: android.app.ApplicationContext;

     label1:
        $r1 = specialinvoke $r0.<android.app.ApplicationContext: android.app.IWallpaperService getWallpaperService()>();

        $i0 = interfaceinvoke $r1.<android.app.IWallpaperService: int getHeightHint()>();

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getWallpaperDesiredMinimumWidth()
    {
        android.app.ApplicationContext $r0;
        android.app.IWallpaperService $r1;
        int $i0;
        android.os.RemoteException $r2;

        $r0 := @this: android.app.ApplicationContext;

     label1:
        $r1 = specialinvoke $r0.<android.app.ApplicationContext: android.app.IWallpaperService getWallpaperService()>();

        $i0 = interfaceinvoke $r1.<android.app.IWallpaperService: int getWidthHint()>();

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void grantUriPermission(java.lang.String, android.net.Uri, int)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        android.net.Uri $r2;
        int $i0;
        android.app.IActivityManager $r3;
        android.app.ActivityThread $r4;
        android.app.ActivityThread$ApplicationThread $r5;
        android.os.RemoteException $r6;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.net.Uri;

        $i0 := @parameter2: int;

     label1:
        $r3 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r4 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r5 = virtualinvoke $r4.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        interfaceinvoke $r3.<android.app.IActivityManager: void grantUriPermission(android.app.IApplicationThread,java.lang.String,android.net.Uri,int)>($r5, $r1, $r2, $i0);

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    final void init(android.app.ActivityThread$PackageInfo, android.os.IBinder, android.app.ActivityThread)
    {
        android.app.ApplicationContext $r0;
        android.app.ActivityThread$PackageInfo $r1;
        android.os.IBinder $r2;
        android.app.ActivityThread $r3;
        android.content.res.Resources $r4;
        android.app.ApplicationContext$ApplicationContentResolver $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.app.ActivityThread$PackageInfo;

        $r2 := @parameter1: android.os.IBinder;

        $r3 := @parameter2: android.app.ActivityThread;

        $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo> = $r1;

        $r1 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r4 = virtualinvoke $r1.<android.app.ActivityThread$PackageInfo: android.content.res.Resources getResources(android.app.ActivityThread)>($r3);

        $r0.<android.app.ApplicationContext: android.content.res.Resources mResources> = $r4;

        $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread> = $r3;

        $r5 = new android.app.ApplicationContext$ApplicationContentResolver;

        specialinvoke $r5.<android.app.ApplicationContext$ApplicationContentResolver: void <init>(android.content.Context,android.app.ActivityThread)>($r0, $r3);

        $r0.<android.app.ApplicationContext: android.app.ApplicationContext$ApplicationContentResolver mContentResolver> = $r5;

        virtualinvoke $r0.<android.app.ApplicationContext: void setActivityToken(android.os.IBinder)>($r2);

        return;
    }

    final void init(android.content.res.Resources, android.app.ActivityThread)
    {
        android.app.ApplicationContext $r0;
        android.content.res.Resources $r1;
        android.app.ActivityThread $r2;
        android.app.ApplicationContext$ApplicationContentResolver $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.res.Resources;

        $r2 := @parameter1: android.app.ActivityThread;

        $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo> = null;

        $r0.<android.app.ApplicationContext: android.content.res.Resources mResources> = $r1;

        $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread> = $r2;

        $r3 = new android.app.ApplicationContext$ApplicationContentResolver;

        specialinvoke $r3.<android.app.ApplicationContext$ApplicationContentResolver: void <init>(android.content.Context,android.app.ActivityThread)>($r0, $r2);

        $r0.<android.app.ApplicationContext: android.app.ApplicationContext$ApplicationContentResolver mContentResolver> = $r3;

        return;
    }

    public java.io.FileInputStream openFileInput(java.lang.String) throws java.io.FileNotFoundException
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        java.io.File $r2;
        java.io.FileInputStream $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.app.ApplicationContext: java.io.File getFilesDir()>();

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, $r1);

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        return $r3;
    }

    public java.io.FileOutputStream openFileOutput(java.lang.String, int) throws java.io.FileNotFoundException
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1;
        int $i0, $i1;
        boolean $z0;
        java.io.File $r2, $r5;
        java.io.FileOutputStream $r3;
        java.io.FileNotFoundException $r4;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 = 32768 & $i0;

        if $i1 == 0 goto label4;

        $z0 = 1;

     label1:
        $r2 = virtualinvoke $r0.<android.app.ApplicationContext: java.io.File getFilesDir()>();

        $r2 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r2, $r1);

        $r3 = new java.io.FileOutputStream;

     label2:
        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r2, $z0);

        $r1 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ApplicationContext: void setFilePermissionsFromMode(java.lang.String,int,int)>($r1, $i0, 0);

     label3:
        return $r3;

     label4:
        $z0 = 0;

        goto label1;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r2.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r5.<java.io.File: boolean mkdir()>();

        $r1 = virtualinvoke $r5.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r1, 505, -1, -1);

        $r3 = new java.io.FileOutputStream;

        specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File,boolean)>($r2, $z0);

        $r1 = virtualinvoke $r2.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ApplicationContext: void setFilePermissionsFromMode(java.lang.String,int,int)>($r1, $i0, 0);

        return $r3;

        catch java.io.FileNotFoundException from label2 to label3 with label5;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1, $r4;
        int $i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r2;
        java.io.File $r3;
        boolean $z0;
        android.database.sqlite.SQLiteDatabase $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File getDatabasesDir()>();

        $z0 = virtualinvoke $r3.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r3.<java.io.File: boolean mkdir()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r4, 505, -1, -1);

     label1:
        $r3 = specialinvoke $r0.<android.app.ApplicationContext: java.io.File makeFilename(java.io.File,java.lang.String)>($r3, $r1);

        $r5 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r3, $r2);

        $r1 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.app.ApplicationContext: void setFilePermissionsFromMode(java.lang.String,int,int)>($r1, $i0, 0);

        return $r5;
    }

    public android.graphics.drawable.Drawable peekWallpaper()
    {
        android.app.ApplicationContext $r0;
        android.graphics.drawable.Drawable $r1;
        android.app.ApplicationContext$WallpaperCallback $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.app.ApplicationContext;

        entermonitor $r0;

     label1:
        $r1 = $r0.<android.app.ApplicationContext: android.graphics.drawable.Drawable mWallpaper>;

        if $r1 == null goto label3;

        $r1 = $r0.<android.app.ApplicationContext: android.graphics.drawable.Drawable mWallpaper>;

     label2:
        exitmonitor $r0;

        return $r1;

     label3:
        $r2 = new android.app.ApplicationContext$WallpaperCallback;

        specialinvoke $r2.<android.app.ApplicationContext$WallpaperCallback: void <init>(android.app.ApplicationContext)>($r0);

        $r0.<android.app.ApplicationContext: android.app.IWallpaperServiceCallback mWallpaperCallback> = $r2;

        $r1 = specialinvoke $r0.<android.app.ApplicationContext: android.graphics.drawable.Drawable getCurrentWallpaperLocked()>();

        $r0.<android.app.ApplicationContext: android.graphics.drawable.Drawable mWallpaper> = $r1;

        $r1 = $r0.<android.app.ApplicationContext: android.graphics.drawable.Drawable mWallpaper>;

     label4:
        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    final void performFinalCleanup(java.lang.String, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1, $r2;
        android.app.ActivityThread$PackageInfo $r3;
        android.content.Context $r4;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r4 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        virtualinvoke $r3.<android.app.ActivityThread$PackageInfo: void removeContextRegistrations(android.content.Context,java.lang.String,java.lang.String)>($r4, $r1, $r2);

        return;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter)
    {
        android.app.ApplicationContext $r0;
        android.content.BroadcastReceiver $r1;
        android.content.IntentFilter $r2;
        android.content.Intent $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.BroadcastReceiver;

        $r2 := @parameter1: android.content.IntentFilter;

        $r3 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r1, $r2, null, null);

        return $r3;
    }

    public android.content.Intent registerReceiver(android.content.BroadcastReceiver, android.content.IntentFilter, java.lang.String, android.os.Handler)
    {
        android.app.ApplicationContext $r0;
        android.content.BroadcastReceiver $r1;
        android.content.IntentFilter $r2;
        java.lang.String $r3;
        android.os.Handler $r4;
        android.content.Context $r5;
        android.content.Intent $r6;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.BroadcastReceiver;

        $r2 := @parameter1: android.content.IntentFilter;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: android.os.Handler;

        $r5 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r6 = specialinvoke $r0.<android.app.ApplicationContext: android.content.Intent registerReceiverInternal(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler,android.content.Context)>($r1, $r2, $r3, $r4, $r5);

        return $r6;
    }

    public void removeStickyBroadcast(android.content.Intent)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1, $r2;
        android.content.ContentResolver $r3;
        java.lang.String $r4;
        android.net.Uri $r5;
        android.app.IActivityManager $r6;
        android.app.ActivityThread $r7;
        android.app.ActivityThread$ApplicationThread $r8;
        android.os.RemoteException $r9;

        $r0 := @this: android.app.ApplicationContext;

        $r2 := @parameter0: android.content.Intent;

        $r3 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke $r2.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

        if $r4 == null goto label1;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(android.content.Intent)>($r2);

        $r5 = virtualinvoke $r1.<android.content.Intent: android.net.Uri getData()>();

        virtualinvoke $r1.<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>($r5, $r4);

        $r2 = $r1;

     label1:
        $r6 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r7 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r8 = virtualinvoke $r7.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        interfaceinvoke $r6.<android.app.IActivityManager: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent)>($r8, $r2);

     label2:
        return;

     label3:
        $r9 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void revokeUriPermission(android.net.Uri, int)
    {
        android.app.ApplicationContext $r0;
        android.net.Uri $r1;
        int $i0;
        android.app.IActivityManager $r2;
        android.app.ActivityThread $r3;
        android.app.ActivityThread$ApplicationThread $r4;
        android.os.RemoteException $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.net.Uri;

        $i0 := @parameter1: int;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        interfaceinvoke $r2.<android.app.IActivityManager: void revokeUriPermission(android.app.IApplicationThread,android.net.Uri,int)>($r4, $r1, $i0);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    final void scheduleFinalCleanup(java.lang.String, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        java.lang.String $r1, $r2;
        android.app.ActivityThread $r3;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        virtualinvoke $r3.<android.app.ActivityThread: void scheduleContextCleanup(android.app.ApplicationContext,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        return;
    }

    public void sendBroadcast(android.content.Intent)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        android.content.ContentResolver $r2;
        java.lang.String $r3;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        android.os.RemoteException $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

        $r2 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r3 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r2);

     label1:
        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r5 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        interfaceinvoke $r4.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.app.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)>($r6, $r1, $r3, null, -1, null, null, null, 0, 0);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendBroadcast(android.content.Intent, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        java.lang.String $r2, $r4;
        android.content.ContentResolver $r3;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        android.os.RemoteException $r8;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

     label1:
        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.app.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)>($r7, $r1, $r4, null, -1, null, null, $r2, 0, 0);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        java.lang.String $r2, $r4;
        android.content.ContentResolver $r3;
        android.app.IActivityManager $r5;
        android.app.ActivityThread $r6;
        android.app.ActivityThread$ApplicationThread $r7;
        android.os.RemoteException $r8;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r3);

     label1:
        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r6 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r7 = virtualinvoke $r6.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        interfaceinvoke $r5.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.app.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)>($r7, $r1, $r4, null, -1, null, null, $r2, 1, 0);

     label2:
        return;

     label3:
        $r8 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void sendOrderedBroadcast(android.content.Intent, java.lang.String, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        java.lang.String $r2, $r4, $r13;
        android.content.BroadcastReceiver $r3;
        int $i0;
        android.os.Bundle $r5;
        android.os.Handler $r6;
        android.app.IIntentReceiver $r7;
        android.app.ActivityThread$PackageInfo $r8;
        android.app.ActivityThread $r9;
        android.content.Context $r10;
        android.app.Instrumentation $r11;
        android.content.ContentResolver $r12;
        android.app.IActivityManager $r14;
        android.app.ActivityThread$ApplicationThread $r15;
        android.app.ActivityThread$PackageInfo$ReceiverDispatcher $r16;
        android.os.RemoteException $r17;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.BroadcastReceiver;

        $r6 := @parameter3: android.os.Handler;

        $i0 := @parameter4: int;

        $r4 := @parameter5: java.lang.String;

        $r5 := @parameter6: android.os.Bundle;

        $r7 = null;

        if $r3 == null goto label2;

        $r8 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r8 == null goto label5;

        if $r6 != null goto label1;

        $r9 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r9.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label1:
        $r8 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r10 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r9 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r11 = virtualinvoke $r9.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r7 = virtualinvoke $r8.<android.app.ActivityThread$PackageInfo: android.app.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>($r3, $r10, $r6, $r11, 0);

     label2:
        $r12 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r13 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r12);

     label3:
        $r14 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r9 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r15 = virtualinvoke $r9.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        interfaceinvoke $r14.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.app.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)>($r15, $r1, $r13, $r7, $i0, $r4, $r5, $r2, 1, 0);

     label4:
        return;

     label5:
        if $r6 != null goto label6;

        $r9 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r9.<android.app.ActivityThread: android.os.Handler getHandler()>();

     label6:
        $r16 = new android.app.ActivityThread$PackageInfo$ReceiverDispatcher;

        $r10 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        specialinvoke $r16.<android.app.ActivityThread$PackageInfo$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>($r3, $r10, $r6, null, 0);

        $r7 = virtualinvoke $r16.<android.app.ActivityThread$PackageInfo$ReceiverDispatcher: android.app.IIntentReceiver getIIntentReceiver()>();

        goto label2;

     label7:
        $r17 := @caughtexception;

        return;

        catch android.os.RemoteException from label3 to label4 with label7;
    }

    public void sendStickyBroadcast(android.content.Intent)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        android.content.ContentResolver $r2;
        java.lang.String $r3;
        android.app.IActivityManager $r4;
        android.app.ActivityThread $r5;
        android.app.ActivityThread$ApplicationThread $r6;
        android.os.RemoteException $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

        $r2 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r3 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r2);

     label1:
        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r5 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r5.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        interfaceinvoke $r4.<android.app.IActivityManager: int broadcastIntent(android.app.IApplicationThread,android.content.Intent,java.lang.String,android.app.IIntentReceiver,int,java.lang.String,android.os.Bundle,java.lang.String,boolean,boolean)>($r6, $r1, $r3, null, -1, null, null, null, 0, 1);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    final void setActivityToken(android.os.IBinder)
    {
        android.app.ApplicationContext $r0;
        android.os.IBinder $r1;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.os.IBinder;

        $r0.<android.app.ApplicationContext: android.os.IBinder mActivityToken> = $r1;

        return;
    }

    final void setOuterContext(android.content.Context)
    {
        android.app.ApplicationContext $r0;
        android.content.Context $r1;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Context;

        $r0.<android.app.ApplicationContext: android.content.Context mOuterContext> = $r1;

        return;
    }

    public void setTheme(int)
    {
        android.app.ApplicationContext $r0;
        int $i0;

        $r0 := @this: android.app.ApplicationContext;

        $i0 := @parameter0: int;

        $r0.<android.app.ApplicationContext: int mThemeResource> = $i0;

        return;
    }

    public void setWallpaper(android.graphics.Bitmap) throws java.io.IOException
    {
        android.app.ApplicationContext $r0;
        android.graphics.Bitmap $r1;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream $r2, $r5;
        android.app.IWallpaperService $r3;
        android.os.ParcelFileDescriptor $r4;
        android.graphics.Bitmap$CompressFormat $r6;
        android.os.RemoteException $r7;
        java.lang.Throwable $r8;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.graphics.Bitmap;

     label01:
        $r3 = specialinvoke $r0.<android.app.ApplicationContext: android.app.IWallpaperService getWallpaperService()>();

        $r4 = interfaceinvoke $r3.<android.app.IWallpaperService: android.os.ParcelFileDescriptor setWallpaper()>();

     label02:
        if $r4 != null goto label03;

        return;

     label03:
        $r5 = null;

     label04:
        $r2 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r2.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>($r4);

     label05:
        $r6 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r1.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r6, 90, $r2);

     label06:
        if $r2 == null goto label14;

     label07:
        virtualinvoke $r2.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>();

     label08:
        return;

     label09:
        $r7 := @caughtexception;

        return;

     label10:
        $r8 := @caughtexception;

     label11:
        if $r5 == null goto label12;

        virtualinvoke $r5.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>();

     label12:
        throw $r8;

     label13:
        $r8 := @caughtexception;

        $r5 = $r2;

        goto label11;

     label14:
        return;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch android.os.RemoteException from label11 to label13 with label09;
    }

    public void setWallpaper(java.io.InputStream) throws java.io.IOException
    {
        android.app.ApplicationContext $r0;
        java.io.InputStream $r1;
        android.os.ParcelFileDescriptor$AutoCloseOutputStream $r2, $r5;
        android.app.IWallpaperService $r3;
        android.os.ParcelFileDescriptor $r4;
        android.os.RemoteException $r6;
        java.lang.Throwable $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: java.io.InputStream;

     label01:
        $r3 = specialinvoke $r0.<android.app.ApplicationContext: android.app.IWallpaperService getWallpaperService()>();

        $r4 = interfaceinvoke $r3.<android.app.IWallpaperService: android.os.ParcelFileDescriptor setWallpaper()>();

     label02:
        if $r4 != null goto label03;

        return;

     label03:
        $r5 = null;

     label04:
        $r2 = new android.os.ParcelFileDescriptor$AutoCloseOutputStream;

        specialinvoke $r2.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>($r4);

     label05:
        specialinvoke $r0.<android.app.ApplicationContext: void setWallpaper(java.io.InputStream,java.io.FileOutputStream)>($r1, $r2);

     label06:
        if $r2 == null goto label14;

     label07:
        virtualinvoke $r2.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>();

     label08:
        return;

     label09:
        $r6 := @caughtexception;

        return;

     label10:
        $r7 := @caughtexception;

     label11:
        if $r5 == null goto label12;

        virtualinvoke $r5.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>();

     label12:
        throw $r7;

     label13:
        $r7 := @caughtexception;

        $r5 = $r2;

        goto label11;

     label14:
        return;

        catch android.os.RemoteException from label01 to label02 with label09;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch android.os.RemoteException from label11 to label13 with label09;
    }

    public void startActivity(android.content.Intent)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        int $i0;
        android.util.AndroidRuntimeException $r2;
        android.app.ActivityThread $r3;
        android.app.Instrumentation $r4;
        android.content.Context $r5;
        android.app.ActivityThread$ApplicationThread $r6;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

        $i0 = virtualinvoke $r1.<android.content.Intent: int getFlags()>();

        $i0 = $i0 & 268435456;

        if $i0 != 0 goto label1;

        $r2 = new android.util.AndroidRuntimeException;

        specialinvoke $r2.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("Calling startActivity() from outside of an Activity  context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?");

        throw $r2;

     label1:
        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>();

        $r5 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r6 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        virtualinvoke $r4.<android.app.Instrumentation: android.app.Instrumentation$ActivityResult execStartActivity(android.content.Context,android.os.IBinder,android.os.IBinder,android.app.Activity,android.content.Intent,int)>($r5, $r6, null, null, $r1, -1);

        return;
    }

    public boolean startInstrumentation(android.content.ComponentName, java.lang.String, android.os.Bundle)
    {
        android.app.ApplicationContext $r0;
        android.content.ComponentName $r1;
        java.lang.String $r2;
        android.os.Bundle $r3;
        android.app.IActivityManager $r4;
        boolean $z0;
        android.os.RemoteException $r5;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.ComponentName;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.os.Bundle;

     label1:
        $r4 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $z0 = interfaceinvoke $r4.<android.app.IActivityManager: boolean startInstrumentation(android.content.ComponentName,java.lang.String,int,android.os.Bundle,android.app.IInstrumentationWatcher)>($r1, $r2, 0, $r3, null);

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.content.ComponentName startService(android.content.Intent)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        android.app.IActivityManager $r2;
        android.app.ActivityThread $r3;
        android.app.ActivityThread$ApplicationThread $r4;
        android.content.ContentResolver $r5;
        java.lang.String $r6;
        android.content.ComponentName $r7;
        boolean $z0;
        java.lang.SecurityException $r8;
        java.lang.StringBuilder $r9;
        android.os.RemoteException $r10;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r5 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r6 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

        $r7 = interfaceinvoke $r2.<android.app.IActivityManager: android.content.ComponentName startService(android.app.IApplicationThread,android.content.Intent,java.lang.String)>($r4, $r1, $r6);

        if $r7 == null goto label6;

        $r6 = virtualinvoke $r7.<android.content.ComponentName: java.lang.String getPackageName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("!");

     label2:
        if $z0 == 0 goto label6;

        $r8 = new java.lang.SecurityException;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to start service ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" without permission ");

        $r6 = virtualinvoke $r7.<android.content.ComponentName: java.lang.String getClassName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

     label4:
        throw $r8;

     label5:
        $r10 := @caughtexception;

        return null;

     label6:
        return $r7;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public boolean stopService(android.content.Intent)
    {
        android.app.ApplicationContext $r0;
        android.content.Intent $r1;
        android.app.IActivityManager $r2;
        android.app.ActivityThread $r3;
        android.app.ActivityThread$ApplicationThread $r4;
        android.content.ContentResolver $r5;
        java.lang.String $r6;
        int $i0;
        java.lang.SecurityException $r7;
        java.lang.StringBuilder $r8;
        android.os.RemoteException $r9;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.Intent;

     label1:
        $r2 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r3 = $r0.<android.app.ApplicationContext: android.app.ActivityThread mMainThread>;

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>();

        $r5 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.ContentResolver getContentResolver()>();

        $r6 = virtualinvoke $r1.<android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)>($r5);

        $i0 = interfaceinvoke $r2.<android.app.IActivityManager: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String)>($r4, $r1, $r6);

     label2:
        if $i0 >= 0 goto label6;

        $r7 = new java.lang.SecurityException;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not allowed to stop service ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

     label4:
        throw $r7;

     label5:
        $r9 := @caughtexception;

        return 0;

     label6:
        if $i0 == 0 goto label7;

        return 1;

     label7:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void unbindService(android.content.ServiceConnection)
    {
        android.app.ApplicationContext $r0;
        android.content.ServiceConnection $r1;
        android.app.ActivityThread$PackageInfo $r2;
        android.content.Context $r3;
        android.app.IServiceConnection $r4;
        android.app.IActivityManager $r5;
        java.lang.RuntimeException $r6;
        android.os.RemoteException $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.ServiceConnection;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r2 == null goto label3;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r3 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r4 = virtualinvoke $r2.<android.app.ActivityThread$PackageInfo: android.app.IServiceConnection forgetServiceDispatcher(android.content.Context,android.content.ServiceConnection)>($r3, $r1);

     label1:
        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r5.<android.app.IActivityManager: boolean unbindService(android.app.IServiceConnection)>($r4);

     label2:
        return;

     label3:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r6;

     label4:
        $r7 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public void unregisterReceiver(android.content.BroadcastReceiver)
    {
        android.app.ApplicationContext $r0;
        android.content.BroadcastReceiver $r1;
        android.app.ActivityThread$PackageInfo $r2;
        android.content.Context $r3;
        android.app.IIntentReceiver $r4;
        android.app.IActivityManager $r5;
        java.lang.RuntimeException $r6;
        android.os.RemoteException $r7;

        $r0 := @this: android.app.ApplicationContext;

        $r1 := @parameter0: android.content.BroadcastReceiver;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        if $r2 == null goto label3;

        $r2 = $r0.<android.app.ApplicationContext: android.app.ActivityThread$PackageInfo mPackageInfo>;

        $r3 = virtualinvoke $r0.<android.app.ApplicationContext: android.content.Context getOuterContext()>();

        $r4 = virtualinvoke $r2.<android.app.ActivityThread$PackageInfo: android.app.IIntentReceiver forgetReceiverDispatcher(android.content.Context,android.content.BroadcastReceiver)>($r3, $r1);

     label1:
        $r5 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        interfaceinvoke $r5.<android.app.IActivityManager: void unregisterReceiver(android.app.IIntentReceiver)>($r4);

     label2:
        return;

     label3:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not supported in system context");

        throw $r6;

     label4:
        $r7 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label4;
    }
}
