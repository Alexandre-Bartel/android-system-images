public abstract class org.apache.harmony.awt.gl.font.FontManager extends java.lang.Object
{
    public static final java.lang.String COMPONENT_INDEX;
    public static final java.lang.String DEFAULT_NAME;
    static final int DIALOG;
    static final int DIALOGINPUT;
    public static final java.lang.String DIALOG_NAME;
    public static final int EMPTY_FONTS_CAPACITY;
    public static final short ENGLISH_LANGID;
    public static final java.lang.String EXCLUSION_RANGES;
    public static final byte FAMILY_NAME_ID;
    public static final java.lang.String FONT_CHARACTER_ENCODING;
    public static final java.lang.String FONT_FILE_NAME;
    public static final java.lang.String[] FONT_MAPPING_KEYS;
    public static final byte FONT_NAME_ID;
    public static final byte FONT_TYPE_T1;
    public static final byte FONT_TYPE_TT;
    public static final byte FONT_TYPE_UNDEF;
    public static final java.lang.String[] FP_FILE_NAMES;
    public static final java.lang.String[] LOGICAL_FONT_FACES;
    public static final java.lang.String[] LOGICAL_FONT_FAMILIES;
    public static final java.lang.String LOGICAL_FONT_NAME;
    public static final java.lang.String[] LOGICAL_FONT_NAMES;
    static final int MONOSPACED;
    public static final java.lang.String[] OS_VALUES;
    public static final java.lang.String PLATFORM_FONT_NAME;
    public static final byte POSTSCRIPT_NAME_ID;
    static final int SANSSERIF;
    static final int SERIF;
    public static final java.lang.String STYLE_INDEX;
    public static final java.lang.String[] STYLE_NAMES;
    public static final org.apache.harmony.awt.gl.font.FontManager inst;
    private static final java.util.Hashtable style_keys;
    boolean NOT_IMP;
    public java.lang.String[] allFamilies;
    public java.util.Hashtable fProperties;
    public java.util.Hashtable fontsTable;
    public java.lang.ref.ReferenceQueue queue;
    java.util.Hashtable tableLCID;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.Hashtable $r1;
        int $i0, $i1;
        java.lang.String $r2;
        java.lang.Integer $r3;
        org.apache.harmony.awt.gl.CommonGraphics2DFactory $r4;
        org.apache.harmony.awt.gl.font.FontManager $r5;

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String STYLE_INDEX> = "StyleIndex";

        <org.apache.harmony.awt.gl.font.FontManager: int SERIF> = 0;

        <org.apache.harmony.awt.gl.font.FontManager: int SANSSERIF> = 1;

        <org.apache.harmony.awt.gl.font.FontManager: byte POSTSCRIPT_NAME_ID> = 6;

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String PLATFORM_FONT_NAME> = "PlatformFontName";

        <org.apache.harmony.awt.gl.font.FontManager: int MONOSPACED> = 2;

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String LOGICAL_FONT_NAME> = "LogicalFontName";

        <org.apache.harmony.awt.gl.font.FontManager: byte FONT_TYPE_UNDEF> = 0;

        <org.apache.harmony.awt.gl.font.FontManager: byte FONT_TYPE_TT> = 4;

        <org.apache.harmony.awt.gl.font.FontManager: byte FONT_TYPE_T1> = 2;

        <org.apache.harmony.awt.gl.font.FontManager: byte FONT_NAME_ID> = 4;

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String FONT_FILE_NAME> = "filename.PlatformFontName";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String FONT_CHARACTER_ENCODING> = "fontcharset.LogicalFontName.ComponentIndex";

        <org.apache.harmony.awt.gl.font.FontManager: byte FAMILY_NAME_ID> = 1;

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String EXCLUSION_RANGES> = "exclusion.LogicalFontName.ComponentIndex";

        <org.apache.harmony.awt.gl.font.FontManager: short ENGLISH_LANGID> = 1033;

        <org.apache.harmony.awt.gl.font.FontManager: int EMPTY_FONTS_CAPACITY> = 10;

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String DIALOG_NAME> = "Dialog";

        <org.apache.harmony.awt.gl.font.FontManager: int DIALOGINPUT> = 4;

        <org.apache.harmony.awt.gl.font.FontManager: int DIALOG> = 3;

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String DEFAULT_NAME> = "Default";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String COMPONENT_INDEX> = "ComponentIndex";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "LogicalFontName.StyleName.ComponentIndex";

        $r0[1] = "LogicalFontName.ComponentIndex";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] FONT_MAPPING_KEYS> = $r0;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "Serif";

        $r0[1] = "SansSerif";

        $r0[2] = "Monospaced";

        $r0[3] = "Dialog";

        $r0[4] = "DialogInput";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] LOGICAL_FONT_FAMILIES> = $r0;

        $r0 = newarray (java.lang.String)[25];

        $r0[0] = "serif";

        $r0[1] = "serif.plain";

        $r0[2] = "serif.bold";

        $r0[3] = "serif.italic";

        $r0[4] = "serif.bolditalic";

        $r0[5] = "sansserif";

        $r0[6] = "sansserif.plain";

        $r0[7] = "sansserif.bold";

        $r0[8] = "sansserif.italic";

        $r0[9] = "sansserif.bolditalic";

        $r0[10] = "monospaced";

        $r0[11] = "monospaced.plain";

        $r0[12] = "monospaced.bold";

        $r0[13] = "monospaced.italic";

        $r0[14] = "monospaced.bolditalic";

        $r0[15] = "dialog";

        $r0[16] = "dialog.plain";

        $r0[17] = "dialog.bold";

        $r0[18] = "dialog.italic";

        $r0[19] = "dialog.bolditalic";

        $r0[20] = "dialoginput";

        $r0[21] = "dialoginput.plain";

        $r0[22] = "dialoginput.bold";

        $r0[23] = "dialoginput.italic";

        $r0[24] = "dialoginput.bolditalic";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] LOGICAL_FONT_NAMES> = $r0;

        $r0 = newarray (java.lang.String)[25];

        $r0[0] = "Serif";

        $r0[1] = "Serif.plain";

        $r0[2] = "Serif.bold";

        $r0[3] = "Serif.italic";

        $r0[4] = "Serif.bolditalic";

        $r0[5] = "Sansserif";

        $r0[6] = "Sansserif.plain";

        $r0[7] = "Sansserif.bold";

        $r0[8] = "Sansserif.italic";

        $r0[9] = "Sansserif.bolditalic";

        $r0[10] = "Monospaced";

        $r0[11] = "Monospaced.plain";

        $r0[12] = "Monospaced.bold";

        $r0[13] = "Monospaced.italic";

        $r0[14] = "Monospaced.bolditalic";

        $r0[15] = "Dialog";

        $r0[16] = "Dialog.plain";

        $r0[17] = "Dialog.bold";

        $r0[18] = "Dialog.italic";

        $r0[19] = "Dialog.bolditalic";

        $r0[20] = "Dialoginput";

        $r0[21] = "Dialoginput.plain";

        $r0[22] = "Dialoginput.bold";

        $r0[23] = "Dialoginput.italic";

        $r0[24] = "Dialoginput.bolditalic";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] LOGICAL_FONT_FACES> = $r0;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "plain";

        $r0[1] = "bold";

        $r0[2] = "italic";

        $r0[3] = "bolditalic";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] STYLE_NAMES> = $r0;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>(int)>(4);

        <org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable style_keys> = $r1;

        $i0 = 0;

     label1:
        $r0 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] STYLE_NAMES>;

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $r1 = <org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable style_keys>;

        $r0 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] STYLE_NAMES>;

        $r2 = $r0[$i0];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r0 = newarray (java.lang.String)[8];

        $r0[0] = "NT";

        $r0[1] = "98";

        $r0[2] = "2000";

        $r0[3] = "Me";

        $r0[4] = "XP";

        $r0[5] = "Redhat";

        $r0[6] = "Turbo";

        $r0[7] = "SuSE";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] OS_VALUES> = $r0;

        $r0 = newarray (java.lang.String)[24];

        $r0[0] = "/lib/font.properties.Language_Country_Encoding.OSVersion";

        $r0[1] = "/lib/font.properties.Language_Country_Encoding.OS";

        $r0[2] = "/lib/font.properties.Language_Country_Encoding.Version";

        $r0[3] = "/lib/font.properties.Language_Country_Encoding";

        $r0[4] = "/lib/font.properties.Language_Country.OSVersion";

        $r0[5] = "/lib/font.properties.Language_Country.OS";

        $r0[6] = "/lib/font.properties.Language_Country.Version";

        $r0[7] = "/lib/font.properties.Language_Country";

        $r0[8] = "/lib/font.properties.Language_Encoding.OSVersion";

        $r0[9] = "/lib/font.properties.Language_Encoding.OS";

        $r0[10] = "/lib/font.properties.Language_Encoding.Version";

        $r0[11] = "/lib/font.properties.Language_Encoding";

        $r0[12] = "/lib/font.properties.Language.OSVersion";

        $r0[13] = "/lib/font.properties.Language.OS";

        $r0[14] = "/lib/font.properties.Language.Version";

        $r0[15] = "/lib/font.properties.Language";

        $r0[16] = "/lib/font.properties.Encoding.OSVersion";

        $r0[17] = "/lib/font.properties.Encoding.OS";

        $r0[18] = "/lib/font.properties.Encoding.Version";

        $r0[19] = "/lib/font.properties.Encoding";

        $r0[20] = "/lib/font.properties.OSVersion";

        $r0[21] = "/lib/font.properties.OS";

        $r0[22] = "/lib/font.properties.Version";

        $r0[23] = "/lib/font.properties";

        <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] FP_FILE_NAMES> = $r0;

        $r4 = <org.apache.harmony.awt.gl.CommonGraphics2DFactory: org.apache.harmony.awt.gl.CommonGraphics2DFactory inst>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.awt.gl.CommonGraphics2DFactory: org.apache.harmony.awt.gl.font.FontManager getFontManager()>();

        <org.apache.harmony.awt.gl.font.FontManager: org.apache.harmony.awt.gl.font.FontManager inst> = $r5;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String[] $r1;
        java.util.Hashtable $r2;
        java.lang.ref.ReferenceQueue $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.FontManager: boolean NOT_IMP> = 0;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fProperties> = $r2;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable tableLCID> = $r2;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fontsTable> = $r2;

        $r3 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r3.<java.lang.ref.ReferenceQueue: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.ref.ReferenceQueue queue> = $r3;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] getAllFamilies()>();

        $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] allFamilies> = $r1;

        return;
    }

    private java.awt.peer.FontPeer createFontPeer(java.lang.String, int, int, int)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        java.awt.peer.FontPeer $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        if $i2 == -1 goto label1;

        $r2 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.awt.peer.FontPeer createLogicalFontPeer(java.lang.String,int,int)>($r1, $i0, $i1);

        return $r2;

     label1:
        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.awt.peer.FontPeer createPhysicalFontPeer(java.lang.String,int,int)>($r1, $i0, $i1);

        return $r2;
    }

    private java.awt.peer.FontPeer createLogicalFontPeer(java.lang.String, int, int)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1, $r3, $r5, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.harmony.awt.gl.font.FontProperty $r2;
        java.lang.StringBuilder $r4;
        org.apache.harmony.awt.gl.font.FontProperty[] $r6;
        org.apache.harmony.awt.gl.font.FontPeerImpl[] $r7;
        java.util.Hashtable $r10;
        java.lang.Object $r11;
        org.apache.harmony.awt.gl.font.FontManager$HashMapReference $r12;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r13;
        java.awt.peer.FontPeer $r14;
        java.lang.ref.ReferenceQueue $r15;
        org.apache.harmony.awt.gl.font.CompositeFont $r16;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String getFamilyFromLogicalFace(java.lang.String)>($r1);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: org.apache.harmony.awt.gl.font.FontProperty[] getFontProperties(java.lang.String)>($r5);

        if $r6 == null goto label6;

        $i2 = lengthof $r6;

        $r7 = newarray (org.apache.harmony.awt.gl.font.FontPeerImpl)[$i2];

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label5;

        $r2 = $r6[$i3];

        $r5 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontProperty: java.lang.String getName()>();

        $i4 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontProperty: int getStyle()>();

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4);

        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String concat(java.lang.String)>($r8);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String concat(java.lang.String)>($r9);

        $r10 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fontsTable>;

        $r11 = virtualinvoke $r10.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r8);

        $r12 = (org.apache.harmony.awt.gl.font.FontManager$HashMapReference) $r11;

        if $r12 == null goto label2;

        $r11 = virtualinvoke $r12.<java.lang.ref.Reference: java.lang.Object get()>();

        $r13 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r11;

        $r7[$i3] = $r13;

     label2:
        $r13 = $r7[$i3];

        if $r13 != null goto label3;

        $r14 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.awt.peer.FontPeer createPhysicalFontPeer(java.lang.String,int,int)>($r5, $i4, $i1);

        $r13 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r14;

        $r7[$i3] = $r13;

        $r10 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fontsTable>;

        $r12 = new org.apache.harmony.awt.gl.font.FontManager$HashMapReference;

        $r13 = $r7[$i3];

        $r15 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r12.<org.apache.harmony.awt.gl.font.FontManager$HashMapReference: void <init>(org.apache.harmony.awt.gl.font.FontManager,java.lang.String,java.awt.peer.FontPeer,java.lang.ref.ReferenceQueue)>($r0, $r8, $r13, $r15);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r12);

     label3:
        $r13 = $r7[$i3];

        if $r13 != null goto label4;

        $r14 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.awt.peer.FontPeer getDefaultFont(int,int)>($i0, $i1);

        $r13 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r14;

        $r7[$i3] = $r13;

     label4:
        $i3 = $i3 + 1;

        goto label1;

     label5:
        $r16 = new org.apache.harmony.awt.gl.font.CompositeFont;

        specialinvoke $r16.<org.apache.harmony.awt.gl.font.CompositeFont: void <init>(java.lang.String,java.lang.String,int,int,org.apache.harmony.awt.gl.font.FontProperty[],org.apache.harmony.awt.gl.font.FontPeerImpl[])>($r3, $r1, $i0, $i1, $r6, $r7);

        return $r16;

     label6:
        $r14 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.awt.peer.FontPeer getDefaultFont(int,int)>($i0, $i1);

        $r13 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r14;

        return $r13;
    }

    public static java.io.File getFontPropertyFile()
    {
        java.io.File $r0;
        java.lang.String $r1, $r3, $r4, $r5, $r6, $r7, $r9;
        java.util.Locale $r2;
        int $i0, $i1;
        java.lang.String[] $r8;
        boolean $z0;
        java.lang.StringBuilder $r10;

        $r0 = null;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = virtualinvoke $r2.<java.util.Locale: java.lang.String getLanguage()>();

        $r4 = virtualinvoke $r2.<java.util.Locale: java.lang.String getCountry()>();

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("file.encoding");

        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name");

        $r7 = $r6;

        $i0 = 0;

     label1:
        $r8 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] OS_VALUES>;

        $i1 = lengthof $r8;

        if $i0 >= $i1 goto label2;

        $r8 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] OS_VALUES>;

        $r9 = $r8[$i0];

        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>($r9);

        if $z0 == 0 goto label7;

        $r8 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] OS_VALUES>;

        $r7 = $r8[$i0];

     label2:
        $r8 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] OS_VALUES>;

        $i1 = lengthof $r8;

        if $i0 != $i1 goto label3;

        $r7 = null;

     label3:
        $r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.version");

        $i0 = 0;

     label4:
        $r8 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] FP_FILE_NAMES>;

        $i1 = lengthof $r8;

        if $i0 >= $i1 goto label6;

        $r8 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] FP_FILE_NAMES>;

        $r9 = $r8[$i0];

        if $r7 == null goto label5;

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("OS", $r7);

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("Language", $r3);

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("Country", $r4);

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("Encoding", $r5);

        $r9 = virtualinvoke $r9.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("Version", $r6);

        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r9);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label8;

     label6:
        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label9;

        return $r0;

     label7:
        $i0 = $i0 + 1;

        goto label1;

     label8:
        $i0 = $i0 + 1;

        goto label4;

     label9:
        return null;
    }

    public static org.apache.harmony.awt.gl.font.FontManager getInstance()
    {
        org.apache.harmony.awt.gl.font.FontManager r0;

        r0 = <org.apache.harmony.awt.gl.font.FontManager: org.apache.harmony.awt.gl.font.FontManager inst>;

        return r0;
    }

    public static int getLogicalFaceIndex(java.lang.String)
    {
        java.lang.String $r0, $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.String[] $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r1 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] LOGICAL_FONT_NAMES>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r1 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] LOGICAL_FONT_NAMES>;

        $r2 = $r1[$i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r0);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static int getLogicalStyle(java.lang.String)
    {
        java.lang.String $r0;
        java.util.Hashtable $r1;
        java.lang.Object $r2;
        java.lang.Integer $r3;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable style_keys>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (java.lang.Integer) $r2;

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        return -1;
    }

    public static java.util.Properties getProperties(java.io.File)
    {
        java.io.File $r0;
        java.io.FileInputStream $r1;
        java.util.Properties $r2, $r3;
        java.lang.Exception $r4, $r6, $r7;
        java.io.PrintStream $r5;

        $r0 := @parameter0: java.io.File;

        $r3 = null;

        $r1 = new java.io.FileInputStream;

     label1:
        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r0);

     label2:
        $r2 = new java.util.Properties;

     label3:
        specialinvoke $r2.<java.util.Properties: void <init>()>();

     label4:
        virtualinvoke $r2.<java.util.Properties: void load(java.io.InputStream)>($r1);

     label5:
        return $r2;

     label6:
        $r4 := @caughtexception;

     label7:
        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>($r4);

        return $r3;

     label8:
        $r6 := @caughtexception;

        $r4 = $r6;

        goto label7;

     label9:
        $r7 := @caughtexception;

        $r4 = $r7;

        $r3 = $r2;

        goto label7;

        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label4 with label8;
        catch java.lang.Exception from label4 to label5 with label9;
    }

    public static int[] parseIntervals(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        java.lang.String[] $r2, $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 = null;

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        if $r2 == null goto label3;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label3;

        $i0 = lengthof $r2;

        $i0 = $i0 << 1;

        $r1 = newarray (int)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r0 = $r2[$i0];

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("-");

        $i1 = $i0 * 2;

        $r0 = $r3[0];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

        $r1[$i1] = $i2;

        $i1 = $i0 * 2;

        $i1 = $i1 + 1;

        $r0 = $r3[1];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

        $r1[$i1] = $i2;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return $r1;
    }

    private void updateFontsTable()
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        return;
    }

    public abstract java.awt.peer.FontPeer createDefaultFont(int, int);

    public java.lang.String createLogicalFace(java.lang.String, int)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.String[] $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r3 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] STYLE_NAMES>;

        $r1 = $r3[$i0];

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public abstract java.awt.peer.FontPeer createPhysicalFontPeer(java.lang.String, int, int);

    public abstract java.lang.String[] getAllFamilies();

    public abstract java.awt.Font[] getAllFonts();

    public java.awt.peer.FontPeer getDefaultFont(int, int)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        int $i0, $i1;
        java.lang.String $r1, $r3;
        java.awt.peer.FontPeer $r2;
        java.util.Hashtable $r4;
        java.lang.Object $r5;
        org.apache.harmony.awt.gl.font.FontManager$HashMapReference $r6;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r7;
        java.lang.ref.ReferenceQueue $r8;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = "Default";

        specialinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: void updateFontsTable()>();

        $r2 = null;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3);

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r3);

        $r4 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fontsTable>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (org.apache.harmony.awt.gl.font.FontManager$HashMapReference) $r5;

        if $r6 == null goto label1;

        $r5 = virtualinvoke $r6.<java.lang.ref.Reference: java.lang.Object get()>();

        $r2 = (java.awt.peer.FontPeer) $r5;

     label1:
        if $r2 != null goto label2;

        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.awt.peer.FontPeer createDefaultFont(int,int)>($i0, $i1);

        $r7 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r2;

        virtualinvoke $r7.<org.apache.harmony.awt.gl.font.FontPeerImpl: void setFamily(java.lang.String)>("Default");

        $r7 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r2;

        virtualinvoke $r7.<org.apache.harmony.awt.gl.font.FontPeerImpl: void setPSName(java.lang.String)>("Default");

        $r7 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r2;

        virtualinvoke $r7.<org.apache.harmony.awt.gl.font.FontPeerImpl: void setFontName(java.lang.String)>("Default");

        $r4 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fontsTable>;

        $r6 = new org.apache.harmony.awt.gl.font.FontManager$HashMapReference;

        $r8 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r6.<org.apache.harmony.awt.gl.font.FontManager$HashMapReference: void <init>(org.apache.harmony.awt.gl.font.FontManager,java.lang.String,java.awt.peer.FontPeer,java.lang.ref.ReferenceQueue)>($r0, $r1, $r2, $r8);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

        return $r2;

     label2:
        return $r2;
    }

    public int getFaceIndex(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        return -1;
    }

    public java.lang.String getFamily(int)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        int $i0;
        java.lang.String[] $r1;
        java.lang.String $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] allFamilies>;

        $r2 = $r1[$i0];

        return $r2;
    }

    public java.lang.String getFamilyFromLogicalFace(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(".");

        if $i0 != -1 goto label1;

        return $r1;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r1;
    }

    public int getFamilyIndex(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1, $r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.String[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] allFamilies>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] allFamilies>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public java.awt.peer.FontPeer getFontPeer(java.lang.String, int, int)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1, $r4, $r5;
        int $i0, $i1, $i2, $i3;
        java.lang.ref.ReferenceQueue $r2;
        java.awt.peer.FontPeer $r3, $r9;
        java.util.Hashtable $r6;
        java.lang.Object $r7;
        org.apache.harmony.awt.gl.font.FontManager$HashMapReference $r8;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: void updateFontsTable()>();

        $r3 = null;

        $i2 = $i0;

        $i3 = staticinvoke <org.apache.harmony.awt.gl.font.FontManager: int getLogicalFaceIndex(java.lang.String)>($r1);

        if $i3 == -1 goto label4;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String getLogicalFaceFromFont(int,int)>($i0, $i3);

        $r4 = $r1;

        $i2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: int getStyleFromLogicalFace(java.lang.String)>($r1);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

     label1:
        $r6 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fontsTable>;

        $r7 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (org.apache.harmony.awt.gl.font.FontManager$HashMapReference) $r7;

        if $r8 == null goto label2;

        $r7 = virtualinvoke $r8.<java.lang.ref.Reference: java.lang.Object get()>();

        $r3 = (java.awt.peer.FontPeer) $r7;

     label2:
        if $r3 != null goto label5;

        $r9 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.awt.peer.FontPeer createFontPeer(java.lang.String,int,int,int)>($r4, $i2, $i1, $i3);

        $r3 = $r9;

        if $r9 != null goto label3;

        $r3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.awt.peer.FontPeer getFontPeer(java.lang.String,int,int)>("Dialog", $i2, $i1);

     label3:
        $r6 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fontsTable>;

        $r8 = new org.apache.harmony.awt.gl.font.FontManager$HashMapReference;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r8.<org.apache.harmony.awt.gl.font.FontManager$HashMapReference: void <init>(org.apache.harmony.awt.gl.font.FontManager,java.lang.String,java.awt.peer.FontPeer,java.lang.ref.ReferenceQueue)>($r0, $r1, $r3, $r2);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

        return $r3;

     label4:
        $r4 = $r1;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String concat(java.lang.String)>($r5);

        goto label1;

     label5:
        return $r3;
    }

    public org.apache.harmony.awt.gl.font.FontProperty[] getFontProperties(java.lang.String)
    {
        java.lang.String $r0;
        org.apache.harmony.awt.gl.font.FontProperty[] $r1;
        org.apache.harmony.awt.gl.font.FontManager $r2;
        java.util.Hashtable $r3;
        java.lang.Object $r4;
        java.util.Vector $r5;
        int $i0, $i1;
        org.apache.harmony.awt.gl.font.FontProperty $r6;

        $r2 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r0 := @parameter0: java.lang.String;

        $r3 = $r2.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fProperties>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        $r5 = (java.util.Vector) $r4;

        if $r5 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        if $i0 != 0 goto label2;

        return null;

     label2:
        $r1 = newarray (org.apache.harmony.awt.gl.font.FontProperty)[$i0];

        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $r4 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r6 = (org.apache.harmony.awt.gl.font.FontProperty) $r4;

        $r1[$i0] = $r6;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public java.lang.Short getLCID(java.util.Locale)
    {
        java.util.Locale $r0;
        org.apache.harmony.awt.gl.font.FontManager $r1;
        java.util.Hashtable $r2;
        int $i0;
        java.lang.String $r3;
        java.lang.Object $r4;
        java.lang.Short $r5;

        $r1 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r0 := @parameter0: java.util.Locale;

        $r2 = $r1.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable tableLCID>;

        $i0 = virtualinvoke $r2.<java.util.Hashtable: int size()>();

        if $i0 != 0 goto label1;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.font.FontManager: void initLCIDTable()>();

     label1:
        $r2 = $r1.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable tableLCID>;

        $r3 = virtualinvoke $r0.<java.util.Locale: java.lang.String toString()>();

        $r4 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.Short) $r4;

        return $r5;
    }

    public java.lang.String getLogicalFaceFromFont(int, int)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        int $i0, $i1, $i2;
        java.lang.String[] $r1;
        java.lang.String $r2, $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = <org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] LOGICAL_FONT_FACES>;

        $r2 = $r1[$i1];

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>(".");

        if $i1 != -1 goto label1;

        $r3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String createLogicalFace(java.lang.String,int)>($r2, $i0);

        return $r3;

     label1:
        $i2 = $i1 + 1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i1 = staticinvoke <org.apache.harmony.awt.gl.font.FontManager: int getLogicalStyle(java.lang.String)>($r3);

        $i0 = $i0 | $i1;

        $r3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String createLogicalFace(java.lang.String,int)>($r2, $i0);

        return $r3;
    }

    public int getStyleFromLogicalFace(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>(".");

        if $i0 != -1 goto label1;

        return 0;

     label1:
        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $i0 = staticinvoke <org.apache.harmony.awt.gl.font.FontManager: int getLogicalStyle(java.lang.String)>($r1);

        return $i0;
    }

    public java.io.File getTempFontFile() throws java.io.IOException
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        boolean $z0;
        org.apache.harmony.luni.util.NotImplementedException r2;
        java.lang.Throwable r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $z0 = $r0.<org.apache.harmony.awt.gl.font.FontManager: boolean NOT_IMP>;

        if $z0 == 0 goto label1;

        r2 = new org.apache.harmony.luni.util.NotImplementedException;

        specialinvoke r2.<org.apache.harmony.luni.util.NotImplementedException: void <init>(java.lang.String)>("getTempFontFile not Implemented");

        r3 = (java.lang.Throwable) r2;

        throw r3;

     label1:
        return null;
    }

    public abstract void initLCIDTable();

    public boolean isFamilyExist(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontManager $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: int getFamilyIndex(java.lang.String)>($r1);

        if $i0 == -1 goto label1;

        return 1;

     label1:
        return 0;
    }
}
