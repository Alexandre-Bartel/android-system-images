public class org.bouncycastle.crypto.engines.IESEngine extends java.lang.Object
{
    org.bouncycastle.crypto.BasicAgreement agree;
    org.bouncycastle.crypto.BufferedBlockCipher cipher;
    boolean forEncryption;
    org.bouncycastle.crypto.DerivationFunction kdf;
    org.bouncycastle.crypto.Mac mac;
    byte[] macBuf;
    org.bouncycastle.crypto.params.IESParameters param;
    org.bouncycastle.crypto.CipherParameters privParam;
    org.bouncycastle.crypto.CipherParameters pubParam;

    public void <init>(org.bouncycastle.crypto.BasicAgreement, org.bouncycastle.crypto.DerivationFunction, org.bouncycastle.crypto.Mac)
    {
        org.bouncycastle.crypto.engines.IESEngine $r0;
        org.bouncycastle.crypto.BasicAgreement $r1;
        org.bouncycastle.crypto.DerivationFunction $r2;
        org.bouncycastle.crypto.Mac $r3;
        int $i0;
        byte[] $r4;

        $r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: org.bouncycastle.crypto.BasicAgreement;

        $r2 := @parameter1: org.bouncycastle.crypto.DerivationFunction;

        $r3 := @parameter2: org.bouncycastle.crypto.Mac;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree> = $r1;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf> = $r2;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac> = $r3;

        $i0 = interfaceinvoke $r3.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $r4 = newarray (byte)[$i0];

        $r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf> = $r4;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher> = null;

        return;
    }

    public void <init>(org.bouncycastle.crypto.BasicAgreement, org.bouncycastle.crypto.DerivationFunction, org.bouncycastle.crypto.Mac, org.bouncycastle.crypto.BufferedBlockCipher)
    {
        org.bouncycastle.crypto.engines.IESEngine $r0;
        org.bouncycastle.crypto.BasicAgreement $r1;
        org.bouncycastle.crypto.DerivationFunction $r2;
        org.bouncycastle.crypto.Mac $r3;
        org.bouncycastle.crypto.BufferedBlockCipher $r4;
        int $i0;
        byte[] $r5;

        $r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: org.bouncycastle.crypto.BasicAgreement;

        $r2 := @parameter1: org.bouncycastle.crypto.DerivationFunction;

        $r3 := @parameter2: org.bouncycastle.crypto.Mac;

        $r4 := @parameter3: org.bouncycastle.crypto.BufferedBlockCipher;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree> = $r1;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf> = $r2;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac> = $r3;

        $i0 = interfaceinvoke $r3.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $r5 = newarray (byte)[$i0];

        $r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf> = $r5;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher> = $r4;

        return;
    }

    private byte[] decryptBlock(byte[], int, int, byte[]) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.engines.IESEngine $r0;
        byte[] $r1, $r3, $r5, $r9, $r13;
        org.bouncycastle.crypto.params.KDFParameters $r2;
        int $i0, $i1, $i2, $i3, $i4, $i7;
        org.bouncycastle.crypto.params.IESParameters $r4;
        org.bouncycastle.crypto.DerivationFunction $r6;
        org.bouncycastle.crypto.Mac $r7;
        org.bouncycastle.crypto.BufferedBlockCipher $r8;
        byte $b5, $b6;
        org.bouncycastle.crypto.params.KeyParameter $r10;
        org.bouncycastle.crypto.InvalidCipherTextException $r11;
        org.bouncycastle.crypto.params.IESWithCipherParameters $r12;

        $r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 := @parameter3: byte[];

        $r2 = new org.bouncycastle.crypto.params.KDFParameters;

        $r4 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.IESParameters: byte[] getDerivationV()>();

        specialinvoke $r2.<org.bouncycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>($r3, $r5);

        $r4 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $i2 = virtualinvoke $r4.<org.bouncycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $r6 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.DerivationFunction: void init(org.bouncycastle.crypto.DerivationParameters)>($r2);

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i3 = interfaceinvoke $r7.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $i1 = $i1 - $i3;

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        if $r8 != null goto label5;

        $i3 = $i2 / 8;

        $i3 = $i3 + $i1;

        $r5 = newarray (byte)[$i3];

        $r9 = newarray (byte)[$i1];

        $r3 = $r9;

        $r6 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>;

        $i3 = lengthof $r5;

        interfaceinvoke $r6.<org.bouncycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>($r5, 0, $i3);

        $i3 = 0;

     label1:
        if $i3 == $i1 goto label2;

        $i4 = $i0 + $i3;

        $b5 = $r1[$i4];

        $b6 = $r5[$i3];

        $b5 = $b5 ^ $b6;

        $b5 = (byte) $b5;

        $r9[$i3] = $b5;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $r10 = new org.bouncycastle.crypto.params.KeyParameter;

        $i2 = $i2 / 8;

        specialinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r5, $i1, $i2);

     label3:
        $r4 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.IESParameters: byte[] getEncodingV()>();

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r7.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>($r10);

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r7.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r1, $i0, $i1);

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i2 = lengthof $r5;

        interfaceinvoke $r7.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r5, 0, $i2);

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $r5 = $r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf>;

        interfaceinvoke $r7.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>($r5, 0);

        $i0 = $i0 + $i1;

        $i1 = 0;

     label4:
        $r5 = $r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf>;

        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label7;

        $r5 = $r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] macBuf>;

        $b5 = $r5[$i1];

        $i2 = $i0 + $i1;

        $b6 = $r1[$i2];

        if $b5 == $b6 goto label6;

        $r11 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r11.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("Mac codes failed to equal.");

        throw $r11;

     label5:
        $r4 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r12 = (org.bouncycastle.crypto.params.IESWithCipherParameters) $r4;

        $i3 = virtualinvoke $r12.<org.bouncycastle.crypto.params.IESWithCipherParameters: int getCipherKeySize()>();

        $i4 = $i3 / 8;

        $i7 = $i2 / 8;

        $i4 = $i4 + $i7;

        $r5 = newarray (byte)[$i4];

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $r10 = new org.bouncycastle.crypto.params.KeyParameter;

        $i4 = $i3 / 8;

        specialinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r5, 0, $i4);

        virtualinvoke $r8.<org.bouncycastle.crypto.BufferedBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, $r10);

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i4 = virtualinvoke $r8.<org.bouncycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i1);

        $r9 = newarray (byte)[$i4];

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i4 = virtualinvoke $r8.<org.bouncycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r9, 0);

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i7 = virtualinvoke $r8.<org.bouncycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>($r9, $i4);

        $i4 = $i4 + $i7;

        $r13 = newarray (byte)[$i4];

        $r3 = $r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r13, 0, $i4);

        $r10 = new org.bouncycastle.crypto.params.KeyParameter;

        $i3 = $i3 / 8;

        $i2 = $i2 / 8;

        specialinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r5, $i3, $i2);

        goto label3;

     label6:
        $i1 = $i1 + 1;

        goto label4;

     label7:
        return $r3;
    }

    private byte[] encryptBlock(byte[], int, int, byte[]) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.engines.IESEngine $r0;
        byte[] $r1, $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8;
        org.bouncycastle.crypto.params.KDFParameters $r2;
        org.bouncycastle.crypto.params.IESParameters $r4;
        org.bouncycastle.crypto.DerivationFunction $r6;
        org.bouncycastle.crypto.BufferedBlockCipher $r7;
        org.bouncycastle.crypto.Mac $r8;
        byte $b6, $b7;
        org.bouncycastle.crypto.params.KeyParameter $r9;
        org.bouncycastle.crypto.params.IESWithCipherParameters $r10;

        $r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r3 := @parameter3: byte[];

        $r2 = new org.bouncycastle.crypto.params.KDFParameters;

        $r4 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.IESParameters: byte[] getDerivationV()>();

        specialinvoke $r2.<org.bouncycastle.crypto.params.KDFParameters: void <init>(byte[],byte[])>($r3, $r5);

        $r4 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $i2 = virtualinvoke $r4.<org.bouncycastle.crypto.params.IESParameters: int getMacKeySize()>();

        $r6 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.DerivationFunction: void init(org.bouncycastle.crypto.DerivationParameters)>($r2);

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        if $r7 != null goto label4;

        $i3 = $i2 / 8;

        $i3 = $i3 + $i1;

        $r5 = newarray (byte)[$i3];

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i3 = interfaceinvoke $r8.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $i3 = $i3 + $i1;

        $r3 = newarray (byte)[$i3];

        $i3 = $i1;

        $r6 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.DerivationFunction kdf>;

        $i4 = lengthof $r5;

        interfaceinvoke $r6.<org.bouncycastle.crypto.DerivationFunction: int generateBytes(byte[],int,int)>($r5, 0, $i4);

        $i4 = 0;

     label1:
        if $i4 == $i1 goto label2;

        $i5 = $i0 + $i4;

        $b6 = $r1[$i5];

        $b7 = $r5[$i4];

        $b6 = $b6 ^ $b7;

        $b6 = (byte) $b6;

        $r3[$i4] = $b6;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        $r9 = new org.bouncycastle.crypto.params.KeyParameter;

        $i0 = $i2 / 8;

        specialinvoke $r9.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r5, $i1, $i0);

     label3:
        $r4 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r1 = virtualinvoke $r4.<org.bouncycastle.crypto.params.IESParameters: byte[] getEncodingV()>();

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r8.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>($r9);

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r8.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r3, 0, $i3);

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i0 = lengthof $r1;

        interfaceinvoke $r8.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r1, 0, $i0);

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r8.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>($r3, $i3);

        return $r3;

     label4:
        $r4 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param>;

        $r10 = (org.bouncycastle.crypto.params.IESWithCipherParameters) $r4;

        $i4 = virtualinvoke $r10.<org.bouncycastle.crypto.params.IESWithCipherParameters: int getCipherKeySize()>();

        $i3 = $i4 / 8;

        $i5 = $i2 / 8;

        $i3 = $i3 + $i5;

        $r5 = newarray (byte)[$i3];

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $r9 = new org.bouncycastle.crypto.params.KeyParameter;

        $i3 = $i4 / 8;

        specialinvoke $r9.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r5, 0, $i3);

        virtualinvoke $r7.<org.bouncycastle.crypto.BufferedBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r9);

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i5 = virtualinvoke $r7.<org.bouncycastle.crypto.BufferedBlockCipher: int getOutputSize(int)>($i1);

        $i3 = $i5;

        $r8 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.Mac mac>;

        $i8 = interfaceinvoke $r8.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $i5 = $i8 + $i5;

        $r3 = newarray (byte)[$i5];

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        $i0 = virtualinvoke $r7.<org.bouncycastle.crypto.BufferedBlockCipher: int processBytes(byte[],int,int,byte[],int)>($r1, $i0, $i1, $r3, 0);

        $r7 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BufferedBlockCipher cipher>;

        virtualinvoke $r7.<org.bouncycastle.crypto.BufferedBlockCipher: int doFinal(byte[],int)>($r3, $i0);

        $r9 = new org.bouncycastle.crypto.params.KeyParameter;

        $i0 = $i4 / 8;

        $i1 = $i2 / 8;

        specialinvoke $r9.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[],int,int)>($r5, $i0, $i1);

        goto label3;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters, org.bouncycastle.crypto.CipherParameters, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.engines.IESEngine $r0;
        boolean $z0;
        org.bouncycastle.crypto.CipherParameters $r1, $r2, $r3;
        org.bouncycastle.crypto.params.IESParameters $r4;

        $r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $r2 := @parameter2: org.bouncycastle.crypto.CipherParameters;

        $r3 := @parameter3: org.bouncycastle.crypto.CipherParameters;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: boolean forEncryption> = $z0;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam> = $r1;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam> = $r2;

        $r4 = (org.bouncycastle.crypto.params.IESParameters) $r3;

        $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.params.IESParameters param> = $r4;

        return;
    }

    public byte[] processBlock(byte[], int, int) throws org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.engines.IESEngine $r0;
        byte[] $r1, $r5;
        int $i0, $i1;
        org.bouncycastle.crypto.BasicAgreement $r2;
        org.bouncycastle.crypto.CipherParameters $r3;
        java.math.BigInteger $r4;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.engines.IESEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>;

        $r3 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters privParam>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BasicAgreement: void init(org.bouncycastle.crypto.CipherParameters)>($r3);

        $r2 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.BasicAgreement agree>;

        $r3 = $r0.<org.bouncycastle.crypto.engines.IESEngine: org.bouncycastle.crypto.CipherParameters pubParam>;

        $r4 = interfaceinvoke $r2.<org.bouncycastle.crypto.BasicAgreement: java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)>($r3);

        $z0 = $r0.<org.bouncycastle.crypto.engines.IESEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r1 = specialinvoke $r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] encryptBlock(byte[],int,int,byte[])>($r1, $i0, $i1, $r5);

        return $r1;

     label1:
        $r5 = virtualinvoke $r4.<java.math.BigInteger: byte[] toByteArray()>();

        $r1 = specialinvoke $r0.<org.bouncycastle.crypto.engines.IESEngine: byte[] decryptBlock(byte[],int,int,byte[])>($r1, $i0, $i1, $r5);

        return $r1;
    }
}
