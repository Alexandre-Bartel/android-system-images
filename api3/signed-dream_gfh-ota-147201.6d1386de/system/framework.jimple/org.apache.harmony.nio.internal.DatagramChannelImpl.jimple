class org.apache.harmony.nio.internal.DatagramChannelImpl extends java.nio.channels.DatagramChannel implements org.apache.harmony.luni.platform.FileDescriptorHandler
{
    private static final int DEFAULT_TIMEOUT;
    private static final int ERRCODE_SOCKET_NONBLOCKING_WOULD_BLOCK;
    private static final org.apache.harmony.luni.platform.INetworkSystem networkSystem;
    private static final byte[] stubArray;
    java.net.InetSocketAddress connectAddress;
    boolean connected;
    private java.io.FileDescriptor fd;
    boolean isBound;
    private int localPort;
    private final java.lang.Object readLock;
    private java.net.DatagramSocket socket;
    private int trafficClass;
    private final java.lang.Object writeLock;

    static void <clinit>()
    {
        org.apache.harmony.luni.platform.INetworkSystem $r0;
        byte[] $r1;

        <org.apache.harmony.nio.internal.DatagramChannelImpl: int ERRCODE_SOCKET_NONBLOCKING_WOULD_BLOCK> = -211;

        <org.apache.harmony.nio.internal.DatagramChannelImpl: int DEFAULT_TIMEOUT> = 1;

        $r0 = staticinvoke <org.apache.harmony.luni.platform.Platform: org.apache.harmony.luni.platform.INetworkSystem getNetworkSystem()>();

        <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem> = $r0;

        $r1 = newarray (byte)[0];

        <org.apache.harmony.nio.internal.DatagramChannelImpl: byte[] stubArray> = $r1;

        return;
    }

    private void <init>()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.channels.spi.SelectorProvider $r1;
        java.lang.Object $r2;
        java.io.FileDescriptor $r3;
        java.net.InetSocketAddress $r4;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();

        specialinvoke $r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>($r1);

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket> = null;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = null;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean connected> = 0;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isBound> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object readLock> = $r2;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object writeLock> = $r2;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int trafficClass> = 0;

        $r3 = new java.io.FileDescriptor;

        specialinvoke $r3.<java.io.FileDescriptor: void <init>()>();

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd> = $r3;

        $r4 = new java.net.InetSocketAddress;

        specialinvoke $r4.<java.net.InetSocketAddress: void <init>(int)>(0);

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = $r4;

        return;
    }

    protected void <init>(java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.channels.spi.SelectorProvider $r1;
        java.lang.Object $r2;
        java.io.FileDescriptor $r3;
        org.apache.harmony.luni.platform.INetworkSystem $r4;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke $r0.<java.nio.channels.DatagramChannel: void <init>(java.nio.channels.spi.SelectorProvider)>($r1);

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket> = null;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = null;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean connected> = 0;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isBound> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object readLock> = $r2;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object writeLock> = $r2;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int trafficClass> = 0;

        $r3 = new java.io.FileDescriptor;

        specialinvoke $r3.<java.io.FileDescriptor: void <init>()>();

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd> = $r3;

        $r4 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r3 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        interfaceinvoke $r4.<org.apache.harmony.luni.platform.INetworkSystem: void createDatagramSocket(java.io.FileDescriptor,boolean)>($r3, 1);

        return;
    }

    private int calculateByteBufferArray(java.nio.ByteBuffer[], int, int)
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.nio.ByteBuffer $r2;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = 0;

        $i4 = $i0;

     label1:
        $i2 = $i0 + $i1;

        if $i4 >= $i2 goto label2;

        $r2 = $r1[$i4];

        $i2 = virtualinvoke $r2.<java.nio.Buffer: int remaining()>();

        $i3 = $i3 + $i2;

        $i4 = $i4 + 1;

        goto label1;

     label2:
        return $i3;
    }

    private void checkNotNull(java.nio.ByteBuffer)
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1;
        java.lang.NullPointerException $r2;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    private void checkOpen() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r1;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $z0 = virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r1 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r1.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void checkOpenConnected() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        boolean $z0;
        java.nio.channels.NotYetConnectedException $r1;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkOpen()>();

        $z0 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        if $z0 != 0 goto label1;

        $r1 = new java.nio.channels.NotYetConnectedException;

        specialinvoke $r1.<java.nio.channels.NotYetConnectedException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    private void checkWritable(java.nio.ByteBuffer)
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke $r1.<java.nio.Buffer: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    private int readImpl(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1;
        java.lang.Object $r2;
        boolean $z0;
        byte $b0;
        int $i1, $i2, $i3;
        org.apache.harmony.luni.platform.INetworkSystem $r3;
        java.io.FileDescriptor $r4;
        byte[] $r5;
        java.io.InterruptedIOException $r6;
        java.lang.Throwable $r7, $r8;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object readLock>;

        entermonitor $r2;

     label01:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>();

        $z0 = virtualinvoke $r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

     label02:
        if $z0 == 0 goto label10;

     label03:
        $b0 = 0;

     label04:
        $i1 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label14;

        $i3 = staticinvoke <org.apache.harmony.nio.AddressUtil: int getDirectBufferAddress(java.nio.Buffer)>($r1);

        $z0 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

     label05:
        if $z0 == 0 goto label11;

        $r3 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

     label06:
        $r4 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i2 = interfaceinvoke $r3.<org.apache.harmony.luni.platform.INetworkSystem: int recvConnectedDatagramDirect(java.io.FileDescriptor,java.net.DatagramPacket,int,int,int,int,boolean)>($r4, null, $i3, $i1, $i2, $b0, 0);

     label07:
        if $i2 <= 0 goto label21;

        $z0 = 1;

     label08:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        exitmonitor $r2;

     label09:
        return $i2;

     label10:
        $b0 = 1;

        goto label04;

     label11:
        $r3 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r4 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

     label12:
        $i2 = interfaceinvoke $r3.<org.apache.harmony.luni.platform.INetworkSystem: int receiveDatagramDirect(java.io.FileDescriptor,java.net.DatagramPacket,int,int,int,int,boolean)>($r4, null, $i3, $i1, $i2, $b0, 0);

     label13:
        goto label07;

     label14:
        $r5 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $i3 = virtualinvoke $r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = $i1 + $i3;

        $z0 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

     label15:
        if $z0 == 0 goto label18;

        $r3 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

     label16:
        $r4 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i2 = interfaceinvoke $r3.<org.apache.harmony.luni.platform.INetworkSystem: int recvConnectedDatagram(java.io.FileDescriptor,java.net.DatagramPacket,byte[],int,int,int,boolean)>($r4, null, $r5, $i1, $i2, $b0, 0);

     label17:
        goto label07;

     label18:
        $r3 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

     label19:
        $r4 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i2 = interfaceinvoke $r3.<org.apache.harmony.luni.platform.INetworkSystem: int receiveDatagram(java.io.FileDescriptor,java.net.DatagramPacket,byte[],int,int,int,boolean)>($r4, null, $r5, $i1, $i2, $b0, 0);

     label20:
        goto label07;

     label21:
        $z0 = 0;

        goto label08;

     label22:
        $r6 := @caughtexception;

        goto label27;

     label23:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        exitmonitor $r2;

     label24:
        return 0;

     label25:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label26:
        throw $r7;

     label27:
        $z0 = 0;

        goto label23;

     label28:
        $r8 := @caughtexception;

        goto label30;

     label29:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        throw $r8;

     label30:
        $z0 = 0;

        goto label29;

        catch java.io.InterruptedIOException from label01 to label02 with label22;
        catch java.io.InterruptedIOException from label03 to label05 with label22;
        catch java.io.InterruptedIOException from label06 to label07 with label22;
        catch java.lang.Throwable from label01 to label07 with label28;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.io.InterruptedIOException from label12 to label13 with label22;
        catch java.io.InterruptedIOException from label14 to label15 with label22;
        catch java.io.InterruptedIOException from label16 to label17 with label22;
        catch java.io.InterruptedIOException from label19 to label20 with label22;
        catch java.lang.Throwable from label11 to label20 with label28;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
        catch java.lang.Throwable from label29 to label30 with label25;
    }

    private java.net.SocketAddress receiveDirectImpl(java.nio.ByteBuffer, boolean) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1;
        boolean $z0, $z1;
        java.net.DatagramPacket $r2;
        byte[] $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.harmony.luni.platform.INetworkSystem $r4;
        java.io.FileDescriptor $r5;
        byte $b4;
        java.lang.SecurityManager $r6;
        java.net.InetAddress $r7;
        java.lang.String $r8;
        java.net.SocketAddress $r9;
        java.lang.SecurityException $r10;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $z0 := @parameter1: boolean;

        $r2 = new java.net.DatagramPacket;

        $r3 = <org.apache.harmony.nio.internal.DatagramChannelImpl: byte[] stubArray>;

        specialinvoke $r2.<java.net.DatagramPacket: void <init>(byte[],int)>($r3, 0);

        $i0 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

     label01:
        $i1 = staticinvoke <org.apache.harmony.nio.AddressUtil: int getDirectBufferAddress(java.nio.Buffer)>($r1);

        $z1 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        if $z1 == 0 goto label08;

        $r4 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r5 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $i3 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $z1 = virtualinvoke $r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

        if $z1 == 0 goto label07;

        $b4 = 0;

     label02:
        $i1 = interfaceinvoke $r4.<org.apache.harmony.luni.platform.INetworkSystem: int recvConnectedDatagramDirect(java.io.FileDescriptor,java.net.DatagramPacket,int,int,int,int,boolean)>($r5, $r2, $i1, $i2, $i3, $b4, 0);

     label03:
        $r6 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        $z1 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        if $z1 != 0 goto label05;

        if $r6 == null goto label05;

     label04:
        $r7 = virtualinvoke $r2.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        $r8 = virtualinvoke $r7.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke $r2.<java.net.DatagramPacket: int getPort()>();

        virtualinvoke $r6.<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>($r8, $i2);

     label05:
        if $r2 == null goto label12;

        $r7 = virtualinvoke $r2.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        if $r7 == null goto label12;

        if $i1 <= 0 goto label06;

        $i0 = $i0 + $i1;

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i0);

     label06:
        $r9 = virtualinvoke $r2.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();

        return $r9;

     label07:
        $b4 = 1;

        goto label02;

     label08:
        $r4 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r5 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $i3 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $z1 = virtualinvoke $r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

        if $z1 == 0 goto label10;

        $b4 = 0;

     label09:
        $i1 = interfaceinvoke $r4.<org.apache.harmony.luni.platform.INetworkSystem: int receiveDatagramDirect(java.io.FileDescriptor,java.net.DatagramPacket,int,int,int,int,boolean)>($r5, $r2, $i1, $i2, $i3, $b4, 0);

        goto label03;

     label10:
        $b4 = 1;

        goto label09;

     label11:
        $r10 := @caughtexception;

        $r2 = null;

        goto label05;

     label12:
        if $z0 != 0 goto label01;

        return null;

        catch java.lang.SecurityException from label04 to label05 with label11;
    }

    private java.net.SocketAddress receiveImpl(java.nio.ByteBuffer, boolean) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        java.net.DatagramPacket $r2;
        byte[] $r3;
        org.apache.harmony.luni.platform.INetworkSystem $r4;
        java.io.FileDescriptor $r5;
        byte $b3;
        java.lang.SecurityManager $r6;
        java.net.InetAddress $r7;
        java.lang.String $r8;
        java.net.SocketAddress $r9;
        java.lang.SecurityException $r10;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $z0 := @parameter1: boolean;

        $i0 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $z1 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z1 == 0 goto label07;

        $r2 = new java.net.DatagramPacket;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $i2 = virtualinvoke $r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i1 = $i1 + $i2;

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        specialinvoke $r2.<java.net.DatagramPacket: void <init>(byte[],int,int)>($r3, $i1, $i2);

     label01:
        $z1 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        if $z1 == 0 goto label09;

        $r4 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r5 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r3 = virtualinvoke $r2.<java.net.DatagramPacket: byte[] getData()>();

        $i1 = virtualinvoke $r2.<java.net.DatagramPacket: int getOffset()>();

        $i2 = virtualinvoke $r2.<java.net.DatagramPacket: int getLength()>();

        $z1 = virtualinvoke $r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

        if $z1 == 0 goto label08;

        $b3 = 0;

     label02:
        $i1 = interfaceinvoke $r4.<org.apache.harmony.luni.platform.INetworkSystem: int recvConnectedDatagram(java.io.FileDescriptor,java.net.DatagramPacket,byte[],int,int,int,boolean)>($r5, $r2, $r3, $i1, $i2, $b3, 0);

     label03:
        $r6 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        $z1 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        if $z1 != 0 goto label05;

        if $r6 == null goto label05;

     label04:
        $r7 = virtualinvoke $r2.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        $r8 = virtualinvoke $r7.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke $r2.<java.net.DatagramPacket: int getPort()>();

        virtualinvoke $r6.<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>($r8, $i2);

     label05:
        if $r2 == null goto label14;

        $r7 = virtualinvoke $r2.<java.net.DatagramPacket: java.net.InetAddress getAddress()>();

        if $r7 == null goto label14;

        if $i1 <= 0 goto label06;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label13;

        $i0 = $i0 + $i1;

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i0);

     label06:
        $r9 = virtualinvoke $r2.<java.net.DatagramPacket: java.net.SocketAddress getSocketAddress()>();

        return $r9;

     label07:
        $r2 = new java.net.DatagramPacket;

        $i1 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $r3 = newarray (byte)[$i1];

        $i1 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        specialinvoke $r2.<java.net.DatagramPacket: void <init>(byte[],int)>($r3, $i1);

        goto label01;

     label08:
        $b3 = 1;

        goto label02;

     label09:
        $r4 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r5 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r3 = virtualinvoke $r2.<java.net.DatagramPacket: byte[] getData()>();

        $i1 = virtualinvoke $r2.<java.net.DatagramPacket: int getOffset()>();

        $i2 = virtualinvoke $r2.<java.net.DatagramPacket: int getLength()>();

        $z1 = virtualinvoke $r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

        if $z1 == 0 goto label11;

        $b3 = 0;

     label10:
        $i1 = interfaceinvoke $r4.<org.apache.harmony.luni.platform.INetworkSystem: int receiveDatagram(java.io.FileDescriptor,java.net.DatagramPacket,byte[],int,int,int,boolean)>($r5, $r2, $r3, $i1, $i2, $b3, 0);

        goto label03;

     label11:
        $b3 = 1;

        goto label10;

     label12:
        $r10 := @caughtexception;

        $r2 = null;

        goto label05;

     label13:
        $r3 = virtualinvoke $r2.<java.net.DatagramPacket: byte[] getData()>();

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r3, 0, $i1);

        goto label06;

     label14:
        if $z0 != 0 goto label01;

        return null;

        catch java.lang.SecurityException from label04 to label05 with label12;
    }

    private int writeImpl(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.io.FileDescriptor $r1;
        boolean $z0;
        java.nio.ByteBuffer $r2;
        java.lang.Object $r3;
        int $i0, $i1, $i2;
        org.apache.harmony.luni.platform.INetworkSystem $r4;
        byte[] $r5;
        java.net.SocketException $r6;
        java.lang.Throwable $r7, $r9;
        org.apache.harmony.luni.util.ErrorCodeException $r8;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r2 := @parameter0: java.nio.ByteBuffer;

        $r3 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object writeLock>;

        entermonitor $r3;

     label01:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>();

        $i0 = virtualinvoke $r2.<java.nio.Buffer: int remaining()>();

        $i1 = virtualinvoke $r2.<java.nio.Buffer: int position()>();

        $z0 = virtualinvoke $r2.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label07;

        $i2 = staticinvoke <org.apache.harmony.nio.AddressUtil: int getDirectBufferAddress(java.nio.Buffer)>($r2);

     label02:
        $r4 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

     label03:
        $z0 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isBound>;

        $i0 = interfaceinvoke $r4.<org.apache.harmony.luni.platform.INetworkSystem: int sendConnectedDatagramDirect(java.io.FileDescriptor,int,int,int,boolean)>($r1, $i2, $i1, $i0, $z0);

     label04:
        if $i0 <= 0 goto label11;

        $z0 = 1;

     label05:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        exitmonitor $r3;

     label06:
        return $i0;

     label07:
        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int arrayOffset()>();

     label08:
        $i1 = $i1 + $i2;

        $r4 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

     label09:
        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $r5 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $z0 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isBound>;

        $i0 = interfaceinvoke $r4.<org.apache.harmony.luni.platform.INetworkSystem: int sendConnectedDatagram(java.io.FileDescriptor,byte[],int,int,boolean)>($r1, $r5, $i1, $i0, $z0);

     label10:
        goto label04;

     label11:
        $z0 = 0;

        goto label05;

     label12:
        $r6 := @caughtexception;

     label13:
        $r7 = virtualinvoke $r6.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $z0 = $r7 instanceof org.apache.harmony.luni.util.ErrorCodeException;

        if $z0 == 0 goto label18;

        $r7 = virtualinvoke $r6.<java.lang.Throwable: java.lang.Throwable getCause()>();

        $r8 = (org.apache.harmony.luni.util.ErrorCodeException) $r7;

        $i0 = virtualinvoke $r8.<org.apache.harmony.luni.util.ErrorCodeException: int getErrorCode()>();

     label14:
        if -211 != $i0 goto label18;

        goto label17;

     label15:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        exitmonitor $r3;

     label16:
        return 0;

     label17:
        $z0 = 0;

        goto label15;

     label18:
        throw $r6;

     label19:
        $r7 := @caughtexception;

        goto label23;

     label20:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        throw $r7;

     label21:
        $r9 := @caughtexception;

        exitmonitor $r3;

     label22:
        throw $r9;

     label23:
        $z0 = 0;

        goto label20;

        catch java.net.SocketException from label01 to label02 with label12;
        catch java.net.SocketException from label03 to label04 with label12;
        catch java.lang.Throwable from label01 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.net.SocketException from label07 to label08 with label12;
        catch java.net.SocketException from label09 to label10 with label12;
        catch java.lang.Throwable from label07 to label10 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label20 to label22 with label21;
    }

    public java.nio.channels.DatagramChannel connect(java.net.SocketAddress) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.net.SocketAddress $r1;
        int $i0, $i1;
        boolean $z0;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3, $r11;
        java.net.InetSocketAddress $r4;
        java.lang.SecurityManager $r5;
        java.net.InetAddress $r6;
        org.apache.harmony.luni.platform.INetworkSystem $r7;
        java.io.FileDescriptor $r8;
        java.lang.String $r9;
        java.net.ConnectException $r10;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.net.SocketAddress;

        entermonitor $r0;

     label01:
        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkOpen()>();

        $z0 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean connected>;

        if $z0 == 0 goto label03;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label02:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

     label03:
        $r4 = staticinvoke <org.apache.harmony.nio.internal.SocketChannelImpl: java.net.InetSocketAddress validateAddress(java.net.SocketAddress)>($r1);

        $r5 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r5 == null goto label04;

        $r6 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $z0 = virtualinvoke $r6.<java.net.InetAddress: boolean isMulticastAddress()>();

        if $z0 == 0 goto label10;

        $r6 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        virtualinvoke $r5.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>($r6);

     label04:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>();

     label05:
        $r7 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

     label06:
        $r8 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i1 = virtualinvoke $r4.<java.net.InetSocketAddress: int getPort()>();

        $i0 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int trafficClass>;

        $r6 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        interfaceinvoke $r7.<org.apache.harmony.luni.platform.INetworkSystem: void connectDatagram(java.io.FileDescriptor,int,int,java.net.InetAddress)>($r8, $i1, $i0, $r6);

     label07:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>(1);

     label08:
        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = $r4;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean connected> = 1;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isBound> = 1;

     label09:
        exitmonitor $r0;

        return $r0;

     label10:
        $r6 = virtualinvoke $r4.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r9 = virtualinvoke $r6.<java.net.InetAddress: java.lang.String getHostName()>();

        $i0 = virtualinvoke $r4.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke $r5.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r9, $i0);

        goto label04;

     label11:
        $r10 := @caughtexception;

        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>(1);

        goto label08;

     label12:
        $r11 := @caughtexception;

        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>(1);

        throw $r11;

     label13:
        nop;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.net.ConnectException from label04 to label05 with label11;
        catch java.net.ConnectException from label06 to label07 with label11;
        catch java.lang.Throwable from label04 to label07 with label12;
        catch java.lang.Throwable from label07 to label09 with label02;
        catch java.lang.Throwable from label10 to label13 with label02;
    }

    public java.nio.channels.DatagramChannel disconnect() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0, $r2;
        java.io.FileDescriptor $r1;
        boolean $z0;
        org.apache.harmony.luni.platform.INetworkSystem $r3;
        java.net.DatagramSocket $r4;
        java.lang.Throwable $r5;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        entermonitor $r0;

     label1:
        $z0 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>();

     label2:
        if $z0 != 0 goto label5;

     label3:
        $r2 = $r0;

     label4:
        exitmonitor $r0;

        return $r2;

     label5:
        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean connected> = 0;

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress> = null;

        $r3 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        interfaceinvoke $r3.<org.apache.harmony.luni.platform.INetworkSystem: void disconnectDatagram(java.io.FileDescriptor)>($r1);

        $r4 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r4 == null goto label6;

        $r4 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket>;

        virtualinvoke $r4.<java.net.DatagramSocket: void disconnect()>();

     label6:
        $r2 = $r0;

        goto label4;

     label7:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public java.io.FileDescriptor getFD()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.io.FileDescriptor r1;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        return r1;
    }

    java.net.InetAddress getLocalAddress()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.io.FileDescriptor $r1;
        org.apache.harmony.luni.platform.INetworkSystem $r2;
        boolean $z0;
        java.net.InetAddress $r3;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r2 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $z0 = staticinvoke <org.apache.harmony.luni.net.NetUtil: boolean preferIPv6Addresses()>();

        $r3 = interfaceinvoke $r2.<org.apache.harmony.luni.platform.INetworkSystem: java.net.InetAddress getSocketLocalAddress(java.io.FileDescriptor,boolean)>($r1, $z0);

        return $r3;
    }

    protected void implCloseSelectableChannel() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.io.FileDescriptor $r1;
        boolean $z0;
        java.net.DatagramSocket $r2;
        org.apache.harmony.luni.platform.INetworkSystem $r3;
        java.lang.Throwable $r4;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        entermonitor $r0;

     label1:
        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean connected> = 0;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r2 == null goto label3;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket>;

        $z0 = virtualinvoke $r2.<java.net.DatagramSocket: boolean isClosed()>();

        if $z0 != 0 goto label3;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket>;

        virtualinvoke $r2.<java.net.DatagramSocket: void close()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        interfaceinvoke $r3.<org.apache.harmony.luni.platform.INetworkSystem: void socketClose(java.io.FileDescriptor)>($r1);

     label4:
        goto label2;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $z0 := @parameter0: boolean;

        return;
    }

    public boolean isConnected()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        entermonitor $r0;

     label1:
        z0 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean connected>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1, $r4;
        byte[] $r2;
        java.lang.NullPointerException $r3;
        boolean $z0;
        int $i0, $i1, $i2;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        if $r1 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkOpenConnected()>();

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkWritable(java.nio.ByteBuffer)>($r1);

        $z0 = virtualinvoke $r1.<java.nio.Buffer: boolean hasRemaining()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label5;

     label3:
        $i0 = specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>($r1);

        $i1 = $i0;

        if $i0 <= 0 goto label4;

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $i0 = $i2 + $i0;

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i0);

     label4:
        return $i1;

     label5:
        $i1 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $r2 = newarray (byte)[$i1];

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r2);

        $i0 = specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>($r4);

        $i1 = $i0;

        if $i0 <= 0 goto label4;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r2, 0, $i0);

        goto label4;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0, $i1, $i2, $i5, $i7;
        long $l3, $l4;
        byte $b6;
        java.lang.IndexOutOfBoundsException $r2;
        java.nio.ByteBuffer $r3;
        byte[] $r4;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 < 0 goto label1;

        if $i0 < 0 goto label1;

        $l3 = (long) $i1;

        $l4 = (long) $i0;

        $l3 = $l3 + $l4;

        $i5 = lengthof $r1;

        $l4 = (long) $i5;

        $b6 = $l3 cmp $l4;

        if $b6 <= 0 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkOpenConnected()>();

        $i5 = 0;

        $i2 = $i0;

     label3:
        if $i2 >= $i1 goto label4;

        $r3 = $r1[$i2];

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkWritable(java.nio.ByteBuffer)>($r3);

        $r3 = $r1[$i2];

        $i7 = virtualinvoke $r3.<java.nio.Buffer: int remaining()>();

        $i5 = $i5 + $i7;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i5);

        $i1 = specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)>($r3);

        $i5 = $i1;

        $r4 = virtualinvoke $r3.<java.nio.ByteBuffer: byte[] array()>();

     label5:
        if $i5 <= 0 goto label6;

        $r3 = $r1[$i0];

        $i2 = virtualinvoke $r3.<java.nio.Buffer: int remaining()>();

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i5);

        $r3 = $r1[$i0];

        $i2 = $i1 - $i5;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r4, $i2, $i7);

        $i0 = $i0 + 1;

        $i5 = $i5 - $i7;

        goto label5;

     label6:
        $l3 = (long) $i1;

        return $l3;
    }

    public java.net.SocketAddress receive(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1;
        boolean $z0, $z1;
        java.net.SocketAddress $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4, $r6;
        java.io.InterruptedIOException $r5;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkWritable(java.nio.ByteBuffer)>($r1);

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkOpen()>();

        $z0 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isBound>;

        if $z0 != 0 goto label01;

        return null;

     label01:
        $r2 = null;

     label02:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>();

     label03:
        $r3 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object readLock>;

        entermonitor $r3;

     label04:
        $z0 = virtualinvoke $r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

        $z1 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z1 != 0 goto label08;

        $r2 = specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.SocketAddress receiveImpl(java.nio.ByteBuffer,boolean)>($r1, $z0);

     label05:
        exitmonitor $r3;

     label06:
        if $r2 == null goto label13;

        $z0 = 1;

     label07:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        return $r2;

     label08:
        $r2 = specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.SocketAddress receiveDirectImpl(java.nio.ByteBuffer,boolean)>($r1, $z0);

        goto label05;

     label09:
        $r4 := @caughtexception;

        exitmonitor $r3;

     label10:
        throw $r4;

     label11:
        $r5 := @caughtexception;

        if $r2 == null goto label14;

        $z0 = 1;

     label12:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        return null;

     label13:
        $z0 = 0;

        goto label07;

     label14:
        $z0 = 0;

        goto label12;

     label15:
        $r6 := @caughtexception;

        if $r2 == null goto label17;

        $z0 = 1;

     label16:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        throw $r6;

     label17:
        $z0 = 0;

        goto label16;

        catch java.io.InterruptedIOException from label02 to label03 with label11;
        catch java.lang.Throwable from label02 to label04 with label15;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
        catch java.io.InterruptedIOException from label10 to label11 with label11;
        catch java.lang.Throwable from label10 to label11 with label15;
    }

    public int send(java.nio.ByteBuffer, java.net.SocketAddress) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1;
        java.net.SocketAddress $r2;
        java.net.InetSocketAddress $r3, $r6;
        java.net.InetAddress $r4;
        java.io.IOException $r5;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        java.lang.SecurityManager $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r9;
        org.apache.harmony.luni.platform.INetworkSystem $r10;
        java.io.FileDescriptor $r11;
        java.lang.String $r12;
        java.lang.Throwable $r13, $r14, $r16;
        byte[] $r15;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 := @parameter1: java.net.SocketAddress;

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkNotNull(java.nio.ByteBuffer)>($r1);

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkOpen()>();

        $r3 = (java.net.InetSocketAddress) $r2;

        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        if $r4 != null goto label01;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>()>();

        throw $r5;

     label01:
        $z0 = virtualinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        if $z0 == 0 goto label02;

        $r6 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $z0 = virtualinvoke $r6.<java.net.InetSocketAddress: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label03;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r7;

     label02:
        $r8 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r8 == null goto label03;

        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $z0 = virtualinvoke $r4.<java.net.InetAddress: boolean isMulticastAddress()>();

        if $z0 == 0 goto label10;

        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        virtualinvoke $r8.<java.lang.SecurityManager: void checkMulticast(java.net.InetAddress)>($r4);

     label03:
        $i0 = 0;

     label04:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>();

        $i1 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $i2 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 == 0 goto label16;

        $r9 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object writeLock>;

        entermonitor $r9;

     label05:
        $i3 = staticinvoke <org.apache.harmony.nio.AddressUtil: int getDirectBufferAddress(java.nio.Buffer)>($r1);

        $r10 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r11 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i4 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();

        $i5 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int trafficClass>;

        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i0 = interfaceinvoke $r10.<org.apache.harmony.luni.platform.INetworkSystem: int sendDatagramDirect(java.io.FileDescriptor,int,int,int,int,boolean,int,java.net.InetAddress)>($r11, $i3, $i2, $i1, $i4, 0, $i5, $r4);

        exitmonitor $r9;

     label06:
        $i2 = $i2 + $i0;

     label07:
        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i2);

     label08:
        if $i0 < 0 goto label24;

        $z0 = 1;

     label09:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        return $i0;

     label10:
        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $r12 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i2 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();

        virtualinvoke $r8.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r12, $i2);

        goto label03;

     label11:
        $r13 := @caughtexception;

     label12:
        exitmonitor $r9;

     label13:
        throw $r13;

     label14:
        $r14 := @caughtexception;

        if $i0 < 0 goto label25;

        $z0 = 1;

     label15:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        throw $r14;

     label16:
        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label22;

        $r15 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $i3 = virtualinvoke $r1.<java.nio.ByteBuffer: int arrayOffset()>();

        $i3 = $i2 + $i3;

     label17:
        $r9 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.lang.Object writeLock>;

        entermonitor $r9;

     label18:
        $r10 = <org.apache.harmony.nio.internal.DatagramChannelImpl: org.apache.harmony.luni.platform.INetworkSystem networkSystem>;

        $r11 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i4 = virtualinvoke $r3.<java.net.InetSocketAddress: int getPort()>();

        $i5 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int trafficClass>;

        $r4 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        $i0 = interfaceinvoke $r10.<org.apache.harmony.luni.platform.INetworkSystem: int sendDatagram(java.io.FileDescriptor,byte[],int,int,int,boolean,int,java.net.InetAddress)>($r11, $r15, $i3, $i1, $i4, 0, $i5, $r4);

        exitmonitor $r9;

     label19:
        goto label06;

     label20:
        $r16 := @caughtexception;

        exitmonitor $r9;

     label21:
        throw $r16;

     label22:
        $r15 = newarray (byte)[$i1];

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r15);

     label23:
        $i3 = 0;

        goto label17;

     label24:
        $z0 = 0;

        goto label09;

     label25:
        $z0 = 0;

        goto label15;

        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label13 to label14 with label14;
        catch java.lang.Throwable from label16 to label18 with label14;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
        catch java.lang.Throwable from label21 to label23 with label14;
    }

    public java.net.DatagramSocket socket()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        int $i0;
        java.net.DatagramSocketImpl $r1;
        java.net.DatagramSocket $r2;
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r3;
        java.io.FileDescriptor $r4;
        java.lang.Throwable $r5;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        entermonitor $r0;

     label1:
        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket>;

        if $r2 != null goto label2;

        $r3 = new org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r4 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.io.FileDescriptor fd>;

        $i0 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int localPort>;

        $r1 = staticinvoke <org.apache.harmony.luni.net.SocketImplProvider: java.net.DatagramSocketImpl getDatagramSocketImpl(java.io.FileDescriptor,int)>($r4, $i0);

        specialinvoke $r3.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: void <init>(java.net.DatagramSocketImpl,org.apache.harmony.nio.internal.DatagramChannelImpl)>($r1, $r0);

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket> = $r3;

     label2:
        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.DatagramSocket socket>;

     label3:
        exitmonitor $r0;

        return $r2;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer $r1, $r2;
        boolean $z0;
        int $i0, $i1;
        byte[] $r3;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkNotNull(java.nio.ByteBuffer)>($r1);

        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkOpenConnected()>();

        $z0 = virtualinvoke $r1.<java.nio.Buffer: boolean hasRemaining()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r1.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label5;

     label2:
        $r2 = $r1;

     label3:
        $i1 = specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int writeImpl(java.nio.ByteBuffer)>($r2);

        if $i1 <= 0 goto label4;

        $i0 = $i0 + $i1;

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer position(int)>($i0);

     label4:
        return $i1;

     label5:
        $i1 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $r3 = newarray (byte)[$i1];

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r3);

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        goto label3;
    }

    public long write(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0, $i1, $i4, $i6, $i7;
        long $l2, $l3;
        byte $b5;
        java.lang.IndexOutOfBoundsException $r2;
        java.nio.ByteBuffer $r3, $r4;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 < 0 goto label1;

        if $i0 < 0 goto label1;

        $l2 = (long) $i1;

        $l3 = (long) $i0;

        $l2 = $l2 + $l3;

        $i4 = lengthof $r1;

        $l3 = (long) $i4;

        $b5 = $l2 cmp $l3;

        if $b5 <= 0 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: void checkOpenConnected()>();

        $i4 = specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int calculateByteBufferArray(java.nio.ByteBuffer[],int,int)>($r1, $i0, $i1);

        if $i4 != 0 goto label3;

        return 0L;

     label3:
        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i4);

        $i4 = $i0;

     label4:
        $i6 = $i1 + $i0;

        if $i4 >= $i6 goto label5;

        $r4 = $r1[$i4];

        $i6 = virtualinvoke $r4.<java.nio.Buffer: int position()>();

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r4);

        virtualinvoke $r4.<java.nio.Buffer: java.nio.Buffer position(int)>($i6);

        $i4 = $i4 + 1;

        goto label4;

     label5:
        virtualinvoke $r3.<java.nio.Buffer: java.nio.Buffer flip()>();

        $i1 = specialinvoke $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl: int writeImpl(java.nio.ByteBuffer)>($r3);

        $i4 = $i1;

     label6:
        if $i4 <= 0 goto label7;

        $r3 = $r1[$i0];

        $i6 = virtualinvoke $r3.<java.nio.Buffer: int remaining()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i6);

        $i7 = virtualinvoke $r3.<java.nio.Buffer: int position()>();

        $i7 = $i7 + $i6;

        virtualinvoke $r3.<java.nio.Buffer: java.nio.Buffer position(int)>($i7);

        $i0 = $i0 + 1;

        $i4 = $i4 - $i6;

        goto label6;

     label7:
        $l2 = (long) $i1;

        return $l2;
    }
}
