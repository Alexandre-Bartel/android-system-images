public class android.bluetooth.HeadsetBase extends java.lang.Object
{
    private static final boolean DBG;
    public static final int DIRECTION_INCOMING;
    public static final int DIRECTION_OUTGOING;
    public static final int RFCOMM_DISCONNECTED;
    private static final java.lang.String TAG;
    private final java.lang.String mAddress;
    protected android.bluetooth.AtParser mAtParser;
    private final android.bluetooth.BluetoothDevice mBluetooth;
    private final long mConnectTimestamp;
    private final int mDirection;
    private java.lang.Thread mEventThread;
    private android.os.Handler mEventThreadHandler;
    private volatile boolean mEventThreadInterrupted;
    private int mNativeData;
    private final int mRfcommChannel;
    private int mTimeoutRemainingMs;
    private android.os.PowerManager$WakeLock mWakeLock;

    static void <clinit>()
    {
        <android.bluetooth.HeadsetBase: java.lang.String TAG> = "Bluetooth HeadsetBase";

        <android.bluetooth.HeadsetBase: int RFCOMM_DISCONNECTED> = 1;

        <android.bluetooth.HeadsetBase: int DIRECTION_OUTGOING> = 2;

        <android.bluetooth.HeadsetBase: int DIRECTION_INCOMING> = 1;

        <android.bluetooth.HeadsetBase: boolean DBG> = 0;

        staticinvoke <android.bluetooth.HeadsetBase: void classInitNative()>();

        return;
    }

    public void <init>(android.os.PowerManager, android.bluetooth.BluetoothDevice, java.lang.String, int)
    {
        android.bluetooth.HeadsetBase $r0;
        android.os.PowerManager $r1;
        android.bluetooth.BluetoothDevice $r2;
        java.lang.String $r3;
        int $i0;
        long $l1;
        android.os.PowerManager$WakeLock $r4;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 := @parameter0: android.os.PowerManager;

        $r2 := @parameter1: android.bluetooth.BluetoothDevice;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.bluetooth.HeadsetBase: int mDirection> = 2;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<android.bluetooth.HeadsetBase: long mConnectTimestamp> = $l1;

        $r0.<android.bluetooth.HeadsetBase: android.bluetooth.BluetoothDevice mBluetooth> = $r2;

        $r0.<android.bluetooth.HeadsetBase: java.lang.String mAddress> = $r3;

        $r0.<android.bluetooth.HeadsetBase: int mRfcommChannel> = $i0;

        $r4 = virtualinvoke $r1.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "HeadsetBase");

        $r0.<android.bluetooth.HeadsetBase: android.os.PowerManager$WakeLock mWakeLock> = $r4;

        $r4 = $r0.<android.bluetooth.HeadsetBase: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        virtualinvoke $r0.<android.bluetooth.HeadsetBase: void initializeAtParser()>();

        specialinvoke $r0.<android.bluetooth.HeadsetBase: void initializeNativeDataNative(int)>(-1);

        return;
    }

    public void <init>(android.os.PowerManager, android.bluetooth.BluetoothDevice, java.lang.String, int, int, android.os.Handler)
    {
        android.bluetooth.HeadsetBase $r0;
        android.os.PowerManager $r1;
        android.bluetooth.BluetoothDevice $r2;
        java.lang.String $r3;
        int $i0, $i1;
        android.os.Handler $r4;
        long $l2;
        android.os.PowerManager$WakeLock $r5;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 := @parameter0: android.os.PowerManager;

        $r2 := @parameter1: android.bluetooth.BluetoothDevice;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $r4 := @parameter5: android.os.Handler;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.bluetooth.HeadsetBase: int mDirection> = 1;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<android.bluetooth.HeadsetBase: long mConnectTimestamp> = $l2;

        $r0.<android.bluetooth.HeadsetBase: android.bluetooth.BluetoothDevice mBluetooth> = $r2;

        $r0.<android.bluetooth.HeadsetBase: java.lang.String mAddress> = $r3;

        $r0.<android.bluetooth.HeadsetBase: int mRfcommChannel> = $i1;

        $r0.<android.bluetooth.HeadsetBase: android.os.Handler mEventThreadHandler> = $r4;

        $r5 = virtualinvoke $r1.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "HeadsetBase");

        $r0.<android.bluetooth.HeadsetBase: android.os.PowerManager$WakeLock mWakeLock> = $r5;

        $r5 = $r0.<android.bluetooth.HeadsetBase: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        virtualinvoke $r0.<android.bluetooth.HeadsetBase: void initializeAtParser()>();

        specialinvoke $r0.<android.bluetooth.HeadsetBase: void initializeNativeDataNative(int)>($i0);

        return;
    }

    static boolean access$000(android.bluetooth.HeadsetBase)
    {
        android.bluetooth.HeadsetBase $r0;
        boolean z0;

        $r0 := @parameter0: android.bluetooth.HeadsetBase;

        z0 = $r0.<android.bluetooth.HeadsetBase: boolean mEventThreadInterrupted>;

        return z0;
    }

    static java.lang.String access$100(android.bluetooth.HeadsetBase, int)
    {
        android.bluetooth.HeadsetBase $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: android.bluetooth.HeadsetBase;

        $i0 := @parameter1: int;

        $r1 = specialinvoke $r0.<android.bluetooth.HeadsetBase: java.lang.String readNative(int)>($i0);

        return $r1;
    }

    static int access$200(android.bluetooth.HeadsetBase)
    {
        android.bluetooth.HeadsetBase $r0;
        int $i0;

        $r0 := @parameter0: android.bluetooth.HeadsetBase;

        $i0 = specialinvoke $r0.<android.bluetooth.HeadsetBase: int getLastReadStatusNative()>();

        return $i0;
    }

    static android.os.Handler access$300(android.bluetooth.HeadsetBase)
    {
        android.bluetooth.HeadsetBase $r0;
        android.os.Handler r1;

        $r0 := @parameter0: android.bluetooth.HeadsetBase;

        r1 = $r0.<android.bluetooth.HeadsetBase: android.os.Handler mEventThreadHandler>;

        return r1;
    }

    static void access$400(android.bluetooth.HeadsetBase)
    {
        android.bluetooth.HeadsetBase $r0;

        $r0 := @parameter0: android.bluetooth.HeadsetBase;

        specialinvoke $r0.<android.bluetooth.HeadsetBase: void disconnectNative()>();

        return;
    }

    private void acquireWakeLock()
    {
        android.bluetooth.HeadsetBase $r0;
        boolean $z0;
        android.os.PowerManager$WakeLock $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.bluetooth.HeadsetBase;

        entermonitor $r0;

     label1:
        $r1 = $r0.<android.bluetooth.HeadsetBase: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 != 0 goto label2;

        $r1 = $r0.<android.bluetooth.HeadsetBase: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void acquire()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static native void classInitNative();

    private native void cleanupNativeDataNative();

    private native boolean connectAsyncNative();

    private native boolean connectNative();

    private native void disconnectNative();

    private native int getLastReadStatusNative();

    private native void initializeNativeDataNative(int);

    private void log(java.lang.String)
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.String $r1;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Bluetooth HeadsetBase", $r1);

        return;
    }

    private native java.lang.String readNative(int);

    private void releaseWakeLock()
    {
        android.bluetooth.HeadsetBase $r0;
        boolean $z0;
        android.os.PowerManager$WakeLock $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.bluetooth.HeadsetBase;

        entermonitor $r0;

     label1:
        $r1 = $r0.<android.bluetooth.HeadsetBase: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label2;

        $r1 = $r0.<android.bluetooth.HeadsetBase: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void release()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private native boolean sendURCNative(java.lang.String);

    private void stopEventThread()
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.Thread $r1;
        java.lang.InterruptedException $r2;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r0.<android.bluetooth.HeadsetBase: boolean mEventThreadInterrupted> = 1;

        $r1 = $r0.<android.bluetooth.HeadsetBase: java.lang.Thread mEventThread>;

        virtualinvoke $r1.<java.lang.Thread: void interrupt()>();

        $r1 = $r0.<android.bluetooth.HeadsetBase: java.lang.Thread mEventThread>;

     label1:
        virtualinvoke $r1.<java.lang.Thread: void join()>();

     label2:
        $r0.<android.bluetooth.HeadsetBase: java.lang.Thread mEventThread> = null;

        return;

     label3:
        $r2 := @caughtexception;

        goto label2;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private native int waitForAsyncConnectNative(int);

    public boolean connect(android.os.Handler)
    {
        android.bluetooth.HeadsetBase $r0;
        android.os.Handler $r1;
        boolean $z0;
        java.lang.Thread $r2;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 := @parameter0: android.os.Handler;

        $r2 = $r0.<android.bluetooth.HeadsetBase: java.lang.Thread mEventThread>;

        if $r2 != null goto label2;

        $z0 = specialinvoke $r0.<android.bluetooth.HeadsetBase: boolean connectNative()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r0.<android.bluetooth.HeadsetBase: android.os.Handler mEventThreadHandler> = $r1;

     label2:
        return 1;
    }

    public boolean connectAsync()
    {
        android.bluetooth.HeadsetBase $r0;
        boolean $z0;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $z0 = specialinvoke $r0.<android.bluetooth.HeadsetBase: boolean connectAsyncNative()>();

        return $z0;
    }

    public void disconnect()
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.Thread $r1;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 = $r0.<android.bluetooth.HeadsetBase: java.lang.Thread mEventThread>;

        if $r1 == null goto label1;

        specialinvoke $r0.<android.bluetooth.HeadsetBase: void stopEventThread()>();

     label1:
        specialinvoke $r0.<android.bluetooth.HeadsetBase: void disconnectNative()>();

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.Throwable $r1;

        $r0 := @this: android.bluetooth.HeadsetBase;

     label1:
        specialinvoke $r0.<android.bluetooth.HeadsetBase: void cleanupNativeDataNative()>();

        specialinvoke $r0.<android.bluetooth.HeadsetBase: void releaseWakeLock()>();

     label2:
        specialinvoke $r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r1 := @caughtexception;

        specialinvoke $r0.<java.lang.Object: void finalize()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getAddress()
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.String r1;

        $r0 := @this: android.bluetooth.HeadsetBase;

        r1 = $r0.<android.bluetooth.HeadsetBase: java.lang.String mAddress>;

        return r1;
    }

    public android.bluetooth.AtParser getAtParser()
    {
        android.bluetooth.HeadsetBase $r0;
        android.bluetooth.AtParser r1;

        $r0 := @this: android.bluetooth.HeadsetBase;

        r1 = $r0.<android.bluetooth.HeadsetBase: android.bluetooth.AtParser mAtParser>;

        return r1;
    }

    public long getConnectTimestamp()
    {
        android.bluetooth.HeadsetBase $r0;
        long l0;

        $r0 := @this: android.bluetooth.HeadsetBase;

        l0 = $r0.<android.bluetooth.HeadsetBase: long mConnectTimestamp>;

        return l0;
    }

    public int getDirection()
    {
        android.bluetooth.HeadsetBase $r0;
        int i0;

        $r0 := @this: android.bluetooth.HeadsetBase;

        i0 = $r0.<android.bluetooth.HeadsetBase: int mDirection>;

        return i0;
    }

    public java.lang.String getName()
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.String $r1;
        android.bluetooth.BluetoothDevice $r2;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r2 = $r0.<android.bluetooth.HeadsetBase: android.bluetooth.BluetoothDevice mBluetooth>;

        $r1 = $r0.<android.bluetooth.HeadsetBase: java.lang.String mAddress>;

        $r1 = virtualinvoke $r2.<android.bluetooth.BluetoothDevice: java.lang.String getRemoteName(java.lang.String)>($r1);

        return $r1;
    }

    public int getRemainingAsyncConnectWaitingTimeMs()
    {
        android.bluetooth.HeadsetBase $r0;
        int i0;

        $r0 := @this: android.bluetooth.HeadsetBase;

        i0 = $r0.<android.bluetooth.HeadsetBase: int mTimeoutRemainingMs>;

        return i0;
    }

    protected void handleInput(java.lang.String)
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.String $r1;
        android.bluetooth.AtParser $r2;
        android.bluetooth.AtCommandResult $r3;
        int $i0;
        java.lang.StringBuilder $r4;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<android.bluetooth.HeadsetBase: void acquireWakeLock()>();

        $r2 = $r0.<android.bluetooth.HeadsetBase: android.bluetooth.AtParser mAtParser>;

        $r3 = virtualinvoke $r2.<android.bluetooth.AtParser: android.bluetooth.AtCommandResult process(java.lang.String)>($r1);

        $i0 = virtualinvoke $r3.<android.bluetooth.AtCommandResult: int getResultCode()>();

        if $i0 != 1 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error pocessing <");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Bluetooth HeadsetBase", $r1);

     label1:
        $r1 = virtualinvoke $r3.<android.bluetooth.AtCommandResult: java.lang.String toString()>();

        virtualinvoke $r0.<android.bluetooth.HeadsetBase: boolean sendURC(java.lang.String)>($r1);

        specialinvoke $r0.<android.bluetooth.HeadsetBase: void releaseWakeLock()>();

        return;
    }

    protected void initializeAtParser()
    {
        android.bluetooth.HeadsetBase $r0;
        android.bluetooth.AtParser $r1;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 = new android.bluetooth.AtParser;

        specialinvoke $r1.<android.bluetooth.AtParser: void <init>()>();

        $r0.<android.bluetooth.HeadsetBase: android.bluetooth.AtParser mAtParser> = $r1;

        return;
    }

    public boolean isConnected()
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.Thread $r1;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 = $r0.<android.bluetooth.HeadsetBase: java.lang.Thread mEventThread>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean sendURC(java.lang.String)
    {
        android.bluetooth.HeadsetBase $r0;
        java.lang.String $r1;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $z0 = specialinvoke $r0.<android.bluetooth.HeadsetBase: boolean sendURCNative(java.lang.String)>($r1);

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $z0 = 1;

        goto label2;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void startEventThread()
    {
        android.bluetooth.HeadsetBase $r0;
        android.bluetooth.HeadsetBase$1 $r1;
        java.lang.Thread $r2;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $r1 = new android.bluetooth.HeadsetBase$1;

        specialinvoke $r1.<android.bluetooth.HeadsetBase$1: void <init>(android.bluetooth.HeadsetBase,java.lang.String)>($r0, "HeadsetBase Event Thread");

        $r0.<android.bluetooth.HeadsetBase: java.lang.Thread mEventThread> = $r1;

        $r0.<android.bluetooth.HeadsetBase: boolean mEventThreadInterrupted> = 0;

        $r2 = $r0.<android.bluetooth.HeadsetBase: java.lang.Thread mEventThread>;

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        return;
    }

    public int waitForAsyncConnect(int, android.os.Handler)
    {
        android.bluetooth.HeadsetBase $r0;
        int $i0;
        android.os.Handler $r1;

        $r0 := @this: android.bluetooth.HeadsetBase;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.os.Handler;

        $i0 = specialinvoke $r0.<android.bluetooth.HeadsetBase: int waitForAsyncConnectNative(int)>($i0);

        if $i0 <= 0 goto label1;

        $r0.<android.bluetooth.HeadsetBase: android.os.Handler mEventThreadHandler> = $r1;

        return $i0;

     label1:
        return $i0;
    }
}
