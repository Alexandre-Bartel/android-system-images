final class org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper extends java.lang.Object
{
    volatile boolean autoFree;
    final org.apache.harmony.luni.platform.PlatformAddress shadow;
    final org.apache.harmony.luni.platform.AbstractMemorySpy this$0;
    final java.lang.ref.PhantomReference wrAddress;

    void <init>(org.apache.harmony.luni.platform.AbstractMemorySpy, org.apache.harmony.luni.platform.PlatformAddress)
    {
        org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper $r0;
        org.apache.harmony.luni.platform.AbstractMemorySpy $r1;
        org.apache.harmony.luni.platform.PlatformAddress $r2, $r4;
        java.lang.ref.ReferenceQueue $r3;
        java.lang.ref.PhantomReference $r5;

        $r0 := @this: org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper;

        $r1 := @parameter0: org.apache.harmony.luni.platform.AbstractMemorySpy;

        $r2 := @parameter1: org.apache.harmony.luni.platform.PlatformAddress;

        $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: org.apache.harmony.luni.platform.AbstractMemorySpy this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: boolean autoFree> = 0;

        $r4 = virtualinvoke $r2.<org.apache.harmony.luni.platform.PlatformAddress: org.apache.harmony.luni.platform.PlatformAddress duplicate()>();

        $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: org.apache.harmony.luni.platform.PlatformAddress shadow> = $r4;

        $r5 = new java.lang.ref.PhantomReference;

        $r3 = $r1.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.lang.ref.ReferenceQueue notifyQueue>;

        specialinvoke $r5.<java.lang.ref.PhantomReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>($r2, $r3);

        $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: java.lang.ref.PhantomReference wrAddress> = $r5;

        return;
    }
}
