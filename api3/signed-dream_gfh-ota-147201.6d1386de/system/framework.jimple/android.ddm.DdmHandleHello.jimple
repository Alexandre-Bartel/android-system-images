public class android.ddm.DdmHandleHello extends org.apache.harmony.dalvik.ddmc.ChunkHandler
{
    public static final int CHUNK_HELO;
    public static final int CHUNK_WAIT;
    private static android.ddm.DdmHandleHello mInstance;

    static void <clinit>()
    {
        int $i0;
        android.ddm.DdmHandleHello $r0;

        $i0 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("HELO");

        <android.ddm.DdmHandleHello: int CHUNK_HELO> = $i0;

        $i0 = staticinvoke <android.ddm.DdmHandleHello: int type(java.lang.String)>("WAIT");

        <android.ddm.DdmHandleHello: int CHUNK_WAIT> = $i0;

        $r0 = new android.ddm.DdmHandleHello;

        specialinvoke $r0.<android.ddm.DdmHandleHello: void <init>()>();

        <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance> = $r0;

        return;
    }

    private void <init>()
    {
        android.ddm.DdmHandleHello $r0;

        $r0 := @this: android.ddm.DdmHandleHello;

        specialinvoke $r0.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void <init>()>();

        return;
    }

    public static void register()
    {
        int $i0;
        android.ddm.DdmHandleHello $r0;

        $i0 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        $r0 = <android.ddm.DdmHandleHello: android.ddm.DdmHandleHello mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        return;
    }

    public static void sendWAIT(int)
    {
        int $i0;
        byte[] $r0;
        org.apache.harmony.dalvik.ddmc.Chunk $r1;
        byte $b1;

        $i0 := @parameter0: int;

        $r0 = newarray (byte)[1];

        $b1 = (byte) $i0;

        $r0[0] = $b1;

        $r1 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i0 = <android.ddm.DdmHandleHello: int CHUNK_WAIT>;

        specialinvoke $r1.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i0, $r0, 0, 1);

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        return;
    }

    public void connected()
    {
        android.ddm.DdmHandleHello $r0;
        byte[] $r1;
        org.apache.harmony.dalvik.ddmc.Chunk $r2;
        int $i0, $i1;

        $r0 := @this: android.ddm.DdmHandleHello;

        $r1 = newarray (byte)[10];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 2;

        $r1[3] = 3;

        $r1[4] = 4;

        $r1[5] = -4;

        $r1[6] = -3;

        $r1[7] = -2;

        $r1[8] = -1;

        $r1[9] = 127;

        $r2 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i0 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: int type(java.lang.String)>("TEST");

        $i1 = lengthof $r1;

        $i1 = $i1 - 2;

        specialinvoke $r2.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i0, $r1, 1, $i1);

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void sendChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r2);

        return;
    }

    public void disconnected()
    {
        android.ddm.DdmHandleHello $r0;

        $r0 := @this: android.ddm.DdmHandleHello;

        return;
    }

    public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleHello $r0;
        org.apache.harmony.dalvik.ddmc.Chunk $r1;
        java.nio.ByteBuffer $r2;
        java.lang.String $r3, $r4;
        java.lang.StringBuilder $r5;
        int $i0, $i1;
        java.nio.ByteOrder $r6;
        boolean $z0;

        $r0 := @this: android.ddm.DdmHandleHello;

        $r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $r2 = staticinvoke <android.ddm.DdmHandleHello: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vm.name", "?");

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("java.vm.version", "?");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" v");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <android.ddm.DdmHandleAppName: java.lang.String getAppName()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i0 = $i0 * 2;

        $i0 = $i0 + 16;

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = $i1 * 2;

        $i0 = $i0 + $i1;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i0);

        $r6 = <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.nio.ByteOrder CHUNK_ORDER>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r6);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(1);

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>($r2, $r3);

        staticinvoke <android.ddm.DdmHandleHello: void putString(java.nio.ByteBuffer,java.lang.String)>($r2, $r4);

        $r1 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i0 = <android.ddm.DdmHandleHello: int CHUNK_HELO>;

        specialinvoke $r1.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i0, $r2);

        $z0 = staticinvoke <android.os.Debug: boolean waitingForDebugger()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.ddm.DdmHandleHello: void sendWAIT(int)>(0);

        return $r1;

     label1:
        return $r1;
    }
}
