public class org.apache.harmony.xnet.provider.jsse.CertificateVerify extends org.apache.harmony.xnet.provider.jsse.Message
{
    byte[] signedHash;

    public void <init>(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream, int) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.CertificateVerify $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        int $i0, $i1, $i2;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateVerify;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $i0 := @parameter1: int;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        if $i0 != 0 goto label2;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect CertificateVerify");

     label1:
        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i0;

        return;

     label2:
        $i2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $i1 = $i0 - 2;

        if $i2 == $i1 goto label3;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect CertificateVerify");

     label3:
        $i1 = $i0 - 2;

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: byte[] read(int)>($i1);

        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateVerify: byte[] signedHash> = $r2;

        goto label1;
    }

    public void <init>(byte[])
    {
        org.apache.harmony.xnet.provider.jsse.CertificateVerify $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateVerify;

        $r1 := @parameter0: byte[];

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        if $r1 == null goto label1;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label2;

     label1:
        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(80, "INTERNAL ERROR: incorrect certificate verify hash");

     label2:
        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateVerify: byte[] signedHash> = $r1;

        $i0 = lengthof $r1;

        $i0 = $i0 + 2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i0;

        return;
    }

    public int getType()
    {
        org.apache.harmony.xnet.provider.jsse.CertificateVerify $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateVerify;

        return 15;
    }

    public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)
    {
        org.apache.harmony.xnet.provider.jsse.CertificateVerify $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        byte[] $r2;
        int $i0;
        long $l1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateVerify;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateVerify: byte[] signedHash>;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateVerify: byte[] signedHash>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateVerify: byte[] signedHash>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        return;

     label1:
        return;
    }
}
