public class android.ddm.DdmHandleThread extends org.apache.harmony.dalvik.ddmc.ChunkHandler
{
    public static final int CHUNK_STKL;
    public static final int CHUNK_THCR;
    public static final int CHUNK_THDE;
    public static final int CHUNK_THEN;
    public static final int CHUNK_THST;
    private static android.ddm.DdmHandleThread mInstance;

    static void <clinit>()
    {
        int $i0;
        android.ddm.DdmHandleThread $r0;

        $i0 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("THEN");

        <android.ddm.DdmHandleThread: int CHUNK_THEN> = $i0;

        $i0 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("THCR");

        <android.ddm.DdmHandleThread: int CHUNK_THCR> = $i0;

        $i0 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("THDE");

        <android.ddm.DdmHandleThread: int CHUNK_THDE> = $i0;

        $i0 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("THST");

        <android.ddm.DdmHandleThread: int CHUNK_THST> = $i0;

        $i0 = staticinvoke <android.ddm.DdmHandleThread: int type(java.lang.String)>("STKL");

        <android.ddm.DdmHandleThread: int CHUNK_STKL> = $i0;

        $r0 = new android.ddm.DdmHandleThread;

        specialinvoke $r0.<android.ddm.DdmHandleThread: void <init>()>();

        <android.ddm.DdmHandleThread: android.ddm.DdmHandleThread mInstance> = $r0;

        return;
    }

    private void <init>()
    {
        android.ddm.DdmHandleThread $r0;

        $r0 := @this: android.ddm.DdmHandleThread;

        specialinvoke $r0.<org.apache.harmony.dalvik.ddmc.ChunkHandler: void <init>()>();

        return;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk createStackChunk(java.lang.StackTraceElement[], int)
    {
        android.ddm.DdmHandleThread $r0;
        java.lang.StackTraceElement[] $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.StackTraceElement $r2;
        java.lang.String $r3;
        java.nio.ByteBuffer $r4;
        org.apache.harmony.dalvik.ddmc.Chunk $r5;

        $r0 := @this: android.ddm.DdmHandleThread;

        $r1 := @parameter0: java.lang.StackTraceElement[];

        $i0 := @parameter1: int;

        $i1 = 0 + 4;

        $i1 = $i1 + 4;

        $i2 = $i1 + 4;

        $i1 = lengthof $r1;

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label3;

        $r2 = $r1[$i3];

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i4 = $i4 * 2;

        $i4 = $i4 + 4;

        $i2 = $i2 + $i4;

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i4 = $i4 * 2;

        $i4 = $i4 + 4;

        $i2 = $i2 + $i4;

        $i2 = $i2 + 4;

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        if $r3 == null goto label2;

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i4 = $i4 * 2;

        $i2 = $i2 + $i4;

     label2:
        $i2 = $i2 + 4;

        $i3 = $i3 + 1;

        goto label1;

     label3:
        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $i0 = lengthof $r1;

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i0);

        $i0 = lengthof $r1;

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label7;

        $r2 = $r1[$i1];

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i3);

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        staticinvoke <android.ddm.DdmHandleThread: void putString(java.nio.ByteBuffer,java.lang.String)>($r4, $r3);

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i3);

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        staticinvoke <android.ddm.DdmHandleThread: void putString(java.nio.ByteBuffer,java.lang.String)>($r4, $r3);

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        if $r3 == null goto label6;

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i3);

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getFileName()>();

        staticinvoke <android.ddm.DdmHandleThread: void putString(java.nio.ByteBuffer,java.lang.String)>($r4, $r3);

     label5:
        $i3 = virtualinvoke $r2.<java.lang.StackTraceElement: int getLineNumber()>();

        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i3);

        $i1 = $i1 + 1;

        goto label4;

     label6:
        virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(0);

        goto label5;

     label7:
        $r5 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i0 = <android.ddm.DdmHandleThread: int CHUNK_STKL>;

        specialinvoke $r5.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,java.nio.ByteBuffer)>($i0, $r4);

        return $r5;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleSTKL(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleThread $r0;
        org.apache.harmony.dalvik.ddmc.Chunk $r1;
        java.nio.ByteBuffer $r2;
        int $i0;
        java.lang.StackTraceElement[] $r3;

        $r0 := @this: android.ddm.DdmHandleThread;

        $r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $r2 = staticinvoke <android.ddm.DdmHandleThread: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt()>();

        $r3 = staticinvoke <org.apache.harmony.dalvik.ddmc.DdmVmInternal: java.lang.StackTraceElement[] getStackTraceById(int)>($i0);

        if $r3 != null goto label1;

        $r1 = staticinvoke <android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(1, "Stack trace unavailable");

        return $r1;

     label1:
        $r1 = specialinvoke $r0.<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk createStackChunk(java.lang.StackTraceElement[],int)>($r3, $i0);

        return $r1;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleTHEN(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleThread $r0;
        org.apache.harmony.dalvik.ddmc.Chunk $r1;
        java.nio.ByteBuffer $r2;
        byte $b0;
        boolean $z0;

        $r0 := @this: android.ddm.DdmHandleThread;

        $r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $r2 = staticinvoke <android.ddm.DdmHandleThread: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        $b0 = virtualinvoke $r2.<java.nio.ByteBuffer: byte get()>();

        if $b0 == 0 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmVmInternal: void threadNotify(boolean)>($z0);

        return null;

     label2:
        $z0 = 0;

        goto label1;
    }

    private org.apache.harmony.dalvik.ddmc.Chunk handleTHST(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleThread $r0;
        org.apache.harmony.dalvik.ddmc.Chunk $r1;
        int $i0, $i1;
        byte[] $r2;

        $r0 := @this: android.ddm.DdmHandleThread;

        $r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        staticinvoke <android.ddm.DdmHandleThread: java.nio.ByteBuffer wrapChunk(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        $r2 = staticinvoke <org.apache.harmony.dalvik.ddmc.DdmVmInternal: byte[] getThreadStats()>();

        if $r2 == null goto label1;

        $r1 = new org.apache.harmony.dalvik.ddmc.Chunk;

        $i1 = <android.ddm.DdmHandleThread: int CHUNK_THST>;

        $i0 = lengthof $r2;

        specialinvoke $r1.<org.apache.harmony.dalvik.ddmc.Chunk: void <init>(int,byte[],int,int)>($i1, $r2, 0, $i0);

        return $r1;

     label1:
        $r1 = staticinvoke <android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk createFailChunk(int,java.lang.String)>(1, "Can\'t build THST chunk");

        return $r1;
    }

    public static void register()
    {
        int $i0;
        android.ddm.DdmHandleThread $r0;

        $i0 = <android.ddm.DdmHandleThread: int CHUNK_THEN>;

        $r0 = <android.ddm.DdmHandleThread: android.ddm.DdmHandleThread mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        $i0 = <android.ddm.DdmHandleThread: int CHUNK_THST>;

        $r0 = <android.ddm.DdmHandleThread: android.ddm.DdmHandleThread mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        $i0 = <android.ddm.DdmHandleThread: int CHUNK_STKL>;

        $r0 = <android.ddm.DdmHandleThread: android.ddm.DdmHandleThread mInstance>;

        staticinvoke <org.apache.harmony.dalvik.ddmc.DdmServer: void registerHandler(int,org.apache.harmony.dalvik.ddmc.ChunkHandler)>($i0, $r0);

        return;
    }

    public void connected()
    {
        android.ddm.DdmHandleThread $r0;

        $r0 := @this: android.ddm.DdmHandleThread;

        return;
    }

    public void disconnected()
    {
        android.ddm.DdmHandleThread $r0;

        $r0 := @this: android.ddm.DdmHandleThread;

        return;
    }

    public org.apache.harmony.dalvik.ddmc.Chunk handleChunk(org.apache.harmony.dalvik.ddmc.Chunk)
    {
        android.ddm.DdmHandleThread $r0;
        org.apache.harmony.dalvik.ddmc.Chunk $r1;
        int $i0, $i1;
        java.lang.RuntimeException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.ddm.DdmHandleThread;

        $r1 := @parameter0: org.apache.harmony.dalvik.ddmc.Chunk;

        $i0 = $r1.<org.apache.harmony.dalvik.ddmc.Chunk: int type>;

        $i1 = <android.ddm.DdmHandleThread: int CHUNK_THEN>;

        if $i0 != $i1 goto label1;

        $r1 = specialinvoke $r0.<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk handleTHEN(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        return $r1;

     label1:
        $i1 = <android.ddm.DdmHandleThread: int CHUNK_THST>;

        if $i0 != $i1 goto label2;

        $r1 = specialinvoke $r0.<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk handleTHST(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        return $r1;

     label2:
        $i1 = <android.ddm.DdmHandleThread: int CHUNK_STKL>;

        if $i0 != $i1 goto label3;

        $r1 = specialinvoke $r0.<android.ddm.DdmHandleThread: org.apache.harmony.dalvik.ddmc.Chunk handleSTKL(org.apache.harmony.dalvik.ddmc.Chunk)>($r1);

        return $r1;

     label3:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown packet ");

        $r4 = staticinvoke <org.apache.harmony.dalvik.ddmc.ChunkHandler: java.lang.String name(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r2;
    }
}
