public class org.apache.harmony.security.asn1.ASN1Implicit extends org.apache.harmony.security.asn1.ASN1Type
{
    private static final int TAGGING_CONSTRUCTED;
    private static final int TAGGING_PRIMITIVE;
    private static final int TAGGING_STRING;
    private final int taggingType;
    private final org.apache.harmony.security.asn1.ASN1Type type;

    public void <init>(int, int, org.apache.harmony.security.asn1.ASN1Type)
    {
        org.apache.harmony.security.asn1.ASN1Implicit $r0;
        int $i0, $i1;
        org.apache.harmony.security.asn1.ASN1Type $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.harmony.security.asn1.ASN1Type;

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Type: void <init>(int,int)>($i0, $i1);

        $z0 = $r1 instanceof org.apache.harmony.security.asn1.ASN1Choice;

        if $z0 != 0 goto label1;

        $z0 = $r1 instanceof org.apache.harmony.security.asn1.ASN1Any;

        if $z0 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.9F");

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label2:
        $r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type> = $r1;

        $i0 = $r1.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i0);

        if $z0 == 0 goto label4;

        $i0 = $r1.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i0);

        if $z0 == 0 goto label3;

        $r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType> = 2;

        return;

     label3:
        $r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType> = 0;

        return;

     label4:
        $r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType> = 1;

        return;
    }

    public void <init>(int, org.apache.harmony.security.asn1.ASN1Type)
    {
        org.apache.harmony.security.asn1.ASN1Implicit $r0;
        int $i0;
        org.apache.harmony.security.asn1.ASN1Type $r1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.harmony.security.asn1.ASN1Type;

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Implicit: void <init>(int,int,org.apache.harmony.security.asn1.ASN1Type)>(128, $i0, $r1);

        return;
    }

    public final boolean checkTag(int)
    {
        org.apache.harmony.security.asn1.ASN1Implicit $r0;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        $i0 := @parameter0: int;

        $i1 = $r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType>;

        lookupswitch($i1)
        {
            case 0: goto label3;
            case 1: goto label5;
            default: goto label1;
        };

     label1:
        $i1 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        if $i1 == $i0 goto label2;

        $i1 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        if $i1 != $i0 goto label7;

     label2:
        return 1;

     label3:
        $i1 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        if $i1 != $i0 goto label4;

        return 1;

     label4:
        return 0;

     label5:
        $i1 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        if $i1 != $i0 goto label6;

        return 1;

     label6:
        return 0;

     label7:
        return 0;
    }

    public java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.ASN1Implicit $r0;
        org.apache.harmony.security.asn1.BerInputStream $r1;
        int $i0, $i1;
        boolean $z0;
        org.apache.harmony.security.asn1.ASN1Exception $r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        java.lang.String $r5;
        org.apache.harmony.security.asn1.ASN1Type $r6;
        java.lang.Object $r7;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerInputStream;

        $i0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $z0 = virtualinvoke $r0.<org.apache.harmony.security.asn1.ASN1Implicit: boolean checkTag(int)>($i0);

        if $z0 != 0 goto label1;

        $r2 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r3 = newarray (java.lang.Object)[3];

        $i0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: int tagOffset>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[0] = $r4;

        $i0 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r3[1] = $r5;

        $i0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r3[2] = $r5;

        $r5 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object[])>("security.100", $r3);

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r5);

        throw $r2;

     label1:
        $i0 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        $i1 = $r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        if $i0 != $i1 goto label3;

        $r6 = $r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        $i0 = $r6.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        $r1.<org.apache.harmony.security.asn1.BerInputStream: int tag> = $i0;

     label2:
        $r6 = $r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>($r1);

        $r1.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object content> = $r7;

        $z0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z0 == 0 goto label4;

        return null;

     label3:
        $r6 = $r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        $i0 = $r6.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        $r1.<org.apache.harmony.security.asn1.BerInputStream: int tag> = $i0;

        goto label2;

     label4:
        $r7 = virtualinvoke $r0.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)>($r1);

        return $r7;
    }

    public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Implicit $r0;
        org.apache.harmony.security.asn1.BerOutputStream $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        $i0 = $r0.<org.apache.harmony.security.asn1.ASN1Implicit: int taggingType>;

        if $i0 != 1 goto label2;

        $i0 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        virtualinvoke $r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeTag(int)>($i0);

     label1:
        virtualinvoke $r0.<org.apache.harmony.security.asn1.ASN1Implicit: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)>($r1);

        return;

     label2:
        $i0 = $r0.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        virtualinvoke $r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeTag(int)>($i0);

        goto label1;
    }

    public void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Implicit $r0;
        org.apache.harmony.security.asn1.BerOutputStream $r1;
        org.apache.harmony.security.asn1.ASN1Type $r2;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        $r2 = $r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Type: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)>($r1);

        return;
    }

    public void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Implicit $r0;
        org.apache.harmony.security.asn1.BerOutputStream $r1;
        org.apache.harmony.security.asn1.ASN1Type $r2;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Implicit;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        $r2 = $r0.<org.apache.harmony.security.asn1.ASN1Implicit: org.apache.harmony.security.asn1.ASN1Type type>;

        virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Type: void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)>($r1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.security.asn1.ASN1Implicit: int TAGGING_STRING> = 2;

        <org.apache.harmony.security.asn1.ASN1Implicit: int TAGGING_PRIMITIVE> = 0;

        <org.apache.harmony.security.asn1.ASN1Implicit: int TAGGING_CONSTRUCTED> = 1;

        return;
    }
}
