public class org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter extends javax.imageio.ImageWriter
{
    private static final boolean DEBUG;
    private static android.graphics.Bitmap bm;
    private static java.awt.image.BufferedImage bufImg;
    private static java.awt.image.RenderedImage renImg;
    private long cinfo;
    private int deltaX;
    private int deltaY;
    private java.awt.image.RenderedImage image;
    private javax.imageio.stream.ImageOutputStream ios;
    private java.awt.image.WritableRaster scanRaster;
    private java.awt.image.Raster sourceRaster;
    private int srcHeight;
    private int srcWidth;
    private int srcXOff;
    private int srcYOff;

    static void <clinit>()
    {
        return;
    }

    public void <init>(javax.imageio.spi.ImageWriterSpi)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        javax.imageio.spi.ImageWriterSpi $r1;
        long $l0;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: javax.imageio.spi.ImageWriterSpi;

        specialinvoke $r0.<javax.imageio.ImageWriter: void <init>(javax.imageio.spi.ImageWriterSpi)>($r1);

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcXOff> = 0;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcYOff> = 0;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int deltaY> = 1;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int deltaX> = 1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: long cinfo> = $l0;

        return;
    }

    public static android.graphics.Bitmap getBitmap()
    {
        android.graphics.Bitmap r0;

        r0 = <org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: android.graphics.Bitmap bm>;

        return r0;
    }

    public static java.awt.image.BufferedImage getBufImage()
    {
        java.awt.image.BufferedImage r0;

        r0 = <org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.BufferedImage bufImg>;

        return r0;
    }

    private int getDestinationCSType(java.awt.image.RenderedImage)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        java.awt.image.RenderedImage $r1;
        java.awt.image.ColorModel $r2;
        boolean $z0;
        java.awt.color.ColorSpace $r3;
        int $i0;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: java.awt.image.RenderedImage;

        $r2 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r2 == null goto label10;

        $z0 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        $r3 = virtualinvoke $r2.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $i0 = virtualinvoke $r3.<java.awt.color.ColorSpace: int getType()>();

        lookupswitch($i0)
        {
            case 3: goto label05;
            case 4: goto label01;
            case 5: goto label03;
            case 6: goto label02;
            case 7: goto label01;
            case 8: goto label01;
            case 9: goto label09;
            case 10: goto label01;
            case 11: goto label01;
            case 12: goto label01;
            case 13: goto label07;
            default: goto label01;
        };

     label01:
        return 0;

     label02:
        return 1;

     label03:
        if $z0 == 0 goto label04;

        return 7;

     label04:
        return 3;

     label05:
        if $z0 == 0 goto label06;

        return 7;

     label06:
        return 3;

     label07:
        if $z0 == 0 goto label08;

        return 10;

     label08:
        return 5;

     label09:
        return 4;

     label10:
        return 0;
    }

    public static java.awt.image.RenderedImage getRenImage()
    {
        java.awt.image.RenderedImage r0;

        r0 = <org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.RenderedImage renImg>;

        return r0;
    }

    private void getScanLine(int)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        int $i0, $i1, $i2, $i3;
        java.awt.image.Raster $r1;
        java.awt.image.WritableRaster $r2;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster>;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcXOff>;

        $i2 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcYOff>;

        $i3 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int deltaY>;

        $i0 = $i3 * $i0;

        $i0 = $i2 + $i0;

        $i2 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth>;

        $r1 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.Raster createChild(int,int,int,int,int,int,int[])>($i1, $i0, $i2, 1, 0, 0, null);

        $r2 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.WritableRaster scanRaster>;

        virtualinvoke $r2.<java.awt.image.WritableRaster: void setRect(java.awt.image.Raster)>($r1);

        return;
    }

    private int getSourceCSType(java.awt.image.RenderedImage)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        java.awt.image.RenderedImage $r1;
        byte $b0;
        java.awt.image.ColorModel $r2;
        boolean $z0;
        java.lang.UnsupportedOperationException $r3;
        java.awt.color.ColorSpace $r4;
        int $i1;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: java.awt.image.RenderedImage;

        $b0 = 0;

        $r2 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        if $r2 != null goto label01;

        return 0;

     label01:
        $z0 = $r2 instanceof java.awt.image.IndexColorModel;

        if $z0 == 0 goto label02;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("IndexColorModel is not supported yet");

        throw $r3;

     label02:
        $z0 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        $r4 = virtualinvoke $r2.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $i1 = virtualinvoke $r4.<java.awt.color.ColorSpace: int getType()>();

        lookupswitch($i1)
        {
            case 3: goto label08;
            case 4: goto label03;
            case 5: goto label05;
            case 6: goto label04;
            case 7: goto label03;
            case 8: goto label03;
            case 9: goto label14;
            case 10: goto label03;
            case 11: goto label03;
            case 12: goto label03;
            case 13: goto label11;
            default: goto label03;
        };

     label03:
        return $b0;

     label04:
        $b0 = 1;

        goto label03;

     label05:
        if $z0 == 0 goto label07;

        $b0 = 6;

     label06:
        goto label03;

     label07:
        $b0 = 2;

        goto label06;

     label08:
        if $z0 == 0 goto label10;

        $b0 = 7;

     label09:
        goto label03;

     label10:
        $b0 = 3;

        goto label09;

     label11:
        if $z0 == 0 goto label13;

        $b0 = 10;

     label12:
        goto label03;

     label13:
        $b0 = 5;

        goto label12;

     label14:
        $b0 = 4;

        goto label03;
    }

    public javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        javax.imageio.metadata.IIOMetadata $r1;
        javax.imageio.ImageTypeSpecifier $r2;
        javax.imageio.ImageWriteParam $r3;
        java.lang.UnsupportedOperationException $r4;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: javax.imageio.metadata.IIOMetadata;

        $r2 := @parameter1: javax.imageio.ImageTypeSpecifier;

        $r3 := @parameter2: javax.imageio.ImageWriteParam;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not supported yet");

        throw $r4;
    }

    public javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageWriteParam)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        javax.imageio.metadata.IIOMetadata $r1;
        javax.imageio.ImageWriteParam $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: javax.imageio.metadata.IIOMetadata;

        $r2 := @parameter1: javax.imageio.ImageWriteParam;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not supported yet");

        throw $r3;
    }

    public void dispose()
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        long $l0;
        byte $b1;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        specialinvoke $r0.<javax.imageio.ImageWriter: void dispose()>();

        $l0 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: long cinfo>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: long cinfo> = 0L;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: javax.imageio.stream.ImageOutputStream ios> = null;

        return;

     label1:
        return;
    }

    public javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        javax.imageio.ImageTypeSpecifier $r1;
        javax.imageio.ImageWriteParam $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: javax.imageio.ImageTypeSpecifier;

        $r2 := @parameter1: javax.imageio.ImageWriteParam;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not supported yet");

        throw $r3;
    }

    public javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        javax.imageio.ImageWriteParam $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: javax.imageio.ImageWriteParam;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not supported yet");

        throw $r2;
    }

    public javax.imageio.ImageWriteParam getDefaultWriteParam()
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        javax.imageio.plugins.jpeg.JPEGImageWriteParam $r1;
        java.util.Locale $r2;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 = new javax.imageio.plugins.jpeg.JPEGImageWriteParam;

        $r2 = virtualinvoke $r0.<javax.imageio.ImageWriter: java.util.Locale getLocale()>();

        specialinvoke $r1.<javax.imageio.plugins.jpeg.JPEGImageWriteParam: void <init>(java.util.Locale)>($r2);

        return $r1;
    }

    public void setOutput(java.lang.Object)
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        java.lang.Object $r1;
        javax.imageio.stream.ImageOutputStream $r2;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: java.lang.Object;

        specialinvoke $r0.<javax.imageio.ImageWriter: void setOutput(java.lang.Object)>($r1);

        $r2 = (javax.imageio.stream.ImageOutputStream) $r1;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: javax.imageio.stream.ImageOutputStream ios> = $r2;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster> = null;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.WritableRaster scanRaster> = null;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcXOff> = 0;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcYOff> = 0;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth> = 0;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcHeight> = 0;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int deltaY> = 1;

        return;
    }

    public void write(javax.imageio.metadata.IIOMetadata, javax.imageio.IIOImage, javax.imageio.ImageWriteParam) throws java.io.IOException
    {
        org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter $r0;
        javax.imageio.metadata.IIOMetadata $r1;
        javax.imageio.IIOImage $r2;
        javax.imageio.ImageWriteParam $r3;
        javax.imageio.stream.ImageOutputStream $r4;
        java.lang.IllegalArgumentException $r5;
        java.awt.image.RenderedImage $r6, $r7;
        boolean $z0;
        java.awt.image.BufferedImage $r8;
        java.awt.image.WritableRaster $r9;
        java.awt.image.Raster $r10;
        int $i0, $i1, $i2;
        java.awt.Rectangle $r11;
        java.awt.image.SampleModel $r12;
        java.awt.image.DataBuffer $r13;
        java.awt.image.DataBufferInt $r14;
        int[] $r15;
        android.graphics.Bitmap$Config $r16;
        android.graphics.Bitmap $r17;
        com.android.internal.awt.ImageOutputStreamWrapper $r18;
        android.graphics.Bitmap$CompressFormat $r19;
        java.lang.RuntimeException $r20;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter;

        $r1 := @parameter0: javax.imageio.metadata.IIOMetadata;

        $r2 := @parameter1: javax.imageio.IIOImage;

        $r3 := @parameter2: javax.imageio.ImageWriteParam;

        $r4 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: javax.imageio.stream.ImageOutputStream ios>;

        if $r4 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ios == null");

        throw $r5;

     label01:
        if $r2 != null goto label02;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image equals null");

        throw $r5;

     label02:
        $r6 = null;

        $z0 = virtualinvoke $r2.<javax.imageio.IIOImage: boolean hasRaster()>();

        if $z0 != 0 goto label10;

        $r7 = virtualinvoke $r2.<javax.imageio.IIOImage: java.awt.image.RenderedImage getRenderedImage()>();

        $r6 = $r7;

        $z0 = $r7 instanceof java.awt.image.BufferedImage;

        if $z0 == 0 goto label09;

        $r8 = (java.awt.image.BufferedImage) $r7;

        $r9 = virtualinvoke $r8.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster> = $r9;

     label03:
        $r10 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster>;

        virtualinvoke $r10.<java.awt.image.Raster: int getNumBands()>();

        if $r6 != null goto label11;

     label04:
        $r10 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster>;

        $i0 = virtualinvoke $r10.<java.awt.image.Raster: int getWidth()>();

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth> = $i0;

        $r10 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster>;

        $i0 = virtualinvoke $r10.<java.awt.image.Raster: int getHeight()>();

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcHeight> = $i0;

        if $r3 == null goto label08;

        $r11 = virtualinvoke $r3.<javax.imageio.IIOParam: java.awt.Rectangle getSourceRegion()>();

        if $r11 == null goto label07;

        $i0 = $r11.<java.awt.Rectangle: int x>;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcXOff> = $i0;

        $i0 = $r11.<java.awt.Rectangle: int y>;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcYOff> = $i0;

        $i0 = $r11.<java.awt.Rectangle: int width>;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcXOff>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth>;

        if $i0 <= $i1 goto label12;

        $i0 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth>;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcXOff>;

        $i0 = $i0 - $i1;

     label05:
        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth> = $i0;

        $i0 = $r11.<java.awt.Rectangle: int height>;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcYOff>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcHeight>;

        if $i0 <= $i1 goto label13;

        $i0 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcHeight>;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcYOff>;

        $i0 = $i0 - $i1;

     label06:
        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcHeight> = $i0;

     label07:
        $i0 = virtualinvoke $r3.<javax.imageio.IIOParam: int getSourceXSubsampling()>();

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int deltaX> = $i0;

        $i0 = virtualinvoke $r3.<javax.imageio.IIOParam: int getSourceYSubsampling()>();

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int deltaY> = $i0;

        $i1 = virtualinvoke $r3.<javax.imageio.IIOParam: int getSubsamplingXOffset()>();

        $i0 = virtualinvoke $r3.<javax.imageio.IIOParam: int getSubsamplingYOffset()>();

        $i2 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcXOff>;

        $i2 = $i2 + $i1;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcXOff> = $i2;

        $i2 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcYOff>;

        $i2 = $i2 + $i0;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcYOff> = $i2;

        $i2 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth>;

        $i1 = $i2 - $i1;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth> = $i1;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcHeight>;

        $i0 = $i1 - $i0;

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcHeight> = $i0;

     label08:
        $r10 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster>;

        $r12 = virtualinvoke $r10.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z0 = $r12 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z0 == 0 goto label14;

        $r10 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster>;

        $r13 = virtualinvoke $r10.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r14 = (java.awt.image.DataBufferInt) $r13;

        $r15 = virtualinvoke $r14.<java.awt.image.DataBufferInt: int[] getData()>();

        $i0 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcWidth>;

        $i1 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int srcHeight>;

        $r16 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r17 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>($r15, $i0, $i1, $r16);

        <org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: android.graphics.Bitmap bm> = $r17;

        $r18 = new com.android.internal.awt.ImageOutputStreamWrapper;

        $r4 = $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: javax.imageio.stream.ImageOutputStream ios>;

        specialinvoke $r18.<com.android.internal.awt.ImageOutputStreamWrapper: void <init>(javax.imageio.stream.ImageOutputStream)>($r4);

        $r17 = <org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: android.graphics.Bitmap bm>;

        $r19 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat JPEG>;

        virtualinvoke $r17.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r19, 100, $r18);

        return;

     label09:
        $r10 = interfaceinvoke $r7.<java.awt.image.RenderedImage: java.awt.image.Raster getData()>();

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster> = $r10;

        goto label03;

     label10:
        $r10 = virtualinvoke $r2.<javax.imageio.IIOImage: java.awt.image.Raster getRaster()>();

        $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: java.awt.image.Raster sourceRaster> = $r10;

        goto label03;

     label11:
        specialinvoke $r0.<org.apache.harmony.x.imageio.plugins.jpeg.JPEGImageWriter: int getSourceCSType(java.awt.image.RenderedImage)>($r6);

        goto label04;

     label12:
        $i0 = $r11.<java.awt.Rectangle: int width>;

        goto label05;

     label13:
        $i0 = $r11.<java.awt.Rectangle: int height>;

        goto label06;

     label14:
        $r20 = new java.lang.RuntimeException;

        specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("Color model not supported yet");

        throw $r20;
    }
}
