public class android.test.TestRecorder extends java.lang.Object implements android.test.TestRunner$Listener, junit.framework.TestListener
{
    private static final int DATABASE_VERSION;
    private static android.database.sqlite.SQLiteDatabase sDb;
    private java.util.Set mFailedTests;

    public void <init>()
    {
        android.test.TestRecorder $r0;
        java.util.HashSet $r1;

        $r0 := @this: android.test.TestRecorder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r0.<android.test.TestRecorder: java.util.Set mFailedTests> = $r1;

        return;
    }

    private static android.database.sqlite.SQLiteDatabase getDatabase()
    {
        java.io.File $r0, $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.String $r3;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.Exception $r5;

        $r2 = <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase sDb>;

        if $r2 != null goto label3;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "test_results");

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r0, "TestHarness.db");

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r2 = staticinvoke <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r3, null);

        <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase sDb> = $r2;

        $r2 = <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase sDb>;

        $i0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int getVersion()>();

        if $i0 != 0 goto label3;

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $i0 = staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r3, 438, -1, -1);

        if $i0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Set permissions for ");

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned = ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("TestRecorder", $r3);

     label1:
        $r2 = <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase sDb>;

     label2:
        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE IF NOT EXISTS tests (_id INT PRIMARY KEY,name TEXT,result TEXT,exception TEXT,started INTEGER,finished INTEGER,time INTEGER,iterations INTEGER,allocations INTEGER,parent INTEGER);");

        $r2 = <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase sDb>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void setVersion(int)>(1);

     label3:
        $r2 = <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase sDb>;

        return $r2;

     label4:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestRecorder", "failed to create table \'tests\'", $r5);

        <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase sDb> = null;

        goto label3;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        android.test.TestRecorder $r0;
        junit.framework.Test $r1;
        java.lang.Throwable $r2;
        java.util.Set $r3;
        java.lang.String $r4;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = $r0.<android.test.TestRecorder: java.util.Set mFailedTests>;

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRecorder: void failed(java.lang.String,java.lang.Throwable)>($r4, $r2);

        return;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        android.test.TestRecorder $r0;
        junit.framework.Test $r1;
        junit.framework.AssertionFailedError $r2;
        java.util.Set $r3;
        java.lang.String $r4, $r5;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: junit.framework.AssertionFailedError;

        $r3 = $r0.<android.test.TestRecorder: java.util.Set mFailedTests>;

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r0.<android.test.TestRecorder: void failed(java.lang.String,java.lang.String)>($r4, $r5);

        return;
    }

    public void endTest(junit.framework.Test)
    {
        android.test.TestRecorder $r0;
        junit.framework.Test $r1;
        java.lang.String $r2;
        java.util.Set $r3;
        boolean $z0;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRecorder: void finished(java.lang.String)>($r2);

        $r3 = $r0.<android.test.TestRecorder: java.util.Set mFailedTests>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRecorder: void passed(java.lang.String)>($r2);

     label1:
        $r3 = $r0.<android.test.TestRecorder: java.util.Set mFailedTests>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r2);

        return;
    }

    public void failed(java.lang.String, java.lang.String)
    {
        android.test.TestRecorder $r0;
        java.lang.String $r1, $r2;
        android.content.ContentValues $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new android.content.ContentValues;

        specialinvoke $r3.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("result", "failed");

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("exception", $r2);

        $r4 = staticinvoke <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name = \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("tests", $r3, $r1, null);

        return;
    }

    public void failed(java.lang.String, java.lang.Throwable)
    {
        android.test.TestRecorder $r0;
        java.lang.String $r1, $r6;
        java.lang.Throwable $r2, $r9;
        android.content.ContentValues $r3;
        java.io.PrintWriter $r4;
        java.io.StringWriter $r5;
        android.database.sqlite.SQLiteDatabase $r7;
        java.lang.StringBuilder $r8;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Throwable;

        $r5 = new java.io.StringWriter;

        specialinvoke $r5.<java.io.StringWriter: void <init>()>();

        $r4 = new java.io.PrintWriter;

        specialinvoke $r4.<java.io.PrintWriter: void <init>(java.io.Writer)>($r5);

     label1:
        virtualinvoke $r2.<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>($r4);

     label2:
        virtualinvoke $r4.<java.io.PrintWriter: void close()>();

        $r3 = new android.content.ContentValues;

        specialinvoke $r3.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("result", "failed");

        $r6 = virtualinvoke $r5.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("exception", $r6);

        $r7 = staticinvoke <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name = \'");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("tests", $r3, $r1, null);

        return;

     label3:
        $r9 := @caughtexception;

        virtualinvoke $r4.<java.io.PrintWriter: void close()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void finished(java.lang.String)
    {
        android.test.TestRecorder $r0;
        java.lang.String $r1;
        android.content.ContentValues $r2;
        long $l0;
        java.lang.Long $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: java.lang.String;

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>(int)>(1);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("finished", $r3);

        $r4 = staticinvoke <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name = \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("tests", $r2, $r1, null);

        return;
    }

    public void passed(java.lang.String)
    {
        android.test.TestRecorder $r0;
        java.lang.String $r1;
        android.content.ContentValues $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: java.lang.String;

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("result", "passed");

        $r3 = staticinvoke <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name = \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("tests", $r2, $r1, null);

        return;
    }

    public void performance(java.lang.String, long, int, java.util.List)
    {
        android.test.TestRecorder $r0;
        java.lang.String $r1, $r8;
        long $l0;
        int $i1, $i2;
        java.util.List $r2;
        android.content.ContentValues $r3;
        java.lang.Long $r4;
        java.lang.Integer $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.StringBuilder $r7;
        java.lang.Object $r9;
        android.test.TestRunner$IntermediateTime $r10;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.util.List;

        $r3 = new android.content.ContentValues;

        specialinvoke $r3.<android.content.ContentValues: void <init>()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("time", $r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("iterations", $r5);

        $r6 = staticinvoke <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name = \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("tests", $r3, $r8, null);

        if $r2 == null goto label2;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label3;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label4;

        $r9 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r10 = (android.test.TestRunner$IntermediateTime) $r9;

        $r6 = staticinvoke <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INSERT INTO tests (name, time, parent) VALUES (\'");

        $r8 = $r10.<android.test.TestRunner$IntermediateTime: java.lang.String name>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\', ");

        $l0 = $r10.<android.test.TestRunner$IntermediateTime: long timeInNS>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(SELECT _id FROM tests WHERE name = \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'));");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r8);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;

     label3:
        return;

     label4:
        return;
    }

    public void startTest(junit.framework.Test)
    {
        android.test.TestRecorder $r0;
        junit.framework.Test $r1;
        java.lang.String $r2;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRecorder: void started(java.lang.String)>($r2);

        return;
    }

    public void started(java.lang.String)
    {
        android.test.TestRecorder $r0;
        java.lang.String $r1;
        android.content.ContentValues $r2;
        long $l0;
        java.lang.Long $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        java.lang.StringBuilder $r5;
        int $i1;

        $r0 := @this: android.test.TestRecorder;

        $r1 := @parameter0: java.lang.String;

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>(int)>(2);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("name", $r1);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("started", $r3);

        $r4 = staticinvoke <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase getDatabase()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name = \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("tests", $r2, $r1, null);

        if $i1 != 0 goto label1;

        $r4 = staticinvoke <android.test.TestRecorder: android.database.sqlite.SQLiteDatabase getDatabase()>();

        virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("tests", null, $r2);

        return;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <android.test.TestRecorder: int DATABASE_VERSION> = 1;

        return;
    }
}
