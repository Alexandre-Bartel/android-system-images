public class org.json.JSONStringer extends java.lang.Object
{
    private static final int maxdepth;
    private boolean comma;
    private char mode;
    private java.lang.StringBuilder sb;
    private char[] stack;
    private int top;

    public void <init>()
    {
        org.json.JSONStringer $r0;
        java.lang.StringBuilder $r1;
        char[] $r2;

        $r0 := @this: org.json.JSONStringer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r0.<org.json.JSONStringer: java.lang.StringBuilder sb> = $r1;

        $r2 = newarray (char)[20];

        $r0.<org.json.JSONStringer: char[] stack> = $r2;

        $r0.<org.json.JSONStringer: int top> = 0;

        $r0.<org.json.JSONStringer: char mode> = 105;

        $r0.<org.json.JSONStringer: boolean comma> = 0;

        return;
    }

    private org.json.JSONStringer append(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        java.lang.String $r1;
        org.json.JSONException $r2;
        char $c0;
        boolean $z0;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.json.JSONStringer;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Null pointer");

        throw $r2;

     label1:
        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 == 111 goto label2;

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 != 97 goto label5;

     label2:
        $z0 = $r0.<org.json.JSONStringer: boolean comma>;

        if $z0 == 0 goto label3;

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 != 97 goto label3;

        $r3 = $r0.<org.json.JSONStringer: java.lang.StringBuilder sb>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        $r3 = $r0.<org.json.JSONStringer: java.lang.StringBuilder sb>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 != 111 goto label4;

        $r0.<org.json.JSONStringer: char mode> = 107;

     label4:
        $r0.<org.json.JSONStringer: boolean comma> = 1;

        return $r0;

     label5:
        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Value out of sequence.");

        throw $r2;
    }

    private org.json.JSONStringer end(char, char) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        char $c0, $c1, $c2;
        org.json.JSONException $r1;
        java.lang.String $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.json.JSONStringer;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $c2 = $r0.<org.json.JSONStringer: char mode>;

        if $c2 == $c0 goto label3;

        $r1 = new org.json.JSONException;

        if $c0 != 111 goto label2;

        $r2 = "Misplaced endObject.";

     label1:
        specialinvoke $r1.<org.json.JSONException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label2:
        $r2 = "Misplaced endArray.";

        goto label1;

     label3:
        specialinvoke $r0.<org.json.JSONStringer: void pop(char)>($c0);

        $r3 = $r0.<org.json.JSONStringer: java.lang.StringBuilder sb>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r0.<org.json.JSONStringer: boolean comma> = 1;

        return $r0;
    }

    private void pop(char) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        char $c0, $c2;
        int $i1;
        char[] $r1;
        org.json.JSONException $r2;

        $r0 := @this: org.json.JSONStringer;

        $c0 := @parameter0: char;

        $i1 = $r0.<org.json.JSONStringer: int top>;

        if $i1 <= 0 goto label1;

        $r1 = $r0.<org.json.JSONStringer: char[] stack>;

        $i1 = $r0.<org.json.JSONStringer: int top>;

        $i1 = $i1 - 1;

        $c2 = $r1[$i1];

        if $c2 == $c0 goto label2;

     label1:
        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Nesting error.");

        throw $r2;

     label2:
        $i1 = $r0.<org.json.JSONStringer: int top>;

        $i1 = $i1 - 1;

        $r0.<org.json.JSONStringer: int top> = $i1;

        $i1 = $r0.<org.json.JSONStringer: int top>;

        if $i1 != 0 goto label4;

        $c0 = 100;

     label3:
        $r0.<org.json.JSONStringer: char mode> = $c0;

        return;

     label4:
        $r1 = $r0.<org.json.JSONStringer: char[] stack>;

        $i1 = $r0.<org.json.JSONStringer: int top>;

        $i1 = $i1 - 1;

        $c0 = $r1[$i1];

        goto label3;
    }

    private void push(char) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        char $c0;
        int $i1;
        org.json.JSONException $r1;
        char[] $r2;

        $r0 := @this: org.json.JSONStringer;

        $c0 := @parameter0: char;

        $i1 = $r0.<org.json.JSONStringer: int top>;

        if $i1 < 20 goto label1;

        $r1 = new org.json.JSONException;

        specialinvoke $r1.<org.json.JSONException: void <init>(java.lang.String)>("Nesting too deep.");

        throw $r1;

     label1:
        $r2 = $r0.<org.json.JSONStringer: char[] stack>;

        $i1 = $r0.<org.json.JSONStringer: int top>;

        $r2[$i1] = $c0;

        $r0.<org.json.JSONStringer: char mode> = $c0;

        $i1 = $r0.<org.json.JSONStringer: int top>;

        $i1 = $i1 + 1;

        $r0.<org.json.JSONStringer: int top> = $i1;

        return;
    }

    public org.json.JSONStringer array() throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        char $c0;
        org.json.JSONException $r1;

        $r0 := @this: org.json.JSONStringer;

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 == 105 goto label1;

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 == 111 goto label1;

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 != 97 goto label2;

     label1:
        specialinvoke $r0.<org.json.JSONStringer: void push(char)>(97);

        specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer append(java.lang.String)>("[");

        $r0.<org.json.JSONStringer: boolean comma> = 0;

        return $r0;

     label2:
        $r1 = new org.json.JSONException;

        specialinvoke $r1.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced array.");

        throw $r1;
    }

    public org.json.JSONStringer endArray() throws org.json.JSONException
    {
        org.json.JSONStringer $r0;

        $r0 := @this: org.json.JSONStringer;

        $r0 = specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer end(char,char)>(97, 93);

        return $r0;
    }

    public org.json.JSONStringer endObject() throws org.json.JSONException
    {
        org.json.JSONStringer $r0;

        $r0 := @this: org.json.JSONStringer;

        $r0 = specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer end(char,char)>(107, 125);

        return $r0;
    }

    public org.json.JSONStringer key(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        java.lang.String $r1;
        org.json.JSONException $r2;
        char $c0;
        boolean $z0;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.json.JSONStringer;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Null key.");

        throw $r2;

     label1:
        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 != 107 goto label3;

        $z0 = $r0.<org.json.JSONStringer: boolean comma>;

        if $z0 == 0 goto label2;

        $r3 = $r0.<org.json.JSONStringer: java.lang.StringBuilder sb>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r3 = $r0.<org.json.JSONStringer: java.lang.StringBuilder sb>;

        $r1 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = $r0.<org.json.JSONStringer: java.lang.StringBuilder sb>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r0.<org.json.JSONStringer: boolean comma> = 0;

        $r0.<org.json.JSONStringer: char mode> = 111;

        return $r0;

     label3:
        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced key.");

        throw $r2;
    }

    public org.json.JSONStringer object() throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        char $c0;
        org.json.JSONException $r1;

        $r0 := @this: org.json.JSONStringer;

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 != 105 goto label1;

        $r0.<org.json.JSONStringer: char mode> = 111;

     label1:
        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 == 111 goto label2;

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 != 97 goto label3;

     label2:
        specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer append(java.lang.String)>("{");

        specialinvoke $r0.<org.json.JSONStringer: void push(char)>(107);

        $r0.<org.json.JSONStringer: boolean comma> = 0;

        return $r0;

     label3:
        $r1 = new org.json.JSONException;

        specialinvoke $r1.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced object.");

        throw $r1;
    }

    public java.lang.String toString()
    {
        org.json.JSONStringer $r0;
        java.lang.String $r1;
        char $c0;
        java.lang.StringBuilder $r2;

        $r0 := @this: org.json.JSONStringer;

        $c0 = $r0.<org.json.JSONStringer: char mode>;

        if $c0 != 100 goto label1;

        $r2 = $r0.<org.json.JSONStringer: java.lang.StringBuilder sb>;

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;

     label1:
        return null;
    }

    public org.json.JSONStringer value(double) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        double $d0;
        java.lang.Double $r1;

        $r0 := @this: org.json.JSONStringer;

        $d0 := @parameter0: double;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>($d0);

        $r0 = virtualinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer value(java.lang.Object)>($r1);

        return $r0;
    }

    public org.json.JSONStringer value(long) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        long $l0;
        java.lang.String $r1;

        $r0 := @this: org.json.JSONStringer;

        $l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r0 = specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer append(java.lang.String)>($r1);

        return $r0;
    }

    public org.json.JSONStringer value(java.lang.Object) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.lang.Number $r3;
        java.lang.String $r4;

        $r0 := @this: org.json.JSONStringer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <org.json.JSONObject: java.lang.Object NULL>;

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r0 = specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer append(java.lang.String)>("null");

        return $r0;

     label1:
        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        staticinvoke <org.json.JSONObject: void testValidity(java.lang.Object)>($r1);

        $r3 = (java.lang.Number) $r1;

        $r4 = staticinvoke <org.json.JSONObject: java.lang.String numberToString(java.lang.Number)>($r3);

        $r0 = specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer append(java.lang.String)>($r4);

        return $r0;

     label2:
        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 != 0 goto label3;

        $z0 = $r1 instanceof org.json.JSONArray;

        if $z0 != 0 goto label3;

        $z0 = $r1 instanceof org.json.JSONObject;

        if $z0 == 0 goto label4;

     label3:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r0 = specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer append(java.lang.String)>($r4);

        return $r0;

     label4:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r4 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>($r4);

        $r0 = specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer append(java.lang.String)>($r4);

        return $r0;
    }

    public org.json.JSONStringer value(boolean) throws org.json.JSONException
    {
        org.json.JSONStringer $r0;
        boolean $z0;
        java.lang.String $r1;

        $r0 := @this: org.json.JSONStringer;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        $r1 = "true";

     label1:
        $r0 = specialinvoke $r0.<org.json.JSONStringer: org.json.JSONStringer append(java.lang.String)>($r1);

        return $r0;

     label2:
        $r1 = "false";

        goto label1;
    }

    public static void <clinit>()
    {
        <org.json.JSONStringer: int maxdepth> = 20;

        return;
    }
}
