public class android.media.MediaPlayer extends java.lang.Object
{
    private static final int MEDIA_BUFFERING_UPDATE;
    private static final int MEDIA_ERROR;
    public static final int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK;
    public static final int MEDIA_ERROR_SERVER_DIED;
    public static final int MEDIA_ERROR_UNKNOWN;
    private static final int MEDIA_INFO;
    public static final int MEDIA_INFO_BAD_INTERLEAVING;
    public static final int MEDIA_INFO_NOT_SEEKABLE;
    public static final int MEDIA_INFO_UNKNOWN;
    public static final int MEDIA_INFO_VIDEO_TRACK_LAGGING;
    private static final int MEDIA_NOP;
    private static final int MEDIA_PLAYBACK_COMPLETE;
    private static final int MEDIA_PREPARED;
    private static final int MEDIA_SEEK_COMPLETE;
    private static final int MEDIA_SET_VIDEO_SIZE;
    private static final java.lang.String TAG;
    private android.media.MediaPlayer$EventHandler mEventHandler;
    private int mListenerContext;
    private int mNativeContext;
    private android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener;
    private android.media.MediaPlayer$OnCompletionListener mOnCompletionListener;
    private android.media.MediaPlayer$OnErrorListener mOnErrorListener;
    private android.media.MediaPlayer$OnInfoListener mOnInfoListener;
    private android.media.MediaPlayer$OnPreparedListener mOnPreparedListener;
    private android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener;
    private android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener;
    private boolean mScreenOnWhilePlaying;
    private boolean mStayAwake;
    private android.view.Surface mSurface;
    private android.view.SurfaceHolder mSurfaceHolder;
    private android.os.PowerManager$WakeLock mWakeLock;

    static void <clinit>()
    {
        <android.media.MediaPlayer: java.lang.String TAG> = "MediaPlayer";

        <android.media.MediaPlayer: int MEDIA_SET_VIDEO_SIZE> = 5;

        <android.media.MediaPlayer: int MEDIA_SEEK_COMPLETE> = 4;

        <android.media.MediaPlayer: int MEDIA_PREPARED> = 1;

        <android.media.MediaPlayer: int MEDIA_PLAYBACK_COMPLETE> = 2;

        <android.media.MediaPlayer: int MEDIA_NOP> = 0;

        <android.media.MediaPlayer: int MEDIA_INFO_VIDEO_TRACK_LAGGING> = 700;

        <android.media.MediaPlayer: int MEDIA_INFO_UNKNOWN> = 1;

        <android.media.MediaPlayer: int MEDIA_INFO_NOT_SEEKABLE> = 801;

        <android.media.MediaPlayer: int MEDIA_INFO_BAD_INTERLEAVING> = 800;

        <android.media.MediaPlayer: int MEDIA_INFO> = 200;

        <android.media.MediaPlayer: int MEDIA_ERROR_UNKNOWN> = 1;

        <android.media.MediaPlayer: int MEDIA_ERROR_SERVER_DIED> = 100;

        <android.media.MediaPlayer: int MEDIA_ERROR_NOT_VALID_FOR_PROGRESSIVE_PLAYBACK> = 200;

        <android.media.MediaPlayer: int MEDIA_ERROR> = 100;

        <android.media.MediaPlayer: int MEDIA_BUFFERING_UPDATE> = 3;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("media_jni");

        return;
    }

    public void <init>()
    {
        android.media.MediaPlayer $r0;
        android.os.Looper $r1;
        android.media.MediaPlayer$EventHandler $r2;
        java.lang.ref.WeakReference $r3;

        $r0 := @this: android.media.MediaPlayer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = null;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r1 == null goto label2;

        $r2 = new android.media.MediaPlayer$EventHandler;

        specialinvoke $r2.<android.media.MediaPlayer$EventHandler: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.os.Looper)>($r0, $r0, $r1);

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = $r2;

     label1:
        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r0);

        specialinvoke $r0.<android.media.MediaPlayer: void native_setup(java.lang.Object)>($r3);

        return;

     label2:
        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r1 == null goto label3;

        $r2 = new android.media.MediaPlayer$EventHandler;

        specialinvoke $r2.<android.media.MediaPlayer$EventHandler: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.os.Looper)>($r0, $r0, $r1);

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = $r2;

        goto label1;

     label3:
        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler> = null;

        goto label1;
    }

    private native void _pause() throws java.lang.IllegalStateException;

    private native void _release();

    private native void _reset();

    private native void _start() throws java.lang.IllegalStateException;

    private native void _stop() throws java.lang.IllegalStateException;

    static int access$000(android.media.MediaPlayer)
    {
        android.media.MediaPlayer $r0;
        int i0;

        $r0 := @parameter0: android.media.MediaPlayer;

        i0 = $r0.<android.media.MediaPlayer: int mNativeContext>;

        return i0;
    }

    static android.media.MediaPlayer$OnPreparedListener access$100(android.media.MediaPlayer)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnPreparedListener r1;

        $r0 := @parameter0: android.media.MediaPlayer;

        r1 = $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener>;

        return r1;
    }

    static android.media.MediaPlayer$OnCompletionListener access$200(android.media.MediaPlayer)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnCompletionListener r1;

        $r0 := @parameter0: android.media.MediaPlayer;

        r1 = $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener>;

        return r1;
    }

    static void access$300(android.media.MediaPlayer, boolean)
    {
        android.media.MediaPlayer $r0;
        boolean $z0;

        $r0 := @parameter0: android.media.MediaPlayer;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<android.media.MediaPlayer: void stayAwake(boolean)>($z0);

        return;
    }

    static android.media.MediaPlayer$OnBufferingUpdateListener access$400(android.media.MediaPlayer)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnBufferingUpdateListener r1;

        $r0 := @parameter0: android.media.MediaPlayer;

        r1 = $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener>;

        return r1;
    }

    static android.media.MediaPlayer$OnSeekCompleteListener access$500(android.media.MediaPlayer)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnSeekCompleteListener r1;

        $r0 := @parameter0: android.media.MediaPlayer;

        r1 = $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener>;

        return r1;
    }

    static android.media.MediaPlayer$OnVideoSizeChangedListener access$600(android.media.MediaPlayer)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnVideoSizeChangedListener r1;

        $r0 := @parameter0: android.media.MediaPlayer;

        r1 = $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener>;

        return r1;
    }

    static android.media.MediaPlayer$OnErrorListener access$700(android.media.MediaPlayer)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnErrorListener r1;

        $r0 := @parameter0: android.media.MediaPlayer;

        r1 = $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener>;

        return r1;
    }

    static android.media.MediaPlayer$OnInfoListener access$800(android.media.MediaPlayer)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnInfoListener r1;

        $r0 := @parameter0: android.media.MediaPlayer;

        r1 = $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener>;

        return r1;
    }

    public static android.media.MediaPlayer create(android.content.Context, int)
    {
        android.content.Context $r0;
        int $i0;
        android.media.MediaPlayer $r1;
        android.content.res.Resources $r2;
        android.content.res.AssetFileDescriptor $r3;
        java.io.FileDescriptor $r4;
        long $l1, $l2;
        java.io.IOException $r5;
        java.lang.IllegalArgumentException $r6;
        java.lang.SecurityException $r7;

        $r0 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>($i0);

     label2:
        if $r3 != null goto label3;

        return null;

     label3:
        $r1 = new android.media.MediaPlayer;

        specialinvoke $r1.<android.media.MediaPlayer: void <init>()>();

        $r4 = virtualinvoke $r3.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l1 = virtualinvoke $r3.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l2 = virtualinvoke $r3.<android.content.res.AssetFileDescriptor: long getLength()>();

        virtualinvoke $r1.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>($r4, $l1, $l2);

        virtualinvoke $r3.<android.content.res.AssetFileDescriptor: void close()>();

        virtualinvoke $r1.<android.media.MediaPlayer: void prepare()>();

     label4:
        return $r1;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r5);

     label6:
        return null;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r6);

        goto label6;

     label8:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r7);

        goto label6;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
        catch java.lang.IllegalArgumentException from label1 to label2 with label7;
        catch java.lang.IllegalArgumentException from label3 to label4 with label7;
        catch java.lang.SecurityException from label1 to label2 with label8;
        catch java.lang.SecurityException from label3 to label4 with label8;
    }

    public static android.media.MediaPlayer create(android.content.Context, android.net.Uri)
    {
        android.content.Context $r0;
        android.net.Uri $r1;
        android.media.MediaPlayer $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.net.Uri;

        $r2 = staticinvoke <android.media.MediaPlayer: android.media.MediaPlayer create(android.content.Context,android.net.Uri,android.view.SurfaceHolder)>($r0, $r1, null);

        return $r2;
    }

    public static android.media.MediaPlayer create(android.content.Context, android.net.Uri, android.view.SurfaceHolder)
    {
        android.content.Context $r0;
        android.net.Uri $r1;
        android.view.SurfaceHolder $r2;
        android.media.MediaPlayer $r3;
        java.io.IOException $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.SecurityException $r6;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.net.Uri;

        $r2 := @parameter2: android.view.SurfaceHolder;

        $r3 = new android.media.MediaPlayer;

     label1:
        specialinvoke $r3.<android.media.MediaPlayer: void <init>()>();

        virtualinvoke $r3.<android.media.MediaPlayer: void setDataSource(android.content.Context,android.net.Uri)>($r0, $r1);

        if $r2 == null goto label2;

        virtualinvoke $r3.<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>($r2);

     label2:
        virtualinvoke $r3.<android.media.MediaPlayer: void prepare()>();

     label3:
        return $r3;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r4);

     label5:
        return null;

     label6:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r5);

        goto label5;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("MediaPlayer", "create failed:", $r6);

        goto label5;

        catch java.io.IOException from label1 to label3 with label4;
        catch java.lang.IllegalArgumentException from label1 to label3 with label6;
        catch java.lang.SecurityException from label1 to label3 with label7;
    }

    private final native void native_finalize();

    private final native void native_setup(java.lang.Object);

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object $r0, $r1;
        java.lang.ref.WeakReference $r2;
        android.media.MediaPlayer $r3;
        android.media.MediaPlayer$EventHandler $r4;
        android.os.Message $r5;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $r2 = (java.lang.ref.WeakReference) $r1;

        $r1 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        $r3 = (android.media.MediaPlayer) $r1;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = $r3.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        if $r4 == null goto label2;

        $r4 = $r3.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>($i0, $i1, $i2, $r0);

        $r4 = $r3.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>($r5);

        return;

     label2:
        return;
    }

    private void stayAwake(boolean)
    {
        android.media.MediaPlayer $r0;
        boolean $z0, $z1;
        android.os.PowerManager$WakeLock $r1;

        $r0 := @this: android.media.MediaPlayer;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        if $r1 == null goto label1;

        if $z0 == 0 goto label2;

        $r1 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        $z1 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 != 0 goto label2;

        $r1 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void acquire()>();

     label1:
        $r0.<android.media.MediaPlayer: boolean mStayAwake> = $z0;

        specialinvoke $r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;

     label2:
        if $z0 != 0 goto label1;

        $r1 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        $z1 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label1;

        $r1 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void release()>();

        goto label1;
    }

    private void updateSurfaceScreenOn()
    {
        android.media.MediaPlayer $r0;
        android.view.SurfaceHolder $r1;
        boolean $z0;

        $r0 := @this: android.media.MediaPlayer;

        $r1 = $r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder>;

        if $r1 == null goto label3;

        $r1 = $r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder>;

        $z0 = $r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying>;

        if $z0 == 0 goto label2;

        $z0 = $r0.<android.media.MediaPlayer: boolean mStayAwake>;

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        interfaceinvoke $r1.<android.view.SurfaceHolder: void setKeepScreenOn(boolean)>($z0);

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return;
    }

    protected void finalize()
    {
        android.media.MediaPlayer $r0;

        $r0 := @this: android.media.MediaPlayer;

        specialinvoke $r0.<android.media.MediaPlayer: void native_finalize()>();

        return;
    }

    public native int getCurrentPosition();

    public native int getDuration();

    public native android.graphics.Bitmap getFrameAt(int) throws java.lang.IllegalStateException;

    public native int getVideoHeight();

    public native int getVideoWidth();

    public native boolean isLooping();

    public native boolean isPlaying();

    public void pause() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer $r0;

        $r0 := @this: android.media.MediaPlayer;

        specialinvoke $r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke $r0.<android.media.MediaPlayer: void _pause()>();

        return;
    }

    public native void prepare() throws java.io.IOException, java.lang.IllegalStateException;

    public native void prepareAsync() throws java.lang.IllegalStateException;

    public void release()
    {
        android.media.MediaPlayer $r0;

        $r0 := @this: android.media.MediaPlayer;

        specialinvoke $r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke $r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener> = null;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener> = null;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener> = null;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener> = null;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener> = null;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener> = null;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener> = null;

        specialinvoke $r0.<android.media.MediaPlayer: void _release()>();

        return;
    }

    public void reset()
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$EventHandler $r1;

        $r0 := @this: android.media.MediaPlayer;

        specialinvoke $r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke $r0.<android.media.MediaPlayer: void _reset()>();

        $r1 = $r0.<android.media.MediaPlayer: android.media.MediaPlayer$EventHandler mEventHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>(null);

        return;
    }

    public native void seekTo(int) throws java.lang.IllegalStateException;

    public native void setAudioStreamType(int);

    public void setDataSource(android.content.Context, android.net.Uri) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer $r0;
        android.content.Context $r1;
        android.net.Uri $r2;
        java.lang.String $r3;
        boolean $z0;
        android.content.res.AssetFileDescriptor $r4, $r6;
        android.content.ContentResolver $r5;
        long $l0, $l2;
        byte $b1;
        java.io.FileDescriptor $r7;
        java.lang.SecurityException $r8;
        java.io.IOException $r9;
        java.lang.Throwable $r10;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.net.Uri;

        $r3 = virtualinvoke $r2.<android.net.Uri: java.lang.String getScheme()>();

        if $r3 == null goto label01;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("file");

        if $z0 == 0 goto label02;

     label01:
        $r3 = virtualinvoke $r2.<android.net.Uri: java.lang.String getPath()>();

        virtualinvoke $r0.<android.media.MediaPlayer: void setDataSource(java.lang.String)>($r3);

        return;

     label02:
        $r4 = null;

     label03:
        $r5 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = virtualinvoke $r5.<android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)>($r2, "r");

     label04:
        $r4 = $r6;

        if $r6 != null goto label05;

        if $r6 == null goto label16;

        virtualinvoke $r6.<android.content.res.AssetFileDescriptor: void close()>();

        return;

     label05:
        $l0 = virtualinvoke $r6.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

     label06:
        $b1 = $l0 cmp 0L;

     label07:
        if $b1 >= 0 goto label09;

        $r7 = virtualinvoke $r6.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        virtualinvoke $r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>($r7);

     label08:
        if $r6 == null goto label17;

        virtualinvoke $r6.<android.content.res.AssetFileDescriptor: void close()>();

        return;

     label09:
        $r7 = virtualinvoke $r6.<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>();

        $l0 = virtualinvoke $r6.<android.content.res.AssetFileDescriptor: long getStartOffset()>();

        $l2 = virtualinvoke $r6.<android.content.res.AssetFileDescriptor: long getDeclaredLength()>();

        virtualinvoke $r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>($r7, $l0, $l2);

     label10:
        goto label08;

     label11:
        $r8 := @caughtexception;

        if $r4 == null goto label12;

        virtualinvoke $r4.<android.content.res.AssetFileDescriptor: void close()>();

     label12:
        $r3 = virtualinvoke $r2.<android.net.Uri: java.lang.String toString()>();

        virtualinvoke $r0.<android.media.MediaPlayer: void setDataSource(java.lang.String)>($r3);

        return;

     label13:
        $r9 := @caughtexception;

        if $r4 == null goto label12;

        virtualinvoke $r4.<android.content.res.AssetFileDescriptor: void close()>();

        goto label12;

     label14:
        $r10 := @caughtexception;

        if $r4 == null goto label15;

        virtualinvoke $r4.<android.content.res.AssetFileDescriptor: void close()>();

     label15:
        throw $r10;

     label16:
        return;

     label17:
        return;

        catch java.lang.SecurityException from label03 to label04 with label11;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.SecurityException from label05 to label06 with label11;
        catch java.lang.SecurityException from label07 to label08 with label11;
        catch java.io.IOException from label05 to label06 with label13;
        catch java.io.IOException from label07 to label08 with label13;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.SecurityException from label09 to label10 with label11;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.lang.Throwable from label09 to label10 with label14;
    }

    public void setDataSource(java.io.FileDescriptor) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException
    {
        android.media.MediaPlayer $r0;
        java.io.FileDescriptor $r1;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: java.io.FileDescriptor;

        virtualinvoke $r0.<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>($r1, 0L, 576460752303423487L);

        return;
    }

    public native void setDataSource(java.io.FileDescriptor, long, long) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;

    public native void setDataSource(java.lang.String) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.IllegalStateException;

    public void setDisplay(android.view.SurfaceHolder)
    {
        android.media.MediaPlayer $r0;
        android.view.SurfaceHolder $r1;
        android.view.Surface $r2;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.view.SurfaceHolder;

        $r0.<android.media.MediaPlayer: android.view.SurfaceHolder mSurfaceHolder> = $r1;

        $r2 = interfaceinvoke $r1.<android.view.SurfaceHolder: android.view.Surface getSurface()>();

        $r0.<android.media.MediaPlayer: android.view.Surface mSurface> = $r2;

        specialinvoke $r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;
    }

    public native void setLooping(boolean);

    public void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnBufferingUpdateListener $r1;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.media.MediaPlayer$OnBufferingUpdateListener;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener mOnBufferingUpdateListener> = $r1;

        return;
    }

    public void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnCompletionListener $r1;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.media.MediaPlayer$OnCompletionListener;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener mOnCompletionListener> = $r1;

        return;
    }

    public void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnErrorListener $r1;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.media.MediaPlayer$OnErrorListener;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener mOnErrorListener> = $r1;

        return;
    }

    public void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnInfoListener $r1;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.media.MediaPlayer$OnInfoListener;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener mOnInfoListener> = $r1;

        return;
    }

    public void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnPreparedListener $r1;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.media.MediaPlayer$OnPreparedListener;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener mOnPreparedListener> = $r1;

        return;
    }

    public void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnSeekCompleteListener $r1;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.media.MediaPlayer$OnSeekCompleteListener;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener mOnSeekCompleteListener> = $r1;

        return;
    }

    public void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)
    {
        android.media.MediaPlayer $r0;
        android.media.MediaPlayer$OnVideoSizeChangedListener $r1;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.media.MediaPlayer$OnVideoSizeChangedListener;

        $r0.<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener mOnVideoSizeChangedListener> = $r1;

        return;
    }

    public void setScreenOnWhilePlaying(boolean)
    {
        android.media.MediaPlayer $r0;
        boolean $z0, $z1;

        $r0 := @this: android.media.MediaPlayer;

        $z0 := @parameter0: boolean;

        $z1 = $r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying>;

        if $z1 == $z0 goto label1;

        $r0.<android.media.MediaPlayer: boolean mScreenOnWhilePlaying> = $z0;

        specialinvoke $r0.<android.media.MediaPlayer: void updateSurfaceScreenOn()>();

        return;

     label1:
        return;
    }

    public native void setVolume(float, float);

    public void setWakeMode(android.content.Context, int)
    {
        android.media.MediaPlayer $r0;
        android.content.Context $r1;
        int $i0;
        boolean $z0, $z1;
        android.os.PowerManager$WakeLock $r2;
        java.lang.Object $r3;
        android.os.PowerManager $r4;
        java.lang.Class $r5;
        java.lang.String $r6;

        $r0 := @this: android.media.MediaPlayer;

        $r1 := @parameter0: android.content.Context;

        $i0 := @parameter1: int;

        $z0 = 0;

        $r2 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        if $r2 == null goto label2;

        $r2 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        $z1 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label1;

        $z0 = 1;

        $r2 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = null;

     label2:
        $r3 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r4 = (android.os.PowerManager) $r3;

        $i0 = 536870912 | $i0;

        $r5 = class "android/media/MediaPlayer";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r4.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>($i0, $r6);

        $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock> = $r2;

        $r2 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        if $z0 == 0 goto label3;

        $r2 = $r0.<android.media.MediaPlayer: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire()>();

        return;

     label3:
        return;
    }

    public void start() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer $r0;

        $r0 := @this: android.media.MediaPlayer;

        specialinvoke $r0.<android.media.MediaPlayer: void stayAwake(boolean)>(1);

        specialinvoke $r0.<android.media.MediaPlayer: void _start()>();

        return;
    }

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.MediaPlayer $r0;

        $r0 := @this: android.media.MediaPlayer;

        specialinvoke $r0.<android.media.MediaPlayer: void stayAwake(boolean)>(0);

        specialinvoke $r0.<android.media.MediaPlayer: void _stop()>();

        return;
    }
}
