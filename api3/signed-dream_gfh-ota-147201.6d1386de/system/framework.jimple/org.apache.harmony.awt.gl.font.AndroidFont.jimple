public class org.apache.harmony.awt.gl.font.AndroidFont extends org.apache.harmony.awt.gl.font.FontPeerImpl
{
    private long display;
    private int[] fontUnicodeRanges;
    private java.util.Hashtable glyphs;
    private int screen;

    public void <init>(java.lang.String, int, int)
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.util.Hashtable $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        specialinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: void <init>()>();

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.AndroidFont: java.util.Hashtable glyphs> = $r2;

        $r0.<org.apache.harmony.awt.gl.font.AndroidFont: long display> = 0L;

        $r0.<org.apache.harmony.awt.gl.font.AndroidFont: int screen> = 0;

        staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String name> = $r1;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int size> = $i1;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int style> = $i0;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: void initAndroidFont()>();

        return;
    }

    public static java.awt.Font embedFont(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.RuntimeException $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("embedFont not implemented!");

        throw $r1;
    }

    public boolean addGlyph(char)
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        char $c0;
        java.lang.RuntimeException $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $c0 := @parameter0: char;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented!");

        throw $r1;
    }

    public void addGlyphs(char, char)
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        char $c0, $c1, $c2;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        int $i3;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $c2 = $c0;

        if $c1 >= $c0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String)>("awt.09");

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        if $c2 >= $c1 goto label2;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: boolean addGlyph(char)>($c2);

        $i3 = $c2 + 1;

        $c2 = (char) $i3;

        goto label1;

     label2:
        return;
    }

    public boolean canDisplay(char)
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        char $c0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $c0 := @parameter0: char;

        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: boolean isGlyphExists(char)>($c0);

        return $z0;
    }

    public void dispose()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.io.File $r1;
        long $l0;
        byte $b1;
        boolean $z0;
        java.lang.String $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $l0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: long pFont>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: long pFont> = 0L;

        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean isCreatedFromStream()>();

        if $z0 == 0 goto label2;

        $r1 = new java.io.File;

        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String getTempFontFileName()>();

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        virtualinvoke $r1.<java.io.File: java.lang.String getParent()>();

        virtualinvoke $r1.<java.io.File: boolean delete()>();

        return;

     label1:
        return;

     label2:
        return;
    }

    public org.apache.harmony.awt.gl.font.Glyph getDefaultGlyph()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.lang.RuntimeException $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("DefaultGlyphs not implemented!");

        throw $r1;
    }

    public org.apache.harmony.awt.gl.font.FontExtraMetrics getExtraMetrics()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.lang.RuntimeException $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented!");

        throw $r1;
    }

    public java.lang.String getFamily()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String fontFamilyName>;

        return r1;
    }

    public java.lang.String getFamily(java.util.Locale)
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.util.Locale $r1;
        java.lang.String $r2;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 := @parameter0: java.util.Locale;

        $i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int fontType>;

        if $i0 != 4 goto label1;

        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: java.lang.String getFamily()>();

        return $r2;

     label1:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String fontFamilyName>;

        return $r2;
    }

    public java.lang.String getFontName()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.lang.String $r1;
        long $l0;
        byte $b1;
        int $i2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $l0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: long pFont>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String faceName>;

        if $r1 != null goto label1;

        $i2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int fontType>;

        if $i2 != 2 goto label1;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: java.lang.String getFamily()>();

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String faceName> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String faceName>;

        return $r1;
    }

    public java.lang.String getFontName(java.util.Locale)
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.util.Locale $r1;
        java.lang.String $r2;
        long $l0;
        byte $b1;
        int $i2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 := @parameter0: java.util.Locale;

        $l0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: long pFont>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $i2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int fontType>;

        if $i2 != 2 goto label2;

     label1:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String name>;

        return $r2;

     label2:
        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: java.lang.String getFontName()>();

        return $r2;
    }

    public org.apache.harmony.awt.gl.font.Glyph getGlyph(char)
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        char $c0;
        java.lang.Integer $r1;
        java.util.Hashtable $r2;
        boolean $z0;
        java.lang.Object $r3;
        org.apache.harmony.awt.gl.font.Glyph $r4;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $c0 := @parameter0: char;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($c0);

        $r2 = $r0.<org.apache.harmony.awt.gl.font.AndroidFont: java.util.Hashtable glyphs>;

        $z0 = virtualinvoke $r2.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.AndroidFont: java.util.Hashtable glyphs>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.harmony.awt.gl.font.Glyph) $r3;

        return $r4;

     label1:
        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: boolean addGlyph(char)>($c0);

        if $z0 == 0 goto label2;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.AndroidFont: java.util.Hashtable glyphs>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.harmony.awt.gl.font.Glyph) $r3;

        return $r4;

     label2:
        $r4 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: org.apache.harmony.awt.gl.font.Glyph getDefaultGlyph()>();

        return $r4;
    }

    public java.awt.font.LineMetrics getLineMetrics(java.lang.String, java.awt.font.FontRenderContext, java.awt.geom.AffineTransform)
    {
        java.lang.String $r0;
        java.awt.font.FontRenderContext $r1;
        java.awt.geom.AffineTransform $r2;
        org.apache.harmony.awt.gl.font.AndroidFont $r3;
        org.apache.harmony.awt.gl.font.LineMetricsImpl $r4;
        java.lang.Object $r5;
        int $i0;
        boolean $z0;
        double $d0;
        float $f0, $f1;

        $r3 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.awt.font.FontRenderContext;

        $r2 := @parameter2: java.awt.geom.AffineTransform;

        $r4 = $r3.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        virtualinvoke $r4.<org.apache.harmony.awt.gl.font.LineMetricsImpl: float[] getBaselineOffsets()>();

        $r4 = $r3.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.LineMetricsImpl: java.lang.Object clone()>();

        $r4 = (org.apache.harmony.awt.gl.font.LineMetricsImpl) $r5;

        $r4 = (org.apache.harmony.awt.gl.font.LineMetricsImpl) $r4;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        virtualinvoke $r4.<org.apache.harmony.awt.gl.font.LineMetricsImpl: void setNumChars(int)>($i0);

        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label2;

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $f0 = (float) $d0;

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleY()>();

        $f1 = (float) $d0;

        virtualinvoke $r4.<org.apache.harmony.awt.gl.font.LineMetricsImpl: void scale(float,float)>($f0, $f1);

        return $r4;

     label1:
        return $r4;

     label2:
        return $r4;
    }

    public int getMissingGlyphCode()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        org.apache.harmony.awt.gl.font.Glyph $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFont: org.apache.harmony.awt.gl.font.Glyph getDefaultGlyph()>();

        $i0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.font.Glyph: int getGlyphCode()>();

        return $i0;
    }

    public java.lang.String getPSName()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String psName>;

        return r1;
    }

    public int[] getUnicodeRanges()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        int[] $r1, $r2, $r3;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.AndroidFont: int[] fontUnicodeRanges>;

        $i0 = lengthof $r1;

        $r1 = newarray (int)[$i0];

        $r2 = $r0.<org.apache.harmony.awt.gl.font.AndroidFont: int[] fontUnicodeRanges>;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.AndroidFont: int[] fontUnicodeRanges>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        return $r1;
    }

    public void initAndroidFont()
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        float $f0, $f1, $f2;
        org.apache.harmony.awt.gl.font.AndroidLineMetrics $r1;
        org.apache.harmony.awt.gl.font.LineMetricsImpl $r2;
        int $i0;
        java.awt.geom.Rectangle2D$Float $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 = new org.apache.harmony.awt.gl.font.AndroidLineMetrics;

        specialinvoke $r1.<org.apache.harmony.awt.gl.font.AndroidLineMetrics: void <init>(org.apache.harmony.awt.gl.font.AndroidFont,java.awt.font.FontRenderContext,java.lang.String)>($r0, null, " ");

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm> = $r1;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.LineMetricsImpl: int getLogicalAscent()>();

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int ascent> = $i0;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.LineMetricsImpl: int getLogicalDescent()>();

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int descent> = $i0;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $f0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.LineMetricsImpl: float getHeight()>();

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: float height> = $f0;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.LineMetricsImpl: int getLogicalLeading()>();

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int leading> = $i0;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.LineMetricsImpl: int getLogicalMaxCharWidth()>();

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int maxAdvance> = $i0;

        $i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int fontType>;

        if $i0 != 2 goto label2;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: char defaultChar> = 1;

     label1:
        $r3 = new java.awt.geom.Rectangle2D$Float;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $f0 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.LineMetricsImpl: float getAscent()>();

        $f1 = neg $f0;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        $f2 = virtualinvoke $r2.<org.apache.harmony.awt.gl.font.LineMetricsImpl: float getMaxCharWidth()>();

        $f0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: float height>;

        specialinvoke $r3.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(0.0F, $f1, $f2, $f0);

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.awt.geom.Rectangle2D maxCharBounds> = $r3;

        return;

     label2:
        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: char defaultChar> = 0;

        goto label1;
    }

    public boolean isGlyphExists(char)
    {
        org.apache.harmony.awt.gl.font.AndroidFont $r0;
        char $c0;
        java.lang.RuntimeException $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFont;

        $c0 := @parameter0: char;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("DefaultGlyphs not implemented!");

        throw $r1;
    }
}
