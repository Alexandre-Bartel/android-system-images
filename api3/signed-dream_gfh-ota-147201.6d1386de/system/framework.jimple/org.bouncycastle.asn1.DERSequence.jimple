public class org.bouncycastle.asn1.DERSequence extends org.bouncycastle.asn1.ASN1Sequence
{

    public void <init>()
    {
        org.bouncycastle.asn1.DERSequence $r0;

        $r0 := @this: org.bouncycastle.asn1.DERSequence;

        specialinvoke $r0.<org.bouncycastle.asn1.ASN1Sequence: void <init>()>();

        return;
    }

    public void <init>(org.bouncycastle.asn1.DEREncodable)
    {
        org.bouncycastle.asn1.DERSequence $r0;
        org.bouncycastle.asn1.DEREncodable $r1;

        $r0 := @this: org.bouncycastle.asn1.DERSequence;

        $r1 := @parameter0: org.bouncycastle.asn1.DEREncodable;

        specialinvoke $r0.<org.bouncycastle.asn1.ASN1Sequence: void <init>()>();

        virtualinvoke $r0.<org.bouncycastle.asn1.ASN1Collection: void addObject(org.bouncycastle.asn1.DEREncodable)>($r1);

        return;
    }

    public void <init>(org.bouncycastle.asn1.DEREncodableVector)
    {
        org.bouncycastle.asn1.DERSequence $r0;
        org.bouncycastle.asn1.DEREncodableVector $r1;
        int $i0, $i1;
        org.bouncycastle.asn1.DEREncodable $r2;

        $r0 := @this: org.bouncycastle.asn1.DERSequence;

        $r1 := @parameter0: org.bouncycastle.asn1.DEREncodableVector;

        specialinvoke $r0.<org.bouncycastle.asn1.ASN1Sequence: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<org.bouncycastle.asn1.DEREncodableVector: int size()>();

        if $i0 == $i1 goto label2;

        $r2 = virtualinvoke $r1.<org.bouncycastle.asn1.DEREncodableVector: org.bouncycastle.asn1.DEREncodable get(int)>($i0);

        virtualinvoke $r0.<org.bouncycastle.asn1.ASN1Collection: void addObject(org.bouncycastle.asn1.DEREncodable)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(org.bouncycastle.asn1.ASN1Encodable[])
    {
        org.bouncycastle.asn1.DERSequence $r0;
        org.bouncycastle.asn1.ASN1Encodable[] $r1;
        int $i0, $i1;
        org.bouncycastle.asn1.ASN1Encodable $r2;

        $r0 := @this: org.bouncycastle.asn1.DERSequence;

        $r1 := @parameter0: org.bouncycastle.asn1.ASN1Encodable[];

        specialinvoke $r0.<org.bouncycastle.asn1.ASN1Sequence: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label2;

        $r2 = $r1[$i0];

        virtualinvoke $r0.<org.bouncycastle.asn1.ASN1Collection: void addObject(org.bouncycastle.asn1.DEREncodable)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    void encode(org.bouncycastle.asn1.DEROutputStream) throws java.io.IOException
    {
        org.bouncycastle.asn1.DERSequence $r0;
        org.bouncycastle.asn1.DEROutputStream $r1, $r3;
        java.io.ByteArrayOutputStream $r2;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        byte[] $r6;

        $r0 := @this: org.bouncycastle.asn1.DERSequence;

        $r1 := @parameter0: org.bouncycastle.asn1.DEROutputStream;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = new org.bouncycastle.asn1.DEROutputStream;

        specialinvoke $r3.<org.bouncycastle.asn1.DEROutputStream: void <init>(java.io.OutputStream)>($r2);

        $r4 = virtualinvoke $r0.<org.bouncycastle.asn1.ASN1Collection: java.util.Enumeration getObjects()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        virtualinvoke $r3.<org.bouncycastle.asn1.DEROutputStream: void writeObject(java.lang.Object)>($r5);

        goto label1;

     label2:
        virtualinvoke $r3.<java.io.FilterOutputStream: void close()>();

        $r6 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r1.<org.bouncycastle.asn1.DEROutputStream: void writeEncoded(int,byte[])>(48, $r6);

        return;
    }
}
