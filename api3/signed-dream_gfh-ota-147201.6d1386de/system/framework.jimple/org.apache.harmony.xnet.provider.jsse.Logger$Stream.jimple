public class org.apache.harmony.xnet.provider.jsse.Logger$Stream extends java.io.PrintStream
{
    private static int indent;
    private final java.lang.String prefix;

    static void <clinit>()
    {
        <org.apache.harmony.xnet.provider.jsse.Logger$Stream: int indent> = 0;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        java.lang.String $r1;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3;
        java.lang.Thread $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $r1 := @parameter0: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r0.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r2);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r4.<java.lang.Thread: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: java.lang.String prefix> = $r1;

        return;
    }

    public void endIndent()
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $i0 = <org.apache.harmony.xnet.provider.jsse.Logger$Stream: int indent>;

        $i0 = $i0 - 1;

        <org.apache.harmony.xnet.provider.jsse.Logger$Stream: int indent> = $i0;

        return;
    }

    public void newIndent()
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $i0 = <org.apache.harmony.xnet.provider.jsse.Logger$Stream: int indent>;

        $i0 = $i0 + 1;

        <org.apache.harmony.xnet.provider.jsse.Logger$Stream: int indent> = $i0;

        return;
    }

    public void print(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        java.lang.String $r1;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = <org.apache.harmony.xnet.provider.jsse.Logger$Stream: int indent>;

        if $i0 >= $i1 goto label2;

        specialinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>("  ");

        $i0 = $i0 + 1;

        goto label1;

     label2:
        specialinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>($r1);

        return;
    }

    public void print(byte[])
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[],int,int)>(16, " ", "", $r1, 0, $i0);

        return;
    }

    public void print(byte[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        byte[] $r1;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[],int,int)>(16, " ", "", $r1, $i0, $i1);

        return;
    }

    public void printAsHex(int, java.lang.String, java.lang.String, byte[])
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;
        byte[] $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: byte[];

        $i1 = lengthof $r3;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[],int,int)>($i0, $r1, $r2, $r3, 0, $i1);

        return;
    }

    public void printAsHex(int, java.lang.String, java.lang.String, byte[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r1, $r2, $r4, $r5, $r6;
        byte[] $r3;
        byte $b5;
        short $s6;
        java.lang.StringBuilder $r7;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: byte[];

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r4 = "";

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label4;

        $i4 = $i3 + $i1;

        $b5 = $r3[$i4];

        $s6 = $b5 & 255;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s6);

        $r5 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>();

        $r6 = $r5;

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i4 != 1 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = $r5;

        $i4 = $i3 + 1;

        $i4 = $i4 % $i0;

        if $i4 != 0 goto label3;

        specialinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r4 = "";

     label3:
        $i3 = $i3 + 1;

        goto label1;

     label4:
        specialinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }

    public void println(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;
        java.lang.String $r1, $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.Logger$Stream;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: java.lang.String prefix>;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(java.lang.String)>($r2);

        specialinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r1);

        return;
    }
}
