public class org.apache.harmony.security.DefaultPolicyScanner extends java.lang.Object
{

    public void <init>()
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected java.lang.String composeStatus(java.io.StreamTokenizer)
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.StreamTokenizer $r1;
        java.lang.String $r2;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.StreamTokenizer;

        $r2 = virtualinvoke $r1.<java.io.StreamTokenizer: java.lang.String toString()>();

        return $r2;
    }

    protected java.io.StreamTokenizer configure(java.io.StreamTokenizer)
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.StreamTokenizer $r1;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.StreamTokenizer;

        virtualinvoke $r1.<java.io.StreamTokenizer: void slashSlashComments(boolean)>(1);

        virtualinvoke $r1.<java.io.StreamTokenizer: void slashStarComments(boolean)>(1);

        virtualinvoke $r1.<java.io.StreamTokenizer: void wordChars(int,int)>(95, 95);

        virtualinvoke $r1.<java.io.StreamTokenizer: void wordChars(int,int)>(36, 36);

        return $r1;
    }

    protected final void handleUnexpectedToken(java.io.StreamTokenizer) throws org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.StreamTokenizer $r1;
        org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.StreamTokenizer;

        $r2 = new org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException;

        $r3 = virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: java.lang.String composeStatus(java.io.StreamTokenizer)>($r1);

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.90", $r3);

        specialinvoke $r2.<org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    protected final void handleUnexpectedToken(java.io.StreamTokenizer, java.lang.String) throws org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.StreamTokenizer $r1;
        java.lang.String $r2, $r4;
        org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException $r3;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.StreamTokenizer;

        $r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException;

        $r4 = virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: java.lang.String composeStatus(java.io.StreamTokenizer)>($r1);

        $r2 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object,java.lang.Object)>("security.8F", $r4, $r2);

        specialinvoke $r3.<org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException: void <init>(java.lang.String)>($r2);

        throw $r3;
    }

    protected org.apache.harmony.security.DefaultPolicyScanner$GrantEntry readGrantEntry(java.io.StreamTokenizer) throws java.io.IOException, org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.StreamTokenizer $r1;
        org.apache.harmony.security.DefaultPolicyScanner$GrantEntry $r2;
        int $i0;
        java.lang.String $r3, $r4;
        boolean $z0;
        org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry $r5;
        java.util.Collection $r6;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.StreamTokenizer;

        $r2 = new org.apache.harmony.security.DefaultPolicyScanner$GrantEntry;

        specialinvoke $r2.<org.apache.harmony.security.DefaultPolicyScanner$GrantEntry: void <init>()>();

     label1:
        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        lookupswitch($i0)
        {
            case -3: goto label3;
            case 44: goto label1;
            case 123: goto label9;
            default: goto label2;
        };

     label2:
        virtualinvoke $r1.<java.io.StreamTokenizer: void pushBack()>();

        return $r2;

     label3:
        $r3 = "signedby";

        $r4 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label5;

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != 34 goto label4;

        $r3 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$GrantEntry: java.lang.String signers> = $r3;

        goto label1;

     label4:
        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.8B");

        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer,java.lang.String)>($r1, $r3);

        goto label1;

     label5:
        $r3 = "codebase";

        $r4 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label7;

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != 34 goto label6;

        $r3 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$GrantEntry: java.lang.String codebase> = $r3;

        goto label1;

     label6:
        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.8C");

        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer,java.lang.String)>($r1, $r3);

        goto label1;

     label7:
        $r3 = "principal";

        $r4 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label8;

        $r5 = virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry readPrincipalEntry(java.io.StreamTokenizer)>($r1);

        virtualinvoke $r2.<org.apache.harmony.security.DefaultPolicyScanner$GrantEntry: void addPrincipal(org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry)>($r5);

        goto label1;

     label8:
        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer)>($r1);

        goto label1;

     label9:
        $r6 = virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: java.util.Collection readPermissionEntries(java.io.StreamTokenizer)>($r1);

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$GrantEntry: java.util.Collection permissions> = $r6;

        return $r2;
    }

    protected org.apache.harmony.security.DefaultPolicyScanner$KeystoreEntry readKeystoreEntry(java.io.StreamTokenizer) throws java.io.IOException, org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.StreamTokenizer $r1;
        org.apache.harmony.security.DefaultPolicyScanner$KeystoreEntry $r2;
        int $i0;
        java.lang.String $r3;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.StreamTokenizer;

        $r2 = new org.apache.harmony.security.DefaultPolicyScanner$KeystoreEntry;

        specialinvoke $r2.<org.apache.harmony.security.DefaultPolicyScanner$KeystoreEntry: void <init>()>();

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != 34 goto label3;

        $r3 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$KeystoreEntry: java.lang.String url> = $r3;

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 == 34 goto label1;

        $i0 = $r1.<java.io.StreamTokenizer: int ttype>;

        if $i0 != 44 goto label2;

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != 34 goto label2;

     label1:
        $r3 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$KeystoreEntry: java.lang.String type> = $r3;

        return $r2;

     label2:
        virtualinvoke $r1.<java.io.StreamTokenizer: void pushBack()>();

        return $r2;

     label3:
        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.8A");

        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer,java.lang.String)>($r1, $r3);

        return $r2;
    }

    protected java.util.Collection readPermissionEntries(java.io.StreamTokenizer) throws java.io.IOException, org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.StreamTokenizer $r1;
        org.apache.harmony.security.DefaultPolicyScanner$PermissionEntry $r2;
        java.util.HashSet $r3;
        int $i0;
        java.lang.String $r4, $r5;
        boolean $z0;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.StreamTokenizer;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

     label01:
        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        lookupswitch($i0)
        {
            case -3: goto label03;
            case 59: goto label01;
            case 125: goto label11;
            default: goto label02;
        };

     label02:
        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer)>($r1);

        goto label01;

     label03:
        $r4 = "permission";

        $r5 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 == 0 goto label10;

        $r2 = new org.apache.harmony.security.DefaultPolicyScanner$PermissionEntry;

        specialinvoke $r2.<org.apache.harmony.security.DefaultPolicyScanner$PermissionEntry: void <init>()>();

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != -3 goto label10;

        $r4 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$PermissionEntry: java.lang.String klass> = $r4;

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != 34 goto label04;

        $r4 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$PermissionEntry: java.lang.String name> = $r4;

        virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

     label04:
        $i0 = $r1.<java.io.StreamTokenizer: int ttype>;

        if $i0 != 44 goto label05;

        virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

     label05:
        $i0 = $r1.<java.io.StreamTokenizer: int ttype>;

        if $i0 != 34 goto label06;

        $r4 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$PermissionEntry: java.lang.String actions> = $r4;

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != 44 goto label06;

        virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

     label06:
        $i0 = $r1.<java.io.StreamTokenizer: int ttype>;

        if $i0 != -3 goto label09;

        $r4 = "signedby";

        $r5 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 == 0 goto label09;

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != 34 goto label08;

        $r4 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$PermissionEntry: java.lang.String signers> = $r4;

     label07:
        interfaceinvoke $r3.<java.util.Collection: boolean add(java.lang.Object)>($r2);

        goto label01;

     label08:
        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer)>($r1);

        goto label07;

     label09:
        virtualinvoke $r1.<java.io.StreamTokenizer: void pushBack()>();

        goto label07;

     label10:
        $r4 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.8E");

        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer,java.lang.String)>($r1, $r4);

        goto label01;

     label11:
        return $r3;
    }

    protected org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry readPrincipalEntry(java.io.StreamTokenizer) throws java.io.IOException, org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.StreamTokenizer $r1;
        org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry $r2;
        int $i0;
        java.lang.String $r3;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.StreamTokenizer;

        $r2 = new org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry;

        specialinvoke $r2.<org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry: void <init>()>();

        $i0 = virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        if $i0 != -3 goto label2;

        $r3 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry: java.lang.String klass> = $r3;

        virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

     label1:
        $i0 = $r1.<java.io.StreamTokenizer: int ttype>;

        if $i0 != 34 goto label3;

        $r3 = $r1.<java.io.StreamTokenizer: java.lang.String sval>;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry: java.lang.String name> = $r3;

        return $r2;

     label2:
        $i0 = $r1.<java.io.StreamTokenizer: int ttype>;

        if $i0 != 42 goto label1;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry: java.lang.String klass> = "*";

        virtualinvoke $r1.<java.io.StreamTokenizer: int nextToken()>();

        goto label1;

     label3:
        $i0 = $r1.<java.io.StreamTokenizer: int ttype>;

        if $i0 != 42 goto label4;

        $r2.<org.apache.harmony.security.DefaultPolicyScanner$PrincipalEntry: java.lang.String name> = "*";

        return $r2;

     label4:
        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.8D");

        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer,java.lang.String)>($r1, $r3);

        return $r2;
    }

    public void scanStream(java.io.Reader, java.util.Collection, java.util.List) throws java.io.IOException, org.apache.harmony.security.DefaultPolicyScanner$InvalidFormatException
    {
        org.apache.harmony.security.DefaultPolicyScanner $r0;
        java.io.Reader $r1;
        java.util.Collection $r2;
        java.util.List $r3;
        java.io.StreamTokenizer $r4;
        int $i0;
        java.lang.String $r5, $r6;
        boolean $z0;
        org.apache.harmony.security.DefaultPolicyScanner$KeystoreEntry $r7;
        org.apache.harmony.security.DefaultPolicyScanner$GrantEntry $r8;

        $r0 := @this: org.apache.harmony.security.DefaultPolicyScanner;

        $r1 := @parameter0: java.io.Reader;

        $r2 := @parameter1: java.util.Collection;

        $r3 := @parameter2: java.util.List;

        $r4 = new java.io.StreamTokenizer;

        specialinvoke $r4.<java.io.StreamTokenizer: void <init>(java.io.Reader)>($r1);

        $r4 = virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: java.io.StreamTokenizer configure(java.io.StreamTokenizer)>($r4);

     label1:
        $i0 = virtualinvoke $r4.<java.io.StreamTokenizer: int nextToken()>();

        lookupswitch($i0)
        {
            case -3: goto label3;
            case -1: goto label6;
            case 59: goto label1;
            default: goto label2;
        };

     label2:
        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer)>($r4);

        goto label1;

     label3:
        $r5 = "keystore";

        $r6 = $r4.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: org.apache.harmony.security.DefaultPolicyScanner$KeystoreEntry readKeystoreEntry(java.io.StreamTokenizer)>($r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label4:
        $r5 = "grant";

        $r6 = $r4.<java.io.StreamTokenizer: java.lang.String sval>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6);

        if $z0 == 0 goto label5;

        $r8 = virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: org.apache.harmony.security.DefaultPolicyScanner$GrantEntry readGrantEntry(java.io.StreamTokenizer)>($r4);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label1;

     label5:
        $r5 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.89");

        virtualinvoke $r0.<org.apache.harmony.security.DefaultPolicyScanner: void handleUnexpectedToken(java.io.StreamTokenizer,java.lang.String)>($r4, $r5);

        goto label1;

     label6:
        return;
    }
}
