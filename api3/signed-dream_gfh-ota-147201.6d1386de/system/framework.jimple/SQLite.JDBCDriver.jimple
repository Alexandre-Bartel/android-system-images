public class SQLite.JDBCDriver extends java.lang.Object implements java.sql.Driver
{
    public static final int MAJORVERSION;
    public static final int MINORVERSION;
    private static java.lang.reflect.Constructor makeConn;
    protected java.sql.Connection conn;

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.Exception $r1, $r4, $r8, $r9;
        java.lang.Class $r2;
        java.lang.String $r3;
        boolean $z0;
        java.io.PrintStream $r5;
        java.lang.reflect.Constructor $r6;
        SQLite.JDBCDriver $r7;

        <SQLite.JDBCDriver: int MINORVERSION> = 2;

        <SQLite.JDBCDriver: int MAJORVERSION> = 1;

        <SQLite.JDBCDriver: java.lang.reflect.Constructor makeConn> = null;

     label01:
        $r0 = newarray (java.lang.Class)[2];

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.lang.String");

        $r0[0] = $r2;

        $r2 = $r0[0];

        $r0[1] = $r2;

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version");

        if $r3 == null goto label02;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("1.0");

        if $z0 == 0 goto label04;

     label02:
        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>(java.lang.String)>("unsupported java version");

        throw $r4;

     label03:
        $r4 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>($r4);

        return;

     label04:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("1.1");

        if $z0 == 0 goto label09;

        $r3 = "SQLite.JDBC1.JDBCConnection";

     label05:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

        $r6 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r0);

     label06:
        <SQLite.JDBCDriver: java.lang.reflect.Constructor makeConn> = $r6;

     label07:
        $r7 = new SQLite.JDBCDriver;

        specialinvoke $r7.<SQLite.JDBCDriver: void <init>()>();

        staticinvoke <java.sql.DriverManager: void registerDriver(java.sql.Driver)>($r7);

     label08:
        return;

     label09:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("1.2");

        if $z0 != 0 goto label10;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("1.3");

        if $z0 == 0 goto label12;

     label10:
        $r3 = "SQLite.JDBC2.JDBCConnection";

     label11:
        goto label05;

     label12:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("1.4");

        if $z0 == 0 goto label15;

     label13:
        $r3 = "SQLite.JDBC2x.JDBCConnection";

     label14:
        goto label05;

     label15:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>("1.5");

     label16:
        if $z0 == 0 goto label20;

        $r3 = "SQLite.JDBC2y.JDBCConnection";

     label17:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("SQLite.JDBC2y.JDBCConnection");

     label18:
        goto label05;

     label19:
        $r8 := @caughtexception;

        $r3 = "SQLite.JDBC2x.JDBCConnection";

        goto label05;

     label20:
        $r3 = "SQLite.JDBC2z.JDBCConnection";

     label21:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("SQLite.JDBC2z.JDBCConnection");

     label22:
        goto label05;

     label23:
        $r9 := @caughtexception;

        $r3 = "SQLite.JDBC2y.JDBCConnection";

     label24:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("SQLite.JDBC2y.JDBCConnection");

     label25:
        goto label05;

     label26:
        $r1 := @caughtexception;

        $r3 = "SQLite.JDBC2x.JDBCConnection";

        goto label05;

        return;

        catch java.lang.Exception from label01 to label03 with label03;
        catch java.lang.Exception from label04 to label06 with label03;
        catch java.lang.Exception from label07 to label08 with label03;
        catch java.lang.Exception from label09 to label10 with label03;
        catch java.lang.Exception from label11 to label13 with label03;
        catch java.lang.Exception from label14 to label16 with label03;
        catch java.lang.Exception from label17 to label18 with label19;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.lang.Exception from label24 to label25 with label26;
    }

    public void <init>()
    {
        SQLite.JDBCDriver $r0;

        $r0 := @this: SQLite.JDBCDriver;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean acceptsURL(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBCDriver $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @this: SQLite.JDBCDriver;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("sqlite:/");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("jdbc:sqlite:/");

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public java.sql.Connection connect(java.lang.String, java.util.Properties) throws java.sql.SQLException
    {
        SQLite.JDBCDriver $r0;
        java.lang.String $r1;
        java.util.Properties $r2;
        java.lang.Object[] $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.reflect.Constructor $r5;
        java.sql.Connection $r6;
        java.lang.reflect.InvocationTargetException $r7;
        java.sql.SQLException $r8;
        java.lang.Throwable $r9;
        java.lang.Exception $r10;

        $r0 := @this: SQLite.JDBCDriver;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Properties;

        $z0 = virtualinvoke $r0.<SQLite.JDBCDriver: boolean acceptsURL(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = newarray (java.lang.Object)[2];

        $r3[0] = $r1;

        if $r2 == null goto label2;

        $r1 = virtualinvoke $r2.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("encoding");

        $r3[1] = $r1;

     label2:
        $r4 = $r3[1];

        if $r4 != null goto label3;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("SQLite.encoding");

        $r3[1] = $r1;

     label3:
        $r5 = <SQLite.JDBCDriver: java.lang.reflect.Constructor makeConn>;

     label4:
        $r4 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

     label5:
        $r6 = (java.sql.Connection) $r4;

        $r0.<SQLite.JDBCDriver: java.sql.Connection conn> = $r6;

     label6:
        $r6 = $r0.<SQLite.JDBCDriver: java.sql.Connection conn>;

        return $r6;

     label7:
        $r7 := @caughtexception;

        $r8 = new java.sql.SQLException;

        $r9 = virtualinvoke $r7.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r1 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r8.<java.sql.SQLException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label8:
        $r10 := @caughtexception;

        $r8 = new java.sql.SQLException;

        $r1 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r8.<java.sql.SQLException: void <init>(java.lang.String)>($r1);

        throw $r8;

        catch java.lang.reflect.InvocationTargetException from label4 to label5 with label7;
        catch java.lang.Exception from label4 to label6 with label8;
    }

    public int getMajorVersion()
    {
        SQLite.JDBCDriver $r0;

        $r0 := @this: SQLite.JDBCDriver;

        return 1;
    }

    public int getMinorVersion()
    {
        SQLite.JDBCDriver $r0;

        $r0 := @this: SQLite.JDBCDriver;

        return 2;
    }

    public java.sql.DriverPropertyInfo[] getPropertyInfo(java.lang.String, java.util.Properties) throws java.sql.SQLException
    {
        SQLite.JDBCDriver $r0;
        java.lang.String $r1;
        java.util.Properties $r2;
        java.sql.DriverPropertyInfo[] $r3;
        java.sql.DriverPropertyInfo $r4;

        $r0 := @this: SQLite.JDBCDriver;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Properties;

        $r3 = newarray (java.sql.DriverPropertyInfo)[1];

        $r4 = new java.sql.DriverPropertyInfo;

        specialinvoke $r4.<java.sql.DriverPropertyInfo: void <init>(java.lang.String,java.lang.String)>("encoding", "");

        $r3[0] = $r4;

        return $r3;
    }

    public boolean jdbcCompliant()
    {
        SQLite.JDBCDriver $r0;

        $r0 := @this: SQLite.JDBCDriver;

        return 0;
    }
}
