public class android.hardware.SensorManager extends android.view.IRotationWatcher$Stub
{
    public static final int AXIS_MINUS_X;
    public static final int AXIS_MINUS_Y;
    public static final int AXIS_MINUS_Z;
    public static final int AXIS_X;
    public static final int AXIS_Y;
    public static final int AXIS_Z;
    public static final int DATA_X;
    public static final int DATA_Y;
    public static final int DATA_Z;
    public static final float GRAVITY_DEATH_STAR_I;
    public static final float GRAVITY_EARTH;
    public static final float GRAVITY_JUPITER;
    public static final float GRAVITY_MARS;
    public static final float GRAVITY_MERCURY;
    public static final float GRAVITY_MOON;
    public static final float GRAVITY_NEPTUNE;
    public static final float GRAVITY_PLUTO;
    public static final float GRAVITY_SATURN;
    public static final float GRAVITY_SUN;
    public static final float GRAVITY_THE_ISLAND;
    public static final float GRAVITY_URANUS;
    public static final float GRAVITY_VENUS;
    public static final float LIGHT_CLOUDY;
    public static final float LIGHT_FULLMOON;
    public static final float LIGHT_NO_MOON;
    public static final float LIGHT_OVERCAST;
    public static final float LIGHT_SHADE;
    public static final float LIGHT_SUNLIGHT;
    public static final float LIGHT_SUNLIGHT_MAX;
    public static final float LIGHT_SUNRISE;
    public static final float MAGNETIC_FIELD_EARTH_MAX;
    public static final float MAGNETIC_FIELD_EARTH_MIN;
    public static final int RAW_DATA_INDEX;
    public static final int RAW_DATA_X;
    public static final int RAW_DATA_Y;
    public static final int RAW_DATA_Z;
    public static final int SENSOR_ACCELEROMETER;
    public static final int SENSOR_ALL;
    public static final int SENSOR_DELAY_FASTEST;
    public static final int SENSOR_DELAY_GAME;
    public static final int SENSOR_DELAY_NORMAL;
    public static final int SENSOR_DELAY_UI;
    private static final int SENSOR_DISABLE;
    public static final int SENSOR_LIGHT;
    public static final int SENSOR_MAGNETIC_FIELD;
    public static final int SENSOR_MAX;
    public static final int SENSOR_MIN;
    public static final int SENSOR_ORIENTATION;
    public static final int SENSOR_ORIENTATION_RAW;
    public static final int SENSOR_PROXIMITY;
    public static final int SENSOR_STATUS_ACCURACY_HIGH;
    public static final int SENSOR_STATUS_ACCURACY_LOW;
    public static final int SENSOR_STATUS_ACCURACY_MEDIUM;
    public static final int SENSOR_STATUS_UNRELIABLE;
    public static final int SENSOR_TEMPERATURE;
    public static final int SENSOR_TRICORDER;
    public static final float STANDARD_GRAVITY;
    private static final java.lang.String TAG;
    private static final float[] mTempMatrix;
    private static java.util.ArrayList sFullSensorsList;
    static android.util.SparseArray sHandleToSensor;
    static final java.util.ArrayList sListeners;
    private static int sRotation;
    private static android.util.SparseArray sSensorListByType;
    private static boolean sSensorModuleInitialized;
    private static android.hardware.SensorManager$SensorThread sSensorThread;
    private static android.view.IWindowManager sWindowManager;
    private java.util.HashMap mLegacyListenersMap;
    android.os.Looper mMainLooper;
    private android.hardware.ISensorService mSensorService;

    static void <clinit>()
    {
        float[] $r0;
        java.util.ArrayList $r1;
        android.util.SparseArray $r2;

        <android.hardware.SensorManager: java.lang.String TAG> = "SensorManager";

        <android.hardware.SensorManager: float STANDARD_GRAVITY> = 9.80665F;

        <android.hardware.SensorManager: int SENSOR_TRICORDER> = 64;

        <android.hardware.SensorManager: int SENSOR_TEMPERATURE> = 4;

        <android.hardware.SensorManager: int SENSOR_STATUS_UNRELIABLE> = 0;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_MEDIUM> = 2;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_LOW> = 1;

        <android.hardware.SensorManager: int SENSOR_STATUS_ACCURACY_HIGH> = 3;

        <android.hardware.SensorManager: int SENSOR_PROXIMITY> = 32;

        <android.hardware.SensorManager: int SENSOR_ORIENTATION_RAW> = 128;

        <android.hardware.SensorManager: int SENSOR_ORIENTATION> = 1;

        <android.hardware.SensorManager: int SENSOR_MIN> = 1;

        <android.hardware.SensorManager: int SENSOR_MAX> = 64;

        <android.hardware.SensorManager: int SENSOR_MAGNETIC_FIELD> = 8;

        <android.hardware.SensorManager: int SENSOR_LIGHT> = 16;

        <android.hardware.SensorManager: int SENSOR_DISABLE> = -1;

        <android.hardware.SensorManager: int SENSOR_DELAY_UI> = 2;

        <android.hardware.SensorManager: int SENSOR_DELAY_NORMAL> = 3;

        <android.hardware.SensorManager: int SENSOR_DELAY_GAME> = 1;

        <android.hardware.SensorManager: int SENSOR_DELAY_FASTEST> = 0;

        <android.hardware.SensorManager: int SENSOR_ALL> = 127;

        <android.hardware.SensorManager: int SENSOR_ACCELEROMETER> = 2;

        <android.hardware.SensorManager: int RAW_DATA_Z> = 5;

        <android.hardware.SensorManager: int RAW_DATA_Y> = 4;

        <android.hardware.SensorManager: int RAW_DATA_X> = 3;

        <android.hardware.SensorManager: int RAW_DATA_INDEX> = 3;

        <android.hardware.SensorManager: float MAGNETIC_FIELD_EARTH_MIN> = 30.0F;

        <android.hardware.SensorManager: float MAGNETIC_FIELD_EARTH_MAX> = 60.0F;

        <android.hardware.SensorManager: float LIGHT_SUNRISE> = 400.0F;

        <android.hardware.SensorManager: float LIGHT_SUNLIGHT_MAX> = 120000.0F;

        <android.hardware.SensorManager: float LIGHT_SUNLIGHT> = 110000.0F;

        <android.hardware.SensorManager: float LIGHT_SHADE> = 20000.0F;

        <android.hardware.SensorManager: float LIGHT_OVERCAST> = 10000.0F;

        <android.hardware.SensorManager: float LIGHT_NO_MOON> = 0.001F;

        <android.hardware.SensorManager: float LIGHT_FULLMOON> = 0.25F;

        <android.hardware.SensorManager: float LIGHT_CLOUDY> = 100.0F;

        <android.hardware.SensorManager: float GRAVITY_VENUS> = 8.87F;

        <android.hardware.SensorManager: float GRAVITY_URANUS> = 8.69F;

        <android.hardware.SensorManager: float GRAVITY_THE_ISLAND> = 4.815162F;

        <android.hardware.SensorManager: float GRAVITY_SUN> = 275.0F;

        <android.hardware.SensorManager: float GRAVITY_SATURN> = 8.96F;

        <android.hardware.SensorManager: float GRAVITY_PLUTO> = 0.6F;

        <android.hardware.SensorManager: float GRAVITY_NEPTUNE> = 11.0F;

        <android.hardware.SensorManager: float GRAVITY_MOON> = 1.6F;

        <android.hardware.SensorManager: float GRAVITY_MERCURY> = 3.7F;

        <android.hardware.SensorManager: float GRAVITY_MARS> = 3.71F;

        <android.hardware.SensorManager: float GRAVITY_JUPITER> = 23.12F;

        <android.hardware.SensorManager: float GRAVITY_EARTH> = 9.80665F;

        <android.hardware.SensorManager: float GRAVITY_DEATH_STAR_I> = 3.5303614E-7F;

        <android.hardware.SensorManager: int DATA_Z> = 2;

        <android.hardware.SensorManager: int DATA_Y> = 1;

        <android.hardware.SensorManager: int DATA_X> = 0;

        <android.hardware.SensorManager: int AXIS_Z> = 3;

        <android.hardware.SensorManager: int AXIS_Y> = 2;

        <android.hardware.SensorManager: int AXIS_X> = 1;

        <android.hardware.SensorManager: int AXIS_MINUS_Z> = 131;

        <android.hardware.SensorManager: int AXIS_MINUS_Y> = 130;

        <android.hardware.SensorManager: int AXIS_MINUS_X> = 129;

        $r0 = newarray (float)[16];

        <android.hardware.SensorManager: float[] mTempMatrix> = $r0;

        <android.hardware.SensorManager: boolean sSensorModuleInitialized> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <android.hardware.SensorManager: java.util.ArrayList sFullSensorsList> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        <android.hardware.SensorManager: android.util.SparseArray sSensorListByType> = $r2;

        <android.hardware.SensorManager: int sRotation> = 0;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        <android.hardware.SensorManager: android.util.SparseArray sHandleToSensor> = $r2;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <android.hardware.SensorManager: java.util.ArrayList sListeners> = $r1;

        return;
    }

    public void <init>(android.os.Looper)
    {
        android.hardware.SensorManager $r0;
        android.os.Looper $r1;
        java.util.ArrayList $r2, $r7;
        android.hardware.Sensor $r3;
        java.util.HashMap $r4;
        android.os.IBinder $r5;
        android.hardware.ISensorService $r6;
        boolean $z0;
        android.view.IWindowManager $r8;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        android.util.SparseArray $r11;
        android.hardware.SensorManager$SensorThread $r12;
        java.lang.Throwable $r13;
        android.os.RemoteException $r14;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.os.Looper;

        specialinvoke $r0.<android.view.IRotationWatcher$Stub: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        $r0.<android.hardware.SensorManager: java.util.HashMap mLegacyListenersMap> = $r4;

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("sensor");

        $r6 = staticinvoke <android.hardware.ISensorService$Stub: android.hardware.ISensorService asInterface(android.os.IBinder)>($r5);

        $r0.<android.hardware.SensorManager: android.hardware.ISensorService mSensorService> = $r6;

        $r0.<android.hardware.SensorManager: android.os.Looper mMainLooper> = $r1;

        $r7 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        entermonitor $r7;

     label01:
        $z0 = <android.hardware.SensorManager: boolean sSensorModuleInitialized>;

        if $z0 != 0 goto label09;

        <android.hardware.SensorManager: boolean sSensorModuleInitialized> = 1;

        staticinvoke <android.hardware.SensorManager: void nativeClassInit()>();

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("window");

        $r8 = staticinvoke <android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>($r5);

        <android.hardware.SensorManager: android.view.IWindowManager sWindowManager> = $r8;

        $r8 = <android.hardware.SensorManager: android.view.IWindowManager sWindowManager>;

     label02:
        if $r8 == null goto label06;

     label03:
        $r8 = <android.hardware.SensorManager: android.view.IWindowManager sWindowManager>;

     label04:
        $i0 = interfaceinvoke $r8.<android.view.IWindowManager: int watchRotation(android.view.IRotationWatcher)>($r0);

     label05:
        <android.hardware.SensorManager: int sRotation> = $i0;

     label06:
        staticinvoke <android.hardware.SensorManager: int sensors_module_init()>();

        $r2 = <android.hardware.SensorManager: java.util.ArrayList sFullSensorsList>;

        $i0 = 0;

     label07:
        $r3 = new android.hardware.Sensor;

        specialinvoke $r3.<android.hardware.Sensor: void <init>()>();

        $i1 = staticinvoke <android.hardware.SensorManager: int sensors_module_get_next_sensor(android.hardware.Sensor,int)>($r3, $i0);

        $i0 = $i1;

        if $i1 < 0 goto label08;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("found sensor: ");

        $r10 = virtualinvoke $r3.<android.hardware.Sensor: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", handle=");

        $i2 = virtualinvoke $r3.<android.hardware.Sensor: int getHandle()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SensorManager", $r10);

        $i2 = virtualinvoke $r3.<android.hardware.Sensor: int getType()>();

        $i2 = specialinvoke $r0.<android.hardware.SensorManager: int getLegacySensorType(int)>($i2);

        virtualinvoke $r3.<android.hardware.Sensor: void setLegacyType(int)>($i2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r11 = <android.hardware.SensorManager: android.util.SparseArray sHandleToSensor>;

        $i2 = virtualinvoke $r3.<android.hardware.Sensor: int getHandle()>();

        virtualinvoke $r11.<android.util.SparseArray: void append(int,java.lang.Object)>($i2, $r3);

     label08:
        if $i1 > 0 goto label07;

        $r12 = new android.hardware.SensorManager$SensorThread;

        specialinvoke $r12.<android.hardware.SensorManager$SensorThread: void <init>()>();

        <android.hardware.SensorManager: android.hardware.SensorManager$SensorThread sSensorThread> = $r12;

     label09:
        exitmonitor $r7;

     label10:
        return;

     label11:
        $r13 := @caughtexception;

        exitmonitor $r7;

     label12:
        throw $r13;

     label13:
        $r14 := @caughtexception;

        goto label06;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.os.RemoteException from label04 to label05 with label13;
        catch java.lang.Throwable from label03 to label06 with label11;
        catch java.lang.Throwable from label06 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    public static float getInclination(float[])
    {
        float[] $r0;
        int $i0;
        float $f0;
        double $d0, $d1;

        $r0 := @parameter0: float[];

        $i0 = lengthof $r0;

        if $i0 != 9 goto label1;

        $f0 = $r0[5];

        $d0 = (double) $f0;

        $f0 = $r0[4];

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f0 = (float) $d0;

        return $f0;

     label1:
        $f0 = $r0[6];

        $d0 = (double) $f0;

        $f0 = $r0[5];

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f0 = (float) $d0;

        return $f0;
    }

    private int getLegacySensorType(int)
    {
        android.hardware.SensorManager $r0;
        int $i0;

        $r0 := @this: android.hardware.SensorManager;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label5;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 2;

     label3:
        return 8;

     label4:
        return 128;

     label5:
        return 4;
    }

    public static float[] getOrientation(float[], float[])
    {
        float[] $r0, $r1;
        int $i0;
        float $f0;
        double $d0, $d1;

        $r0 := @parameter0: float[];

        $r1 := @parameter1: float[];

        $i0 = lengthof $r0;

        if $i0 != 9 goto label1;

        $f0 = $r0[1];

        $d0 = (double) $f0;

        $f0 = $r0[4];

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f0 = (float) $d0;

        $r1[0] = $f0;

        $f0 = $r0[7];

        $f0 = neg $f0;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double asin(double)>($d0);

        $f0 = (float) $d0;

        $r1[1] = $f0;

        $f0 = $r0[6];

        $f0 = neg $f0;

        $d0 = (double) $f0;

        $f0 = $r0[8];

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f0 = (float) $d0;

        $r1[2] = $f0;

        return $r1;

     label1:
        $f0 = $r0[1];

        $d0 = (double) $f0;

        $f0 = $r0[5];

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f0 = (float) $d0;

        $r1[0] = $f0;

        $f0 = $r0[9];

        $f0 = neg $f0;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double asin(double)>($d0);

        $f0 = (float) $d0;

        $r1[1] = $f0;

        $f0 = $r0[8];

        $f0 = neg $f0;

        $d0 = (double) $f0;

        $f0 = $r0[10];

        $d1 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double atan2(double,double)>($d0, $d1);

        $f0 = (float) $d0;

        $r1[2] = $f0;

        return $r1;
    }

    static int getRotation()
    {
        java.util.ArrayList $r0;
        java.lang.Throwable $r1;
        int i0;

        $r0 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        entermonitor $r0;

     label1:
        i0 = <android.hardware.SensorManager: int sRotation>;

        exitmonitor $r0;

     label2:
        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static boolean getRotationMatrix(float[], float[], float[], float[])
    {
        float[] $r0, $r1, $r2, $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12;
        double $d0;
        byte $b0;
        int $i1;

        $r0 := @parameter0: float[];

        $r1 := @parameter1: float[];

        $r2 := @parameter2: float[];

        $r3 := @parameter3: float[];

        $f0 = $r2[0];

        $f1 = $r2[1];

        $f2 = $r2[2];

        $f3 = $r3[0];

        $f4 = $r3[1];

        $f5 = $r3[2];

        $f6 = $f4 * $f2;

        $f7 = $f5 * $f1;

        $f6 = $f6 - $f7;

        $f7 = $f5 * $f0;

        $f8 = $f3 * $f2;

        $f7 = $f7 - $f8;

        $f8 = $f3 * $f1;

        $f9 = $f4 * $f0;

        $f8 = $f8 - $f9;

        $f9 = $f6 * $f6;

        $f10 = $f7 * $f7;

        $f9 = $f9 + $f10;

        $f10 = $f8 * $f8;

        $f9 = $f9 + $f10;

        $d0 = (double) $f9;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f9 = (float) $d0;

        $b0 = $f9 cmpg 0.1F;

        if $b0 >= 0 goto label1;

        return 0;

     label1:
        $f9 = 1.0F / $f9;

        $f6 = $f6 * $f9;

        $f7 = $f7 * $f9;

        $f11 = $f8 * $f9;

        $f8 = $f0 * $f0;

        $f9 = $f1 * $f1;

        $f8 = $f8 + $f9;

        $f9 = $f2 * $f2;

        $f8 = $f8 + $f9;

        $d0 = (double) $f8;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f8 = (float) $d0;

        $f8 = 1.0F / $f8;

        $f0 = $f0 * $f8;

        $f1 = $f1 * $f8;

        $f2 = $f2 * $f8;

        $f8 = $f1 * $f11;

        $f9 = $f2 * $f7;

        $f8 = $f8 - $f9;

        $f9 = $f2 * $f6;

        $f10 = $f0 * $f11;

        $f9 = $f9 - $f10;

        $f10 = $f0 * $f7;

        $f12 = $f1 * $f6;

        $f10 = $f10 - $f12;

        if $r0 == null goto label2;

        $i1 = lengthof $r0;

        if $i1 != 9 goto label4;

        $r0[0] = $f6;

        $r0[1] = $f7;

        $r0[2] = $f11;

        $r0[3] = $f8;

        $r0[4] = $f9;

        $r0[5] = $f10;

        $r0[6] = $f0;

        $r0[7] = $f1;

        $r0[8] = $f2;

     label2:
        if $r1 == null goto label3;

        $f6 = $f3 * $f3;

        $f7 = $f4 * $f4;

        $f6 = $f6 + $f7;

        $f7 = $f5 * $f5;

        $f6 = $f6 + $f7;

        $d0 = (double) $f6;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f6 = (float) $d0;

        $f7 = 1.0F / $f6;

        $f6 = $f3 * $f8;

        $f8 = $f4 * $f9;

        $f6 = $f6 + $f8;

        $f8 = $f5 * $f10;

        $f6 = $f6 + $f8;

        $f6 = $f6 * $f7;

        $f3 = $f3 * $f0;

        $f4 = $f4 * $f1;

        $f4 = $f3 + $f4;

        $f5 = $f5 * $f2;

        $f5 = $f4 + $f5;

        $f5 = $f5 * $f7;

        $i1 = lengthof $r1;

        if $i1 != 9 goto label5;

        $f4 = 1.06535322E9F;

        $r1[0] = $f4;

        $f4 = 0.0F;

        $r1[1] = $f4;

        $f4 = 0.0F;

        $r1[2] = $f4;

        $f4 = 0.0F;

        $r1[3] = $f4;

        $r1[4] = $f6;

        $r1[5] = $f5;

        $f4 = 0.0F;

        $r1[6] = $f4;

        $f5 = neg $f5;

        $r1[7] = $f5;

        $r1[8] = $f6;

     label3:
        return 1;

     label4:
        $i1 = lengthof $r0;

        if $i1 != 16 goto label2;

        $r0[0] = $f6;

        $r0[1] = $f7;

        $r0[2] = $f11;

        $f6 = 0.0F;

        $r0[3] = $f6;

        $r0[4] = $f8;

        $r0[5] = $f9;

        $r0[6] = $f10;

        $f6 = 0.0F;

        $r0[7] = $f6;

        $r0[8] = $f0;

        $r0[9] = $f1;

        $r0[10] = $f2;

        $f6 = 0.0F;

        $r0[11] = $f6;

        $f6 = 0.0F;

        $r0[12] = $f6;

        $f6 = 0.0F;

        $r0[13] = $f6;

        $f6 = 0.0F;

        $r0[14] = $f6;

        $f6 = 1.06535322E9F;

        $r0[15] = $f6;

        goto label2;

     label5:
        $i1 = lengthof $r1;

        if $i1 != 16 goto label3;

        $f4 = 1.06535322E9F;

        $r1[0] = $f4;

        $f4 = 0.0F;

        $r1[1] = $f4;

        $f4 = 0.0F;

        $r1[2] = $f4;

        $f4 = 0.0F;

        $r1[4] = $f4;

        $r1[5] = $f6;

        $r1[6] = $f5;

        $f4 = 0.0F;

        $r1[8] = $f4;

        $f5 = neg $f5;

        $r1[9] = $f5;

        $r1[10] = $f6;

        $f5 = 0.0F;

        $r1[14] = $f5;

        $f5 = 0.0F;

        $r1[13] = $f5;

        $f5 = 0.0F;

        $r1[12] = $f5;

        $f5 = 0.0F;

        $r1[11] = $f5;

        $f5 = 0.0F;

        $r1[7] = $f5;

        $f5 = 0.0F;

        $r1[3] = $f5;

        $f5 = 1.06535322E9F;

        $r1[15] = $f5;

        goto label3;
    }

    private static native void nativeClassInit();

    private boolean registerLegacyListener(int, int, android.hardware.SensorListener, int, int)
    {
        android.hardware.SensorManager $r0;
        int $i0, $i1, $i2, $i3;
        android.hardware.SensorListener $r1;
        android.hardware.SensorManager$LegacyListener $r2, $r7;
        java.util.HashMap $r3, $r5;
        boolean $z0;
        android.hardware.Sensor $r4;
        java.lang.Object $r6;
        java.lang.Throwable $r8;

        $r0 := @this: android.hardware.SensorManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.hardware.SensorListener;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        if $r1 != null goto label01;

        return 0;

     label01:
        $z0 = 0;

        $i2 = $i2 & $i0;

        if $i2 == 0 goto label07;

        $r4 = virtualinvoke $r0.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>($i1);

        if $r4 == null goto label07;

        $r3 = $r0.<android.hardware.SensorManager: java.util.HashMap mLegacyListenersMap>;

        entermonitor $r3;

     label02:
        $r5 = $r0.<android.hardware.SensorManager: java.util.HashMap mLegacyListenersMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r2 = (android.hardware.SensorManager$LegacyListener) $r6;

        $r7 = $r2;

        if $r2 != null goto label05;

        $r2 = new android.hardware.SensorManager$LegacyListener;

        specialinvoke $r2.<android.hardware.SensorManager$LegacyListener: void <init>(android.hardware.SensorManager,android.hardware.SensorListener)>($r0, $r1);

     label03:
        $r5 = $r0.<android.hardware.SensorManager: java.util.HashMap mLegacyListenersMap>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

     label04:
        $r7 = $r2;

     label05:
        exitmonitor $r3;

     label06:
        virtualinvoke $r7.<android.hardware.SensorManager$LegacyListener: void registerSensor(int)>($i0);

        $z0 = virtualinvoke $r0.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>($r7, $r4, $i3);

     label07:
        return $z0;

     label08:
        $r8 := @caughtexception;

     label09:
        exitmonitor $r3;

     label10:
        throw $r8;

     label11:
        $r8 := @caughtexception;

        goto label09;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public static boolean remapCoordinateSystem(float[], int, int, float[])
    {
        float[] $r0, $r1, $r2;
        int $i0, $i1;
        boolean $z0;
        float $f0;
        java.lang.Throwable $r3;

        $r0 := @parameter0: float[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: float[];

        if $r0 != $r1 goto label6;

        $r2 = <android.hardware.SensorManager: float[] mTempMatrix>;

        entermonitor $r2;

     label1:
        $z0 = staticinvoke <android.hardware.SensorManager: boolean remapCoordinateSystemImpl(float[],int,int,float[])>($r0, $i0, $i1, $r2);

        if $z0 == 0 goto label5;

        $i0 = lengthof $r1;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $f0 = $r2[$i1];

        $r1[$i1] = $f0;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        exitmonitor $r2;

     label4:
        return 1;

     label5:
        exitmonitor $r2;

     label6:
        $z0 = staticinvoke <android.hardware.SensorManager: boolean remapCoordinateSystemImpl(float[],int,int,float[])>($r0, $i0, $i1, $r1);

        return $z0;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor $r2;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static boolean remapCoordinateSystemImpl(float[], int, int, float[])
    {
        float[] $r0, $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0, $z1, $z2;
        float $f0;

        $r1 := @parameter0: float[];

        $i3 := @parameter1: int;

        $i4 := @parameter2: int;

        $r0 := @parameter3: float[];

        $i5 = lengthof $r0;

        $i0 = lengthof $r1;

        if $i0 == $i5 goto label01;

        return 0;

     label01:
        $i0 = $i3 & 124;

        if $i0 != 0 goto label02;

        $i0 = $i4 & 124;

        if $i0 == 0 goto label03;

     label02:
        return 0;

     label03:
        $i0 = $i3 & 3;

        if $i0 == 0 goto label04;

        $i0 = $i4 & 3;

        if $i0 != 0 goto label05;

     label04:
        return 0;

     label05:
        $i0 = $i3 & 3;

        $i1 = $i4 & 3;

        if $i0 != $i1 goto label06;

        return 0;

     label06:
        $i6 = $i3 ^ $i4;

        $i0 = $i3 & 3;

        $i0 = $i0 - 1;

        $i1 = $i4 & 3;

        $i1 = $i1 - 1;

        $i2 = $i6 & 3;

        $i2 = $i2 - 1;

        $i7 = $i2 + 1;

        $i7 = $i7 % 3;

        $i8 = $i2 + 2;

        $i8 = $i8 % 3;

        $i7 = $i7 ^ $i0;

        $i8 = $i8 ^ $i1;

        $i7 = $i7 | $i8;

        if $i7 == 0 goto label07;

        $i6 = $i6 ^ 128;

     label07:
        if $i3 < 128 goto label20;

        $z0 = 1;

     label08:
        if $i4 < 128 goto label21;

        $z1 = 1;

     label09:
        if $i6 < 128 goto label22;

        $z2 = 1;

     label10:
        if $i5 != 16 goto label23;

        $i3 = 4;

     label11:
        $i4 = 0;

     label12:
        if $i4 >= 3 goto label28;

        $i6 = $i4 * $i3;

        $i7 = 0;

     label13:
        if $i7 >= 3 goto label27;

        if $i0 != $i7 goto label15;

        $i8 = $i6 + $i7;

        if $z0 == 0 goto label24;

        $i9 = $i6 + 0;

        $f0 = $r1[$i9];

        $f0 = neg $f0;

     label14:
        $r0[$i8] = $f0;

     label15:
        if $i1 != $i7 goto label17;

        $i8 = $i6 + $i7;

        if $z1 == 0 goto label25;

        $i9 = $i6 + 1;

        $f0 = $r1[$i9];

        $f0 = neg $f0;

     label16:
        $r0[$i8] = $f0;

     label17:
        if $i2 != $i7 goto label19;

        $i8 = $i6 + $i7;

        if $z2 == 0 goto label26;

        $i9 = $i6 + 2;

        $f0 = $r1[$i9];

        $f0 = neg $f0;

     label18:
        $r0[$i8] = $f0;

     label19:
        $i7 = $i7 + 1;

        goto label13;

     label20:
        $z0 = 0;

        goto label08;

     label21:
        $z1 = 0;

        goto label09;

     label22:
        $z2 = 0;

        goto label10;

     label23:
        $i3 = 3;

        goto label11;

     label24:
        $i9 = $i6 + 0;

        $f0 = $r1[$i9];

        goto label14;

     label25:
        $i9 = $i6 + 1;

        $f0 = $r1[$i9];

        goto label16;

     label26:
        $i9 = $i6 + 2;

        $f0 = $r1[$i9];

        goto label18;

     label27:
        $i4 = $i4 + 1;

        goto label12;

     label28:
        if $i5 != 16 goto label29;

        $f0 = 0.0F;

        $r0[14] = $f0;

        $f0 = 0.0F;

        $r0[13] = $f0;

        $f0 = 0.0F;

        $r0[12] = $f0;

        $f0 = 0.0F;

        $r0[11] = $f0;

        $f0 = 0.0F;

        $r0[7] = $f0;

        $f0 = 0.0F;

        $r0[3] = $f0;

        $f0 = 1.06535322E9F;

        $r0[15] = $f0;

     label29:
        return 1;
    }

    static native int sensors_data_close();

    static native int sensors_data_init();

    static native int sensors_data_open(java.io.FileDescriptor);

    static native int sensors_data_poll(float[], int[], long[]);

    static native int sensors_data_uninit();

    private static native int sensors_module_get_next_sensor(android.hardware.Sensor, int);

    private static native int sensors_module_init();

    private void unregisterLegacyListener(int, int, android.hardware.SensorListener, int)
    {
        android.hardware.SensorManager $r0;
        int $i0, $i1, $i2;
        android.hardware.SensorListener $r1;
        java.util.HashMap $r2, $r3;
        java.lang.Object $r4;
        android.hardware.SensorManager$LegacyListener $r5;
        android.hardware.Sensor $r6;
        boolean $z0, $z1;
        java.util.ArrayList $r7, $r8;
        java.util.Iterator $r9;
        android.hardware.SensorManager$ListenerDelegate $r10;
        java.lang.Throwable $r11, $r12, $r13;

        $r0 := @this: android.hardware.SensorManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.hardware.SensorListener;

        $i2 := @parameter3: int;

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = $r0.<android.hardware.SensorManager: java.util.HashMap mLegacyListenersMap>;

        entermonitor $r2;

     label02:
        $r3 = $r0.<android.hardware.SensorManager: java.util.HashMap mLegacyListenersMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (android.hardware.SensorManager$LegacyListener) $r4;

        exitmonitor $r2;

     label03:
        if $r5 == null goto label18;

        $i2 = $i2 & $i0;

        if $i2 == 0 goto label19;

        $r6 = virtualinvoke $r0.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>($i1);

        if $r6 == null goto label20;

        $z0 = virtualinvoke $r5.<android.hardware.SensorManager$LegacyListener: boolean unregisterSensor(int)>($i0);

        if $z0 == 0 goto label21;

        virtualinvoke $r0.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>($r5, $r6);

        $r7 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        entermonitor $r7;

        $z0 = 0;

     label04:
        $r8 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        $r9 = virtualinvoke $r8.<java.util.AbstractList: java.util.Iterator iterator()>();

     label05:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r4 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (android.hardware.SensorManager$ListenerDelegate) $r4;

        $r4 = virtualinvoke $r10.<android.hardware.SensorManager$ListenerDelegate: java.lang.Object getListener()>();

        if $r4 != $r5 goto label05;

        $z0 = 1;

     label06:
        if $z0 != 0 goto label08;

        $r2 = $r0.<android.hardware.SensorManager: java.util.HashMap mLegacyListenersMap>;

        entermonitor $r2;

     label07:
        $r3 = $r0.<android.hardware.SensorManager: java.util.HashMap mLegacyListenersMap>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        exitmonitor $r2;

     label08:
        exitmonitor $r7;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

        exitmonitor $r7;

     label11:
        throw $r11;

     label12:
        $r12 := @caughtexception;

     label13:
        exitmonitor $r2;

     label14:
        throw $r12;

     label15:
        $r13 := @caughtexception;

     label16:
        exitmonitor $r2;

     label17:
        throw $r13;

     label18:
        return;

     label19:
        return;

     label20:
        return;

     label21:
        return;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label07 with label10;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label17 to label18 with label10;
    }

    private void unregisterListener(java.lang.Object)
    {
        android.hardware.SensorManager $r0;
        java.lang.Object $r1, $r4;
        java.util.ArrayList $r2, $r3;
        int $i0, $i1;
        android.hardware.SensorManager$ListenerDelegate $r5;
        java.util.List $r6;
        java.util.Iterator $r7;
        boolean $z0;
        android.hardware.Sensor $r8;
        java.lang.String $r9;
        android.hardware.ISensorService $r10;
        java.lang.Throwable $r11;
        android.os.RemoteException $r12;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        entermonitor $r2;

     label02:
        $r3 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label09;

        $r3 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r5 = (android.hardware.SensorManager$ListenerDelegate) $r4;

        $r4 = virtualinvoke $r5.<android.hardware.SensorManager$ListenerDelegate: java.lang.Object getListener()>();

        if $r4 != $r1 goto label11;

        $r6 = virtualinvoke $r5.<android.hardware.SensorManager$ListenerDelegate: java.util.List getSensors()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r1 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.hardware.Sensor) $r1;

        $r9 = virtualinvoke $r8.<android.hardware.Sensor: java.lang.String getName()>();

        $i0 = virtualinvoke $r8.<android.hardware.Sensor: int getHandle()>();

        $r10 = $r0.<android.hardware.SensorManager: android.hardware.ISensorService mSensorService>;

        interfaceinvoke $r10.<android.hardware.ISensorService: boolean enableSensor(android.os.IBinder,java.lang.String,int,int)>($r5, $r9, $i0, -1);

        goto label04;

     label05:
        $r11 := @caughtexception;

        exitmonitor $r2;

     label06:
        throw $r11;

     label07:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SensorManager", "RemoteException in unregisterListener: ", $r12);

        return;

     label08:
        $r3 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

     label09:
        exitmonitor $r2;

     label10:
        return;

     label11:
        $i1 = $i1 + 1;

        goto label03;

        catch java.lang.Throwable from label02 to label06 with label05;
        catch android.os.RemoteException from label06 to label07 with label07;
        catch java.lang.Throwable from label08 to label10 with label05;
    }

    private void unregisterListener(java.lang.Object, android.hardware.Sensor)
    {
        android.hardware.SensorManager $r0;
        java.lang.Object $r1, $r5;
        android.hardware.Sensor $r2;
        java.util.ArrayList $r3, $r4;
        int $i0, $i1;
        android.hardware.SensorManager$ListenerDelegate $r6;
        java.lang.String $r7;
        android.hardware.ISensorService $r8;
        java.lang.Throwable $r9;
        android.os.RemoteException $r10;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: android.hardware.Sensor;

        if $r1 == null goto label10;

        if $r2 != null goto label01;

        return;

     label01:
        $r3 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        entermonitor $r3;

     label02:
        $r4 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $i1 = 0;

     label03:
        if $i1 >= $i0 goto label04;

        $r4 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r6 = (android.hardware.SensorManager$ListenerDelegate) $r5;

        $r5 = virtualinvoke $r6.<android.hardware.SensorManager$ListenerDelegate: java.lang.Object getListener()>();

        if $r5 != $r1 goto label09;

        $r7 = virtualinvoke $r2.<android.hardware.Sensor: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<android.hardware.Sensor: int getHandle()>();

        $r8 = $r0.<android.hardware.SensorManager: android.hardware.ISensorService mSensorService>;

        interfaceinvoke $r8.<android.hardware.ISensorService: boolean enableSensor(android.os.IBinder,java.lang.String,int,int)>($r6, $r7, $i0, -1);

        $i0 = virtualinvoke $r6.<android.hardware.SensorManager$ListenerDelegate: int removeSensor(android.hardware.Sensor)>($r2);

        if $i0 != 0 goto label04;

        $r4 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        virtualinvoke $r4.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

     label04:
        exitmonitor $r3;

     label05:
        return;

     label06:
        $r9 := @caughtexception;

        exitmonitor $r3;

     label07:
        throw $r9;

     label08:
        $r10 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SensorManager", "RemoteException in unregisterListener: ", $r10);

        return;

     label09:
        $i1 = $i1 + 1;

        goto label03;

     label10:
        return;

        catch java.lang.Throwable from label02 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch android.os.RemoteException from label07 to label08 with label08;
    }

    public android.hardware.Sensor getDefaultSensor(int)
    {
        int $i0;
        android.hardware.SensorManager $r0;
        java.util.List $r1;
        boolean $z0;
        java.lang.Object $r2;
        android.hardware.Sensor $r3;

        $r0 := @this: android.hardware.SensorManager;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.hardware.SensorManager: java.util.List getSensorList(int)>($i0);

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (android.hardware.Sensor) $r2;

        return $r3;
    }

    public java.util.List getSensorList(int)
    {
        android.hardware.SensorManager $r0;
        int $i0, $i1;
        java.util.ArrayList $r1, $r5;
        android.util.SparseArray $r2;
        java.lang.Object $r3;
        java.util.List $r4, $r6;
        java.util.Iterator $r7;
        boolean $z0;
        android.hardware.Sensor $r8;
        java.lang.Throwable $r9;

        $r0 := @this: android.hardware.SensorManager;

        $i0 := @parameter0: int;

        $r1 = <android.hardware.SensorManager: java.util.ArrayList sFullSensorsList>;

        entermonitor $r1;

     label1:
        $r2 = <android.hardware.SensorManager: android.util.SparseArray sSensorListByType>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        $r4 = (java.util.List) $r3;

        if $r4 != null goto label3;

        if $i0 != -1 goto label5;

        $r5 = $r1;

     label2:
        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r5);

        $r4 = $r6;

        $r2 = <android.hardware.SensorManager: android.util.SparseArray sSensorListByType>;

        virtualinvoke $r2.<android.util.SparseArray: void append(int,java.lang.Object)>($i0, $r6);

     label3:
        exitmonitor $r1;

     label4:
        return $r4;

     label5:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r7 = virtualinvoke $r1.<java.util.AbstractList: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.hardware.Sensor) $r3;

        $i1 = virtualinvoke $r8.<android.hardware.Sensor: int getType()>();

        if $i1 != $i0 goto label6;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label6;

     label7:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label8 with label7;
    }

    public int getSensors()
    {
        android.hardware.SensorManager $r0;
        java.util.ArrayList $r1;
        short $s0;
        java.util.Iterator $r2;
        boolean $z0;
        java.lang.Object $r3;
        android.hardware.Sensor $r4;
        int $i1;

        $r0 := @this: android.hardware.SensorManager;

        $s0 = 0;

        $r1 = <android.hardware.SensorManager: java.util.ArrayList sFullSensorsList>;

        $r2 = virtualinvoke $r1.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.hardware.Sensor) $r3;

        $i1 = virtualinvoke $r4.<android.hardware.Sensor: int getType()>();

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label2;
        };

     label2:
        goto label1;

     label3:
        $s0 = $s0 | 2;

        goto label1;

     label4:
        $s0 = $s0 | 8;

        goto label1;

     label5:
        $s0 = $s0 | 129;

        goto label1;

     label6:
        return $s0;
    }

    public void onRotationChanged(int)
    {
        android.hardware.SensorManager $r0;
        int $i0;
        java.util.ArrayList $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.hardware.SensorManager;

        $i0 := @parameter0: int;

        $r1 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        entermonitor $r1;

     label1:
        <android.hardware.SensorManager: int sRotation> = $i0;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int)
    {
        android.hardware.SensorManager $r0;
        android.hardware.SensorEventListener $r1;
        android.hardware.Sensor $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.hardware.SensorEventListener;

        $r2 := @parameter1: android.hardware.Sensor;

        $i0 := @parameter2: int;

        $z0 = virtualinvoke $r0.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>($r1, $r2, $i0, null);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler)
    {
        android.hardware.SensorManager $r0;
        android.hardware.SensorEventListener $r1;
        android.hardware.Sensor $r2;
        int $i0;
        android.os.Handler $r3;
        short $s1;
        java.util.ArrayList $r4, $r5;
        java.util.Iterator $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        android.hardware.SensorManager$ListenerDelegate $r8;
        java.lang.String $r9;
        android.hardware.ISensorService $r10;
        android.hardware.SensorManager$SensorThread $r11;
        java.lang.Throwable $r12;
        android.os.RemoteException $r13;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.hardware.SensorEventListener;

        $r2 := @parameter1: android.hardware.Sensor;

        $i0 := @parameter2: int;

        $r3 := @parameter3: android.os.Handler;

        if $r1 == null goto label01;

        if $r2 != null goto label02;

     label01:
        return 0;

     label02:
        lookupswitch($i0)
        {
            case 0: goto label04;
            case 1: goto label14;
            case 2: goto label15;
            case 3: goto label16;
            default: goto label03;
        };

     label03:
        return 0;

     label04:
        $s1 = 0;

     label05:
        $r4 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        entermonitor $r4;

     label06:
        $r5 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        $r6 = virtualinvoke $r5.<java.util.AbstractList: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label24;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (android.hardware.SensorManager$ListenerDelegate) $r7;

        $r7 = virtualinvoke $r8.<android.hardware.SensorManager$ListenerDelegate: java.lang.Object getListener()>();

     label08:
        if $r7 != $r1 goto label07;

     label09:
        $r9 = virtualinvoke $r2.<android.hardware.Sensor: java.lang.String getName()>();

        $i0 = virtualinvoke $r2.<android.hardware.Sensor: int getHandle()>();

        if $r8 != null goto label17;

        $r8 = new android.hardware.SensorManager$ListenerDelegate;

        specialinvoke $r8.<android.hardware.SensorManager$ListenerDelegate: void <init>(android.hardware.SensorManager,android.hardware.SensorEventListener,android.hardware.Sensor,android.os.Handler)>($r0, $r1, $r2, $r3);

     label10:
        $r10 = $r0.<android.hardware.SensorManager: android.hardware.ISensorService mSensorService>;

        $z1 = interfaceinvoke $r10.<android.hardware.ISensorService: boolean enableSensor(android.os.IBinder,java.lang.String,int,int)>($r8, $r9, $i0, $s1);

        $z0 = $z1;

        if $z1 == 0 goto label11;

        $r5 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r5 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        virtualinvoke $r5.<java.lang.Object: void notify()>();

     label11:
        $r5 = <android.hardware.SensorManager: java.util.ArrayList sListeners>;

        $z1 = virtualinvoke $r5.<java.util.ArrayList: boolean isEmpty()>();

        if $z1 != 0 goto label12;

        $r11 = <android.hardware.SensorManager: android.hardware.SensorManager$SensorThread sSensorThread>;

        $r10 = $r0.<android.hardware.SensorManager: android.hardware.ISensorService mSensorService>;

        virtualinvoke $r11.<android.hardware.SensorManager$SensorThread: void startLocked(android.hardware.ISensorService)>($r10);

     label12:
        exitmonitor $r4;

     label13:
        return $z0;

     label14:
        $s1 = 20;

        goto label05;

     label15:
        $s1 = 60;

        goto label05;

     label16:
        $s1 = 200;

        goto label05;

     label17:
        $r10 = $r0.<android.hardware.SensorManager: android.hardware.ISensorService mSensorService>;

        $z1 = interfaceinvoke $r10.<android.hardware.ISensorService: boolean enableSensor(android.os.IBinder,java.lang.String,int,int)>($r8, $r9, $i0, $s1);

        $z0 = $z1;

        if $z1 == 0 goto label18;

        virtualinvoke $r8.<android.hardware.SensorManager$ListenerDelegate: int addSensor(android.hardware.Sensor)>($r2);

     label18:
        goto label12;

     label19:
        $r12 := @caughtexception;

     label20:
        exitmonitor $r4;

     label21:
        throw $r12;

     label22:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SensorManager", "RemoteException in registerListener: ", $r13);

        $z0 = 0;

        goto label13;

     label23:
        $r12 := @caughtexception;

        goto label20;

     label24:
        $r8 = null;

        goto label09;

        catch java.lang.Throwable from label06 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label23;
        catch java.lang.Throwable from label10 to label13 with label19;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.lang.Throwable from label20 to label21 with label19;
        catch android.os.RemoteException from label21 to label22 with label22;
    }

    public boolean registerListener(android.hardware.SensorListener, int)
    {
        android.hardware.SensorManager $r0;
        android.hardware.SensorListener $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.hardware.SensorListener;

        $i0 := @parameter1: int;

        $z0 = virtualinvoke $r0.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>($r1, $i0, 3);

        return $z0;
    }

    public boolean registerListener(android.hardware.SensorListener, int, int)
    {
        android.hardware.SensorManager $r0;
        android.hardware.SensorListener $r1;
        int $i0, $i1;
        boolean $z0, $z1;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.hardware.SensorListener;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label01;

        return 0;

     label01:
        $z0 = specialinvoke $r0.<android.hardware.SensorManager: boolean registerLegacyListener(int,int,android.hardware.SensorListener,int,int)>(2, 1, $r1, $i0, $i1);

        if $z0 != 0 goto label02;

        goto label12;

     label02:
        $z0 = 1;

     label03:
        $z1 = specialinvoke $r0.<android.hardware.SensorManager: boolean registerLegacyListener(int,int,android.hardware.SensorListener,int,int)>(8, 2, $r1, $i0, $i1);

        if $z1 != 0 goto label04;

        if $z0 == 0 goto label13;

     label04:
        $z0 = 1;

     label05:
        $z1 = specialinvoke $r0.<android.hardware.SensorManager: boolean registerLegacyListener(int,int,android.hardware.SensorListener,int,int)>(128, 3, $r1, $i0, $i1);

        if $z1 != 0 goto label06;

        if $z0 == 0 goto label14;

     label06:
        $z0 = 1;

     label07:
        $z1 = specialinvoke $r0.<android.hardware.SensorManager: boolean registerLegacyListener(int,int,android.hardware.SensorListener,int,int)>(1, 3, $r1, $i0, $i1);

        if $z1 != 0 goto label08;

        if $z0 == 0 goto label15;

     label08:
        $z0 = 1;

     label09:
        $z1 = specialinvoke $r0.<android.hardware.SensorManager: boolean registerLegacyListener(int,int,android.hardware.SensorListener,int,int)>(4, 7, $r1, $i0, $i1);

        if $z1 != 0 goto label10;

        if $z0 == 0 goto label16;

     label10:
        $z0 = 1;

     label11:
        return $z0;

     label12:
        $z0 = 0;

        goto label03;

     label13:
        $z0 = 0;

        goto label05;

     label14:
        $z0 = 0;

        goto label07;

     label15:
        $z0 = 0;

        goto label09;

     label16:
        $z0 = 0;

        goto label11;
    }

    public void unregisterListener(android.hardware.SensorEventListener)
    {
        android.hardware.SensorManager $r0;
        android.hardware.SensorEventListener $r1;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.hardware.SensorEventListener;

        specialinvoke $r0.<android.hardware.SensorManager: void unregisterListener(java.lang.Object)>($r1);

        return;
    }

    public void unregisterListener(android.hardware.SensorEventListener, android.hardware.Sensor)
    {
        android.hardware.SensorManager $r0;
        android.hardware.SensorEventListener $r1;
        android.hardware.Sensor $r2;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.hardware.SensorEventListener;

        $r2 := @parameter1: android.hardware.Sensor;

        specialinvoke $r0.<android.hardware.SensorManager: void unregisterListener(java.lang.Object,android.hardware.Sensor)>($r1, $r2);

        return;
    }

    public void unregisterListener(android.hardware.SensorListener)
    {
        android.hardware.SensorManager $r0;
        android.hardware.SensorListener $r1;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.hardware.SensorListener;

        virtualinvoke $r0.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>($r1, 255);

        return;
    }

    public void unregisterListener(android.hardware.SensorListener, int)
    {
        android.hardware.SensorManager $r0;
        android.hardware.SensorListener $r1;
        int $i0;

        $r0 := @this: android.hardware.SensorManager;

        $r1 := @parameter0: android.hardware.SensorListener;

        $i0 := @parameter1: int;

        specialinvoke $r0.<android.hardware.SensorManager: void unregisterLegacyListener(int,int,android.hardware.SensorListener,int)>(2, 1, $r1, $i0);

        specialinvoke $r0.<android.hardware.SensorManager: void unregisterLegacyListener(int,int,android.hardware.SensorListener,int)>(8, 2, $r1, $i0);

        specialinvoke $r0.<android.hardware.SensorManager: void unregisterLegacyListener(int,int,android.hardware.SensorListener,int)>(128, 3, $r1, $i0);

        specialinvoke $r0.<android.hardware.SensorManager: void unregisterLegacyListener(int,int,android.hardware.SensorListener,int)>(1, 3, $r1, $i0);

        specialinvoke $r0.<android.hardware.SensorManager: void unregisterLegacyListener(int,int,android.hardware.SensorListener,int)>(4, 7, $r1, $i0);

        return;
    }
}
