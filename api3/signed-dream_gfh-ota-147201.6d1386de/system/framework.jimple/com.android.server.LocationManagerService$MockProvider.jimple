class com.android.server.LocationManagerService$MockProvider extends android.location.LocationProviderImpl
{
    int mAccuracy;
    boolean mHasMonetaryCost;
    int mPowerRequirement;
    boolean mRequiresCell;
    boolean mRequiresNetwork;
    boolean mRequiresSatellite;
    boolean mSupportsAltitude;
    boolean mSupportsBearing;
    boolean mSupportsSpeed;
    final com.android.server.LocationManagerService this$0;

    public void <init>(com.android.server.LocationManagerService, java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int)
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        com.android.server.LocationManagerService $r1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        $r1 := @parameter0: com.android.server.LocationManagerService;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        $z2 := @parameter4: boolean;

        $z3 := @parameter5: boolean;

        $z4 := @parameter6: boolean;

        $z5 := @parameter7: boolean;

        $z6 := @parameter8: boolean;

        $i0 := @parameter9: int;

        $i1 := @parameter10: int;

        $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0> = $r1;

        specialinvoke $r0.<android.location.LocationProviderImpl: void <init>(java.lang.String)>($r2);

        $r0.<com.android.server.LocationManagerService$MockProvider: boolean mRequiresNetwork> = $z0;

        $r0.<com.android.server.LocationManagerService$MockProvider: boolean mRequiresSatellite> = $z1;

        $r0.<com.android.server.LocationManagerService$MockProvider: boolean mRequiresCell> = $z2;

        $r0.<com.android.server.LocationManagerService$MockProvider: boolean mHasMonetaryCost> = $z3;

        $r0.<com.android.server.LocationManagerService$MockProvider: boolean mSupportsAltitude> = $z4;

        $r0.<com.android.server.LocationManagerService$MockProvider: boolean mSupportsBearing> = $z6;

        $r0.<com.android.server.LocationManagerService$MockProvider: boolean mSupportsSpeed> = $z5;

        $r0.<com.android.server.LocationManagerService$MockProvider: int mPowerRequirement> = $i0;

        $r0.<com.android.server.LocationManagerService$MockProvider: int mAccuracy> = $i1;

        return;
    }

    public void disable()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        java.lang.String $r1;
        com.android.server.LocationManagerService $r2;
        java.util.HashMap $r3;
        java.util.Set $r4;
        java.lang.Throwable $r5;
        android.location.LocationProvider r6;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        r6 = (android.location.LocationProvider) $r0;

        $r1 = virtualinvoke r6.<android.location.LocationProvider: java.lang.String getName()>();

        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r3 = staticinvoke <com.android.server.LocationManagerService: java.util.HashMap access$100(com.android.server.LocationManagerService)>($r2);

        entermonitor $r3;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r4 = staticinvoke <com.android.server.LocationManagerService: java.util.Set access$3000(com.android.server.LocationManagerService)>($r2);

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r4 = staticinvoke <com.android.server.LocationManagerService: java.util.Set access$3100(com.android.server.LocationManagerService)>($r2);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r1);

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void enable()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        java.lang.String $r1;
        com.android.server.LocationManagerService $r2;
        java.util.HashMap $r3;
        java.util.Set $r4;
        java.lang.Throwable $r5;
        android.location.LocationProvider r6;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        r6 = (android.location.LocationProvider) $r0;

        $r1 = virtualinvoke r6.<android.location.LocationProvider: java.lang.String getName()>();

        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r3 = staticinvoke <com.android.server.LocationManagerService: java.util.HashMap access$100(com.android.server.LocationManagerService)>($r2);

        entermonitor $r3;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r4 = staticinvoke <com.android.server.LocationManagerService: java.util.Set access$3000(com.android.server.LocationManagerService)>($r2);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r4 = staticinvoke <com.android.server.LocationManagerService: java.util.Set access$3100(com.android.server.LocationManagerService)>($r2);

        interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        exitmonitor $r3;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getAccuracy()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        int i0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        i0 = $r0.<com.android.server.LocationManagerService$MockProvider: int mAccuracy>;

        return i0;
    }

    public boolean getLocation(android.location.Location)
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        android.location.Location $r1, $r7;
        com.android.server.LocationManagerService $r2;
        java.util.HashMap $r3, $r4;
        java.lang.String $r5;
        java.lang.Object $r6;
        java.lang.Throwable $r8;
        android.location.LocationProvider r9;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        $r1 := @parameter0: android.location.Location;

        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r3 = staticinvoke <com.android.server.LocationManagerService: java.util.HashMap access$100(com.android.server.LocationManagerService)>($r2);

        entermonitor $r3;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r4 = staticinvoke <com.android.server.LocationManagerService: java.util.HashMap access$3200(com.android.server.LocationManagerService)>($r2);

        r9 = (android.location.LocationProvider) $r0;

        $r5 = virtualinvoke r9.<android.location.LocationProvider: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (android.location.Location) $r6;

        if $r7 != null goto label3;

        exitmonitor $r3;

     label2:
        return 0;

     label3:
        virtualinvoke $r1.<android.location.Location: void set(android.location.Location)>($r7);

        exitmonitor $r3;

     label4:
        return 1;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int getPowerRequirement()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        int i0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        i0 = $r0.<com.android.server.LocationManagerService$MockProvider: int mPowerRequirement>;

        return i0;
    }

    public int getStatus(android.os.Bundle)
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        android.os.Bundle $r1, $r8;
        com.android.server.LocationManagerService $r2;
        java.util.HashMap $r3, $r5;
        java.lang.String $r4;
        java.lang.Object $r6;
        java.lang.Integer $r7;
        int $i0;
        java.lang.Throwable $r9;
        android.location.LocationProvider r10;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        $r1 := @parameter0: android.os.Bundle;

        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r3 = staticinvoke <com.android.server.LocationManagerService: java.util.HashMap access$100(com.android.server.LocationManagerService)>($r2);

        entermonitor $r3;

     label1:
        r10 = (android.location.LocationProvider) $r0;

        $r4 = virtualinvoke r10.<android.location.LocationProvider: java.lang.String getName()>();

        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r5 = staticinvoke <com.android.server.LocationManagerService: java.util.HashMap access$3300(com.android.server.LocationManagerService)>($r2);

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (java.lang.Integer) $r6;

        if $r7 != null goto label5;

        $i0 = 2;

     label2:
        $r2 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r5 = staticinvoke <com.android.server.LocationManagerService: java.util.HashMap access$3400(com.android.server.LocationManagerService)>($r2);

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r8 = (android.os.Bundle) $r6;

        if $r8 == null goto label3;

        virtualinvoke $r1.<android.os.Bundle: void clear()>();

        virtualinvoke $r1.<android.os.Bundle: void putAll(android.os.Bundle)>($r8);

     label3:
        exitmonitor $r3;

     label4:
        return $i0;

     label5:
        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        goto label2;

     label6:
        $r9 := @caughtexception;

        exitmonitor $r3;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public boolean hasMonetaryCost()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        boolean z0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        z0 = $r0.<com.android.server.LocationManagerService$MockProvider: boolean mHasMonetaryCost>;

        return z0;
    }

    public boolean isEnabled()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        com.android.server.LocationManagerService $r1;
        java.util.HashMap $r2;
        java.util.Set $r3;
        java.lang.String $r4;
        boolean $z0;
        java.lang.Throwable $r5;
        android.location.LocationProvider r6;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        $r1 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r2 = staticinvoke <com.android.server.LocationManagerService: java.util.HashMap access$100(com.android.server.LocationManagerService)>($r1);

        entermonitor $r2;

     label1:
        $r1 = $r0.<com.android.server.LocationManagerService$MockProvider: com.android.server.LocationManagerService this$0>;

        $r3 = staticinvoke <com.android.server.LocationManagerService: java.util.Set access$3000(com.android.server.LocationManagerService)>($r1);

        r6 = (android.location.LocationProvider) $r0;

        $r4 = virtualinvoke r6.<android.location.LocationProvider: java.lang.String getName()>();

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4);

        exitmonitor $r2;

     label2:
        return $z0;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean requiresCell()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        boolean z0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        z0 = $r0.<com.android.server.LocationManagerService$MockProvider: boolean mRequiresCell>;

        return z0;
    }

    public boolean requiresNetwork()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        boolean z0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        z0 = $r0.<com.android.server.LocationManagerService$MockProvider: boolean mRequiresNetwork>;

        return z0;
    }

    public boolean requiresSatellite()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        boolean z0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        z0 = $r0.<com.android.server.LocationManagerService$MockProvider: boolean mRequiresSatellite>;

        return z0;
    }

    public boolean supportsAltitude()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        boolean z0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        z0 = $r0.<com.android.server.LocationManagerService$MockProvider: boolean mSupportsAltitude>;

        return z0;
    }

    public boolean supportsBearing()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        boolean z0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        z0 = $r0.<com.android.server.LocationManagerService$MockProvider: boolean mSupportsBearing>;

        return z0;
    }

    public boolean supportsSpeed()
    {
        com.android.server.LocationManagerService$MockProvider $r0;
        boolean z0;

        $r0 := @this: com.android.server.LocationManagerService$MockProvider;

        z0 = $r0.<com.android.server.LocationManagerService$MockProvider: boolean mSupportsSpeed>;

        return z0;
    }
}
