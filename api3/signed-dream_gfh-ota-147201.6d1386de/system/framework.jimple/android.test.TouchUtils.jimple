public class android.test.TouchUtils extends java.lang.Object
{

    public void <init>()
    {
        android.test.TouchUtils $r0;

        $r0 := @this: android.test.TouchUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void clickView(android.test.InstrumentationTestCase, android.view.View)
    {
        float $f0, $f1, $f2, $f3;
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int[] $r2;
        int $i0, $i1, $i2;
        android.app.Instrumentation $r3;
        long $l3, $l4;
        android.view.MotionEvent $r4;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;
        java.lang.InterruptedException $r7;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        $i2 = $r2[0];

        $f0 = (float) $i2;

        $f1 = (float) $i0;

        $f1 = $f1 / 2.0F;

        $f0 = $f0 + $f1;

        $i0 = $r2[1];

        $f1 = (float) $i0;

        $f2 = (float) $i1;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        $r3 = virtualinvoke $r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 0, $f0, $f1, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r5 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $i1 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f2 = (float) $i1;

        $f2 = $f2 / 2.0F;

        $f2 = $f0 + $f2;

        $f3 = (float) $i1;

        $f3 = $f3 / 2.0F;

        $f3 = $f1 + $f3;

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 2, $f2, $f3, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 1, $f0, $f1, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace()>();

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static void drag(android.test.ActivityInstrumentationTestCase, float, float, float, float, int)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        float $f0, $f1, $f2, $f3;
        int $i0;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $f2 := @parameter3: float;

        $f3 := @parameter4: float;

        $i0 := @parameter5: int;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f0, $f1, $f2, $f3, $i0);

        return;
    }

    public static void drag(android.test.InstrumentationTestCase, float, float, float, float, int)
    {
        float $f0, $f1, $f2, $f3, $f4, $f5;
        int $i0, $i3;
        android.test.InstrumentationTestCase $r0;
        android.app.Instrumentation $r1;
        long $l1, $l2;
        android.view.MotionEvent $r2;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $f2 := @parameter3: float;

        $f3 := @parameter4: float;

        $i0 := @parameter5: int;

        $r1 = virtualinvoke $r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $f4 = $f2;

        $f3 = $f3 - $f2;

        $f5 = (float) $i0;

        $f3 = $f3 / $f5;

        $f1 = $f1 - $f0;

        $f5 = (float) $i0;

        $f1 = $f1 / $f5;

        $r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l1, $l2, 0, $f0, $f2, 0);

        virtualinvoke $r1.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r2);

        virtualinvoke $r1.<android.app.Instrumentation: void waitForIdleSync()>();

        $i3 = 0;

        $f2 = $f0;

     label1:
        if $i3 >= $i0 goto label2;

        $f4 = $f4 + $f3;

        $f2 = $f2 + $f1;

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l1, $l2, 2, $f2, $f4, 0);

        virtualinvoke $r1.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r2);

        virtualinvoke $r1.<android.app.Instrumentation: void waitForIdleSync()>();

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r2 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l1, $l2, 1, $f0, $f4, 0);

        virtualinvoke $r1.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r2);

        virtualinvoke $r1.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }

    public static void dragQuarterScreenDown(android.test.ActivityInstrumentationTestCase)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.app.Activity $r1;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 = virtualinvoke $r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenDown(android.test.InstrumentationTestCase,android.app.Activity)>($r0, $r1);

        return;
    }

    public static void dragQuarterScreenDown(android.test.InstrumentationTestCase, android.app.Activity)
    {
        android.test.InstrumentationTestCase $r0;
        android.app.Activity $r1;
        float $f0, $f1, $f2;
        android.view.WindowManager $r2;
        android.view.Display $r3;
        int $i0, $i1;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.app.Activity;

        $r2 = virtualinvoke $r1.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r3 = interfaceinvoke $r2.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $i0 = virtualinvoke $r3.<android.view.Display: int getHeight()>();

        $i1 = virtualinvoke $r3.<android.view.Display: int getWidth()>();

        $f0 = (float) $i1;

        $f0 = $f0 / 2.0F;

        $f1 = (float) $i0;

        $f1 = $f1 * 0.5F;

        $f2 = (float) $i0;

        $f2 = $f2 * 0.75F;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f0, $f0, $f1, $f2, 4);

        return;
    }

    public static void dragQuarterScreenUp(android.test.ActivityInstrumentationTestCase)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.app.Activity $r1;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 = virtualinvoke $r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenUp(android.test.InstrumentationTestCase,android.app.Activity)>($r0, $r1);

        return;
    }

    public static void dragQuarterScreenUp(android.test.InstrumentationTestCase, android.app.Activity)
    {
        android.test.InstrumentationTestCase $r0;
        android.app.Activity $r1;
        float $f0, $f1, $f2;
        android.view.WindowManager $r2;
        android.view.Display $r3;
        int $i0, $i1;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.app.Activity;

        $r2 = virtualinvoke $r1.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r3 = interfaceinvoke $r2.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $i0 = virtualinvoke $r3.<android.view.Display: int getHeight()>();

        $i1 = virtualinvoke $r3.<android.view.Display: int getWidth()>();

        $f0 = (float) $i1;

        $f0 = $f0 / 2.0F;

        $f1 = (float) $i0;

        $f1 = $f1 * 0.5F;

        $f2 = (float) $i0;

        $f2 = $f2 * 0.25F;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f0, $f0, $f1, $f2, 4);

        return;
    }

    public static int dragViewBy(android.test.ActivityInstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i0 = staticinvoke <android.test.TouchUtils: int dragViewBy(android.test.InstrumentationTestCase,android.view.View,int,int,int)>($r0, $r1, $i0, $i1, $i2);

        return $i0;
    }

    public static int dragViewBy(android.test.InstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3;
        int[] $r2;
        double $d0;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>($r1, $i0, $r2);

        $i4 = $r2[0];

        $i0 = $r2[1];

        $i3 = $i1 * $i1;

        $i5 = $i2 * $i2;

        $i3 = $i3 + $i5;

        $d0 = (double) $i3;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $i3 = (int) $d0;

        $f3 = (float) $i4;

        $i1 = $i4 + $i1;

        $f0 = (float) $i1;

        $f1 = (float) $i0;

        $i0 = $i0 + $i2;

        $f2 = (float) $i0;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f3, $f0, $f1, $f2, $i3);

        return $i3;
    }

    public static int dragViewTo(android.test.ActivityInstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i0 = staticinvoke <android.test.TouchUtils: int dragViewTo(android.test.InstrumentationTestCase,android.view.View,int,int,int)>($r0, $r1, $i0, $i1, $i2);

        return $i0;
    }

    public static int dragViewTo(android.test.InstrumentationTestCase, android.view.View, int, int, int)
    {
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3;
        int[] $r2;
        double $d0;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>($r1, $i0, $r2);

        $i0 = $r2[0];

        $i5 = $r2[1];

        $i4 = $i0 - $i1;

        $i3 = $i5 - $i2;

        $i4 = $i4 * $i4;

        $i3 = $i3 * $i3;

        $i3 = $i4 + $i3;

        $d0 = (double) $i3;

        $d0 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $i3 = (int) $d0;

        $f3 = (float) $i0;

        $f0 = (float) $i1;

        $f1 = (float) $i5;

        $f2 = (float) $i2;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f3, $f0, $f1, $f2, $i3);

        return $i3;
    }

    public static void dragViewToBottom(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;
        android.app.Activity $r2;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $r2 = virtualinvoke $r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>($r0, $r2, $r1, 4);

        return;
    }

    public static void dragViewToBottom(android.test.ActivityInstrumentationTestCase, android.view.View, int)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0;
        android.app.Activity $r2;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $r2 = virtualinvoke $r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>($r0, $r2, $r1, $i0);

        return;
    }

    public static void dragViewToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.View)
    {
        android.test.InstrumentationTestCase $r0;
        android.app.Activity $r1;
        android.view.View $r2;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.app.Activity;

        $r2 := @parameter2: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.View,int)>($r0, $r1, $r2, 4);

        return;
    }

    public static void dragViewToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.View, int)
    {
        android.test.InstrumentationTestCase $r0;
        android.app.Activity $r1;
        android.view.View $r2;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1, $f2;
        int[] $r3;
        android.view.WindowManager $r4;
        android.view.Display $r5;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.app.Activity;

        $r2 := @parameter2: android.view.View;

        $i0 := @parameter3: int;

        $r4 = virtualinvoke $r1.<android.app.Activity: android.view.WindowManager getWindowManager()>();

        $r5 = interfaceinvoke $r4.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $i1 = virtualinvoke $r5.<android.view.Display: int getHeight()>();

        $r3 = newarray (int)[2];

        virtualinvoke $r2.<android.view.View: void getLocationOnScreen(int[])>($r3);

        $i2 = virtualinvoke $r2.<android.view.View: int getWidth()>();

        $i3 = virtualinvoke $r2.<android.view.View: int getHeight()>();

        $i4 = $r3[0];

        $f0 = (float) $i4;

        $f1 = (float) $i2;

        $f1 = $f1 / 2.0F;

        $f0 = $f0 + $f1;

        $i2 = $r3[1];

        $f1 = (float) $i2;

        $f2 = (float) $i3;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        $i1 = $i1 - 1;

        $f2 = (float) $i1;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f0, $f0, $f1, $f2, $i0);

        return;
    }

    public static void dragViewToTop(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>($r0, $r1, 4);

        return;
    }

    public static void dragViewToTop(android.test.ActivityInstrumentationTestCase, android.view.View, int)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>($r0, $r1, $i0);

        return;
    }

    public static void dragViewToTop(android.test.InstrumentationTestCase, android.view.View)
    {
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void dragViewToTop(android.test.InstrumentationTestCase,android.view.View,int)>($r0, $r1, 4);

        return;
    }

    public static void dragViewToTop(android.test.InstrumentationTestCase, android.view.View, int)
    {
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2;
        int[] $r2;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i2 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        $i3 = $r2[0];

        $f0 = (float) $i3;

        $f1 = (float) $i1;

        $f1 = $f1 / 2.0F;

        $f0 = $f0 + $f1;

        $i1 = $r2[1];

        $f1 = (float) $i1;

        $f2 = (float) $i2;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f0, $f0, $f1, 0.0F, $i0);

        return;
    }

    public static int dragViewToX(android.test.ActivityInstrumentationTestCase, android.view.View, int, int)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <android.test.TouchUtils: int dragViewToX(android.test.InstrumentationTestCase,android.view.View,int,int)>($r0, $r1, $i0, $i1);

        return $i0;
    }

    public static int dragViewToX(android.test.InstrumentationTestCase, android.view.View, int, int)
    {
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        int[] $r2;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>($r1, $i0, $r2);

        $i2 = $r2[0];

        $i3 = $r2[1];

        $i0 = $i2 - $i1;

        $f0 = (float) $i2;

        $f1 = (float) $i1;

        $f2 = (float) $i3;

        $f3 = (float) $i3;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f0, $f1, $f2, $f3, $i0);

        return $i0;
    }

    public static int dragViewToY(android.test.ActivityInstrumentationTestCase, android.view.View, int, int)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i0 = staticinvoke <android.test.TouchUtils: int dragViewToY(android.test.InstrumentationTestCase,android.view.View,int,int)>($r0, $r1, $i0, $i1);

        return $i0;
    }

    public static int dragViewToY(android.test.InstrumentationTestCase, android.view.View, int, int)
    {
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        int[] $r2;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = newarray (int)[2];

        staticinvoke <android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>($r1, $i0, $r2);

        $i2 = $r2[0];

        $i3 = $r2[1];

        $i0 = $i3 - $i1;

        $f0 = (float) $i2;

        $f1 = (float) $i2;

        $f2 = (float) $i3;

        $f3 = (float) $i1;

        staticinvoke <android.test.TouchUtils: void drag(android.test.InstrumentationTestCase,float,float,float,float,int)>($r0, $f0, $f1, $f2, $f3, $i0);

        return $i0;
    }

    private static void getStartLocation(android.view.View, int, int[])
    {
        android.view.View $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        $r0 := @parameter0: android.view.View;

        $i0 := @parameter1: int;

        $r1 := @parameter2: int[];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r1);

        $i1 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i2 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $i3 = $i0 & 112;

        lookupswitch($i3)
        {
            case 16: goto label3;
            case 48: goto label1;
            case 80: goto label4;
            default: goto label1;
        };

     label1:
        $i0 = $i0 & 7;

        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label6;
            default: goto label2;
        };

     label2:
        return;

     label3:
        $i3 = $r1[1];

        $i2 = $i2 / 2;

        $i2 = $i3 + $i2;

        $r1[1] = $i2;

        goto label1;

     label4:
        $i3 = $r1[1];

        $i2 = $i2 - 1;

        $i2 = $i3 + $i2;

        $r1[1] = $i2;

        goto label1;

     label5:
        $i0 = $r1[0];

        $i1 = $i1 / 2;

        $i0 = $i0 + $i1;

        $r1[0] = $i0;

        return;

     label6:
        $i0 = $r1[0];

        $i1 = $i1 - 1;

        $i0 = $i0 + $i1;

        $r1[0] = $i0;

        return;
    }

    public static void longClickView(android.test.ActivityInstrumentationTestCase, android.view.View)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.View $r1;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        staticinvoke <android.test.TouchUtils: void longClickView(android.test.InstrumentationTestCase,android.view.View)>($r0, $r1);

        return;
    }

    public static void longClickView(android.test.InstrumentationTestCase, android.view.View)
    {
        float $f0, $f1, $f2, $f3;
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int[] $r2;
        int $i0, $i1, $i2;
        android.app.Instrumentation $r3;
        long $l3, $l4;
        android.view.MotionEvent $r4;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;
        java.lang.InterruptedException $r7;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        $i2 = $r2[0];

        $f0 = (float) $i2;

        $f1 = (float) $i0;

        $f1 = $f1 / 2.0F;

        $f0 = $f0 + $f1;

        $i0 = $r2[1];

        $f1 = (float) $i0;

        $f2 = (float) $i1;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        $r3 = virtualinvoke $r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 0, $f0, $f1, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r5 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $i1 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $i0 = $i1 / 2;

        $f2 = (float) $i0;

        $f2 = $f0 + $f2;

        $i1 = $i1 / 2;

        $f3 = (float) $i1;

        $f3 = $f1 + $f3;

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 2, $f2, $f3, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

     label1:
        $i1 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

     label2:
        $f2 = (float) $i1;

        $f2 = $f2 * 1.5F;

     label3:
        $l4 = (long) $f2;

        staticinvoke <java.lang.Thread: void sleep(long)>($l4);

     label4:
        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 1, $f0, $f1, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        return;

     label5:
        $r7 := @caughtexception;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace()>();

        goto label4;

        catch java.lang.InterruptedException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label3 to label4 with label5;
    }

    public static void scrollToBottom(android.test.ActivityInstrumentationTestCase, android.view.ViewGroup)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.ViewGroup $r1;
        android.app.Activity $r2;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.ViewGroup;

        $r2 = virtualinvoke $r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void scrollToBottom(android.test.InstrumentationTestCase,android.app.Activity,android.view.ViewGroup)>($r0, $r2, $r1);

        return;
    }

    public static void scrollToBottom(android.test.InstrumentationTestCase, android.app.Activity, android.view.ViewGroup)
    {
        android.test.InstrumentationTestCase $r0;
        android.app.Activity $r1;
        android.view.ViewGroup $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.View $r3;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.app.Activity;

        $r2 := @parameter2: android.view.ViewGroup;

        $i2 = -2147483648;

        $i3 = -2147483648;

     label1:
        $i0 = $i2;

        $i1 = $i3;

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenUp(android.test.InstrumentationTestCase,android.app.Activity)>($r0, $r1);

        $r3 = virtualinvoke $r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(0);

        $i4 = virtualinvoke $r3.<android.view.View: int getId()>();

        $i2 = $i4;

        $i5 = virtualinvoke $r3.<android.view.View: int getTop()>();

        $i3 = $i5;

        if $i0 != $i4 goto label1;

        if $i1 != $i5 goto label1;

        return;
    }

    public static void scrollToTop(android.test.ActivityInstrumentationTestCase, android.view.ViewGroup)
    {
        android.test.ActivityInstrumentationTestCase $r0;
        android.view.ViewGroup $r1;
        android.app.Activity $r2;

        $r0 := @parameter0: android.test.ActivityInstrumentationTestCase;

        $r1 := @parameter1: android.view.ViewGroup;

        $r2 = virtualinvoke $r0.<android.test.ActivityInstrumentationTestCase: android.app.Activity getActivity()>();

        staticinvoke <android.test.TouchUtils: void scrollToTop(android.test.InstrumentationTestCase,android.app.Activity,android.view.ViewGroup)>($r0, $r2, $r1);

        return;
    }

    public static void scrollToTop(android.test.InstrumentationTestCase, android.app.Activity, android.view.ViewGroup)
    {
        android.test.InstrumentationTestCase $r0;
        android.app.Activity $r1;
        android.view.ViewGroup $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.View $r3;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.app.Activity;

        $r2 := @parameter2: android.view.ViewGroup;

        $i2 = -2147483648;

        $i3 = -2147483648;

     label1:
        $i0 = $i2;

        $i1 = $i3;

        staticinvoke <android.test.TouchUtils: void dragQuarterScreenDown(android.test.InstrumentationTestCase,android.app.Activity)>($r0, $r1);

        $r3 = virtualinvoke $r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(0);

        $i4 = virtualinvoke $r3.<android.view.View: int getId()>();

        $i2 = $i4;

        $i5 = virtualinvoke $r3.<android.view.View: int getTop()>();

        $i3 = $i5;

        if $i0 != $i4 goto label1;

        if $i1 != $i5 goto label1;

        return;
    }

    public static void tapView(android.test.InstrumentationTestCase, android.view.View)
    {
        float $f0, $f1, $f2, $f3;
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int[] $r2;
        int $i0, $i1, $i2;
        android.app.Instrumentation $r3;
        long $l3, $l4;
        android.view.MotionEvent $r4;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        $i2 = $r2[0];

        $f0 = (float) $i2;

        $f1 = (float) $i0;

        $f1 = $f1 / 2.0F;

        $f0 = $f0 + $f1;

        $i0 = $r2[1];

        $f1 = (float) $i0;

        $f2 = (float) $i1;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        $r3 = virtualinvoke $r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 0, $f0, $f1, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r5 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $i1 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f2 = (float) $i1;

        $f2 = $f2 / 2.0F;

        $f2 = $f0 + $f2;

        $f3 = (float) $i1;

        $f3 = $f3 / 2.0F;

        $f3 = $f1 + $f3;

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 2, $f2, $f3, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 1, $f0, $f1, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }

    public static void touchAndCancelView(android.test.InstrumentationTestCase, android.view.View)
    {
        float $f0, $f1, $f2;
        android.test.InstrumentationTestCase $r0;
        android.view.View $r1;
        int[] $r2;
        int $i0, $i1, $i2;
        android.app.Instrumentation $r3;
        long $l3, $l4;
        android.view.MotionEvent $r4;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;

        $r0 := @parameter0: android.test.InstrumentationTestCase;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        $i2 = $r2[0];

        $f0 = (float) $i2;

        $f1 = (float) $i0;

        $f1 = $f1 / 2.0F;

        $f0 = $f0 + $f1;

        $i0 = $r2[1];

        $f1 = (float) $i0;

        $f2 = (float) $i1;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        $r3 = virtualinvoke $r0.<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>();

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 0, $f0, $f1, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r5 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $i1 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        $f2 = (float) $i1;

        $f2 = $f2 / 2.0F;

        $f0 = $f0 + $f2;

        $f2 = (float) $i1;

        $f2 = $f2 / 2.0F;

        $f1 = $f1 + $f2;

        $r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>($l3, $l4, 3, $f0, $f1, 0);

        virtualinvoke $r3.<android.app.Instrumentation: void sendPointerSync(android.view.MotionEvent)>($r4);

        virtualinvoke $r3.<android.app.Instrumentation: void waitForIdleSync()>();

        return;
    }
}
