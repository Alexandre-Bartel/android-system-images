public class android.view.SurfaceView extends android.view.View
{
    private static final boolean DEBUG;
    static final int GET_NEW_SURFACE_MSG;
    static final int KEEP_SCREEN_ON_MSG;
    private static final java.lang.String TAG;
    private static final boolean localLOGV;
    final java.util.ArrayList mCallbacks;
    final android.graphics.Rect mContentInsets;
    boolean mDestroyReportNeeded;
    boolean mDrawingStopped;
    int mFormat;
    final android.os.Handler mHandler;
    boolean mHaveFrame;
    int mHeight;
    boolean mIsCreating;
    long mLastLockTime;
    final android.view.WindowManager$LayoutParams mLayout;
    int mLeft;
    final int[] mLocation;
    boolean mNewSurfaceNeeded;
    int mRequestedFormat;
    int mRequestedHeight;
    int mRequestedType;
    boolean mRequestedVisible;
    int mRequestedWidth;
    android.view.IWindowSession mSession;
    final android.view.Surface mSurface;
    final android.graphics.Rect mSurfaceFrame;
    private android.view.SurfaceHolder mSurfaceHolder;
    final java.util.concurrent.locks.ReentrantLock mSurfaceLock;
    int mTop;
    int mType;
    boolean mVisible;
    final android.graphics.Rect mVisibleInsets;
    int mWidth;
    final android.graphics.Rect mWinFrame;
    android.view.SurfaceView$MyWindow mWindow;

    public void <init>(android.content.Context)
    {
        android.view.SurfaceView $r0;
        android.content.Context $r1;
        java.util.ArrayList $r2;
        int[] $r3;
        java.util.concurrent.locks.ReentrantLock $r4;
        android.view.Surface $r5;
        android.view.WindowManager$LayoutParams $r6;
        android.graphics.Rect $r7;
        android.view.SurfaceView$1 $r8;
        android.view.SurfaceView$2 $r9;

        $r0 := @this: android.view.SurfaceView;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<android.view.View: void <init>(android.content.Context)>($r1);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks> = $r2;

        $r3 = newarray (int)[2];

        $r0.<android.view.SurfaceView: int[] mLocation> = $r3;

        $r4 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $r0.<android.view.SurfaceView: java.util.concurrent.locks.ReentrantLock mSurfaceLock> = $r4;

        $r5 = new android.view.Surface;

        specialinvoke $r5.<android.view.Surface: void <init>()>();

        $r0.<android.view.SurfaceView: android.view.Surface mSurface> = $r5;

        $r0.<android.view.SurfaceView: boolean mDrawingStopped> = 1;

        $r6 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r6.<android.view.WindowManager$LayoutParams: void <init>()>();

        $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout> = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mVisibleInsets> = $r7;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mWinFrame> = $r7;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mContentInsets> = $r7;

        $r0.<android.view.SurfaceView: boolean mIsCreating> = 0;

        $r8 = new android.view.SurfaceView$1;

        specialinvoke $r8.<android.view.SurfaceView$1: void <init>(android.view.SurfaceView)>($r0);

        $r0.<android.view.SurfaceView: android.os.Handler mHandler> = $r8;

        $r0.<android.view.SurfaceView: boolean mRequestedVisible> = 0;

        $r0.<android.view.SurfaceView: int mRequestedWidth> = -1;

        $r0.<android.view.SurfaceView: int mRequestedHeight> = -1;

        $r0.<android.view.SurfaceView: int mRequestedFormat> = -1;

        $r0.<android.view.SurfaceView: int mRequestedType> = -1;

        $r0.<android.view.SurfaceView: boolean mHaveFrame> = 0;

        $r0.<android.view.SurfaceView: boolean mDestroyReportNeeded> = 0;

        $r0.<android.view.SurfaceView: boolean mNewSurfaceNeeded> = 0;

        $r0.<android.view.SurfaceView: long mLastLockTime> = 0L;

        $r0.<android.view.SurfaceView: boolean mVisible> = 0;

        $r0.<android.view.SurfaceView: int mLeft> = -1;

        $r0.<android.view.SurfaceView: int mTop> = -1;

        $r0.<android.view.SurfaceView: int mWidth> = -1;

        $r0.<android.view.SurfaceView: int mHeight> = -1;

        $r0.<android.view.SurfaceView: int mFormat> = -1;

        $r0.<android.view.SurfaceView: int mType> = -1;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mSurfaceFrame> = $r7;

        $r9 = new android.view.SurfaceView$2;

        specialinvoke $r9.<android.view.SurfaceView$2: void <init>(android.view.SurfaceView)>($r0);

        $r0.<android.view.SurfaceView: android.view.SurfaceHolder mSurfaceHolder> = $r9;

        virtualinvoke $r0.<android.view.View: void setWillNotDraw(boolean)>(1);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.SurfaceView $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        java.util.ArrayList $r3;
        int[] $r4;
        java.util.concurrent.locks.ReentrantLock $r5;
        android.view.Surface $r6;
        android.view.WindowManager$LayoutParams $r7;
        android.graphics.Rect $r8;
        android.view.SurfaceView$1 $r9;
        android.view.SurfaceView$2 $r10;

        $r0 := @this: android.view.SurfaceView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke $r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>($r1, $r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks> = $r3;

        $r4 = newarray (int)[2];

        $r0.<android.view.SurfaceView: int[] mLocation> = $r4;

        $r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $r0.<android.view.SurfaceView: java.util.concurrent.locks.ReentrantLock mSurfaceLock> = $r5;

        $r6 = new android.view.Surface;

        specialinvoke $r6.<android.view.Surface: void <init>()>();

        $r0.<android.view.SurfaceView: android.view.Surface mSurface> = $r6;

        $r0.<android.view.SurfaceView: boolean mDrawingStopped> = 1;

        $r7 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r7.<android.view.WindowManager$LayoutParams: void <init>()>();

        $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mVisibleInsets> = $r8;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mWinFrame> = $r8;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mContentInsets> = $r8;

        $r0.<android.view.SurfaceView: boolean mIsCreating> = 0;

        $r9 = new android.view.SurfaceView$1;

        specialinvoke $r9.<android.view.SurfaceView$1: void <init>(android.view.SurfaceView)>($r0);

        $r0.<android.view.SurfaceView: android.os.Handler mHandler> = $r9;

        $r0.<android.view.SurfaceView: boolean mRequestedVisible> = 0;

        $r0.<android.view.SurfaceView: int mRequestedWidth> = -1;

        $r0.<android.view.SurfaceView: int mRequestedHeight> = -1;

        $r0.<android.view.SurfaceView: int mRequestedFormat> = -1;

        $r0.<android.view.SurfaceView: int mRequestedType> = -1;

        $r0.<android.view.SurfaceView: boolean mHaveFrame> = 0;

        $r0.<android.view.SurfaceView: boolean mDestroyReportNeeded> = 0;

        $r0.<android.view.SurfaceView: boolean mNewSurfaceNeeded> = 0;

        $r0.<android.view.SurfaceView: long mLastLockTime> = 0L;

        $r0.<android.view.SurfaceView: boolean mVisible> = 0;

        $r0.<android.view.SurfaceView: int mLeft> = -1;

        $r0.<android.view.SurfaceView: int mTop> = -1;

        $r0.<android.view.SurfaceView: int mWidth> = -1;

        $r0.<android.view.SurfaceView: int mHeight> = -1;

        $r0.<android.view.SurfaceView: int mFormat> = -1;

        $r0.<android.view.SurfaceView: int mType> = -1;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mSurfaceFrame> = $r8;

        $r10 = new android.view.SurfaceView$2;

        specialinvoke $r10.<android.view.SurfaceView$2: void <init>(android.view.SurfaceView)>($r0);

        $r0.<android.view.SurfaceView: android.view.SurfaceHolder mSurfaceHolder> = $r10;

        virtualinvoke $r0.<android.view.View: void setWillNotDraw(boolean)>(1);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.view.SurfaceView $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0;
        java.util.ArrayList $r3;
        int[] $r4;
        java.util.concurrent.locks.ReentrantLock $r5;
        android.view.Surface $r6;
        android.view.WindowManager$LayoutParams $r7;
        android.graphics.Rect $r8;
        android.view.SurfaceView$1 $r9;
        android.view.SurfaceView$2 $r10;

        $r0 := @this: android.view.SurfaceView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke $r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks> = $r3;

        $r4 = newarray (int)[2];

        $r0.<android.view.SurfaceView: int[] mLocation> = $r4;

        $r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void <init>()>();

        $r0.<android.view.SurfaceView: java.util.concurrent.locks.ReentrantLock mSurfaceLock> = $r5;

        $r6 = new android.view.Surface;

        specialinvoke $r6.<android.view.Surface: void <init>()>();

        $r0.<android.view.SurfaceView: android.view.Surface mSurface> = $r6;

        $r0.<android.view.SurfaceView: boolean mDrawingStopped> = 1;

        $r7 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r7.<android.view.WindowManager$LayoutParams: void <init>()>();

        $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout> = $r7;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mVisibleInsets> = $r8;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mWinFrame> = $r8;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mContentInsets> = $r8;

        $r0.<android.view.SurfaceView: boolean mIsCreating> = 0;

        $r9 = new android.view.SurfaceView$1;

        specialinvoke $r9.<android.view.SurfaceView$1: void <init>(android.view.SurfaceView)>($r0);

        $r0.<android.view.SurfaceView: android.os.Handler mHandler> = $r9;

        $r0.<android.view.SurfaceView: boolean mRequestedVisible> = 0;

        $r0.<android.view.SurfaceView: int mRequestedWidth> = -1;

        $r0.<android.view.SurfaceView: int mRequestedHeight> = -1;

        $r0.<android.view.SurfaceView: int mRequestedFormat> = -1;

        $r0.<android.view.SurfaceView: int mRequestedType> = -1;

        $r0.<android.view.SurfaceView: boolean mHaveFrame> = 0;

        $r0.<android.view.SurfaceView: boolean mDestroyReportNeeded> = 0;

        $r0.<android.view.SurfaceView: boolean mNewSurfaceNeeded> = 0;

        $r0.<android.view.SurfaceView: long mLastLockTime> = 0L;

        $r0.<android.view.SurfaceView: boolean mVisible> = 0;

        $r0.<android.view.SurfaceView: int mLeft> = -1;

        $r0.<android.view.SurfaceView: int mTop> = -1;

        $r0.<android.view.SurfaceView: int mWidth> = -1;

        $r0.<android.view.SurfaceView: int mHeight> = -1;

        $r0.<android.view.SurfaceView: int mFormat> = -1;

        $r0.<android.view.SurfaceView: int mType> = -1;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        $r0.<android.view.SurfaceView: android.graphics.Rect mSurfaceFrame> = $r8;

        $r10 = new android.view.SurfaceView$2;

        specialinvoke $r10.<android.view.SurfaceView$2: void <init>(android.view.SurfaceView)>($r0);

        $r0.<android.view.SurfaceView: android.view.SurfaceHolder mSurfaceHolder> = $r10;

        virtualinvoke $r0.<android.view.View: void setWillNotDraw(boolean)>(1);

        return;
    }

    static void access$000(android.view.SurfaceView, boolean)
    {
        android.view.SurfaceView $r0;
        boolean $z0;

        $r0 := @parameter0: android.view.SurfaceView;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<android.view.SurfaceView: void updateWindow(boolean)>($z0);

        return;
    }

    private void reportSurfaceDestroyed()
    {
        android.view.SurfaceView $r0;
        android.view.SurfaceHolder$Callback $r1;
        android.view.SurfaceHolder$Callback[] $r2;
        int $i0, $i1;
        boolean $z0;
        java.util.ArrayList $r3, $r4;
        android.view.SurfaceHolder $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.view.SurfaceView;

        $z0 = $r0.<android.view.SurfaceView: boolean mDestroyReportNeeded>;

        if $z0 == 0 goto label7;

        $r0.<android.view.SurfaceView: boolean mDestroyReportNeeded> = 0;

        $r3 = $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks>;

        entermonitor $r3;

     label1:
        $r4 = $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $r2 = newarray (android.view.SurfaceHolder$Callback)[$i0];

        $r4 = $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks>;

        virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        exitmonitor $r3;

     label2:
        $i0 = lengthof $r2;

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label7;

        $r1 = $r2[$i1];

        $r5 = $r0.<android.view.SurfaceView: android.view.SurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r1.<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>($r5);

        $i1 = $i1 + 1;

        goto label3;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor $r3;

     label6:
        throw $r6;

     label7:
        specialinvoke $r0.<android.view.View: void onDetachedFromWindow()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void updateWindow(boolean)
    {
        android.view.SurfaceView $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.view.SurfaceHolder$Callback[] $r1;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        int[] $r2;
        android.view.SurfaceView$MyWindow $r3;
        android.view.WindowManager$LayoutParams $r4;
        android.view.IWindowSession $r5;
        byte $b4;
        android.graphics.Rect $r6, $r8, $r9;
        java.util.concurrent.locks.ReentrantLock $r7;
        android.view.Surface $r10;
        java.util.ArrayList $r11, $r12;
        android.view.SurfaceHolder$Callback $r13;
        android.view.SurfaceHolder $r14;
        java.lang.Throwable $r15, $r16;
        android.os.RemoteException $r17;

        $r0 := @this: android.view.SurfaceView;

        $z0 := @parameter0: boolean;

        $z1 = $r0.<android.view.SurfaceView: boolean mHaveFrame>;

        if $z1 != 0 goto label01;

        return;

     label01:
        $i0 = $r0.<android.view.SurfaceView: int mRequestedWidth>;

        $i1 = $i0;

        if $i0 > 0 goto label02;

        $i1 = virtualinvoke $r0.<android.view.View: int getWidth()>();

     label02:
        $i2 = $r0.<android.view.SurfaceView: int mRequestedHeight>;

        $i0 = $i2;

        if $i2 > 0 goto label03;

        $i0 = virtualinvoke $r0.<android.view.View: int getHeight()>();

     label03:
        $r2 = $r0.<android.view.SurfaceView: int[] mLocation>;

        virtualinvoke $r0.<android.view.View: void getLocationInWindow(int[])>($r2);

        $r3 = $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow>;

        if $r3 != null goto label44;

        $z1 = 1;

     label04:
        $i2 = $r0.<android.view.SurfaceView: int mFormat>;

        $i3 = $r0.<android.view.SurfaceView: int mRequestedFormat>;

        if $i2 == $i3 goto label45;

        $z2 = 1;

     label05:
        $i2 = $r0.<android.view.SurfaceView: int mWidth>;

        if $i2 != $i1 goto label06;

        $i2 = $r0.<android.view.SurfaceView: int mHeight>;

        if $i2 == $i0 goto label46;

     label06:
        $z3 = 1;

     label07:
        $z4 = $r0.<android.view.SurfaceView: boolean mVisible>;

        $z5 = $r0.<android.view.SurfaceView: boolean mRequestedVisible>;

        if $z4 != $z5 goto label08;

        $z4 = $r0.<android.view.SurfaceView: boolean mNewSurfaceNeeded>;

        if $z4 == 0 goto label47;

     label08:
        $z4 = 1;

     label09:
        $i2 = $r0.<android.view.SurfaceView: int mType>;

        $i3 = $r0.<android.view.SurfaceView: int mRequestedType>;

        if $i2 == $i3 goto label48;

        $z5 = 1;

     label10:
        if $z0 != 0 goto label11;

        if $z1 != 0 goto label11;

        if $z2 != 0 goto label11;

        if $z3 != 0 goto label11;

        if $z4 != 0 goto label11;

        if $z5 != 0 goto label11;

        $i2 = $r0.<android.view.SurfaceView: int mLeft>;

        $r2 = $r0.<android.view.SurfaceView: int[] mLocation>;

        $i3 = $r2[0];

        if $i2 != $i3 goto label11;

        $i2 = $r0.<android.view.SurfaceView: int mTop>;

        $r2 = $r0.<android.view.SurfaceView: int[] mLocation>;

        $i3 = $r2[1];

        if $i2 == $i3 goto label69;

     label11:
        $z0 = $r0.<android.view.SurfaceView: boolean mRequestedVisible>;

        $r0.<android.view.SurfaceView: boolean mVisible> = $z0;

        $r2 = $r0.<android.view.SurfaceView: int[] mLocation>;

        $i2 = $r2[0];

        $r0.<android.view.SurfaceView: int mLeft> = $i2;

        $r2 = $r0.<android.view.SurfaceView: int[] mLocation>;

        $i2 = $r2[1];

        $r0.<android.view.SurfaceView: int mTop> = $i2;

        $r0.<android.view.SurfaceView: int mWidth> = $i1;

        $r0.<android.view.SurfaceView: int mHeight> = $i0;

        $i1 = $r0.<android.view.SurfaceView: int mRequestedFormat>;

        $r0.<android.view.SurfaceView: int mFormat> = $i1;

        $i1 = $r0.<android.view.SurfaceView: int mRequestedType>;

        $r0.<android.view.SurfaceView: int mType> = $i1;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $i1 = $r0.<android.view.SurfaceView: int mLeft>;

        $r4.<android.view.WindowManager$LayoutParams: int x> = $i1;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $i1 = $r0.<android.view.SurfaceView: int mTop>;

        $r4.<android.view.WindowManager$LayoutParams: int y> = $i1;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

     label12:
        $i1 = virtualinvoke $r0.<android.view.View: int getWidth()>();

     label13:
        $r4.<android.view.ViewGroup$LayoutParams: int width> = $i1;

     label14:
        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

     label15:
        $r4.<android.view.ViewGroup$LayoutParams: int height> = $i1;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $i1 = $r0.<android.view.SurfaceView: int mRequestedFormat>;

        $r4.<android.view.WindowManager$LayoutParams: int format> = $i1;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $i1 = $r4.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i1 | 16920;

        $r4.<android.view.WindowManager$LayoutParams: int flags> = $i1;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $i1 = $r0.<android.view.SurfaceView: int mRequestedType>;

        $r4.<android.view.WindowManager$LayoutParams: int memoryType> = $i1;

        $r3 = $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow>;

        if $r3 != null goto label19;

     label16:
        $r3 = new android.view.SurfaceView$MyWindow;

        specialinvoke $r3.<android.view.SurfaceView$MyWindow: void <init>(android.view.SurfaceView)>($r0);

     label17:
        $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow> = $r3;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $r4.<android.view.WindowManager$LayoutParams: int type> = 1001;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $r4.<android.view.WindowManager$LayoutParams: int gravity> = 51;

        $r5 = $r0.<android.view.SurfaceView: android.view.IWindowSession mSession>;

        $r3 = $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow>;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $z5 = $r0.<android.view.SurfaceView: boolean mVisible>;

        if $z5 == 0 goto label49;

        $b4 = 0;

     label18:
        $r6 = $r0.<android.view.SurfaceView: android.graphics.Rect mContentInsets>;

        interfaceinvoke $r5.<android.view.IWindowSession: int add(android.view.IWindow,android.view.WindowManager$LayoutParams,int,android.graphics.Rect)>($r3, $r4, $b4, $r6);

     label19:
        if $z4 == 0 goto label24;

     label20:
        if $z0 == 0 goto label23;

     label21:
        $z5 = $r0.<android.view.SurfaceView: boolean mNewSurfaceNeeded>;

     label22:
        if $z5 == 0 goto label24;

     label23:
        specialinvoke $r0.<android.view.SurfaceView: void reportSurfaceDestroyed()>();

     label24:
        $r0.<android.view.SurfaceView: boolean mNewSurfaceNeeded> = 0;

     label25:
        $r7 = $r0.<android.view.SurfaceView: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label26:
        if $z0 != 0 goto label50;

        $z5 = 1;

     label27:
        $r0.<android.view.SurfaceView: boolean mDrawingStopped> = $z5;

        $r5 = $r0.<android.view.SurfaceView: android.view.IWindowSession mSession>;

        $r3 = $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow>;

        $r4 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $i1 = $r0.<android.view.SurfaceView: int mWidth>;

        $i0 = $r0.<android.view.SurfaceView: int mHeight>;

        if $z0 == 0 goto label51;

        $b4 = 0;

     label28:
        $r6 = $r0.<android.view.SurfaceView: android.graphics.Rect mWinFrame>;

        $r8 = $r0.<android.view.SurfaceView: android.graphics.Rect mContentInsets>;

        $r9 = $r0.<android.view.SurfaceView: android.graphics.Rect mVisibleInsets>;

     label29:
        $r10 = $r0.<android.view.SurfaceView: android.view.Surface mSurface>;

        $i1 = interfaceinvoke $r5.<android.view.IWindowSession: int relayout(android.view.IWindow,android.view.WindowManager$LayoutParams,int,int,int,boolean,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.Surface)>($r3, $r4, $i1, $i0, $b4, 0, $r6, $r8, $r9, $r10);

     label30:
        $r6 = $r0.<android.view.SurfaceView: android.graphics.Rect mSurfaceFrame>;

        $r6.<android.graphics.Rect: int left> = 0;

        $r6 = $r0.<android.view.SurfaceView: android.graphics.Rect mSurfaceFrame>;

        $r6.<android.graphics.Rect: int top> = 0;

        $r6 = $r0.<android.view.SurfaceView: android.graphics.Rect mSurfaceFrame>;

     label31:
        $r8 = $r0.<android.view.SurfaceView: android.graphics.Rect mWinFrame>;

        $i0 = virtualinvoke $r8.<android.graphics.Rect: int width()>();

     label32:
        $r6.<android.graphics.Rect: int right> = $i0;

        $r6 = $r0.<android.view.SurfaceView: android.graphics.Rect mSurfaceFrame>;

     label33:
        $r8 = $r0.<android.view.SurfaceView: android.graphics.Rect mWinFrame>;

        $i0 = virtualinvoke $r8.<android.graphics.Rect: int height()>();

     label34:
        $r6.<android.graphics.Rect: int bottom> = $i0;

     label35:
        $r7 = $r0.<android.view.SurfaceView: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

     label36:
        if $z0 == 0 goto label65;

     label37:
        $r0.<android.view.SurfaceView: boolean mDestroyReportNeeded> = 1;

        $r11 = $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks>;

        entermonitor $r11;

     label38:
        $r12 = $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks>;

        $i0 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        $r1 = newarray (android.view.SurfaceHolder$Callback)[$i0];

        $r12 = $r0.<android.view.SurfaceView: java.util.ArrayList mCallbacks>;

        virtualinvoke $r12.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        exitmonitor $r11;

     label39:
        if $z4 == 0 goto label60;

     label40:
        $r0.<android.view.SurfaceView: boolean mIsCreating> = 1;

        $i0 = lengthof $r1;

     label41:
        $i2 = 0;

     label42:
        if $i2 >= $i0 goto label60;

        $r13 = $r1[$i2];

        $r14 = $r0.<android.view.SurfaceView: android.view.SurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r13.<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>($r14);

     label43:
        $i2 = $i2 + 1;

        goto label42;

     label44:
        $z1 = 0;

        goto label04;

     label45:
        $z2 = 0;

        goto label05;

     label46:
        $z3 = 0;

        goto label07;

     label47:
        $z4 = 0;

        goto label09;

     label48:
        $z5 = 0;

        goto label10;

     label49:
        $b4 = 8;

        goto label18;

     label50:
        $z5 = 0;

        goto label27;

     label51:
        $b4 = 8;

        goto label28;

     label52:
        $r15 := @caughtexception;

     label53:
        exitmonitor $r11;

     label54:
        throw $r15;

     label55:
        $r16 := @caughtexception;

        $r0.<android.view.SurfaceView: boolean mIsCreating> = 0;

        if $z1 != 0 goto label56;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label58;

     label56:
        $r5 = $r0.<android.view.SurfaceView: android.view.IWindowSession mSession>;

        $r3 = $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow>;

     label57:
        interfaceinvoke $r5.<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>($r3);

     label58:
        throw $r16;

     label59:
        $r17 := @caughtexception;

        return;

     label60:
        if $z1 != 0 goto label61;

        if $z2 != 0 goto label61;

        if $z3 != 0 goto label61;

        if $z4 == 0 goto label65;

     label61:
        $i0 = lengthof $r1;

     label62:
        $i2 = 0;

     label63:
        if $i2 >= $i0 goto label65;

        $r13 = $r1[$i2];

        $r14 = $r0.<android.view.SurfaceView: android.view.SurfaceHolder mSurfaceHolder>;

        $i3 = $r0.<android.view.SurfaceView: int mFormat>;

        $i5 = $r0.<android.view.SurfaceView: int mWidth>;

        $i6 = $r0.<android.view.SurfaceView: int mHeight>;

        interfaceinvoke $r13.<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>($r14, $i3, $i5, $i6);

     label64:
        $i2 = $i2 + 1;

        goto label63;

     label65:
        $r0.<android.view.SurfaceView: boolean mIsCreating> = 0;

        if $z1 != 0 goto label66;

        $i1 = $i1 & 2;

        if $i1 == 0 goto label70;

     label66:
        $r5 = $r0.<android.view.SurfaceView: android.view.IWindowSession mSession>;

        $r3 = $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow>;

     label67:
        interfaceinvoke $r5.<android.view.IWindowSession: void finishDrawing(android.view.IWindow)>($r3);

     label68:
        return;

     label69:
        return;

     label70:
        return;

        catch android.os.RemoteException from label12 to label13 with label59;
        catch android.os.RemoteException from label14 to label15 with label59;
        catch android.os.RemoteException from label16 to label17 with label59;
        catch android.os.RemoteException from label18 to label19 with label59;
        catch android.os.RemoteException from label20 to label21 with label59;
        catch android.os.RemoteException from label22 to label24 with label59;
        catch android.os.RemoteException from label25 to label26 with label59;
        catch android.os.RemoteException from label29 to label30 with label59;
        catch android.os.RemoteException from label31 to label32 with label59;
        catch android.os.RemoteException from label33 to label34 with label59;
        catch android.os.RemoteException from label35 to label36 with label59;
        catch java.lang.Throwable from label37 to label38 with label55;
        catch java.lang.Throwable from label38 to label39 with label52;
        catch java.lang.Throwable from label40 to label41 with label55;
        catch java.lang.Throwable from label42 to label43 with label55;
        catch java.lang.Throwable from label53 to label54 with label52;
        catch java.lang.Throwable from label54 to label55 with label55;
        catch android.os.RemoteException from label57 to label59 with label59;
        catch java.lang.Throwable from label61 to label62 with label55;
        catch java.lang.Throwable from label63 to label64 with label55;
        catch android.os.RemoteException from label67 to label68 with label59;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.view.SurfaceView $r0;
        android.graphics.Canvas $r1;
        int $i0;
        android.graphics.PorterDuff$Mode $r2;

        $r0 := @this: android.view.SurfaceView;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 128;

        if $i0 != 128 goto label1;

        $r2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r2);

     label1:
        $r0.<android.view.SurfaceView: boolean mHaveFrame> = 1;

        specialinvoke $r0.<android.view.SurfaceView: void updateWindow(boolean)>(0);

        specialinvoke $r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>($r1);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.view.SurfaceView $r0;
        android.graphics.Canvas $r1;
        android.graphics.PorterDuff$Mode $r2;
        int $i0;

        $r0 := @this: android.view.SurfaceView;

        $r1 := @parameter0: android.graphics.Canvas;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 128;

        if $i0 != 0 goto label1;

        $r2 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r2);

     label1:
        specialinvoke $r0.<android.view.View: void draw(android.graphics.Canvas)>($r1);

        return;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        android.view.SurfaceView $r0;
        android.graphics.Region $r1;
        int $i0, $i1, $i2, $i3;
        android.graphics.Region$Op $r2;
        boolean $z0, $z1;
        int[] $r3;

        $r0 := @this: android.view.SurfaceView;

        $r1 := @parameter0: android.graphics.Region;

        $z0 = 1;

        $i0 = $r0.<android.view.View: int mPrivateFlags>;

        $i0 = $i0 & 128;

        if $i0 != 0 goto label2;

        $z0 = specialinvoke $r0.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>($r1);

     label1:
        $i0 = $r0.<android.view.SurfaceView: int mRequestedFormat>;

        $z1 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i0);

        if $z1 == 0 goto label3;

        return 0;

     label2:
        if $r1 == null goto label1;

        $i3 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i2 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        if $i3 <= 0 goto label1;

        if $i2 <= 0 goto label1;

        $r3 = $r0.<android.view.SurfaceView: int[] mLocation>;

        virtualinvoke $r0.<android.view.View: void getLocationInWindow(int[])>($r3);

        $r3 = $r0.<android.view.SurfaceView: int[] mLocation>;

        $i0 = $r3[0];

        $r3 = $r0.<android.view.SurfaceView: int[] mLocation>;

        $i1 = $r3[1];

        $i3 = $i0 + $i3;

        $i2 = $i1 + $i2;

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke $r1.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i0, $i1, $i3, $i2, $r2);

        goto label1;

     label3:
        return $z0;
    }

    public android.view.SurfaceHolder getHolder()
    {
        android.view.SurfaceView $r0;
        android.view.SurfaceHolder r1;

        $r0 := @this: android.view.SurfaceView;

        r1 = $r0.<android.view.SurfaceView: android.view.SurfaceHolder mSurfaceHolder>;

        return r1;
    }

    void handleGetNewSurface()
    {
        android.view.SurfaceView $r0;

        $r0 := @this: android.view.SurfaceView;

        $r0.<android.view.SurfaceView: boolean mNewSurfaceNeeded> = 1;

        specialinvoke $r0.<android.view.SurfaceView: void updateWindow(boolean)>(0);

        return;
    }

    protected void onAttachedToWindow()
    {
        android.view.SurfaceView $r0;
        android.view.ViewParent $r1;
        android.view.IWindowSession $r2;
        android.view.WindowManager$LayoutParams $r3;
        android.os.IBinder $r4;

        $r0 := @this: android.view.SurfaceView;

        specialinvoke $r0.<android.view.View: void onAttachedToWindow()>();

        $r1 = $r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r1.<android.view.ViewParent: void requestTransparentRegion(android.view.View)>($r0);

        $r2 = virtualinvoke $r0.<android.view.View: android.view.IWindowSession getWindowSession()>();

        $r0.<android.view.SurfaceView: android.view.IWindowSession mSession> = $r2;

        $r3 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $r4 = virtualinvoke $r0.<android.view.View: android.os.IBinder getWindowToken()>();

        $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = $r4;

        $r3 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        virtualinvoke $r3.<android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)>("SurfaceView");

        return;
    }

    protected void onDetachedFromWindow()
    {
        android.view.SurfaceView $r0;
        android.view.SurfaceView$MyWindow $r1;
        android.view.IWindowSession $r2;
        android.view.WindowManager$LayoutParams $r3;
        android.os.RemoteException $r4;

        $r0 := @this: android.view.SurfaceView;

        $r0.<android.view.SurfaceView: boolean mRequestedVisible> = 0;

        specialinvoke $r0.<android.view.SurfaceView: void updateWindow(boolean)>(0);

        $r0.<android.view.SurfaceView: boolean mHaveFrame> = 0;

        $r1 = $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow>;

        if $r1 == null goto label3;

        $r2 = $r0.<android.view.SurfaceView: android.view.IWindowSession mSession>;

        $r1 = $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow>;

     label1:
        interfaceinvoke $r2.<android.view.IWindowSession: void remove(android.view.IWindow)>($r1);

     label2:
        $r0.<android.view.SurfaceView: android.view.SurfaceView$MyWindow mWindow> = null;

     label3:
        $r0.<android.view.SurfaceView: android.view.IWindowSession mSession> = null;

        $r3 = $r0.<android.view.SurfaceView: android.view.WindowManager$LayoutParams mLayout>;

        $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = null;

        specialinvoke $r0.<android.view.View: void onDetachedFromWindow()>();

        return;

     label4:
        $r4 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    protected void onMeasure(int, int)
    {
        android.view.SurfaceView $r0;
        int $i0, $i1, $i2;

        $r0 := @this: android.view.SurfaceView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $r0.<android.view.SurfaceView: int mRequestedWidth>;

        $i0 = staticinvoke <android.view.SurfaceView: int getDefaultSize(int,int)>($i2, $i0);

        $i2 = $r0.<android.view.SurfaceView: int mRequestedHeight>;

        $i1 = staticinvoke <android.view.SurfaceView: int getDefaultSize(int,int)>($i2, $i1);

        virtualinvoke $r0.<android.view.View: void setMeasuredDimension(int,int)>($i0, $i1);

        return;
    }

    protected void onScrollChanged(int, int, int, int)
    {
        android.view.SurfaceView $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.view.SurfaceView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke $r0.<android.view.View: void onScrollChanged(int,int,int,int)>($i0, $i1, $i2, $i3);

        specialinvoke $r0.<android.view.SurfaceView: void updateWindow(boolean)>(0);

        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.view.SurfaceView $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.view.SurfaceView;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        specialinvoke $r0.<android.view.View: void onSizeChanged(int,int,int,int)>($i0, $i1, $i2, $i3);

        specialinvoke $r0.<android.view.SurfaceView: void updateWindow(boolean)>(0);

        return;
    }

    protected void onWindowVisibilityChanged(int)
    {
        android.view.SurfaceView $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: android.view.SurfaceView;

        $i0 := @parameter0: int;

        specialinvoke $r0.<android.view.View: void onWindowVisibilityChanged(int)>($i0);

        if $i0 != 0 goto label2;

        $z0 = 1;

     label1:
        $r0.<android.view.SurfaceView: boolean mRequestedVisible> = $z0;

        specialinvoke $r0.<android.view.SurfaceView: void updateWindow(boolean)>(0);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public static void <clinit>()
    {
        <android.view.SurfaceView: java.lang.String TAG> = "SurfaceView";

        <android.view.SurfaceView: int KEEP_SCREEN_ON_MSG> = 1;

        <android.view.SurfaceView: int GET_NEW_SURFACE_MSG> = 2;

        <android.view.SurfaceView: boolean DEBUG> = 0;

        return;
    }
}
