public class android.widget.SlidingDrawer extends android.view.ViewGroup
{
    private static final int ANIMATION_FRAME_DURATION;
    private static final int COLLAPSED_FULL_CLOSED;
    private static final int EXPANDED_FULL_OPEN;
    private static final float MAXIMUM_ACCELERATION;
    private static final float MAXIMUM_MAJOR_VELOCITY;
    private static final float MAXIMUM_MINOR_VELOCITY;
    private static final float MAXIMUM_TAP_VELOCITY;
    private static final int MSG_ANIMATE;
    public static final int ORIENTATION_HORIZONTAL;
    public static final int ORIENTATION_VERTICAL;
    private static final int TAP_THRESHOLD;
    private static final int VELOCITY_UNITS;
    private boolean mAllowSingleTap;
    private boolean mAnimateOnClick;
    private float mAnimatedAcceleration;
    private float mAnimatedVelocity;
    private boolean mAnimating;
    private long mAnimationLastTime;
    private float mAnimationPosition;
    private int mBottomOffset;
    private android.view.View mContent;
    private final int mContentId;
    private long mCurrentAnimationTime;
    private boolean mExpanded;
    private final android.graphics.Rect mFrame;
    private android.view.View mHandle;
    private int mHandleHeight;
    private final int mHandleId;
    private int mHandleWidth;
    private final android.os.Handler mHandler;
    private final android.graphics.Rect mInvalidate;
    private boolean mLocked;
    private final int mMaximumAcceleration;
    private final int mMaximumMajorVelocity;
    private final int mMaximumMinorVelocity;
    private final int mMaximumTapVelocity;
    private android.widget.SlidingDrawer$OnDrawerCloseListener mOnDrawerCloseListener;
    private android.widget.SlidingDrawer$OnDrawerOpenListener mOnDrawerOpenListener;
    private android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener;
    private final int mTapThreshold;
    private int mTopOffset;
    private int mTouchDelta;
    private boolean mTracking;
    private android.view.VelocityTracker mVelocityTracker;
    private final int mVelocityUnits;
    private boolean mVertical;

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.widget.SlidingDrawer $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        specialinvoke $r0.<android.widget.SlidingDrawer: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.widget.SlidingDrawer $r0;
        android.content.Context $r1;
        android.util.AttributeSet $r2;
        int $i0, $i1;
        float $f0, $f1;
        android.graphics.Rect $r3;
        android.widget.SlidingDrawer$SlidingHandler $r4;
        int[] $r5;
        android.content.res.TypedArray $r6;
        boolean $z0;
        java.lang.IllegalArgumentException $r7;
        android.content.res.Resources $r8;
        android.util.DisplayMetrics $r9;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.util.AttributeSet;

        $i0 := @parameter2: int;

        specialinvoke $r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>($r1, $r2, $i0);

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        $r0.<android.widget.SlidingDrawer: android.graphics.Rect mFrame> = $r3;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        $r0.<android.widget.SlidingDrawer: android.graphics.Rect mInvalidate> = $r3;

        $r4 = new android.widget.SlidingDrawer$SlidingHandler;

        specialinvoke $r4.<android.widget.SlidingDrawer$SlidingHandler: void <init>(android.widget.SlidingDrawer,android.widget.SlidingDrawer$1)>($r0, null);

        $r0.<android.widget.SlidingDrawer: android.os.Handler mHandler> = $r4;

        $r5 = <android.R$styleable: int[] SlidingDrawer>;

        $r6 = virtualinvoke $r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>($r2, $r5, $i0, 0);

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getInt(int,int)>(0, 1);

        if $i0 != 1 goto label2;

        $z0 = 1;

     label1:
        $r0.<android.widget.SlidingDrawer: boolean mVertical> = $z0;

        $f0 = virtualinvoke $r6.<android.content.res.TypedArray: float getDimension(int,float)>(1, 0.0F);

        $i0 = (int) $f0;

        $r0.<android.widget.SlidingDrawer: int mBottomOffset> = $i0;

        $f0 = virtualinvoke $r6.<android.content.res.TypedArray: float getDimension(int,float)>(2, 0.0F);

        $i0 = (int) $f0;

        $r0.<android.widget.SlidingDrawer: int mTopOffset> = $i0;

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 1);

        $r0.<android.widget.SlidingDrawer: boolean mAllowSingleTap> = $z0;

        $z0 = virtualinvoke $r6.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(6, 1);

        $r0.<android.widget.SlidingDrawer: boolean mAnimateOnClick> = $z0;

        $i0 = virtualinvoke $r6.<android.content.res.TypedArray: int getResourceId(int,int)>(4, 0);

        if $i0 != 0 goto label3;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The handle attribute is required and must refer to a valid child.");

        throw $r7;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        $i1 = virtualinvoke $r6.<android.content.res.TypedArray: int getResourceId(int,int)>(5, 0);

        if $i1 != 0 goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The handle attribute is required and must refer to a valid child.");

        throw $r7;

     label4:
        $r0.<android.widget.SlidingDrawer: int mHandleId> = $i0;

        $r0.<android.widget.SlidingDrawer: int mContentId> = $i1;

        $r8 = virtualinvoke $r0.<android.view.View: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke $r8.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r9.<android.util.DisplayMetrics: float density>;

        $f1 = 6.0F * $f0;

        $f1 = $f1 + 0.5F;

        $i0 = (int) $f1;

        $r0.<android.widget.SlidingDrawer: int mTapThreshold> = $i0;

        $f1 = 100.0F * $f0;

        $f1 = $f1 + 0.5F;

        $i0 = (int) $f1;

        $r0.<android.widget.SlidingDrawer: int mMaximumTapVelocity> = $i0;

        $f1 = 150.0F * $f0;

        $f1 = $f1 + 0.5F;

        $i0 = (int) $f1;

        $r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity> = $i0;

        $f1 = 200.0F * $f0;

        $f1 = $f1 + 0.5F;

        $i0 = (int) $f1;

        $r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity> = $i0;

        $f1 = 2000.0F * $f0;

        $f1 = $f1 + 0.5F;

        $i0 = (int) $f1;

        $r0.<android.widget.SlidingDrawer: int mMaximumAcceleration> = $i0;

        $f0 = 1000.0F * $f0;

        $f0 = $f0 + 0.5F;

        $i0 = (int) $f0;

        $r0.<android.widget.SlidingDrawer: int mVelocityUnits> = $i0;

        virtualinvoke $r6.<android.content.res.TypedArray: void recycle()>();

        virtualinvoke $r0.<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>(0);

        return;
    }

    static boolean access$200(android.widget.SlidingDrawer)
    {
        android.widget.SlidingDrawer $r0;
        boolean z0;

        $r0 := @parameter0: android.widget.SlidingDrawer;

        z0 = $r0.<android.widget.SlidingDrawer: boolean mLocked>;

        return z0;
    }

    static boolean access$300(android.widget.SlidingDrawer)
    {
        android.widget.SlidingDrawer $r0;
        boolean z0;

        $r0 := @parameter0: android.widget.SlidingDrawer;

        z0 = $r0.<android.widget.SlidingDrawer: boolean mAnimateOnClick>;

        return z0;
    }

    static void access$400(android.widget.SlidingDrawer)
    {
        android.widget.SlidingDrawer $r0;

        $r0 := @parameter0: android.widget.SlidingDrawer;

        specialinvoke $r0.<android.widget.SlidingDrawer: void doAnimation()>();

        return;
    }

    private void animateClose(int)
    {
        android.widget.SlidingDrawer $r0;
        int $i0, $i1;
        float $f0;

        $r0 := @this: android.widget.SlidingDrawer;

        $i0 := @parameter0: int;

        specialinvoke $r0.<android.widget.SlidingDrawer: void prepareTracking(int)>($i0);

        $i1 = $r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $f0 = (float) $i1;

        specialinvoke $r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>($i0, $f0, 1);

        return;
    }

    private void animateOpen(int)
    {
        android.widget.SlidingDrawer $r0;
        int $i0, $i1;
        float $f0;

        $r0 := @this: android.widget.SlidingDrawer;

        $i0 := @parameter0: int;

        specialinvoke $r0.<android.widget.SlidingDrawer: void prepareTracking(int)>($i0);

        $i1 = $r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $i1 = neg $i1;

        $f0 = (float) $i1;

        specialinvoke $r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>($i0, $f0, 1);

        return;
    }

    private void closeDrawer()
    {
        android.widget.SlidingDrawer $r0;
        android.view.View $r1;
        boolean $z0;
        android.widget.SlidingDrawer$OnDrawerCloseListener $r2;

        $r0 := @this: android.widget.SlidingDrawer;

        specialinvoke $r0.<android.widget.SlidingDrawer: void moveHandle(int)>(-10002);

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(8);

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r1.<android.view.View: void destroyDrawingCache()>();

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0.<android.widget.SlidingDrawer: boolean mExpanded> = 0;

        $r2 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerCloseListener mOnDrawerCloseListener>;

        if $r2 == null goto label2;

        $r2 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerCloseListener mOnDrawerCloseListener>;

        interfaceinvoke $r2.<android.widget.SlidingDrawer$OnDrawerCloseListener: void onDrawerClosed()>();

        return;

     label2:
        return;
    }

    private void doAnimation()
    {
        android.widget.SlidingDrawer $r0;
        boolean $z0;
        float $f0, $f1;
        int $i0, $i1;
        byte $b2;
        long $l3;
        android.os.Handler $r1, $r2;
        android.os.Message $r3;

        $r0 := @this: android.widget.SlidingDrawer;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z0 == 0 goto label5;

        specialinvoke $r0.<android.widget.SlidingDrawer: void incrementAnimation()>();

        $f0 = $r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $i0 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

     label1:
        $i0 = $i0 + $i1;

        $i0 = $i0 - 1;

        $f1 = (float) $i0;

        $b2 = $f0 cmpl $f1;

        if $b2 < 0 goto label3;

        $r0.<android.widget.SlidingDrawer: boolean mAnimating> = 0;

        specialinvoke $r0.<android.widget.SlidingDrawer: void closeDrawer()>();

        return;

     label2:
        $i1 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        goto label1;

     label3:
        $f0 = $r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $i0 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $f1 = (float) $i0;

        $b2 = $f0 cmpg $f1;

        if $b2 >= 0 goto label4;

        $r0.<android.widget.SlidingDrawer: boolean mAnimating> = 0;

        specialinvoke $r0.<android.widget.SlidingDrawer: void openDrawer()>();

        return;

     label4:
        $f0 = $r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $i0 = (int) $f0;

        specialinvoke $r0.<android.widget.SlidingDrawer: void moveHandle(int)>($i0);

        $l3 = $r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime>;

        $l3 = $l3 + 16L;

        $r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime> = $l3;

        $r1 = $r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        $r2 = $r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(1000);

        $l3 = $r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime>;

        virtualinvoke $r1.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>($r3, $l3);

        return;

     label5:
        return;
    }

    private void incrementAnimation()
    {
        android.widget.SlidingDrawer $r0;
        float $f0, $f1, $f2, $f3, $f4;
        long $l0, $l1;

        $r0 := @this: android.widget.SlidingDrawer;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = $r0.<android.widget.SlidingDrawer: long mAnimationLastTime>;

        $l1 = $l0 - $l1;

        $f3 = (float) $l1;

        $f2 = $f3 / 1000.0F;

        $f1 = $r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $f3 = $r0.<android.widget.SlidingDrawer: float mAnimatedVelocity>;

        $f0 = $r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration>;

        $f4 = $f3 * $f2;

        $f1 = $f4 + $f1;

        $f4 = 0.5F * $f0;

        $f4 = $f4 * $f2;

        $f4 = $f4 * $f2;

        $f1 = $f1 + $f4;

        $r0.<android.widget.SlidingDrawer: float mAnimationPosition> = $f1;

        $f0 = $f0 * $f2;

        $f3 = $f0 + $f3;

        $r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = $f3;

        $r0.<android.widget.SlidingDrawer: long mAnimationLastTime> = $l0;

        return;
    }

    private void moveHandle(int)
    {
        android.widget.SlidingDrawer $r0;
        int $i0, $i1, $i2, $i3, $i4;
        android.view.View $r1;
        boolean $z0;
        android.graphics.Rect $r2, $r3;

        $r0 := @this: android.widget.SlidingDrawer;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label5;

        if $i0 != -10001 goto label1;

        $i0 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = virtualinvoke $r1.<android.view.View: int getTop()>();

        $i0 = $i0 - $i1;

        virtualinvoke $r1.<android.view.View: void offsetTopAndBottom(int)>($i0);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label1:
        if $i0 != -10002 goto label2;

        $i0 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i1 = $r0.<android.view.View: int mBottom>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<android.view.View: int mTop>;

        $i0 = $i0 - $i1;

        $i1 = $r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i0 = $i0 - $i1;

        $i1 = virtualinvoke $r1.<android.view.View: int getTop()>();

        $i0 = $i0 - $i1;

        virtualinvoke $r1.<android.view.View: void offsetTopAndBottom(int)>($i0);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label2:
        $i2 = virtualinvoke $r1.<android.view.View: int getTop()>();

        $i1 = $i0 - $i2;

        $i3 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        if $i0 >= $i3 goto label4;

        $i0 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i0 - $i2;

     label3:
        virtualinvoke $r1.<android.view.View: void offsetTopAndBottom(int)>($i1);

        $r2 = $r0.<android.widget.SlidingDrawer: android.graphics.Rect mFrame>;

        $r3 = $r0.<android.widget.SlidingDrawer: android.graphics.Rect mInvalidate>;

        virtualinvoke $r1.<android.view.View: void getHitRect(android.graphics.Rect)>($r2);

        virtualinvoke $r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        $i0 = $r2.<android.graphics.Rect: int left>;

        $i2 = $r2.<android.graphics.Rect: int top>;

        $i2 = $i2 - $i1;

        $i3 = $r2.<android.graphics.Rect: int right>;

        $i4 = $r2.<android.graphics.Rect: int bottom>;

        $i4 = $i4 - $i1;

        virtualinvoke $r3.<android.graphics.Rect: void union(int,int,int,int)>($i0, $i2, $i3, $i4);

        $i0 = $r2.<android.graphics.Rect: int bottom>;

        $i0 = $i0 - $i1;

        $i2 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i3 = $r2.<android.graphics.Rect: int bottom>;

        $i1 = $i3 - $i1;

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $i3 = virtualinvoke $r1.<android.view.View: int getHeight()>();

        $i1 = $i1 + $i3;

        virtualinvoke $r3.<android.graphics.Rect: void union(int,int,int,int)>(0, $i0, $i2, $i1);

        virtualinvoke $r0.<android.view.View: void invalidate(android.graphics.Rect)>($r3);

        return;

     label4:
        $i0 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i3 = $r0.<android.view.View: int mBottom>;

        $i0 = $i0 + $i3;

        $i3 = $r0.<android.view.View: int mTop>;

        $i0 = $i0 - $i3;

        $i3 = $r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i0 = $i0 - $i3;

        $i0 = $i0 - $i2;

        if $i1 <= $i0 goto label3;

        $i0 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i1 = $r0.<android.view.View: int mBottom>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<android.view.View: int mTop>;

        $i0 = $i0 - $i1;

        $i1 = $r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i0 = $i0 - $i1;

        $i1 = $i0 - $i2;

        goto label3;

     label5:
        if $i0 != -10001 goto label6;

        $i0 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = virtualinvoke $r1.<android.view.View: int getLeft()>();

        $i0 = $i0 - $i1;

        virtualinvoke $r1.<android.view.View: void offsetLeftAndRight(int)>($i0);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label6:
        if $i0 != -10002 goto label7;

        $i0 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i1 = $r0.<android.view.View: int mRight>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<android.view.View: int mLeft>;

        $i0 = $i0 - $i1;

        $i1 = $r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i0 = $i0 - $i1;

        $i1 = virtualinvoke $r1.<android.view.View: int getLeft()>();

        $i0 = $i0 - $i1;

        virtualinvoke $r1.<android.view.View: void offsetLeftAndRight(int)>($i0);

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        return;

     label7:
        $i2 = virtualinvoke $r1.<android.view.View: int getLeft()>();

        $i1 = $i0 - $i2;

        $i3 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        if $i0 >= $i3 goto label9;

        $i0 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i0 - $i2;

     label8:
        virtualinvoke $r1.<android.view.View: void offsetLeftAndRight(int)>($i1);

        $r2 = $r0.<android.widget.SlidingDrawer: android.graphics.Rect mFrame>;

        $r3 = $r0.<android.widget.SlidingDrawer: android.graphics.Rect mInvalidate>;

        virtualinvoke $r1.<android.view.View: void getHitRect(android.graphics.Rect)>($r2);

        virtualinvoke $r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        $i0 = $r2.<android.graphics.Rect: int left>;

        $i0 = $i0 - $i1;

        $i2 = $r2.<android.graphics.Rect: int top>;

        $i3 = $r2.<android.graphics.Rect: int right>;

        $i3 = $i3 - $i1;

        $i4 = $r2.<android.graphics.Rect: int bottom>;

        virtualinvoke $r3.<android.graphics.Rect: void union(int,int,int,int)>($i0, $i2, $i3, $i4);

        $i0 = $r2.<android.graphics.Rect: int right>;

        $i0 = $i0 - $i1;

        $i2 = $r2.<android.graphics.Rect: int right>;

        $i1 = $i2 - $i1;

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $i2 = virtualinvoke $r1.<android.view.View: int getWidth()>();

        $i1 = $i1 + $i2;

        $i2 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        virtualinvoke $r3.<android.graphics.Rect: void union(int,int,int,int)>($i0, 0, $i1, $i2);

        virtualinvoke $r0.<android.view.View: void invalidate(android.graphics.Rect)>($r3);

        return;

     label9:
        $i0 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i3 = $r0.<android.view.View: int mRight>;

        $i0 = $i0 + $i3;

        $i3 = $r0.<android.view.View: int mLeft>;

        $i0 = $i0 - $i3;

        $i3 = $r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i0 = $i0 - $i3;

        $i0 = $i0 - $i2;

        if $i1 <= $i0 goto label8;

        $i0 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i1 = $r0.<android.view.View: int mRight>;

        $i0 = $i0 + $i1;

        $i1 = $r0.<android.view.View: int mLeft>;

        $i0 = $i0 - $i1;

        $i1 = $r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i0 = $i0 - $i1;

        $i1 = $i0 - $i2;

        goto label8;
    }

    private void openDrawer()
    {
        android.widget.SlidingDrawer $r0;
        android.view.View $r1;
        boolean $z0;
        android.widget.SlidingDrawer$OnDrawerOpenListener $r2;

        $r0 := @this: android.widget.SlidingDrawer;

        specialinvoke $r0.<android.widget.SlidingDrawer: void moveHandle(int)>(-10001);

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(0);

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0.<android.widget.SlidingDrawer: boolean mExpanded> = 1;

        $r2 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerOpenListener mOnDrawerOpenListener>;

        if $r2 == null goto label2;

        $r2 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerOpenListener mOnDrawerOpenListener>;

        interfaceinvoke $r2.<android.widget.SlidingDrawer$OnDrawerOpenListener: void onDrawerOpened()>();

        return;

     label2:
        return;
    }

    private void performFling(int, float, boolean)
    {
        android.widget.SlidingDrawer $r0;
        int $i0, $i1, $i3;
        float $f0, $f1;
        boolean $z0, $z1;
        byte $b2;
        long $l4;
        android.os.Handler $r1, $r2;
        android.os.Message $r3;

        $r0 := @this: android.widget.SlidingDrawer;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $z0 := @parameter2: boolean;

        $f1 = (float) $i0;

        $r0.<android.widget.SlidingDrawer: float mAnimationPosition> = $f1;

        $r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = $f0;

        $z1 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z1 == 0 goto label06;

        if $z0 != 0 goto label02;

        $i1 = $r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $f1 = (float) $i1;

        $b2 = $f0 cmpl $f1;

        if $b2 > 0 goto label02;

        $i1 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label04;

        $i3 = $r0.<android.widget.SlidingDrawer: int mHandleHeight>;

     label01:
        $i1 = $i1 + $i3;

        if $i0 <= $i1 goto label05;

        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $i0 = neg $i0;

        $f1 = (float) $i0;

        $b2 = $f0 cmpl $f1;

        if $b2 <= 0 goto label05;

     label02:
        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $f1 = (float) $i0;

        $r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f1;

        $b2 = $f0 cmpg 0.0F;

        if $b2 >= 0 goto label03;

        $r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = 0.0F;

     label03:
        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r0.<android.widget.SlidingDrawer: long mAnimationLastTime> = $l4;

        $l4 = 16L + $l4;

        $r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime> = $l4;

        $r0.<android.widget.SlidingDrawer: boolean mAnimating> = 1;

        $r1 = $r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(1000);

        $r1 = $r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        $r2 = $r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(1000);

        $l4 = $r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime>;

        virtualinvoke $r1.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>($r3, $l4);

        specialinvoke $r0.<android.widget.SlidingDrawer: void stopTracking()>();

        return;

     label04:
        $i3 = $r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        goto label01;

     label05:
        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $i0 = neg $i0;

        $f1 = (float) $i0;

        $r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f1;

        $b2 = $f0 cmpl 0.0F;

        if $b2 <= 0 goto label03;

        $r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = 0.0F;

        goto label03;

     label06:
        if $z0 != 0 goto label10;

        $i1 = $r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $f1 = (float) $i1;

        $b2 = $f0 cmpl $f1;

        if $b2 > 0 goto label08;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label09;

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

     label07:
        $i1 = $i1 / 2;

        if $i0 <= $i1 goto label10;

        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $i0 = neg $i0;

        $f1 = (float) $i0;

        $b2 = $f0 cmpl $f1;

        if $b2 <= 0 goto label10;

     label08:
        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $f1 = (float) $i0;

        $r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f1;

        $b2 = $f0 cmpg 0.0F;

        if $b2 >= 0 goto label03;

        $r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = 0.0F;

        goto label03;

     label09:
        $i1 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        goto label07;

     label10:
        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $i0 = neg $i0;

        $f1 = (float) $i0;

        $r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f1;

        $b2 = $f0 cmpl 0.0F;

        if $b2 <= 0 goto label03;

        $r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = 0.0F;

        goto label03;
    }

    private void prepareContent()
    {
        android.widget.SlidingDrawer $r0;
        int $i0, $i1, $i2, $i3;
        android.view.View $r1, $r3;
        boolean $z0;
        android.view.ViewTreeObserver $r2;

        $r0 := @this: android.widget.SlidingDrawer;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $z0 = virtualinvoke $r1.<android.view.View: boolean isLayoutRequested()>();

        if $z0 == 0 goto label2;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label3;

        $i0 = $r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i1 = $r0.<android.view.View: int mBottom>;

        $i2 = $r0.<android.view.View: int mTop>;

        $i1 = $i1 - $i2;

        $i1 = $i1 - $i0;

        $i2 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i1 - $i2;

        $i2 = $r0.<android.view.View: int mRight>;

        $i3 = $r0.<android.view.View: int mLeft>;

        $i2 = $i2 - $i3;

        $i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i2, 1073741824);

        $i1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i1, 1073741824);

        virtualinvoke $r1.<android.view.View: void measure(int,int)>($i2, $i1);

        $i1 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i1 + $i0;

        $i2 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i3 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i0 = $i3 + $i0;

        $i3 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i0 = $i0 + $i3;

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>(0, $i1, $i2, $i0);

     label2:
        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        virtualinvoke $r2.<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>();

        virtualinvoke $r1.<android.view.View: void buildDrawingCache()>();

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(8);

        return;

     label3:
        $r3 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r3.<android.view.View: int getWidth()>();

        $i1 = $r0.<android.view.View: int mRight>;

        $i2 = $r0.<android.view.View: int mLeft>;

        $i1 = $i1 - $i2;

        $i1 = $i1 - $i0;

        $i2 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i1, 1073741824);

        $i2 = $r0.<android.view.View: int mBottom>;

        $i3 = $r0.<android.view.View: int mTop>;

        $i2 = $i2 - $i3;

        $i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i2, 1073741824);

        virtualinvoke $r1.<android.view.View: void measure(int,int)>($i1, $i2);

        $i1 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i1 + $i0;

        $i2 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i0 = $i2 + $i0;

        $i2 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i0 = $i0 + $i2;

        $i2 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>($i1, 0, $i0, $i2);

        goto label2;
    }

    private void prepareTracking(int)
    {
        android.widget.SlidingDrawer $r0;
        int $i0, $i1, $i2;
        android.view.VelocityTracker $r1;
        boolean $z0;
        float $f0;
        android.os.Handler $r2;
        long $l3;

        $r0 := @this: android.widget.SlidingDrawer;

        $i0 := @parameter0: int;

        $r0.<android.widget.SlidingDrawer: boolean mTracking> = 1;

        $r1 = staticinvoke <android.view.VelocityTracker: android.view.VelocityTracker obtain()>();

        $r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker> = $r1;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 != 0 goto label3;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label5;

        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumAcceleration>;

        $f0 = (float) $i0;

        $r0.<android.widget.SlidingDrawer: float mAnimatedAcceleration> = $f0;

        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumMajorVelocity>;

        $f0 = (float) $i0;

        $r0.<android.widget.SlidingDrawer: float mAnimatedVelocity> = $f0;

        $i0 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label4;

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $i2 = $r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i1 = $i1 - $i2;

     label2:
        $i0 = $i0 + $i1;

        $f0 = (float) $i0;

        $r0.<android.widget.SlidingDrawer: float mAnimationPosition> = $f0;

        $f0 = $r0.<android.widget.SlidingDrawer: float mAnimationPosition>;

        $i0 = (int) $f0;

        specialinvoke $r0.<android.widget.SlidingDrawer: void moveHandle(int)>($i0);

        $r0.<android.widget.SlidingDrawer: boolean mAnimating> = 1;

        $r2 = $r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(1000);

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r0.<android.widget.SlidingDrawer: long mAnimationLastTime> = $l3;

        $l3 = 16L + $l3;

        $r0.<android.widget.SlidingDrawer: long mCurrentAnimationTime> = $l3;

        $r0.<android.widget.SlidingDrawer: boolean mAnimating> = 1;

        return;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $i1 = virtualinvoke $r0.<android.view.View: int getWidth()>();

        $i2 = $r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i1 = $i1 - $i2;

        goto label2;

     label5:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z0 == 0 goto label6;

        $r0.<android.widget.SlidingDrawer: boolean mAnimating> = 0;

        $r2 = $r0.<android.widget.SlidingDrawer: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(1000);

     label6:
        specialinvoke $r0.<android.widget.SlidingDrawer: void moveHandle(int)>($i0);

        return;
    }

    private void stopTracking()
    {
        android.widget.SlidingDrawer $r0;
        android.view.View $r1;
        android.widget.SlidingDrawer$OnDrawerScrollListener $r2;
        android.view.VelocityTracker $r3;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        virtualinvoke $r1.<android.view.View: void setPressed(boolean)>(0);

        $r0.<android.widget.SlidingDrawer: boolean mTracking> = 0;

        $r2 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        interfaceinvoke $r2.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollEnded()>();

     label1:
        $r3 = $r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        if $r3 == null goto label2;

        $r3 = $r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r3.<android.view.VelocityTracker: void recycle()>();

        $r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker> = null;

        return;

     label2:
        return;
    }

    public void animateClose()
    {
        android.widget.SlidingDrawer $r0;
        android.widget.SlidingDrawer$OnDrawerScrollListener $r1;
        boolean $z0;
        android.view.View $r2;
        int $i0;

        $r0 := @this: android.widget.SlidingDrawer;

        specialinvoke $r0.<android.widget.SlidingDrawer: void prepareContent()>();

        $r1 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollStarted()>();

     label1:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label3;

        $r2 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r2.<android.view.View: int getTop()>();

     label2:
        specialinvoke $r0.<android.widget.SlidingDrawer: void animateClose(int)>($i0);

        if $r1 == null goto label4;

        interfaceinvoke $r1.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollEnded()>();

        return;

     label3:
        $r2 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r2.<android.view.View: int getLeft()>();

        goto label2;

     label4:
        return;
    }

    public void animateOpen()
    {
        android.widget.SlidingDrawer $r0;
        android.widget.SlidingDrawer$OnDrawerScrollListener $r1;
        boolean $z0;
        android.view.View $r2;
        int $i0;

        $r0 := @this: android.widget.SlidingDrawer;

        specialinvoke $r0.<android.widget.SlidingDrawer: void prepareContent()>();

        $r1 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        if $r1 == null goto label1;

        interfaceinvoke $r1.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollStarted()>();

     label1:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label3;

        $r2 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r2.<android.view.View: int getTop()>();

     label2:
        specialinvoke $r0.<android.widget.SlidingDrawer: void animateOpen(int)>($i0);

        if $r1 == null goto label4;

        interfaceinvoke $r1.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollEnded()>();

        return;

     label3:
        $r2 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r2.<android.view.View: int getLeft()>();

        goto label2;

     label4:
        return;
    }

    public void animateToggle()
    {
        android.widget.SlidingDrawer $r0;
        boolean $z0;

        $r0 := @this: android.widget.SlidingDrawer;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<android.widget.SlidingDrawer: void animateOpen()>();

        return;

     label1:
        virtualinvoke $r0.<android.widget.SlidingDrawer: void animateClose()>();

        return;
    }

    public void close()
    {
        android.widget.SlidingDrawer $r0;

        $r0 := @this: android.widget.SlidingDrawer;

        specialinvoke $r0.<android.widget.SlidingDrawer: void closeDrawer()>();

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        return;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.widget.SlidingDrawer $r0;
        android.graphics.Canvas $r1;
        android.view.View $r2, $r3;
        boolean $z0, $z1;
        long $l0;
        android.graphics.Bitmap $r4;
        int $i1, $i2;
        float $f0, $f1;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 := @parameter0: android.graphics.Canvas;

        $l0 = virtualinvoke $r0.<android.view.View: long getDrawingTime()>();

        $r2 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        virtualinvoke $r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>($r1, $r2, $l0);

        $z1 = $r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z1 != 0 goto label1;

        $z1 = $r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z1 == 0 goto label8;

     label1:
        $r3 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $r4 = virtualinvoke $r3.<android.view.View: android.graphics.Bitmap getDrawingCache()>();

        if $r4 == null goto label3;

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r2.<android.view.View: int getBottom()>();

        $f0 = (float) $i1;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r4, 0.0F, $f0, null);

        return;

     label2:
        $i1 = virtualinvoke $r2.<android.view.View: int getRight()>();

        $f0 = (float) $i1;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r4, $f0, 0.0F, null);

        return;

     label3:
        virtualinvoke $r1.<android.graphics.Canvas: int save()>();

        if $z0 == 0 goto label6;

        $f0 = 0.0F;

     label4:
        if $z0 == 0 goto label7;

        $i1 = virtualinvoke $r2.<android.view.View: int getTop()>();

        $i2 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i1 - $i2;

        $f1 = (float) $i1;

     label5:
        virtualinvoke $r1.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r2 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>($r1, $r2, $l0);

        virtualinvoke $r1.<android.graphics.Canvas: void restore()>();

        return;

     label6:
        $i1 = virtualinvoke $r2.<android.view.View: int getLeft()>();

        $i2 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i1 - $i2;

        $f0 = (float) $i1;

        goto label4;

     label7:
        $f1 = 0.0F;

        goto label5;

     label8:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 == 0 goto label9;

        $r2 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>($r1, $r2, $l0);

        return;

     label9:
        return;
    }

    public android.view.View getContent()
    {
        android.widget.SlidingDrawer $r0;
        android.view.View r1;

        $r0 := @this: android.widget.SlidingDrawer;

        r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        return r1;
    }

    public android.view.View getHandle()
    {
        android.widget.SlidingDrawer $r0;
        android.view.View r1;

        $r0 := @this: android.widget.SlidingDrawer;

        r1 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        return r1;
    }

    public boolean isMoving()
    {
        android.widget.SlidingDrawer $r0;
        boolean $z0;

        $r0 := @this: android.widget.SlidingDrawer;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z0 != 0 goto label1;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isOpened()
    {
        android.widget.SlidingDrawer $r0;
        boolean z0;

        $r0 := @this: android.widget.SlidingDrawer;

        z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        return z0;
    }

    public void lock()
    {
        android.widget.SlidingDrawer $r0;

        $r0 := @this: android.widget.SlidingDrawer;

        $r0.<android.widget.SlidingDrawer: boolean mLocked> = 1;

        return;
    }

    protected void onFinishInflate()
    {
        android.widget.SlidingDrawer $r0;
        int $i0;
        android.view.View $r1;
        java.lang.IllegalArgumentException $r2;
        android.widget.SlidingDrawer$DrawerToggler $r3;

        $r0 := @this: android.widget.SlidingDrawer;

        $i0 = $r0.<android.widget.SlidingDrawer: int mHandleId>;

        $r1 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>($i0);

        $r0.<android.widget.SlidingDrawer: android.view.View mHandle> = $r1;

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The handle attribute is must refer to an existing child.");

        throw $r2;

     label1:
        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $r3 = new android.widget.SlidingDrawer$DrawerToggler;

        specialinvoke $r3.<android.widget.SlidingDrawer$DrawerToggler: void <init>(android.widget.SlidingDrawer,android.widget.SlidingDrawer$1)>($r0, null);

        virtualinvoke $r1.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>($r3);

        $i0 = $r0.<android.widget.SlidingDrawer: int mContentId>;

        $r1 = virtualinvoke $r0.<android.view.View: android.view.View findViewById(int)>($i0);

        $r0.<android.widget.SlidingDrawer: android.view.View mContent> = $r1;

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content attribute is must refer to an existing child.");

        throw $r2;

     label2:
        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(8);

        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        android.widget.SlidingDrawer $r0;
        android.view.MotionEvent $r1;
        android.graphics.Rect $r2;
        android.view.View $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        float $f0, $f1;
        android.widget.SlidingDrawer$OnDrawerScrollListener $r4;
        android.view.VelocityTracker $r5;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mLocked>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

        $r2 = $r0.<android.widget.SlidingDrawer: android.graphics.Rect mFrame>;

        $r3 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        virtualinvoke $r3.<android.view.View: void getHitRect(android.graphics.Rect)>($r2);

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z0 != 0 goto label2;

        $i2 = (int) $f0;

        $i0 = (int) $f1;

        $z0 = virtualinvoke $r2.<android.graphics.Rect: boolean contains(int,int)>($i2, $i0);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        if $i1 != 0 goto label5;

        $r0.<android.widget.SlidingDrawer: boolean mTracking> = 1;

        virtualinvoke $r3.<android.view.View: void setPressed(boolean)>(1);

        specialinvoke $r0.<android.widget.SlidingDrawer: void prepareContent()>();

        $r4 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        if $r4 == null goto label3;

        $r4 = $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener>;

        interfaceinvoke $r4.<android.widget.SlidingDrawer$OnDrawerScrollListener: void onScrollStarted()>();

     label3:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label6;

        $r3 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r3.<android.view.View: int getTop()>();

        $i1 = (int) $f1;

        $i1 = $i1 - $i0;

        $r0.<android.widget.SlidingDrawer: int mTouchDelta> = $i1;

        specialinvoke $r0.<android.widget.SlidingDrawer: void prepareTracking(int)>($i0);

     label4:
        $r5 = $r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r5.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>($r1);

     label5:
        return 1;

     label6:
        $r3 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r3.<android.view.View: int getLeft()>();

        $i1 = (int) $f0;

        $i1 = $i1 - $i0;

        $r0.<android.widget.SlidingDrawer: int mTouchDelta> = $i1;

        specialinvoke $r0.<android.widget.SlidingDrawer: void prepareTracking(int)>($i0);

        goto label4;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.widget.SlidingDrawer $r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View $r1, $r2;

        $r0 := @this: android.widget.SlidingDrawer;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $i2 = $i2 - $i0;

        $i3 = $i3 - $i1;

        $r2 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i1 = virtualinvoke $r2.<android.view.View: int getMeasuredWidth()>();

        $i0 = virtualinvoke $r2.<android.view.View: int getMeasuredHeight()>();

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label5;

        $i2 = $i2 - $i1;

        $i2 = $i2 / 2;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 == 0 goto label4;

        $i3 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

     label2:
        $i4 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i4 = $i4 + $i0;

        $i5 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i6 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i6 = $i6 + $i0;

        $i7 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i6 = $i6 + $i7;

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>(0, $i4, $i5, $i6);

     label3:
        $i1 = $i2 + $i1;

        $i0 = $i3 + $i0;

        virtualinvoke $r2.<android.view.View: void layout(int,int,int,int)>($i2, $i3, $i1, $i0);

        $i0 = virtualinvoke $r2.<android.view.View: int getHeight()>();

        $r0.<android.widget.SlidingDrawer: int mHandleHeight> = $i0;

        $i0 = virtualinvoke $r2.<android.view.View: int getWidth()>();

        $r0.<android.widget.SlidingDrawer: int mHandleWidth> = $i0;

        return;

     label4:
        $i3 = $i3 - $i0;

        $i4 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i3 = $i3 + $i4;

        goto label2;

     label5:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 == 0 goto label7;

        $i2 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

     label6:
        $i3 = $i3 - $i0;

        $i3 = $i3 / 2;

        $i4 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i4 = $i4 + $i1;

        $i5 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i5 = $i5 + $i1;

        $i6 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i5 = $i5 + $i6;

        $i6 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke $r1.<android.view.View: void layout(int,int,int,int)>($i4, 0, $i5, $i6);

        goto label3;

     label7:
        $i2 = $i2 - $i1;

        $i4 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i2 = $i2 + $i4;

        goto label6;
    }

    protected void onMeasure(int, int)
    {
        android.widget.SlidingDrawer $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.View $r1;
        java.lang.RuntimeException $r2;
        boolean $z0;

        $r0 := @this: android.widget.SlidingDrawer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i0);

        $i3 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i0);

        $i4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>($i1);

        $i5 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i1);

        if $i2 == 0 goto label1;

        if $i4 != 0 goto label2;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("SlidingDrawer cannot have UNSPECIFIED dimensions");

        throw $r2;

     label2:
        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        virtualinvoke $r0.<android.view.ViewGroup: void measureChild(android.view.View,int,int)>($r1, $i0, $i1);

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i0 = $i5 - $i0;

        $i1 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i1 = $i0 - $i1;

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $i0 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i3, 1073741824);

        $i1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i1, 1073741824);

        virtualinvoke $r1.<android.view.View: void measure(int,int)>($i0, $i1);

     label3:
        virtualinvoke $r0.<android.view.View: void setMeasuredDimension(int,int)>($i3, $i5);

        return;

     label4:
        $i0 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i0 = $i3 - $i0;

        $i1 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i0 = $i0 - $i1;

        $r1 = $r0.<android.widget.SlidingDrawer: android.view.View mContent>;

        $i0 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i0, 1073741824);

        $i1 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i5, 1073741824);

        virtualinvoke $r1.<android.view.View: void measure(int,int)>($i0, $i1);

        goto label3;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.widget.SlidingDrawer $r0;
        android.view.MotionEvent $r1;
        android.view.VelocityTracker $r2;
        boolean $z0, $z1;
        double $d0, $d1;
        int $i0, $i1, $i3, $i4;
        float $f0, $f1, $f2, $f3;
        byte $b2;
        android.view.View $r3;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mLocked>;

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z0 == 0 goto label02;

        $r2 = $r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r2.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>($r1);

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        lookupswitch($i0)
        {
            case 1: goto label07;
            case 2: goto label04;
            case 3: goto label07;
            default: goto label02;
        };

     label02:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mTracking>;

        if $z0 != 0 goto label03;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mAnimating>;

        if $z0 != 0 goto label03;

        $z0 = specialinvoke $r0.<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>($r1);

        if $z0 == 0 goto label35;

     label03:
        return 1;

     label04:
        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label06;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getY()>();

     label05:
        $i0 = (int) $f0;

        $i1 = $r0.<android.widget.SlidingDrawer: int mTouchDelta>;

        $i0 = $i0 - $i1;

        specialinvoke $r0.<android.widget.SlidingDrawer: void moveHandle(int)>($i0);

        goto label02;

     label06:
        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getX()>();

        goto label05;

     label07:
        $r2 = $r0.<android.widget.SlidingDrawer: android.view.VelocityTracker mVelocityTracker>;

        $i0 = $r0.<android.widget.SlidingDrawer: int mVelocityUnits>;

        virtualinvoke $r2.<android.view.VelocityTracker: void computeCurrentVelocity(int)>($i0);

        $f1 = virtualinvoke $r2.<android.view.VelocityTracker: float getYVelocity()>();

        $f0 = $f1;

        $f2 = virtualinvoke $r2.<android.view.VelocityTracker: float getXVelocity()>();

        $f3 = $f2;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mVertical>;

        if $z0 == 0 goto label16;

        $b2 = $f1 cmpg 0.0F;

        if $b2 >= 0 goto label15;

        $z1 = 1;

     label08:
        $b2 = $f2 cmpg 0.0F;

        if $b2 >= 0 goto label09;

        $f3 = neg $f2;

     label09:
        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity>;

        $f1 = (float) $i0;

        $b2 = $f3 cmpl $f1;

        if $b2 <= 0 goto label10;

        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity>;

        $f3 = (float) $i0;

     label10:
        $d1 = (double) $f3;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double hypot(double,double)>($d1, $d0);

        $f0 = (float) $d0;

        if $z1 == 0 goto label11;

        $f0 = neg $f0;

     label11:
        $r3 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i0 = virtualinvoke $r3.<android.view.View: int getTop()>();

        $r3 = $r0.<android.widget.SlidingDrawer: android.view.View mHandle>;

        $i1 = virtualinvoke $r3.<android.view.View: int getLeft()>();

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        $i3 = $r0.<android.widget.SlidingDrawer: int mMaximumTapVelocity>;

        $f1 = (float) $i3;

        $b2 = $f3 cmpg $f1;

        if $b2 >= 0 goto label32;

        if $z0 == 0 goto label20;

        $z1 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z1 == 0 goto label12;

        $i3 = $r0.<android.widget.SlidingDrawer: int mTapThreshold>;

        $i4 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i3 = $i3 + $i4;

        if $i0 < $i3 goto label13;

     label12:
        $z1 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z1 != 0 goto label22;

        $i3 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i4 = $r0.<android.view.View: int mBottom>;

        $i3 = $i3 + $i4;

        $i4 = $r0.<android.view.View: int mTop>;

        $i3 = $i3 - $i4;

        $i4 = $r0.<android.widget.SlidingDrawer: int mHandleHeight>;

        $i3 = $i3 - $i4;

        $i4 = $r0.<android.widget.SlidingDrawer: int mTapThreshold>;

        $i3 = $i3 - $i4;

        if $i0 <= $i3 goto label22;

     label13:
        $z1 = $r0.<android.widget.SlidingDrawer: boolean mAllowSingleTap>;

        if $z1 == 0 goto label28;

        virtualinvoke $r0.<android.view.View: void playSoundEffect(int)>(0);

        $z1 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z1 == 0 goto label25;

        if $z0 == 0 goto label24;

     label14:
        specialinvoke $r0.<android.widget.SlidingDrawer: void animateClose(int)>($i0);

        goto label02;

     label15:
        $z1 = 0;

        goto label08;

     label16:
        $b2 = $f2 cmpg 0.0F;

        if $b2 >= 0 goto label19;

        $z1 = 1;

     label17:
        $b2 = $f1 cmpg 0.0F;

        if $b2 >= 0 goto label18;

        $f0 = neg $f1;

     label18:
        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity>;

        $f1 = (float) $i0;

        $b2 = $f0 cmpl $f1;

        if $b2 <= 0 goto label10;

        $i0 = $r0.<android.widget.SlidingDrawer: int mMaximumMinorVelocity>;

        $f0 = (float) $i0;

        goto label10;

     label19:
        $z1 = 0;

        goto label17;

     label20:
        $z1 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z1 == 0 goto label21;

        $i3 = $r0.<android.widget.SlidingDrawer: int mTapThreshold>;

        $i4 = $r0.<android.widget.SlidingDrawer: int mTopOffset>;

        $i3 = $i3 + $i4;

        if $i1 < $i3 goto label13;

     label21:
        $z1 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z1 != 0 goto label22;

        $i3 = $r0.<android.widget.SlidingDrawer: int mBottomOffset>;

        $i4 = $r0.<android.view.View: int mRight>;

        $i3 = $i3 + $i4;

        $i4 = $r0.<android.view.View: int mLeft>;

        $i3 = $i3 - $i4;

        $i4 = $r0.<android.widget.SlidingDrawer: int mHandleWidth>;

        $i3 = $i3 - $i4;

        $i4 = $r0.<android.widget.SlidingDrawer: int mTapThreshold>;

        $i3 = $i3 - $i4;

        if $i1 > $i3 goto label13;

     label22:
        if $z0 == 0 goto label31;

     label23:
        specialinvoke $r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>($i0, $f0, 0);

        goto label02;

     label24:
        $i0 = $i1;

        goto label14;

     label25:
        if $z0 == 0 goto label27;

     label26:
        specialinvoke $r0.<android.widget.SlidingDrawer: void animateOpen(int)>($i0);

        goto label02;

     label27:
        $i0 = $i1;

        goto label26;

     label28:
        if $z0 == 0 goto label30;

     label29:
        specialinvoke $r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>($i0, $f0, 0);

        goto label02;

     label30:
        $i0 = $i1;

        goto label29;

     label31:
        $i0 = $i1;

        goto label23;

     label32:
        if $z0 == 0 goto label34;

     label33:
        specialinvoke $r0.<android.widget.SlidingDrawer: void performFling(int,float,boolean)>($i0, $f0, 0);

        goto label02;

     label34:
        $i0 = $i1;

        goto label33;

     label35:
        return 0;
    }

    public void open()
    {
        android.widget.SlidingDrawer $r0;

        $r0 := @this: android.widget.SlidingDrawer;

        specialinvoke $r0.<android.widget.SlidingDrawer: void openDrawer()>();

        virtualinvoke $r0.<android.view.View: void invalidate()>();

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        return;
    }

    public void setOnDrawerCloseListener(android.widget.SlidingDrawer$OnDrawerCloseListener)
    {
        android.widget.SlidingDrawer $r0;
        android.widget.SlidingDrawer$OnDrawerCloseListener $r1;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 := @parameter0: android.widget.SlidingDrawer$OnDrawerCloseListener;

        $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerCloseListener mOnDrawerCloseListener> = $r1;

        return;
    }

    public void setOnDrawerOpenListener(android.widget.SlidingDrawer$OnDrawerOpenListener)
    {
        android.widget.SlidingDrawer $r0;
        android.widget.SlidingDrawer$OnDrawerOpenListener $r1;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 := @parameter0: android.widget.SlidingDrawer$OnDrawerOpenListener;

        $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerOpenListener mOnDrawerOpenListener> = $r1;

        return;
    }

    public void setOnDrawerScrollListener(android.widget.SlidingDrawer$OnDrawerScrollListener)
    {
        android.widget.SlidingDrawer $r0;
        android.widget.SlidingDrawer$OnDrawerScrollListener $r1;

        $r0 := @this: android.widget.SlidingDrawer;

        $r1 := @parameter0: android.widget.SlidingDrawer$OnDrawerScrollListener;

        $r0.<android.widget.SlidingDrawer: android.widget.SlidingDrawer$OnDrawerScrollListener mOnDrawerScrollListener> = $r1;

        return;
    }

    public void toggle()
    {
        android.widget.SlidingDrawer $r0;
        boolean $z0;

        $r0 := @this: android.widget.SlidingDrawer;

        $z0 = $r0.<android.widget.SlidingDrawer: boolean mExpanded>;

        if $z0 != 0 goto label2;

        specialinvoke $r0.<android.widget.SlidingDrawer: void openDrawer()>();

     label1:
        virtualinvoke $r0.<android.view.View: void invalidate()>();

        virtualinvoke $r0.<android.view.View: void requestLayout()>();

        return;

     label2:
        specialinvoke $r0.<android.widget.SlidingDrawer: void closeDrawer()>();

        goto label1;
    }

    public void unlock()
    {
        android.widget.SlidingDrawer $r0;

        $r0 := @this: android.widget.SlidingDrawer;

        $r0.<android.widget.SlidingDrawer: boolean mLocked> = 0;

        return;
    }

    public static void <clinit>()
    {
        <android.widget.SlidingDrawer: int VELOCITY_UNITS> = 1000;

        <android.widget.SlidingDrawer: int TAP_THRESHOLD> = 6;

        <android.widget.SlidingDrawer: int ORIENTATION_VERTICAL> = 1;

        <android.widget.SlidingDrawer: int ORIENTATION_HORIZONTAL> = 0;

        <android.widget.SlidingDrawer: int MSG_ANIMATE> = 1000;

        <android.widget.SlidingDrawer: float MAXIMUM_TAP_VELOCITY> = 100.0F;

        <android.widget.SlidingDrawer: float MAXIMUM_MINOR_VELOCITY> = 150.0F;

        <android.widget.SlidingDrawer: float MAXIMUM_MAJOR_VELOCITY> = 200.0F;

        <android.widget.SlidingDrawer: float MAXIMUM_ACCELERATION> = 2000.0F;

        <android.widget.SlidingDrawer: int EXPANDED_FULL_OPEN> = -10001;

        <android.widget.SlidingDrawer: int COLLAPSED_FULL_CLOSED> = -10002;

        <android.widget.SlidingDrawer: int ANIMATION_FRAME_DURATION> = 16;

        return;
    }
}
