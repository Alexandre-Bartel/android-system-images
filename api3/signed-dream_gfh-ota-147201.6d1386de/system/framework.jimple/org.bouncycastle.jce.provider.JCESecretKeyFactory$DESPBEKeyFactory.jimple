public class org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory extends org.bouncycastle.jce.provider.JCESecretKeyFactory
{
    private int digest;
    private boolean forCipher;
    private int ivSize;
    private int keySize;
    private int scheme;

    public void <init>(java.lang.String, org.bouncycastle.asn1.DERObjectIdentifier, boolean, int, int, int, int)
    {
        org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory $r0;
        java.lang.String $r1;
        org.bouncycastle.asn1.DERObjectIdentifier $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.bouncycastle.asn1.DERObjectIdentifier;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        specialinvoke $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: void <init>(java.lang.String,org.bouncycastle.asn1.DERObjectIdentifier)>($r1, $r2);

        $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: boolean forCipher> = $z0;

        $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme> = $i0;

        $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest> = $i1;

        $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize> = $i2;

        $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int ivSize> = $i3;

        return;
    }

    protected javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory $r0;
        java.security.spec.KeySpec $r1;
        boolean $z0;
        javax.crypto.spec.PBEKeySpec $r2;
        byte[] $r3;
        org.bouncycastle.jce.provider.JCEPBEKey $r4;
        java.lang.String $r5;
        org.bouncycastle.asn1.DERObjectIdentifier $r6;
        int $i0, $i1, $i2, $i3;
        org.bouncycastle.crypto.CipherParameters $r7, $r9;
        org.bouncycastle.crypto.params.ParametersWithIV $r8;
        org.bouncycastle.crypto.params.KeyParameter $r10;
        java.security.spec.InvalidKeySpecException $r11;

        $r0 := @this: org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory;

        $r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = $r1 instanceof javax.crypto.spec.PBEKeySpec;

        if $z0 == 0 goto label6;

        $r2 = (javax.crypto.spec.PBEKeySpec) $r1;

        $r3 = virtualinvoke $r2.<javax.crypto.spec.PBEKeySpec: byte[] getSalt()>();

        if $r3 != null goto label1;

        $r4 = new org.bouncycastle.jce.provider.JCEPBEKey;

        $r5 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: java.lang.String algName>;

        $r6 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: org.bouncycastle.asn1.DERObjectIdentifier algOid>;

        $i0 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme>;

        $i1 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest>;

        $i2 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize>;

        $i3 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int ivSize>;

        specialinvoke $r4.<org.bouncycastle.jce.provider.JCEPBEKey: void <init>(java.lang.String,org.bouncycastle.asn1.DERObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.CipherParameters)>($r5, $r6, $i0, $i1, $i2, $i3, $r2, null);

        return $r4;

     label1:
        $z0 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: boolean forCipher>;

        if $z0 == 0 goto label4;

        $i0 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme>;

        $i1 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest>;

        $i2 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize>;

        $i3 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int ivSize>;

        $r7 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEParameters(javax.crypto.spec.PBEKeySpec,int,int,int,int)>($r2, $i0, $i1, $i2, $i3);

     label2:
        $z0 = $r7 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z0 == 0 goto label5;

        $r8 = (org.bouncycastle.crypto.params.ParametersWithIV) $r7;

        $r9 = virtualinvoke $r8.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r10 = (org.bouncycastle.crypto.params.KeyParameter) $r9;

        $r3 = virtualinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.bouncycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r3);

     label3:
        $r4 = new org.bouncycastle.jce.provider.JCEPBEKey;

        $r5 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: java.lang.String algName>;

        $r6 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory: org.bouncycastle.asn1.DERObjectIdentifier algOid>;

        $i0 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme>;

        $i1 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest>;

        $i2 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize>;

        $i3 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int ivSize>;

        specialinvoke $r4.<org.bouncycastle.jce.provider.JCEPBEKey: void <init>(java.lang.String,org.bouncycastle.asn1.DERObjectIdentifier,int,int,int,int,javax.crypto.spec.PBEKeySpec,org.bouncycastle.crypto.CipherParameters)>($r5, $r6, $i0, $i1, $i2, $i3, $r2, $r7);

        return $r4;

     label4:
        $i0 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int scheme>;

        $i1 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int digest>;

        $i2 = $r0.<org.bouncycastle.jce.provider.JCESecretKeyFactory$DESPBEKeyFactory: int keySize>;

        $r7 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEMacParameters(javax.crypto.spec.PBEKeySpec,int,int,int)>($r2, $i0, $i1, $i2);

        goto label2;

     label5:
        $r10 = (org.bouncycastle.crypto.params.KeyParameter) $r7;

        $r3 = virtualinvoke $r10.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        staticinvoke <org.bouncycastle.crypto.params.DESParameters: void setOddParity(byte[])>($r3);

        goto label3;

     label6:
        $r11 = new java.security.spec.InvalidKeySpecException;

        specialinvoke $r11.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>("Invalid KeySpec");

        throw $r11;
    }
}
