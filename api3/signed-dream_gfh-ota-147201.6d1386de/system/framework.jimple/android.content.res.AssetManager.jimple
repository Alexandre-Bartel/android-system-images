public final class android.content.res.AssetManager extends java.lang.Object
{
    public static final int ACCESS_BUFFER;
    public static final int ACCESS_RANDOM;
    public static final int ACCESS_STREAMING;
    public static final int ACCESS_UNKNOWN;
    static final int STYLE_ASSET_COOKIE;
    static final int STYLE_CHANGING_CONFIGURATIONS;
    static final int STYLE_DATA;
    static final int STYLE_NUM_ENTRIES;
    static final int STYLE_RESOURCE_ID;
    static final int STYLE_TYPE;
    private static final java.lang.String TAG;
    private static final boolean localLOGV;
    private static final long[] mOffsets;
    private static final java.lang.Object mSync;
    private static android.content.res.AssetManager mSystem;
    private static final android.util.TypedValue mValue;
    private java.lang.String mAppName;
    private java.lang.String mAssetDir;
    private int mNumRefs;
    private int mObject;
    private boolean mOpen;
    private android.content.res.StringBlock[] mStringBlocks;

    static void <clinit>()
    {
        java.lang.Object $r0;
        android.util.TypedValue $r1;
        long[] $r2;

        <android.content.res.AssetManager: java.lang.String TAG> = "AssetManager";

        <android.content.res.AssetManager: int STYLE_TYPE> = 0;

        <android.content.res.AssetManager: int STYLE_RESOURCE_ID> = 3;

        <android.content.res.AssetManager: int STYLE_NUM_ENTRIES> = 5;

        <android.content.res.AssetManager: int STYLE_DATA> = 1;

        <android.content.res.AssetManager: int STYLE_CHANGING_CONFIGURATIONS> = 4;

        <android.content.res.AssetManager: int STYLE_ASSET_COOKIE> = 2;

        <android.content.res.AssetManager: int ACCESS_UNKNOWN> = 0;

        <android.content.res.AssetManager: int ACCESS_STREAMING> = 2;

        <android.content.res.AssetManager: int ACCESS_RANDOM> = 1;

        <android.content.res.AssetManager: int ACCESS_BUFFER> = 3;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.content.res.AssetManager: java.lang.Object mSync> = $r0;

        $r1 = new android.util.TypedValue;

        specialinvoke $r1.<android.util.TypedValue: void <init>()>();

        <android.content.res.AssetManager: android.util.TypedValue mValue> = $r1;

        $r2 = newarray (long)[2];

        <android.content.res.AssetManager: long[] mOffsets> = $r2;

        <android.content.res.AssetManager: android.content.res.AssetManager mSystem> = null;

        return;
    }

    public void <init>()
    {
        android.content.res.AssetManager $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.content.res.AssetManager;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks> = null;

        $r0.<android.content.res.AssetManager: int mNumRefs> = 1;

        $r0.<android.content.res.AssetManager: boolean mOpen> = 1;

        $r1 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        specialinvoke $r0.<android.content.res.AssetManager: void init()>();

        staticinvoke <android.content.res.AssetManager: void ensureSystemAssets()>();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void <init>(boolean)
    {
        android.content.res.AssetManager $r0;
        boolean $z0;

        $r0 := @this: android.content.res.AssetManager;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks> = null;

        $r0.<android.content.res.AssetManager: int mNumRefs> = 1;

        $r0.<android.content.res.AssetManager: boolean mOpen> = 1;

        specialinvoke $r0.<android.content.res.AssetManager: void init()>();

        return;
    }

    static long access$100(android.content.res.AssetManager, int)
    {
        android.content.res.AssetManager $r0;
        int $i0;
        long $l1;

        $r0 := @parameter0: android.content.res.AssetManager;

        $i0 := @parameter1: int;

        $l1 = specialinvoke $r0.<android.content.res.AssetManager: long getAssetLength(int)>($i0);

        return $l1;
    }

    static int access$200(android.content.res.AssetManager, int)
    {
        android.content.res.AssetManager $r0;
        int $i0;

        $r0 := @parameter0: android.content.res.AssetManager;

        $i0 := @parameter1: int;

        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int readAssetChar(int)>($i0);

        return $i0;
    }

    static long access$300(android.content.res.AssetManager, int)
    {
        android.content.res.AssetManager $r0;
        int $i0;
        long $l1;

        $r0 := @parameter0: android.content.res.AssetManager;

        $i0 := @parameter1: int;

        $l1 = specialinvoke $r0.<android.content.res.AssetManager: long getAssetRemainingLength(int)>($i0);

        return $l1;
    }

    static java.lang.Object access$400()
    {
        java.lang.Object r0;

        r0 = <android.content.res.AssetManager: java.lang.Object mSync>;

        return r0;
    }

    static void access$500(android.content.res.AssetManager, int)
    {
        android.content.res.AssetManager $r0;
        int $i0;

        $r0 := @parameter0: android.content.res.AssetManager;

        $i0 := @parameter1: int;

        specialinvoke $r0.<android.content.res.AssetManager: void destroyAsset(int)>($i0);

        return;
    }

    static void access$600(android.content.res.AssetManager)
    {
        android.content.res.AssetManager $r0;

        $r0 := @parameter0: android.content.res.AssetManager;

        specialinvoke $r0.<android.content.res.AssetManager: void decRefsLocked()>();

        return;
    }

    static long access$700(android.content.res.AssetManager, int, long, int)
    {
        android.content.res.AssetManager $r0;
        int $i0, $i2;
        long $l1;

        $r0 := @parameter0: android.content.res.AssetManager;

        $i0 := @parameter1: int;

        $l1 := @parameter2: long;

        $i2 := @parameter3: int;

        $l1 = specialinvoke $r0.<android.content.res.AssetManager: long seekAsset(int,long,int)>($i0, $l1, $i2);

        return $l1;
    }

    static int access$800(android.content.res.AssetManager, int, byte[], int, int)
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1, $i2;
        byte[] $r1;

        $r0 := @parameter0: android.content.res.AssetManager;

        $i0 := @parameter1: int;

        $r1 := @parameter2: byte[];

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int readAsset(int,byte[],int,int)>($i0, $r1, $i1, $i2);

        return $i0;
    }

    static final native boolean applyStyle(int, int, int, int, int[], int[], int[]);

    static final native void applyThemeStyle(int, int, boolean);

    static final native void copyTheme(int, int);

    private final void decRefsLocked()
    {
        android.content.res.AssetManager $r0;
        int $i0;

        $r0 := @this: android.content.res.AssetManager;

        $i0 = $r0.<android.content.res.AssetManager: int mNumRefs>;

        $i0 = $i0 - 1;

        $r0.<android.content.res.AssetManager: int mNumRefs> = $i0;

        $i0 = $r0.<android.content.res.AssetManager: int mNumRefs>;

        if $i0 != 0 goto label1;

        specialinvoke $r0.<android.content.res.AssetManager: void destroy()>();

        return;

     label1:
        return;
    }

    private final native void deleteTheme(int);

    private final native void destroy();

    private final native void destroyAsset(int);

    static final native void dumpTheme(int, int, java.lang.String, java.lang.String);

    private static void ensureSystemAssets()
    {
        android.content.res.AssetManager $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r1 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $r0 = <android.content.res.AssetManager: android.content.res.AssetManager mSystem>;

        if $r0 != null goto label2;

        $r0 = new android.content.res.AssetManager;

        specialinvoke $r0.<android.content.res.AssetManager: void <init>(boolean)>(1);

        specialinvoke $r0.<android.content.res.AssetManager: void makeStringBlocks(boolean)>(0);

        <android.content.res.AssetManager: android.content.res.AssetManager mSystem> = $r0;

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private final native int[] getArrayStringInfo(int);

    private final native java.lang.String[] getArrayStringResource(int);

    private final native long getAssetLength(int);

    private final native long getAssetRemainingLength(int);

    public static final native int getGlobalAssetCount();

    public static final native int getGlobalAssetManagerCount();

    private final native int getNativeStringBlock(int);

    private final native int getStringBlockCount();

    public static android.content.res.AssetManager getSystem()
    {
        android.content.res.AssetManager r0;

        staticinvoke <android.content.res.AssetManager: void ensureSystemAssets()>();

        r0 = <android.content.res.AssetManager: android.content.res.AssetManager mSystem>;

        return r0;
    }

    private final native void init();

    private final native int loadResourceBagValue(int, int, android.util.TypedValue, boolean);

    private final native int loadResourceValue(int, android.util.TypedValue, boolean);

    static final native int loadThemeAttributeValue(int, int, android.util.TypedValue, boolean);

    private final void makeStringBlocks(boolean)
    {
        android.content.res.AssetManager $r0, $r1;
        boolean $z0;
        android.content.res.StringBlock[] $r2, $r3;
        int $i0, $i1, $i2, $i3;
        android.content.res.StringBlock $r4;

        $r0 := @this: android.content.res.AssetManager;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label4;

        $r1 = <android.content.res.AssetManager: android.content.res.AssetManager mSystem>;

        $r2 = $r1.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $i0 = lengthof $r2;

     label1:
        $i1 = specialinvoke $r0.<android.content.res.AssetManager: int getStringBlockCount()>();

        $r2 = newarray (android.content.res.StringBlock)[$i1];

        $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks> = $r2;

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label6;

        if $i2 >= $i0 goto label5;

        $r2 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r1 = <android.content.res.AssetManager: android.content.res.AssetManager mSystem>;

        $r3 = $r1.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r4 = $r3[$i2];

        $r2[$i2] = $r4;

     label3:
        $i2 = $i2 + 1;

        goto label2;

     label4:
        $i0 = 0;

        goto label1;

     label5:
        $r2 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r4 = new android.content.res.StringBlock;

        $i3 = specialinvoke $r0.<android.content.res.AssetManager: int getNativeStringBlock(int)>($i2);

        specialinvoke $r4.<android.content.res.StringBlock: void <init>(int,boolean)>($i3, 1);

        $r2[$i2] = $r4;

        goto label3;

     label6:
        return;
    }

    private final native int newTheme();

    private final native int openAsset(java.lang.String, int);

    private final native android.os.ParcelFileDescriptor openAssetFd(java.lang.String, long[]) throws java.io.IOException;

    private native android.os.ParcelFileDescriptor openNonAssetFdNative(int, java.lang.String, long[]) throws java.io.IOException;

    private final native int openNonAssetNative(int, java.lang.String, int);

    private final native int openXmlAssetNative(int, java.lang.String);

    private final native int readAsset(int, byte[], int, int);

    private final native int readAssetChar(int);

    private final native long seekAsset(int, long, int);

    public final native int addAssetPath(java.lang.String);

    public void close()
    {
        android.content.res.AssetManager $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: android.content.res.AssetManager;

        $r1 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $z0 = $r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 == 0 goto label2;

        $r0.<android.content.res.AssetManager: boolean mOpen> = 0;

        specialinvoke $r0.<android.content.res.AssetManager: void decRefsLocked()>();

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    final int createTheme()
    {
        android.content.res.AssetManager $r0;
        java.lang.Object $r1;
        int $i0;
        boolean $z0;
        java.lang.RuntimeException $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.content.res.AssetManager;

        $r1 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        $z0 = $r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label4;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label3:
        throw $r3;

     label4:
        $i0 = $r0.<android.content.res.AssetManager: int mNumRefs>;

        $i0 = $i0 + 1;

        $r0.<android.content.res.AssetManager: int mNumRefs> = $i0;

        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int newTheme()>();

        exitmonitor $r1;

     label5:
        return $i0;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    final void ensureStringBlocks()
    {
        android.content.res.AssetManager $r0;
        android.content.res.StringBlock[] $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.content.res.AssetManager;

        $r1 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        if $r1 != null goto label6;

        $r2 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $r1 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        if $r1 != null goto label2;

        specialinvoke $r0.<android.content.res.AssetManager: void makeStringBlocks(boolean)>(1);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.content.res.AssetManager $r0;

        $r0 := @this: android.content.res.AssetManager;

        specialinvoke $r0.<android.content.res.AssetManager: void destroy()>();

        return;
    }

    final native int[] getArrayIntResource(int);

    final native int getArraySize(int);

    public final native java.lang.String getCookieName(int);

    public final native java.lang.String[] getLocales();

    final java.lang.CharSequence getPooledString(int, int)
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1;
        java.lang.CharSequence $r1;
        android.content.res.StringBlock[] $r2;
        android.content.res.StringBlock $r3;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r2 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $i0 = $i0 - 1;

        $r3 = $r2[$i0];

        $r1 = virtualinvoke $r3.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i1);

        return $r1;
    }

    final java.lang.CharSequence getResourceBagText(int, int)
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1;
        android.util.TypedValue $r1;
        java.lang.Object $r2;
        android.content.res.StringBlock[] $r3;
        android.content.res.StringBlock $r4;
        java.lang.CharSequence $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r2 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $r1 = <android.content.res.AssetManager: android.util.TypedValue mValue>;

        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int loadResourceBagValue(int,int,android.util.TypedValue,boolean)>($i0, $i1, $r1, 1);

        if $i0 < 0 goto label5;

        $i1 = $r1.<android.util.TypedValue: int type>;

        if $i1 != 3 goto label3;

        $r3 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r4 = $r3[$i0];

        $i0 = $r1.<android.util.TypedValue: int data>;

        $r5 = virtualinvoke $r4.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i0);

        exitmonitor $r2;

     label2:
        return $r5;

     label3:
        $r5 = virtualinvoke $r1.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        exitmonitor $r2;

     label4:
        return $r5;

     label5:
        exitmonitor $r2;

     label6:
        return null;

     label7:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    final native java.lang.String getResourceEntryName(int);

    final native int getResourceIdentifier(java.lang.String, java.lang.String, java.lang.String);

    final native java.lang.String getResourceName(int);

    final native java.lang.String getResourcePackageName(int);

    final java.lang.String[] getResourceStringArray(int)
    {
        android.content.res.AssetManager $r0;
        int $i0;
        java.lang.String[] $r1;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<android.content.res.AssetManager: java.lang.String[] getArrayStringResource(int)>($i0);

        return $r1;
    }

    final java.lang.CharSequence getResourceText(int)
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1;
        android.util.TypedValue $r1;
        java.lang.Object $r2;
        android.content.res.StringBlock[] $r3;
        android.content.res.StringBlock $r4;
        java.lang.CharSequence $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r2 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $r1 = <android.content.res.AssetManager: android.util.TypedValue mValue>;

        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int loadResourceValue(int,android.util.TypedValue,boolean)>($i0, $r1, 1);

        if $i0 < 0 goto label5;

        $i1 = $r1.<android.util.TypedValue: int type>;

        if $i1 != 3 goto label3;

        $r3 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r4 = $r3[$i0];

        $i0 = $r1.<android.util.TypedValue: int data>;

        $r5 = virtualinvoke $r4.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i0);

        exitmonitor $r2;

     label2:
        return $r5;

     label3:
        $r5 = virtualinvoke $r1.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        exitmonitor $r2;

     label4:
        return $r5;

     label5:
        exitmonitor $r2;

     label6:
        return null;

     label7:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    final java.lang.CharSequence[] getResourceTextArray(int)
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.CharSequence[] $r1;
        int[] $r2;
        android.content.res.StringBlock[] $r3;
        android.content.res.StringBlock $r4;
        java.lang.CharSequence $r5;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r2 = specialinvoke $r0.<android.content.res.AssetManager: int[] getArrayStringInfo(int)>($i0);

        $i0 = lengthof $r2;

        $i1 = $i0 / 2;

        $r1 = newarray (java.lang.CharSequence)[$i1];

        $i3 = 0;

        $i4 = 0;

     label1:
        if $i3 >= $i0 goto label4;

        $i1 = $r2[$i3];

        $i2 = $i3 + 1;

        $i2 = $r2[$i2];

        if $i2 < 0 goto label3;

        $r3 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r4 = $r3[$i1];

        $r5 = virtualinvoke $r4.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i2);

     label2:
        $r1[$i4] = $r5;

        $i3 = $i3 + 2;

        $i4 = $i4 + 1;

        goto label1;

     label3:
        $r5 = null;

        goto label2;

     label4:
        return $r1;
    }

    final native java.lang.String getResourceTypeName(int);

    final boolean getResourceValue(int, android.util.TypedValue, boolean)
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1;
        android.util.TypedValue $r1;
        boolean $z0;
        android.content.res.StringBlock[] $r2;
        android.content.res.StringBlock $r3;
        java.lang.CharSequence $r4;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.util.TypedValue;

        $z0 := @parameter2: boolean;

        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int loadResourceValue(int,android.util.TypedValue,boolean)>($i0, $r1, $z0);

        if $i0 < 0 goto label2;

        $i1 = $r1.<android.util.TypedValue: int type>;

        if $i1 == 3 goto label1;

        return 1;

     label1:
        $r2 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        $r3 = $r2[$i0];

        $i0 = $r1.<android.util.TypedValue: int data>;

        $r4 = virtualinvoke $r3.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i0);

        $r1.<android.util.TypedValue: java.lang.CharSequence string> = $r4;

        return 1;

     label2:
        return 0;
    }

    final boolean getThemeValue(int, int, android.util.TypedValue, boolean)
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1;
        android.util.TypedValue $r1;
        boolean $z0;
        android.content.res.StringBlock[] $r2;
        android.content.res.StringBlock $r3;
        java.lang.CharSequence $r4;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: android.util.TypedValue;

        $z0 := @parameter3: boolean;

        $i0 = staticinvoke <android.content.res.AssetManager: int loadThemeAttributeValue(int,int,android.util.TypedValue,boolean)>($i0, $i1, $r1, $z0);

        if $i0 < 0 goto label3;

        $i1 = $r1.<android.util.TypedValue: int type>;

        if $i1 == 3 goto label1;

        return 1;

     label1:
        $r2 = $r0.<android.content.res.AssetManager: android.content.res.StringBlock[] mStringBlocks>;

        if $r2 != null goto label2;

        virtualinvoke $r0.<android.content.res.AssetManager: void ensureStringBlocks()>();

     label2:
        $r3 = $r2[$i0];

        $i0 = $r1.<android.util.TypedValue: int data>;

        $r4 = virtualinvoke $r3.<android.content.res.StringBlock: java.lang.CharSequence get(int)>($i0);

        $r1.<android.util.TypedValue: java.lang.CharSequence string> = $r4;

        return 1;

     label3:
        return 0;
    }

    public final native boolean isUpToDate();

    public final native java.lang.String[] list(java.lang.String) throws java.io.IOException;

    public final java.io.InputStream open(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        java.lang.String $r1;
        java.io.InputStream $r2;

        $r0 := @this: android.content.res.AssetManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>($r1, 2);

        return $r2;
    }

    public final java.io.InputStream open(java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.Throwable $r4;
        android.content.res.AssetManager$AssetInputStream $r5;
        java.io.FileNotFoundException $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: android.content.res.AssetManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $z0 = $r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r4;

     label4:
        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int openAsset(java.lang.String,int)>($r1, $i0);

        if $i0 == 0 goto label6;

        $i1 = $r0.<android.content.res.AssetManager: int mNumRefs>;

        $i1 = $i1 + 1;

        $r0.<android.content.res.AssetManager: int mNumRefs> = $i1;

        $r5 = new android.content.res.AssetManager$AssetInputStream;

        specialinvoke $r5.<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,int,android.content.res.AssetManager$1)>($r0, $i0, null);

        exitmonitor $r2;

     label5:
        return $r5;

     label6:
        exitmonitor $r2;

     label7:
        $r6 = new java.io.FileNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset file: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r1);

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
    }

    public final android.content.res.AssetFileDescriptor openFd(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.Throwable $r4;
        long[] $r5;
        android.os.ParcelFileDescriptor $r6;
        android.content.res.AssetFileDescriptor $r7;
        long $l0, $l1;
        java.io.FileNotFoundException $r8;
        java.lang.StringBuilder $r9;

        $r0 := @this: android.content.res.AssetManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $z0 = $r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r4;

     label4:
        $r5 = <android.content.res.AssetManager: long[] mOffsets>;

        $r6 = specialinvoke $r0.<android.content.res.AssetManager: android.os.ParcelFileDescriptor openAssetFd(java.lang.String,long[])>($r1, $r5);

        if $r6 == null goto label6;

        $r7 = new android.content.res.AssetFileDescriptor;

        $r5 = <android.content.res.AssetManager: long[] mOffsets>;

        $l0 = $r5[0];

        $r5 = <android.content.res.AssetManager: long[] mOffsets>;

        $l1 = $r5[1];

        specialinvoke $r7.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>($r6, $l0, $l1);

        exitmonitor $r2;

     label5:
        return $r7;

     label6:
        exitmonitor $r2;

     label7:
        $r8 = new java.io.FileNotFoundException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset file: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r1);

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
    }

    public final java.io.InputStream openNonAsset(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        int $i0;
        java.lang.String $r1;
        java.io.InputStream $r2;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>($i0, $r1, 2);

        return $r2;
    }

    public final java.io.InputStream openNonAsset(int, java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.Throwable $r4;
        android.content.res.AssetManager$AssetInputStream $r5;
        java.io.FileNotFoundException $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $i1 := @parameter2: int;

        $r2 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $z0 = $r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r4;

     label4:
        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int openNonAssetNative(int,java.lang.String,int)>($i0, $r1, $i1);

        if $i0 == 0 goto label6;

        $i1 = $r0.<android.content.res.AssetManager: int mNumRefs>;

        $i1 = $i1 + 1;

        $r0.<android.content.res.AssetManager: int mNumRefs> = $i1;

        $r5 = new android.content.res.AssetManager$AssetInputStream;

        specialinvoke $r5.<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,int,android.content.res.AssetManager$1)>($r0, $i0, null);

        exitmonitor $r2;

     label5:
        return $r5;

     label6:
        exitmonitor $r2;

     label7:
        $r6 = new java.io.FileNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset absolute file: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r1);

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
    }

    public final java.io.InputStream openNonAsset(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        java.lang.String $r1;
        java.io.InputStream $r2;

        $r0 := @this: android.content.res.AssetManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(0, $r1, 2);

        return $r2;
    }

    public final java.io.InputStream openNonAsset(java.lang.String, int) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        java.lang.String $r1;
        int $i0;
        java.io.InputStream $r2;

        $r0 := @this: android.content.res.AssetManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r0.<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>(0, $r1, $i0);

        return $r2;
    }

    public final android.content.res.AssetFileDescriptor openNonAssetFd(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        int $i0;
        java.lang.String $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.Throwable $r4;
        long[] $r5;
        android.os.ParcelFileDescriptor $r6;
        android.content.res.AssetFileDescriptor $r7;
        long $l1, $l2;
        java.io.FileNotFoundException $r8;
        java.lang.StringBuilder $r9;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $z0 = $r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r4;

     label4:
        $r5 = <android.content.res.AssetManager: long[] mOffsets>;

        $r6 = specialinvoke $r0.<android.content.res.AssetManager: android.os.ParcelFileDescriptor openNonAssetFdNative(int,java.lang.String,long[])>($i0, $r1, $r5);

        if $r6 == null goto label6;

        $r7 = new android.content.res.AssetFileDescriptor;

        $r5 = <android.content.res.AssetManager: long[] mOffsets>;

        $l1 = $r5[0];

        $r5 = <android.content.res.AssetManager: long[] mOffsets>;

        $l2 = $r5[1];

        specialinvoke $r7.<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>($r6, $l1, $l2);

        exitmonitor $r2;

     label5:
        return $r7;

     label6:
        exitmonitor $r2;

     label7:
        $r8 = new java.io.FileNotFoundException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset absolute file: ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r1);

        throw $r8;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
    }

    public final android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        java.lang.String $r1;
        android.content.res.AssetFileDescriptor $r2;

        $r0 := @this: android.content.res.AssetManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>(0, $r1);

        return $r2;
    }

    final android.content.res.XmlBlock openXmlBlockAsset(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.lang.Object $r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.Throwable $r4;
        android.content.res.XmlBlock $r5;
        java.io.FileNotFoundException $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r2;

     label1:
        $z0 = $r0.<android.content.res.AssetManager: boolean mOpen>;

        if $z0 != 0 goto label4;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Assetmanager has been closed");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r4;

     label4:
        $i0 = specialinvoke $r0.<android.content.res.AssetManager: int openXmlAssetNative(int,java.lang.String)>($i0, $r1);

        if $i0 == 0 goto label6;

        $i1 = $r0.<android.content.res.AssetManager: int mNumRefs>;

        $i1 = $i1 + 1;

        $r0.<android.content.res.AssetManager: int mNumRefs> = $i1;

        $r5 = new android.content.res.XmlBlock;

        specialinvoke $r5.<android.content.res.XmlBlock: void <init>(android.content.res.AssetManager,int)>($r0, $i0);

        exitmonitor $r2;

     label5:
        return $r5;

     label6:
        exitmonitor $r2;

     label7:
        $r6 = new java.io.FileNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Asset XML file: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r1);

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
        catch java.lang.Throwable from label6 to label7 with label2;
    }

    final android.content.res.XmlBlock openXmlBlockAsset(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        java.lang.String $r1;
        android.content.res.XmlBlock $r2;

        $r0 := @this: android.content.res.AssetManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>(0, $r1);

        return $r2;
    }

    public final android.content.res.XmlResourceParser openXmlResourceParser(int, java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        int $i0;
        java.lang.String $r1;
        android.content.res.XmlBlock $r2;
        android.content.res.XmlResourceParser $r3;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>($i0, $r1);

        $r3 = virtualinvoke $r2.<android.content.res.XmlBlock: android.content.res.XmlResourceParser newParser()>();

        virtualinvoke $r2.<android.content.res.XmlBlock: void close()>();

        return $r3;
    }

    public final android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String) throws java.io.IOException
    {
        android.content.res.AssetManager $r0;
        java.lang.String $r1;
        android.content.res.XmlResourceParser $r2;

        $r0 := @this: android.content.res.AssetManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>(0, $r1);

        return $r2;
    }

    final void releaseTheme(int)
    {
        android.content.res.AssetManager $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.content.res.AssetManager;

        $i0 := @parameter0: int;

        $r1 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        specialinvoke $r0.<android.content.res.AssetManager: void deleteTheme(int)>($i0);

        specialinvoke $r0.<android.content.res.AssetManager: void decRefsLocked()>();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    final native int retrieveArray(int, int[]);

    final native boolean retrieveAttributes(int, int[], int[], int[]);

    public final native void setConfiguration(int, int, java.lang.String, int, int, int, int, int, int, int, int, int);

    public final native void setLocale(java.lang.String);

    void xmlBlockGone()
    {
        android.content.res.AssetManager $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.content.res.AssetManager;

        $r1 = <android.content.res.AssetManager: java.lang.Object mSync>;

        entermonitor $r1;

     label1:
        specialinvoke $r0.<android.content.res.AssetManager: void decRefsLocked()>();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
