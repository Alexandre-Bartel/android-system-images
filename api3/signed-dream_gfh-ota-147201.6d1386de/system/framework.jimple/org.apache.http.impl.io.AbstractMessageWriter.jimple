public abstract class org.apache.http.impl.io.AbstractMessageWriter extends java.lang.Object implements org.apache.http.io.HttpMessageWriter
{
    protected final org.apache.http.util.CharArrayBuffer lineBuf;
    protected final org.apache.http.message.LineFormatter lineFormatter;
    protected final org.apache.http.io.SessionOutputBuffer sessionBuffer;

    public void <init>(org.apache.http.io.SessionOutputBuffer, org.apache.http.message.LineFormatter, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractMessageWriter $r0;
        org.apache.http.io.SessionOutputBuffer $r1;
        org.apache.http.message.LineFormatter $r2;
        org.apache.http.params.HttpParams $r3;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.util.CharArrayBuffer $r5;

        $r0 := @this: org.apache.http.impl.io.AbstractMessageWriter;

        $r1 := @parameter0: org.apache.http.io.SessionOutputBuffer;

        $r2 := @parameter1: org.apache.http.message.LineFormatter;

        $r3 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r4;

     label1:
        $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.io.SessionOutputBuffer sessionBuffer> = $r1;

        $r5 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r5.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(128);

        $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.util.CharArrayBuffer lineBuf> = $r5;

        if $r2 == null goto label3;

     label2:
        $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.message.LineFormatter lineFormatter> = $r2;

        return;

     label3:
        $r2 = <org.apache.http.message.BasicLineFormatter: org.apache.http.message.BasicLineFormatter DEFAULT>;

        goto label2;
    }

    public void write(org.apache.http.HttpMessage) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.impl.io.AbstractMessageWriter $r0;
        org.apache.http.HttpMessage $r1;
        org.apache.http.util.CharArrayBuffer $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.HeaderIterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.http.Header $r6;
        org.apache.http.io.SessionOutputBuffer $r7;
        org.apache.http.message.LineFormatter $r8;

        $r0 := @this: org.apache.http.impl.io.AbstractMessageWriter;

        $r1 := @parameter0: org.apache.http.HttpMessage;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP message may not be null");

        throw $r3;

     label1:
        virtualinvoke $r0.<org.apache.http.impl.io.AbstractMessageWriter: void writeHeadLine(org.apache.http.HttpMessage)>($r1);

        $r4 = interfaceinvoke $r1.<org.apache.http.HttpMessage: org.apache.http.HeaderIterator headerIterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.http.Header) $r5;

        $r7 = $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.io.SessionOutputBuffer sessionBuffer>;

        $r8 = $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.message.LineFormatter lineFormatter>;

        $r2 = $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.util.CharArrayBuffer lineBuf>;

        $r2 = interfaceinvoke $r8.<org.apache.http.message.LineFormatter: org.apache.http.util.CharArrayBuffer formatHeader(org.apache.http.util.CharArrayBuffer,org.apache.http.Header)>($r2, $r6);

        interfaceinvoke $r7.<org.apache.http.io.SessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>($r2);

        goto label2;

     label3:
        $r2 = $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.util.CharArrayBuffer lineBuf>;

        virtualinvoke $r2.<org.apache.http.util.CharArrayBuffer: void clear()>();

        $r7 = $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.io.SessionOutputBuffer sessionBuffer>;

        $r2 = $r0.<org.apache.http.impl.io.AbstractMessageWriter: org.apache.http.util.CharArrayBuffer lineBuf>;

        interfaceinvoke $r7.<org.apache.http.io.SessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)>($r2);

        return;
    }

    protected abstract void writeHeadLine(org.apache.http.HttpMessage) throws java.io.IOException;
}
