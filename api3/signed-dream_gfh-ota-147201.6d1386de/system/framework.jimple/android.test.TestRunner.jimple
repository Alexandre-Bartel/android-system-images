public class android.test.TestRunner extends java.lang.Object implements android.test.PerformanceTestCase$Intermediates
{
    public static final int CLEARSCREEN;
    public static final int PERFORMANCE;
    public static final int PROFILING;
    public static final int REGRESSION;
    private static final java.lang.String TAG;
    private static java.lang.Class mJUnitClass;
    private static java.lang.Class mRunnableClass;
    private java.lang.String mClassName;
    private android.content.Context mContext;
    private long mEndTime;
    private int mFailed;
    java.util.List mIntermediates;
    private int mInternalIterations;
    private java.util.List mListeners;
    private int mMode;
    private int mPassed;
    private long mStartTime;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.ClassNotFoundException $r1;
        java.lang.RuntimeException $r2;

        <android.test.TestRunner: java.lang.String TAG> = "TestHarness";

        <android.test.TestRunner: int REGRESSION> = 0;

        <android.test.TestRunner: int PROFILING> = 2;

        <android.test.TestRunner: int PERFORMANCE> = 1;

        <android.test.TestRunner: int CLEARSCREEN> = 0;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("java.lang.Runnable", 0, null);

        <android.test.TestRunner: java.lang.Class mRunnableClass> = $r0;

        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("junit.framework.TestCase", 0, null);

     label2:
        <android.test.TestRunner: java.lang.Class mJUnitClass> = $r0;

        return;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("shouldn\'t happen", $r1);

        throw $r2;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public void <init>(android.content.Context)
    {
        android.test.TestRunner $r0;
        android.content.Context $r1;
        java.util.ArrayList $r2;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.test.TestRunner: int mMode> = 0;

        $r2 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r0.<android.test.TestRunner: java.util.List mListeners> = $r2;

        $r0.<android.test.TestRunner: java.util.List mIntermediates> = null;

        $r0.<android.test.TestRunner: android.content.Context mContext> = $r1;

        return;
    }

    static void access$000(android.test.TestRunner, java.lang.String)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;

        $r0 := @parameter0: android.test.TestRunner;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<android.test.TestRunner: void started(java.lang.String)>($r1);

        return;
    }

    static void access$100(android.test.TestRunner, java.lang.String)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;

        $r0 := @parameter0: android.test.TestRunner;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<android.test.TestRunner: void finished(java.lang.String)>($r1);

        return;
    }

    public static int countJunitTests(java.lang.Class)
    {
        java.lang.Class $r0;
        int $i0;
        java.lang.reflect.Method[] $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>($r0);

        $i0 = lengthof $r1;

        return $i0;
    }

    public static int countTests(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.ClassLoader $r2;
        java.lang.Class $r3, $r6;
        java.lang.reflect.Method $r4;
        java.lang.String[] $r5;
        boolean $z0;
        java.lang.ClassNotFoundException $r7;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

     label01:
        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r1);

        $r4 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>($r3);

        if $r4 == null goto label07;

        $r5 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>($r4);

     label02:
        $i1 = 0;

        $i0 = lengthof $r5;

        $i2 = 0;

     label03:
        if $i2 >= $i0 goto label06;

     label04:
        $r1 = $r5[$i2];

        $i3 = staticinvoke <android.test.TestRunner: int countTests(android.content.Context,java.lang.String)>($r0, $r1);

     label05:
        $i1 = $i1 + $i3;

        $i2 = $i2 + 1;

        goto label03;

     label06:
        return $i1;

     label07:
        $r6 = <android.test.TestRunner: java.lang.Class mRunnableClass>;

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

     label08:
        if $z0 == 0 goto label09;

        return 1;

     label09:
        $r6 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 == 0 goto label12;

        $i0 = staticinvoke <android.test.TestRunner: int countJunitTests(java.lang.Class)>($r3);

     label10:
        return $i0;

     label11:
        $r7 := @caughtexception;

        return 1;

     label12:
        return 0;

        catch java.lang.ClassNotFoundException from label01 to label02 with label11;
        catch java.lang.ClassNotFoundException from label04 to label05 with label11;
        catch java.lang.ClassNotFoundException from label07 to label08 with label11;
        catch java.lang.ClassNotFoundException from label09 to label10 with label11;
    }

    private void finished(java.lang.String)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        android.test.TestRunner$Listener $r4;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (android.test.TestRunner$Listener) $r3;

        interfaceinvoke $r4.<android.test.TestRunner$Listener: void finished(java.lang.String)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.reflect.Method[] $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.reflect.Method $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = 0;

        $i1 = lengthof $r2;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $r3 = $r2[$i2];

        $z0 = staticinvoke <android.test.TestRunner: boolean isTestMethod(java.lang.reflect.Method)>($r3);

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $i1 = 0;

        $r1 = newarray (java.lang.reflect.Method)[$i0];

        $i0 = lengthof $r2;

        $i2 = 0;

     label4:
        if $i2 >= $i0 goto label6;

        $r3 = $r2[$i2];

        $z0 = staticinvoke <android.test.TestRunner: boolean isTestMethod(java.lang.reflect.Method)>($r3);

        if $z0 == 0 goto label5;

        $r1[$i1] = $r3;

        $i1 = $i1 + 1;

     label5:
        $i2 = $i2 + 1;

        goto label4;

     label6:
        return $r1;
    }

    public static java.lang.String[] getChildren(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.lang.String[] $r2, $r4, $r7;
        boolean $z0, $z1;
        java.lang.reflect.Method $r3;
        java.lang.RuntimeException $r5;
        java.lang.StringBuilder $r6;
        int $i0, $i1;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $z0 = 1;

        $r3 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(android.content.Context,java.lang.String)>($r0, $r1);

        $r4 = staticinvoke <android.test.TestRunner: java.lang.String[] getTestChildren(android.content.Context,java.lang.String)>($r0, $r1);

        if $r3 != null goto label3;

        $z1 = 1;

     label1:
        if $r4 != null goto label4;

     label2:
        $z0 = $z1 & $z0;

        if $z0 == 0 goto label5;

        $r5 = new java.lang.RuntimeException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t get children method for ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label3:
        $z1 = 0;

        goto label1;

     label4:
        $z0 = 0;

        goto label2;

     label5:
        if $r3 == null goto label7;

        $r7 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>($r3);

        if $r4 == null goto label6;

        $i0 = lengthof $r4;

        $i1 = lengthof $r7;

        $i0 = $i0 + $i1;

        $r2 = newarray (java.lang.String)[$i0];

        $i0 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r2, 0, $i0);

        $i0 = lengthof $r7;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r2, $i0, $i1);

        return $r2;

     label6:
        return $r7;

     label7:
        if $r4 == null goto label8;

        return $r4;

     label8:
        return null;
    }

    public static java.lang.String[] getChildren(java.lang.reflect.Method)
    {
        java.lang.reflect.Method $r0;
        int $i0;
        boolean $z0;
        java.lang.RuntimeException $r1;
        java.lang.IllegalAccessException $r2;
        java.lang.String[] $r3;
        java.lang.Object $r4;
        java.lang.reflect.InvocationTargetException $r5;

        $r0 := @parameter0: java.lang.reflect.Method;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label5;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("children method is not static");

     label2:
        throw $r1;

     label3:
        $r2 := @caughtexception;

     label4:
        $r3 = newarray (java.lang.String)[0];

        return $r3;

     label5:
        $r4 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, null);

     label6:
        $r3 = (java.lang.String[]) $r4;

        $r3 = (java.lang.String[]) $r3;

        return $r3;

     label7:
        $r5 := @caughtexception;

        goto label4;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label7;
        catch java.lang.IllegalAccessException from label5 to label6 with label3;
        catch java.lang.reflect.InvocationTargetException from label5 to label6 with label7;
    }

    public static java.lang.reflect.Method getChildrenMethod(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.lang.ClassLoader $r2;
        java.lang.Class $r3;
        java.lang.reflect.Method $r4;
        java.lang.ClassNotFoundException $r5;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r1);

        $r4 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.reflect.Method getChildrenMethod(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.reflect.Method $r1;
        java.lang.NoSuchMethodException $r2;

        $r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("children", null);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static java.lang.String[] getTestChildren(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.lang.ClassLoader $r2;
        java.lang.Class $r3, $r4;
        boolean $z0;
        java.lang.String[] $r5;
        java.lang.ClassNotFoundException $r6;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke $r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r1);

        $r4 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 == 0 goto label4;

        $r5 = staticinvoke <android.test.TestRunner: java.lang.String[] getTestChildren(java.lang.Class)>($r3);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "No class found", $r6);

     label4:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static java.lang.String[] getTestChildren(java.lang.Class)
    {
        java.lang.Class $r0;
        int $i0, $i1, $i2;
        java.lang.reflect.Method $r1;
        java.lang.String[] $r2;
        java.lang.reflect.Method[] $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.lang.Class;

        $r3 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>($r0);

        $i0 = lengthof $r3;

        $r2 = newarray (java.lang.String)[$i0];

        $i1 = 0;

        $i0 = lengthof $r3;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $r1 = $r3[$i2];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("$");

        $r5 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2[$i1] = $r5;

        $i1 = $i1 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r2;
    }

    public static java.lang.String getTitle(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(36);

        if $i0 <= $i1 goto label2;

     label1:
        if $i0 < 0 goto label3;

        $i0 = $i0 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r0;

     label2:
        $i0 = $i1;

        goto label1;

     label3:
        return $r0;
    }

    private static boolean isTestMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Class $r2, $r3;
        java.lang.Class[] $r4;
        int $i0;

        $r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r3 = <java.lang.Void: java.lang.Class TYPE>;

        if $r2 != $r3 goto label1;

        $r4 = virtualinvoke $r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r4;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isTestSuite(android.content.Context, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1;
        java.lang.reflect.Method $r2;
        boolean $z0, $z1;
        java.lang.ClassLoader $r3;
        java.lang.Class $r4, $r5;
        int $i0;
        java.lang.ClassNotFoundException $r6;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(android.content.Context,java.lang.String)>($r0, $r1);

        if $r2 == null goto label3;

        $z0 = 1;

     label1:
        $r3 = virtualinvoke $r0.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r1);

        $r5 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z1 == 0 goto label5;

        $i0 = staticinvoke <android.test.TestRunner: int countJunitTests(java.lang.Class)>($r4);

     label2:
        if $i0 <= 0 goto label6;

        return 1;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $r6 := @caughtexception;

        return $z0;

     label5:
        return $z0;

     label6:
        return $z0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    private void missingTest(java.lang.String, java.lang.Throwable)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Throwable;

        specialinvoke $r0.<android.test.TestRunner: void started(java.lang.String)>($r1);

        specialinvoke $r0.<android.test.TestRunner: void finished(java.lang.String)>($r1);

        virtualinvoke $r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>($r1, $r2);

        return;
    }

    private void performance(java.lang.String, long, int, java.util.List)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        long $l0;
        int $i1, $i2, $i3;
        java.util.List $r2, $r3;
        java.lang.Object $r4;
        android.test.TestRunner$Listener $r5;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.util.List;

        $r3 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i3 = 0;

     label1:
        if $i3 >= $i2 goto label2;

        $r3 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r5 = (android.test.TestRunner$Listener) $r4;

        interfaceinvoke $r5.<android.test.TestRunner$Listener: void performance(java.lang.String,long,int,java.util.List)>($r1, $l0, $i1, $r2);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void started(java.lang.String)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        java.util.List $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        android.test.TestRunner$Listener $r4;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (android.test.TestRunner$Listener) $r3;

        interfaceinvoke $r4.<android.test.TestRunner$Listener: void started(java.lang.String)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void addIntermediate(java.lang.String)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        long $l0, $l1;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = $r0.<android.test.TestRunner: long mStartTime>;

        $l0 = $l0 - $l1;

        $l0 = $l0 * 1000000L;

        virtualinvoke $r0.<android.test.TestRunner: void addIntermediate(java.lang.String,long)>($r1, $l0);

        return;
    }

    public void addIntermediate(java.lang.String, long)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        long $l0;
        java.util.List $r2;
        android.test.TestRunner$IntermediateTime $r3;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = $r0.<android.test.TestRunner: java.util.List mIntermediates>;

        $r3 = new android.test.TestRunner$IntermediateTime;

        specialinvoke $r3.<android.test.TestRunner$IntermediateTime: void <init>(java.lang.String,long)>($r1, $l0);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    public void addListener(android.test.TestRunner$Listener)
    {
        android.test.TestRunner $r0;
        android.test.TestRunner$Listener $r1;
        java.util.List $r2;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: android.test.TestRunner$Listener;

        $r2 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void failed(java.lang.String, java.lang.Throwable)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        java.lang.Throwable $r2;
        int $i0, $i1;
        java.util.List $r3;
        java.lang.Object $r4;
        android.test.TestRunner$Listener $r5;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Throwable;

        $i0 = $r0.<android.test.TestRunner: int mFailed>;

        $i0 = $i0 + 1;

        $r0.<android.test.TestRunner: int mFailed> = $i0;

        $r3 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (android.test.TestRunner$Listener) $r4;

        interfaceinvoke $r5.<android.test.TestRunner$Listener: void failed(java.lang.String,java.lang.Throwable)>($r1, $r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int failedCount()
    {
        android.test.TestRunner $r0;
        int i0;

        $r0 := @this: android.test.TestRunner;

        i0 = $r0.<android.test.TestRunner: int mFailed>;

        return i0;
    }

    public void finishProfiling()
    {
        android.test.TestRunner $r0;

        $r0 := @this: android.test.TestRunner;

        staticinvoke <android.os.Debug: void stopMethodTracing()>();

        return;
    }

    public void finishTiming(boolean)
    {
        android.test.TestRunner $r0;
        boolean $z0;
        long $l0;

        $r0 := @this: android.test.TestRunner;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<android.test.TestRunner: long mEndTime> = $l0;

        return;

     label1:
        $l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        $r0.<android.test.TestRunner: long mEndTime> = $l0;

        return;
    }

    public boolean isJunitTest(java.lang.String)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        int $i0;
        android.content.Context $r2;
        java.lang.ClassLoader $r3;
        java.lang.Class $r4, $r5;
        boolean $z0;
        java.lang.ClassNotFoundException $r6;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(36);

        if $i0 < 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r2 = $r0.<android.test.TestRunner: android.content.Context mContext>;

     label2:
        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r1);

        $r5 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

     label3:
        if $z0 == 0 goto label5;

        return 1;

     label4:
        $r6 := @caughtexception;

     label5:
        return 0;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    public void passed(java.lang.String)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.util.List $r2;
        java.lang.Object $r3;
        android.test.TestRunner$Listener $r4;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $i0 = $r0.<android.test.TestRunner: int mPassed>;

        $i0 = $i0 + 1;

        $r0.<android.test.TestRunner: int mPassed> = $i0;

        $r2 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r0.<android.test.TestRunner: java.util.List mListeners>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (android.test.TestRunner$Listener) $r3;

        interfaceinvoke $r4.<android.test.TestRunner$Listener: void passed(java.lang.String)>($r1);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int passedCount()
    {
        android.test.TestRunner $r0;
        int i0;

        $r0 := @this: android.test.TestRunner;

        i0 = $r0.<android.test.TestRunner: int mPassed>;

        return i0;
    }

    public void run(java.lang.String)
    {
        android.test.TestRunner $r0;
        java.lang.String $r1, $r15, $r16;
        int $i0, $i1;
        java.lang.reflect.Method $r2;
        android.test.TestRunner$JunitTestSuite $r3;
        android.content.Context $r4;
        java.lang.ClassLoader $r5;
        java.lang.Class $r6, $r8;
        java.lang.String[] $r7;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.Runnable $r10;
        android.test.TestCase $r11;
        java.lang.Throwable $r12, $r19, $r26;
        java.lang.ClassNotFoundException $r13;
        java.lang.StringBuilder $r14;
        java.lang.InstantiationException $r17;
        java.io.PrintStream $r18;
        java.lang.IllegalAccessException $r20;
        java.lang.reflect.Method[] $r21;
        junit.framework.TestCase $r22;
        android.test.AndroidTestCase $r23;
        java.lang.Exception $r24;
        junit.framework.Test $r25;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String;

        $r0.<android.test.TestRunner: java.lang.String mClassName> = $r1;

        $r4 = $r0.<android.test.TestRunner: android.content.Context mContext>;

     label01:
        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r1);

        $r2 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method getChildrenMethod(java.lang.Class)>($r6);

        if $r2 == null goto label03;

        $r7 = staticinvoke <android.test.TestRunner: java.lang.String[] getChildren(java.lang.reflect.Method)>($r2);

        virtualinvoke $r0.<android.test.TestRunner: void run(java.lang.String[])>($r7);

     label02:
        return;

     label03:
        $r8 = <android.test.TestRunner: java.lang.Class mRunnableClass>;

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

        if $z0 == 0 goto label25;

        $r9 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

     label04:
        $r10 = (java.lang.Runnable) $r9;

        $r11 = null;

        $z0 = $r10 instanceof android.test.TestCase;

        if $z0 == 0 goto label05;

        $r11 = (android.test.TestCase) $r10;

     label05:
        $r12 = null;

     label06:
        $z0 = 0;

        specialinvoke $r0.<android.test.TestRunner: void started(java.lang.String)>($r1);

     label07:
        if $r11 == null goto label09;

     label08:
        $r4 = $r0.<android.test.TestRunner: android.content.Context mContext>;

        interfaceinvoke $r11.<android.test.TestCase: void setUp(android.content.Context)>($r4);

        $z0 = 1;

     label09:
        $i0 = $r0.<android.test.TestRunner: int mMode>;

        if $i0 != 1 goto label15;

        virtualinvoke $r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>($r10, $r1, 0, $r1);

     label10:
        if $r11 == null goto label12;

        if $z0 == 0 goto label12;

     label11:
        interfaceinvoke $r11.<android.test.TestCase: void tearDown()>();

     label12:
        specialinvoke $r0.<android.test.TestRunner: void finished(java.lang.String)>($r1);

        if $r12 != null goto label22;

        virtualinvoke $r0.<android.test.TestRunner: void passed(java.lang.String)>($r1);

     label13:
        return;

     label14:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassNotFoundException for ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r15, $r16);

        $z0 = virtualinvoke $r0.<android.test.TestRunner: boolean isJunitTest(java.lang.String)>($r1);

        if $z0 == 0 goto label56;

        virtualinvoke $r0.<android.test.TestRunner: void runSingleJunitTest(java.lang.String)>($r1);

        return;

     label15:
        $i0 = $r0.<android.test.TestRunner: int mMode>;

        if $i0 != 2 goto label18;

        virtualinvoke $r0.<android.test.TestRunner: void startProfiling()>();

        interfaceinvoke $r10.<java.lang.Runnable: void run()>();

        virtualinvoke $r0.<android.test.TestRunner: void finishProfiling()>();

     label16:
        goto label10;

     label17:
        $r12 := @caughtexception;

        goto label10;

     label18:
        interfaceinvoke $r10.<java.lang.Runnable: void run()>();

     label19:
        goto label10;

     label20:
        $r17 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("InstantiationException for ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r15);

        specialinvoke $r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>($r1, $r17);

        return;

     label21:
        $r19 := @caughtexception;

        $r12 = $r19;

        goto label12;

     label22:
        virtualinvoke $r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>($r1, $r12);

     label23:
        return;

     label24:
        $r20 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IllegalAccessException for ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r15);

        specialinvoke $r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>($r1, $r20);

        return;

     label25:
        $r8 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

     label26:
        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r6);

     label27:
        if $z0 == 0 goto label53;

        $r12 = null;

     label28:
        $r3 = new android.test.TestRunner$JunitTestSuite;

        specialinvoke $r3.<android.test.TestRunner$JunitTestSuite: void <init>(android.test.TestRunner)>($r0);

        $r21 = staticinvoke <android.test.TestRunner: java.lang.reflect.Method[] getAllTestMethods(java.lang.Class)>($r6);

     label29:
        $i0 = lengthof $r21;

        $i1 = 0;

     label30:
        if $i1 >= $i0 goto label37;

     label31:
        $r2 = $r21[$i1];

        $r9 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

        $r22 = (junit.framework.TestCase) $r9;

        $r15 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r22.<junit.framework.TestCase: void setName(java.lang.String)>($r15);

     label32:
        $z0 = $r22 instanceof android.test.AndroidTestCase;

        if $z0 == 0 goto label34;

        $r23 = (android.test.AndroidTestCase) $r22;

     label33:
        $r4 = $r0.<android.test.TestRunner: android.content.Context mContext>;

        virtualinvoke $r23.<android.test.AndroidTestCase: void setContext(android.content.Context)>($r4);

     label34:
        virtualinvoke $r3.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r22);

     label35:
        $i1 = $i1 + 1;

        goto label30;

     label36:
        $r24 := @caughtexception;

        $r15 = virtualinvoke $r24.<java.lang.Throwable: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("TestHarness", $r15);

        goto label34;

     label37:
        $i0 = $r0.<android.test.TestRunner: int mMode>;

     label38:
        if $i0 != 1 goto label48;

        $i0 = virtualinvoke $r3.<junit.framework.TestSuite: int testCount()>();

     label39:
        $i1 = 0;

     label40:
        if $i1 >= $i0 goto label57;

        $r25 = virtualinvoke $r3.<junit.framework.TestSuite: junit.framework.Test testAt(int)>($i1);

        $r15 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r0.<android.test.TestRunner: void started(java.lang.String)>($r15);

     label41:
        $r15 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>($r25, $r1, 1, $r15);

     label42:
        $r15 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        specialinvoke $r0.<android.test.TestRunner: void finished(java.lang.String)>($r15);

        if $r12 != null goto label46;

        $r15 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRunner: void passed(java.lang.String)>($r15);

     label43:
        $i1 = $i1 + 1;

        goto label40;

     label44:
        $r26 := @caughtexception;

        $r12 = $r26;

     label45:
        goto label42;

     label46:
        $r15 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRunner: void failed(java.lang.String,java.lang.Throwable)>($r15, $r12);

     label47:
        goto label43;

     label48:
        $i0 = $r0.<android.test.TestRunner: int mMode>;

     label49:
        if $i0 != 2 goto label51;

        virtualinvoke $r0.<android.test.TestRunner: void startProfiling()>();

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>($r3);

        virtualinvoke $r0.<android.test.TestRunner: void finishProfiling()>();

     label50:
        return;

     label51:
        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>($r3);

     label52:
        return;

     label53:
        $r18 = <java.lang.System: java.io.PrintStream out>;

     label54:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test wasn\'t Runnable and didn\'t have a children method: ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label55:
        return;

     label56:
        specialinvoke $r0.<android.test.TestRunner: void missingTest(java.lang.String,java.lang.Throwable)>($r1, $r13);

        return;

     label57:
        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label14;
        catch java.lang.ClassNotFoundException from label03 to label04 with label14;
        catch java.lang.ClassNotFoundException from label06 to label07 with label14;
        catch java.lang.InstantiationException from label01 to label02 with label20;
        catch java.lang.InstantiationException from label03 to label04 with label20;
        catch java.lang.InstantiationException from label06 to label07 with label20;
        catch java.lang.IllegalAccessException from label01 to label02 with label24;
        catch java.lang.IllegalAccessException from label03 to label04 with label24;
        catch java.lang.IllegalAccessException from label06 to label07 with label24;
        catch java.lang.Throwable from label08 to label10 with label17;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.ClassNotFoundException from label12 to label13 with label14;
        catch java.lang.InstantiationException from label12 to label13 with label20;
        catch java.lang.IllegalAccessException from label12 to label13 with label24;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.ClassNotFoundException from label22 to label23 with label14;
        catch java.lang.InstantiationException from label22 to label23 with label20;
        catch java.lang.IllegalAccessException from label22 to label23 with label24;
        catch java.lang.ClassNotFoundException from label26 to label27 with label14;
        catch java.lang.ClassNotFoundException from label28 to label29 with label14;
        catch java.lang.ClassNotFoundException from label31 to label32 with label14;
        catch java.lang.InstantiationException from label26 to label27 with label20;
        catch java.lang.InstantiationException from label28 to label29 with label20;
        catch java.lang.InstantiationException from label31 to label32 with label20;
        catch java.lang.IllegalAccessException from label26 to label27 with label24;
        catch java.lang.IllegalAccessException from label28 to label29 with label24;
        catch java.lang.IllegalAccessException from label31 to label32 with label24;
        catch java.lang.Exception from label33 to label34 with label36;
        catch java.lang.ClassNotFoundException from label34 to label35 with label14;
        catch java.lang.ClassNotFoundException from label36 to label37 with label14;
        catch java.lang.ClassNotFoundException from label38 to label39 with label14;
        catch java.lang.ClassNotFoundException from label40 to label41 with label14;
        catch java.lang.InstantiationException from label34 to label35 with label20;
        catch java.lang.InstantiationException from label36 to label37 with label20;
        catch java.lang.InstantiationException from label38 to label39 with label20;
        catch java.lang.InstantiationException from label40 to label41 with label20;
        catch java.lang.IllegalAccessException from label34 to label35 with label24;
        catch java.lang.IllegalAccessException from label36 to label37 with label24;
        catch java.lang.IllegalAccessException from label38 to label39 with label24;
        catch java.lang.IllegalAccessException from label40 to label41 with label24;
        catch java.lang.Throwable from label41 to label42 with label44;
        catch java.lang.ClassNotFoundException from label42 to label43 with label14;
        catch java.lang.ClassNotFoundException from label45 to label47 with label14;
        catch java.lang.ClassNotFoundException from label49 to label50 with label14;
        catch java.lang.ClassNotFoundException from label51 to label52 with label14;
        catch java.lang.ClassNotFoundException from label54 to label55 with label14;
        catch java.lang.InstantiationException from label42 to label43 with label20;
        catch java.lang.InstantiationException from label45 to label47 with label20;
        catch java.lang.InstantiationException from label49 to label50 with label20;
        catch java.lang.InstantiationException from label51 to label52 with label20;
        catch java.lang.InstantiationException from label54 to label55 with label20;
        catch java.lang.IllegalAccessException from label42 to label43 with label24;
        catch java.lang.IllegalAccessException from label45 to label47 with label24;
        catch java.lang.IllegalAccessException from label49 to label50 with label24;
        catch java.lang.IllegalAccessException from label51 to label52 with label24;
        catch java.lang.IllegalAccessException from label54 to label55 with label24;
    }

    public void run(java.lang.String[])
    {
        android.test.TestRunner $r0;
        java.lang.String[] $r1;
        java.lang.String $r2;
        int $i0, $i1;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.String[];

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r2 = $r1[$i1];

        virtualinvoke $r0.<android.test.TestRunner: void run(java.lang.String)>($r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void runInPerformanceMode(java.lang.Object, java.lang.String, boolean, java.lang.String) throws java.lang.Exception
    {
        android.test.TestRunner $r0;
        java.lang.Object $r1, $r7;
        boolean $z0, $z1, $z2;
        java.lang.String $r2, $r3;
        int $i0, $i1;
        android.content.Context $r4;
        java.lang.ClassLoader $r5;
        java.lang.Class $r6;
        android.test.PerformanceTestCase $r8, $r9;
        java.lang.Runtime $r10;
        java.util.ArrayList $r11;
        long $l2, $l3;
        junit.framework.Test $r12;
        java.lang.Runnable $r13;
        byte $b4;
        java.util.List $r14;

        $r0 := @this: android.test.TestRunner;

        $r1 := @parameter0: java.lang.Object;

        $r3 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $r2 := @parameter3: java.lang.String;

        $z1 = 1;

        $i0 = 1;

        $r0.<android.test.TestRunner: java.util.List mIntermediates> = null;

        $r0.<android.test.TestRunner: int mInternalIterations> = 1;

        $r4 = $r0.<android.test.TestRunner: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r6 = virtualinvoke $r5.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.Object newInstance()>();

        $r8 = null;

        $z2 = $r7 instanceof android.test.PerformanceTestCase;

        if $z2 == 0 goto label01;

        $r9 = (android.test.PerformanceTestCase) $r7;

        $r8 = $r9;

        $i1 = $r0.<android.test.TestRunner: int mMode>;

        if $i1 != 0 goto label01;

        $z2 = interfaceinvoke $r9.<android.test.PerformanceTestCase: boolean isPerformanceOnly()>();

        if $z2 == 0 goto label01;

        return;

     label01:
        $r10 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r10.<java.lang.Runtime: void runFinalization()>();

        $r10 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r10.<java.lang.Runtime: void gc()>();

        if $r8 == null goto label02;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        $r0.<android.test.TestRunner: java.util.List mIntermediates> = $r11;

        $i1 = interfaceinvoke $r8.<android.test.PerformanceTestCase: int startPerformance(android.test.PerformanceTestCase$Intermediates)>($r0);

        $i0 = $i1;

        if $i1 <= 0 goto label06;

        $z1 = 0;

     label02:
        staticinvoke <java.lang.Thread: void sleep(long)>(1000L);

     label03:
        $r0.<android.test.TestRunner: long mEndTime> = 0L;

        if $z1 == 0 goto label07;

        $l2 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        $r0.<android.test.TestRunner: long mStartTime> = $l2;

     label04:
        if $z0 == 0 goto label08;

        $i1 = 0;

     label05:
        if $i1 >= $i0 goto label10;

        $r12 = (junit.framework.Test) $r1;

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>($r12);

        $i1 = $i1 + 1;

        goto label05;

     label06:
        $i0 = 1;

        goto label02;

     label07:
        $r0.<android.test.TestRunner: long mStartTime> = 0L;

        goto label04;

     label08:
        $r13 = (java.lang.Runnable) $r1;

        $i1 = 0;

     label09:
        if $i1 >= $i0 goto label10;

        interfaceinvoke $r13.<java.lang.Runnable: void run()>();

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $l3 = $r0.<android.test.TestRunner: long mEndTime>;

        $l2 = $l3;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label11;

        $l2 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

     label11:
        $l3 = $r0.<android.test.TestRunner: long mStartTime>;

        $l2 = $l2 - $l3;

        if $z1 != 0 goto label13;

     label12:
        $b4 = $l2 cmp 0L;

        if $b4 == 0 goto label17;

        $i1 = $r0.<android.test.TestRunner: int mInternalIterations>;

        $i0 = $i0 * $i1;

        $l2 = 1000000L * $l2;

        $l3 = (long) $i0;

        $l2 = $l2 / $l3;

        $r14 = $r0.<android.test.TestRunner: java.util.List mIntermediates>;

        specialinvoke $r0.<android.test.TestRunner: void performance(java.lang.String,long,int,java.util.List)>($r2, $l2, $i0, $r14);

        return;

     label13:
        $b4 = $l2 cmp 1L;

        if $b4 > 0 goto label14;

        $i0 = $i0 * 1000;

        goto label03;

     label14:
        $b4 = $l2 cmp 10L;

        if $b4 > 0 goto label15;

        $i0 = $i0 * 100;

        goto label03;

     label15:
        $b4 = $l2 cmp 100L;

        if $b4 >= 0 goto label16;

        $i0 = $i0 * 10;

        goto label03;

     label16:
        $b4 = $l2 cmp 1000L;

        if $b4 >= 0 goto label12;

        $l2 = 1000L / $l2;

        $l2 = $l2 + 2L;

        $i1 = (int) $l2;

        $i0 = $i0 * $i1;

        goto label03;

     label17:
        return;
    }

    public void runSingleJunitTest(java.lang.String)
    {
        android.test.TestRunner $r0;
        android.test.TestRunner$JunitTestSuite $r1;
        java.lang.String $r2, $r3, $r4;
        int $i0;
        android.content.Context $r5;
        java.lang.ClassLoader $r6;
        java.lang.Class $r7, $r8;
        boolean $z0;
        java.lang.Object $r9;
        junit.framework.TestCase $r10;
        android.test.AndroidTestCase $r11;
        java.lang.Exception $r12;
        java.lang.ClassNotFoundException $r13;
        java.lang.Throwable $r14;
        java.lang.IllegalAccessException $r15;
        java.lang.InstantiationException $r16;

        $r0 := @this: android.test.TestRunner;

        $r3 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(36);

        $r4 = "";

        $r2 = $r3;

        if $i0 < 0 goto label01;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i0 = $i0 + 1;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i0);

     label01:
        $r5 = $r0.<android.test.TestRunner: android.content.Context mContext>;

     label02:
        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r7 = virtualinvoke $r6.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r3);

        $r8 = <android.test.TestRunner: java.lang.Class mJUnitClass>;

        $z0 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z0 == 0 goto label23;

        $r9 = virtualinvoke $r7.<java.lang.Class: java.lang.Object newInstance()>();

     label03:
        $r10 = (junit.framework.TestCase) $r9;

     label04:
        $r1 = new android.test.TestRunner$JunitTestSuite;

        specialinvoke $r1.<android.test.TestRunner$JunitTestSuite: void <init>(android.test.TestRunner)>($r0);

        virtualinvoke $r10.<junit.framework.TestCase: void setName(java.lang.String)>($r4);

     label05:
        $z0 = $r10 instanceof android.test.AndroidTestCase;

        if $z0 == 0 goto label07;

        $r11 = (android.test.AndroidTestCase) $r10;

     label06:
        $r5 = $r0.<android.test.TestRunner: android.content.Context mContext>;

        virtualinvoke $r11.<android.test.AndroidTestCase: void setContext(android.content.Context)>($r5);

     label07:
        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r10);

     label08:
        $i0 = $r0.<android.test.TestRunner: int mMode>;

        if $i0 != 1 goto label16;

     label09:
        $r2 = virtualinvoke $r10.<junit.framework.TestCase: java.lang.String toString()>();

        specialinvoke $r0.<android.test.TestRunner: void started(java.lang.String)>($r2);

        $r2 = virtualinvoke $r10.<junit.framework.TestCase: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRunner: void runInPerformanceMode(java.lang.Object,java.lang.String,boolean,java.lang.String)>($r10, $r3, 1, $r2);

        $r3 = virtualinvoke $r10.<junit.framework.TestCase: java.lang.String toString()>();

        specialinvoke $r0.<android.test.TestRunner: void finished(java.lang.String)>($r3);

        $r3 = virtualinvoke $r10.<junit.framework.TestCase: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.TestRunner: void passed(java.lang.String)>($r3);

     label10:
        return;

     label11:
        $r12 := @caughtexception;

     label12:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Exception encountered while trying to set the context.", $r12);

     label13:
        goto label07;

     label14:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "No test case to run", $r13);

        return;

     label15:
        $r14 := @caughtexception;

        return;

     label16:
        $i0 = $r0.<android.test.TestRunner: int mMode>;

        if $i0 != 2 goto label20;

     label17:
        virtualinvoke $r0.<android.test.TestRunner: void startProfiling()>();

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>($r1);

        virtualinvoke $r0.<android.test.TestRunner: void finishProfiling()>();

     label18:
        return;

     label19:
        $r15 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Illegal Access Exception", $r15);

        return;

     label20:
        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>($r1);

     label21:
        return;

     label22:
        $r16 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestHarness", "Instantiation Exception", $r16);

        return;

     label23:
        return;

        catch java.lang.ClassNotFoundException from label02 to label03 with label14;
        catch java.lang.ClassNotFoundException from label04 to label05 with label14;
        catch java.lang.IllegalAccessException from label02 to label03 with label19;
        catch java.lang.IllegalAccessException from label04 to label05 with label19;
        catch java.lang.InstantiationException from label02 to label03 with label22;
        catch java.lang.InstantiationException from label04 to label05 with label22;
        catch java.lang.Exception from label06 to label07 with label11;
        catch java.lang.ClassNotFoundException from label07 to label08 with label14;
        catch java.lang.IllegalAccessException from label07 to label08 with label19;
        catch java.lang.InstantiationException from label07 to label08 with label22;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.ClassNotFoundException from label12 to label13 with label14;
        catch java.lang.IllegalAccessException from label12 to label13 with label19;
        catch java.lang.InstantiationException from label12 to label13 with label22;
        catch java.lang.ClassNotFoundException from label17 to label18 with label14;
        catch java.lang.IllegalAccessException from label17 to label18 with label19;
        catch java.lang.InstantiationException from label17 to label18 with label22;
        catch java.lang.ClassNotFoundException from label20 to label21 with label14;
        catch java.lang.IllegalAccessException from label20 to label21 with label19;
        catch java.lang.InstantiationException from label20 to label21 with label22;
    }

    public void setInternalIterations(int)
    {
        android.test.TestRunner $r0;
        int $i0;

        $r0 := @this: android.test.TestRunner;

        $i0 := @parameter0: int;

        $r0.<android.test.TestRunner: int mInternalIterations> = $i0;

        return;
    }

    public void setPerformanceMode(int)
    {
        android.test.TestRunner $r0;
        int $i0;

        $r0 := @this: android.test.TestRunner;

        $i0 := @parameter0: int;

        $r0.<android.test.TestRunner: int mMode> = $i0;

        return;
    }

    public void startProfiling()
    {
        android.test.TestRunner $r0;
        java.io.File $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: android.test.TestRunner;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>("/tmp/trace");

        virtualinvoke $r1.<java.io.File: boolean mkdir()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/tmp/trace/");

        $r3 = $r0.<android.test.TestRunner: java.lang.String mClassName>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dmtrace");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String,int)>($r3, 8388608);

        return;
    }

    public void startTiming(boolean)
    {
        android.test.TestRunner $r0;
        boolean $z0;
        long $l0;

        $r0 := @this: android.test.TestRunner;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label1;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<android.test.TestRunner: long mStartTime> = $l0;

        return;

     label1:
        $l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMillis()>();

        $r0.<android.test.TestRunner: long mStartTime> = $l0;

        return;
    }
}
