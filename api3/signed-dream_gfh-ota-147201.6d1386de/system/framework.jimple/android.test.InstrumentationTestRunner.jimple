public class android.test.InstrumentationTestRunner extends android.app.Instrumentation implements android.test.TestSuiteProvider
{
    public static final java.lang.String ARGUMENT_DELAY_MSEC;
    public static final java.lang.String ARGUMENT_INCLUDE_PERF;
    private static final java.lang.String ARGUMENT_LOG_ONLY;
    public static final java.lang.String ARGUMENT_TEST_CLASS;
    public static final java.lang.String ARGUMENT_TEST_PACKAGE;
    public static final java.lang.String ARGUMENT_TEST_SIZE_PREDICATE;
    private static final java.lang.String DEFAULT_COVERAGE_FILE_PATH;
    private static final java.lang.String LARGE_SUITE;
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String MEDIUM_SUITE;
    private static final float MEDIUM_SUITE_MAX_RUNTIME;
    public static final java.lang.String REPORT_KEY_NAME_CLASS;
    public static final java.lang.String REPORT_KEY_NAME_TEST;
    public static final java.lang.String REPORT_KEY_NUM_CURRENT;
    public static final java.lang.String REPORT_KEY_NUM_TOTAL;
    private static final java.lang.String REPORT_KEY_RUN_TIME;
    public static final java.lang.String REPORT_KEY_STACK;
    private static final java.lang.String REPORT_KEY_SUITE_ASSIGNMENT;
    public static final java.lang.String REPORT_VALUE_ID;
    public static final int REPORT_VALUE_RESULT_ERROR;
    public static final int REPORT_VALUE_RESULT_FAILURE;
    public static final int REPORT_VALUE_RESULT_OK;
    public static final int REPORT_VALUE_RESULT_START;
    private static final java.lang.String SMALL_SUITE;
    private static final float SMALL_SUITE_MAX_RUNTIME;
    private boolean mCoverage;
    private java.lang.String mCoverageFilePath;
    private boolean mDebug;
    private int mDelayMsec;
    private boolean mJustCount;
    private java.lang.String mPackageOfTests;
    private final android.os.Bundle mResults;
    private boolean mSuiteAssignmentMode;
    private int mTestCount;
    private android.test.AndroidTestRunner mTestRunner;

    public void <init>()
    {
        android.test.InstrumentationTestRunner $r0;
        android.os.Bundle $r1;

        $r0 := @this: android.test.InstrumentationTestRunner;

        specialinvoke $r0.<android.app.Instrumentation: void <init>()>();

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults> = $r1;

        return;
    }

    static int access$000(android.test.InstrumentationTestRunner)
    {
        android.test.InstrumentationTestRunner $r0;
        int i0;

        $r0 := @parameter0: android.test.InstrumentationTestRunner;

        i0 = $r0.<android.test.InstrumentationTestRunner: int mDelayMsec>;

        return i0;
    }

    private void generateCoverageReport()
    {
        android.test.InstrumentationTestRunner $r0;
        java.io.File $r1;
        java.lang.String $r2;
        java.lang.Class $r3, $r5;
        java.lang.Class[] $r4;
        java.lang.reflect.Method $r6;
        java.lang.Object[] $r7;
        java.lang.Boolean $r8;
        java.lang.ClassNotFoundException $r9;
        java.lang.SecurityException $r10;
        java.lang.NoSuchMethodException $r11;
        java.lang.IllegalArgumentException $r12;
        java.lang.IllegalAccessException $r13;
        java.lang.reflect.InvocationTargetException $r14;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = new java.io.File;

        $r2 = specialinvoke $r0.<android.test.InstrumentationTestRunner: java.lang.String getCoverageFilePath()>();

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

     label01:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.vladium.emma.rt.RT");

        $r4 = newarray (java.lang.Class)[3];

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

     label02:
        $r4[0] = $r5;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r4[1] = $r5;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

     label03:
        $r4[2] = $r5;

        $r6 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("dumpCoverageData", $r4);

     label04:
        $r7 = newarray (java.lang.Object)[3];

     label05:
        $r7[0] = $r1;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r7[1] = $r8;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r7[2] = $r8;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r7);

     label06:
        return;

     label07:
        $r9 := @caughtexception;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.String,java.lang.Exception)>("Is emma jar on classpath?", $r9);

        return;

     label08:
        $r10 := @caughtexception;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>($r10);

        return;

     label09:
        $r11 := @caughtexception;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>($r11);

        return;

     label10:
        $r12 := @caughtexception;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>($r12);

        return;

     label11:
        $r13 := @caughtexception;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>($r13);

        return;

     label12:
        $r14 := @caughtexception;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.Exception)>($r14);

        return;

        catch java.lang.ClassNotFoundException from label01 to label02 with label07;
        catch java.lang.ClassNotFoundException from label03 to label04 with label07;
        catch java.lang.ClassNotFoundException from label05 to label06 with label07;
        catch java.lang.SecurityException from label01 to label02 with label08;
        catch java.lang.SecurityException from label03 to label04 with label08;
        catch java.lang.SecurityException from label05 to label06 with label08;
        catch java.lang.NoSuchMethodException from label01 to label02 with label09;
        catch java.lang.NoSuchMethodException from label03 to label04 with label09;
        catch java.lang.NoSuchMethodException from label05 to label06 with label09;
        catch java.lang.IllegalArgumentException from label01 to label02 with label10;
        catch java.lang.IllegalArgumentException from label03 to label04 with label10;
        catch java.lang.IllegalArgumentException from label05 to label06 with label10;
        catch java.lang.IllegalAccessException from label01 to label02 with label11;
        catch java.lang.IllegalAccessException from label03 to label04 with label11;
        catch java.lang.IllegalAccessException from label05 to label06 with label11;
        catch java.lang.reflect.InvocationTargetException from label01 to label02 with label12;
        catch java.lang.reflect.InvocationTargetException from label03 to label04 with label12;
        catch java.lang.reflect.InvocationTargetException from label05 to label06 with label12;
    }

    private boolean getBooleanArgument(android.os.Bundle, java.lang.String)
    {
        android.test.InstrumentationTestRunner $r0;
        android.os.Bundle $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 := @parameter0: android.os.Bundle;

        $r2 := @parameter1: java.lang.String;

        $r2 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>($r2);

        if $r2 == null goto label1;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private java.lang.String getCoverageFilePath()
    {
        android.test.InstrumentationTestRunner $r0;
        java.lang.String $r1;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = $r0.<android.test.InstrumentationTestRunner: java.lang.String mCoverageFilePath>;

        if $r1 != null goto label1;

        return "/sdcard/coverage.ec";

     label1:
        $r1 = $r0.<android.test.InstrumentationTestRunner: java.lang.String mCoverageFilePath>;

        return $r1;
    }

    private com.android.internal.util.Predicate getSizePredicateFromArg(java.lang.String)
    {
        android.test.InstrumentationTestRunner $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        com.android.internal.util.Predicate r3;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 = "small";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        r3 = <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate SELECT_SMALL>;

        return r3;

     label1:
        $r2 = "medium";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        r3 = <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate SELECT_MEDIUM>;

        return r3;

     label2:
        $r2 = "large";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        r3 = <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate SELECT_LARGE>;

        return r3;

     label3:
        return null;
    }

    private void parseTestClass(java.lang.String, android.test.suitebuilder.TestSuiteBuilder)
    {
        android.test.InstrumentationTestRunner $r0;
        android.test.suitebuilder.TestSuiteBuilder $r1;
        java.lang.String $r2, $r3;
        int $i0, $i1;
        android.content.Context $r4;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.test.suitebuilder.TestSuiteBuilder;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(35);

        $r3 = null;

        if $i0 <= 0 goto label1;

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r4 = virtualinvoke $r0.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        virtualinvoke $r1.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addTestClassByName(java.lang.String,java.lang.String,android.content.Context)>($r2, $r3, $r4);

        return;
    }

    private void parseTestClasses(java.lang.String, android.test.suitebuilder.TestSuiteBuilder)
    {
        android.test.InstrumentationTestRunner $r0;
        java.lang.String $r1;
        android.test.suitebuilder.TestSuiteBuilder $r2;
        int $i0, $i1;
        java.lang.String[] $r3;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.test.suitebuilder.TestSuiteBuilder;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r1 = $r3[$i1];

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void parseTestClass(java.lang.String,android.test.suitebuilder.TestSuiteBuilder)>($r1, $r2);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void reportEmmaError(java.lang.Exception)
    {
        android.test.InstrumentationTestRunner $r0;
        java.lang.Exception $r1;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 := @parameter0: java.lang.Exception;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void reportEmmaError(java.lang.String,java.lang.Exception)>("", $r1);

        return;
    }

    private void reportEmmaError(java.lang.String, java.lang.Exception)
    {
        android.test.InstrumentationTestRunner $r0;
        java.lang.String $r1;
        java.lang.Exception $r2;
        java.lang.StringBuilder $r3;
        android.os.Bundle $r4;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Exception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to generate emma coverage. ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InstrumentationTestRunner", $r1, $r2);

        $r4 = $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nError: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r1);

        return;
    }

    public junit.framework.TestSuite getAllTests()
    {
        android.test.InstrumentationTestRunner $r0;

        $r0 := @this: android.test.InstrumentationTestRunner;

        return null;
    }

    protected android.test.AndroidTestRunner getAndroidTestRunner()
    {
        android.test.InstrumentationTestRunner $r0;
        android.test.AndroidTestRunner $r1;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = new android.test.AndroidTestRunner;

        specialinvoke $r1.<android.test.AndroidTestRunner: void <init>()>();

        return $r1;
    }

    java.util.List getBuilderRequirements()
    {
        android.test.InstrumentationTestRunner $r0;
        java.util.ArrayList $r1;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        return $r1;
    }

    public java.lang.ClassLoader getLoader()
    {
        android.test.InstrumentationTestRunner $r0;

        $r0 := @this: android.test.InstrumentationTestRunner;

        return null;
    }

    public junit.framework.TestSuite getTestSuite()
    {
        android.test.InstrumentationTestRunner $r0;
        junit.framework.TestSuite $r1;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 = virtualinvoke $r0.<android.test.InstrumentationTestRunner: junit.framework.TestSuite getAllTests()>();

        return $r1;
    }

    public void onCreate(android.os.Bundle)
    {
        android.test.InstrumentationTestRunner $r0;
        android.os.Bundle $r1;
        java.lang.String[] $r2;
        android.test.suitebuilder.TestSuiteBuilder $r3;
        android.content.Context $r4;
        java.lang.String $r5, $r7;
        com.android.internal.util.Predicate $r6;
        boolean $z0, $z1, $z2;
        java.lang.Object $r8;
        int $i0;
        java.lang.Class $r9;
        java.lang.ClassLoader $r10;
        com.android.internal.util.Predicate[] $r11;
        java.util.List $r12;
        android.test.AndroidTestRunner $r13;
        junit.framework.TestSuite $r14;
        android.test.InstrumentationTestRunner$SuiteAssignmentPrinter $r15;
        java.lang.NumberFormatException $r16;
        android.test.TestPrinter $r17;
        android.test.InstrumentationTestRunner$WatcherResultPrinter $r18;

        $r0 := @this: android.test.InstrumentationTestRunner;

        $r1 := @parameter0: android.os.Bundle;

        specialinvoke $r0.<android.app.Instrumentation: void onCreate(android.os.Bundle)>($r1);

        $r2 = newarray (java.lang.String)[2];

        $r4 = virtualinvoke $r0.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageCodePath()>();

        $r2[0] = $r5;

        $r4 = virtualinvoke $r0.<android.app.Instrumentation: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.String getPackageCodePath()>();

        $r2[1] = $r5;

        staticinvoke <android.test.ClassPathPackageInfoSource: void setApkPaths(java.lang.String[])>($r2);

        $r6 = null;

        $z0 = 0;

        $r5 = null;

        $z1 = 0;

        if $r1 == null goto label03;

        $r5 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("class");

        $z0 = specialinvoke $r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>($r1, "debug");

        $r0.<android.test.InstrumentationTestRunner: boolean mDebug> = $z0;

        $z0 = specialinvoke $r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>($r1, "count");

        $r0.<android.test.InstrumentationTestRunner: boolean mJustCount> = $z0;

        $z0 = specialinvoke $r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>($r1, "suiteAssignment");

        $r0.<android.test.InstrumentationTestRunner: boolean mSuiteAssignmentMode> = $z0;

        $r7 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("package");

        $r0.<android.test.InstrumentationTestRunner: java.lang.String mPackageOfTests> = $r7;

        $r7 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("size");

        $r6 = specialinvoke $r0.<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getSizePredicateFromArg(java.lang.String)>($r7);

        $z0 = specialinvoke $r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>($r1, "perf");

        $z1 = specialinvoke $r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>($r1, "log");

        $z2 = specialinvoke $r0.<android.test.InstrumentationTestRunner: boolean getBooleanArgument(android.os.Bundle,java.lang.String)>($r1, "coverage");

        $r0.<android.test.InstrumentationTestRunner: boolean mCoverage> = $z2;

        $r7 = virtualinvoke $r1.<android.os.Bundle: java.lang.String getString(java.lang.String)>("coverageFile");

        $r0.<android.test.InstrumentationTestRunner: java.lang.String mCoverageFilePath> = $r7;

     label01:
        $r8 = virtualinvoke $r1.<android.os.Bundle: java.lang.Object get(java.lang.String)>("delay_msec");

        if $r8 == null goto label03;

        $r7 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label02:
        $r0.<android.test.InstrumentationTestRunner: int mDelayMsec> = $i0;

     label03:
        $r3 = new android.test.suitebuilder.TestSuiteBuilder;

        $r9 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        $r10 = virtualinvoke $r4.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r3.<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.String,java.lang.ClassLoader)>($r7, $r10);

        if $r6 == null goto label04;

        $r11 = newarray (com.android.internal.util.Predicate)[1];

        $r11[0] = $r6;

        virtualinvoke $r3.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r11);

     label04:
        if $z0 != 0 goto label05;

        $r11 = newarray (com.android.internal.util.Predicate)[1];

        $r6 = <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate REJECT_PERFORMANCE>;

        $r11[0] = $r6;

        virtualinvoke $r3.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r11);

     label05:
        if $r5 != null goto label11;

        $r5 = $r0.<android.test.InstrumentationTestRunner: java.lang.String mPackageOfTests>;

        if $r5 == null goto label09;

        $r2 = newarray (java.lang.String)[1];

        $r5 = $r0.<android.test.InstrumentationTestRunner: java.lang.String mPackageOfTests>;

        $r2[0] = $r5;

        virtualinvoke $r3.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])>($r2);

     label06:
        $r12 = virtualinvoke $r0.<android.test.InstrumentationTestRunner: java.util.List getBuilderRequirements()>();

        virtualinvoke $r3.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List)>($r12);

        $r13 = virtualinvoke $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner getAndroidTestRunner()>();

        $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner> = $r13;

        $r13 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r4 = virtualinvoke $r0.<android.app.Instrumentation: android.content.Context getTargetContext()>();

        virtualinvoke $r13.<android.test.AndroidTestRunner: void setContext(android.content.Context)>($r4);

        $r13 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r13.<android.test.AndroidTestRunner: void setInstrumentaiton(android.app.Instrumentation)>($r0);

        $r13 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r13.<android.test.AndroidTestRunner: void setSkipExecution(boolean)>($z1);

        $r13 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r14 = virtualinvoke $r3.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite build()>();

        virtualinvoke $r13.<android.test.AndroidTestRunner: void setTest(junit.framework.Test)>($r14);

        $r13 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r12 = virtualinvoke $r13.<android.test.AndroidTestRunner: java.util.List getTestCases()>();

        $i0 = interfaceinvoke $r12.<java.util.List: int size()>();

        $r0.<android.test.InstrumentationTestRunner: int mTestCount> = $i0;

        $z0 = $r0.<android.test.InstrumentationTestRunner: boolean mSuiteAssignmentMode>;

        if $z0 == 0 goto label12;

        $r13 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r15 = new android.test.InstrumentationTestRunner$SuiteAssignmentPrinter;

        specialinvoke $r15.<android.test.InstrumentationTestRunner$SuiteAssignmentPrinter: void <init>(android.test.InstrumentationTestRunner)>($r0);

        virtualinvoke $r13.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r15);

     label07:
        virtualinvoke $r0.<android.app.Instrumentation: void start()>();

        return;

     label08:
        $r16 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("InstrumentationTestRunner", "Invalid delay_msec parameter", $r16);

        goto label03;

     label09:
        $r14 = virtualinvoke $r0.<android.test.InstrumentationTestRunner: junit.framework.TestSuite getTestSuite()>();

        if $r14 == null goto label10;

        virtualinvoke $r3.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addTestSuite(junit.framework.TestSuite)>($r14);

        goto label06;

     label10:
        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "";

        virtualinvoke $r3.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])>($r2);

        goto label06;

     label11:
        specialinvoke $r0.<android.test.InstrumentationTestRunner: void parseTestClasses(java.lang.String,android.test.suitebuilder.TestSuiteBuilder)>($r5, $r3);

        goto label06;

     label12:
        $r13 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r17 = new android.test.TestPrinter;

        specialinvoke $r17.<android.test.TestPrinter: void <init>(java.lang.String,boolean)>("TestRunner", 0);

        virtualinvoke $r13.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r17);

        $r13 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r18 = new android.test.InstrumentationTestRunner$WatcherResultPrinter;

        $i0 = $r0.<android.test.InstrumentationTestRunner: int mTestCount>;

        specialinvoke $r18.<android.test.InstrumentationTestRunner$WatcherResultPrinter: void <init>(android.test.InstrumentationTestRunner,int)>($r0, $i0);

        virtualinvoke $r13.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r18);

        goto label07;

        catch java.lang.NumberFormatException from label01 to label02 with label08;
    }

    public void onStart()
    {
        android.test.InstrumentationTestRunner $r0;
        java.io.ByteArrayOutputStream $r1;
        android.test.InstrumentationTestRunner$StringResultPrinter $r2;
        long $l0, $l2;
        java.io.PrintStream $r3;
        boolean $z0;
        android.os.Bundle $r4;
        int $i1;
        android.test.AndroidTestRunner $r5;
        junit.framework.TestResult $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        $r0 := @this: android.test.InstrumentationTestRunner;

        staticinvoke <android.os.Looper: void prepare()>();

        $z0 = $r0.<android.test.InstrumentationTestRunner: boolean mJustCount>;

        if $z0 == 0 goto label1;

        $r4 = $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("id", "InstrumentationTestRunner");

        $r4 = $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $i1 = $r0.<android.test.InstrumentationTestRunner: int mTestCount>;

        virtualinvoke $r4.<android.os.Bundle: void putInt(java.lang.String,int)>("numtests", $i1);

        $r4 = $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>(-1, $r4);

        return;

     label1:
        $z0 = $r0.<android.test.InstrumentationTestRunner: boolean mDebug>;

        if $z0 == 0 goto label2;

        staticinvoke <android.os.Debug: void waitForDebugger()>();

     label2:
        $r1 = new java.io.ByteArrayOutputStream;

        specialinvoke $r1.<java.io.ByteArrayOutputStream: void <init>()>();

        $r3 = new java.io.PrintStream;

        specialinvoke $r3.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r1);

     label3:
        $r2 = new android.test.InstrumentationTestRunner$StringResultPrinter;

        specialinvoke $r2.<android.test.InstrumentationTestRunner$StringResultPrinter: void <init>(android.test.InstrumentationTestRunner,java.io.PrintStream)>($r0, $r3);

        $r5 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r5.<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>($r2);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        virtualinvoke $r5.<android.test.AndroidTestRunner: void runTest()>();

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l2 - $l0;

        $r5 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r6 = virtualinvoke $r5.<android.test.AndroidTestRunner: junit.framework.TestResult getTestResult()>();

        virtualinvoke $r2.<android.test.InstrumentationTestRunner$StringResultPrinter: void print(junit.framework.TestResult,long)>($r6, $l0);

     label4:
        $r4 = $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r7 = newarray (java.lang.Object)[2];

        $r5 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r8 = virtualinvoke $r5.<android.test.AndroidTestRunner: java.lang.String getTestClassName()>();

        $r7[0] = $r8;

        $r8 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r7[1] = $r8;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r7);

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r8);

        $z0 = $r0.<android.test.InstrumentationTestRunner: boolean mCoverage>;

        if $z0 == 0 goto label5;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void generateCoverageReport()>();

     label5:
        virtualinvoke $r3.<java.io.PrintStream: void close()>();

        $r4 = $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>(-1, $r4);

        return;

     label6:
        $r9 := @caughtexception;

        $r4 = $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        $r7 = newarray (java.lang.Object)[2];

        $r5 = $r0.<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner mTestRunner>;

        $r8 = virtualinvoke $r5.<android.test.AndroidTestRunner: java.lang.String getTestClassName()>();

        $r7[0] = $r8;

        $r8 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        $r7[1] = $r8;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nTest results for %s=%s", $r7);

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r8);

        $z0 = $r0.<android.test.InstrumentationTestRunner: boolean mCoverage>;

        if $z0 == 0 goto label7;

        specialinvoke $r0.<android.test.InstrumentationTestRunner: void generateCoverageReport()>();

     label7:
        virtualinvoke $r3.<java.io.PrintStream: void close()>();

        $r4 = $r0.<android.test.InstrumentationTestRunner: android.os.Bundle mResults>;

        virtualinvoke $r0.<android.app.Instrumentation: void finish(int,android.os.Bundle)>(-1, $r4);

        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public static void <clinit>()
    {
        <android.test.InstrumentationTestRunner: float SMALL_SUITE_MAX_RUNTIME> = 100.0F;

        <android.test.InstrumentationTestRunner: java.lang.String SMALL_SUITE> = "small";

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_START> = 1;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_OK> = 0;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_FAILURE> = -2;

        <android.test.InstrumentationTestRunner: int REPORT_VALUE_RESULT_ERROR> = -1;

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_VALUE_ID> = "InstrumentationTestRunner";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_SUITE_ASSIGNMENT> = "suiteassignment";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_STACK> = "stack";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_RUN_TIME> = "runtime";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NUM_TOTAL> = "numtests";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NUM_CURRENT> = "current";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NAME_TEST> = "test";

        <android.test.InstrumentationTestRunner: java.lang.String REPORT_KEY_NAME_CLASS> = "class";

        <android.test.InstrumentationTestRunner: float MEDIUM_SUITE_MAX_RUNTIME> = 1000.0F;

        <android.test.InstrumentationTestRunner: java.lang.String MEDIUM_SUITE> = "medium";

        <android.test.InstrumentationTestRunner: java.lang.String LOG_TAG> = "InstrumentationTestRunner";

        <android.test.InstrumentationTestRunner: java.lang.String LARGE_SUITE> = "large";

        <android.test.InstrumentationTestRunner: java.lang.String DEFAULT_COVERAGE_FILE_PATH> = "/sdcard/coverage.ec";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_SIZE_PREDICATE> = "size";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_PACKAGE> = "package";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_TEST_CLASS> = "class";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_LOG_ONLY> = "log";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_INCLUDE_PERF> = "perf";

        <android.test.InstrumentationTestRunner: java.lang.String ARGUMENT_DELAY_MSEC> = "delay_msec";

        return;
    }
}
