public final class com.google.common.util.MathUtil extends java.lang.Object
{
    private static final long MAX_LONG_ROOT;
    public static final int TRIG_MULTIPLIER;
    private static final byte[] sinArray;

    static void <clinit>()
    {
        byte[] $r0;

        <com.google.common.util.MathUtil: int TRIG_MULTIPLIER> = 250;

        <com.google.common.util.MathUtil: long MAX_LONG_ROOT> = 3037000499L;

        $r0 = newarray (byte)[91];

        $r0[0] = 0;

        $r0[1] = 4;

        $r0[2] = 9;

        $r0[3] = 13;

        $r0[4] = 17;

        $r0[5] = 22;

        $r0[6] = 26;

        $r0[7] = 30;

        $r0[8] = 35;

        $r0[9] = 39;

        $r0[10] = 43;

        $r0[11] = 48;

        $r0[12] = 52;

        $r0[13] = 56;

        $r0[14] = 60;

        $r0[15] = 65;

        $r0[16] = 69;

        $r0[17] = 73;

        $r0[18] = 77;

        $r0[19] = 81;

        $r0[20] = 86;

        $r0[21] = 90;

        $r0[22] = 94;

        $r0[23] = 98;

        $r0[24] = 102;

        $r0[25] = 106;

        $r0[26] = 110;

        $r0[27] = 113;

        $r0[28] = 117;

        $r0[29] = 121;

        $r0[30] = 125;

        $r0[31] = -127;

        $r0[32] = -124;

        $r0[33] = -120;

        $r0[34] = -116;

        $r0[35] = -113;

        $r0[36] = -109;

        $r0[37] = -106;

        $r0[38] = -102;

        $r0[39] = -99;

        $r0[40] = -95;

        $r0[41] = -92;

        $r0[42] = -89;

        $r0[43] = -86;

        $r0[44] = -82;

        $r0[45] = -79;

        $r0[46] = -76;

        $r0[47] = -73;

        $r0[48] = -70;

        $r0[49] = -67;

        $r0[50] = -64;

        $r0[51] = -62;

        $r0[52] = -59;

        $r0[53] = -56;

        $r0[54] = -54;

        $r0[55] = -51;

        $r0[56] = -49;

        $r0[57] = -46;

        $r0[58] = -44;

        $r0[59] = -42;

        $r0[60] = -39;

        $r0[61] = -37;

        $r0[62] = -35;

        $r0[63] = -33;

        $r0[64] = -31;

        $r0[65] = -29;

        $r0[66] = -28;

        $r0[67] = -26;

        $r0[68] = -24;

        $r0[69] = -23;

        $r0[70] = -21;

        $r0[71] = -20;

        $r0[72] = -18;

        $r0[73] = -17;

        $r0[74] = -16;

        $r0[75] = -15;

        $r0[76] = -13;

        $r0[77] = -12;

        $r0[78] = -11;

        $r0[79] = -11;

        $r0[80] = -10;

        $r0[81] = -9;

        $r0[82] = -8;

        $r0[83] = -8;

        $r0[84] = -7;

        $r0[85] = -7;

        $r0[86] = -7;

        $r0[87] = -6;

        $r0[88] = -6;

        $r0[89] = -6;

        $r0[90] = -6;

        <com.google.common.util.MathUtil: byte[] sinArray> = $r0;

        return;
    }

    public void <init>()
    {
        com.google.common.util.MathUtil $r0;

        $r0 := @this: com.google.common.util.MathUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int ceiledDivision(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 < 0 goto label1;

        $i0 = $i0 + $i1;

        $i0 = $i0 - 1;

        $i0 = $i0 / $i1;

        return $i0;

     label1:
        $i0 = $i0 / $i1;

        return $i0;
    }

    public static int ceiledLog(int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        if $i0 >= 1 goto label1;

        return -1;

     label1:
        $i1 = 0;

        $i0 = $i0 + -1;

     label2:
        if $i0 == 0 goto label3;

        $i1 = $i1 + 1;

        $i0 = $i0 >> 1;

        goto label2;

     label3:
        return $i1;
    }

    public static int cos(int)
    {
        int $i0;
        byte[] $r0;
        byte $b1;
        short $s2;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <com.google.common.util.MathUtil: int normalizeAngle(int,int)>($i0, 360);

        if $i0 >= 90 goto label1;

        $r0 = <com.google.common.util.MathUtil: byte[] sinArray>;

        $i0 = 90 - $i0;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        return $s2;

     label1:
        if $i0 >= 180 goto label2;

        $r0 = <com.google.common.util.MathUtil: byte[] sinArray>;

        $i0 = $i0 - 90;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        $s2 = neg $s2;

        return $s2;

     label2:
        if $i0 >= 270 goto label3;

        $r0 = <com.google.common.util.MathUtil: byte[] sinArray>;

        $i0 = 270 - $i0;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        $s2 = neg $s2;

        return $s2;

     label3:
        $r0 = <com.google.common.util.MathUtil: byte[] sinArray>;

        $i0 = $i0 - 270;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        return $s2;
    }

    private static int normalizeAngle(int, int)
    {
        int $i0, $i1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i0 = $i0 % $i1;

        if $i0 >= 0 goto label1;

        $i0 = $i0 + $i1;

        return $i0;

     label1:
        return $i0;
    }

    public static int roundUp(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= 0 goto label1;

        $i2 = $i1 - 1;

        $i0 = $i0 - $i2;

        $i0 = $i0 / $i1;

        return $i0;

     label1:
        $i2 = $i1 - 1;

        $i0 = $i2 + $i0;

        $i0 = $i0 / $i1;

        return $i0;
    }

    public static int roundedDivision(int, int)
    {
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 / 2;

        $i0 = $i2 + $i0;

        $i0 = $i0 / $i1;

        return $i0;
    }

    public static int sin(int)
    {
        int $i0;
        byte[] $r0;
        byte $b1;
        short $s2;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <com.google.common.util.MathUtil: int normalizeAngle(int,int)>($i0, 360);

        if $i0 >= 90 goto label1;

        $r0 = <com.google.common.util.MathUtil: byte[] sinArray>;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        return $s2;

     label1:
        if $i0 >= 180 goto label2;

        $r0 = <com.google.common.util.MathUtil: byte[] sinArray>;

        $i0 = 180 - $i0;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        return $s2;

     label2:
        if $i0 >= 270 goto label3;

        $r0 = <com.google.common.util.MathUtil: byte[] sinArray>;

        $i0 = $i0 - 180;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        $s2 = neg $s2;

        return $s2;

     label3:
        $r0 = <com.google.common.util.MathUtil: byte[] sinArray>;

        $i0 = 360 - $i0;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        $s2 = neg $s2;

        return $s2;
    }

    public static int squareRoot(int)
    {
        int $i0, $i1, $i2, $i3;

        $i0 := @parameter0: int;

        if $i0 > 0 goto label1;

        return 0;

     label1:
        $i1 = $i0 >> 15;

        $i1 = $i1 + 2;

        $i2 = 0;

     label2:
        if $i2 >= 32 goto label6;

        $i3 = $i0 / $i1;

        $i3 = $i3 + $i1;

        $i3 = $i3 >> 1;

        if $i1 != $i3 goto label3;

        return $i1;

     label3:
        $i2 = $i2 + 1;

        $i1 = $i3;

        goto label2;

     label4:
        $i2 = $i0 / $i1;

        if $i1 <= $i2 goto label5;

        $i1 = $i1 + -1;

        goto label4;

     label5:
        $i2 = $i1 * $i1;

        $i3 = $i1 * 2;

        $i3 = $i0 - $i3;

        $i3 = $i3 - 1;

        if $i2 > $i3 goto label7;

        $i1 = $i1 + 1;

        goto label4;

     label6:
        goto label4;

     label7:
        return $i1;
    }

    public static long squareRoot(long, long, long)
    {
        long $l0, $l1, $l2, $l3, $l5;
        byte $b4;

        $l1 := @parameter0: long;

        $l2 := @parameter1: long;

        $l3 := @parameter2: long;

        $b4 = $l1 cmp 9223372030926249001L;

        if $b4 <= 0 goto label1;

        return 3037000499L;

     label1:
        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l3, 3037000499L);

        $l3 = $l0;

        $l0 = $l2 + $l0;

        $l5 = $l0 >> 1;

        $l0 = $l2;

        $l2 = $l5;

     label2:
        $l5 = $l3 - $l0;

        $b4 = $l5 cmp 1L;

        if $b4 <= 0 goto label4;

        $l5 = $l2 * $l2;

        $l5 = $l1 - $l5;

        $b4 = $l5 cmp 0L;

        if $b4 <= 0 goto label3;

        $l0 = $l2 + $l3;

        $l0 = $l0 + 1L;

        $l5 = $l0 >> 1;

        $l0 = $l2;

        $l2 = $l5;

        goto label2;

     label3:
        $b4 = $l5 cmp 0L;

        if $b4 >= 0 goto label4;

        $l3 = $l2 + $l0;

        $l5 = $l3 >> 1;

        $l3 = $l2;

        $l2 = $l5;

        goto label2;

     label4:
        $l3 = $l2 * $l2;

        $b4 = $l3 cmp $l1;

        if $b4 == 0 goto label5;

        return $l0;

     label5:
        return $l2;
    }
}
