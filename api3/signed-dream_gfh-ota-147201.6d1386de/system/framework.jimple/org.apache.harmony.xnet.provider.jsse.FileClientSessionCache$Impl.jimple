class org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl extends java.lang.Object implements org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache
{
    java.util.Map accessOrder;
    final java.io.File directory;
    java.lang.String[] initialFiles;
    int size;

    void <init>(java.io.File) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl $r0;
        java.io.File $r1;
        java.util.Map $r2;
        boolean $z0, $z1;
        java.io.IOException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.String[] $r6;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl;

        $r1 := @parameter0: java.io.File;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map newAccessOrder()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map accessOrder> = $r2;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z1 != 0 goto label1;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exists but is not a directory.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        if $z0 == 0 goto label3;

        $r6 = virtualinvoke $r1.<java.io.File: java.lang.String[] list()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String[] initialFiles> = $r6;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String[] initialFiles>;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>($r6);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String[] initialFiles>;

        $i0 = lengthof $r6;

        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: int size> = $i0;

     label2:
        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.io.File directory> = $r1;

        return;

     label3:
        $z0 = virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label4;

        $r3 = new java.io.IOException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creation of ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" directory failed.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label4:
        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: int size> = 0;

        goto label2;
    }

    private void delete(java.io.File)
    {
        org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl $r0;
        java.io.File $r1;
        boolean $z0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.io.IOException $r6;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl;

        $r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label1;

        $r2 = <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>()>();

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r5, $r6);

     label1:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: int size>;

        $i0 = $i0 - 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: int size> = $i0;

        return;
    }

    private static java.lang.String fileName(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        java.lang.NullPointerException $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("host");

        throw $r1;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    private void indexFiles()
    {
        org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl $r0;
        java.util.TreeSet $r1;
        java.lang.String[] $r2;
        int $i0, $i1;
        java.lang.String $r3;
        java.io.File $r4;
        java.util.Map $r5, $r9;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$CacheFile $r6;
        java.util.Iterator $r7;
        java.lang.Object $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String[] initialFiles>;

        if $r2 == null goto label6;

        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String[] initialFiles> = null;

        $r1 = new java.util.TreeSet;

        specialinvoke $r1.<java.util.TreeSet: void <init>()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r2[$i1];

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map accessOrder>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label2;

        $r6 = new org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$CacheFile;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.io.File directory>;

        specialinvoke $r6.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$CacheFile: void <init>(java.io.File,java.lang.String)>($r4, $r3);

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r6);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label7;

        $r5 = staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map newAccessOrder()>();

        $r7 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$CacheFile) $r8;

        $r3 = $r6.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$CacheFile: java.lang.String name>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        goto label4;

     label5:
        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map accessOrder>;

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>($r9);

        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map accessOrder> = $r5;

        return;

     label6:
        return;

     label7:
        return;
    }

    static void logReadError(java.lang.String, java.lang.Throwable)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading session data for ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r0, $r1);

        return;
    }

    static void logWriteError(java.lang.String, java.lang.Throwable)
    {
        java.lang.String $r0;
        java.lang.Throwable $r1;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Throwable;

        $r2 = <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error writing session data for ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r0, $r1);

        return;
    }

    private void makeRoom()
    {
        org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl $r0;
        int $i0;
        java.util.Map $r1;
        java.util.Collection $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.io.File $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl;

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: int size>;

        if $i0 > 12 goto label1;

        return;

     label1:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void indexFiles()>();

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: int size>;

        $i0 = $i0 - 12;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map accessOrder>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.io.File) $r4;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r5);

        interfaceinvoke $r3.<java.util.Iterator: void remove()>();

        $i0 = $i0 + -1;

        if $i0 > 0 goto label2;

        return;
    }

    private static java.util.Map newAccessOrder()
    {
        java.util.LinkedHashMap $r0;

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(12, 0.75F, 1);

        return $r0;
    }

    public byte[] getSessionData(java.lang.String, int)
    {
        org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl $r0;
        java.lang.String $r1, $r4;
        int $i0;
        byte[] $r2;
        java.io.FileInputStream $r3;
        java.util.Map $r5;
        java.lang.Object $r6;
        java.io.File $r7, $r9;
        java.lang.String[] $r8;
        long $l1;
        java.io.DataInputStream $r10;
        java.util.logging.Logger $r11;
        java.util.logging.Level $r12;
        java.lang.StringBuilder $r13;
        java.io.FileNotFoundException $r14;
        java.io.IOException $r15, $r18, $r19, $r20;
        java.lang.Throwable $r16, $r17;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        entermonitor $r0;

     label01:
        $r4 = staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String fileName(java.lang.String,int)>($r1, $i0);

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map accessOrder>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r7 = (java.io.File) $r6;

        if $r7 != null goto label06;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String[] initialFiles>;

     label02:
        if $r8 != null goto label04;

        $r2 = null;

     label03:
        exitmonitor $r0;

        return $r2;

     label04:
        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String[] initialFiles>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r8, $r4);

        if $i0 >= 0 goto label05;

        $r2 = null;

        goto label03;

     label05:
        $r7 = new java.io.File;

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.io.File directory>;

        specialinvoke $r7.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r4);

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map accessOrder>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r7);

     label06:
        $r3 = new java.io.FileInputStream;

     label07:
        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r7);

     label08:
        $l1 = virtualinvoke $r7.<java.io.File: long length()>();

     label09:
        $i0 = (int) $l1;

        $r2 = newarray (byte)[$i0];

     label10:
        $r10 = new java.io.DataInputStream;

        specialinvoke $r10.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r3);

        virtualinvoke $r10.<java.io.DataInputStream: void readFully(byte[])>($r2);

     label11:
        $r11 = <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: java.util.logging.Logger logger>;

        $r12 = <java.util.logging.Level: java.util.logging.Level FINE>;

     label12:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Read session for ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r4 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r12, $r4);

     label13:
        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

     label14:
        goto label03;

     label15:
        $r14 := @caughtexception;

     label16:
        staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void logReadError(java.lang.String,java.lang.Throwable)>($r1, $r14);

     label17:
        $r2 = null;

        goto label03;

     label18:
        $r15 := @caughtexception;

     label19:
        staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void logReadError(java.lang.String,java.lang.Throwable)>($r1, $r15);

     label20:
        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

     label21:
        $r2 = null;

        goto label03;

     label22:
        $r16 := @caughtexception;

     label23:
        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

     label24:
        throw $r16;

     label25:
        $r17 := @caughtexception;

        exitmonitor $r0;

        throw $r17;

     label26:
        $r18 := @caughtexception;

        goto label14;

     label27:
        $r19 := @caughtexception;

        goto label21;

     label28:
        $r20 := @caughtexception;

        goto label24;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label04 to label06 with label25;
        catch java.io.FileNotFoundException from label07 to label08 with label15;
        catch java.lang.Throwable from label06 to label08 with label25;
        catch java.io.IOException from label08 to label09 with label18;
        catch java.io.IOException from label10 to label11 with label18;
        catch java.io.IOException from label12 to label13 with label18;
        catch java.lang.Throwable from label08 to label13 with label22;
        catch java.io.IOException from label13 to label14 with label26;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label19 to label20 with label22;
        catch java.io.IOException from label20 to label21 with label27;
        catch java.lang.Throwable from label20 to label21 with label25;
        catch java.io.IOException from label23 to label24 with label28;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch java.lang.Throwable from label24 to label25 with label25;
    }

    public void putSessionData(javax.net.ssl.SSLSession, byte[])
    {
        org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl $r0;
        javax.net.ssl.SSLSession $r1;
        byte[] $r2;
        java.io.File $r3, $r9;
        java.io.FileOutputStream $r4;
        java.lang.String $r5, $r8;
        java.lang.NullPointerException $r6;
        java.lang.Throwable $r7, $r16, $r19, $r20, $r22;
        int $i0;
        boolean $z0;
        java.io.FileNotFoundException $r10;
        java.util.Map $r11;
        java.util.logging.Logger $r12;
        java.util.logging.Level $r13;
        java.lang.StringBuilder $r14;
        java.io.IOException $r15, $r17, $r18, $r21;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl;

        $r1 := @parameter0: javax.net.ssl.SSLSession;

        $r2 := @parameter1: byte[];

        entermonitor $r0;

     label01:
        $r5 = interfaceinvoke $r1.<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>();

        if $r2 != null goto label03;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("sessionData");

        throw $r6;

     label02:
        $r7 := @caughtexception;

        exitmonitor $r0;

        throw $r7;

     label03:
        $i0 = interfaceinvoke $r1.<javax.net.ssl.SSLSession: int getPeerPort()>();

        $r8 = staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.lang.String fileName(java.lang.String,int)>($r5, $i0);

        $r3 = new java.io.File;

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.io.File directory>;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r9, $r8);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

     label04:
        $r4 = new java.io.FileOutputStream;

     label05:
        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

     label06:
        if $z0 != 0 goto label08;

     label07:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: int size>;

        $i0 = $i0 + 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: int size> = $i0;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void makeRoom()>();

     label08:
        virtualinvoke $r4.<java.io.FileOutputStream: void write(byte[])>($r2);

     label09:
        virtualinvoke $r4.<java.io.FileOutputStream: void close()>();

     label10:
        goto label14;

     label11:
        exitmonitor $r0;

        return;

     label12:
        $r10 := @caughtexception;

     label13:
        staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void logWriteError(java.lang.String,java.lang.Throwable)>($r5, $r10);

        goto label11;

     label14:
        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: java.util.Map accessOrder>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r3);

        $r12 = <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stored session for ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r13, $r5);

     label15:
        goto label11;

     label16:
        $r15 := @caughtexception;

     label17:
        staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void logWriteError(java.lang.String,java.lang.Throwable)>($r5, $r15);

     label18:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r3);

        goto label11;

     label19:
        $r16 := @caughtexception;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r3);

        throw $r16;

     label20:
        $r17 := @caughtexception;

     label21:
        staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void logWriteError(java.lang.String,java.lang.Throwable)>($r5, $r17);

     label22:
        virtualinvoke $r4.<java.io.FileOutputStream: void close()>();

     label23:
        goto label24;

     label24:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r3);

        goto label11;

     label25:
        $r18 := @caughtexception;

     label26:
        staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void logWriteError(java.lang.String,java.lang.Throwable)>($r5, $r18);

     label27:
        goto label28;

     label28:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r3);

        goto label11;

     label29:
        $r19 := @caughtexception;

        goto label30;

     label30:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r3);

        throw $r19;

     label31:
        $r20 := @caughtexception;

     label32:
        virtualinvoke $r4.<java.io.FileOutputStream: void close()>();

     label33:
        goto label34;

     label34:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r3);

     label35:
        throw $r20;

     label36:
        $r21 := @caughtexception;

     label37:
        staticinvoke <org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void logWriteError(java.lang.String,java.lang.Throwable)>($r5, $r21);

     label38:
        goto label39;

     label39:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r3);

        goto label35;

     label40:
        $r22 := @caughtexception;

        goto label41;

     label41:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.FileClientSessionCache$Impl: void delete(java.io.File)>($r3);

     label42:
        throw $r22;

     label43:
        goto label42;

        catch java.lang.Throwable from label01 to label02 with label02;
        catch java.lang.Throwable from label03 to label04 with label02;
        catch java.io.FileNotFoundException from label05 to label06 with label12;
        catch java.lang.Throwable from label04 to label06 with label02;
        catch java.lang.Throwable from label07 to label08 with label02;
        catch java.io.IOException from label08 to label09 with label20;
        catch java.lang.Throwable from label08 to label09 with label31;
        catch java.io.IOException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label13 to label15 with label02;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label18 to label20 with label02;
        catch java.lang.Throwable from label21 to label22 with label31;
        catch java.io.IOException from label22 to label23 with label25;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label24 to label25 with label02;
        catch java.lang.Throwable from label26 to label27 with label29;
        catch java.lang.Throwable from label28 to label31 with label02;
        catch java.io.IOException from label32 to label33 with label36;
        catch java.lang.Throwable from label32 to label33 with label40;
        catch java.lang.Throwable from label34 to label36 with label02;
        catch java.lang.Throwable from label37 to label38 with label40;
        catch java.lang.Throwable from label39 to label43 with label02;
    }
}
