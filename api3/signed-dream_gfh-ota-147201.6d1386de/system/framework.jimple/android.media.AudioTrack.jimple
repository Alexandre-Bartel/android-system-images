public class android.media.AudioTrack extends java.lang.Object
{
    public static final int ERROR;
    public static final int ERROR_BAD_VALUE;
    public static final int ERROR_INVALID_OPERATION;
    private static final int ERROR_NATIVESETUP_AUDIOSYSTEM;
    private static final int ERROR_NATIVESETUP_INVALIDCHANNELCOUNT;
    private static final int ERROR_NATIVESETUP_INVALIDFORMAT;
    private static final int ERROR_NATIVESETUP_INVALIDSTREAMTYPE;
    private static final int ERROR_NATIVESETUP_NATIVEINITFAILED;
    public static final int MODE_STATIC;
    public static final int MODE_STREAM;
    private static final int NATIVE_EVENT_MARKER;
    private static final int NATIVE_EVENT_NEW_POS;
    public static final int PLAYSTATE_PAUSED;
    public static final int PLAYSTATE_PLAYING;
    public static final int PLAYSTATE_STOPPED;
    public static final int STATE_INITIALIZED;
    public static final int STATE_NO_STATIC_DATA;
    public static final int STATE_UNINITIALIZED;
    public static final int SUCCESS;
    private static final java.lang.String TAG;
    private static final float VOLUME_MAX;
    private static final float VOLUME_MIN;
    private int mAudioFormat;
    private int mChannelConfiguration;
    private int mChannelCount;
    private int mDataLoadMode;
    private android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate;
    private android.os.Looper mInitializationLooper;
    private int mJniData;
    private int mNativeBufferSizeInBytes;
    private int mNativeTrackInJavaObj;
    private int mPlayState;
    private final java.lang.Object mPlayStateLock;
    private android.media.AudioTrack$OnPlaybackPositionUpdateListener mPositionListener;
    private final java.lang.Object mPositionListenerLock;
    private int mSampleRate;
    private int mState;
    private int mStreamType;

    public void <init>(int, int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioTrack $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r1;
        android.os.Looper $r2;
        java.lang.ref.WeakReference $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.media.AudioTrack: int mState> = 0;

        $r0.<android.media.AudioTrack: int mPlayState> = 1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock> = $r1;

        $r0.<android.media.AudioTrack: android.media.AudioTrack$OnPlaybackPositionUpdateListener mPositionListener> = null;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.media.AudioTrack: java.lang.Object mPositionListenerLock> = $r1;

        $r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes> = 0;

        $r0.<android.media.AudioTrack: android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate> = null;

        $r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper> = null;

        $r0.<android.media.AudioTrack: int mSampleRate> = 22050;

        $r0.<android.media.AudioTrack: int mChannelCount> = 1;

        $r0.<android.media.AudioTrack: int mStreamType> = 3;

        $r0.<android.media.AudioTrack: int mDataLoadMode> = 1;

        $r0.<android.media.AudioTrack: int mChannelConfiguration> = 2;

        $r0.<android.media.AudioTrack: int mAudioFormat> = 2;

        $r0.<android.media.AudioTrack: int mState> = 0;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper> = $r2;

        if $r2 != null goto label1;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper> = $r2;

     label1:
        specialinvoke $r0.<android.media.AudioTrack: void audioParamCheck(int,int,int,int,int)>($i0, $i1, $i2, $i3, $i5);

        specialinvoke $r0.<android.media.AudioTrack: void audioBuffSizeCheck(int)>($i4);

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r0);

        $i2 = $r0.<android.media.AudioTrack: int mStreamType>;

        $i3 = $r0.<android.media.AudioTrack: int mSampleRate>;

        $i4 = $r0.<android.media.AudioTrack: int mChannelCount>;

        $i5 = $r0.<android.media.AudioTrack: int mAudioFormat>;

        $i0 = $r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes>;

        $i1 = $r0.<android.media.AudioTrack: int mDataLoadMode>;

        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_setup(java.lang.Object,int,int,int,int,int,int)>($r3, $i2, $i3, $i4, $i5, $i0, $i1);

        if $i0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error code ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when initializing AudioTrack.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r5);

        return;

     label2:
        $i0 = $r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i0 != 0 goto label3;

        $r0.<android.media.AudioTrack: int mState> = 2;

        return;

     label3:
        $r0.<android.media.AudioTrack: int mState> = 1;

        return;
    }

    static android.os.Looper access$000(android.media.AudioTrack)
    {
        android.media.AudioTrack $r0;
        android.os.Looper r1;

        $r0 := @parameter0: android.media.AudioTrack;

        r1 = $r0.<android.media.AudioTrack: android.os.Looper mInitializationLooper>;

        return r1;
    }

    static java.lang.Object access$200(android.media.AudioTrack)
    {
        android.media.AudioTrack $r0;
        java.lang.Object r1;

        $r0 := @parameter0: android.media.AudioTrack;

        r1 = $r0.<android.media.AudioTrack: java.lang.Object mPositionListenerLock>;

        return r1;
    }

    static android.media.AudioTrack$OnPlaybackPositionUpdateListener access$300(android.media.AudioTrack)
    {
        android.media.AudioTrack $r0;
        android.media.AudioTrack$OnPlaybackPositionUpdateListener r1;

        $r0 := @parameter0: android.media.AudioTrack;

        r1 = $r0.<android.media.AudioTrack: android.media.AudioTrack$OnPlaybackPositionUpdateListener mPositionListener>;

        return r1;
    }

    private void audioBuffSizeCheck(int)
    {
        android.media.AudioTrack $r0;
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.IllegalArgumentException $r1;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.media.AudioTrack: int mChannelCount>;

        $i2 = $r0.<android.media.AudioTrack: int mAudioFormat>;

        if $i2 != 3 goto label3;

        $b3 = 1;

     label1:
        $i1 = $i1 * $b3;

        $i1 = $i0 % $i1;

        if $i1 != 0 goto label2;

        if $i0 >= 1 goto label4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid audio buffer size.");

        throw $r1;

     label3:
        $b3 = 2;

        goto label1;

     label4:
        $r0.<android.media.AudioTrack: int mNativeBufferSizeInBytes> = $i0;

        return;
    }

    private void audioParamCheck(int, int, int, int, int)
    {
        android.media.AudioTrack $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        if $i0 == 4 goto label01;

        if $i0 == 3 goto label01;

        if $i0 == 2 goto label01;

        if $i0 == 1 goto label01;

        if $i0 == 0 goto label01;

        if $i0 == 5 goto label01;

        if $i0 == 6 goto label01;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid stream type.");

        throw $r1;

     label01:
        $r0.<android.media.AudioTrack: int mStreamType> = $i0;

        if $i1 < 4000 goto label02;

        if $i1 <= 48000 goto label03;

     label02:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hz is not a supported sample rate.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label03:
        $r0.<android.media.AudioTrack: int mSampleRate> = $i1;

        lookupswitch($i2)
        {
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label08;
            default: goto label04;
        };

     label04:
        $r0.<android.media.AudioTrack: int mChannelCount> = 0;

        $r0.<android.media.AudioTrack: int mChannelConfiguration> = 0;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported channel configuration.");

        throw $r1;

     label05:
        $r0.<android.media.AudioTrack: int mChannelCount> = 1;

        $r0.<android.media.AudioTrack: int mChannelConfiguration> = 2;

     label06:
        lookupswitch($i3)
        {
            case 1: goto label09;
            case 2: goto label11;
            case 3: goto label11;
            default: goto label07;
        };

     label07:
        $r0.<android.media.AudioTrack: int mAudioFormat> = 0;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported sample encoding. Should be ENCODING_PCM_8BIT or ENCODING_PCM_16BIT.");

        throw $r1;

     label08:
        $r0.<android.media.AudioTrack: int mChannelCount> = 2;

        $r0.<android.media.AudioTrack: int mChannelConfiguration> = 3;

        goto label06;

     label09:
        $r0.<android.media.AudioTrack: int mAudioFormat> = 2;

     label10:
        if $i4 == 1 goto label12;

        if $i4 == 0 goto label12;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid mode.");

        throw $r1;

     label11:
        $r0.<android.media.AudioTrack: int mAudioFormat> = $i3;

        goto label10;

     label12:
        $r0.<android.media.AudioTrack: int mDataLoadMode> = $i4;

        return;
    }

    public static float getMaxVolume()
    {
        return 1.0F;
    }

    public static int getMinBufferSize(int, int, int)
    {
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.StringBuilder $r0;
        java.lang.String $r1;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        lookupswitch($i1)
        {
            case 2: goto label2;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): Invalid channel configuration.");

        return -2;

     label2:
        $b3 = 1;

     label3:
        if $i2 == 2 goto label5;

        if $i2 == 3 goto label5;

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): Invalid audio format.");

        return -2;

     label4:
        $b3 = 2;

        goto label3;

     label5:
        if $i0 < 4000 goto label6;

        if $i0 <= 48000 goto label7;

     label6:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMinBufferSize(): ");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hz is not a supported sample rate.");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>($r1);

        return -2;

     label7:
        $i0 = staticinvoke <android.media.AudioTrack: int native_get_min_buff_size(int,int,int)>($i0, $b3, $i2);

        if $i0 == -1 goto label8;

        if $i0 != 0 goto label9;

     label8:
        staticinvoke <android.media.AudioTrack: void loge(java.lang.String)>("getMinBufferSize(): error querying hardware");

        return -1;

     label9:
        return $i0;
    }

    public static float getMinVolume()
    {
        return 0.0F;
    }

    public static int getNativeOutputSampleRate(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = staticinvoke <android.media.AudioTrack: int native_get_output_sample_rate(int)>($i0);

        return $i0;
    }

    private static void logd(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ android.media.AudioTrack ] ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AudioTrack-Java", $r0);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ android.media.AudioTrack ] ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioTrack-Java", $r0);

        return;
    }

    private final native void native_finalize();

    private final native void native_flush();

    private final native int native_get_marker_pos();

    private static final native int native_get_min_buff_size(int, int, int);

    private final native int native_get_native_frame_count();

    private static final native int native_get_output_sample_rate(int);

    private final native int native_get_playback_rate();

    private final native int native_get_pos_update_period();

    private final native int native_get_position();

    private final native void native_pause();

    private final native void native_release();

    private final native int native_reload_static();

    private final native void native_setVolume(float, float);

    private final native int native_set_loop(int, int, int);

    private final native int native_set_marker_pos(int);

    private final native void native_set_playback_rate(int);

    private final native int native_set_pos_update_period(int);

    private final native int native_set_position(int);

    private final native int native_setup(java.lang.Object, int, int, int, int, int, int);

    private final native void native_start();

    private final native void native_stop();

    private final native int native_write_byte(byte[], int, int, int);

    private final native int native_write_short(short[], int, int, int);

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object $r0, $r1;
        java.lang.ref.WeakReference $r2;
        android.media.AudioTrack $r3;
        android.media.AudioTrack$NativeEventHandlerDelegate $r4;
        android.os.Handler $r5;
        android.os.Message $r6;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $r2 = (java.lang.ref.WeakReference) $r1;

        $r1 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        $r3 = (android.media.AudioTrack) $r1;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = $r3.<android.media.AudioTrack: android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate>;

        if $r4 == null goto label2;

        $r4 = $r3.<android.media.AudioTrack: android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate>;

        $r5 = virtualinvoke $r4.<android.media.AudioTrack$NativeEventHandlerDelegate: android.os.Handler getHandler()>();

        $r6 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>($i0, $i1, $i2, $r0);

        $r4 = $r3.<android.media.AudioTrack: android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate>;

        $r5 = virtualinvoke $r4.<android.media.AudioTrack$NativeEventHandlerDelegate: android.os.Handler getHandler()>();

        virtualinvoke $r5.<android.os.Handler: boolean sendMessage(android.os.Message)>($r6);

        return;

     label2:
        return;
    }

    protected void finalize()
    {
        android.media.AudioTrack $r0;

        $r0 := @this: android.media.AudioTrack;

        specialinvoke $r0.<android.media.AudioTrack: void native_finalize()>();

        return;
    }

    public void flush()
    {
        android.media.AudioTrack $r0;
        int $i0;

        $r0 := @this: android.media.AudioTrack;

        $i0 = $r0.<android.media.AudioTrack: int mState>;

        if $i0 != 1 goto label1;

        specialinvoke $r0.<android.media.AudioTrack: void native_flush()>();

        return;

     label1:
        return;
    }

    public int getAudioFormat()
    {
        android.media.AudioTrack $r0;
        int i0;

        $r0 := @this: android.media.AudioTrack;

        i0 = $r0.<android.media.AudioTrack: int mAudioFormat>;

        return i0;
    }

    public int getChannelConfiguration()
    {
        android.media.AudioTrack $r0;
        int i0;

        $r0 := @this: android.media.AudioTrack;

        i0 = $r0.<android.media.AudioTrack: int mChannelConfiguration>;

        return i0;
    }

    public int getChannelCount()
    {
        android.media.AudioTrack $r0;
        int i0;

        $r0 := @this: android.media.AudioTrack;

        i0 = $r0.<android.media.AudioTrack: int mChannelCount>;

        return i0;
    }

    protected int getNativeFrameCount()
    {
        android.media.AudioTrack $r0;
        int $i0;

        $r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_get_native_frame_count()>();

        return $i0;
    }

    public int getNotificationMarkerPosition()
    {
        android.media.AudioTrack $r0;
        int $i0;

        $r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_get_marker_pos()>();

        return $i0;
    }

    public int getPlayState()
    {
        android.media.AudioTrack $r0;
        int i0;

        $r0 := @this: android.media.AudioTrack;

        i0 = $r0.<android.media.AudioTrack: int mPlayState>;

        return i0;
    }

    public int getPlaybackHeadPosition()
    {
        android.media.AudioTrack $r0;
        int $i0;

        $r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_get_position()>();

        return $i0;
    }

    public int getPlaybackRate()
    {
        android.media.AudioTrack $r0;
        int $i0;

        $r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_get_playback_rate()>();

        return $i0;
    }

    public int getPositionNotificationPeriod()
    {
        android.media.AudioTrack $r0;
        int $i0;

        $r0 := @this: android.media.AudioTrack;

        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_get_pos_update_period()>();

        return $i0;
    }

    public int getSampleRate()
    {
        android.media.AudioTrack $r0;
        int i0;

        $r0 := @this: android.media.AudioTrack;

        i0 = $r0.<android.media.AudioTrack: int mSampleRate>;

        return i0;
    }

    public int getState()
    {
        android.media.AudioTrack $r0;
        int i0;

        $r0 := @this: android.media.AudioTrack;

        i0 = $r0.<android.media.AudioTrack: int mState>;

        return i0;
    }

    public int getStreamType()
    {
        android.media.AudioTrack $r0;
        int i0;

        $r0 := @this: android.media.AudioTrack;

        i0 = $r0.<android.media.AudioTrack: int mStreamType>;

        return i0;
    }

    public void pause() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.media.AudioTrack;

        $i0 = $r0.<android.media.AudioTrack: int mState>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("pause() called on uninitialized AudioTrack.");

        throw $r1;

     label1:
        $r2 = $r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<android.media.AudioTrack: void native_pause()>();

        $r0.<android.media.AudioTrack: int mPlayState> = 2;

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void play() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.media.AudioTrack;

        $i0 = $r0.<android.media.AudioTrack: int mState>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("play() called on uninitialized AudioTrack.");

        throw $r1;

     label1:
        $r2 = $r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<android.media.AudioTrack: void native_start()>();

        $r0.<android.media.AudioTrack: int mPlayState> = 3;

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void release()
    {
        android.media.AudioTrack $r0;
        java.lang.IllegalStateException $r1;

        $r0 := @this: android.media.AudioTrack;

     label1:
        virtualinvoke $r0.<android.media.AudioTrack: void stop()>();

     label2:
        specialinvoke $r0.<android.media.AudioTrack: void native_release()>();

        $r0.<android.media.AudioTrack: int mState> = 0;

        return;

     label3:
        $r1 := @caughtexception;

        goto label2;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public int reloadStaticData()
    {
        android.media.AudioTrack $r0;
        int $i0;

        $r0 := @this: android.media.AudioTrack;

        $i0 = $r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i0 != 1 goto label1;

        return -3;

     label1:
        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_reload_static()>();

        return $i0;
    }

    public int setLoopPoints(int, int, int)
    {
        android.media.AudioTrack $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = $r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i3 != 1 goto label1;

        return -3;

     label1:
        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_set_loop(int,int,int)>($i0, $i1, $i2);

        return $i0;
    }

    public int setNotificationMarkerPosition(int)
    {
        android.media.AudioTrack $r0;
        int $i0, $i1;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.media.AudioTrack: int mState>;

        if $i1 == 1 goto label1;

        return -3;

     label1:
        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_set_marker_pos(int)>($i0);

        return $i0;
    }

    public int setPlaybackHeadPosition(int)
    {
        android.media.AudioTrack $r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor $r1;

     label1:
        $i1 = $r0.<android.media.AudioTrack: int mPlayState>;

        if $i1 == 1 goto label2;

        $i1 = $r0.<android.media.AudioTrack: int mPlayState>;

        if $i1 != 2 goto label4;

     label2:
        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_set_position(int)>($i0);

        exitmonitor $r1;

     label3:
        return $i0;

     label4:
        exitmonitor $r1;

     label5:
        return -3;

     label6:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)
    {
        android.media.AudioTrack $r0;
        android.media.AudioTrack$OnPlaybackPositionUpdateListener $r1;

        $r0 := @this: android.media.AudioTrack;

        $r1 := @parameter0: android.media.AudioTrack$OnPlaybackPositionUpdateListener;

        virtualinvoke $r0.<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>($r1, null);

        return;
    }

    public void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener, android.os.Handler)
    {
        android.media.AudioTrack $r0;
        android.media.AudioTrack$OnPlaybackPositionUpdateListener $r1;
        android.os.Handler $r2;
        java.lang.Throwable $r3;
        java.lang.Object $r4;
        android.media.AudioTrack$NativeEventHandlerDelegate $r5;

        $r0 := @this: android.media.AudioTrack;

        $r1 := @parameter0: android.media.AudioTrack$OnPlaybackPositionUpdateListener;

        $r2 := @parameter1: android.os.Handler;

        $r4 = $r0.<android.media.AudioTrack: java.lang.Object mPositionListenerLock>;

        entermonitor $r4;

     label1:
        $r0.<android.media.AudioTrack: android.media.AudioTrack$OnPlaybackPositionUpdateListener mPositionListener> = $r1;

        exitmonitor $r4;

     label2:
        if $r1 == null goto label6;

        $r5 = new android.media.AudioTrack$NativeEventHandlerDelegate;

        specialinvoke $r5.<android.media.AudioTrack$NativeEventHandlerDelegate: void <init>(android.media.AudioTrack,android.media.AudioTrack,android.os.Handler)>($r0, $r0, $r2);

        $r0.<android.media.AudioTrack: android.media.AudioTrack$NativeEventHandlerDelegate mEventHandlerDelegate> = $r5;

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor $r4;

     label5:
        throw $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int setPlaybackRate(int)
    {
        android.media.AudioTrack $r0;
        int $i0, $i1;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.media.AudioTrack: int mState>;

        if $i1 == 1 goto label1;

        return -3;

     label1:
        if $i0 > 0 goto label2;

        return -2;

     label2:
        specialinvoke $r0.<android.media.AudioTrack: void native_set_playback_rate(int)>($i0);

        return 0;
    }

    public int setPositionNotificationPeriod(int)
    {
        android.media.AudioTrack $r0;
        int $i0, $i1;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.media.AudioTrack: int mState>;

        if $i1 == 1 goto label1;

        return -3;

     label1:
        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_set_pos_update_period(int)>($i0);

        return $i0;
    }

    protected void setState(int)
    {
        android.media.AudioTrack $r0;
        int $i0;

        $r0 := @this: android.media.AudioTrack;

        $i0 := @parameter0: int;

        $r0.<android.media.AudioTrack: int mState> = $i0;

        return;
    }

    public int setStereoVolume(float, float)
    {
        android.media.AudioTrack $r0;
        float $f0, $f1, $f2;
        int $i0;
        byte $b1;

        $r0 := @this: android.media.AudioTrack;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $i0 = $r0.<android.media.AudioTrack: int mState>;

        if $i0 == 1 goto label1;

        return -3;

     label1:
        $f2 = staticinvoke <android.media.AudioTrack: float getMinVolume()>();

        $b1 = $f0 cmpg $f2;

        if $b1 >= 0 goto label2;

        $f0 = staticinvoke <android.media.AudioTrack: float getMinVolume()>();

     label2:
        $f2 = staticinvoke <android.media.AudioTrack: float getMaxVolume()>();

        $b1 = $f0 cmpl $f2;

        if $b1 <= 0 goto label3;

        $f0 = staticinvoke <android.media.AudioTrack: float getMaxVolume()>();

     label3:
        $f2 = staticinvoke <android.media.AudioTrack: float getMinVolume()>();

        $b1 = $f1 cmpg $f2;

        if $b1 >= 0 goto label4;

        $f1 = staticinvoke <android.media.AudioTrack: float getMinVolume()>();

     label4:
        $f2 = staticinvoke <android.media.AudioTrack: float getMaxVolume()>();

        $b1 = $f1 cmpl $f2;

        if $b1 <= 0 goto label5;

        $f1 = staticinvoke <android.media.AudioTrack: float getMaxVolume()>();

     label5:
        specialinvoke $r0.<android.media.AudioTrack: void native_setVolume(float,float)>($f0, $f1);

        return 0;
    }

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.AudioTrack $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.media.AudioTrack;

        $i0 = $r0.<android.media.AudioTrack: int mState>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("stop() called on uninitialized AudioTrack.");

        throw $r1;

     label1:
        $r2 = $r0.<android.media.AudioTrack: java.lang.Object mPlayStateLock>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<android.media.AudioTrack: void native_stop()>();

        $r0.<android.media.AudioTrack: int mPlayState> = 1;

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public int write(byte[], int, int)
    {
        android.media.AudioTrack $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.media.AudioTrack;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i2 != 0 goto label1;

        $i2 = $r0.<android.media.AudioTrack: int mState>;

        if $i2 != 2 goto label1;

        if $i1 <= 0 goto label1;

        $r0.<android.media.AudioTrack: int mState> = 1;

     label1:
        $i2 = $r0.<android.media.AudioTrack: int mState>;

        if $i2 == 1 goto label2;

        return -3;

     label2:
        if $r1 == null goto label3;

        if $i0 < 0 goto label3;

        if $i1 < 0 goto label3;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label4;

     label3:
        return -2;

     label4:
        $i2 = $r0.<android.media.AudioTrack: int mAudioFormat>;

        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_write_byte(byte[],int,int,int)>($r1, $i0, $i1, $i2);

        return $i0;
    }

    public int write(short[], int, int)
    {
        android.media.AudioTrack $r0;
        short[] $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.media.AudioTrack;

        $r1 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<android.media.AudioTrack: int mDataLoadMode>;

        if $i2 != 0 goto label1;

        $i2 = $r0.<android.media.AudioTrack: int mState>;

        if $i2 != 2 goto label1;

        if $i1 <= 0 goto label1;

        $r0.<android.media.AudioTrack: int mState> = 1;

     label1:
        $i2 = $r0.<android.media.AudioTrack: int mState>;

        if $i2 == 1 goto label2;

        return -3;

     label2:
        if $r1 == null goto label3;

        if $i0 < 0 goto label3;

        if $i1 < 0 goto label3;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label4;

     label3:
        return -2;

     label4:
        $i2 = $r0.<android.media.AudioTrack: int mAudioFormat>;

        $i0 = specialinvoke $r0.<android.media.AudioTrack: int native_write_short(short[],int,int,int)>($r1, $i0, $i1, $i2);

        return $i0;
    }

    public static void <clinit>()
    {
        <android.media.AudioTrack: float VOLUME_MAX> = 1.0F;

        <android.media.AudioTrack: java.lang.String TAG> = "AudioTrack-Java";

        <android.media.AudioTrack: int SUCCESS> = 0;

        <android.media.AudioTrack: int STATE_UNINITIALIZED> = 0;

        <android.media.AudioTrack: int STATE_NO_STATIC_DATA> = 2;

        <android.media.AudioTrack: int STATE_INITIALIZED> = 1;

        <android.media.AudioTrack: int PLAYSTATE_STOPPED> = 1;

        <android.media.AudioTrack: int PLAYSTATE_PLAYING> = 3;

        <android.media.AudioTrack: int PLAYSTATE_PAUSED> = 2;

        <android.media.AudioTrack: int NATIVE_EVENT_NEW_POS> = 4;

        <android.media.AudioTrack: int NATIVE_EVENT_MARKER> = 3;

        <android.media.AudioTrack: int MODE_STREAM> = 1;

        <android.media.AudioTrack: int MODE_STATIC> = 0;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_NATIVEINITFAILED> = -20;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDSTREAMTYPE> = -19;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDFORMAT> = -18;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_INVALIDCHANNELCOUNT> = -17;

        <android.media.AudioTrack: int ERROR_NATIVESETUP_AUDIOSYSTEM> = -16;

        <android.media.AudioTrack: int ERROR_INVALID_OPERATION> = -3;

        <android.media.AudioTrack: int ERROR_BAD_VALUE> = -2;

        <android.media.AudioTrack: int ERROR> = -1;

        return;
    }
}
