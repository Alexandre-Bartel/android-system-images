public class org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore extends org.bouncycastle.jce.provider.JDKKeyStore
{

    public void <init>()
    {
        org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore $r0;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore;

        specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void <init>()>();

        return;
    }

    public void engineLoad(java.io.InputStream, char[]) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore $r0;
        java.io.InputStream $r1;
        char[] $r2;
        byte[] $r3, $r12;
        javax.crypto.CipherInputStream $r4;
        java.io.DataInputStream $r5;
        org.bouncycastle.crypto.io.DigestInputStream $r6;
        java.util.Hashtable $r7;
        int $i0, $i1, $i2;
        java.io.IOException $r8;
        javax.crypto.Cipher $r9;
        org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest $r10;
        org.bouncycastle.crypto.Digest $r11;
        byte $b3;
        boolean $z0;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: char[];

        $r7 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        virtualinvoke $r7.<java.util.Hashtable: void clear()>();

        if $r1 != null goto label01;

        return;

     label01:
        $r5 = new java.io.DataInputStream;

        specialinvoke $r5.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        $i0 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        if $i0 == 1 goto label02;

        if $i0 == 0 goto label02;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Wrong version of key store.");

        throw $r8;

     label02:
        $i1 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        $r3 = newarray (byte)[$i1];

        $i1 = lengthof $r3;

        if $i1 == 20 goto label03;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Key store corrupted.");

        throw $r8;

     label03:
        virtualinvoke $r5.<java.io.DataInputStream: void readFully(byte[])>($r3);

        $i1 = virtualinvoke $r5.<java.io.DataInputStream: int readInt()>();

        if $i1 < 0 goto label04;

        if $i1 <= 4096 goto label05;

     label04:
        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Key store corrupted.");

        throw $r8;

     label05:
        if $i0 != 0 goto label08;

        $r9 = virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int)>("OldPBEWithSHAAndTwofish-CBC", 2, $r2, $r3, $i1);

     label06:
        $r4 = new javax.crypto.CipherInputStream;

        specialinvoke $r4.<javax.crypto.CipherInputStream: void <init>(java.io.InputStream,javax.crypto.Cipher)>($r5, $r9);

        $r6 = new org.bouncycastle.crypto.io.DigestInputStream;

        $r10 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest: org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest getInstance(java.lang.String)>("SHA-1");

        specialinvoke $r6.<org.bouncycastle.crypto.io.DigestInputStream: void <init>(java.io.InputStream,org.bouncycastle.crypto.Digest)>($r4, $r10);

        virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void loadStore(java.io.InputStream)>($r6);

        $r11 = virtualinvoke $r6.<org.bouncycastle.crypto.io.DigestInputStream: org.bouncycastle.crypto.Digest getDigest()>();

        $i0 = interfaceinvoke $r11.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r3 = newarray (byte)[$i0];

        $r12 = newarray (byte)[$i0];

        interfaceinvoke $r11.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>($r3, 0);

        $i1 = 0;

     label07:
        if $i1 == $i0 goto label09;

        $i2 = virtualinvoke $r4.<javax.crypto.CipherInputStream: int read()>();

        $b3 = (byte) $i2;

        $r12[$i1] = $b3;

        $i1 = $i1 + 1;

        goto label07;

     label08:
        $r9 = virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int)>("PBEWithSHAAndTwofish-CBC", 2, $r2, $r3, $i1);

        goto label06;

     label09:
        $z0 = virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: boolean isSameAs(byte[],byte[])>($r3, $r12);

        if $z0 != 0 goto label10;

        $r7 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        virtualinvoke $r7.<java.util.Hashtable: void clear()>();

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("KeyStore integrity check failed.");

        throw $r8;

     label10:
        return;
    }

    public void engineStore(java.io.OutputStream, char[]) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore $r0;
        java.io.OutputStream $r1;
        char[] $r2;
        byte[] $r3;
        int $i0, $i1;
        javax.crypto.CipherOutputStream $r4;
        java.io.DataOutputStream $r5;
        org.bouncycastle.crypto.io.DigestOutputStream $r6;
        java.security.SecureRandom $r7;
        javax.crypto.Cipher $r8;
        org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest $r9;
        org.bouncycastle.crypto.Digest $r10;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore$BouncyCastleStore;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: char[];

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r3 = newarray (byte)[20];

        $r7 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random>;

        $i0 = virtualinvoke $r7.<java.util.Random: int nextInt()>();

        $i0 = $i0 & 1023;

        $i0 = $i0 + 1024;

        $r7 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random>;

        virtualinvoke $r7.<java.security.SecureRandom: void nextBytes(byte[])>($r3);

        virtualinvoke $r5.<java.io.DataOutputStream: void writeInt(int)>(1);

        $i1 = lengthof $r3;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeInt(int)>($i1);

        virtualinvoke $r5.<java.io.FilterOutputStream: void write(byte[])>($r3);

        virtualinvoke $r5.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $r8 = virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: javax.crypto.Cipher makePBECipher(java.lang.String,int,char[],byte[],int)>("PBEWithSHAAndTwofish-CBC", 1, $r2, $r3, $i0);

        $r4 = new javax.crypto.CipherOutputStream;

        specialinvoke $r4.<javax.crypto.CipherOutputStream: void <init>(java.io.OutputStream,javax.crypto.Cipher)>($r5, $r8);

        $r6 = new org.bouncycastle.crypto.io.DigestOutputStream;

        $r9 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest: org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest getInstance(java.lang.String)>("SHA-1");

        specialinvoke $r6.<org.bouncycastle.crypto.io.DigestOutputStream: void <init>(java.io.OutputStream,org.bouncycastle.crypto.Digest)>($r4, $r9);

        virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void saveStore(java.io.OutputStream)>($r6);

        $r10 = virtualinvoke $r6.<org.bouncycastle.crypto.io.DigestOutputStream: org.bouncycastle.crypto.Digest getDigest()>();

        $i0 = interfaceinvoke $r10.<org.bouncycastle.crypto.Digest: int getDigestSize()>();

        $r3 = newarray (byte)[$i0];

        interfaceinvoke $r10.<org.bouncycastle.crypto.Digest: int doFinal(byte[],int)>($r3, 0);

        virtualinvoke $r4.<javax.crypto.CipherOutputStream: void write(byte[])>($r3);

        virtualinvoke $r4.<javax.crypto.CipherOutputStream: void close()>();

        return;
    }
}
