public class org.apache.harmony.awt.gl.render.NativeImageBlitter extends java.lang.Object implements org.apache.harmony.awt.gl.render.Blitter
{
    static final org.apache.harmony.awt.gl.render.NativeImageBlitter inst;

    static void <clinit>()
    {
        org.apache.harmony.awt.gl.render.NativeImageBlitter $r0;

        $r0 = new org.apache.harmony.awt.gl.render.NativeImageBlitter;

        specialinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void <init>()>();

        <org.apache.harmony.awt.gl.render.NativeImageBlitter: org.apache.harmony.awt.gl.render.NativeImageBlitter inst> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.awt.gl.render.NativeImageBlitter $r0;

        $r0 := @this: org.apache.harmony.awt.gl.render.NativeImageBlitter;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private native void blt(int, int, long, java.lang.Object, int, int, long, java.lang.Object, int, int, int, float, int[], boolean);

    private native void bltBG(int, int, long, java.lang.Object, int, int, long, java.lang.Object, int, int, int, int, float, int[], boolean);

    public static org.apache.harmony.awt.gl.render.NativeImageBlitter getInstance()
    {
        org.apache.harmony.awt.gl.render.NativeImageBlitter r0;

        r0 = <org.apache.harmony.awt.gl.render.NativeImageBlitter: org.apache.harmony.awt.gl.render.NativeImageBlitter inst>;

        return r0;
    }

    private native void xor(int, int, long, java.lang.Object, int, int, long, java.lang.Object, int, int, int, int[], boolean);

    public void blit(int, int, org.apache.harmony.awt.gl.Surface, int, int, org.apache.harmony.awt.gl.Surface, int, int, java.awt.Composite, java.awt.Color, org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.render.NativeImageBlitter $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10;
        org.apache.harmony.awt.gl.Surface $r1, $r5, $r14;
        java.awt.Composite $r2;
        org.apache.harmony.awt.gl.MultiRectArea $r3;
        java.awt.image.BufferedImage $r4;
        java.awt.Color $r6;
        boolean $z0;
        org.apache.harmony.awt.gl.render.JavaBlitter $r7;
        long $l6, $l7;
        java.lang.Object $r8, $r10;
        int[] $r9, $r12;
        java.awt.AlphaComposite $r11;
        float $f0;
        org.apache.harmony.awt.gl.XORComposite $r13;

        $r0 := @this: org.apache.harmony.awt.gl.render.NativeImageBlitter;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r5 := @parameter2: org.apache.harmony.awt.gl.Surface;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: org.apache.harmony.awt.gl.Surface;

        $i4 := @parameter6: int;

        $i5 := @parameter7: int;

        $r2 := @parameter8: java.awt.Composite;

        $r6 := @parameter9: java.awt.Color;

        $r3 := @parameter10: org.apache.harmony.awt.gl.MultiRectArea;

        $z0 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: boolean isNativeDrawable()>();

        if $z0 != 0 goto label1;

        $r7 = <org.apache.harmony.awt.gl.render.JavaBlitter: org.apache.harmony.awt.gl.render.JavaBlitter inst>;

        virtualinvoke $r7.<org.apache.harmony.awt.gl.render.JavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r5, $i2, $i3, $r1, $i4, $i5, $r2, $r6, $r3);

        return;

     label1:
        $l6 = virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: long getSurfaceDataPtr()>();

        $r8 = virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: java.lang.Object getData()>();

        if $r3 == null goto label4;

        $r9 = $r3.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

     label2:
        $z0 = $r5 instanceof org.apache.harmony.awt.gl.ImageSurface;

        if $z0 != 0 goto label3;

        $r5 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface()>();

        if $r6 == null goto label3;

        $r6 = null;

     label3:
        $l7 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: long getSurfaceDataPtr()>();

        $r10 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: java.lang.Object getData()>();

        $z0 = $r2 instanceof java.awt.AlphaComposite;

        if $z0 == 0 goto label6;

        $r11 = (java.awt.AlphaComposite) $r2;

        $i8 = virtualinvoke $r11.<java.awt.AlphaComposite: int getRule()>();

        $f0 = virtualinvoke $r11.<java.awt.AlphaComposite: float getAlpha()>();

        if $r6 == null goto label5;

        $i9 = virtualinvoke $r6.<java.awt.Color: int getRGB()>();

        $z0 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: boolean invalidated()>();

        specialinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void bltBG(int,int,long,java.lang.Object,int,int,long,java.lang.Object,int,int,int,int,float,int[],boolean)>($i0, $i1, $l7, $r10, $i2, $i3, $l6, $r8, $i4, $i5, $i9, $i8, $f0, $r9, $z0);

        virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: void invalidate()>();

        virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: void validate()>();

        return;

     label4:
        $r12 = newarray (int)[5];

        $r9 = $r12;

        $r12[0] = 5;

        $r12[1] = 0;

        $r12[2] = 0;

        $i8 = virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $r12[3] = $i8;

        $i8 = virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r12[4] = $i8;

        goto label2;

     label5:
        $z0 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: boolean invalidated()>();

        specialinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void blt(int,int,long,java.lang.Object,int,int,long,java.lang.Object,int,int,int,float,int[],boolean)>($i0, $i1, $l7, $r10, $i2, $i3, $l6, $r8, $i4, $i5, $i8, $f0, $r9, $z0);

        virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: void invalidate()>();

        virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: void validate()>();

        return;

     label6:
        $z0 = $r2 instanceof org.apache.harmony.awt.gl.XORComposite;

        if $z0 == 0 goto label7;

        $r13 = (org.apache.harmony.awt.gl.XORComposite) $r2;

        $r6 = virtualinvoke $r13.<org.apache.harmony.awt.gl.XORComposite: java.awt.Color getXORColor()>();

        $i8 = virtualinvoke $r6.<java.awt.Color: int getRGB()>();

        $z0 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: boolean invalidated()>();

        specialinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void xor(int,int,long,java.lang.Object,int,int,long,java.lang.Object,int,int,int,int[],boolean)>($i0, $i1, $l7, $r10, $i2, $i3, $l6, $r8, $i4, $i5, $i8, $r9, $z0);

        virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: void invalidate()>();

        virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: void validate()>();

        return;

     label7:
        $z0 = $r5 instanceof org.apache.harmony.awt.gl.ImageSurface;

        if $z0 == 0 goto label8;

        $r7 = <org.apache.harmony.awt.gl.render.JavaBlitter: org.apache.harmony.awt.gl.render.JavaBlitter inst>;

        virtualinvoke $r7.<org.apache.harmony.awt.gl.render.JavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r5, $i2, $i3, $r1, $i4, $i5, $r2, $r6, $r3);

        return;

     label8:
        $i8 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i9 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r4 = new java.awt.image.BufferedImage;

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i8, $i9, 1);

        $r14 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r4);

        $l6 = virtualinvoke $r14.<org.apache.harmony.awt.gl.Surface: long getSurfaceDataPtr()>();

        $r8 = virtualinvoke $r14.<org.apache.harmony.awt.gl.Surface: java.lang.Object getData()>();

        $r9 = newarray (int)[5];

        $r9[0] = 5;

        $r9[1] = 0;

        $r9[2] = 0;

        $i10 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $r9[3] = $i10;

        $i10 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r9[4] = $i10;

        $z0 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: boolean invalidated()>();

        specialinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void blt(int,int,long,java.lang.Object,int,int,long,java.lang.Object,int,int,int,float,int[],boolean)>(0, 0, $l7, $r10, 0, 0, $l6, $r8, $i8, $i9, 3, 1.0F, $r9, $z0);

        virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: void validate()>();

        $r7 = <org.apache.harmony.awt.gl.render.JavaBlitter: org.apache.harmony.awt.gl.render.JavaBlitter inst>;

        virtualinvoke $r7.<org.apache.harmony.awt.gl.render.JavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r14, $i2, $i3, $r1, $i4, $i5, $r2, $r6, $r3);

        return;
    }

    public void blit(int, int, org.apache.harmony.awt.gl.Surface, int, int, org.apache.harmony.awt.gl.Surface, int, int, java.awt.geom.AffineTransform, java.awt.Composite, java.awt.Color, org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.render.NativeImageBlitter $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.apache.harmony.awt.gl.Surface $r1, $r2, $r9;
        java.awt.geom.AffineTransform $r3;
        java.awt.Composite $r4;
        java.awt.Color $r5;
        org.apache.harmony.awt.gl.MultiRectArea $r6;
        java.awt.image.BufferedImage $r7;
        boolean $z0;
        org.apache.harmony.awt.gl.render.JavaBlitter $r8;
        double $d0, $d1;
        java.awt.AlphaComposite $r10;

        $r0 := @this: org.apache.harmony.awt.gl.render.NativeImageBlitter;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.harmony.awt.gl.Surface;

        $i4 := @parameter3: int;

        $i5 := @parameter4: int;

        $r2 := @parameter5: org.apache.harmony.awt.gl.Surface;

        $i2 := @parameter6: int;

        $i3 := @parameter7: int;

        $r3 := @parameter8: java.awt.geom.AffineTransform;

        $r4 := @parameter9: java.awt.Composite;

        $r5 := @parameter10: java.awt.Color;

        $r6 := @parameter11: org.apache.harmony.awt.gl.MultiRectArea;

        $z0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: boolean isNativeDrawable()>();

        if $z0 != 0 goto label1;

        $r8 = <org.apache.harmony.awt.gl.render.JavaBlitter: org.apache.harmony.awt.gl.render.JavaBlitter inst>;

        virtualinvoke $r8.<org.apache.harmony.awt.gl.render.JavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r1, $i4, $i5, $r2, $i2, $i3, $r3, $r4, $r5, $r6);

        return;

     label1:
        $i6 = virtualinvoke $r3.<java.awt.geom.AffineTransform: int getType()>();

        lookupswitch($i6)
        {
            case 0: goto label4;
            case 1: goto label3;
            default: goto label2;
        };

     label2:
        $z0 = $r1 instanceof org.apache.harmony.awt.gl.ImageSurface;

        if $z0 == 0 goto label5;

        $r8 = <org.apache.harmony.awt.gl.render.JavaBlitter: org.apache.harmony.awt.gl.render.JavaBlitter inst>;

        virtualinvoke $r8.<org.apache.harmony.awt.gl.render.JavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r1, $i4, $i5, $r2, $i2, $i3, $r3, $r4, $r5, $r6);

        return;

     label3:
        $d0 = (double) $i4;

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d0 = $d0 + $d1;

        $i4 = (int) $d0;

        $d0 = (double) $i5;

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d0 = $d0 + $d1;

        $i5 = (int) $d0;

     label4:
        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r1, $i4, $i5, $r2, $i2, $i3, $r4, $r5, $r6);

        return;

     label5:
        $i6 = virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i7 = virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r7 = new java.awt.image.BufferedImage;

        specialinvoke $r7.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i6, $i7, 1);

        $r9 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r7);

        $r10 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r1, 0, 0, $r9, $i6, $i7, $r10, null, null);

        $r8 = <org.apache.harmony.awt.gl.render.JavaBlitter: org.apache.harmony.awt.gl.render.JavaBlitter inst>;

        virtualinvoke $r8.<org.apache.harmony.awt.gl.render.JavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r9, $i4, $i5, $r2, $i2, $i3, $r3, $r4, $r5, $r6);

        return;
    }

    public void blit(int, int, org.apache.harmony.awt.gl.Surface, int, int, org.apache.harmony.awt.gl.Surface, int, int, java.awt.geom.AffineTransform, java.awt.geom.AffineTransform, java.awt.Composite, java.awt.Color, org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.render.NativeImageBlitter $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.harmony.awt.gl.Surface $r1, $r2;
        java.awt.geom.AffineTransform $r3, $r4, $r8;
        java.awt.Composite $r5;
        java.awt.Color $r6;
        org.apache.harmony.awt.gl.MultiRectArea $r7;
        double $d0, $d1, $d2;
        boolean $z0;
        org.apache.harmony.awt.gl.render.JavaBlitter $r9;

        $r0 := @this: org.apache.harmony.awt.gl.render.NativeImageBlitter;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.harmony.awt.gl.Surface;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 := @parameter5: org.apache.harmony.awt.gl.Surface;

        $i4 := @parameter6: int;

        $i5 := @parameter7: int;

        $r3 := @parameter8: java.awt.geom.AffineTransform;

        $r4 := @parameter9: java.awt.geom.AffineTransform;

        $r5 := @parameter10: java.awt.Composite;

        $r6 := @parameter11: java.awt.Color;

        $r7 := @parameter12: org.apache.harmony.awt.gl.MultiRectArea;

        $z0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.Surface: boolean isNativeDrawable()>();

        if $z0 != 0 goto label1;

        $r9 = <org.apache.harmony.awt.gl.render.JavaBlitter: org.apache.harmony.awt.gl.render.JavaBlitter inst>;

        virtualinvoke $r9.<org.apache.harmony.awt.gl.render.JavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r1, $i2, $i3, $r2, $i4, $i5, $r3, $r4, $r5, $r6, $r7);

        return;

     label1:
        if $r4 != null goto label2;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r1, $i2, $i3, $r2, $i4, $i5, $r3, $r5, $r6, $r7);

        return;

     label2:
        $d0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d2 = (double) $i2;

        $d0 = $d2 / $d0;

        $d2 = (double) $i3;

        $d1 = $d2 / $d1;

        $r8 = new java.awt.geom.AffineTransform;

        specialinvoke $r8.<java.awt.geom.AffineTransform: void <init>()>();

        virtualinvoke $r8.<java.awt.geom.AffineTransform: void setToTranslation(double,double)>($d0, $d1);

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r8);

        virtualinvoke $r3.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r4);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.NativeImageBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $r1, 0, 0, $r2, $i4, $i5, $r3, $r5, $r6, $r7);

        return;
    }
}
