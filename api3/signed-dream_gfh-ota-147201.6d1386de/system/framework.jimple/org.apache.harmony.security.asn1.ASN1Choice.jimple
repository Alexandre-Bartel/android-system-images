public abstract class org.apache.harmony.security.asn1.ASN1Choice extends org.apache.harmony.security.asn1.ASN1Type
{
    private final int[][] identifiers;
    public final org.apache.harmony.security.asn1.ASN1Type[] type;

    public void <init>(org.apache.harmony.security.asn1.ASN1Type[])
    {
        org.apache.harmony.security.asn1.ASN1Choice $r0, $r8;
        org.apache.harmony.security.asn1.ASN1Type[] $r1;
        int[][] $r2;
        java.util.TreeMap $r3;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        org.apache.harmony.security.asn1.ASN1Type $r7;
        boolean $z0;
        int[] $r9;
        java.lang.Object $r10;
        java.util.Set $r11;
        java.util.Iterator $r12;
        java.math.BigInteger $r13;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        $r1 := @parameter0: org.apache.harmony.security.asn1.ASN1Type[];

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Type: void <init>(int)>(0);

        $i0 = lengthof $r1;

        if $i0 != 0 goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.10E", $r6);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label01:
        $r3 = new java.util.TreeMap;

        specialinvoke $r3.<java.util.TreeMap: void <init>()>();

        $i0 = 0;

     label02:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label08;

        $r7 = $r1[$i0];

        $z0 = $r7 instanceof org.apache.harmony.security.asn1.ASN1Any;

        if $z0 == 0 goto label03;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.10F", $r6);

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label03:
        $z0 = $r7 instanceof org.apache.harmony.security.asn1.ASN1Choice;

        if $z0 == 0 goto label05;

        $r8 = (org.apache.harmony.security.asn1.ASN1Choice) $r7;

        $r2 = $r8.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $i1 = 0;

     label04:
        $r9 = $r2[0];

        $i2 = lengthof $r9;

        if $i1 >= $i2 goto label07;

        $r9 = $r2[0];

        $i2 = $r9[$i1];

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>($r3, $i2, $i0);

        $i1 = $i1 + 1;

        goto label04;

     label05:
        $i1 = $r7.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        $z0 = virtualinvoke $r7.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i1);

        if $z0 == 0 goto label06;

        $i1 = $r7.<org.apache.harmony.security.asn1.ASN1Type: int id>;

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>($r3, $i1, $i0);

     label06:
        $i1 = $r7.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        $z0 = virtualinvoke $r7.<org.apache.harmony.security.asn1.ASN1Type: boolean checkTag(int)>($i1);

        if $z0 == 0 goto label07;

        $i1 = $r7.<org.apache.harmony.security.asn1.ASN1Type: int constrId>;

        specialinvoke $r0.<org.apache.harmony.security.asn1.ASN1Choice: void addIdentifier(java.util.TreeMap,int,int)>($r3, $i1, $i0);

     label07:
        $i0 = $i0 + 1;

        goto label02;

     label08:
        $i0 = virtualinvoke $r3.<java.util.TreeMap: int size()>();

        $r9 = newarray (int)[2];

        $r9[0] = 2;

        $r9[1] = $i0;

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int[])>($r5, $r9);

        $r2 = (int[][]) $r10;

        $r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers> = $r2;

        $r11 = virtualinvoke $r3.<java.util.TreeMap: java.util.Set keySet()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

        $i1 = 0;

     label09:
        if $i1 >= $i0 goto label10;

        $r10 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (java.math.BigInteger) $r10;

        $r2 = $r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r9 = $r2[0];

        $i2 = virtualinvoke $r13.<java.math.BigInteger: int intValue()>();

        $r9[$i1] = $i2;

        $r2 = $r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r9 = $r2[1];

        $r10 = virtualinvoke $r3.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>($r13);

        $r13 = (java.math.BigInteger) $r10;

        $i2 = virtualinvoke $r13.<java.math.BigInteger: int intValue()>();

        $r9[$i1] = $i2;

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $r0.<org.apache.harmony.security.asn1.ASN1Choice: org.apache.harmony.security.asn1.ASN1Type[] type> = $r1;

        return;
    }

    private void addIdentifier(java.util.TreeMap, int, int)
    {
        org.apache.harmony.security.asn1.ASN1Choice $r0;
        java.util.TreeMap $r1;
        int $i0, $i1;
        long $l2;
        java.math.BigInteger $r2, $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.Class $r6;
        java.lang.String $r7;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        $r1 := @parameter0: java.util.TreeMap;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $l2 = (long) $i0;

        $r2 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $l2 = (long) $i1;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l2);

        $r4 = virtualinvoke $r1.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $r4 == null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r7 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.10F", $r7);

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label1:
        return;
    }

    public final boolean checkTag(int)
    {
        org.apache.harmony.security.asn1.ASN1Choice $r0;
        int $i0;
        int[][] $r1;
        int[] $r2;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r2 = $r1[0];

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r2, $i0);

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.ASN1Choice $r0;
        org.apache.harmony.security.asn1.BerInputStream $r1;
        int[][] $r2;
        int[] $r3;
        int $i0;
        org.apache.harmony.security.asn1.ASN1Exception $r4;
        java.lang.Class $r5;
        java.lang.String $r6;
        org.apache.harmony.security.asn1.ASN1Type[] $r7;
        org.apache.harmony.security.asn1.ASN1Type $r8;
        java.lang.Object $r9;
        boolean $z0;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerInputStream;

        $r2 = $r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r3 = $r2[0];

        $i0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: int tag>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r3, $i0);

        if $i0 >= 0 goto label1;

        $r4 = new org.apache.harmony.security.asn1.ASN1Exception;

        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("security.110", $r6);

        specialinvoke $r4.<org.apache.harmony.security.asn1.ASN1Exception: void <init>(java.lang.String)>($r6);

        throw $r4;

     label1:
        $r2 = $r0.<org.apache.harmony.security.asn1.ASN1Choice: int[][] identifiers>;

        $r3 = $r2[1];

        $i0 = $r3[$i0];

        $r7 = $r0.<org.apache.harmony.security.asn1.ASN1Choice: org.apache.harmony.security.asn1.ASN1Type[] type>;

        $r8 = $r7[$i0];

        $r9 = virtualinvoke $r8.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(org.apache.harmony.security.asn1.BerInputStream)>($r1);

        $r1.<org.apache.harmony.security.asn1.BerInputStream: java.lang.Object content> = $r9;

        $r1.<org.apache.harmony.security.asn1.BerInputStream: int choiceIndex> = $i0;

        $z0 = $r1.<org.apache.harmony.security.asn1.BerInputStream: boolean isVerify>;

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r9 = virtualinvoke $r0.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object getDecodedObject(org.apache.harmony.security.asn1.BerInputStream)>($r1);

        return $r9;
    }

    public void encodeASN(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice $r0;
        org.apache.harmony.security.asn1.BerOutputStream $r1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke $r0.<org.apache.harmony.security.asn1.ASN1Choice: void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)>($r1);

        return;
    }

    public final void encodeContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice $r0;
        org.apache.harmony.security.asn1.BerOutputStream $r1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke $r1.<org.apache.harmony.security.asn1.BerOutputStream: void encodeChoice(org.apache.harmony.security.asn1.ASN1Choice)>($r0);

        return;
    }

    public abstract int getIndex(java.lang.Object);

    public abstract java.lang.Object getObjectToEncode(java.lang.Object);

    public final void setEncodingContent(org.apache.harmony.security.asn1.BerOutputStream)
    {
        org.apache.harmony.security.asn1.ASN1Choice $r0;
        org.apache.harmony.security.asn1.BerOutputStream $r1;

        $r0 := @this: org.apache.harmony.security.asn1.ASN1Choice;

        $r1 := @parameter0: org.apache.harmony.security.asn1.BerOutputStream;

        virtualinvoke $r1.<org.apache.harmony.security.asn1.BerOutputStream: void getChoiceLength(org.apache.harmony.security.asn1.ASN1Choice)>($r0);

        return;
    }
}
