public abstract class org.apache.harmony.awt.gl.font.FontPeerImpl extends java.lang.Object implements java.awt.peer.FontPeer
{
    int ascent;
    private boolean createdFromStream;
    public char defaultChar;
    int descent;
    org.apache.harmony.awt.gl.font.FontExtraMetrics extraMetrix;
    java.lang.String faceName;
    java.lang.String fontFamilyName;
    int fontType;
    float height;
    float italicAngle;
    int leading;
    int logicalHeight;
    int maxAdvance;
    java.awt.geom.Rectangle2D maxCharBounds;
    java.lang.String name;
    org.apache.harmony.awt.gl.font.LineMetricsImpl nlm;
    int numGlyphs;
    long pFont;
    java.lang.String psName;
    int size;
    int style;
    private java.lang.String tempFontFileName;
    boolean uniformLM;

    public void <init>()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: float italicAngle> = 0.0F;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int numGlyphs> = 0;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String psName> = null;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: char defaultChar> = 65535;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean uniformLM> = 1;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int fontType> = 0;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean createdFromStream> = 0;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String tempFontFileName> = null;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.FontExtraMetrics extraMetrix> = null;

        return;
    }

    public abstract boolean canDisplay(char);

    public int charWidth(char)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        char $c0;
        char[] $r1;
        float[] $r2;
        com.android.internal.awt.AndroidGraphics2D $r3;
        java.lang.RuntimeException $r4;
        android.graphics.Paint $r5;
        float $f0;
        int $i1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $c0 := @parameter0: char;

        $r3 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidGraphics2D getInstance()>();

        if $r3 != null goto label1;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("AndroidGraphics2D not instantiated!");

        throw $r4;

     label1:
        $r5 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint getAndroidPaint()>();

        $r1 = newarray (char)[1];

        $r1[0] = $c0;

        $r2 = newarray (float)[1];

        virtualinvoke $r5.<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>($r1, 0, 1, $r2);

        $f0 = $r2[0];

        $i1 = (int) $f0;

        return $i1;
    }

    public int charWidth(int)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int $i0;
        char $c1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $i0 := @parameter0: int;

        $c1 = (char) $i0;

        $i0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int charWidth(char)>($c1);

        return $i0;
    }

    public abstract void dispose();

    protected void finalize() throws java.lang.Throwable
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        specialinvoke $r0.<java.lang.Object: void finalize()>();

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: void dispose()>();

        return;
    }

    public int getAscent()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        com.android.internal.awt.AndroidGraphics2D $r1;
        java.lang.RuntimeException $r2;
        android.graphics.Paint $r3;
        float $f0;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidGraphics2D getInstance()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("AndroidGraphics2D not instantiated!");

        throw $r2;

     label1:
        $r3 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint getAndroidPaint()>();

        $f0 = virtualinvoke $r3.<android.graphics.Paint: float ascent()>();

        $i0 = (int) $f0;

        return $i0;
    }

    public abstract org.apache.harmony.awt.gl.font.Glyph getDefaultGlyph();

    public int getDescent()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int descent>;

        return i0;
    }

    public abstract org.apache.harmony.awt.gl.font.FontExtraMetrics getExtraMetrics();

    public java.lang.String getFamily()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String fontFamilyName>;

        return r1;
    }

    public java.lang.String getFamily(java.util.Locale)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.util.Locale $r1;
        java.lang.String $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: java.util.Locale;

        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String getFamily()>();

        return $r2;
    }

    public long getFontHandle()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        long l0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        l0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: long pFont>;

        return l0;
    }

    public java.lang.String getFontName()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int $i0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int fontType>;

        if $i0 != 2 goto label1;

        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String fontFamilyName>;

        return r1;

     label1:
        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String faceName>;

        return r1;
    }

    public java.lang.String getFontName(java.util.Locale)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.util.Locale $r1;
        java.lang.String $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: java.util.Locale;

        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String getFontName()>();

        return $r2;
    }

    public int getFontType()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int fontType>;

        return i0;
    }

    public abstract org.apache.harmony.awt.gl.font.Glyph getGlyph(char);

    public org.apache.harmony.awt.gl.font.Glyph[] getGlyphs(char, char)
    {
        char $c0, $c1;
        int $i2;
        java.util.ArrayList $r0;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;
        org.apache.harmony.awt.gl.font.Glyph $r4;
        java.lang.Object[] $r5;
        org.apache.harmony.awt.gl.font.Glyph[] $r6;

        $r1 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $c0 := @parameter0: char;

        $c1 := @parameter1: char;

        $i2 = $c1 - $c0;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i2);

        $i2 = $r1.<org.apache.harmony.awt.gl.font.FontPeerImpl: int size>;

        if $i2 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String)>("awt.09");

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        if $c0 >= $c1 goto label2;

        $r4 = virtualinvoke $r1.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.Glyph getGlyph(char)>($c0);

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object[] toArray()>();

        $r6 = (org.apache.harmony.awt.gl.font.Glyph[]) $r5;

        $r6 = (org.apache.harmony.awt.gl.font.Glyph[]) $r6;

        return $r6;
    }

    public org.apache.harmony.awt.gl.font.Glyph[] getGlyphs(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.lang.String $r1;
        char[] $r2;
        org.apache.harmony.awt.gl.font.Glyph[] $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.Glyph[] getGlyphs(char[])>($r2);

        return $r3;
    }

    public org.apache.harmony.awt.gl.font.Glyph[] getGlyphs(char[])
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        char[] $r1;
        org.apache.harmony.awt.gl.font.Glyph[] $r2;
        org.apache.harmony.awt.gl.font.Glyph $r3;
        int $i0, $i1;
        char $c2;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: char[];

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = lengthof $r1;

        $r2 = newarray (org.apache.harmony.awt.gl.font.Glyph)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $c2 = $r1[$i0];

        $r3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.Glyph getGlyph(char)>($c2);

        $r2[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return $r2;
    }

    public float getHeight()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        float f0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        f0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: float height>;

        return f0;
    }

    public float getItalicAngle()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        float f0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        f0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: float italicAngle>;

        return f0;
    }

    public int getLeading()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int leading>;

        return i0;
    }

    public java.awt.font.LineMetrics getLineMetrics()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        org.apache.harmony.awt.gl.font.LineMetricsImpl r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.LineMetricsImpl nlm>;

        return r1;
    }

    public abstract java.awt.font.LineMetrics getLineMetrics(java.lang.String, java.awt.font.FontRenderContext, java.awt.geom.AffineTransform);

    public int getLogicalHeight()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int logicalHeight>;

        return i0;
    }

    public java.awt.geom.Rectangle2D getMaxCharBounds(java.awt.font.FontRenderContext)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.awt.font.FontRenderContext $r1;
        java.awt.geom.Rectangle2D r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: java.awt.font.FontRenderContext;

        r2 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.awt.geom.Rectangle2D maxCharBounds>;

        return r2;
    }

    public abstract int getMissingGlyphCode();

    public java.lang.String getName()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String name>;

        return r1;
    }

    public int getNumGlyphs()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int numGlyphs>;

        return i0;
    }

    public abstract java.lang.String getPSName();

    public int getSize()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int size>;

        return i0;
    }

    public int getStyle()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        i0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int style>;

        return i0;
    }

    public java.lang.String getTempFontFileName()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        r1 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String tempFontFileName>;

        return r1;
    }

    public boolean hasUniformLineMetrics()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        z0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean uniformLM>;

        return z0;
    }

    public boolean isCreatedFromStream()
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        z0 = $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean createdFromStream>;

        return z0;
    }

    public void setCreatedFromStream(boolean)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: boolean createdFromStream> = $z0;

        return;
    }

    public void setFamily(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: java.lang.String;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String fontFamilyName> = $r1;

        return;
    }

    public void setFontFileName(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: java.lang.String;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String tempFontFileName> = $r1;

        return;
    }

    public void setFontName(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: java.lang.String;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String faceName> = $r1;

        return;
    }

    public void setFontType(int)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $i0 := @parameter0: int;

        if $i0 == 2 goto label1;

        if $i0 != 4 goto label2;

     label1:
        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int fontType> = $i0;

        return;

     label2:
        return;
    }

    public void setLogicalHeight(int)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $i0 := @parameter0: int;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: int logicalHeight> = $i0;

        return;
    }

    public void setPSName(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.FontPeerImpl $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $r1 := @parameter0: java.lang.String;

        $r0.<org.apache.harmony.awt.gl.font.FontPeerImpl: java.lang.String psName> = $r1;

        return;
    }
}
