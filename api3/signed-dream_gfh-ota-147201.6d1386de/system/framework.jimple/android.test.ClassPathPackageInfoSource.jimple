public class android.test.ClassPathPackageInfoSource extends java.lang.Object
{
    private static final java.lang.String CLASS_EXTENSION;
    private static final java.lang.ClassLoader CLASS_LOADER;
    private static java.lang.String[] apkPaths;
    private final android.test.SimpleCache cache;
    private java.lang.ClassLoader classLoader;
    private final java.lang.String[] classPath;
    private final java.util.Map jarFiles;

    static void <clinit>()
    {
        java.lang.ClassLoader $r0;
        java.lang.Class $r1;

        <android.test.ClassPathPackageInfoSource: java.lang.String CLASS_EXTENSION> = ".class";

        $r1 = class "android/test/ClassPathPackageInfoSource";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        <android.test.ClassPathPackageInfoSource: java.lang.ClassLoader CLASS_LOADER> = $r0;

        return;
    }

    void <init>()
    {
        android.test.ClassPathPackageInfoSource $r0;
        android.test.ClassPathPackageInfoSource$1 $r1;
        java.util.HashMap $r2;
        java.lang.String[] $r3;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new android.test.ClassPathPackageInfoSource$1;

        specialinvoke $r1.<android.test.ClassPathPackageInfoSource$1: void <init>(android.test.ClassPathPackageInfoSource)>($r0);

        $r0.<android.test.ClassPathPackageInfoSource: android.test.SimpleCache cache> = $r1;

        $r2 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

        $r0.<android.test.ClassPathPackageInfoSource: java.util.Map jarFiles> = $r2;

        $r3 = staticinvoke <android.test.ClassPathPackageInfoSource: java.lang.String[] getClassPath()>();

        $r0.<android.test.ClassPathPackageInfoSource: java.lang.String[] classPath> = $r3;

        return;
    }

    static android.test.ClassPathPackageInfo access$000(android.test.ClassPathPackageInfoSource, java.lang.String)
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.lang.String $r1;
        android.test.ClassPathPackageInfo $r2;

        $r0 := @parameter0: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter1: java.lang.String;

        $r2 = specialinvoke $r0.<android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfo createPackageInfo(java.lang.String)>($r1);

        return $r2;
    }

    private android.test.ClassPathPackageInfo createPackageInfo(java.lang.String)
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.lang.String $r1, $r7;
        java.util.TreeSet $r2, $r3;
        java.util.HashSet $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        java.lang.ClassLoader $r8;
        java.lang.Class $r9;
        java.lang.ClassNotFoundException $r10;
        java.lang.StringBuilder $r11;
        android.test.ClassPathPackageInfo $r12;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter0: java.lang.String;

        $r3 = new java.util.TreeSet;

        specialinvoke $r3.<java.util.TreeSet: void <init>()>();

        $r2 = new java.util.TreeSet;

        specialinvoke $r2.<java.util.TreeSet: void <init>()>();

        $r4 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        specialinvoke $r0.<android.test.ClassPathPackageInfoSource: void findClasses(java.lang.String,java.util.Set,java.util.Set)>($r1, $r2, $r3);

        $r5 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".R");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".Manifest");

        if $z0 != 0 goto label1;

        $r8 = $r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader>;

        if $r8 == null goto label5;

        $r8 = $r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader>;

     label2:
        $r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r7, 0, $r8);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r9);

     label3:
        goto label1;

     label4:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot load class. Make sure it is in your apk. Class name: \'");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Message: ");

        $r7 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ClassPathPackageInfoSource", $r7, $r10);

        goto label1;

     label5:
        $r8 = <android.test.ClassPathPackageInfoSource: java.lang.ClassLoader CLASS_LOADER>;

        goto label2;

     label6:
        $r12 = new android.test.ClassPathPackageInfo;

        specialinvoke $r12.<android.test.ClassPathPackageInfo: void <init>(android.test.ClassPathPackageInfoSource,java.lang.String,java.util.Set,java.util.Set)>($r0, $r1, $r3, $r4);

        return $r12;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
    }

    private void findClasses(java.lang.String, java.util.Set, java.util.Set)
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.lang.String $r1, $r4, $r6, $r9, $r10, $r12;
        java.util.Set $r2, $r3;
        java.lang.String[] $r5, $r11;
        java.io.File $r7;
        java.lang.StringBuilder $r8;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.io.IOException $r13;
        java.lang.AssertionError $r14;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Set;

        $r3 := @parameter2: java.util.Set;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r11 = $r0.<android.test.ClassPathPackageInfoSource: java.lang.String[] classPath>;

        $i0 = lengthof $r11;

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label17;

        $r6 = $r11[$i1];

        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r6);

        $z0 = virtualinvoke $r7.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label03;

     label02:
        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z0 == 0 goto label04;

        specialinvoke $r0.<android.test.ClassPathPackageInfoSource: void findClassesInApk(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r6, $r1, $r2, $r3);

     label03:
        $i1 = $i1 + 1;

        goto label01;

     label04:
        $r4 = "true";

        $r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("android.vm.dexfile", "false");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z0 == 0 goto label09;

     label05:
        $r5 = <android.test.ClassPathPackageInfoSource: java.lang.String[] apkPaths>;

        $i2 = lengthof $r5;

        $i3 = 0;

     label06:
        if $i3 >= $i2 goto label03;

        $r4 = $r5[$i3];

     label07:
        $r7 = new java.io.File;

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r4);

        specialinvoke $r0.<android.test.ClassPathPackageInfoSource: void scanForApkFiles(java.io.File,java.lang.String,java.util.Set,java.util.Set)>($r7, $r1, $r2, $r3);

     label08:
        $i3 = $i3 + 1;

        goto label06;

     label09:
        $z0 = virtualinvoke $r6.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z0 == 0 goto label12;

        specialinvoke $r0.<android.test.ClassPathPackageInfoSource: void findClassesInJar(java.io.File,java.lang.String,java.util.Set,java.util.Set)>($r7, $r10, $r2, $r3);

     label10:
        goto label03;

     label11:
        $r13 := @caughtexception;

        $r14 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t read classpath entry ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r1 = virtualinvoke $r13.<java.lang.Throwable: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1);

        throw $r14;

     label12:
        $z0 = virtualinvoke $r7.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label14;

        specialinvoke $r0.<android.test.ClassPathPackageInfoSource: void findClassesInDirectory(java.io.File,java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r7, $r9, $r10, $r2, $r3);

     label13:
        goto label03;

     label14:
        $r14 = new java.lang.AssertionError;

     label15:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Don\'t understand classpath entry ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>($r1);

     label16:
        throw $r14;

     label17:
        return;

        catch java.io.IOException from label02 to label03 with label11;
        catch java.io.IOException from label04 to label05 with label11;
        catch java.io.IOException from label07 to label08 with label11;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.io.IOException from label12 to label13 with label11;
        catch java.io.IOException from label15 to label16 with label11;
    }

    private void findClassesInApk(java.lang.String, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.lang.String $r1, $r2, $r9;
        java.util.Set $r3, $r4;
        dalvik.system.DexFile $r5, $r6;
        java.util.Enumeration $r7;
        boolean $z0;
        java.lang.Object $r8;
        int $i0, $i1;
        java.io.IOException $r10, $r12;
        java.lang.Throwable $r11;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Set;

        $r4 := @parameter3: java.util.Set;

        $r6 = null;

     label01:
        $r5 = new dalvik.system.DexFile;

     label02:
        specialinvoke $r5.<dalvik.system.DexFile: void <init>(java.lang.String)>($r1);

     label03:
        $r7 = virtualinvoke $r5.<dalvik.system.DexFile: java.util.Enumeration entries()>();

     label04:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label13;

        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r1 = (java.lang.String) $r8;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label04;

        $r9 = $r2;

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 <= 0 goto label05;

        $r9 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label05:
        $i0 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= $i1 goto label08;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r9);

        goto label04;

     label06:
        $r10 := @caughtexception;

        $r6 = $r5;

     label07:
        if $r6 == null goto label17;

        return;

     label08:
        $z0 = staticinvoke <android.test.ClassPathPackageInfoSource: boolean isToplevelClass(java.lang.String)>($r1);

        if $z0 == 0 goto label04;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r1);

     label09:
        goto label04;

     label10:
        $r11 := @caughtexception;

        $r6 = $r5;

     label11:
        if $r6 == null goto label12;

     label12:
        throw $r11;

     label13:
        if $r5 == null goto label16;

        return;

     label14:
        $r11 := @caughtexception;

        goto label11;

     label15:
        $r12 := @caughtexception;

        goto label07;

     label16:
        return;

     label17:
        return;

        catch java.io.IOException from label02 to label03 with label15;
        catch java.lang.Throwable from label01 to label03 with label14;
        catch java.io.IOException from label03 to label06 with label06;
        catch java.io.IOException from label08 to label09 with label06;
        catch java.lang.Throwable from label03 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    private void findClassesInDirectory(java.io.File, java.lang.String, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.io.File $r1, $r6;
        java.lang.String $r2, $r3;
        java.util.Set $r4, $r5;
        int $i0, $i1;
        boolean $z0;
        java.io.File[] $r7;
        java.lang.StringBuilder $r8;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.util.Set;

        $r5 := @parameter4: java.util.Set;

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r3);

        $z0 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $r7 = virtualinvoke $r6.<java.io.File: java.io.File[] listFiles()>();

        $i0 = lengthof $r7;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

        $r1 = $r7[$i1];

        $r3 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 == 0 goto label3;

        $z0 = staticinvoke <android.test.ClassPathPackageInfoSource: boolean isToplevelClass(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = staticinvoke <android.test.ClassPathPackageInfoSource: java.lang.String getClassName(java.lang.String)>($r3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r3);

        goto label2;

     label4:
        return;

     label5:
        return;
    }

    private void findClassesInJar(java.io.File, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.io.File $r1;
        java.lang.String $r2, $r8;
        java.util.Set $r3, $r4, $r5;
        boolean $z0;
        int $i0, $i1;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Set;

        $r4 := @parameter3: java.util.Set;

        $r5 = specialinvoke $r0.<android.test.ClassPathPackageInfoSource: java.util.Set getJarEntries(java.io.File)>($r1);

        $z0 = interfaceinvoke $r5.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.lang.String) $r7;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke $r8.<java.lang.String: int indexOf(int,int)>(47, $i0);

        if $i1 < 0 goto label3;

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r8);

        goto label2;

     label3:
        $z0 = staticinvoke <android.test.ClassPathPackageInfoSource: boolean isToplevelClass(java.lang.String)>($r8);

        if $z0 == 0 goto label2;

        $r8 = staticinvoke <android.test.ClassPathPackageInfoSource: java.lang.String getClassName(java.lang.String)>($r8);

        $r8 = virtualinvoke $r8.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r8);

        goto label2;

     label4:
        return;
    }

    private static java.lang.String getClassName(java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        $r1 = ".class";

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = $i0 - $i1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;
    }

    private static java.lang.String[] getClassPath()
    {
        java.lang.String $r0, $r1;
        java.lang.String[] $r2;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("path.separator", ":");

        $r1 = staticinvoke <java.util.regex.Pattern: java.lang.String quote(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>($r1);

        return $r2;
    }

    private java.util.Set getJarEntries(java.io.File) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.io.File $r1;
        java.util.zip.ZipFile $r2;
        int $i0, $i1;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.util.Set $r5;
        java.util.HashSet $r6;
        java.util.Enumeration $r7;
        boolean $z0;
        java.util.zip.ZipEntry $r8;
        java.lang.String $r9, $r10;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter0: java.io.File;

        $r3 = $r0.<android.test.ClassPathPackageInfoSource: java.util.Map jarFiles>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (java.util.Set) $r4;

        if $r5 != null goto label4;

        $r6 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r2 = new java.util.zip.ZipFile;

        specialinvoke $r2.<java.util.zip.ZipFile: void <init>(java.io.File)>($r1);

        $r7 = virtualinvoke $r2.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r8 = (java.util.zip.ZipEntry) $r4;

        $r9 = virtualinvoke $r8.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 == 0 goto label1;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r9);

        $i1 = virtualinvoke $r9.<java.lang.String: int lastIndexOf(int)>(47);

     label2:
        $i0 = $i1 + 1;

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r10);

        $i1 = $i1 - 1;

        $i0 = virtualinvoke $r9.<java.lang.String: int lastIndexOf(int,int)>(47, $i1);

        $i1 = $i0;

        if $i0 > 0 goto label2;

        goto label1;

     label3:
        $r3 = $r0.<android.test.ClassPathPackageInfoSource: java.util.Map jarFiles>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

        return $r6;

     label4:
        return $r5;
    }

    private static boolean isToplevelClass(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(36);

        if $i0 >= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void scanForApkFiles(java.io.File, java.lang.String, java.util.Set, java.util.Set) throws java.io.IOException
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.io.File $r1;
        java.lang.String $r2, $r5;
        java.util.Set $r3, $r4;
        int $i0, $i1;
        boolean $z0;
        java.io.File[] $r6;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Set;

        $r4 := @parameter3: java.util.Set;

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".apk");

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r1.<java.io.File: java.lang.String getPath()>();

        specialinvoke $r0.<android.test.ClassPathPackageInfoSource: void findClassesInApk(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>($r5, $r2, $r3, $r4);

        return;

     label1:
        $r6 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        if $r6 == null goto label3;

        $i0 = lengthof $r6;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r1 = $r6[$i1];

        specialinvoke $r0.<android.test.ClassPathPackageInfoSource: void scanForApkFiles(java.io.File,java.lang.String,java.util.Set,java.util.Set)>($r1, $r2, $r3, $r4);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return;

     label4:
        return;
    }

    public static void setApkPaths(java.lang.String[])
    {
        java.lang.String[] $r0;

        $r0 := @parameter0: java.lang.String[];

        <android.test.ClassPathPackageInfoSource: java.lang.String[] apkPaths> = $r0;

        return;
    }

    public android.test.ClassPathPackageInfo getPackageInfo(java.lang.String)
    {
        java.lang.String $r0;
        android.test.SimpleCache $r1;
        java.lang.Object $r2;
        android.test.ClassPathPackageInfoSource $r3;
        android.test.ClassPathPackageInfo $r4;

        $r3 := @this: android.test.ClassPathPackageInfoSource;

        $r0 := @parameter0: java.lang.String;

        $r1 = $r3.<android.test.ClassPathPackageInfoSource: android.test.SimpleCache cache>;

        $r2 = virtualinvoke $r1.<android.test.SimpleCache: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (android.test.ClassPathPackageInfo) $r2;

        return $r4;
    }

    public void setClassLoader(java.lang.ClassLoader)
    {
        android.test.ClassPathPackageInfoSource $r0;
        java.lang.ClassLoader $r1;

        $r0 := @this: android.test.ClassPathPackageInfoSource;

        $r1 := @parameter0: java.lang.ClassLoader;

        $r0.<android.test.ClassPathPackageInfoSource: java.lang.ClassLoader classLoader> = $r1;

        return;
    }
}
