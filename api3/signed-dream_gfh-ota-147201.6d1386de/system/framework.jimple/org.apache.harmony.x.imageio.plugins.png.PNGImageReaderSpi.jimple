public class org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi extends javax.imageio.spi.ImageReaderSpi
{
    static final java.lang.String[] PNG_MIME_TYPES;
    static final java.lang.String[] PNG_NAMES;
    static final java.lang.String PNG_READER_CLASS_NAME;
    static final java.lang.String[] PNG_READER_SPI_NAMES;
    static final java.lang.String[] PNG_SUFFIXES;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.String PNG_READER_CLASS_NAME> = "org.apache.harmony.x.imageio.plugins.png.PNGImageReader";

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "png";

        $r0[1] = "PNG";

        <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.String[] PNG_NAMES> = $r0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "png";

        <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.String[] PNG_SUFFIXES> = $r0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "image/png";

        <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.String[] PNG_MIME_TYPES> = $r0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi";

        <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.String[] PNG_READER_SPI_NAMES> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi $r0;
        java.lang.String[] $r1, $r2, $r3;
        java.lang.Class[] $r4;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi;

        $r1 = <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.String[] PNG_NAMES>;

        $r2 = <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.String[] PNG_SUFFIXES>;

        $r3 = <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.String[] PNG_MIME_TYPES>;

        $r4 = <org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi: java.lang.Class[] STANDARD_INPUT_TYPE>;

        specialinvoke $r0.<javax.imageio.spi.ImageReaderSpi: void <init>(java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,java.lang.Class[],java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],java.lang.String[])>("Intel Corporation", "0.1 beta", $r1, $r2, $r3, "org.apache.harmony.x.imageio.plugins.png.PNGImageReader", $r4, null, 0, null, null, null, null, 0, null, null, null, null);

        return;
    }

    public boolean canDecodeInput(java.lang.Object) throws java.io.IOException
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi $r0;
        java.lang.Object $r1;
        byte[] $r2;
        int $i0, $i1;
        javax.imageio.stream.ImageInputStream $r3;
        byte $b2;
        short $s3;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi;

        $r1 := @parameter0: java.lang.Object;

        $r3 = (javax.imageio.stream.ImageInputStream) $r1;

        interfaceinvoke $r3.<javax.imageio.stream.ImageInputStream: void mark()>();

        $r2 = newarray (byte)[8];

        interfaceinvoke $r3.<javax.imageio.stream.ImageInputStream: void seek(long)>(0L);

        $i0 = interfaceinvoke $r3.<javax.imageio.stream.ImageInputStream: int read(byte[],int,int)>($r2, 0, 8);

        if $i0 == 8 goto label1;

        $i1 = 8 - $i0;

        interfaceinvoke $r3.<javax.imageio.stream.ImageInputStream: int read(byte[],int,int)>($r2, $i0, $i1);

     label1:
        interfaceinvoke $r3.<javax.imageio.stream.ImageInputStream: void reset()>();

        $b2 = $r2[0];

        $s3 = $b2 & 255;

        if $s3 != 137 goto label2;

        $b2 = $r2[1];

        $s3 = $b2 & 255;

        if $s3 != 80 goto label2;

        $b2 = $r2[2];

        $s3 = $b2 & 255;

        if $s3 != 78 goto label2;

        $b2 = $r2[3];

        $s3 = $b2 & 255;

        if $s3 != 71 goto label2;

        $b2 = $r2[4];

        $s3 = $b2 & 255;

        if $s3 != 13 goto label2;

        $b2 = $r2[5];

        $s3 = $b2 & 255;

        if $s3 != 10 goto label2;

        $b2 = $r2[6];

        $s3 = $b2 & 255;

        if $s3 != 26 goto label2;

        $b2 = $r2[7];

        $s3 = $b2 & 255;

        if $s3 != 10 goto label2;

        return 1;

     label2:
        return 0;
    }

    public javax.imageio.ImageReader createReaderInstance(java.lang.Object) throws java.io.IOException
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi $r0;
        java.lang.Object $r1;
        org.apache.harmony.x.imageio.plugins.png.PNGImageReader $r2;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.harmony.x.imageio.plugins.png.PNGImageReader;

        specialinvoke $r2.<org.apache.harmony.x.imageio.plugins.png.PNGImageReader: void <init>(javax.imageio.spi.ImageReaderSpi)>($r0);

        return $r2;
    }

    public java.lang.String getDescription(java.util.Locale)
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi $r0;
        java.util.Locale $r1;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi;

        $r1 := @parameter0: java.util.Locale;

        return "DRL PNG decoder";
    }

    public void onRegistration(javax.imageio.spi.ServiceRegistry, java.lang.Class)
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi $r0;
        javax.imageio.spi.ServiceRegistry $r1;
        java.lang.Class $r2;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageReaderSpi;

        $r1 := @parameter0: javax.imageio.spi.ServiceRegistry;

        $r2 := @parameter1: java.lang.Class;

        specialinvoke $r0.<javax.imageio.spi.IIOServiceProvider: void onRegistration(javax.imageio.spi.ServiceRegistry,java.lang.Class)>($r1, $r2);

        return;
    }
}
