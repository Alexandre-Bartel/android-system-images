class org.apache.harmony.nio.internal.MappedByteBufferFactory$1 extends java.lang.Object implements java.security.PrivilegedAction
{

    void <init>()
    {
        org.apache.harmony.nio.internal.MappedByteBufferFactory$1 $r0;

        $r0 := @this: org.apache.harmony.nio.internal.MappedByteBufferFactory$1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile java.lang.Object run()
    {
        org.apache.harmony.nio.internal.MappedByteBufferFactory$1 $r0;
        java.lang.reflect.Constructor $r1;

        $r0 := @this: org.apache.harmony.nio.internal.MappedByteBufferFactory$1;

        $r1 = virtualinvoke $r0.<org.apache.harmony.nio.internal.MappedByteBufferFactory$1: java.lang.reflect.Constructor run()>();

        return $r1;
    }

    public java.lang.reflect.Constructor run()
    {
        org.apache.harmony.nio.internal.MappedByteBufferFactory$1 $r0;
        java.lang.ClassLoader $r1;
        java.lang.Class $r2, $r4;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r5;
        java.lang.Exception $r6;
        java.lang.RuntimeException $r7;

        $r0 := @this: org.apache.harmony.nio.internal.MappedByteBufferFactory$1;

     label1:
        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r2 = virtualinvoke $r1.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("java.nio.MappedByteBufferAdapter");

        $r3 = newarray (java.lang.Class)[4];

        $r3[0] = class "org/apache/harmony/luni/platform/PlatformAddress";

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[1] = $r4;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[2] = $r4;

        $r4 = <java.lang.Integer: java.lang.Class TYPE>;

        $r3[3] = $r4;

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        virtualinvoke $r5.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
