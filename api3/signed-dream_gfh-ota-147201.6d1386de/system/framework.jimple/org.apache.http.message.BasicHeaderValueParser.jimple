public class org.apache.http.message.BasicHeaderValueParser extends java.lang.Object implements org.apache.http.message.HeaderValueParser
{
    private static final char[] ALL_DELIMITERS;
    public static final org.apache.http.message.BasicHeaderValueParser DEFAULT;
    private static final char ELEM_DELIMITER;
    private static final char PARAM_DELIMITER;

    static void <clinit>()
    {
        org.apache.http.message.BasicHeaderValueParser $r0;
        char[] $r1;

        <org.apache.http.message.BasicHeaderValueParser: char PARAM_DELIMITER> = 59;

        <org.apache.http.message.BasicHeaderValueParser: char ELEM_DELIMITER> = 44;

        $r0 = new org.apache.http.message.BasicHeaderValueParser;

        specialinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: void <init>()>();

        <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT> = $r0;

        $r1 = newarray (char)[2];

        $r1[0] = 59;

        $r1[1] = 44;

        <org.apache.http.message.BasicHeaderValueParser: char[] ALL_DELIMITERS> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.http.message.BasicHeaderValueParser $r0;

        $r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isOneOf(char, char[])
    {
        char $c0, $c3;
        char[] $r0;
        int $i1, $i2;

        $c0 := @parameter0: char;

        $r0 := @parameter1: char[];

        if $r0 == null goto label3;

        $i1 = 0;

     label1:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label3;

        $c3 = $r0[$i1];

        if $c0 != $c3 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static final org.apache.http.HeaderElement[] parseElements(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        java.lang.String $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.message.HeaderValueParser $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        org.apache.http.HeaderElement[] $r5;

        $r0 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.apache.http.message.HeaderValueParser;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r4;

     label1:
        if $r3 != null goto label2;

        $r3 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r3.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r5;
    }

    public static final org.apache.http.HeaderElement parseHeaderElement(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        java.lang.String $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.message.HeaderValueParser $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        org.apache.http.HeaderElement $r5;

        $r0 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.apache.http.message.HeaderValueParser;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r4;

     label1:
        if $r3 != null goto label2;

        $r3 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r3.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r5;
    }

    public static final org.apache.http.NameValuePair parseNameValuePair(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        java.lang.String $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.message.HeaderValueParser $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        org.apache.http.NameValuePair $r5;

        $r0 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.apache.http.message.HeaderValueParser;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r4;

     label1:
        if $r3 != null goto label2;

        $r3 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r3.<org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r5;
    }

    public static final org.apache.http.NameValuePair[] parseParameters(java.lang.String, org.apache.http.message.HeaderValueParser) throws org.apache.http.ParseException
    {
        java.lang.String $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.message.HeaderValueParser $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        org.apache.http.NameValuePair[] $r5;

        $r0 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.apache.http.message.HeaderValueParser;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r4;

     label1:
        if $r3 != null goto label2;

        $r3 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r3.<org.apache.http.message.HeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r5;
    }

    protected org.apache.http.HeaderElement createHeaderElement(java.lang.String, java.lang.String, org.apache.http.NameValuePair[])
    {
        org.apache.http.message.BasicHeaderValueParser $r0;
        java.lang.String $r1, $r2;
        org.apache.http.NameValuePair[] $r3;
        org.apache.http.message.BasicHeaderElement $r4;

        $r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.apache.http.NameValuePair[];

        $r4 = new org.apache.http.message.BasicHeaderElement;

        specialinvoke $r4.<org.apache.http.message.BasicHeaderElement: void <init>(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>($r1, $r2, $r3);

        return $r4;
    }

    protected org.apache.http.NameValuePair createNameValuePair(java.lang.String, java.lang.String)
    {
        org.apache.http.message.BasicHeaderValueParser $r0;
        java.lang.String $r1, $r2;
        org.apache.http.message.BasicNameValuePair $r3;

        $r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.http.message.BasicNameValuePair;

        specialinvoke $r3.<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        org.apache.http.message.ParserCursor $r1;
        java.util.ArrayList $r2;
        org.apache.http.message.BasicHeaderValueParser $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;
        org.apache.http.HeaderElement $r5;
        java.lang.String $r6;
        int $i0;
        org.apache.http.HeaderElement[] $r7;
        java.lang.Object[] $r8;

        $r3 := @this: org.apache.http.message.BasicHeaderValueParser;

        $r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r1 := @parameter1: org.apache.http.message.ParserCursor;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r4;

     label1:
        if $r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r4;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label3:
        $z0 = virtualinvoke $r1.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label5;

        $r5 = virtualinvoke $r3.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r0, $r1);

        $r6 = interfaceinvoke $r5.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label4;

        $r6 = interfaceinvoke $r5.<org.apache.http.HeaderElement: java.lang.String getValue()>();

        if $r6 == null goto label3;

     label4:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label3;

     label5:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r7 = newarray (org.apache.http.HeaderElement)[$i0];

        $r8 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r7 = (org.apache.http.HeaderElement[]) $r8;

        $r7 = (org.apache.http.HeaderElement[]) $r7;

        return $r7;
    }

    public org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicHeaderValueParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.NameValuePair $r4;
        org.apache.http.NameValuePair[] $r5;
        boolean $z0;
        int $i0;
        char $c1;
        java.lang.String $r6, $r7;
        org.apache.http.HeaderElement $r8;

        $r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter1: org.apache.http.message.ParserCursor;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r3;

     label2:
        $r4 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        $r5 = null;

        $z0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label3;

        $i0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i0 = $i0 - 1;

        $c1 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i0);

        if $c1 == 44 goto label3;

        $r5 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

     label3:
        $r6 = interfaceinvoke $r4.<org.apache.http.NameValuePair: java.lang.String getName()>();

        $r7 = interfaceinvoke $r4.<org.apache.http.NameValuePair: java.lang.String getValue()>();

        $r8 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.HeaderElement createHeaderElement(java.lang.String,java.lang.String,org.apache.http.NameValuePair[])>($r6, $r7, $r5);

        return $r8;
    }

    public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicHeaderValueParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.NameValuePair $r3;
        char[] $r4;

        $r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter1: org.apache.http.message.ParserCursor;

        $r4 = <org.apache.http.message.BasicHeaderValueParser: char[] ALL_DELIMITERS>;

        $r3 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor,char[])>($r1, $r2, $r4);

        return $r3;
    }

    public org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, char[])
    {
        org.apache.http.message.BasicHeaderValueParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        char[] $r3;
        java.lang.IllegalArgumentException $r4;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i4;
        char $c3;
        java.lang.String $r5, $r7;
        org.apache.http.NameValuePair $r6;

        $r0 := @this: org.apache.http.message.BasicHeaderValueParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter1: org.apache.http.message.ParserCursor;

        $r3 := @parameter2: char[];

        if $r1 != null goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r4;

     label01:
        if $r2 != null goto label02;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r4;

     label02:
        $z0 = 0;

        $i0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i2 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label03:
        if $i0 >= $i2 goto label04;

        $c3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i0);

        if $c3 != 61 goto label06;

     label04:
        if $i0 != $i2 goto label08;

        $z0 = 1;

        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i1, $i2);

     label05:
        if $z0 == 0 goto label09;

        virtualinvoke $r2.<org.apache.http.message.ParserCursor: void updatePos(int)>($i0);

        $r6 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>($r5, null);

        return $r6;

     label06:
        $z1 = staticinvoke <org.apache.http.message.BasicHeaderValueParser: boolean isOneOf(char,char[])>($c3, $r3);

        if $z1 == 0 goto label07;

        $z0 = 1;

        goto label04;

     label07:
        $i0 = $i0 + 1;

        goto label03;

     label08:
        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i1, $i0);

        $i0 = $i0 + 1;

        goto label05;

     label09:
        $i1 = $i0;

        $z1 = 0;

        $z2 = 0;

     label10:
        if $i0 >= $i2 goto label12;

        $c3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i0);

        if $c3 != 34 goto label11;

        if $z2 != 0 goto label11;

        if $z1 != 0 goto label14;

        $z1 = 1;

     label11:
        if $z1 != 0 goto label15;

        if $z2 != 0 goto label15;

        $z3 = staticinvoke <org.apache.http.message.BasicHeaderValueParser: boolean isOneOf(char,char[])>($c3, $r3);

        if $z3 == 0 goto label15;

        $z0 = 1;

     label12:
        $i2 = $i0;

     label13:
        if $i1 >= $i2 goto label20;

        $c3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i1);

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c3);

        if $z1 == 0 goto label20;

        $i1 = $i1 + 1;

        goto label13;

     label14:
        $z1 = 0;

        goto label11;

     label15:
        if $z2 == 0 goto label17;

        $z2 = 0;

     label16:
        $i0 = $i0 + 1;

        goto label10;

     label17:
        if $z1 == 0 goto label19;

        if $c3 != 92 goto label19;

        $z2 = 1;

     label18:
        goto label16;

     label19:
        $z2 = 0;

        goto label18;

     label20:
        if $i2 <= $i1 goto label21;

        $i4 = $i2 - 1;

        $c3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i4);

        $z1 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c3);

        if $z1 == 0 goto label21;

        $i2 = $i2 + -1;

        goto label20;

     label21:
        $i4 = $i2 - $i1;

        if $i4 < 2 goto label22;

        $c3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i1);

        if $c3 != 34 goto label22;

        $i4 = $i2 - 1;

        $c3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i4);

        if $c3 != 34 goto label22;

        $i1 = $i1 + 1;

        $i2 = $i2 + -1;

     label22:
        $r7 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        if $z0 == 0 goto label23;

        $i0 = $i0 + 1;

     label23:
        virtualinvoke $r2.<org.apache.http.message.ParserCursor: void updatePos(int)>($i0);

        $r6 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair createNameValuePair(java.lang.String,java.lang.String)>($r5, $r7);

        return $r6;
    }

    public org.apache.http.NameValuePair[] parseParameters(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        org.apache.http.message.ParserCursor $r1;
        java.util.ArrayList $r2;
        org.apache.http.message.BasicHeaderValueParser $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0, $i1;
        char $c2;
        boolean $z0;
        org.apache.http.NameValuePair[] $r5;
        org.apache.http.NameValuePair $r6;
        java.lang.Object[] $r7;

        $r3 := @this: org.apache.http.message.BasicHeaderValueParser;

        $r0 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r1 := @parameter1: org.apache.http.message.ParserCursor;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r4;

     label1:
        if $r1 != null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r4;

     label2:
        $i0 = virtualinvoke $r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = virtualinvoke $r1.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label3:
        if $i0 >= $i1 goto label4;

        $c2 = virtualinvoke $r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i0);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label4;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        virtualinvoke $r1.<org.apache.http.message.ParserCursor: void updatePos(int)>($i0);

        $z0 = virtualinvoke $r1.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label5;

        $r5 = newarray (org.apache.http.NameValuePair)[0];

        return $r5;

     label5:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label6:
        $z0 = virtualinvoke $r1.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label7;

        $r6 = virtualinvoke $r3.<org.apache.http.message.BasicHeaderValueParser: org.apache.http.NameValuePair parseNameValuePair(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r0, $r1);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        $i0 = virtualinvoke $r1.<org.apache.http.message.ParserCursor: int getPos()>();

        $i0 = $i0 - 1;

        $c2 = virtualinvoke $r0.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i0);

        if $c2 != 44 goto label6;

     label7:
        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r5 = newarray (org.apache.http.NameValuePair)[$i0];

        $r7 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r5 = (org.apache.http.NameValuePair[]) $r7;

        $r5 = (org.apache.http.NameValuePair[]) $r5;

        return $r5;
    }
}
