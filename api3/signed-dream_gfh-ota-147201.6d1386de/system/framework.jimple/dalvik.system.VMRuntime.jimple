public final class dalvik.system.VMRuntime extends java.lang.Object
{
    private static final dalvik.system.VMRuntime THE_ONE;

    static void <clinit>()
    {
        dalvik.system.VMRuntime $r0;

        $r0 = new dalvik.system.VMRuntime;

        specialinvoke $r0.<dalvik.system.VMRuntime: void <init>()>();

        <dalvik.system.VMRuntime: dalvik.system.VMRuntime THE_ONE> = $r0;

        return;
    }

    private void <init>()
    {
        dalvik.system.VMRuntime $r0;

        $r0 := @this: dalvik.system.VMRuntime;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static dalvik.system.VMRuntime getRuntime()
    {
        dalvik.system.VMRuntime r0;

        r0 = <dalvik.system.VMRuntime: dalvik.system.VMRuntime THE_ONE>;

        return r0;
    }

    private native long nativeMinimumHeapSize(long, boolean);

    private native void nativeSetTargetHeapUtilization(float);

    public native void gcSoftReferences();

    public native long getExternalBytesAllocated();

    public long getMinimumHeapSize()
    {
        dalvik.system.VMRuntime $r0;
        long $l0;

        $r0 := @this: dalvik.system.VMRuntime;

        $l0 = specialinvoke $r0.<dalvik.system.VMRuntime: long nativeMinimumHeapSize(long,boolean)>(0L, 0);

        return $l0;
    }

    public native float getTargetHeapUtilization();

    public native void runFinalizationSync();

    public long setMinimumHeapSize(long)
    {
        dalvik.system.VMRuntime $r0;
        long $l0;
        java.lang.Throwable $r1;

        $r0 := @this: dalvik.system.VMRuntime;

        $l0 := @parameter0: long;

        entermonitor $r0;

     label1:
        $l0 = specialinvoke $r0.<dalvik.system.VMRuntime: long nativeMinimumHeapSize(long,boolean)>($l0, 1);

     label2:
        exitmonitor $r0;

        return $l0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public float setTargetHeapUtilization(float)
    {
        dalvik.system.VMRuntime $r0;
        float $f0, $f1;
        double $d0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Throwable $r4;

        $r0 := @this: dalvik.system.VMRuntime;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $b0 = $d0 cmpg 0.0;

        if $b0 <= 0 goto label1;

        $d0 = (double) $f0;

        $b0 = $d0 cmpl 1.0;

        if $b0 < 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range (0,1)");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        entermonitor $r0;

     label3:
        $f1 = virtualinvoke $r0.<dalvik.system.VMRuntime: float getTargetHeapUtilization()>();

        specialinvoke $r0.<dalvik.system.VMRuntime: void nativeSetTargetHeapUtilization(float)>($f0);

        exitmonitor $r0;

     label4:
        return $f1;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r4;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public native boolean trackExternalAllocation(long);

    public native void trackExternalFree(long);
}
