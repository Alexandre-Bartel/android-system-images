public class android.test.RenamingDelegatingContext extends android.content.ContextWrapper
{
    private java.util.Set mDatabaseNames;
    private android.content.Context mFileContext;
    private java.util.Set mFileNames;
    private java.lang.String mFilePrefix;

    public void <init>(android.content.Context, android.content.Context, java.lang.String)
    {
        android.test.RenamingDelegatingContext $r0;
        android.content.Context $r1, $r2;
        java.lang.String $r3;
        java.util.HashSet $r4;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.content.Context;

        $r3 := @parameter2: java.lang.String;

        specialinvoke $r0.<android.content.ContextWrapper: void <init>(android.content.Context)>($r1);

        $r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix> = null;

        $r4 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames> = $r4;

        $r4 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames> = $r4;

        $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext> = $r2;

        $r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix> = $r3;

        return;
    }

    public void <init>(android.content.Context, java.lang.String)
    {
        android.test.RenamingDelegatingContext $r0;
        android.content.Context $r1;
        java.lang.String $r2;
        java.util.HashSet $r3;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<android.content.ContextWrapper: void <init>(android.content.Context)>($r1);

        $r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix> = null;

        $r3 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames> = $r3;

        $r3 = staticinvoke <com.google.android.collect.Sets: java.util.HashSet newHashSet()>();

        $r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames> = $r3;

        $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext> = $r1;

        $r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix> = $r2;

        return;
    }

    public static android.content.ContentProvider providerWithRenamedContext(java.lang.Class, android.content.Context, java.lang.String) throws java.lang.IllegalAccessException, java.lang.InstantiationException
    {
        java.lang.Class $r0;
        android.content.Context $r1;
        java.lang.String $r2;
        android.content.ContentProvider $r3;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: android.content.Context;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <android.test.RenamingDelegatingContext: android.content.ContentProvider providerWithRenamedContext(java.lang.Class,android.content.Context,java.lang.String,boolean)>($r0, $r1, $r2, 0);

        return $r3;
    }

    public static android.content.ContentProvider providerWithRenamedContext(java.lang.Class, android.content.Context, java.lang.String, boolean) throws java.lang.IllegalAccessException, java.lang.InstantiationException
    {
        java.lang.Class $r0;
        android.content.Context $r1;
        java.lang.String $r2;
        boolean $z0;
        android.test.RenamingDelegatingContext $r3;
        java.lang.Object $r4;
        android.content.ContentProvider $r5;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: android.content.Context;

        $r2 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.Object newInstance()>();

        $r5 = (android.content.ContentProvider) $r4;

        $r3 = new android.test.RenamingDelegatingContext;

        specialinvoke $r3.<android.test.RenamingDelegatingContext: void <init>(android.content.Context,java.lang.String)>($r1, $r2);

        if $z0 == 0 goto label1;

        virtualinvoke $r3.<android.test.RenamingDelegatingContext: void makeExistingFilesAndDbsAccessible()>();

     label1:
        virtualinvoke $r5.<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>($r3, null);

        return $r5;
    }

    private java.lang.String renamedFileName(java.lang.String)
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public java.lang.String[] databaseList()
    {
        java.util.Set $r0;
        java.lang.Object[] $r1;
        android.test.RenamingDelegatingContext $r2;
        java.lang.String[] $r3;

        $r2 := @this: android.test.RenamingDelegatingContext;

        $r0 = $r2.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $r3 = newarray (java.lang.String)[0];

        $r1 = interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (java.lang.String[]) $r1;

        return $r3;
    }

    public boolean deleteDatabase(java.lang.String)
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1;
        java.util.Set $r2;
        boolean $z0;
        android.content.Context $r3;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        $r3 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r1 = specialinvoke $r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>($r1);

        $z0 = virtualinvoke $r3.<android.content.Context: boolean deleteDatabase(java.lang.String)>($r1);

        return $z0;

     label1:
        return 0;
    }

    public boolean deleteFile(java.lang.String)
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1;
        java.util.Set $r2;
        boolean $z0;
        android.content.Context $r3;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        $r3 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r1 = specialinvoke $r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>($r1);

        $z0 = virtualinvoke $r3.<android.content.Context: boolean deleteFile(java.lang.String)>($r1);

        return $z0;

     label1:
        return 0;
    }

    public java.lang.String[] fileList()
    {
        java.util.Set $r0;
        java.lang.Object[] $r1;
        android.test.RenamingDelegatingContext $r2;
        java.lang.String[] $r3;

        $r2 := @this: android.test.RenamingDelegatingContext;

        $r0 = $r2.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        $r3 = newarray (java.lang.String)[0];

        $r1 = interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r3 = (java.lang.String[]) $r1;

        return $r3;
    }

    public java.lang.String getDatabasePrefix()
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String r1;

        $r0 := @this: android.test.RenamingDelegatingContext;

        r1 = $r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix>;

        return r1;
    }

    public java.io.File getFileStreamPath(java.lang.String)
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1;
        android.content.Context $r2;
        java.io.File $r3;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r1 = specialinvoke $r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<android.content.Context: java.io.File getFileStreamPath(java.lang.String)>($r1);

        return $r3;
    }

    public void makeExistingFilesAndDbsAccessible()
    {
        android.test.RenamingDelegatingContext $r0;
        android.content.Context $r1;
        java.lang.String[] $r2;
        int $i0, $i1;
        java.lang.String $r3;
        boolean $z0;
        java.util.Set $r4;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String[] databaseList()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r3 = $r2[$i1];

        $z0 = virtualinvoke $r0.<android.test.RenamingDelegatingContext: boolean shouldDiskNameBeVisible(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        $r4 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $r3 = virtualinvoke $r0.<android.test.RenamingDelegatingContext: java.lang.String publicNameFromDiskName(java.lang.String)>($r3);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r1 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String[] fileList()>();

        $i0 = lengthof $r2;

        $i1 = 0;

     label4:
        if $i1 >= $i0 goto label6;

        $r3 = $r2[$i1];

        $z0 = virtualinvoke $r0.<android.test.RenamingDelegatingContext: boolean shouldDiskNameBeVisible(java.lang.String)>($r3);

        if $z0 == 0 goto label5;

        $r4 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        $r3 = virtualinvoke $r0.<android.test.RenamingDelegatingContext: java.lang.String publicNameFromDiskName(java.lang.String)>($r3);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r3);

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        return;
    }

    public java.io.FileInputStream openFileInput(java.lang.String) throws java.io.FileNotFoundException
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1, $r2;
        java.util.Set $r3;
        boolean $z0;
        android.content.Context $r4;
        java.io.FileInputStream $r5;
        java.io.FileNotFoundException $r6;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke $r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>($r1);

        $r3 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r4 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)>($r2);

        return $r5;

     label1:
        $r6 = new java.io.FileNotFoundException;

        specialinvoke $r6.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r2);

        throw $r6;
    }

    public java.io.FileOutputStream openFileOutput(java.lang.String, int) throws java.io.FileNotFoundException
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1;
        int $i0;
        java.util.Set $r2;
        android.content.Context $r3;
        java.io.FileOutputStream $r4;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mFileNames>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r3 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r1 = specialinvoke $r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String,int)>($r1, $i0);

        return $r4;
    }

    public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String, int, android.database.sqlite.SQLiteDatabase$CursorFactory)
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1, $r3;
        int $i0;
        android.database.sqlite.SQLiteDatabase$CursorFactory $r2;
        java.util.Set $r4;
        boolean $z0;
        android.content.Context $r5;
        android.database.sqlite.SQLiteDatabase $r6;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.database.sqlite.SQLiteDatabase$CursorFactory;

        $r3 = specialinvoke $r0.<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>($r1);

        $r4 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r4 = $r0.<android.test.RenamingDelegatingContext: java.util.Set mDatabaseNames>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r5 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        virtualinvoke $r5.<android.content.Context: boolean deleteDatabase(java.lang.String)>($r3);

     label1:
        $r5 = $r0.<android.test.RenamingDelegatingContext: android.content.Context mFileContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r3, $i0, $r2);

        return $r6;
    }

    java.lang.String publicNameFromDiskName(java.lang.String)
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1, $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        int $i0, $i1;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r0.<android.test.RenamingDelegatingContext: boolean shouldDiskNameBeVisible(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("disk file should not be visible: ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        $r4 = $r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix>;

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r1;
    }

    boolean shouldDiskNameBeVisible(java.lang.String)
    {
        android.test.RenamingDelegatingContext $r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        $r0 := @this: android.test.RenamingDelegatingContext;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.test.RenamingDelegatingContext: java.lang.String mFilePrefix>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>($r2);

        return $z0;
    }
}
