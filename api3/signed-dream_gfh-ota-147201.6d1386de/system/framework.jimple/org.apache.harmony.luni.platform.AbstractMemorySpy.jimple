abstract class org.apache.harmony.luni.platform.AbstractMemorySpy extends java.lang.Object implements org.apache.harmony.luni.platform.IMemorySpy
{
    protected java.util.Map memoryInUse;
    protected java.lang.ref.ReferenceQueue notifyQueue;
    protected java.util.Map refToShadow;

    public void <init>()
    {
        org.apache.harmony.luni.platform.AbstractMemorySpy $r0;
        java.util.HashMap $r1;
        java.lang.ref.ReferenceQueue $r2;

        $r0 := @this: org.apache.harmony.luni.platform.AbstractMemorySpy;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map memoryInUse> = $r1;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map refToShadow> = $r1;

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.lang.ref.ReferenceQueue notifyQueue> = $r2;

        return;
    }

    public void alloc(org.apache.harmony.luni.platform.PlatformAddress)
    {
        org.apache.harmony.luni.platform.AbstractMemorySpy $r0;
        org.apache.harmony.luni.platform.PlatformAddress $r1;
        org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper $r2;
        java.util.Map $r3;
        java.lang.ref.PhantomReference $r4;
        java.lang.Throwable $r5;

        $r0 := @this: org.apache.harmony.luni.platform.AbstractMemorySpy;

        $r1 := @parameter0: org.apache.harmony.luni.platform.PlatformAddress;

        $r2 = new org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper;

        specialinvoke $r2.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: void <init>(org.apache.harmony.luni.platform.AbstractMemorySpy,org.apache.harmony.luni.platform.PlatformAddress)>($r0, $r1);

        entermonitor $r0;

     label1:
        $r3 = $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map memoryInUse>;

        $r1 = $r2.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: org.apache.harmony.luni.platform.PlatformAddress shadow>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r3 = $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map refToShadow>;

        $r4 = $r2.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: java.lang.ref.PhantomReference wrAddress>;

        $r1 = $r2.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: org.apache.harmony.luni.platform.PlatformAddress shadow>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r1);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void autoFree(org.apache.harmony.luni.platform.PlatformAddress)
    {
        org.apache.harmony.luni.platform.AbstractMemorySpy $r0;
        org.apache.harmony.luni.platform.PlatformAddress $r1;
        java.lang.Object $r2;
        java.util.Map $r3;
        org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper $r4;
        java.lang.Throwable $r5;

        $r0 := @this: org.apache.harmony.luni.platform.AbstractMemorySpy;

        $r1 := @parameter0: org.apache.harmony.luni.platform.PlatformAddress;

        entermonitor $r0;

     label1:
        $r3 = $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map memoryInUse>;

        $r2 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper) $r2;

        exitmonitor $r0;

     label2:
        if $r4 == null goto label6;

        $r4.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: boolean autoFree> = 1;

        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor $r0;

     label5:
        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean free(org.apache.harmony.luni.platform.PlatformAddress)
    {
        org.apache.harmony.luni.platform.AbstractMemorySpy $r0;
        org.apache.harmony.luni.platform.PlatformAddress $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper $r4;
        java.lang.ref.PhantomReference $r5;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        $r0 := @this: org.apache.harmony.luni.platform.AbstractMemorySpy;

        $r1 := @parameter0: org.apache.harmony.luni.platform.PlatformAddress;

        entermonitor $r0;

     label1:
        $r2 = $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map memoryInUse>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = (org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper) $r3;

        if $r4 == null goto label2;

        $r2 = $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map refToShadow>;

        $r5 = $r4.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: java.lang.ref.PhantomReference wrAddress>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

     label2:
        exitmonitor $r0;

     label3:
        if $r4 != null goto label4;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Memory Spy! Fixed attempt to free memory that was not allocated ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label4:
        if $r4 == null goto label8;

        return 1;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor $r0;

     label7:
        throw $r9;

     label8:
        return 0;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    protected void orphanedMemory(java.lang.ref.Reference)
    {
        org.apache.harmony.luni.platform.AbstractMemorySpy $r0;
        java.lang.ref.Reference $r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        org.apache.harmony.luni.platform.PlatformAddress $r4;
        org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper $r5;
        boolean $z0;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        $r0 := @this: org.apache.harmony.luni.platform.AbstractMemorySpy;

        $r1 := @parameter0: java.lang.ref.Reference;

        entermonitor $r0;

     label1:
        $r2 = $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map refToShadow>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        $r4 = (org.apache.harmony.luni.platform.PlatformAddress) $r3;

        $r2 = $r0.<org.apache.harmony.luni.platform.AbstractMemorySpy: java.util.Map memoryInUse>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r5 = (org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper) $r3;

        if $r5 == null goto label3;

        $z0 = $r5.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: boolean autoFree>;

        if $z0 != 0 goto label2;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Memory Spy! Fixed memory leak by freeing ");

        $r4 = $r5.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: org.apache.harmony.luni.platform.PlatformAddress shadow>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label2:
        $r4 = $r5.<org.apache.harmony.luni.platform.AbstractMemorySpy$AddressWrapper: org.apache.harmony.luni.platform.PlatformAddress shadow>;

        virtualinvoke $r4.<org.apache.harmony.luni.platform.PlatformAddress: void free()>();

     label3:
        exitmonitor $r0;

     label4:
        virtualinvoke $r1.<java.lang.ref.Reference: void clear()>();

        return;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor $r0;

     label7:
        throw $r9;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void rangeCheck(org.apache.harmony.luni.platform.PlatformAddress, int, int) throws java.lang.IndexOutOfBoundsException
    {
        org.apache.harmony.luni.platform.AbstractMemorySpy $r0;
        org.apache.harmony.luni.platform.PlatformAddress $r1;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.luni.platform.AbstractMemorySpy;

        $r1 := @parameter0: org.apache.harmony.luni.platform.PlatformAddress;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        return;
    }
}
