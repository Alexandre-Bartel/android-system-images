public final class com.google.debug.Assert extends java.lang.Object
{
    private static final java.lang.String FAIL_REASON;
    private static final boolean NEGATIVE;
    private static final boolean POSITIVE;

    private void <init>()
    {
        com.google.debug.Assert $r0;

        $r0 := @this: com.google.debug.Assert;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertEquals(long, long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <com.google.debug.Assert: void assertEquals(java.lang.String,long,long)>(null, $l0, $l1);

        return;
    }

    public static void assertEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.debug.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertEquals(java.lang.String, long, long)
    {
        java.lang.String $r0, $r1;
        long $l0, $l1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(long,long,boolean)>($l0, $l1, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r1, $r0);

        return;
    }

    public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r3;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(java.lang.Object,java.lang.Object,boolean)>($r1, $r2, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r3, $r0);

        return;
    }

    public static void assertEquals(java.lang.String, boolean, boolean)
    {
        java.lang.String $r0, $r1;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(boolean,boolean,boolean)>($z0, $z1, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r1, $r0);

        return;
    }

    public static void assertEquals(boolean, boolean)
    {
        boolean $z0, $z1;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        staticinvoke <com.google.debug.Assert: void assertEquals(java.lang.String,boolean,boolean)>(null, $z0, $z1);

        return;
    }

    public static void assertFalse(java.lang.String, boolean)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String checkTrue(boolean,boolean)>($z0, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r1, $r0);

        return;
    }

    public static void assertFalse(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <com.google.debug.Assert: void assertFalse(java.lang.String,boolean)>(null, $z0);

        return;
    }

    public static void assertNotEquals(long, long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <com.google.debug.Assert: void assertNotEquals(java.lang.String,long,long)>(null, $l0, $l1);

        return;
    }

    public static void assertNotEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.debug.Assert: void assertNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertNotEquals(java.lang.String, long, long)
    {
        java.lang.String $r0, $r1;
        long $l0, $l1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(long,long,boolean)>($l0, $l1, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r1, $r0);

        return;
    }

    public static void assertNotEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r3;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(java.lang.Object,java.lang.Object,boolean)>($r1, $r2, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r3, $r0);

        return;
    }

    public static void assertNotEquals(java.lang.String, boolean, boolean)
    {
        java.lang.String $r0, $r1;
        boolean $z0, $z1;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(boolean,boolean,boolean)>($z0, $z1, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r1, $r0);

        return;
    }

    public static void assertNotEquals(boolean, boolean)
    {
        boolean $z0, $z1;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        staticinvoke <com.google.debug.Assert: void assertNotEquals(java.lang.String,boolean,boolean)>(null, $z0, $z1);

        return;
    }

    public static void assertNotNull(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Assert: void assertNotNull(java.lang.String,java.lang.Object)>(null, $r0);

        return;
    }

    public static void assertNotNull(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0, $r2;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.google.debug.Assert: java.lang.String checkNull(java.lang.Object,boolean)>($r1, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r2, $r0);

        return;
    }

    public static void assertNotSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.debug.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r3;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkSame(java.lang.Object,java.lang.Object,boolean)>($r1, $r2, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r3, $r0);

        return;
    }

    public static void assertNull(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.debug.Assert: void assertNull(java.lang.String,java.lang.Object)>(null, $r0);

        return;
    }

    public static void assertNull(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0, $r2;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.google.debug.Assert: java.lang.String checkNull(java.lang.Object,boolean)>($r1, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r2, $r0);

        return;
    }

    public static void assertSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.debug.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r3;
        java.lang.Object $r1, $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkSame(java.lang.Object,java.lang.Object,boolean)>($r1, $r2, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r3, $r0);

        return;
    }

    public static void assertTrue(java.lang.String, boolean)
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String checkTrue(boolean,boolean)>($z0, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String)>($r1, $r0);

        return;
    }

    public static void assertTrue(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <com.google.debug.Assert: void assertTrue(java.lang.String,boolean)>(null, $z0);

        return;
    }

    private static java.lang.String checkEquality(long, long, boolean)
    {
        long $l0, $l1;
        boolean $z0, $z1;
        java.lang.Long $r0, $r2;
        java.lang.String $r1;
        byte $b2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $z0 := @parameter2: boolean;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        $z1 = 1;

     label1:
        if $z1 != $z0 goto label3;

        return null;

     label2:
        $z1 = 0;

        goto label1;

     label3:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>($l0);

        $r0 = new java.lang.Long;

        specialinvoke $r0.<java.lang.Long: void <init>(long)>($l1);

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String failEquality(java.lang.Object,java.lang.Object,boolean)>($r2, $r0, $z0);

        return $r1;
    }

    private static java.lang.String checkEquality(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Object $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        if $r0 == $r1 goto label1;

        if $r0 == null goto label3;

        $z1 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label3;

     label1:
        $z1 = 1;

     label2:
        if $z1 != $z0 goto label4;

        return null;

     label3:
        $z1 = 0;

        goto label2;

     label4:
        $r2 = staticinvoke <com.google.debug.Assert: java.lang.String failEquality(java.lang.Object,java.lang.Object,boolean)>($r0, $r1, $z0);

        return $r2;
    }

    private static java.lang.String checkEquality(boolean, boolean, boolean)
    {
        boolean $z0, $z1, $z2, $z3;
        java.lang.Boolean $r0, $r2;
        java.lang.String $r1;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $z2 := @parameter2: boolean;

        if $z0 != $z1 goto label2;

        $z3 = 1;

     label1:
        if $z3 != $z2 goto label3;

        return null;

     label2:
        $z3 = 0;

        goto label1;

     label3:
        $r2 = new java.lang.Boolean;

        specialinvoke $r2.<java.lang.Boolean: void <init>(boolean)>($z0);

        $r0 = new java.lang.Boolean;

        specialinvoke $r0.<java.lang.Boolean: void <init>(boolean)>($z1);

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String failEquality(java.lang.Object,java.lang.Object,boolean)>($r2, $r0, $z2);

        return $r1;
    }

    private static java.lang.String checkNull(java.lang.Object, boolean)
    {
        java.lang.Object $r0;
        boolean $z0, $z1;
        java.lang.String $r1;

        $r0 := @parameter0: java.lang.Object;

        $z0 := @parameter1: boolean;

        if $r0 != null goto label2;

        $z1 = 1;

     label1:
        if $z1 != $z0 goto label3;

        return null;

     label2:
        $z1 = 0;

        goto label1;

     label3:
        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String failNull(boolean)>($z0);

        return $r1;
    }

    private static java.lang.String checkSame(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Object $r0, $r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        if $r0 != $r1 goto label2;

        $z1 = 1;

     label1:
        if $z1 != $z0 goto label3;

        return null;

     label2:
        $z1 = 0;

        goto label1;

     label3:
        $r2 = staticinvoke <com.google.debug.Assert: java.lang.String failSame(java.lang.Object,java.lang.Object,boolean)>($r0, $r1, $z0);

        return $r2;
    }

    private static java.lang.String checkTrue(boolean, boolean)
    {
        boolean $z0, $z1;
        java.lang.String $r0;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        if $z0 != $z1 goto label1;

        return null;

     label1:
        $r0 = staticinvoke <com.google.debug.Assert: java.lang.String failTrue(boolean)>($z1);

        return $r0;
    }

    public static void fail()
    {
        com.google.debug.AssertionError $r0;
        java.lang.String $r1;

        $r0 = new com.google.debug.AssertionError;

        $r1 = staticinvoke <com.google.debug.Assert: java.lang.String format(java.lang.String,java.lang.String)>("explicit assertion failure", null);

        specialinvoke $r0.<com.google.debug.AssertionError: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    public static void fail(java.lang.String)
    {
        java.lang.String $r0;
        com.google.debug.AssertionError $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new com.google.debug.AssertionError;

        $r0 = staticinvoke <com.google.debug.Assert: java.lang.String format(java.lang.String,java.lang.String)>("explicit assertion failure", $r0);

        specialinvoke $r1.<com.google.debug.AssertionError: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    private static java.lang.String failEquality(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        if $z0 != 1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("did not expect [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static void failIfReason(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        com.google.debug.AssertionError $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label1;

        $r2 = new com.google.debug.AssertionError;

        $r0 = staticinvoke <com.google.debug.Assert: java.lang.String format(java.lang.String,java.lang.String)>($r0, $r1);

        specialinvoke $r2.<com.google.debug.AssertionError: void <init>(java.lang.String)>($r0);

        throw $r2;

     label1:
        return;
    }

    private static void failIfReason(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        int $i0;
        com.google.debug.AssertionError $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        if $r0 == null goto label1;

        $r4 = new com.google.debug.AssertionError;

        $r0 = staticinvoke <com.google.debug.Assert: java.lang.String format(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r0, $r1, $r2, $r3, $i0);

        specialinvoke $r4.<com.google.debug.AssertionError: void <init>(java.lang.String)>($r0);

        throw $r4;

     label1:
        return;
    }

    private static java.lang.String failNull(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 != 1 goto label1;

        return "expected null";

     label1:
        return "did not expect null";
    }

    private static java.lang.String failSame(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        if $z0 != 1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected instance [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("did not expect instance [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private static java.lang.String failTrue(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        if $z0 != 1 goto label1;

        return "expected true";

     label1:
        return "did not expect true";
    }

    private static java.lang.String format(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label1:
        return $r0;
    }

    private static java.lang.String format(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        int $i0;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r0 = staticinvoke <com.google.debug.Assert: java.lang.String format(java.lang.String,java.lang.String)>($r0, $r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static void xassertEquals(long, long, java.lang.String, java.lang.String, int)
    {
        long $l0, $l1;
        java.lang.String $r0, $r1;
        int $i2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        $i2 := @parameter4: int;

        staticinvoke <com.google.debug.Assert: void xassertEquals(java.lang.String,long,long,java.lang.String,java.lang.String,int)>(null, $l0, $l1, $r0, $r1, $i2);

        return;
    }

    public static void xassertEquals(java.lang.Object, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0, $r1;
        java.lang.String $r2, $r3;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        staticinvoke <com.google.debug.Assert: void xassertEquals(java.lang.String,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String,int)>(null, $r0, $r1, $r2, $r3, $i0);

        return;
    }

    public static void xassertEquals(java.lang.String, long, long, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        long $l0, $l1;
        int $i2;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        $r2 := @parameter4: java.lang.String;

        $i2 := @parameter5: int;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(long,long,boolean)>($l0, $l1, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r3, $r0, $r1, $r2, $i2);

        return;
    }

    public static void xassertEquals(java.lang.String, java.lang.Object, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r3, $r4, $r5;
        java.lang.Object $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r5 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(java.lang.Object,java.lang.Object,boolean)>($r1, $r2, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r5, $r0, $r3, $r4, $i0);

        return;
    }

    public static void xassertEquals(java.lang.String, boolean, boolean, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $r1 := @parameter3: java.lang.String;

        $r2 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(boolean,boolean,boolean)>($z0, $z1, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r3, $r0, $r1, $r2, $i0);

        return;
    }

    public static void xassertEquals(boolean, boolean, java.lang.String, java.lang.String, int)
    {
        boolean $z0, $z1;
        java.lang.String $r0, $r1;
        int $i0;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r0 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        staticinvoke <com.google.debug.Assert: void xassertEquals(java.lang.String,boolean,boolean,java.lang.String,java.lang.String,int)>(null, $z0, $z1, $r0, $r1, $i0);

        return;
    }

    public static void xassertFalse(java.lang.String, boolean, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkTrue(boolean,boolean)>($z0, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r3, $r0, $r1, $r2, $i0);

        return;
    }

    public static void xassertFalse(boolean, java.lang.String, java.lang.String, int)
    {
        boolean $z0;
        java.lang.String $r0, $r1;
        int $i0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        staticinvoke <com.google.debug.Assert: void xassertFalse(java.lang.String,boolean,java.lang.String,java.lang.String,int)>(null, $z0, $r0, $r1, $i0);

        return;
    }

    public static void xassertNotEquals(long, long, java.lang.String, java.lang.String, int)
    {
        long $l0, $l1;
        java.lang.String $r0, $r1;
        int $i2;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r0 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        $i2 := @parameter4: int;

        staticinvoke <com.google.debug.Assert: void xassertNotEquals(java.lang.String,long,long,java.lang.String,java.lang.String,int)>(null, $l0, $l1, $r0, $r1, $i2);

        return;
    }

    public static void xassertNotEquals(java.lang.Object, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0, $r1;
        java.lang.String $r2, $r3;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        staticinvoke <com.google.debug.Assert: void xassertNotEquals(java.lang.String,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String,int)>(null, $r0, $r1, $r2, $r3, $i0);

        return;
    }

    public static void xassertNotEquals(java.lang.String, long, long, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        long $l0, $l1;
        int $i2;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $r1 := @parameter3: java.lang.String;

        $r2 := @parameter4: java.lang.String;

        $i2 := @parameter5: int;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(long,long,boolean)>($l0, $l1, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r3, $r0, $r1, $r2, $i2);

        return;
    }

    public static void xassertNotEquals(java.lang.String, java.lang.Object, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r3, $r4, $r5;
        java.lang.Object $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r5 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(java.lang.Object,java.lang.Object,boolean)>($r1, $r2, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r5, $r0, $r3, $r4, $i0);

        return;
    }

    public static void xassertNotEquals(java.lang.String, boolean, boolean, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        boolean $z0, $z1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $r1 := @parameter3: java.lang.String;

        $r2 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkEquality(boolean,boolean,boolean)>($z0, $z1, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r3, $r0, $r1, $r2, $i0);

        return;
    }

    public static void xassertNotEquals(boolean, boolean, java.lang.String, java.lang.String, int)
    {
        boolean $z0, $z1;
        java.lang.String $r0, $r1;
        int $i0;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        $r0 := @parameter2: java.lang.String;

        $r1 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        staticinvoke <com.google.debug.Assert: void xassertNotEquals(java.lang.String,boolean,boolean,java.lang.String,java.lang.String,int)>(null, $z0, $z1, $r0, $r1, $i0);

        return;
    }

    public static void xassertNotNull(java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        staticinvoke <com.google.debug.Assert: void xassertNotNull(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int)>(null, $r0, $r1, $r2, $i0);

        return;
    }

    public static void xassertNotNull(java.lang.String, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r2, $r3, $r4;
        java.lang.Object $r1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r4 = staticinvoke <com.google.debug.Assert: java.lang.String checkNull(java.lang.Object,boolean)>($r1, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r4, $r0, $r2, $r3, $i0);

        return;
    }

    public static void xassertNotSame(java.lang.Object, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0, $r1;
        java.lang.String $r2, $r3;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        staticinvoke <com.google.debug.Assert: void xassertNotSame(java.lang.String,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String,int)>(null, $r0, $r1, $r2, $r3, $i0);

        return;
    }

    public static void xassertNotSame(java.lang.String, java.lang.Object, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r3, $r4, $r5;
        java.lang.Object $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r5 = staticinvoke <com.google.debug.Assert: java.lang.String checkSame(java.lang.Object,java.lang.Object,boolean)>($r1, $r2, 0);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r5, $r0, $r3, $r4, $i0);

        return;
    }

    public static void xassertNull(java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0;
        java.lang.String $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        staticinvoke <com.google.debug.Assert: void xassertNull(java.lang.String,java.lang.Object,java.lang.String,java.lang.String,int)>(null, $r0, $r1, $r2, $i0);

        return;
    }

    public static void xassertNull(java.lang.String, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r2, $r3, $r4;
        java.lang.Object $r1;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r4 = staticinvoke <com.google.debug.Assert: java.lang.String checkNull(java.lang.Object,boolean)>($r1, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r4, $r0, $r2, $r3, $i0);

        return;
    }

    public static void xassertSame(java.lang.Object, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.Object $r0, $r1;
        java.lang.String $r2, $r3;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        staticinvoke <com.google.debug.Assert: void xassertSame(java.lang.String,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String,int)>(null, $r0, $r1, $r2, $r3, $i0);

        return;
    }

    public static void xassertSame(java.lang.String, java.lang.Object, java.lang.Object, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r3, $r4, $r5;
        java.lang.Object $r1, $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $i0 := @parameter5: int;

        $r5 = staticinvoke <com.google.debug.Assert: java.lang.String checkSame(java.lang.Object,java.lang.Object,boolean)>($r1, $r2, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r5, $r0, $r3, $r4, $i0);

        return;
    }

    public static void xassertTrue(java.lang.String, boolean, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2, $r3;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r1 := @parameter2: java.lang.String;

        $r2 := @parameter3: java.lang.String;

        $i0 := @parameter4: int;

        $r3 = staticinvoke <com.google.debug.Assert: java.lang.String checkTrue(boolean,boolean)>($z0, 1);

        staticinvoke <com.google.debug.Assert: void failIfReason(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>($r3, $r0, $r1, $r2, $i0);

        return;
    }

    public static void xassertTrue(boolean, java.lang.String, java.lang.String, int)
    {
        boolean $z0;
        java.lang.String $r0, $r1;
        int $i0;

        $z0 := @parameter0: boolean;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        staticinvoke <com.google.debug.Assert: void xassertTrue(java.lang.String,boolean,java.lang.String,java.lang.String,int)>(null, $z0, $r0, $r1, $i0);

        return;
    }

    public static void xfail(java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1;
        int $i0;
        com.google.debug.AssertionError $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 = new com.google.debug.AssertionError;

        $r0 = staticinvoke <com.google.debug.Assert: java.lang.String format(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>("explicit assertion failure", null, $r0, $r1, $i0);

        specialinvoke $r2.<com.google.debug.AssertionError: void <init>(java.lang.String)>($r0);

        throw $r2;
    }

    public static void xfail(java.lang.String, java.lang.String, java.lang.String, int)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0;
        com.google.debug.AssertionError $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r3 = new com.google.debug.AssertionError;

        $r0 = staticinvoke <com.google.debug.Assert: java.lang.String format(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)>("explicit assertion failure", $r0, $r1, $r2, $i0);

        specialinvoke $r3.<com.google.debug.AssertionError: void <init>(java.lang.String)>($r0);

        throw $r3;
    }

    public static void <clinit>()
    {
        <com.google.debug.Assert: boolean POSITIVE> = 1;

        <com.google.debug.Assert: boolean NEGATIVE> = 0;

        <com.google.debug.Assert: java.lang.String FAIL_REASON> = "explicit assertion failure";

        return;
    }
}
