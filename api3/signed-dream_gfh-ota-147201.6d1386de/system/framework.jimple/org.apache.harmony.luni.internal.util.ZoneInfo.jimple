public class org.apache.harmony.luni.internal.util.ZoneInfo extends java.util.TimeZone
{
    private static final int[] LEAP;
    private static final long MILLISECONDS_PER_400_YEARS;
    private static final long MILLISECONDS_PER_DAY;
    private static final int[] NORMAL;
    private static final long UNIX_OFFSET;
    private java.lang.String mDaylightName;
    private int[] mGmtOffs;
    private byte[] mIsDsts;
    private int mRawOffset;
    private java.lang.String mStandardName;
    private int[] mTransitions;
    private byte[] mTypes;
    private boolean mUseDst;

    static void <clinit>()
    {
        int[] $r0;

        <org.apache.harmony.luni.internal.util.ZoneInfo: long UNIX_OFFSET> = 62167219200000L;

        <org.apache.harmony.luni.internal.util.ZoneInfo: long MILLISECONDS_PER_DAY> = 86400000L;

        <org.apache.harmony.luni.internal.util.ZoneInfo: long MILLISECONDS_PER_400_YEARS> = 12622780800000L;

        $r0 = newarray (int)[12];

        $r0[0] = 0;

        $r0[1] = 31;

        $r0[2] = 59;

        $r0[3] = 90;

        $r0[4] = 120;

        $r0[5] = 151;

        $r0[6] = 181;

        $r0[7] = 212;

        $r0[8] = 243;

        $r0[9] = 273;

        $r0[10] = 304;

        $r0[11] = 334;

        <org.apache.harmony.luni.internal.util.ZoneInfo: int[] NORMAL> = $r0;

        $r0 = newarray (int)[12];

        $r0[0] = 0;

        $r0[1] = 31;

        $r0[2] = 60;

        $r0[3] = 91;

        $r0[4] = 121;

        $r0[5] = 152;

        $r0[6] = 182;

        $r0[7] = 213;

        $r0[8] = 244;

        $r0[9] = 274;

        $r0[10] = 305;

        $r0[11] = 335;

        <org.apache.harmony.luni.internal.util.ZoneInfo: int[] LEAP> = $r0;

        return;
    }

    void <init>(java.lang.String, int[], byte[], int[], byte[], byte[], byte[], int)
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0;
        java.lang.String $r1;
        int[] $r2, $r4;
        byte[] $r3, $r5, $r6, $r7;
        int $i0, $i1, $i4;
        byte $b2;
        short $s3;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: int[];

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: int[];

        $r5 := @parameter4: byte[];

        $r6 := @parameter5: byte[];

        $r7 := @parameter6: byte[];

        $i0 := @parameter7: int;

        specialinvoke $r0.<java.util.TimeZone: void <init>()>();

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mTransitions> = $r2;

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes> = $r3;

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs> = $r4;

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts> = $r5;

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: boolean mUseDst> = 0;

        virtualinvoke $r0.<java.util.TimeZone: void setID(java.lang.String)>($r1);

        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mTransitions>;

        $i1 = lengthof $r2;

        $i1 = $i1 - 1;

     label01:
        if $i1 < 0 goto label02;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts>;

        $r5 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $b2 = $r5[$i1];

        $s3 = $b2 & 255;

        $b2 = $r3[$s3];

        if $b2 == 0 goto label11;

     label02:
        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mTransitions>;

        $i4 = lengthof $r2;

        $i4 = $i4 - 1;

     label03:
        if $i4 < 0 goto label04;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts>;

        $r5 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $b2 = $r5[$i4];

        $s3 = $b2 & 255;

        $b2 = $r3[$s3];

        if $b2 != 0 goto label12;

     label04:
        if $i1 < 0 goto label05;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $b2 = $r3[$i1];

        $s3 = $b2 & 255;

        $b2 = $r6[$s3];

        $r1 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String nullName(byte[],int,int)>($r7, $i0, $b2);

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mDaylightName> = $r1;

     label05:
        if $i4 < 0 goto label06;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $b2 = $r3[$i4];

        $s3 = $b2 & 255;

        $b2 = $r6[$s3];

        $r1 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String nullName(byte[],int,int)>($r7, $i0, $b2);

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mStandardName> = $r1;

     label06:
        if $i4 >= 0 goto label07;

        $i4 = 0;

     label07:
        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $i0 = lengthof $r3;

        if $i4 < $i0 goto label13;

        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $i0 = $r2[0];

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset> = $i0;

     label08:
        $i0 = 0;

     label09:
        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label14;

        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $i1 = $r2[$i0];

        $i4 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        $i1 = $i1 - $i4;

        $r2[$i0] = $i1;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts>;

        $b2 = $r3[$i0];

        if $b2 == 0 goto label10;

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: boolean mUseDst> = 1;

     label10:
        $i0 = $i0 + 1;

        goto label09;

     label11:
        $i1 = $i1 + -1;

        goto label01;

     label12:
        $i4 = $i4 + -1;

        goto label03;

     label13:
        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $b2 = $r3[$i4];

        $s3 = $b2 & 255;

        $i0 = $r2[$s3];

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset> = $i0;

        goto label08;

     label14:
        $i0 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        $i0 = $i0 * 1000;

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset> = $i0;

        return;
    }

    public static java.util.TimeZone getTimeZone(java.lang.String)
    {
        java.lang.String $r0;
        java.io.IOException $r1;
        java.util.TimeZone $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.util.TimeZone _getTimeZone(java.lang.String)>($r0);

     label2:
        return $r2;

     label3:
        $r1 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static java.lang.String nullName(byte[], int, int)
    {
        byte[] $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1;
        byte $b4;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 >= 0 goto label1;

        return null;

     label1:
        $i3 = $i0 + $i1;

     label2:
        $i2 = lengthof $r0;

        if $i3 >= $i2 goto label3;

        $b4 = $r0[$i3];

        if $b4 == 0 goto label3;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $r1 = new java.lang.String;

        $i2 = $i0 + $i1;

        $i0 = $i0 + $i1;

        $i0 = $i3 - $i0;

        specialinvoke $r1.<java.lang.String: void <init>(byte[],int,int)>($r0, $i2, $i0);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0, $r2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r8;
        int $i0, $i1;
        int[] $r4, $r5;
        byte[] $r6, $r7;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        $r1 := @parameter0: java.lang.Object;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        $z0 = $r1 instanceof org.apache.harmony.luni.internal.util.ZoneInfo;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = (org.apache.harmony.luni.internal.util.ZoneInfo) $r1;

        $z0 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: boolean mUseDst>;

        $z1 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: boolean mUseDst>;

        if $z0 != $z1 goto label6;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mDaylightName>;

        if $r3 != null goto label5;

        $r3 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mDaylightName>;

        if $r3 != null goto label6;

     label3:
        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mStandardName>;

        if $r3 != null goto label7;

        $r3 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mStandardName>;

        if $r3 != null goto label6;

     label4:
        $i0 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        $i1 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        if $i0 != $i1 goto label6;

        $r4 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $r5 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r4, $r5);

        if $z0 == 0 goto label6;

        $r6 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts>;

        $r7 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r6, $r7);

        if $z0 == 0 goto label6;

        $r6 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $r7 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r6, $r7);

        if $z0 == 0 goto label6;

        $r4 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mTransitions>;

        $r5 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mTransitions>;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r4, $r5);

        if $z0 == 0 goto label6;

        return 1;

     label5:
        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mDaylightName>;

        $r8 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mDaylightName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label3;

     label6:
        return 0;

     label7:
        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mStandardName>;

        $r8 = $r2.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mStandardName>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label6;

        goto label4;
    }

    public int getOffset(int, int, int, int, int, int)
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        long $l6, $l7;
        boolean $z0;
        int[] $r1;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        $i0 := @parameter0: int;

        $i5 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i0 = $i5 / 400;

        $l6 = (long) $i0;

        $l6 = $l6 * 12622780800000L;

        $i0 = $i5 % 400;

        $l7 = (long) $i0;

        $l7 = $l7 * 31536000000L;

        $l6 = $l6 + $l7;

        $i5 = $i0 + 3;

        $i5 = $i5 / 4;

        $l7 = (long) $i5;

        $l7 = $l7 * 86400000L;

        $l6 = $l6 + $l7;

        if $i0 <= 0 goto label1;

        $i5 = $i0 - 1;

        $i5 = $i5 / 100;

        $l7 = (long) $i5;

        $l7 = $l7 * 86400000L;

        $l6 = $l6 - $l7;

     label1:
        if $i0 == 0 goto label2;

        $i5 = $i0 % 4;

        if $i5 != 0 goto label5;

        $i0 = $i0 % 100;

        if $i0 == 0 goto label5;

     label2:
        $z0 = 1;

     label3:
        if $z0 == 0 goto label6;

        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfo: int[] LEAP>;

     label4:
        $i0 = $r1[$i1];

        $l7 = (long) $i0;

        $l7 = $l7 * 86400000L;

        $l6 = $l6 + $l7;

        $i0 = $i2 - 1;

        $l7 = (long) $i0;

        $l7 = $l7 * 86400000L;

        $l6 = $l6 + $l7;

        $l7 = (long) $i4;

        $l6 = $l6 + $l7;

        $i0 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        $l7 = (long) $i0;

        $l6 = $l6 - $l7;

        $l6 = $l6 - 62167219200000L;

        $i0 = virtualinvoke $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int getOffset(long)>($l6);

        return $i0;

     label5:
        $z0 = 0;

        goto label3;

     label6:
        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfo: int[] NORMAL>;

        goto label4;
    }

    public int getOffset(long)
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0;
        long $l0;
        int $i1, $i2;
        int[] $r1;
        byte[] $r2;
        byte $b3;
        short $s4;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        $l0 := @parameter0: long;

        $l0 = $l0 / 1000L;

        $i1 = (int) $l0;

        $r1 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r1, $i1);

        $i2 = $i1;

        if $i1 != -1 goto label1;

        $r1 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $i1 = $r1[0];

        $i1 = $i1 * 1000;

        $i2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        $i1 = $i1 + $i2;

        return $i1;

     label1:
        if $i1 >= 0 goto label2;

        $i1 = $i1 ^ -1;

        $i2 = $i1 - 1;

     label2:
        $r1 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $b3 = $r2[$i2];

        $s4 = $b3 & 255;

        $i1 = $r1[$s4];

        $i1 = $i1 * 1000;

        $i2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        $i1 = $i1 + $i2;

        return $i1;
    }

    public int getRawOffset()
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0;
        int i0;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        i0 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        return i0;
    }

    public int hashCode()
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0;
        java.lang.String $r1;
        int $i0, $i1;
        int[] $r2;
        byte[] $r3;
        boolean $z0;
        short $s2;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        $r1 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mDaylightName>;

        if $r1 != null goto label4;

        $i0 = 0;

     label1:
        $i0 = $i0 + 31;

        $i0 = $i0 * 31;

        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mGmtOffs>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r2);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r3);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $i1 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset>;

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r1 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mStandardName>;

        if $r1 != null goto label5;

        $i1 = 0;

     label2:
        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mTransitions>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(int[])>($r2);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(byte[])>($r3);

        $i0 = $i0 + $i1;

        $i0 = $i0 * 31;

        $z0 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: boolean mUseDst>;

        if $z0 == 0 goto label6;

        $s2 = 1231;

     label3:
        $i0 = $i0 + $s2;

        return $i0;

     label4:
        $r1 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mDaylightName>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        goto label1;

     label5:
        $r1 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: java.lang.String mStandardName>;

        $i1 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        goto label2;

     label6:
        $s2 = 1237;

        goto label3;
    }

    public boolean inDaylightTime(java.util.Date)
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0;
        java.util.Date $r1;
        int $i0, $i2;
        long $l1;
        int[] $r2;
        byte[] $r3, $r4;
        byte $b3;
        short $s4;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        $r1 := @parameter0: java.util.Date;

        $l1 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $l1 = $l1 / 1000L;

        $i0 = (int) $l1;

        $r2 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int[] mTransitions>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r2, $i0);

        $i2 = $i0;

        if $i0 != -1 goto label2;

        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts>;

        $b3 = $r3[0];

        if $b3 == 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        if $i0 >= 0 goto label3;

        $i0 = $i0 ^ -1;

        $i2 = $i0 - 1;

     label3:
        $r3 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mIsDsts>;

        $r4 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: byte[] mTypes>;

        $b3 = $r4[$i2];

        $s4 = $b3 & 255;

        $b3 = $r3[$s4];

        if $b3 == 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    public void setRawOffset(int)
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        $i0 := @parameter0: int;

        $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: int mRawOffset> = $i0;

        return;
    }

    public boolean useDaylightTime()
    {
        org.apache.harmony.luni.internal.util.ZoneInfo $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfo;

        z0 = $r0.<org.apache.harmony.luni.internal.util.ZoneInfo: boolean mUseDst>;

        return z0;
    }
}
