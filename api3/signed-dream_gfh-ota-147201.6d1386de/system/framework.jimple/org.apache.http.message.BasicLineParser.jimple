public class org.apache.http.message.BasicLineParser extends java.lang.Object implements org.apache.http.message.LineParser
{
    public static final org.apache.http.message.BasicLineParser DEFAULT;
    protected final org.apache.http.ProtocolVersion protocol;

    static void <clinit>()
    {
        org.apache.http.message.BasicLineParser $r0;

        $r0 = new org.apache.http.message.BasicLineParser;

        specialinvoke $r0.<org.apache.http.message.BasicLineParser: void <init>()>();

        <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.http.message.BasicLineParser $r0;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        specialinvoke $r0.<org.apache.http.message.BasicLineParser: void <init>(org.apache.http.ProtocolVersion)>(null);

        return;
    }

    public void <init>(org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser $r0;
        org.apache.http.ProtocolVersion $r1;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: org.apache.http.ProtocolVersion;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r1 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label1:
        $r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol> = $r1;

        return;
    }

    public static final org.apache.http.Header parseHeader(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.LineParser $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0;
        org.apache.http.Header $r4;

        $r0 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.apache.http.message.LineParser;

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r2 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r0);

        $r4 = interfaceinvoke $r2.<org.apache.http.message.LineParser: org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer)>($r1);

        return $r4;
    }

    public static final org.apache.http.ProtocolVersion parseProtocolVersion(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.message.LineParser $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        org.apache.http.ProtocolVersion $r5;

        $r0 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.apache.http.message.LineParser;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r4;

     label1:
        if $r3 != null goto label2;

        $r3 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r3.<org.apache.http.message.LineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r5;
    }

    public static final org.apache.http.RequestLine parseRequestLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.message.LineParser $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        org.apache.http.RequestLine $r5;

        $r0 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.apache.http.message.LineParser;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r4;

     label1:
        if $r3 != null goto label2;

        $r3 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r3.<org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r5;
    }

    public static final org.apache.http.StatusLine parseStatusLine(java.lang.String, org.apache.http.message.LineParser) throws org.apache.http.ParseException
    {
        java.lang.String $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.message.LineParser $r3;
        java.lang.IllegalArgumentException $r4;
        int $i0;
        org.apache.http.StatusLine $r5;

        $r0 := @parameter0: java.lang.String;

        $r3 := @parameter1: org.apache.http.message.LineParser;

        if $r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Value to parse may not be null.");

        throw $r4;

     label1:
        if $r3 != null goto label2;

        $r3 = <org.apache.http.message.BasicLineParser: org.apache.http.message.BasicLineParser DEFAULT>;

     label2:
        $r1 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r0);

        $r2 = new org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r5 = interfaceinvoke $r3.<org.apache.http.message.LineParser: org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        return $r5;
    }

    protected org.apache.http.ProtocolVersion createProtocolVersion(int, int)
    {
        org.apache.http.message.BasicLineParser $r0;
        int $i0, $i1;
        org.apache.http.ProtocolVersion $r1;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r1 = virtualinvoke $r1.<org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)>($i0, $i1);

        return $r1;
    }

    protected org.apache.http.RequestLine createRequestLine(java.lang.String, java.lang.String, org.apache.http.ProtocolVersion)
    {
        org.apache.http.message.BasicLineParser $r0;
        java.lang.String $r1, $r2;
        org.apache.http.ProtocolVersion $r3;
        org.apache.http.message.BasicRequestLine $r4;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.apache.http.ProtocolVersion;

        $r4 = new org.apache.http.message.BasicRequestLine;

        specialinvoke $r4.<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>($r1, $r2, $r3);

        return $r4;
    }

    protected org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion, int, java.lang.String)
    {
        org.apache.http.message.BasicLineParser $r0;
        org.apache.http.ProtocolVersion $r1;
        int $i0;
        java.lang.String $r2;
        org.apache.http.message.BasicStatusLine $r3;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: org.apache.http.ProtocolVersion;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.String;

        $r3 = new org.apache.http.message.BasicStatusLine;

        specialinvoke $r3.<org.apache.http.message.BasicStatusLine: void <init>(org.apache.http.ProtocolVersion,int,java.lang.String)>($r1, $i0, $r2);

        return $r3;
    }

    public boolean hasProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.http.ProtocolVersion $r4;
        java.lang.String $r5;
        char $c5, $c6;
        boolean $z0;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter1: org.apache.http.message.ParserCursor;

        if $r1 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r3;

     label01:
        if $r2 != null goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r3;

     label02:
        $i0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = $i0;

        $r4 = $r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r5 = virtualinvoke $r4.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i4 = $i2 + 4;

        if $i3 >= $i4 goto label03;

        return 0;

     label03:
        if $i0 >= 0 goto label05;

        $i1 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        $i1 = $i1 - 4;

        $i1 = $i1 - $i2;

     label04:
        $i0 = $i1 + $i2;

        $i0 = $i0 + 4;

        $i3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i0 <= $i3 goto label07;

        return 0;

     label05:
        if $i0 != 0 goto label04;

     label06:
        $i0 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i1 >= $i0 goto label04;

        $c5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i1);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c5);

        if $z0 == 0 goto label04;

        $i1 = $i1 + 1;

        goto label06;

     label07:
        $z0 = 1;

        $i0 = 0;

     label08:
        if $z0 == 0 goto label11;

        if $i0 >= $i2 goto label11;

        $i3 = $i1 + $i0;

        $c5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i3);

        $c6 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i0);

        if $c5 != $c6 goto label10;

        $z0 = 1;

     label09:
        $i0 = $i0 + 1;

        goto label08;

     label10:
        $z0 = 0;

        goto label09;

     label11:
        if $z0 == 0 goto label12;

        $i2 = $i1 + $i2;

        $c5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i2);

        if $c5 != 47 goto label13;

        $z0 = 1;

     label12:
        return $z0;

     label13:
        $z0 = 0;

        goto label12;
    }

    public org.apache.http.Header parseHeader(org.apache.http.util.CharArrayBuffer) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.BufferedHeader $r2;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 = new org.apache.http.message.BufferedHeader;

        specialinvoke $r2.<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>($r1);

        return $r2;
    }

    public org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.ProtocolVersion $r4;
        java.lang.String $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.apache.http.ParseException $r6;
        java.lang.StringBuilder $r7;
        boolean $z0;
        char $c6, $c7;
        java.lang.NumberFormatException $r8, $r9;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter1: org.apache.http.message.ParserCursor;

        if $r1 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r3;

     label01:
        if $r2 != null goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r3;

     label02:
        $r4 = $r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion protocol>;

        $r5 = virtualinvoke $r4.<org.apache.http.ProtocolVersion: java.lang.String getProtocol()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i1 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i2 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

        virtualinvoke $r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        $i3 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i4 = $i3 + $i0;

        $i4 = $i4 + 4;

        if $i4 <= $i2 goto label03;

        $r6 = new org.apache.http.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ParseException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label03:
        $z0 = 1;

        $i4 = 0;

     label04:
        if $z0 == 0 goto label07;

        if $i4 >= $i0 goto label07;

        $i5 = $i3 + $i4;

        $c6 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i5);

        $c7 = virtualinvoke $r5.<java.lang.String: char charAt(int)>($i4);

        if $c6 != $c7 goto label06;

        $z0 = 1;

     label05:
        $i4 = $i4 + 1;

        goto label04;

     label06:
        $z0 = 0;

        goto label05;

     label07:
        if $z0 == 0 goto label08;

        $i4 = $i3 + $i0;

        $c6 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i4);

        if $c6 != 47 goto label09;

        $z0 = 1;

     label08:
        if $z0 != 0 goto label10;

        $r6 = new org.apache.http.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid protocol version: ");

        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ParseException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label09:
        $z0 = 0;

        goto label08;

     label10:
        $i0 = $i0 + 1;

        $i3 = $i3 + $i0;

        $i0 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(46, $i3, $i2);

        if $i0 != -1 goto label11;

        $r6 = new org.apache.http.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol version number: ");

        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ParseException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label11:
        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i3, $i0);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label12:
        $i4 = $i0 + 1;

        $i5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, $i4, $i2);

        $i0 = $i5;

        if $i5 != -1 goto label13;

        $i0 = $i2;

     label13:
        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i4, $i0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label14:
        virtualinvoke $r2.<org.apache.http.message.ParserCursor: void updatePos(int)>($i0);

        $r4 = virtualinvoke $r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion createProtocolVersion(int,int)>($i3, $i1);

        return $r4;

     label15:
        $r8 := @caughtexception;

        $r6 = new org.apache.http.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol major version number: ");

        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ParseException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label16:
        $r9 := @caughtexception;

        $r6 = new org.apache.http.ParseException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid protocol minor version number: ");

        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i1, $i2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ParseException: void <init>(java.lang.String)>($r5);

        throw $r6;

        catch java.lang.NumberFormatException from label11 to label12 with label15;
        catch java.lang.NumberFormatException from label13 to label14 with label16;
    }

    public org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2, $i3;
        org.apache.http.ParseException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r8;
        java.lang.IndexOutOfBoundsException $r7;
        org.apache.http.ProtocolVersion $r9;
        boolean $z0;
        org.apache.http.RequestLine $r10;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter1: org.apache.http.message.ParserCursor;

        if $r1 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r3;

     label01:
        if $r2 != null goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r3;

     label02:
        $i0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label03:
        virtualinvoke $r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        $i2 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, $i2, $i1);

        if $i3 >= 0 goto label08;

     label04:
        $r4 = new org.apache.http.ParseException;

     label05:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r6 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.ParseException: void <init>(java.lang.String)>($r6);

     label06:
        throw $r4;

     label07:
        $r7 := @caughtexception;

        $r4 = new org.apache.http.ParseException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r6 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.ParseException: void <init>(java.lang.String)>($r6);

        throw $r4;

     label08:
        $r6 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i2, $i3);

        virtualinvoke $r2.<org.apache.http.message.ParserCursor: void updatePos(int)>($i3);

        virtualinvoke $r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        $i2 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, $i2, $i1);

        if $i3 >= 0 goto label12;

     label09:
        $r4 = new org.apache.http.ParseException;

     label10:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r6 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.ParseException: void <init>(java.lang.String)>($r6);

     label11:
        throw $r4;

     label12:
        $r8 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i2, $i3);

        virtualinvoke $r2.<org.apache.http.message.ParserCursor: void updatePos(int)>($i3);

        $r9 = virtualinvoke $r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        virtualinvoke $r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        $z0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label16;

     label13:
        $r4 = new org.apache.http.ParseException;

     label14:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request line: ");

        $r6 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.apache.http.ParseException: void <init>(java.lang.String)>($r6);

     label15:
        throw $r4;

     label16:
        $r10 = virtualinvoke $r0.<org.apache.http.message.BasicLineParser: org.apache.http.RequestLine createRequestLine(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>($r6, $r8, $r9);

     label17:
        return $r10;

        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label07;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label07;
        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label07;
        catch java.lang.IndexOutOfBoundsException from label10 to label11 with label07;
        catch java.lang.IndexOutOfBoundsException from label12 to label13 with label07;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label07;
        catch java.lang.IndexOutOfBoundsException from label16 to label17 with label07;
    }

    public org.apache.http.StatusLine parseStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor) throws org.apache.http.ParseException
    {
        org.apache.http.message.BasicLineParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.http.ProtocolVersion $r4;
        java.lang.String $r5;
        org.apache.http.StatusLine $r6;
        java.lang.NumberFormatException $r7;
        org.apache.http.ParseException $r8;
        java.lang.StringBuilder $r9;
        java.lang.IndexOutOfBoundsException $r10;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter1: org.apache.http.message.ParserCursor;

        if $r1 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r3;

     label01:
        if $r2 != null goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser cursor may not be null");

        throw $r3;

     label02:
        $i0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label03:
        $r4 = virtualinvoke $r0.<org.apache.http.message.BasicLineParser: org.apache.http.ProtocolVersion parseProtocolVersion(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        virtualinvoke $r0.<org.apache.http.message.BasicLineParser: void skipWhitespace(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        $i2 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>(32, $i2, $i1);

     label04:
        $i4 = $i3;

        if $i3 >= 0 goto label05;

        $i4 = $i1;

     label05:
        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i2, $i4);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

     label06:
        if $i4 >= $i1 goto label14;

     label07:
        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>($i4, $i1);

     label08:
        $r6 = virtualinvoke $r0.<org.apache.http.message.BasicLineParser: org.apache.http.StatusLine createStatusLine(org.apache.http.ProtocolVersion,int,java.lang.String)>($r4, $i2, $r5);

     label09:
        return $r6;

     label10:
        $r7 := @caughtexception;

        $r8 = new org.apache.http.ParseException;

     label11:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse status code from status line: ");

        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.http.ParseException: void <init>(java.lang.String)>($r5);

     label12:
        throw $r8;

     label13:
        $r10 := @caughtexception;

        $r8 = new org.apache.http.ParseException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid status line: ");

        $r5 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.http.ParseException: void <init>(java.lang.String)>($r5);

        throw $r8;

     label14:
        $r5 = "";

        goto label08;

        catch java.lang.IndexOutOfBoundsException from label03 to label04 with label13;
        catch java.lang.NumberFormatException from label05 to label06 with label10;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label13;
        catch java.lang.IndexOutOfBoundsException from label07 to label09 with label13;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
    }

    protected void skipWhitespace(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor)
    {
        org.apache.http.message.BasicLineParser $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @this: org.apache.http.message.BasicLineParser;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter1: org.apache.http.message.ParserCursor;

        $i0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getPos()>();

        $i1 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: int getUpperBound()>();

     label1:
        if $i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i0);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label2;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke $r2.<org.apache.http.message.ParserCursor: void updatePos(int)>($i0);

        return;
    }
}
