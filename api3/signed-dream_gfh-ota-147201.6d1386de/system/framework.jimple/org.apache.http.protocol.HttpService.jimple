public class org.apache.http.protocol.HttpService extends java.lang.Object
{
    private org.apache.http.ConnectionReuseStrategy connStrategy;
    private org.apache.http.protocol.HttpExpectationVerifier expectationVerifier;
    private org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver;
    private org.apache.http.params.HttpParams params;
    private org.apache.http.protocol.HttpProcessor processor;
    private org.apache.http.HttpResponseFactory responseFactory;

    public void <init>(org.apache.http.protocol.HttpProcessor, org.apache.http.ConnectionReuseStrategy, org.apache.http.HttpResponseFactory)
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.protocol.HttpProcessor $r1;
        org.apache.http.ConnectionReuseStrategy $r2;
        org.apache.http.HttpResponseFactory $r3;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        $r2 := @parameter1: org.apache.http.ConnectionReuseStrategy;

        $r3 := @parameter2: org.apache.http.HttpResponseFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = null;

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = null;

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = null;

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = null;

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = null;

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = null;

        virtualinvoke $r0.<org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)>($r1);

        virtualinvoke $r0.<org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)>($r2);

        virtualinvoke $r0.<org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)>($r3);

        return;
    }

    protected void doService(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.HttpRequest $r1;
        org.apache.http.HttpResponse $r2;
        org.apache.http.protocol.HttpContext $r3;
        org.apache.http.protocol.HttpRequestHandler $r4;
        org.apache.http.protocol.HttpRequestHandlerResolver $r5;
        org.apache.http.RequestLine $r6;
        java.lang.String $r7;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.HttpRequest;

        $r2 := @parameter1: org.apache.http.HttpResponse;

        $r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r4 = null;

        $r5 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver>;

        if $r5 == null goto label1;

        $r6 = interfaceinvoke $r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r7 = interfaceinvoke $r6.<org.apache.http.RequestLine: java.lang.String getUri()>();

        $r5 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver>;

        $r4 = interfaceinvoke $r5.<org.apache.http.protocol.HttpRequestHandlerResolver: org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)>($r7);

     label1:
        if $r4 == null goto label2;

        interfaceinvoke $r4.<org.apache.http.protocol.HttpRequestHandler: void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r1, $r2, $r3);

        return;

     label2:
        interfaceinvoke $r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(501);

        return;
    }

    public org.apache.http.params.HttpParams getParams()
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.params.HttpParams r1;

        $r0 := @this: org.apache.http.protocol.HttpService;

        r1 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        return r1;
    }

    protected void handleException(org.apache.http.HttpException, org.apache.http.HttpResponse)
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.HttpException $r1;
        org.apache.http.HttpResponse $r2;
        org.apache.http.entity.ByteArrayEntity $r3;
        boolean $z0;
        java.lang.String $r4;
        byte[] $r5;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.HttpException;

        $r2 := @parameter1: org.apache.http.HttpResponse;

        $z0 = $r1 instanceof org.apache.http.MethodNotSupportedException;

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(501);

     label1:
        $r4 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>($r4);

        $r3 = new org.apache.http.entity.ByteArrayEntity;

        specialinvoke $r3.<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>($r5);

        virtualinvoke $r3.<org.apache.http.entity.AbstractHttpEntity: void setContentType(java.lang.String)>("text/plain; charset=US-ASCII");

        interfaceinvoke $r2.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r3);

        return;

     label2:
        $z0 = $r1 instanceof org.apache.http.UnsupportedHttpVersionException;

        if $z0 == 0 goto label3;

        interfaceinvoke $r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(505);

        goto label1;

     label3:
        $z0 = $r1 instanceof org.apache.http.ProtocolException;

        if $z0 == 0 goto label4;

        interfaceinvoke $r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(400);

        goto label1;

     label4:
        interfaceinvoke $r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(500);

        goto label1;
    }

    public void handleRequest(org.apache.http.HttpServerConnection, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.HttpServerConnection $r1;
        org.apache.http.protocol.HttpContext $r2;
        org.apache.http.HttpResponse $r3, $r14;
        org.apache.http.HttpRequest $r4;
        org.apache.http.params.DefaultedHttpParams $r5;
        org.apache.http.params.HttpParams $r6, $r7;
        org.apache.http.RequestLine $r8;
        org.apache.http.ProtocolVersion $r9, $r10;
        org.apache.http.HttpVersion $r11;
        boolean $z0;
        org.apache.http.HttpEntityEnclosingRequest $r12;
        org.apache.http.HttpResponseFactory $r13;
        org.apache.http.protocol.HttpExpectationVerifier $r15;
        org.apache.http.StatusLine $r16;
        int $i0;
        org.apache.http.protocol.HttpProcessor $r17;
        org.apache.http.HttpEntity $r18;
        org.apache.http.ConnectionReuseStrategy $r19;
        org.apache.http.HttpException $r20, $r21;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.HttpServerConnection;

        $r2 := @parameter1: org.apache.http.protocol.HttpContext;

        interfaceinvoke $r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.connection", $r1);

        $r3 = null;

     label01:
        $r4 = interfaceinvoke $r1.<org.apache.http.HttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()>();

        $r5 = new org.apache.http.params.DefaultedHttpParams;

        $r6 = interfaceinvoke $r4.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r7 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r5.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r6, $r7);

        interfaceinvoke $r4.<org.apache.http.HttpRequest: void setParams(org.apache.http.params.HttpParams)>($r5);

        $r8 = interfaceinvoke $r4.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r9 = interfaceinvoke $r8.<org.apache.http.RequestLine: org.apache.http.ProtocolVersion getProtocolVersion()>();

     label02:
        $r10 = $r9;

     label03:
        $r11 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

        $z0 = virtualinvoke $r9.<org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)>($r11);

     label04:
        if $z0 != 0 goto label05;

        $r10 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

     label05:
        $z0 = $r4 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label16;

     label06:
        $r12 = (org.apache.http.HttpEntityEnclosingRequest) $r4;

        $z0 = interfaceinvoke $r12.<org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>();

     label07:
        if $z0 == 0 goto label29;

     label08:
        $r13 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r14 = interfaceinvoke $r13.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r10, 100, $r2);

     label09:
        $r3 = $r14;

     label10:
        $r5 = new org.apache.http.params.DefaultedHttpParams;

        $r6 = interfaceinvoke $r14.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r7 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r5.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r6, $r7);

        interfaceinvoke $r14.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r5);

     label11:
        $r15 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier>;

        if $r15 == null goto label13;

        $r15 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier>;

     label12:
        interfaceinvoke $r15.<org.apache.http.protocol.HttpExpectationVerifier: void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r4, $r14, $r2);

     label13:
        $r16 = interfaceinvoke $r3.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r16.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 >= 200 goto label16;

        interfaceinvoke $r1.<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>($r3);

        interfaceinvoke $r1.<org.apache.http.HttpServerConnection: void flush()>();

     label14:
        $r3 = null;

     label15:
        $r12 = (org.apache.http.HttpEntityEnclosingRequest) $r4;

        interfaceinvoke $r1.<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r12);

     label16:
        if $r3 != null goto label20;

     label17:
        $r13 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r14 = interfaceinvoke $r13.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r10, 200, $r2);

     label18:
        $r3 = $r14;

     label19:
        $r5 = new org.apache.http.params.DefaultedHttpParams;

        $r6 = interfaceinvoke $r14.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r7 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r5.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r6, $r7);

        interfaceinvoke $r14.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r5);

        interfaceinvoke $r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request", $r4);

        interfaceinvoke $r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.response", $r14);

        $r17 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor>;

        interfaceinvoke $r17.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r4, $r2);

        virtualinvoke $r0.<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r4, $r14, $r2);

     label20:
        $z0 = $r4 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label22;

     label21:
        $r12 = (org.apache.http.HttpEntityEnclosingRequest) $r4;

        $r18 = interfaceinvoke $r12.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

        if $r18 == null goto label22;

        interfaceinvoke $r18.<org.apache.http.HttpEntity: void consumeContent()>();

     label22:
        $r17 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor>;

        interfaceinvoke $r17.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r3, $r2);

        interfaceinvoke $r1.<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>($r3);

        interfaceinvoke $r1.<org.apache.http.HttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>($r3);

        interfaceinvoke $r1.<org.apache.http.HttpServerConnection: void flush()>();

        $r19 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy>;

        $z0 = interfaceinvoke $r19.<org.apache.http.ConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r3, $r2);

        if $z0 != 0 goto label32;

        interfaceinvoke $r1.<org.apache.http.HttpServerConnection: void close()>();

        return;

     label23:
        $r20 := @caughtexception;

        $r13 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r11 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

     label24:
        $r14 = interfaceinvoke $r13.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r11, 500, $r2);

     label25:
        $r3 = $r14;

     label26:
        $r5 = new org.apache.http.params.DefaultedHttpParams;

        $r6 = interfaceinvoke $r14.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r7 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r5.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r6, $r7);

        interfaceinvoke $r14.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r5);

        virtualinvoke $r0.<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>($r20, $r14);

     label27:
        goto label13;

     label28:
        $r21 := @caughtexception;

        $r13 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r11 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $r14 = interfaceinvoke $r13.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r11, 500, $r2);

        $r3 = $r14;

        $r5 = new org.apache.http.params.DefaultedHttpParams;

        $r6 = interfaceinvoke $r14.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r7 = $r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r5.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r6, $r7);

        interfaceinvoke $r14.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r5);

        virtualinvoke $r0.<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>($r21, $r14);

        goto label22;

     label29:
        $r12 = (org.apache.http.HttpEntityEnclosingRequest) $r4;

     label30:
        interfaceinvoke $r1.<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r12);

     label31:
        goto label16;

     label32:
        return;

        catch org.apache.http.HttpException from label01 to label02 with label28;
        catch org.apache.http.HttpException from label03 to label04 with label28;
        catch org.apache.http.HttpException from label06 to label07 with label28;
        catch org.apache.http.HttpException from label08 to label09 with label28;
        catch org.apache.http.HttpException from label10 to label11 with label28;
        catch org.apache.http.HttpException from label12 to label13 with label23;
        catch org.apache.http.HttpException from label13 to label14 with label28;
        catch org.apache.http.HttpException from label15 to label16 with label28;
        catch org.apache.http.HttpException from label17 to label18 with label28;
        catch org.apache.http.HttpException from label19 to label20 with label28;
        catch org.apache.http.HttpException from label21 to label22 with label28;
        catch org.apache.http.HttpException from label24 to label25 with label28;
        catch org.apache.http.HttpException from label26 to label27 with label28;
        catch org.apache.http.HttpException from label30 to label31 with label28;
    }

    public void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.ConnectionReuseStrategy $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.ConnectionReuseStrategy;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection reuse strategy may not be null");

        throw $r2;

     label1:
        $r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = $r1;

        return;
    }

    public void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier)
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.protocol.HttpExpectationVerifier $r1;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.protocol.HttpExpectationVerifier;

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = $r1;

        return;
    }

    public void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver)
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.protocol.HttpRequestHandlerResolver $r1;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.protocol.HttpRequestHandlerResolver;

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = $r1;

        return;
    }

    public void setHttpProcessor(org.apache.http.protocol.HttpProcessor)
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.protocol.HttpProcessor $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null.");

        throw $r2;

     label1:
        $r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = $r1;

        return;
    }

    public void setParams(org.apache.http.params.HttpParams)
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.params.HttpParams $r1;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.params.HttpParams;

        $r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = $r1;

        return;
    }

    public void setResponseFactory(org.apache.http.HttpResponseFactory)
    {
        org.apache.http.protocol.HttpService $r0;
        org.apache.http.HttpResponseFactory $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.protocol.HttpService;

        $r1 := @parameter0: org.apache.http.HttpResponseFactory;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response factory may not be null");

        throw $r2;

     label1:
        $r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = $r1;

        return;
    }
}
