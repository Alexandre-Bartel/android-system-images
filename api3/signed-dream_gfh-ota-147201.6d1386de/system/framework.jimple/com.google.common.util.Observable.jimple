public abstract class com.google.common.util.Observable extends java.lang.Object
{
    private java.util.Vector observers;

    public void <init>()
    {
        com.google.common.util.Observable $r0;
        java.util.Vector $r1;

        $r0 := @this: com.google.common.util.Observable;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        $r0.<com.google.common.util.Observable: java.util.Vector observers> = $r1;

        return;
    }

    public void addObserver(com.google.common.util.Observer)
    {
        com.google.common.util.Observable $r0;
        com.google.common.util.Observer $r1;
        java.util.Vector $r2, $r3;
        int $i0;
        java.lang.Throwable $r4;

        $r0 := @this: com.google.common.util.Observable;

        $r1 := @parameter0: com.google.common.util.Observer;

        $r2 = $r0.<com.google.common.util.Observable: java.util.Vector observers>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<com.google.common.util.Observable: java.util.Vector observers>;

        $i0 = virtualinvoke $r3.<java.util.Vector: int indexOf(java.lang.Object)>($r1);

        if $i0 != -1 goto label2;

        $r3 = $r0.<com.google.common.util.Observable: java.util.Vector observers>;

        virtualinvoke $r3.<java.util.Vector: void addElement(java.lang.Object)>($r1);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public com.google.common.util.Observer[] getObservers()
    {
        com.google.common.util.Observable $r0;
        java.util.Vector $r1, $r2;
        int $i0;
        com.google.common.util.Observer[] $r3;
        java.lang.Throwable $r4;

        $r0 := @this: com.google.common.util.Observable;

        $r1 = $r0.<com.google.common.util.Observable: java.util.Vector observers>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<com.google.common.util.Observable: java.util.Vector observers>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        $r3 = newarray (com.google.common.util.Observer)[$i0];

        $r2 = $r0.<com.google.common.util.Observable: java.util.Vector observers>;

        virtualinvoke $r2.<java.util.Vector: void copyInto(java.lang.Object[])>($r3);

        exitmonitor $r1;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void notifyObservers()
    {
        com.google.common.util.Observable $r0;

        $r0 := @this: com.google.common.util.Observable;

        virtualinvoke $r0.<com.google.common.util.Observable: void notifyObservers(java.lang.Object)>(null);

        return;
    }

    public void notifyObservers(java.lang.Object)
    {
        com.google.common.util.Observable $r0;
        java.lang.Object $r1;
        com.google.common.util.Observer[] $r2;
        int $i0, $i1;
        com.google.common.util.Observer $r3;

        $r0 := @this: com.google.common.util.Observable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke $r0.<com.google.common.util.Observable: com.google.common.util.Observer[] getObservers()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label2;

        $r3 = $r2[$i0];

        interfaceinvoke $r3.<com.google.common.util.Observer: void update(com.google.common.util.Observable,java.lang.Object)>($r0, $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean removeObserver(com.google.common.util.Observer)
    {
        com.google.common.util.Observable $r0;
        com.google.common.util.Observer $r1;
        java.util.Vector $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        $r0 := @this: com.google.common.util.Observable;

        $r1 := @parameter0: com.google.common.util.Observer;

        $r2 = $r0.<com.google.common.util.Observable: java.util.Vector observers>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<com.google.common.util.Observable: java.util.Vector observers>;

        $z0 = virtualinvoke $r3.<java.util.Vector: boolean removeElement(java.lang.Object)>($r1);

        exitmonitor $r2;

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
