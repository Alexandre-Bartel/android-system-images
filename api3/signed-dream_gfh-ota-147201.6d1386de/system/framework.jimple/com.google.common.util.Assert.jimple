public final class com.google.common.util.Assert extends java.lang.Object
{
    private static final java.lang.Object NULL_OBJECT;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.google.common.util.Assert: java.lang.Object NULL_OBJECT> = $r0;

        return;
    }

    private void <init>()
    {
        com.google.common.util.Assert $r0;

        $r0 := @this: com.google.common.util.Assert;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertArrayContains(java.lang.String, java.lang.Object[], java.lang.Object)
    {
        java.lang.String $r0, $r4;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: java.lang.Object;

        $i0 = staticinvoke <com.google.common.util.Assert: int assertArrayContainsInternal(java.lang.Object[],java.lang.Object)>($r1, $r2);

        if $i0 >= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("array doesn\'t contain ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r4);

        return;

     label1:
        return;
    }

    public static void assertArrayContains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertArrayContains(java.lang.String,java.lang.Object[],java.lang.Object)>(null, $r0, $r1);

        return;
    }

    private static int assertArrayContainsInternal(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'array\' may not be null.");

        throw $r2;

     label1:
        $i0 = staticinvoke <com.google.common.util.ArrayUtil: int indexOf(java.lang.Object[],java.lang.Object)>($r0, $r1);

        return $i0;
    }

    public static void assertArrayEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertArrayEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertArrayEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r5;
        java.lang.Object $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'expected\' may not be null. Use assertNull instead.");

        throw $r3;

     label1:
        if $r1 == $r2 goto label4;

        if $r2 != null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value was null when ");

        $r5 = staticinvoke <com.google.common.util.DebugUtil: java.lang.String formatArray(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was expected");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

     label2:
        $i0 = staticinvoke <com.google.common.util.DebugUtil: int getArrayLength(java.lang.Object)>($r1);

        $i1 = staticinvoke <com.google.common.util.DebugUtil: int getArrayLength(java.lang.Object)>($r2);

        if $i0 == $i1 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("array lengths differ,  expected [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

     label3:
        staticinvoke <com.google.common.util.Assert: void assertArrayRegionEqualsInternal(java.lang.String,java.lang.Object,java.lang.Object,int,int,int)>($r0, $r1, $r2, 0, 0, $i0);

        return;

     label4:
        return;
    }

    public static void assertArrayNotContains(java.lang.String, java.lang.Object[], java.lang.Object)
    {
        java.lang.String $r0, $r4;
        java.lang.Object[] $r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: java.lang.Object;

        $i0 = staticinvoke <com.google.common.util.Assert: int assertArrayContainsInternal(java.lang.Object[],java.lang.Object)>($r1, $r2);

        if $i0 < 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("array contains ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r4);

        return;

     label1:
        return;
    }

    public static void assertArrayNotContains(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertArrayNotContains(java.lang.String,java.lang.Object[],java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertArrayRegionEquals(java.lang.Object, java.lang.Object, int, int, int)
    {
        java.lang.Object $r0, $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        staticinvoke <com.google.common.util.Assert: void assertArrayRegionEquals(java.lang.String,java.lang.Object,java.lang.Object,int,int,int)>(null, $r0, $r1, $i0, $i1, $i2);

        return;
    }

    public static void assertArrayRegionEquals(java.lang.String, java.lang.Object, java.lang.Object, int, int, int)
    {
        java.lang.String $r0, $r5;
        java.lang.Object $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'expected\' may not be null. Use assertNull instead.");

        throw $r3;

     label1:
        if $r1 == $r2 goto label3;

        if $r2 != null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value was null when ");

        $r5 = staticinvoke <com.google.common.util.DebugUtil: java.lang.String formatArray(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was expected");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

     label2:
        staticinvoke <com.google.common.util.Assert: void assertArrayRegionEqualsInternal(java.lang.String,java.lang.Object,java.lang.Object,int,int,int)>($r0, $r1, $r2, $i0, $i1, $i2);

        return;

     label3:
        return;
    }

    private static void assertArrayRegionEqualsInternal(java.lang.String, java.lang.Object, java.lang.Object, int, int, int)
    {
        java.lang.String $r0, $r7;
        java.lang.Object $r1, $r2, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r3;
        java.lang.Class $r4, $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        if $i0 >= 0 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'expectedStart\' may not be less than zero.");

        throw $r3;

     label01:
        if $i1 >= 0 goto label02;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'actualStart\' may not be less than zero.");

        throw $r3;

     label02:
        if $i2 >= 0 goto label03;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'count\' may not be less than zero.");

        throw $r3;

     label03:
        $i3 = $i0 + $i2;

        $i4 = staticinvoke <com.google.common.util.DebugUtil: int getArrayLength(java.lang.Object)>($r1);

        if $i3 <= $i4 goto label04;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The region may not extend off the end of the \'expected\' array.");

        throw $r3;

     label04:
        if $r1 == $r2 goto label09;

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label05;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("arrays have different types,  expected [");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r7);

     label05:
        $i3 = staticinvoke <com.google.common.util.DebugUtil: int getArrayLength(java.lang.Object)>($r2);

        $i4 = $i1 + $i2;

        if $i3 >= $i4 goto label06;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("array too short, expected at least [");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] elements,");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but only got [");

        $i3 = staticinvoke <com.google.common.util.DebugUtil: int getArrayLength(java.lang.Object)>($r2);

        $i3 = $i3 - $i1;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r7);

     label06:
        $i3 = 0;

     label07:
        if $i3 >= $i2 goto label10;

        $i4 = $i0 + $i3;

        $r8 = staticinvoke <com.google.common.util.DebugUtil: java.lang.Object getArrayElement(java.lang.Object,int)>($r1, $i4);

        $i4 = $i1 + $i3;

        $r9 = staticinvoke <com.google.common.util.DebugUtil: java.lang.Object getArrayElement(java.lang.Object,int)>($r2, $i4);

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label08;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("arrays differ at element ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expected [");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r7);

     label08:
        $i3 = $i3 + 1;

        goto label07;

     label09:
        return;

     label10:
        return;
    }

    public static void assertContains(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.google.common.util.Assert: void assertContains(java.lang.String,java.lang.String,java.lang.String)>(null, $r0, $r1);

        return;
    }

    public static void assertContains(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>($r2);

        if -1 != $i0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' does not contain \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r1);

        return;

     label1:
        return;
    }

    public static void assertEquals(long, long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <com.google.common.util.Assert: void assertEquals(java.lang.String,long,long)>(null, $l0, $l1);

        return;
    }

    public static void assertEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertEquals(java.lang.String, long, long)
    {
        java.lang.String $r0, $r2;
        long $l0, $l1;
        byte $b2;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("values not equal, expected [");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r2);

        return;

     label1:
        return;
    }

    public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r4;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        if $r1 != null goto label1;

        if $r2 != null goto label1;

        return;

     label1:
        if $r1 == null goto label2;

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("objects not equal, expected [");

        $r4 = staticinvoke <com.google.common.util.DebugUtil: java.lang.String escape(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r4 = staticinvoke <com.google.common.util.DebugUtil: java.lang.String escape(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r4);

        return;

     label3:
        return;
    }

    public static void assertEquals(java.lang.String, java.util.Vector, java.util.Vector)
    {
        java.lang.String $r0, $r5;
        java.util.Vector $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        int $i0, $i1;
        java.lang.Object $r6, $r7;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Vector;

        $r2 := @parameter2: java.util.Vector;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'expected\' may not be null. Use assertNull instead.");

        throw $r3;

     label1:
        if $r1 == $r2 goto label7;

        if $r2 != null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value was null when [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was expected");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

     label2:
        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i0 == $i1 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vector lengths differ,  expected [");

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

     label3:
        $i0 = 0;

     label4:
        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 >= $i1 goto label8;

        $r6 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r7 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        if $r6 != null goto label6;

        if $r2 == null goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vectors differ at element ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected  [null] but got [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vectors differ at element ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

        goto label5;

     label7:
        return;

     label8:
        return;
    }

    public static void assertEquals(java.lang.String, boolean, boolean)
    {
        java.lang.String $r0, $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        if $z0 == $z1 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("booleans not equal, expected [");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r2);

        return;

     label1:
        return;
    }

    public static void assertEquals(java.util.Vector, java.util.Vector)
    {
        java.util.Vector $r0, $r1;

        $r0 := @parameter0: java.util.Vector;

        $r1 := @parameter1: java.util.Vector;

        staticinvoke <com.google.common.util.Assert: void assertEquals(java.lang.String,java.util.Vector,java.util.Vector)>(null, $r0, $r1);

        return;
    }

    public static void assertEquals(boolean, boolean)
    {
        boolean $z0, $z1;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        staticinvoke <com.google.common.util.Assert: void assertEquals(java.lang.String,boolean,boolean)>(null, $z0, $z1);

        return;
    }

    public static void assertEqualsAnyOrder(java.lang.String, java.util.Vector, java.util.Vector)
    {
        java.lang.String $r0, $r5;
        java.util.Vector $r1, $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        int $i0, $i1;
        java.util.Hashtable $r6;
        java.util.Enumeration $r7;
        boolean $z0;
        java.lang.Object $r8, $r9;
        java.lang.Integer $r10, $r11;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Vector;

        $r2 := @parameter2: java.util.Vector;

        if $r1 != null goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter \'expected\' may not be null. Use assertNull instead.");

        throw $r3;

     label01:
        if $r1 == $r2 goto label12;

        if $r2 != null goto label02;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value was null when [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was expected");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

     label02:
        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if $i0 == $i1 goto label03;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vector lengths differ,  expected [");

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

     label03:
        $r6 = new java.util.Hashtable;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        specialinvoke $r6.<java.util.Hashtable: void <init>(int)>($i0);

        $r7 = virtualinvoke $r2.<java.util.Vector: java.util.Enumeration elements()>();

     label04:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label07;

        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        if $r8 != null goto label14;

        $r8 = <com.google.common.util.Assert: java.lang.Object NULL_OBJECT>;

     label05:
        $r9 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (java.lang.Integer) $r9;

        if $r10 != null goto label06;

        $r10 = new java.lang.Integer;

        specialinvoke $r10.<java.lang.Integer: void <init>(int)>(1);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r10);

        goto label04;

     label06:
        $r11 = new java.lang.Integer;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i0 = $i0 + 1;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

        goto label04;

     label07:
        $r7 = virtualinvoke $r1.<java.util.Vector: java.util.Enumeration elements()>();

     label08:
        $z0 = interfaceinvoke $r7.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label15;

        $r8 = interfaceinvoke $r7.<java.util.Enumeration: java.lang.Object nextElement()>();

        if $r8 != null goto label13;

        $r8 = <com.google.common.util.Assert: java.lang.Object NULL_OBJECT>;

     label09:
        $r9 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (java.lang.Integer) $r9;

        if $r10 == null goto label10;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if $i0 != 0 goto label11;

     label10:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vectors differ, expected object [");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] was not found");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r5);

        goto label08;

     label11:
        $r11 = new java.lang.Integer;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        $i0 = $i0 - 1;

        specialinvoke $r11.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r11);

        goto label08;

     label12:
        return;

     label13:
        goto label09;

     label14:
        goto label05;

     label15:
        return;
    }

    public static void assertEqualsAnyOrder(java.util.Vector, java.util.Vector)
    {
        java.util.Vector $r0, $r1;

        $r0 := @parameter0: java.util.Vector;

        $r1 := @parameter1: java.util.Vector;

        staticinvoke <com.google.common.util.Assert: void assertEqualsAnyOrder(java.lang.String,java.util.Vector,java.util.Vector)>(null, $r0, $r1);

        return;
    }

    public static void assertFalse(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $z0 == 0 goto label1;

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, "condition was true");

        return;

     label1:
        return;
    }

    public static void assertFalse(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <com.google.common.util.Assert: void assertFalse(java.lang.String,boolean)>(null, $z0);

        return;
    }

    public static void assertLocked(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertLocked(java.lang.String,java.lang.Object)>(null, $r0);

        return;
    }

    public static void assertLocked(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0, $r4;
        java.lang.Object $r1;
        java.lang.IllegalMonitorStateException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, "object is null");

     label1:
        virtualinvoke $r1.<java.lang.Object: void notify()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("monitor on [");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not held by current thread");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r4);

        return;

        catch java.lang.IllegalMonitorStateException from label1 to label2 with label3;
    }

    public static void assertNotContains(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <com.google.common.util.Assert: void assertNotContains(java.lang.String,java.lang.String,java.lang.String)>(null, $r0, $r1);

        return;
    }

    public static void assertNotContains(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        int $i0;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>($r2);

        if -1 == $i0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' contains \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r1);

        return;

     label1:
        return;
    }

    public static void assertNotEquals(long, long)
    {
        long $l0, $l1;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        staticinvoke <com.google.common.util.Assert: void assertNotEquals(java.lang.String,long,long)>(null, $l0, $l1);

        return;
    }

    public static void assertNotEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertNotEquals(java.lang.String, long, long)
    {
        java.lang.String $r0, $r2;
        long $l0, $l1;
        byte $b2;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("values equal, did not expect [");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r2);

        return;

     label1:
        return;
    }

    public static void assertNotEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r4;
        java.lang.Object $r1, $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        if $r1 != null goto label3;

        if $r2 != null goto label2;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("objects equal, did not expect [");

        $r4 = staticinvoke <com.google.common.util.DebugUtil: java.lang.String escape(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r4);

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        goto label1;

     label4:
        return;
    }

    public static void assertNotEquals(java.lang.String, boolean, boolean)
    {
        java.lang.String $r0, $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        if $z0 != $z1 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("booleans equal, did not expect [");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r2);

        return;

     label1:
        return;
    }

    public static void assertNotEquals(boolean, boolean)
    {
        boolean $z0, $z1;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        staticinvoke <com.google.common.util.Assert: void assertNotEquals(java.lang.String,boolean,boolean)>(null, $z0, $z1);

        return;
    }

    public static void assertNotLocked(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertNotLocked(java.lang.String,java.lang.Object)>(null, $r0);

        return;
    }

    public static void assertNotLocked(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0, $r3;
        java.lang.Object $r1;
        java.lang.StringBuilder $r2;
        java.lang.IllegalMonitorStateException $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, "object is null");

     label1:
        virtualinvoke $r1.<java.lang.Object: void notify()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("monitor on [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is held by current thread");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        return;

        catch java.lang.IllegalMonitorStateException from label1 to label2 with label3;
    }

    public static void assertNotNull(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertNotNull(java.lang.String,java.lang.Object)>(null, $r0);

        return;
    }

    public static void assertNotNull(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, "object is null");

        return;

     label1:
        return;
    }

    public static void assertNotSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertNotSame(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertNotSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r4;
        java.lang.Object $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        if $r1 != $r2 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("objects same, did not expect [");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r4);

        return;

     label1:
        return;
    }

    public static void assertNull(java.lang.Object)
    {
        java.lang.Object $r0;

        $r0 := @parameter0: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertNull(java.lang.String,java.lang.Object)>(null, $r0);

        return;
    }

    public static void assertNull(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0, $r3;
        java.lang.Object $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        if $r1 == null goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("object is not null [");

        $r3 = staticinvoke <com.google.common.util.DebugUtil: java.lang.String escape(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r3);

        return;

     label1:
        return;
    }

    public static void assertSame(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <com.google.common.util.Assert: void assertSame(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertSame(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r4;
        java.lang.Object $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        if $r1 == $r2 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("objects not same, expected [");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] but got [");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, $r4);

        return;

     label1:
        return;
    }

    public static void assertTrue(java.lang.String, boolean)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $z0 != 0 goto label1;

        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String,java.lang.String)>($r0, "condition was false");

        return;

     label1:
        return;
    }

    public static void assertTrue(boolean)
    {
        boolean $z0;

        $z0 := @parameter0: boolean;

        staticinvoke <com.google.common.util.Assert: void assertTrue(java.lang.String,boolean)>(null, $z0);

        return;
    }

    public static void fail(java.lang.String)
    {
        java.lang.String $r0;
        com.google.common.util.AssertionError $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new com.google.common.util.AssertionError;

        specialinvoke $r1.<com.google.common.util.AssertionError: void <init>(java.lang.String)>($r0);

        throw $r1;
    }

    private static void fail(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 == null goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" :: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        staticinvoke <com.google.common.util.Assert: void fail(java.lang.String)>($r0);

        return;

     label2:
        $r0 = $r1;

        goto label1;
    }
}
