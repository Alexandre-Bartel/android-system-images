public class com.google.common.util.ArrayUtil extends java.lang.Object
{

    private void <init>()
    {
        com.google.common.util.ArrayUtil $r0;

        $r0 := @this: com.google.common.util.ArrayUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Vector asVector(java.lang.Object[])
    {
        java.lang.Object[] $r0;
        java.util.Vector $r1;
        int $i0, $i1;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.Object[];

        $r1 = new java.util.Vector;

        $i0 = lengthof $r0;

        specialinvoke $r1.<java.util.Vector: void <init>(int)>($i0);

        $i0 = 0;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $r2 = $r0[$i0];

        virtualinvoke $r1.<java.util.Vector: void addElement(java.lang.Object)>($r2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public static void copyIntoVector(java.util.Vector, int, java.util.Vector)
    {
        java.util.Vector $r0, $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @parameter0: java.util.Vector;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.util.Vector;

        entermonitor $r1;

        $i2 = $i0;

     label1:
        $i1 = virtualinvoke $r0.<java.util.Vector: int size()>();

        if $i2 >= $i1 goto label2;

        $r2 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>($i2);

        $i1 = $i2 - $i0;

        virtualinvoke $r1.<java.util.Vector: void insertElementAt(java.lang.Object,int)>($r2, $i1);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static boolean equals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 != null goto label2;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    public static boolean equals(java.util.Vector, java.util.Vector)
    {
        java.util.Vector $r0, $r1;
        int $i0, $i1;
        java.lang.Object $r2, $r3;
        boolean $z0;

        $r0 := @parameter0: java.util.Vector;

        $r1 := @parameter1: java.util.Vector;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        $i1 = virtualinvoke $r1.<java.util.Vector: int size()>();

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        $i1 = 0;

     label5:
        if $i1 >= $i0 goto label7;

        $r2 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r3 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $z0 = staticinvoke <com.google.common.util.ArrayUtil: boolean equals(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label6;

        return 0;

     label6:
        $i1 = $i1 + 1;

        goto label5;

     label7:
        return 1;
    }

    public static boolean equals(byte[], byte[])
    {
        byte[] $r0, $r1;
        byte $b0, $b3;
        int $i1, $i2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i1 = lengthof $r0;

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label4;

        return 0;

     label4:
        $i1 = 0;

     label5:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label7;

        $b3 = $r0[$i1];

        $b0 = $r1[$i1];

        if $b3 == $b0 goto label6;

        return 0;

     label6:
        $i1 = $i1 + 1;

        goto label5;

     label7:
        return 1;
    }

    public static boolean equals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] $r0, $r1;
        java.lang.Object $r2, $r3;
        boolean $z0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object[];

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label2;

        if $r1 != null goto label3;

     label2:
        return 0;

     label3:
        $i0 = lengthof $r0;

        $i1 = lengthof $r1;

        if $i0 == $i1 goto label4;

        return 0;

     label4:
        $i0 = 0;

     label5:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label7;

        $r3 = $r0[$i0];

        $r2 = $r1[$i0];

        $z0 = staticinvoke <com.google.common.util.ArrayUtil: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $z0 != 0 goto label6;

        return 0;

     label6:
        $i0 = $i0 + 1;

        goto label5;

     label7:
        return 1;
    }

    public static void fill(int[], int)
    {
        int[] $r0;
        int $i0, $i1;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 = lengthof $r0;

        staticinvoke <com.google.common.util.ArrayUtil: void fill(int[],int,int,int)>($r0, $i0, 0, $i1);

        return;
    }

    public static void fill(int[], int, int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i2 = $i1 + $i2;

     label1:
        if $i1 >= $i2 goto label2;

        $r0[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void fill(boolean[], boolean)
    {
        boolean[] $r0;
        boolean $z0;
        int $i0, $i1;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i1 = 0;

     label1:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label2;

        $r0[$i1] = $z0;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static long getNthElement(long[], int)
    {
        long $l0, $l4;
        long[] $r0, $r5, $r6;
        int $i1, $i2, $i3, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.util.Random $r4;
        byte $b8;

        $r0 := @parameter0: long[];

        $i1 := @parameter1: int;

        $i2 = lengthof $r0;

        $i3 = $i2;

        if $i1 >= $i2 goto label01;

        if $i1 >= 0 goto label02;

     label01:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" invalid for: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label02:
        $r4 = new java.util.Random;

        specialinvoke $r4.<java.util.Random: void <init>()>();

        $r6 = newarray (long)[$i2];

        $r5 = newarray (long)[$i2];

     label03:
        $i2 = virtualinvoke $r4.<java.util.Random: int nextInt()>();

        $i2 = staticinvoke <java.lang.Math: int abs(int)>($i2);

        $i2 = $i2 % $i3;

        $l4 = $r0[$i2];

        $i5 = 0;

        $i6 = 0;

        $i2 = 0;

        $i7 = 0;

     label04:
        if $i6 >= $i3 goto label08;

        $l0 = $r0[$i6];

        $b8 = $l0 cmp $l4;

        if $b8 >= 0 goto label06;

        $r5[$i7] = $l0;

        $i7 = $i7 + 1;

     label05:
        $i6 = $i6 + 1;

        goto label04;

     label06:
        $b8 = $l0 cmp $l4;

        if $b8 <= 0 goto label07;

        $r6[$i2] = $l0;

        $i2 = $i2 + 1;

        goto label05;

     label07:
        $i5 = $i5 + 1;

        goto label05;

     label08:
        if $i1 >= $i7 goto label09;

        $r0 = $r5;

        $r5 = newarray (long)[$i7];

        $i3 = $i7;

        goto label03;

     label09:
        $i3 = $i7 + $i5;

        if $i1 >= $i3 goto label10;

        return $l4;

     label10:
        $i3 = $i7 + $i5;

        $i1 = $i1 - $i3;

        $r0 = $r6;

        $r6 = newarray (long)[$i2];

        $i3 = $i2;

        goto label03;
    }

    public static int indexOf(int[], int)
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i0 = staticinvoke <com.google.common.util.ArrayUtil: int indexOf(int[],int,int)>($r0, $i0, 0);

        return $i0;
    }

    public static int indexOf(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

     label1:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label3;

        $i2 = $r0[$i1];

        if $i2 != $i0 goto label2;

        return $i1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static int indexOf(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <com.google.common.util.ArrayUtil: int indexOf(java.lang.Object[],java.lang.Object,int)>($r0, $r1, 0);

        return $i0;
    }

    public static int indexOf(java.lang.Object[], java.lang.Object, int)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $r2 = $r0[$i0];

        $z0 = staticinvoke <com.google.common.util.ArrayUtil: boolean equals(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static int indexOf(boolean[], boolean)
    {
        boolean[] $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i0 = staticinvoke <com.google.common.util.ArrayUtil: int indexOf(boolean[],boolean,int)>($r0, $z0, 0);

        return $i0;
    }

    public static int indexOf(boolean[], boolean, int)
    {
        boolean[] $r0;
        boolean $z0, $z1;
        int $i0, $i1;

        $r0 := @parameter0: boolean[];

        $z0 := @parameter1: boolean;

        $i0 := @parameter2: int;

     label1:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label3;

        $z1 = $r0[$i0];

        if $z1 != $z0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public static int lastIndexOf(java.lang.Object[], java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <com.google.common.util.ArrayUtil: int lastIndexOf(java.lang.Object[],java.lang.Object,int)>($r0, $r1, 2147483647);

        return $i0;
    }

    public static int lastIndexOf(java.lang.Object[], java.lang.Object, int)
    {
        java.lang.Object[] $r0;
        java.lang.Object $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $i1 = lengthof $r0;

        $i1 = $i1 - 1;

        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

     label1:
        if $i0 < 0 goto label3;

        $r2 = $r0[$i0];

        $z0 = staticinvoke <com.google.common.util.ArrayUtil: boolean equals(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + -1;

        goto label1;

     label3:
        return -1;
    }

    public static void qsort(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        staticinvoke <com.google.common.util.ArrayUtil: void qsort(int[],int)>($r0, $i0);

        return;
    }

    public static void qsort(int[], int)
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        if $i0 > 1 goto label1;

        return;

     label1:
        $i0 = $i0 - 1;

        staticinvoke <com.google.common.util.ArrayUtil: void qsort(int[],int,int)>($r0, 0, $i0);

        return;
    }

    public static void qsort(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = $i0 + $i1;

        $i3 = $i3 / 2;

        $i4 = $r0[$i3];

        $i3 = $i1;

        $i5 = $i0;

     label1:
        $i2 = $r0[$i5];

        if $i2 >= $i4 goto label2;

        $i5 = $i5 + 1;

        goto label1;

     label2:
        $i2 = $r0[$i3];

        if $i4 >= $i2 goto label3;

        $i3 = $i3 + -1;

        goto label2;

     label3:
        if $i5 < $i3 goto label5;

        $i4 = $i5 - 1;

        if $i0 >= $i4 goto label4;

        $i5 = $i5 - 1;

        staticinvoke <com.google.common.util.ArrayUtil: void qsort(int[],int,int)>($r0, $i0, $i5);

     label4:
        $i0 = $i3 + 1;

        if $i0 >= $i1 goto label6;

        $i0 = $i3 + 1;

        staticinvoke <com.google.common.util.ArrayUtil: void qsort(int[],int,int)>($r0, $i0, $i1);

        return;

     label5:
        $i6 = $r0[$i5];

        $i2 = $r0[$i3];

        $r0[$i5] = $i2;

        $r0[$i3] = $i6;

        $i5 = $i5 + 1;

        $i3 = $i3 + -1;

        goto label1;

     label6:
        return;
    }

    public static void qsort(java.lang.Object[], com.google.common.util.Comparator)
    {
        java.lang.Object[] $r0;
        com.google.common.util.Comparator $r1;
        int $i0;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: com.google.common.util.Comparator;

        $i0 = lengthof $r0;

        if $i0 <= 1 goto label1;

        $i0 = $i0 - 1;

        staticinvoke <com.google.common.util.ArrayUtil: void qsort(java.lang.Object[],com.google.common.util.Comparator,int,int)>($r0, $r1, 0, $i0);

        return;

     label1:
        return;
    }

    public static void qsort(java.lang.Object[], com.google.common.util.Comparator, int, int)
    {
        java.lang.Object[] $r0;
        com.google.common.util.Comparator $r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r2, $r3, $r4;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: com.google.common.util.Comparator;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $i2 = $i0 + $i1;

        $i2 = $i2 / 2;

        $r3 = $r0[$i2];

        $i2 = $i1;

        $i3 = $i0;

     label1:
        $r2 = $r0[$i3];

        $i4 = interfaceinvoke $r1.<com.google.common.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $i4 >= 0 goto label2;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $r2 = $r0[$i2];

        $i4 = interfaceinvoke $r1.<com.google.common.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, $r2);

        if $i4 >= 0 goto label3;

        $i2 = $i2 + -1;

        goto label2;

     label3:
        if $i3 < $i2 goto label5;

        $i4 = $i3 - 1;

        if $i0 >= $i4 goto label4;

        $i3 = $i3 - 1;

        staticinvoke <com.google.common.util.ArrayUtil: void qsort(java.lang.Object[],com.google.common.util.Comparator,int,int)>($r0, $r1, $i0, $i3);

     label4:
        $i0 = $i2 + 1;

        if $i0 >= $i1 goto label6;

        $i0 = $i2 + 1;

        staticinvoke <com.google.common.util.ArrayUtil: void qsort(java.lang.Object[],com.google.common.util.Comparator,int,int)>($r0, $r1, $i0, $i1);

        return;

     label5:
        $r4 = $r0[$i3];

        $r2 = $r0[$i2];

        $r0[$i3] = $r2;

        $r0[$i2] = $r4;

        $i3 = $i3 + 1;

        $i2 = $i2 + -1;

        goto label1;

     label6:
        return;
    }

    public static int sum(int[])
    {
        int[] $r0;
        int $i0;

        $r0 := @parameter0: int[];

        $i0 = lengthof $r0;

        $i0 = staticinvoke <com.google.common.util.ArrayUtil: int sum(int[],int,int)>($r0, 0, $i0);

        return $i0;
    }

    public static int sum(int[], int, int)
    {
        int[] $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @parameter0: int[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i1 = $i0 + $i1;

        $i2 = 0;

        $i3 = $i0;

     label1:
        if $i3 >= $i1 goto label2;

        $i0 = $r0[$i3];

        $i2 = $i2 + $i0;

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return $i2;
    }
}
