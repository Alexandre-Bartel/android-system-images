public abstract class org.apache.http.impl.auth.AuthSchemeBase extends java.lang.Object implements org.apache.http.auth.AuthScheme
{
    private boolean proxy;

    public void <init>()
    {
        org.apache.http.impl.auth.AuthSchemeBase $r0;

        $r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isProxy()
    {
        org.apache.http.impl.auth.AuthSchemeBase $r0;
        boolean z0;

        $r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        z0 = $r0.<org.apache.http.impl.auth.AuthSchemeBase: boolean proxy>;

        return z0;
    }

    protected abstract void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException;

    public void processChallenge(org.apache.http.Header) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.impl.auth.AuthSchemeBase $r0;
        int $i0, $i1, $i3;
        org.apache.http.Header $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3, $r8;
        boolean $z0;
        org.apache.http.FormattedHeader $r4;
        org.apache.http.util.CharArrayBuffer $r5;
        char $c2;
        org.apache.http.auth.MalformedChallengeException $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: org.apache.http.impl.auth.AuthSchemeBase;

        $r1 := @parameter0: org.apache.http.Header;

        if $r1 != null goto label01;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header may not be null");

        throw $r2;

     label01:
        $r3 = interfaceinvoke $r1.<org.apache.http.Header: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("WWW-Authenticate");

        if $z0 == 0 goto label04;

        $r0.<org.apache.http.impl.auth.AuthSchemeBase: boolean proxy> = 0;

     label02:
        $z0 = $r1 instanceof org.apache.http.FormattedHeader;

        if $z0 == 0 goto label06;

        $r4 = (org.apache.http.FormattedHeader) $r1;

        $r5 = interfaceinvoke $r4.<org.apache.http.FormattedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>();

        $r4 = (org.apache.http.FormattedHeader) $r1;

        $i1 = interfaceinvoke $r4.<org.apache.http.FormattedHeader: int getValuePos()>();

     label03:
        $i0 = virtualinvoke $r5.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i1 >= $i0 goto label08;

        $c2 = virtualinvoke $r5.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i1);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c2);

        if $z0 == 0 goto label08;

        $i1 = $i1 + 1;

        goto label03;

     label04:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Proxy-Authenticate");

        if $z0 == 0 goto label05;

        $r0.<org.apache.http.impl.auth.AuthSchemeBase: boolean proxy> = 1;

        goto label02;

     label05:
        $r6 = new org.apache.http.auth.MalformedChallengeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected header name: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>($r3);

        throw $r6;

     label06:
        $r3 = interfaceinvoke $r1.<org.apache.http.Header: java.lang.String getValue()>();

        if $r3 != null goto label07;

        $r6 = new org.apache.http.auth.MalformedChallengeException;

        specialinvoke $r6.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>("Header value is null");

        throw $r6;

     label07:
        $r5 = new org.apache.http.util.CharArrayBuffer;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        specialinvoke $r5.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i1);

        virtualinvoke $r5.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r3);

        $i1 = 0;

        goto label03;

     label08:
        $i0 = $i1;

     label09:
        $i3 = virtualinvoke $r5.<org.apache.http.util.CharArrayBuffer: int length()>();

        if $i1 >= $i3 goto label10;

        $c2 = virtualinvoke $r5.<org.apache.http.util.CharArrayBuffer: char charAt(int)>($i1);

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label10;

        $i1 = $i1 + 1;

        goto label09;

     label10:
        $r3 = virtualinvoke $r5.<org.apache.http.util.CharArrayBuffer: java.lang.String substring(int,int)>($i0, $i1);

        $r8 = virtualinvoke $r0.<org.apache.http.impl.auth.AuthSchemeBase: java.lang.String getSchemeName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r8);

        if $z0 != 0 goto label11;

        $r6 = new org.apache.http.auth.MalformedChallengeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid scheme identifier: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>($r3);

        throw $r6;

     label11:
        $i0 = virtualinvoke $r5.<org.apache.http.util.CharArrayBuffer: int length()>();

        virtualinvoke $r0.<org.apache.http.impl.auth.AuthSchemeBase: void parseChallenge(org.apache.http.util.CharArrayBuffer,int,int)>($r5, $i1, $i0);

        return;
    }
}
