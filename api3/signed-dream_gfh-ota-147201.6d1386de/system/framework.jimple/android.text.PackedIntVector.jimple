class android.text.PackedIntVector extends java.lang.Object
{
    private final int mColumns;
    private int mRowGapLength;
    private int mRowGapStart;
    private int mRows;
    private int[] mValueGap;
    private int[] mValues;

    public void <init>(int)
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1;
        int[] $r1;

        $r0 := @this: android.text.PackedIntVector;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.text.PackedIntVector: int mColumns> = $i0;

        $r0.<android.text.PackedIntVector: int mRows> = 0;

        $r0.<android.text.PackedIntVector: int mRowGapStart> = 0;

        $i1 = $r0.<android.text.PackedIntVector: int mRows>;

        $r0.<android.text.PackedIntVector: int mRowGapLength> = $i1;

        $r0.<android.text.PackedIntVector: int[] mValues> = null;

        $i0 = $i0 * 2;

        $r1 = newarray (int)[$i0];

        $r0.<android.text.PackedIntVector: int[] mValueGap> = $r1;

        return;
    }

    private final void growBuffer()
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        int[] $r1, $r2, $r3;

        $r0 := @this: android.text.PackedIntVector;

        $i1 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i3 = virtualinvoke $r0.<android.text.PackedIntVector: int size()>();

        $i3 = $i3 + 1;

        $i3 = $i3 * $i1;

        $i3 = staticinvoke <com.android.internal.util.ArrayUtils: int idealIntArraySize(int)>($i3);

        $i3 = $i3 / $i1;

        $i2 = $i3 * $i1;

        $r1 = newarray (int)[$i2];

        $r2 = $r0.<android.text.PackedIntVector: int[] mValueGap>;

        $i2 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        $i0 = $r0.<android.text.PackedIntVector: int mRows>;

        $i4 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i4 = $i4 + $i2;

        $i0 = $i0 - $i4;

        $r3 = $r0.<android.text.PackedIntVector: int[] mValues>;

        if $r3 == null goto label1;

        $r3 = $r0.<android.text.PackedIntVector: int[] mValues>;

        $i4 = $i1 * $i2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i4);

        $r3 = $r0.<android.text.PackedIntVector: int[] mValues>;

        $i4 = $r0.<android.text.PackedIntVector: int mRows>;

        $i4 = $i4 - $i0;

        $i4 = $i4 * $i1;

        $i5 = $i3 - $i0;

        $i5 = $i5 * $i1;

        $i0 = $i0 * $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i4, $r1, $i5, $i0);

     label1:
        $i0 = 0;

     label2:
        if $i0 >= $i1 goto label4;

        $i4 = $r2[$i0];

        if $i4 < $i2 goto label3;

        $i4 = $r2[$i0];

        $i5 = $r0.<android.text.PackedIntVector: int mRows>;

        $i5 = $i3 - $i5;

        $i4 = $i4 + $i5;

        $r2[$i0] = $i4;

        $i4 = $r2[$i0];

        if $i4 >= $i2 goto label3;

        $r2[$i0] = $i2;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $i1 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i2 = $r0.<android.text.PackedIntVector: int mRows>;

        $i2 = $i3 - $i2;

        $i1 = $i1 + $i2;

        $r0.<android.text.PackedIntVector: int mRowGapLength> = $i1;

        $r0.<android.text.PackedIntVector: int mRows> = $i3;

        $r0.<android.text.PackedIntVector: int[] mValues> = $r1;

        return;
    }

    private final void moveRowGapTo(int)
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        int[] $r1, $r2;

        $r0 := @this: android.text.PackedIntVector;

        $i0 := @parameter0: int;

        $i2 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        if $i0 != $i2 goto label01;

        return;

     label01:
        $i2 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        if $i0 <= $i2 goto label07;

        $i2 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i2 = $i2 + $i0;

        $i3 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        $i1 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i1 = $i3 + $i1;

        $i2 = $i2 - $i1;

        $i1 = $r0.<android.text.PackedIntVector: int mColumns>;

        $r1 = $r0.<android.text.PackedIntVector: int[] mValueGap>;

        $r2 = $r0.<android.text.PackedIntVector: int[] mValues>;

        $i3 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        $i4 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i3 = $i3 + $i4;

        $i4 = $i3;

     label02:
        $i5 = $i3 + $i2;

        if $i4 >= $i5 goto label13;

        $i5 = $i4 - $i3;

        $i6 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        $i5 = $i5 + $i6;

        $i6 = 0;

     label03:
        if $i6 >= $i1 goto label06;

        $i7 = $i4 * $i1;

        $i7 = $i7 + $i6;

        $i7 = $r2[$i7];

        $i8 = $r1[$i6];

        if $i4 < $i8 goto label04;

        $i8 = $i6 + $i1;

        $i8 = $r1[$i8];

        $i7 = $i7 + $i8;

     label04:
        $i8 = $r1[$i6];

        if $i5 < $i8 goto label05;

        $i8 = $i6 + $i1;

        $i8 = $r1[$i8];

        $i7 = $i7 - $i8;

     label05:
        $i8 = $i5 * $i1;

        $i8 = $i8 + $i6;

        $r2[$i8] = $i7;

        $i6 = $i6 + 1;

        goto label03;

     label06:
        $i4 = $i4 + 1;

        goto label02;

     label07:
        $i2 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        $i2 = $i2 - $i0;

        $i1 = $r0.<android.text.PackedIntVector: int mColumns>;

        $r1 = $r0.<android.text.PackedIntVector: int[] mValueGap>;

        $r2 = $r0.<android.text.PackedIntVector: int[] mValues>;

        $i3 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        $i4 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i3 = $i3 + $i4;

        $i4 = $i0 + $i2;

        $i4 = $i4 - 1;

     label08:
        if $i4 < $i0 goto label13;

        $i5 = $i4 - $i0;

        $i5 = $i5 + $i3;

        $i5 = $i5 - $i2;

        $i6 = 0;

     label09:
        if $i6 >= $i1 goto label12;

        $i7 = $i4 * $i1;

        $i7 = $i7 + $i6;

        $i7 = $r2[$i7];

        $i8 = $r1[$i6];

        if $i4 < $i8 goto label10;

        $i8 = $i6 + $i1;

        $i8 = $r1[$i8];

        $i7 = $i7 + $i8;

     label10:
        $i8 = $r1[$i6];

        if $i5 < $i8 goto label11;

        $i8 = $i6 + $i1;

        $i8 = $r1[$i8];

        $i7 = $i7 - $i8;

     label11:
        $i8 = $i5 * $i1;

        $i8 = $i8 + $i6;

        $r2[$i8] = $i7;

        $i6 = $i6 + 1;

        goto label09;

     label12:
        $i4 = $i4 + -1;

        goto label08;

     label13:
        $r0.<android.text.PackedIntVector: int mRowGapStart> = $i0;

        return;
    }

    private final void moveValueGapTo(int, int)
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        int[] $r1, $r2;

        $r0 := @this: android.text.PackedIntVector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r0.<android.text.PackedIntVector: int[] mValueGap>;

        $r2 = $r0.<android.text.PackedIntVector: int[] mValues>;

        $i2 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i3 = $r1[$i0];

        if $i1 != $i3 goto label1;

        return;

     label1:
        $i3 = $r1[$i0];

        if $i1 <= $i3 goto label3;

        $i3 = $r1[$i0];

     label2:
        if $i3 >= $i1 goto label5;

        $i4 = $i3 * $i2;

        $i4 = $i4 + $i0;

        $i5 = $r2[$i4];

        $i6 = $i0 + $i2;

        $i6 = $r1[$i6];

        $i5 = $i5 + $i6;

        $r2[$i4] = $i5;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        $i3 = $i1;

     label4:
        $i4 = $r1[$i0];

        if $i3 >= $i4 goto label5;

        $i4 = $i3 * $i2;

        $i4 = $i4 + $i0;

        $i5 = $r2[$i4];

        $i6 = $i0 + $i2;

        $i6 = $r1[$i6];

        $i5 = $i5 - $i6;

        $r2[$i4] = $i5;

        $i3 = $i3 + 1;

        goto label4;

     label5:
        $r1[$i0] = $i1;

        return;
    }

    private void setValueInternal(int, int, int)
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;

        $r0 := @this: android.text.PackedIntVector;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        if $i1 < $i3 goto label1;

        $i3 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i1 = $i1 + $i3;

     label1:
        $r1 = $r0.<android.text.PackedIntVector: int[] mValueGap>;

        $i3 = $r1[$i0];

        if $i1 < $i3 goto label2;

        $i3 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i3 = $i3 + $i0;

        $i3 = $r1[$i3];

        $i2 = $i2 - $i3;

     label2:
        $r1 = $r0.<android.text.PackedIntVector: int[] mValues>;

        $i3 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i1 = $i3 * $i1;

        $i1 = $i1 + $i0;

        $r1[$i1] = $i2;

        return;
    }

    public void adjustValuesBelow(int, int, int)
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        int[] $r4;

        $r0 := @this: android.text.PackedIntVector;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i3 = $i2 | $i0;

        if $i3 < 0 goto label1;

        $i3 = virtualinvoke $r0.<android.text.PackedIntVector: int size()>();

        if $i2 > $i3 goto label1;

        $i3 = virtualinvoke $r0.<android.text.PackedIntVector: int width()>();

        if $i0 < $i3 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $i3 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        if $i2 < $i3 goto label3;

        $i3 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i2 = $i2 + $i3;

     label3:
        specialinvoke $r0.<android.text.PackedIntVector: void moveValueGapTo(int,int)>($i0, $i2);

        $r4 = $r0.<android.text.PackedIntVector: int[] mValueGap>;

        $i2 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i2 = $i2 + $i0;

        $i0 = $r4[$i2];

        $i0 = $i0 + $i1;

        $r4[$i2] = $i0;

        return;
    }

    public void deleteAt(int, int)
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: android.text.PackedIntVector;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i0 | $i1;

        if $i2 < 0 goto label1;

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke $r0.<android.text.PackedIntVector: int size()>();

        if $i2 <= $i3 goto label2;

     label1:
        $r1 = new java.lang.IndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $i0 = $i0 + $i1;

        specialinvoke $r0.<android.text.PackedIntVector: void moveRowGapTo(int)>($i0);

        $i0 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        $i0 = $i0 - $i1;

        $r0.<android.text.PackedIntVector: int mRowGapStart> = $i0;

        $i0 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i0 = $i0 + $i1;

        $r0.<android.text.PackedIntVector: int mRowGapLength> = $i0;

        return;
    }

    public int getValue(int, int)
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.text.PackedIntVector;

        $i2 := @parameter0: int;

        $i0 := @parameter1: int;

        $i1 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i3 = $i2 | $i0;

        if $i3 < 0 goto label1;

        $i3 = virtualinvoke $r0.<android.text.PackedIntVector: int size()>();

        if $i2 >= $i3 goto label1;

        if $i0 < $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $i3 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        if $i2 < $i3 goto label3;

        $i3 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i2 = $i2 + $i3;

     label3:
        $r1 = $r0.<android.text.PackedIntVector: int[] mValues>;

        $i3 = $i2 * $i1;

        $i3 = $i3 + $i0;

        $i3 = $r1[$i3];

        $r1 = $r0.<android.text.PackedIntVector: int[] mValueGap>;

        $i4 = $r1[$i0];

        if $i2 < $i4 goto label4;

        $i2 = $i0 + $i1;

        $i2 = $r1[$i2];

        $i3 = $i3 + $i2;

        return $i3;

     label4:
        return $i3;
    }

    public void insertAt(int, int[])
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2;
        int[] $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.text.PackedIntVector;

        $i0 := @parameter0: int;

        $r1 := @parameter1: int[];

        if $i0 < 0 goto label1;

        $i1 = virtualinvoke $r0.<android.text.PackedIntVector: int size()>();

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("row ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        if $r1 == null goto label3;

        $i1 = lengthof $r1;

        $i2 = virtualinvoke $r0.<android.text.PackedIntVector: int width()>();

        if $i1 >= $i2 goto label3;

        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("value count ");

        $i0 = lengthof $r1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label3:
        specialinvoke $r0.<android.text.PackedIntVector: void moveRowGapTo(int)>($i0);

        $i1 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        if $i1 != 0 goto label4;

        specialinvoke $r0.<android.text.PackedIntVector: void growBuffer()>();

     label4:
        $i1 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        $i1 = $i1 + 1;

        $r0.<android.text.PackedIntVector: int mRowGapStart> = $i1;

        $i1 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i1 = $i1 - 1;

        $r0.<android.text.PackedIntVector: int mRowGapLength> = $i1;

        if $r1 != null goto label6;

        $i1 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i1 = $i1 - 1;

     label5:
        if $i1 < 0 goto label8;

        specialinvoke $r0.<android.text.PackedIntVector: void setValueInternal(int,int,int)>($i0, $i1, 0);

        $i1 = $i1 + -1;

        goto label5;

     label6:
        $i1 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i1 = $i1 - 1;

     label7:
        if $i1 < 0 goto label9;

        $i2 = $r1[$i1];

        specialinvoke $r0.<android.text.PackedIntVector: void setValueInternal(int,int,int)>($i0, $i1, $i2);

        $i1 = $i1 + -1;

        goto label7;

     label8:
        return;

     label9:
        return;
    }

    public void setValue(int, int, int)
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1, $i2, $i3;
        int[] $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.text.PackedIntVector;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 = $i1 | $i0;

        if $i3 < 0 goto label1;

        $i3 = virtualinvoke $r0.<android.text.PackedIntVector: int size()>();

        if $i1 >= $i3 goto label1;

        $i3 = $r0.<android.text.PackedIntVector: int mColumns>;

        if $i0 < $i3 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $i3 = $r0.<android.text.PackedIntVector: int mRowGapStart>;

        if $i1 < $i3 goto label3;

        $i3 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i1 = $i1 + $i3;

     label3:
        $r1 = $r0.<android.text.PackedIntVector: int[] mValueGap>;

        $i3 = $r1[$i0];

        if $i1 < $i3 goto label4;

        $i3 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i3 = $i3 + $i0;

        $i3 = $r1[$i3];

        $i2 = $i2 - $i3;

     label4:
        $r1 = $r0.<android.text.PackedIntVector: int[] mValues>;

        $i3 = $r0.<android.text.PackedIntVector: int mColumns>;

        $i1 = $i3 * $i1;

        $i1 = $i1 + $i0;

        $r1[$i1] = $i2;

        return;
    }

    public int size()
    {
        android.text.PackedIntVector $r0;
        int $i0, $i1;

        $r0 := @this: android.text.PackedIntVector;

        $i1 = $r0.<android.text.PackedIntVector: int mRows>;

        $i0 = $r0.<android.text.PackedIntVector: int mRowGapLength>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    public int width()
    {
        android.text.PackedIntVector $r0;
        int i0;

        $r0 := @this: android.text.PackedIntVector;

        i0 = $r0.<android.text.PackedIntVector: int mColumns>;

        return i0;
    }
}
