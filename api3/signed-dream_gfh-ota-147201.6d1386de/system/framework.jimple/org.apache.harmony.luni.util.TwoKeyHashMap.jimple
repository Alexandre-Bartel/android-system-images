public class org.apache.harmony.luni.util.TwoKeyHashMap extends java.util.AbstractMap
{
    static final int DEFAULT_INITIAL_SIZE;
    static final float DEFAULT_LOAD_FACTOR;
    private org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr;
    private int arrSize;
    private java.util.Set entrySet;
    private float loadFactor;
    private int modCount;
    private int size;
    int threshold;
    private java.util.Collection values;

    public void <init>()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        specialinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: void <init>(int,float)>(16, 0.75F);

        return;
    }

    public void <init>(int)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $i0 := @parameter0: int;

        specialinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: void <init>(int,float)>($i0, 0.75F);

        return;
    }

    public void <init>(int, float)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        float $f0, $f1;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        byte $b1;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] $r2;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        specialinvoke $r0.<java.util.AbstractMap: void <init>()>();

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int threshold> = 0;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("initialCapacity should be >= 0");

        throw $r1;

     label1:
        $b1 = $f0 cmpg 0.0F;

        if $b1 > 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("initialLoadFactor should be > 0");

        throw $r1;

     label2:
        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: float loadFactor> = $f0;

        if $i0 != 2147483647 goto label3;

        $i0 = $i0 + -1;

     label3:
        if $i0 <= 0 goto label5;

     label4:
        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize> = $i0;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $f0 = (float) $i0;

        $f1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: float loadFactor>;

        $f0 = $f0 * $f1;

        $i0 = (int) $f0;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int threshold> = $i0;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $i0 = $i0 + 1;

        $r2 = newarray (org.apache.harmony.luni.util.TwoKeyHashMap$Entry)[$i0];

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr> = $r2;

        return;

     label5:
        $i0 = 1;

        goto label4;
    }

    static int access$000(org.apache.harmony.luni.util.TwoKeyHashMap)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int i0;

        $r0 := @parameter0: org.apache.harmony.luni.util.TwoKeyHashMap;

        i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        return i0;
    }

    static int access$010(org.apache.harmony.luni.util.TwoKeyHashMap)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int $i0, $i1;

        $r0 := @parameter0: org.apache.harmony.luni.util.TwoKeyHashMap;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        $i1 = $i0 - 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size> = $i1;

        return $i0;
    }

    static org.apache.harmony.luni.util.TwoKeyHashMap$Entry access$100(org.apache.harmony.luni.util.TwoKeyHashMap, java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.lang.Object $r1, $r2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r3;

        $r0 := @parameter0: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = specialinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry findEntry(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    static org.apache.harmony.luni.util.TwoKeyHashMap$Entry access$200(org.apache.harmony.luni.util.TwoKeyHashMap, java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.lang.Object $r1, $r2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r3;

        $r0 := @parameter0: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 = specialinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry removeEntry(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    static int access$300(org.apache.harmony.luni.util.TwoKeyHashMap)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int i0;

        $r0 := @parameter0: org.apache.harmony.luni.util.TwoKeyHashMap;

        i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount>;

        return i0;
    }

    static int access$308(org.apache.harmony.luni.util.TwoKeyHashMap)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int $i0, $i1;

        $r0 := @parameter0: org.apache.harmony.luni.util.TwoKeyHashMap;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount>;

        $i1 = $i0 + 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount> = $i1;

        return $i0;
    }

    static org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] access$400(org.apache.harmony.luni.util.TwoKeyHashMap)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] r1;

        $r0 := @parameter0: org.apache.harmony.luni.util.TwoKeyHashMap;

        r1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        return r1;
    }

    private final org.apache.harmony.luni.util.TwoKeyHashMap$Entry findEntry(java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.lang.Object $r1, $r2, $r5;
        int $i0, $i1, $i2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] $r3;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r4;
        boolean $z0;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        if $r2 != null goto label1;

        $r3 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $r4 = $r3[$i0];

        return $r4;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        $i1 = 2147483647 & $i0;

        $i2 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $i1 = $i1 % $i2;

        $r3 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4 = $r3[$i1];

     label2:
        if $r4 == null goto label4;

        $i1 = $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: int hash>;

        if $i0 != $i1 goto label3;

        $r5 = virtualinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey1()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey2()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $r4 = $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: org.apache.harmony.luni.util.TwoKeyHashMap$Entry next>;

        goto label2;

     label4:
        return null;
    }

    private final org.apache.harmony.luni.util.TwoKeyHashMap$Entry removeEntry(java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.lang.Object $r1, $r2, $r6;
        int $i0, $i1, $i2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r3, $r5, $r7;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] $r4;
        boolean $z0;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label2;

        if $r2 != null goto label2;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $r4 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r3 = $r4[$i0];

        if $r3 == null goto label1;

        $r4 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r3 = $r4[$i0];

        $r4 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4[$i0] = null;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        $i0 = $i0 - 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size> = $i0;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount>;

        $i0 = $i0 + 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount> = $i0;

        return $r3;

     label1:
        return null;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        $i1 = 2147483647 & $i0;

        $i2 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $i1 = $i1 % $i2;

        $r4 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r3 = $r4[$i1];

        $r5 = $r3;

     label3:
        if $r3 == null goto label7;

        $i2 = $r3.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: int hash>;

        if $i0 != $i2 goto label6;

        $r6 = virtualinvoke $r3.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey1()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label6;

        $r6 = virtualinvoke $r3.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey2()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label6;

        if $r5 != $r3 goto label5;

        $r4 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r5 = $r3.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: org.apache.harmony.luni.util.TwoKeyHashMap$Entry next>;

        $r4[$i1] = $r5;

     label4:
        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        $i0 = $i0 - 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size> = $i0;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount>;

        $i0 = $i0 + 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount> = $i0;

        return $r3;

     label5:
        $r7 = $r3.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: org.apache.harmony.luni.util.TwoKeyHashMap$Entry next>;

        $r5.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: org.apache.harmony.luni.util.TwoKeyHashMap$Entry next> = $r7;

        goto label4;

     label6:
        $r5 = $r3;

        $r3 = $r3.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: org.apache.harmony.luni.util.TwoKeyHashMap$Entry next>;

        goto label3;

     label7:
        return null;
    }

    public void clear()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int $i0;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] $r1, $r2;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount>;

        $i0 = $i0 + 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount> = $i0;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size> = 0;

        $r1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r2 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $i0 = lengthof $r2;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],int,int,java.lang.Object)>($r1, 0, $i0, null);

        return;
    }

    public boolean containsKey(java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.lang.Object $r1, $r2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r3;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry findEntry(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    org.apache.harmony.luni.util.TwoKeyHashMap$Entry createEntry(int, java.lang.Object, java.lang.Object, java.lang.Object, org.apache.harmony.luni.util.TwoKeyHashMap$Entry)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int $i0;
        java.lang.Object $r1, $r2, $r3;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r4, $r5;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $r3 := @parameter3: java.lang.Object;

        $r4 := @parameter4: org.apache.harmony.luni.util.TwoKeyHashMap$Entry;

        $r5 = new org.apache.harmony.luni.util.TwoKeyHashMap$Entry;

        specialinvoke $r5.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.harmony.luni.util.TwoKeyHashMap$Entry)>($i0, $r1, $r2, $r3, $r4);

        return $r5;
    }

    java.util.Iterator createEntrySetIterator()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        org.apache.harmony.luni.util.TwoKeyHashMap$EntryIteratorImpl $r1;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 = new org.apache.harmony.luni.util.TwoKeyHashMap$EntryIteratorImpl;

        specialinvoke $r1.<org.apache.harmony.luni.util.TwoKeyHashMap$EntryIteratorImpl: void <init>(org.apache.harmony.luni.util.TwoKeyHashMap)>($r0);

        return $r1;
    }

    java.util.Iterator createValueCollectionIterator()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        org.apache.harmony.luni.util.TwoKeyHashMap$ValueIteratorImpl $r1;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 = new org.apache.harmony.luni.util.TwoKeyHashMap$ValueIteratorImpl;

        specialinvoke $r1.<org.apache.harmony.luni.util.TwoKeyHashMap$ValueIteratorImpl: void <init>(org.apache.harmony.luni.util.TwoKeyHashMap)>($r0);

        return $r1;
    }

    public java.util.Set entrySet()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.util.Set $r1;
        org.apache.harmony.luni.util.TwoKeyHashMap$EntrySetImpl $r2;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: java.util.Set entrySet>;

        if $r1 != null goto label1;

        $r2 = new org.apache.harmony.luni.util.TwoKeyHashMap$EntrySetImpl;

        specialinvoke $r2.<org.apache.harmony.luni.util.TwoKeyHashMap$EntrySetImpl: void <init>(org.apache.harmony.luni.util.TwoKeyHashMap)>($r0);

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: java.util.Set entrySet> = $r2;

     label1:
        $r1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: java.util.Set entrySet>;

        return $r1;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.lang.Object $r1, $r2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r3;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry findEntry(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $r3 == null goto label1;

        $r1 = $r3.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object value>;

        return $r1;

     label1:
        return null;
    }

    public boolean isEmpty()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.lang.Object $r1, $r2, $r3, $r6;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r4;
        int $i0, $i1, $i2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] $r5, $r7;
        boolean $z0;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Object;

        if $r1 != null goto label2;

        if $r2 != null goto label2;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $r5 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4 = $r5[$i0];

        if $r4 != null goto label1;

        $r5 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4 = virtualinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry createEntry(int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.harmony.luni.util.TwoKeyHashMap$Entry)>(0, null, null, $r3, null);

        $r5[$i0] = $r4;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        $i0 = $i0 + 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size> = $i0;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount>;

        $i0 = $i0 + 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount> = $i0;

        return null;

     label1:
        $r5 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4 = $r5[$i0];

        $r1 = $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object value>;

        $r5 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4 = $r5[$i0];

        $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object value> = $r3;

        return $r1;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i0 = $i0 + $i1;

        $i1 = 2147483647 & $i0;

        $i2 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $i1 = $i1 % $i2;

        $r5 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4 = $r5[$i1];

     label3:
        if $r4 == null goto label5;

        $i2 = $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: int hash>;

        if $i0 != $i2 goto label4;

        $r6 = virtualinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey1()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        $r6 = virtualinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey2()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label4;

        $r1 = $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object value>;

        $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object value> = $r3;

        return $r1;

     label4:
        $r4 = $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: org.apache.harmony.luni.util.TwoKeyHashMap$Entry next>;

        goto label3;

     label5:
        $r5 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r7 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4 = $r7[$i1];

        $r4 = virtualinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry createEntry(int,java.lang.Object,java.lang.Object,java.lang.Object,org.apache.harmony.luni.util.TwoKeyHashMap$Entry)>($i0, $r1, $r2, $r3, $r4);

        $r5[$i1] = $r4;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        $i0 = $i0 + 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size> = $i0;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount>;

        $i0 = $i0 + 1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int modCount> = $i0;

        $i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        $i1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int threshold>;

        if $i0 <= $i1 goto label6;

        virtualinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: void rehash()>();

     label6:
        return null;
    }

    void rehash()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] $r1, $r3;
        int $i0, $i1, $i2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r2, $r4, $r5;
        float $f0, $f1;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $i1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $i1 = $i1 + 1;

        $i1 = $i1 * 2;

        $i1 = $i1 + 1;

        if $i1 >= 0 goto label1;

        $i1 = 2147483646;

     label1:
        $i2 = $i1 + 1;

        $r1 = newarray (org.apache.harmony.luni.util.TwoKeyHashMap$Entry)[$i2];

        $i2 = 0;

     label2:
        $r3 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $i0 = lengthof $r3;

        $i0 = $i0 - 1;

        if $i2 >= $i0 goto label5;

        $r3 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $r4 = $r3[$i2];

     label3:
        if $r4 == null goto label4;

        $r2 = $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: org.apache.harmony.luni.util.TwoKeyHashMap$Entry next>;

        $i0 = $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: int hash>;

        $i0 = $i0 & 2147483647;

        $i0 = $i0 % $i1;

        $r5 = $r1[$i0];

        $r4.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: org.apache.harmony.luni.util.TwoKeyHashMap$Entry next> = $r5;

        $r1[$i0] = $r4;

        $r4 = $r2;

        goto label3;

     label4:
        $i2 = $i2 + 1;

        goto label2;

     label5:
        $r3 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr>;

        $i2 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $r2 = $r3[$i2];

        $r1[$i1] = $r2;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize> = $i1;

        $i1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        if $i1 != 2147483647 goto label6;

        $f0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: float loadFactor>;

        $f0 = $f0 * 10.0F;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: float loadFactor> = $f0;

     label6:
        $i1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int arrSize>;

        $f0 = (float) $i1;

        $f1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: float loadFactor>;

        $f0 = $f0 * $f1;

        $i1 = (int) $f0;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int threshold> = $i1;

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry[] arr> = $r1;

        return;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.lang.Object $r1, $r2;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r3;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        $r3 = specialinvoke $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: org.apache.harmony.luni.util.TwoKeyHashMap$Entry removeEntry(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $r3 == null goto label1;

        $r1 = $r3.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object value>;

        return $r1;

     label1:
        return null;
    }

    public int size()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        int i0;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        i0 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: int size>;

        return i0;
    }

    public java.util.Collection values()
    {
        org.apache.harmony.luni.util.TwoKeyHashMap $r0;
        java.util.Collection $r1;
        org.apache.harmony.luni.util.TwoKeyHashMap$ValuesCollectionImpl $r2;

        $r0 := @this: org.apache.harmony.luni.util.TwoKeyHashMap;

        $r1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: java.util.Collection values>;

        if $r1 != null goto label1;

        $r2 = new org.apache.harmony.luni.util.TwoKeyHashMap$ValuesCollectionImpl;

        specialinvoke $r2.<org.apache.harmony.luni.util.TwoKeyHashMap$ValuesCollectionImpl: void <init>(org.apache.harmony.luni.util.TwoKeyHashMap)>($r0);

        $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: java.util.Collection values> = $r2;

     label1:
        $r1 = $r0.<org.apache.harmony.luni.util.TwoKeyHashMap: java.util.Collection values>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.luni.util.TwoKeyHashMap: float DEFAULT_LOAD_FACTOR> = 0.75F;

        <org.apache.harmony.luni.util.TwoKeyHashMap: int DEFAULT_INITIAL_SIZE> = 16;

        return;
    }
}
