public class com.android.server.LocationManagerService extends android.location.ILocationManager$Stub implements com.android.internal.location.INetworkLocationManager
{
    private static final java.lang.String ACCESS_COARSE_LOCATION;
    private static final java.lang.String ACCESS_FINE_LOCATION;
    private static final java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS;
    private static final java.lang.String ACCESS_MOCK_LOCATION;
    private static final java.lang.String ALARM_INTENT;
    private static final java.lang.String BATTERY_EXTRA_LEVEL;
    private static final java.lang.String BATTERY_EXTRA_PLUGGED;
    private static final java.lang.String BATTERY_EXTRA_SCALE;
    private static final boolean LOCAL_LOGV;
    private static final long MAX_TIME_FOR_WAKE_LOCK;
    private static final int MESSAGE_ACQUIRE_WAKE_LOCK;
    private static final int MESSAGE_HEARTBEAT;
    private static final int MESSAGE_INSTALL_NETWORK_LOCATION_PROVIDER;
    private static final int MESSAGE_RELEASE_WAKE_LOCK;
    private static final long MIN_LAST_KNOWN_LOCATION_TIME;
    private static final java.util.regex.Pattern PATTERN_COMMA;
    private static final java.lang.String TAG;
    private static final long TIME_AFTER_WAKE_LOCK;
    private static final java.lang.String WAKELOCK_KEY;
    private static final java.lang.String WIFILOCK_KEY;
    private static boolean sProvidersLoaded;
    private long mAlarmInterval;
    private android.app.AlarmManager mAlarmManager;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    com.android.server.LocationManagerService$CellLocationUpdater mCellLocationUpdater;
    private boolean mCellWakeLockAcquired;
    private com.android.internal.location.ILocationCollector mCollector;
    private final android.content.Context mContext;
    private final java.util.Set mDisabledProviders;
    private final java.util.Set mEnabledProviders;
    private com.android.internal.location.GpsLocationProvider mGpsLocationProvider;
    private boolean mGpsNavigating;
    com.android.internal.location.CellState mLastCellState;
    private final java.util.HashMap mLastFixBroadcast;
    private java.util.HashMap mLastKnownLocation;
    int mLastRadioType;
    int mLastSignalStrength;
    private final java.util.HashMap mLastStatusBroadcast;
    private java.util.HashMap mLastWriteTime;
    private final java.util.ArrayList mListeners;
    private com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler;
    private final java.util.HashMap mLocationListeners;
    private final java.util.HashMap mLocationsByProvider;
    private final java.util.HashMap mMockProviderLocation;
    private final java.util.HashMap mMockProviderStatus;
    private final java.util.HashMap mMockProviderStatusExtras;
    private final java.util.HashMap mMockProviderStatusUpdateTime;
    java.util.HashMap mMockProviders;
    private com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface;
    private android.location.LocationProviderImpl mNetworkLocationProvider;
    private int mNetworkState;
    android.telephony.PhoneStateListener mPhoneStateListener;
    private java.util.HashSet mProximitiesEntered;
    private java.util.HashMap mProximityAlerts;
    private com.android.server.LocationManagerService$Receiver mProximityListener;
    private final java.util.HashMap mRecordsByProvider;
    private int mReportedGpsSeq;
    private final android.util.SparseIntArray mReportedGpsUids;
    private boolean mScreenOn;
    private android.telephony.TelephonyManager mTelephonyManager;
    private android.os.PowerManager$WakeLock mWakeLock;
    private long mWakeLockAcquireTime;
    private boolean mWakeLockGpsReceived;
    private boolean mWakeLockNetworkReceived;
    private boolean mWifiEnabled;
    private android.net.wifi.WifiManager$WifiLock mWifiLock;
    private android.net.wifi.WifiManager mWifiManager;
    private boolean mWifiWakeLockAcquired;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <com.android.server.LocationManagerService: java.lang.String WIFILOCK_KEY> = "LocationManagerService";

        <com.android.server.LocationManagerService: java.lang.String WAKELOCK_KEY> = "LocationManagerService";

        <com.android.server.LocationManagerService: long TIME_AFTER_WAKE_LOCK> = 2000L;

        <com.android.server.LocationManagerService: java.lang.String TAG> = "LocationManagerService";

        <com.android.server.LocationManagerService: long MIN_LAST_KNOWN_LOCATION_TIME> = 60000L;

        <com.android.server.LocationManagerService: int MESSAGE_RELEASE_WAKE_LOCK> = 3;

        <com.android.server.LocationManagerService: int MESSAGE_INSTALL_NETWORK_LOCATION_PROVIDER> = 4;

        <com.android.server.LocationManagerService: int MESSAGE_HEARTBEAT> = 1;

        <com.android.server.LocationManagerService: int MESSAGE_ACQUIRE_WAKE_LOCK> = 2;

        <com.android.server.LocationManagerService: long MAX_TIME_FOR_WAKE_LOCK> = 60000L;

        <com.android.server.LocationManagerService: boolean LOCAL_LOGV> = 0;

        <com.android.server.LocationManagerService: java.lang.String BATTERY_EXTRA_SCALE> = "scale";

        <com.android.server.LocationManagerService: java.lang.String BATTERY_EXTRA_PLUGGED> = "plugged";

        <com.android.server.LocationManagerService: java.lang.String BATTERY_EXTRA_LEVEL> = "level";

        <com.android.server.LocationManagerService: java.lang.String ALARM_INTENT> = "com.android.location.ALARM_INTENT";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_MOCK_LOCATION> = "android.permission.ACCESS_MOCK_LOCATION";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_LOCATION_EXTRA_COMMANDS> = "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_FINE_LOCATION> = "android.permission.ACCESS_FINE_LOCATION";

        <com.android.server.LocationManagerService: java.lang.String ACCESS_COARSE_LOCATION> = "android.permission.ACCESS_COARSE_LOCATION";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(",");

        <com.android.server.LocationManagerService: java.util.regex.Pattern PATTERN_COMMA> = $r0;

        <com.android.server.LocationManagerService: boolean sProvidersLoaded> = 0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.server.LocationManagerService $r0;
        android.content.Context $r1, $r13;
        android.content.IntentFilter $r2;
        com.android.server.LocationManagerService$NetworkStateBroadcastReceiver $r3;
        com.android.server.LocationManagerService$PowerStateBroadcastReceiver $r4;
        java.util.HashMap $r5;
        java.util.HashSet $r6;
        java.util.ArrayList $r7;
        android.util.SparseIntArray $r8;
        com.android.server.LocationManagerService$1 $r9;
        com.android.server.LocationManagerService$LocationWorkerHandler $r10;
        java.lang.Object $r11;
        android.app.AlarmManager $r12;
        android.os.PowerManager $r14;
        android.os.PowerManager$WakeLock $r15;
        com.android.internal.app.IBatteryStats $r16;
        android.telephony.TelephonyManager $r17;
        android.telephony.PhoneStateListener $r18;
        android.net.wifi.WifiManager $r19;
        android.net.wifi.WifiManager$WifiLock $r20;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<android.location.ILocationManager$Stub: void <init>()>();

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastWriteTime> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders> = $r6;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders> = $r6;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderLocation> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatus> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusExtras> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusUpdateTime> = $r5;

        $r0.<com.android.server.LocationManagerService: long mAlarmInterval> = 0L;

        $r0.<com.android.server.LocationManagerService: boolean mScreenOn> = 1;

        $r0.<com.android.server.LocationManagerService: android.os.PowerManager$WakeLock mWakeLock> = null;

        $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock mWifiLock> = null;

        $r0.<com.android.server.LocationManagerService: long mWakeLockAcquireTime> = 0L;

        $r0.<com.android.server.LocationManagerService: boolean mWakeLockGpsReceived> = 1;

        $r0.<com.android.server.LocationManagerService: boolean mWakeLockNetworkReceived> = 1;

        $r0.<com.android.server.LocationManagerService: boolean mWifiWakeLockAcquired> = 0;

        $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired> = 0;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.ArrayList mListeners> = $r7;

        $r8 = new android.util.SparseIntArray;

        specialinvoke $r8.<android.util.SparseIntArray: void <init>()>();

        $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids> = $r8;

        $r0.<com.android.server.LocationManagerService: int mReportedGpsSeq> = 0;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastFixBroadcast> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastStatusBroadcast> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider> = $r5;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationsByProvider> = $r5;

        $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener> = null;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mProximityAlerts> = $r5;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashSet mProximitiesEntered> = $r6;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastKnownLocation> = $r5;

        $r0.<com.android.server.LocationManagerService: int mNetworkState> = 1;

        $r0.<com.android.server.LocationManagerService: boolean mWifiEnabled> = 0;

        $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$CellLocationUpdater mCellLocationUpdater> = null;

        $r0.<com.android.server.LocationManagerService: com.android.internal.location.CellState mLastCellState> = null;

        $r0.<com.android.server.LocationManagerService: int mLastSignalStrength> = -1;

        $r0.<com.android.server.LocationManagerService: int mLastRadioType> = -1;

        $r9 = new com.android.server.LocationManagerService$1;

        specialinvoke $r9.<com.android.server.LocationManagerService$1: void <init>(com.android.server.LocationManagerService)>($r0);

        $r0.<com.android.server.LocationManagerService: android.telephony.PhoneStateListener mPhoneStateListener> = $r9;

        $r0.<com.android.server.LocationManagerService: android.content.Context mContext> = $r1;

        $r10 = new com.android.server.LocationManagerService$LocationWorkerHandler;

        specialinvoke $r10.<com.android.server.LocationManagerService$LocationWorkerHandler: void <init>(com.android.server.LocationManagerService,com.android.server.LocationManagerService$1)>($r0, null);

        $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler> = $r10;

        $r11 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r12 = (android.app.AlarmManager) $r11;

        $r0.<com.android.server.LocationManagerService: android.app.AlarmManager mAlarmManager> = $r12;

        $r13 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r14 = (android.os.PowerManager) $r11;

        $r15 = virtualinvoke $r14.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "LocationManagerService");

        $r0.<com.android.server.LocationManagerService: android.os.PowerManager$WakeLock mWakeLock> = $r15;

        $r16 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        $r0.<com.android.server.LocationManagerService: com.android.internal.app.IBatteryStats mBatteryStats> = $r16;

        specialinvoke $r0.<com.android.server.LocationManagerService: void loadProviders()>();

        $r11 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r17 = (android.telephony.TelephonyManager) $r11;

        $r0.<com.android.server.LocationManagerService: android.telephony.TelephonyManager mTelephonyManager> = $r17;

        $r17 = $r0.<com.android.server.LocationManagerService: android.telephony.TelephonyManager mTelephonyManager>;

        $r18 = $r0.<com.android.server.LocationManagerService: android.telephony.PhoneStateListener mPhoneStateListener>;

        virtualinvoke $r17.<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>($r18, 82);

        $r3 = new com.android.server.LocationManagerService$NetworkStateBroadcastReceiver;

        specialinvoke $r3.<com.android.server.LocationManagerService$NetworkStateBroadcastReceiver: void <init>(com.android.server.LocationManagerService,com.android.server.LocationManagerService$1)>($r0, null);

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.wifi.SCAN_RESULTS");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.wifi.WIFI_STATE_CHANGED");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.location.GPS_ENABLED_CHANGE");

        virtualinvoke $r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r3, $r2);

        $r4 = new com.android.server.LocationManagerService$PowerStateBroadcastReceiver;

        specialinvoke $r4.<com.android.server.LocationManagerService$PowerStateBroadcastReceiver: void <init>(com.android.server.LocationManagerService,com.android.server.LocationManagerService$1)>($r0, null);

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.location.ALARM_INTENT");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_RESTARTED");

        virtualinvoke $r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, $r2);

        $r11 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r19 = (android.net.wifi.WifiManager) $r11;

        $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager mWifiManager> = $r19;

        $r20 = specialinvoke $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock getWifiWakelockLocked()>();

        $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock mWifiLock> = $r20;

        return;
    }

    private java.util.List _getAllProvidersLocked()
    {
        com.android.server.LocationManagerService $r0;
        java.util.ArrayList $r1, r7;
        java.util.List $r2;
        int $i0;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        android.location.LocationProviderImpl $r5;
        java.lang.String $r6;
        android.location.LocationProvider r8;

        $r0 := @this: com.android.server.LocationManagerService;

        $r2 = staticinvoke <android.location.LocationProviderImpl: java.util.List getProviders()>();

        r7 = new java.util.ArrayList;

        $r1 = r7;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.location.LocationProviderImpl) $r4;

        r8 = (android.location.LocationProvider) $r5;

        $r6 = virtualinvoke r8.<android.location.LocationProvider: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r1;
    }

    private android.location.Location _getLastKnownLocationLocked(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        android.location.LocationProviderImpl $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        boolean $z0;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        android.location.Location $r7, $r8;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)>($r1);

        $r2 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedBySettingsLocked(java.lang.String)>($r1);

        if $z0 != 0 goto label2;

        return null;

     label2:
        $r5 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastKnownLocation>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r7 = (android.location.Location) $r6;

        if $r7 != null goto label3;

        $r8 = specialinvoke $r0.<com.android.server.LocationManagerService: android.location.Location readLastKnownLocationLocked(java.lang.String)>($r1);

        $r7 = $r8;

        if $r8 == null goto label3;

        $r5 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastKnownLocation>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

     label3:
        return $r7;
    }

    private android.os.Bundle _getProviderInfoLocked(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        android.os.Bundle $r2, r4;
        android.location.LocationProviderImpl $r3;
        boolean $z0;
        int $i0;
        android.location.LocationProvider r5;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r3 != null goto label1;

        return null;

     label1:
        specialinvoke $r0.<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)>($r1);

        r4 = new android.os.Bundle;

        $r2 = r4;

        specialinvoke r4.<android.os.Bundle: void <init>()>();

        r5 = (android.location.LocationProvider) $r3;

        $z0 = virtualinvoke r5.<android.location.LocationProvider: boolean requiresNetwork()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("network", $z0);

        r5 = (android.location.LocationProvider) $r3;

        $z0 = virtualinvoke r5.<android.location.LocationProvider: boolean requiresSatellite()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("satellite", $z0);

        r5 = (android.location.LocationProvider) $r3;

        $z0 = virtualinvoke r5.<android.location.LocationProvider: boolean requiresCell()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("cell", $z0);

        r5 = (android.location.LocationProvider) $r3;

        $z0 = virtualinvoke r5.<android.location.LocationProvider: boolean hasMonetaryCost()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("cost", $z0);

        r5 = (android.location.LocationProvider) $r3;

        $z0 = virtualinvoke r5.<android.location.LocationProvider: boolean supportsAltitude()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("altitude", $z0);

        r5 = (android.location.LocationProvider) $r3;

        $z0 = virtualinvoke r5.<android.location.LocationProvider: boolean supportsSpeed()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("speed", $z0);

        r5 = (android.location.LocationProvider) $r3;

        $z0 = virtualinvoke r5.<android.location.LocationProvider: boolean supportsBearing()>();

        virtualinvoke $r2.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("bearing", $z0);

        r5 = (android.location.LocationProvider) $r3;

        $i0 = virtualinvoke r5.<android.location.LocationProvider: int getPowerRequirement()>();

        virtualinvoke $r2.<android.os.Bundle: void putInt(java.lang.String,int)>("power", $i0);

        r5 = (android.location.LocationProvider) $r3;

        $i0 = virtualinvoke r5.<android.location.LocationProvider: int getAccuracy()>();

        virtualinvoke $r2.<android.os.Bundle: void putInt(java.lang.String,int)>("accuracy", $i0);

        return $r2;
    }

    private java.util.List _getProvidersLocked(boolean)
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0, $z1;
        java.util.ArrayList $r1, r7;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        android.location.LocationProviderImpl $r5;
        java.lang.String $r6;
        android.location.LocationProvider r8;

        $r0 := @this: com.android.server.LocationManagerService;

        $z0 := @parameter0: boolean;

        $r2 = staticinvoke <android.location.LocationProviderImpl: java.util.List getProviders()>();

        r7 = new java.util.ArrayList;

        $r1 = r7;

        specialinvoke r7.<java.util.ArrayList: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.location.LocationProviderImpl) $r4;

        r8 = (android.location.LocationProvider) $r5;

        $r6 = virtualinvoke r8.<android.location.LocationProvider: java.lang.String getName()>();

        $z1 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)>($r6);

        if $z1 == 0 goto label1;

        if $z0 == 0 goto label2;

        $z1 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedBySettingsLocked(java.lang.String)>($r6);

        if $z1 == 0 goto label1;

     label2:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        goto label1;

     label3:
        return $r1;
    }

    private boolean _isProviderEnabledLocked(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        android.location.LocationProviderImpl $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        boolean $z0;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)>($r1);

        $r2 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label1:
        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedBySettingsLocked(java.lang.String)>($r1);

        return $z0;
    }

    private void _loadProvidersLocked()
    {
        com.android.server.LocationManagerService $r0;
        java.io.File $r1, $r8, r18;
        com.android.internal.location.TrackProvider $r2, $r10;
        boolean $z0;
        com.android.internal.location.GpsLocationProvider $r3, r17;
        android.content.Context $r4;
        java.io.File[] $r5;
        int $i0, $i1;
        java.lang.String $r6, $r12;
        android.location.LocationProviderImpl $r7;
        java.lang.Object $r9;
        java.util.HashMap $r11;
        android.location.Location $r13;
        java.lang.Exception $r14, $r16;
        java.lang.StringBuilder $r15, r19;
        android.location.LocationProvider r20;

        $r0 := @this: com.android.server.LocationManagerService;

        $z0 = staticinvoke <com.android.internal.location.GpsLocationProvider: boolean isSupported()>();

        if $z0 == 0 goto label01;

        r17 = new com.android.internal.location.GpsLocationProvider;

        $r4 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        specialinvoke r17.<com.android.internal.location.GpsLocationProvider: void <init>(android.content.Context)>($r4);

        $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider> = r17;

        $r3 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        staticinvoke <android.location.LocationProviderImpl: void addProvider(android.location.LocationProviderImpl)>($r3);

     label01:
        $r8 = new java.io.File;

        $r1 = $r8;

        specialinvoke $r8.<java.io.File: void <init>(java.lang.String)>("/data/location");

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label34;

        $r5 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>();

        $i0 = 0;

     label02:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label34;

        $r1 = $r5[$i0];

        $z0 = virtualinvoke $r1.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label04;

     label03:
        $i0 = $i0 + 1;

        goto label02;

     label04:
        $r1 = $r5[$i0];

        $r6 = virtualinvoke $r1.<java.io.File: java.lang.String getName()>();

        $r7 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r6);

        if $r7 != null goto label03;

        r18 = new java.io.File;

        $r1 = r18;

     label05:
        $r8 = $r5[$i0];

        specialinvoke r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "class");

        $r7 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl loadFromClass(java.io.File)>($r1);

     label06:
        $r9 = $r7;

        if $r7 != null goto label17;

        r18 = new java.io.File;

     label07:
        $r1 = r18;

        $r8 = $r5[$i0];

        specialinvoke r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "properties");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

     label08:
        if $z0 == 0 goto label17;

        $r10 = new com.android.internal.location.TrackProvider;

     label09:
        $r2 = $r10;

        specialinvoke $r10.<com.android.internal.location.TrackProvider: void <init>(java.lang.String)>($r6);

     label10:
        $r10 = (com.android.internal.location.TrackProvider) $r2;

     label11:
        virtualinvoke $r10.<com.android.internal.location.TrackProvider: void readProperties(java.io.File)>($r1);

     label12:
        r18 = new java.io.File;

     label13:
        $r1 = r18;

        $r8 = $r5[$i0];

        specialinvoke r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "kml");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

     label14:
        if $z0 == 0 goto label24;

     label15:
        $r10 = (com.android.internal.location.TrackProvider) $r2;

        virtualinvoke $r10.<com.android.internal.location.TrackProvider: void readKml(java.io.File)>($r1);

     label16:
        $r9 = $r2;

     label17:
        if $r9 == null goto label19;

     label18:
        $r7 = (android.location.LocationProviderImpl) $r9;

        staticinvoke <android.location.LocationProviderImpl: void addProvider(android.location.LocationProviderImpl)>($r7);

     label19:
        $z0 = $r9 instanceof com.android.internal.location.TrackProvider;

     label20:
        if $z0 == 0 goto label03;

        $r2 = (com.android.internal.location.TrackProvider) $r9;

        $r11 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastKnownLocation>;

        r20 = (android.location.LocationProvider) $r2;

        $r12 = virtualinvoke r20.<android.location.LocationProvider: java.lang.String getName()>();

        $r13 = virtualinvoke $r2.<com.android.internal.location.TrackProvider: android.location.Location getInitialLocation()>();

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

     label21:
        goto label03;

     label22:
        $r14 := @caughtexception;

     label23:
        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception loading provder ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", $r6, $r14);

        goto label03;

     label24:
        r18 = new java.io.File;

        $r1 = r18;

     label25:
        $r8 = $r5[$i0];

        specialinvoke r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "nmea");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

     label26:
        if $z0 == 0 goto label29;

     label27:
        $r10 = (com.android.internal.location.TrackProvider) $r2;

        virtualinvoke $r10.<com.android.internal.location.TrackProvider: void readNmea(java.lang.String,java.io.File)>($r6, $r1);

     label28:
        $r9 = $r2;

        goto label17;

     label29:
        r18 = new java.io.File;

     label30:
        $r1 = r18;

        $r8 = $r5[$i0];

        specialinvoke r18.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, "track");

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

     label31:
        if $z0 == 0 goto label33;

     label32:
        $r10 = (com.android.internal.location.TrackProvider) $r2;

        virtualinvoke $r10.<com.android.internal.location.TrackProvider: void readTrack(java.io.File)>($r1);

     label33:
        $r9 = $r2;

        goto label17;

     label34:
        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        return;

     label35:
        $r16 := @caughtexception;

        $r14 = $r16;

        goto label23;

        catch java.lang.Exception from label05 to label06 with label22;
        catch java.lang.Exception from label07 to label08 with label22;
        catch java.lang.Exception from label09 to label10 with label22;
        catch java.lang.Exception from label11 to label12 with label35;
        catch java.lang.Exception from label13 to label14 with label35;
        catch java.lang.Exception from label15 to label16 with label35;
        catch java.lang.Exception from label18 to label19 with label22;
        catch java.lang.Exception from label20 to label21 with label22;
        catch java.lang.Exception from label25 to label26 with label35;
        catch java.lang.Exception from label27 to label28 with label35;
        catch java.lang.Exception from label30 to label31 with label35;
        catch java.lang.Exception from label32 to label33 with label35;
    }

    static android.content.Context access$000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        android.content.Context r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        return r1;
    }

    static java.util.HashMap access$100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        return r1;
    }

    static boolean access$1000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        boolean z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        z0 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        return z0;
    }

    static long access$1100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        long l0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        l0 = $r0.<com.android.server.LocationManagerService: long mWakeLockAcquireTime>;

        return l0;
    }

    static long access$1102(com.android.server.LocationManagerService, long)
    {
        com.android.server.LocationManagerService $r0;
        long $l0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $l0 := @parameter1: long;

        $r0.<com.android.server.LocationManagerService: long mWakeLockAcquireTime> = $l0;

        return $l0;
    }

    static void access$1200(com.android.server.LocationManagerService, java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<com.android.server.LocationManagerService: void handleLocationChangedLocked(java.lang.String)>($r1);

        return;
    }

    static void access$1300(com.android.server.LocationManagerService, java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>($r1);

        return;
    }

    static boolean access$1400(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        boolean z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        z0 = $r0.<com.android.server.LocationManagerService: boolean mWakeLockGpsReceived>;

        return z0;
    }

    static boolean access$1402(com.android.server.LocationManagerService, boolean)
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $z0 := @parameter1: boolean;

        $r0.<com.android.server.LocationManagerService: boolean mWakeLockGpsReceived> = $z0;

        return $z0;
    }

    static boolean access$1500(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        boolean z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        z0 = $r0.<com.android.server.LocationManagerService: boolean mWakeLockNetworkReceived>;

        return z0;
    }

    static void access$1600(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke $r0.<com.android.server.LocationManagerService: void acquireWakeLockLocked()>();

        return;
    }

    static void access$1700(com.android.server.LocationManagerService, boolean)
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateWakelockStatusLocked(boolean)>($z0);

        return;
    }

    static void access$1800(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke $r0.<com.android.server.LocationManagerService: void releaseWakeLockLocked()>();

        return;
    }

    static android.telephony.TelephonyManager access$1900(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        android.telephony.TelephonyManager r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: android.telephony.TelephonyManager mTelephonyManager>;

        return r1;
    }

    static void access$200(com.android.server.LocationManagerService, com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService $r0;
        com.android.server.LocationManagerService$Receiver $r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 := @parameter1: com.android.server.LocationManagerService$Receiver;

        specialinvoke $r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r1);

        return;
    }

    static com.android.internal.location.ILocationCollector access$2000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        com.android.internal.location.ILocationCollector r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        return r1;
    }

    static com.android.server.LocationManagerService$LocationWorkerHandler access$2100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        com.android.server.LocationManagerService$LocationWorkerHandler r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        return r1;
    }

    static void access$2200(com.android.server.LocationManagerService, android.app.PendingIntent)
    {
        com.android.server.LocationManagerService $r0;
        android.app.PendingIntent $r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 := @parameter1: android.app.PendingIntent;

        specialinvoke $r0.<com.android.server.LocationManagerService: void removeProximityAlertLocked(android.app.PendingIntent)>($r1);

        return;
    }

    static android.net.wifi.WifiManager access$2300(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        android.net.wifi.WifiManager r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager mWifiManager>;

        return r1;
    }

    static com.android.internal.location.INetworkLocationProvider access$2400(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        com.android.internal.location.INetworkLocationProvider r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        return r1;
    }

    static int access$2500(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        int i0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        i0 = $r0.<com.android.server.LocationManagerService: int mNetworkState>;

        return i0;
    }

    static int access$2502(com.android.server.LocationManagerService, int)
    {
        com.android.server.LocationManagerService $r0;
        int $i0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $i0 := @parameter1: int;

        $r0.<com.android.server.LocationManagerService: int mNetworkState> = $i0;

        return $i0;
    }

    static boolean access$2600(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        boolean z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        z0 = $r0.<com.android.server.LocationManagerService: boolean mWifiEnabled>;

        return z0;
    }

    static boolean access$2602(com.android.server.LocationManagerService, boolean)
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $z0 := @parameter1: boolean;

        $r0.<com.android.server.LocationManagerService: boolean mWifiEnabled> = $z0;

        return $z0;
    }

    static void access$2700(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateReportedGpsLocked()>();

        return;
    }

    static boolean access$2802(com.android.server.LocationManagerService, boolean)
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $z0 := @parameter1: boolean;

        $r0.<com.android.server.LocationManagerService: boolean mGpsNavigating> = $z0;

        return $z0;
    }

    static void access$2900(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        specialinvoke $r0.<com.android.server.LocationManagerService: void reportStopGpsLocked()>();

        return;
    }

    static java.util.Set access$3000(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.Set r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        return r1;
    }

    static java.util.Set access$3100(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.Set r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        return r1;
    }

    static java.util.HashMap access$3200(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderLocation>;

        return r1;
    }

    static java.util.HashMap access$3300(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatus>;

        return r1;
    }

    static java.util.HashMap access$3400(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusExtras>;

        return r1;
    }

    static java.util.HashMap access$600(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        return r1;
    }

    static java.util.HashMap access$700(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mProximityAlerts>;

        return r1;
    }

    static java.util.HashSet access$800(com.android.server.LocationManagerService)
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashSet r1;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        r1 = $r0.<com.android.server.LocationManagerService: java.util.HashSet mProximitiesEntered>;

        return r1;
    }

    static boolean access$900(com.android.server.LocationManagerService, java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @parameter0: com.android.server.LocationManagerService;

        $r1 := @parameter1: java.lang.String;

        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedBySettingsLocked(java.lang.String)>($r1);

        return $z0;
    }

    private void acquireWakeLockLocked()
    {
        com.android.server.LocationManagerService $r0;
        java.lang.Exception $r1;

        $r0 := @this: com.android.server.LocationManagerService;

     label1:
        specialinvoke $r0.<com.android.server.LocationManagerService: void acquireWakeLockXLocked()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "exception in acquireWakeLock()", $r1);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void acquireWakeLockXLocked()
    {
        com.android.server.LocationManagerService $r0;
        android.os.PowerManager$WakeLock $r1;
        boolean $z0, $z1, $z2;
        android.location.LocationProviderImpl $r2;
        com.android.internal.location.GpsLocationProvider $r3;
        long $l0;
        com.android.internal.location.INetworkLocationProvider $r4;
        android.net.wifi.WifiManager$WifiLock $r5;
        android.net.wifi.WifiManager $r6;
        android.telephony.TelephonyManager $r7;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label01;

        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>("Must release wakelock before acquiring");

        $r0.<com.android.server.LocationManagerService: long mWakeLockAcquireTime> = 0L;

        $r1 = $r0.<com.android.server.LocationManagerService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void release()>();

     label01:
        $r2 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        if $r2 == null goto label06;

        $r2 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        $z0 = virtualinvoke $r2.<android.location.LocationProviderImpl: boolean isLocationTracking()>();

        if $z0 == 0 goto label06;

        $z0 = 1;

     label02:
        $r3 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r3 == null goto label07;

        $r3 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        $z1 = virtualinvoke $r3.<com.android.internal.location.GpsLocationProvider: boolean isLocationTracking()>();

        if $z1 == 0 goto label07;

        $z1 = 1;

     label03:
        if $z0 != 0 goto label04;

        if $z1 == 0 goto label08;

     label04:
        $z2 = 1;

     label05:
        if $z2 != 0 goto label09;

        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>("No need for Lock!");

        return;

     label06:
        $z0 = 0;

        goto label02;

     label07:
        $z1 = 0;

        goto label03;

     label08:
        $z2 = 0;

        goto label05;

     label09:
        if $z1 != 0 goto label14;

        $z1 = 1;

     label10:
        $r0.<com.android.server.LocationManagerService: boolean mWakeLockGpsReceived> = $z1;

        if $z0 != 0 goto label15;

        $z0 = 1;

     label11:
        $r0.<com.android.server.LocationManagerService: boolean mWakeLockNetworkReceived> = $z0;

        $r1 = $r0.<com.android.server.LocationManagerService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void acquire()>();

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r0.<com.android.server.LocationManagerService: long mWakeLockAcquireTime> = $l0;

        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>("Acquired wakelock");

        specialinvoke $r0.<com.android.server.LocationManagerService: void startGpsLocked()>();

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired>;

        if $z0 == 0 goto label16;

     label12:
        $r4 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        if $r4 == null goto label13;

        $r4 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired>;

        interfaceinvoke $r4.<com.android.internal.location.INetworkLocationProvider: void updateCellLockStatus(boolean)>($z0);

     label13:
        $r5 = specialinvoke $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock getWifiWakelockLocked()>();

        if $r5 == null goto label19;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mWifiWakeLockAcquired>;

        if $z0 != 0 goto label20;

        $r6 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager mWifiManager>;

        $z0 = virtualinvoke $r6.<android.net.wifi.WifiManager: boolean isWifiEnabled()>();

        if $z0 == 0 goto label18;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mWakeLockNetworkReceived>;

        if $z0 != 0 goto label18;

        virtualinvoke $r5.<android.net.wifi.WifiManager$WifiLock: void acquire()>();

        $r0.<com.android.server.LocationManagerService: boolean mWifiWakeLockAcquired> = 1;

        return;

     label14:
        $z1 = 0;

        goto label10;

     label15:
        $z0 = 0;

        goto label11;

     label16:
        $z0 = $r0.<com.android.server.LocationManagerService: boolean mWakeLockNetworkReceived>;

        if $z0 != 0 goto label17;

        $r7 = $r0.<com.android.server.LocationManagerService: android.telephony.TelephonyManager mTelephonyManager>;

        virtualinvoke $r7.<android.telephony.TelephonyManager: void enableLocationUpdates()>();

        $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired> = 1;

        goto label12;

     label17:
        $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired> = 0;

        goto label12;

     label18:
        $r0.<com.android.server.LocationManagerService: boolean mWifiWakeLockAcquired> = 0;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", "acquireWakeLock(): Unable to get WiFi lock");

        return;

     label19:
        return;

     label20:
        return;
    }

    private void addProximityAlertLocked(double, double, float, long, android.app.PendingIntent)
    {
        com.android.server.LocationManagerService $r0;
        double $d0, $d1;
        float $f0;
        android.app.PendingIntent $r1;
        long $l0, $l2;
        boolean $z0;
        byte $b1;
        int $i3;
        java.util.HashMap $r4;
        com.android.server.LocationManagerService$Receiver $r5, r12;
        android.location.LocationProviderImpl $r7;
        java.lang.String $r8;
        java.lang.SecurityException r9;
        com.android.server.LocationManagerService$ProximityAlert r10;
        com.android.server.LocationManagerService$ProximityListener r11;
        android.location.ILocationListener r13;
        android.location.LocationProvider r14;

        $r0 := @this: com.android.server.LocationManagerService;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $f0 := @parameter2: float;

        $l0 := @parameter3: long;

        $r1 := @parameter4: android.app.PendingIntent;

        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)>("gps");

        if $z0 == 0 goto label1;

        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)>("network");

        if $z0 != 0 goto label2;

     label1:
        r9 = new java.lang.SecurityException;

        specialinvoke r9.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_FINE_LOCATION permission");

        throw r9;

     label2:
        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label3;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l0 = $l0 + $l2;

     label3:
        r10 = new com.android.server.LocationManagerService$ProximityAlert;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r10.<com.android.server.LocationManagerService$ProximityAlert: void <init>(com.android.server.LocationManagerService,int,double,double,float,long,android.app.PendingIntent)>($r0, $i3, $d0, $d1, $f0, $l0, $r1);

        $r4 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mProximityAlerts>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r10);

        $r5 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener>;

        if $r5 != null goto label5;

        r12 = new com.android.server.LocationManagerService$Receiver;

        r11 = new com.android.server.LocationManagerService$ProximityListener;

        specialinvoke r11.<com.android.server.LocationManagerService$ProximityListener: void <init>(com.android.server.LocationManagerService)>($r0);

        r13 = (android.location.ILocationListener) r11;

        specialinvoke r12.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,int)>($r0, r13, -1);

        $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener> = r12;

        $r7 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>("gps");

        if $r7 == null goto label4;

        r14 = (android.location.LocationProvider) $r7;

        $r8 = virtualinvoke r14.<android.location.LocationProvider: java.lang.String getName()>();

        $r5 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener>;

        specialinvoke $r0.<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,com.android.server.LocationManagerService$Receiver)>($r8, 1000L, 1.0F, $r5);

     label4:
        $r7 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>("network");

        if $r7 == null goto label6;

        r14 = (android.location.LocationProvider) $r7;

        $r8 = virtualinvoke r14.<android.location.LocationProvider: java.lang.String getName()>();

        $r5 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener>;

        specialinvoke $r0.<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,com.android.server.LocationManagerService$Receiver)>($r8, 1000L, 1.0F, $r5);

        return;

     label5:
        $z0 = $r0.<com.android.server.LocationManagerService: boolean mGpsNavigating>;

        if $z0 == 0 goto label7;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateReportedGpsLocked()>();

        return;

     label6:
        return;

     label7:
        return;
    }

    private void checkMockPermissionsSafe()
    {
        com.android.server.LocationManagerService $r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;
        boolean $z0;
        java.lang.SecurityException $r3;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "mock_location", 0);

        if $i0 != 1 goto label2;

        $z0 = 1;

     label1:
        if $z0 != 0 goto label3;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_MOCK_LOCATION secure setting");

        throw $r3;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        $r1 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r1.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_MOCK_LOCATION");

        if $i0 == 0 goto label4;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_MOCK_LOCATION permission");

        throw $r3;

     label4:
        return;
    }

    private void checkPermissionsSafe(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        android.content.Context $r3;
        int $i0;
        java.lang.SecurityException $r4;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $r2 = "gps";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_FINE_LOCATION");

        if $i0 == 0 goto label1;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_FINE_LOCATION permission");

        throw $r4;

     label1:
        $r2 = "network";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r3 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_FINE_LOCATION");

        if $i0 == 0 goto label3;

        $r3 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_COARSE_LOCATION");

        if $i0 == 0 goto label4;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_FINE_LOCATION or ACCESS_COARSE_LOCATION permission");

        throw $r4;

     label2:
        return;

     label3:
        return;

     label4:
        return;
    }

    private long getMinTimeLocked(java.lang.String)
    {
        java.lang.String $r0;
        com.android.server.LocationManagerService $r1;
        long $l0, $l2;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.util.ArrayList $r4;
        int $i1;
        com.android.server.LocationManagerService$UpdateRecord $r5;

        $r1 := @this: com.android.server.LocationManagerService;

        $r0 := @parameter0: java.lang.String;

        $l0 = 9223372036854775807L;

        $r2 = $r1.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (java.util.ArrayList) $r3;

        if $r4 == null goto label2;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $i1 = $i1 - 1;

     label1:
        if $i1 < 0 goto label3;

        $r3 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r5 = (com.android.server.LocationManagerService$UpdateRecord) $r3;

        $l2 = $r5.<com.android.server.LocationManagerService$UpdateRecord: long mMinTime>;

        $l0 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l2);

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return 9223372036854775807L;

     label3:
        return $l0;
    }

    private java.lang.String[] getPackageNames()
    {
        com.android.server.LocationManagerService $r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        int $i0;
        java.lang.String[] $r3;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = virtualinvoke $r2.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>($i0);

        return $r3;
    }

    private android.net.wifi.WifiManager$WifiLock getWifiWakelockLocked()
    {
        com.android.server.LocationManagerService $r0;
        android.net.wifi.WifiManager$WifiLock $r1;
        android.net.wifi.WifiManager $r2;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock mWifiLock>;

        if $r1 != null goto label1;

        $r2 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager mWifiManager>;

        if $r2 == null goto label1;

        $r2 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager mWifiManager>;

        $r1 = virtualinvoke $r2.<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)>(2, "LocationManagerService");

        $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock mWifiLock> = $r1;

        $r1 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock mWifiLock>;

        virtualinvoke $r1.<android.net.wifi.WifiManager$WifiLock: void setReferenceCounted(boolean)>(0);

     label1:
        $r1 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock mWifiLock>;

        return $r1;
    }

    private void handleLocationChangedLocked(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        android.os.Bundle $r1, $r11;
        java.lang.String $r2, $r17;
        java.util.HashMap $r3, $r15;
        java.lang.Object $r4;
        java.util.ArrayList $r5, $r12;
        int $i0, $i2, $i3;
        android.location.LocationProviderImpl $r6;
        android.location.Location $r7, $r8;
        boolean $z0, $z1;
        long $l1, $l4;
        java.lang.Long $r9;
        java.lang.Integer $r10;
        com.android.server.LocationManagerService$UpdateRecord $r13;
        com.android.server.LocationManagerService$Receiver $r14;
        java.lang.StringBuilder $r16;
        byte $b5;

        $r0 := @this: com.android.server.LocationManagerService;

        $r2 := @parameter0: java.lang.String;

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.util.ArrayList) $r4;

        if $r5 == null goto label28;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label01;

        return;

     label01:
        $r6 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r2);

        if $r6 == null goto label29;

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationsByProvider>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r7 = (android.location.Location) $r4;

        if $r7 != null goto label20;

        $r7 = new android.location.Location;

        specialinvoke $r7.<android.location.Location: void <init>(java.lang.String)>($r2);

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationsByProvider>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r7);

     label02:
        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderLocation>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r8 = (android.location.Location) $r4;

        if $r8 == null goto label21;

        $z0 = 1;

        virtualinvoke $r7.<android.location.Location: void set(android.location.Location)>($r8);

     label03:
        if $z0 == 0 goto label05;

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastKnownLocation>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r8 = (android.location.Location) $r4;

        if $r8 != null goto label22;

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastKnownLocation>;

        $r8 = new android.location.Location;

        specialinvoke $r8.<android.location.Location: void <init>(android.location.Location)>($r7);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

     label04:
        specialinvoke $r0.<com.android.server.LocationManagerService: void writeLastKnownLocationLocked(java.lang.String,android.location.Location)>($r2, $r7);

        $z1 = $r6 instanceof com.android.internal.location.INetworkLocationProvider;

        if $z1 == 0 goto label23;

        $r0.<com.android.server.LocationManagerService: boolean mWakeLockNetworkReceived> = 1;

     label05:
        $l1 = virtualinvoke $r6.<android.location.LocationProviderImpl: long getStatusUpdateTime()>();

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusUpdateTime>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r9 = (java.lang.Long) $r4;

        if $r9 == null goto label06;

        $l1 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

     label06:
        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        $i0 = virtualinvoke $r6.<android.location.LocationProviderImpl: int getStatus(android.os.Bundle)>($r1);

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatus>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r10 = (java.lang.Integer) $r4;

        if $r10 == null goto label07;

        $i0 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

     label07:
        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusExtras>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r11 = (android.os.Bundle) $r4;

        if $r11 == null goto label08;

        virtualinvoke $r1.<android.os.Bundle: void clear()>();

        virtualinvoke $r1.<android.os.Bundle: void putAll(android.os.Bundle)>($r11);

     label08:
        $r12 = null;

        $i2 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i3 = 0;

     label09:
        if $i3 >= $i2 goto label26;

        $r4 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r13 = (com.android.server.LocationManagerService$UpdateRecord) $r4;

        $r14 = $r13.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        if $z0 == 0 goto label14;

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastFixBroadcast>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        $r3 = (java.util.HashMap) $r4;

        if $r3 != null goto label10;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r15 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastFixBroadcast>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r3);

     label10:
        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r8 = (android.location.Location) $r4;

        if $r8 == null goto label11;

        $z1 = staticinvoke <com.android.server.LocationManagerService: boolean shouldBroadcastSafe(android.location.Location,android.location.Location,com.android.server.LocationManagerService$UpdateRecord)>($r7, $r8, $r13);

        if $z1 == 0 goto label14;

     label11:
        if $r8 != null goto label24;

        $r8 = new android.location.Location;

        specialinvoke $r8.<android.location.Location: void <init>(android.location.Location)>($r7);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r8);

     label12:
        $z1 = virtualinvoke $r14.<com.android.server.LocationManagerService$Receiver: boolean callLocationChangedLocked(android.location.Location)>($r7);

        if $z1 != 0 goto label14;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onLocationChanged on ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r17);

        if $r12 != null goto label13;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

     label13:
        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label14:
        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastStatusBroadcast>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        $r3 = (java.util.HashMap) $r4;

        if $r3 != null goto label15;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r15 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastStatusBroadcast>;

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r3);

     label15:
        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        if $r4 == null goto label25;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r9 = (java.lang.Long) $r4;

        $l4 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

     label16:
        $b5 = $l1 cmp $l4;

        if $b5 <= 0 goto label19;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label17;

        if $i0 == 2 goto label19;

     label17:
        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r9);

        $z1 = virtualinvoke $r14.<com.android.server.LocationManagerService$Receiver: boolean callStatusChangedLocked(java.lang.String,int,android.os.Bundle)>($r2, $i0, $r1);

        if $z1 != 0 goto label19;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onStatusChanged on ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r17);

        if $r12 != null goto label18;

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

     label18:
        $z1 = virtualinvoke $r12.<java.util.ArrayList: boolean contains(java.lang.Object)>($r14);

        if $z1 != 0 goto label19;

        virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

     label19:
        $i3 = $i3 + 1;

        goto label09;

     label20:
        virtualinvoke $r7.<android.location.Location: void reset()>();

        goto label02;

     label21:
        $z0 = virtualinvoke $r6.<android.location.LocationProviderImpl: boolean getLocation(android.location.Location)>($r7);

        goto label03;

     label22:
        virtualinvoke $r8.<android.location.Location: void set(android.location.Location)>($r7);

        goto label04;

     label23:
        $z1 = $r6 instanceof com.android.internal.location.GpsLocationProvider;

        if $z1 == 0 goto label05;

        goto label05;

     label24:
        virtualinvoke $r8.<android.location.Location: void set(android.location.Location)>($r7);

        goto label12;

     label25:
        $l4 = 0L;

        goto label16;

     label26:
        if $r12 == null goto label30;

        $i0 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label27:
        if $i0 < 0 goto label31;

        $r4 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r14 = (com.android.server.LocationManagerService$Receiver) $r4;

        specialinvoke $r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r14);

        $i0 = $i0 + -1;

        goto label27;

     label28:
        return;

     label29:
        return;

     label30:
        return;

     label31:
        return;
    }

    private boolean isAllowedBySettingsLocked(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1, $r5;
        java.util.Set $r2;
        boolean $z0;
        android.content.Context $r3;
        android.content.ContentResolver $r4;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $r3 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r4, "location_providers_allowed");

        if $r5 == null goto label3;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean isAllowedProviderSafe(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        android.content.Context $r3;
        int $i0;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $r2 = "gps";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r3 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_FINE_LOCATION");

        if $i0 == 0 goto label1;

        return 0;

     label1:
        $r2 = "network";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $r3 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_FINE_LOCATION");

        if $i0 == 0 goto label2;

        $r3 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_COARSE_LOCATION");

        if $i0 == 0 goto label2;

        return 0;

     label2:
        return 1;
    }

    private void loadProviders()
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r1;

     label1:
        $z0 = <com.android.server.LocationManagerService: boolean sProvidersLoaded>;

        if $z0 == 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        specialinvoke $r0.<com.android.server.LocationManagerService: void loadProvidersLocked()>();

        <com.android.server.LocationManagerService: boolean sProvidersLoaded> = 1;

        exitmonitor $r1;

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void loadProvidersLocked()
    {
        com.android.server.LocationManagerService $r0;
        java.lang.Exception $r1;

        $r0 := @this: com.android.server.LocationManagerService;

     label1:
        specialinvoke $r0.<com.android.server.LocationManagerService: void _loadProvidersLocked()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "Exception loading providers:", $r1);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void log(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        boolean $z0;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("LocationManagerService", 2);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LocationManagerService", $r1);

        return;

     label1:
        return;
    }

    private android.location.Location readLastKnownLocationLocked(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1, $r5, $r7;
        java.io.File $r2;
        android.location.Location $r3;
        java.io.BufferedReader $r4;
        java.lang.StringBuilder $r6;
        boolean $z0;
        java.io.FileReader $r8;
        java.io.IOException $r9;
        java.util.regex.Pattern $r10;
        java.lang.String[] $r11;
        int $i0, $i2;
        long $l1;
        double $d0, $d1, $d2;
        float $f0, $f1;
        java.lang.NumberFormatException $r12, $r13;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $r5 = null;

        $r2 = new java.io.File;

        $r6 = new java.lang.StringBuilder;

     label01:
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/data/system/location/location.");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>($r7);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

     label02:
        if $z0 != 0 goto label03;

        return null;

     label03:
        $r4 = new java.io.BufferedReader;

     label04:
        $r8 = new java.io.FileReader;

        specialinvoke $r8.<java.io.FileReader: void <init>(java.io.File)>($r2);

        specialinvoke $r4.<java.io.BufferedReader: void <init>(java.io.Reader,int)>($r8, 256);

        $r5 = virtualinvoke $r4.<java.io.BufferedReader: java.lang.String readLine()>();

     label05:
        if $r5 != null goto label07;

        return null;

     label06:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "Unable to read last known location", $r9);

        goto label05;

     label07:
        $r10 = <com.android.server.LocationManagerService: java.util.regex.Pattern PATTERN_COMMA>;

     label08:
        $r11 = virtualinvoke $r10.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>($r5);

     label09:
        $i0 = 0 + 1;

     label10:
        $r5 = $r11[0];

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r5);

     label11:
        $i2 = $i0 + 1;

     label12:
        $r5 = $r11[$i0];

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

     label13:
        $i0 = $i2 + 1;

     label14:
        $r5 = $r11[$i2];

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

     label15:
        $i2 = $i0 + 1;

     label16:
        $r5 = $r11[$i0];

        $d2 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

     label17:
        $i0 = $i2 + 1;

     label18:
        $r5 = $r11[$i2];

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r5);

        $r5 = $r11[$i0];

        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r5);

        $r3 = new android.location.Location;

        specialinvoke $r3.<android.location.Location: void <init>(java.lang.String)>($r1);

     label19:
        virtualinvoke $r3.<android.location.Location: void setTime(long)>($l1);

        virtualinvoke $r3.<android.location.Location: void setLatitude(double)>($d0);

        virtualinvoke $r3.<android.location.Location: void setLongitude(double)>($d1);

        virtualinvoke $r3.<android.location.Location: void setAltitude(double)>($d2);

        virtualinvoke $r3.<android.location.Location: void setBearing(float)>($f0);

        virtualinvoke $r3.<android.location.Location: void setSpeed(float)>($f1);

     label20:
        return $r3;

     label21:
        $r12 := @caughtexception;

     label22:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "NumberFormatException reading last known location", $r12);

        return null;

     label23:
        $r13 := @caughtexception;

        $r12 = $r13;

        goto label22;

        catch java.io.IOException from label01 to label02 with label06;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.NumberFormatException from label08 to label09 with label21;
        catch java.lang.NumberFormatException from label10 to label11 with label21;
        catch java.lang.NumberFormatException from label12 to label13 with label21;
        catch java.lang.NumberFormatException from label14 to label15 with label21;
        catch java.lang.NumberFormatException from label16 to label17 with label21;
        catch java.lang.NumberFormatException from label18 to label19 with label21;
        catch java.lang.NumberFormatException from label19 to label20 with label23;
    }

    private void releaseWakeLockLocked()
    {
        com.android.server.LocationManagerService $r0;
        java.lang.Exception $r1;

        $r0 := @this: com.android.server.LocationManagerService;

     label1:
        specialinvoke $r0.<com.android.server.LocationManagerService: void releaseWakeLockXLocked()>();

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "exception in releaseWakeLock()", $r1);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void releaseWakeLockXLocked()
    {
        com.android.server.LocationManagerService $r0;
        android.net.wifi.WifiManager$WifiLock $r1;
        boolean $z0;
        android.telephony.TelephonyManager $r2;
        com.android.internal.location.INetworkLocationProvider $r3;
        android.os.PowerManager$WakeLock $r4;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = specialinvoke $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager$WifiLock getWifiWakelockLocked()>();

        if $r1 == null goto label1;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mWifiWakeLockAcquired>;

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<android.net.wifi.WifiManager$WifiLock: void release()>();

        $r0.<com.android.server.LocationManagerService: boolean mWifiWakeLockAcquired> = 0;

     label1:
        $z0 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        if $z0 != 0 goto label2;

        specialinvoke $r0.<com.android.server.LocationManagerService: void stopGpsLocked()>();

     label2:
        $z0 = $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired>;

        if $z0 == 0 goto label3;

        $r2 = $r0.<com.android.server.LocationManagerService: android.telephony.TelephonyManager mTelephonyManager>;

        virtualinvoke $r2.<android.telephony.TelephonyManager: void disableLocationUpdates()>();

        $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired> = 0;

     label3:
        $r3 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        if $r3 == null goto label4;

        $r3 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired>;

        interfaceinvoke $r3.<com.android.internal.location.INetworkLocationProvider: void updateCellLockStatus(boolean)>($z0);

     label4:
        $r0.<com.android.server.LocationManagerService: long mWakeLockAcquireTime> = 0L;

        $r4 = $r0.<com.android.server.LocationManagerService: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r4.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label5;

        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>("Released wakelock");

        $r4 = $r0.<com.android.server.LocationManagerService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label5:
        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>("Can\'t release wakelock again!");

        return;
    }

    private void removeProximityAlertLocked(android.app.PendingIntent)
    {
        com.android.server.LocationManagerService $r0;
        android.app.PendingIntent $r1;
        int $i0;
        java.util.HashMap $r2;
        com.android.server.LocationManagerService$Receiver $r3;
        boolean $z0;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: android.app.PendingIntent;

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mProximityAlerts>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mProximityAlerts>;

        $i0 = virtualinvoke $r2.<java.util.HashMap: int size()>();

        if $i0 != 0 goto label1;

        $r3 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener>;

        specialinvoke $r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r3);

        $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener> = null;

        return;

     label1:
        $z0 = $r0.<com.android.server.LocationManagerService: boolean mGpsNavigating>;

        if $z0 == 0 goto label2;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateReportedGpsLocked()>();

        return;

     label2:
        return;
    }

    private void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService $r0;
        com.android.server.LocationManagerService$Receiver $r1, $r5;
        java.util.HashSet $r2;
        long $l0, $l2;
        java.util.ArrayList $r3;
        int $i1;
        java.lang.Object $r4;
        boolean $z0;
        android.location.ILocationListener $r6;
        android.os.IBinder $r7;
        java.util.HashMap $r8;
        java.util.Collection $r9;
        java.util.Iterator $r10;
        com.android.server.LocationManagerService$UpdateRecord $r11;
        java.lang.String $r12;
        com.android.internal.location.INetworkLocationProvider $r13;
        java.lang.String[] $r14;
        java.lang.Throwable $r15;
        java.util.Set $r16;
        android.location.LocationProviderImpl $r17;
        com.android.internal.location.GpsLocationProvider $r18;
        com.android.server.LocationManagerService$LocationWorkerHandler $r19;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: com.android.server.LocationManagerService$Receiver;

        staticinvoke <android.os.Binder: int getCallingUid()>();

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r3 = $r0.<com.android.server.LocationManagerService: java.util.ArrayList mListeners>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int indexOf(java.lang.Object)>($r1);

        if $i1 < 0 goto label02;

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.ArrayList mListeners>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        $r5 = (com.android.server.LocationManagerService$Receiver) $r4;

        $z0 = virtualinvoke $r5.<com.android.server.LocationManagerService$Receiver: boolean isListener()>();

        if $z0 == 0 goto label02;

        $r6 = virtualinvoke $r5.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r7 = interfaceinvoke $r6.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r7.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0);

     label02:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        $r4 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (java.util.HashMap) $r4;

        if $r8 == null goto label08;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label07;

        $r4 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.server.LocationManagerService$UpdateRecord) $r4;

        $r12 = $r11.<com.android.server.LocationManagerService$UpdateRecord: java.lang.String mProvider>;

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("network");

        if $z0 == 0 goto label04;

        $r13 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        if $r13 == null goto label04;

        $r13 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        $r14 = $r11.<com.android.server.LocationManagerService$UpdateRecord: java.lang.String[] mPackages>;

        interfaceinvoke $r13.<com.android.internal.location.INetworkLocationProvider: void removeListener(java.lang.String[])>($r14);

     label04:
        virtualinvoke $r11.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked()>();

     label05:
        goto label03;

     label06:
        $r15 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        throw $r15;

     label07:
        $r16 = virtualinvoke $r8.<java.util.HashMap: java.util.Set keySet()>();

        virtualinvoke $r2.<java.util.AbstractCollection: boolean addAll(java.util.Collection)>($r16);

     label08:
        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastFixBroadcast>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastStatusBroadcast>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r10 = virtualinvoke $r2.<java.util.HashSet: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r4 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.String) $r4;

        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedBySettingsLocked(java.lang.String)>($r12);

        if $z0 == 0 goto label09;

        $z0 = 0;

        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r4 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        $r3 = (java.util.ArrayList) $r4;

        if $r3 == null goto label10;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label10;

        $z0 = 1;

     label10:
        $r17 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r12);

        if $r17 == null goto label09;

        if $z0 == 0 goto label12;

        $l2 = specialinvoke $r0.<com.android.server.LocationManagerService: long getMinTimeLocked(java.lang.String)>($r12);

        virtualinvoke $r17.<android.location.LocationProviderImpl: void setMinTime(long)>($l2);

     label11:
        $r18 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r17 != $r18 goto label09;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mGpsNavigating>;

        if $z0 == 0 goto label09;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateReportedGpsLocked()>();

        goto label09;

     label12:
        $r19 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r19.<android.os.Handler: void removeMessages(int,java.lang.Object)>(1, $r12);

        virtualinvoke $r17.<android.location.LocationProviderImpl: void enableLocationTracking(boolean)>(0);

        goto label11;

     label13:
        $z0 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateWakelockStatusLocked(boolean)>($z0);

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;

        catch java.lang.Throwable from label01 to label05 with label06;
        catch java.lang.Throwable from label07 to label14 with label06;
    }

    private boolean reportGpsUidLocked(int, int, int)
    {
        com.android.server.LocationManagerService $r0;
        int $i0, $i1, $i2, $i3;
        android.util.SparseIntArray $r1;
        com.android.internal.app.IBatteryStats $r2;
        android.os.RemoteException $r3;

        $r0 := @this: com.android.server.LocationManagerService;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $r1 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i3 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>($i2, -1);

        if $i3 != $i0 goto label1;

        $r1 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>($i2, $i1);

        return 1;

     label1:
        if $i3 == $i1 goto label5;

        $r2 = $r0.<com.android.server.LocationManagerService: com.android.internal.app.IBatteryStats mBatteryStats>;

     label2:
        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteStartGps(int)>($i2);

        $r1 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>($i2, $i1);

     label3:
        return 1;

     label4:
        $r3 := @caughtexception;

     label5:
        return 0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void reportStopGpsLocked()
    {
        com.android.server.LocationManagerService $r0;
        int $i0, $i1, $i2;
        android.util.SparseIntArray $r1;
        com.android.internal.app.IBatteryStats $r2;
        android.os.RemoteException $r3;

        $r0 := @this: com.android.server.LocationManagerService;

        $i0 = $r0.<com.android.server.LocationManagerService: int mReportedGpsSeq>;

        $r1 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i1 = virtualinvoke $r1.<android.util.SparseIntArray: int size()>();

        $i1 = $i1 - 1;

     label1:
        if $i1 < 0 goto label4;

        $r1 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i2 = virtualinvoke $r1.<android.util.SparseIntArray: int valueAt(int)>($i1);

        if $i2 != $i0 goto label3;

        $r2 = $r0.<com.android.server.LocationManagerService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r1 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

     label2:
        $i2 = virtualinvoke $r1.<android.util.SparseIntArray: int keyAt(int)>($i1);

        interfaceinvoke $r2.<com.android.internal.app.IBatteryStats: void noteStopGps(int)>($i2);

     label3:
        $i1 = $i1 + -1;

        goto label1;

     label4:
        $i0 = $i0 + 1;

        if $i0 >= 0 goto label5;

        $i0 = 0;

     label5:
        $r0.<com.android.server.LocationManagerService: int mReportedGpsSeq> = $i0;

        $r1 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        virtualinvoke $r1.<android.util.SparseIntArray: void clear()>();

        return;

     label6:
        $r3 := @caughtexception;

        goto label3;

        catch android.os.RemoteException from label2 to label3 with label6;
    }

    private void requestLocationUpdatesLocked(java.lang.String, long, float, com.android.server.LocationManagerService$Receiver)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        long $l0, $l2;
        float $f0;
        com.android.server.LocationManagerService$Receiver $r2;
        com.android.server.LocationManagerService$UpdateRecord $r3;
        android.location.LocationProviderImpl $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String[] $r7;
        int $i1;
        java.util.ArrayList $r8;
        boolean $z0;
        android.location.ILocationListener $r9;
        android.os.IBinder $r10;
        java.util.HashMap $r11, $r13;
        java.lang.Object $r12;
        com.android.server.LocationManagerService$LocationWorkerHandler $r14;
        android.os.Message $r15;
        android.os.RemoteException $r16, $r17;
        java.lang.Throwable $r18;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $f0 := @parameter2: float;

        $r2 := @parameter3: com.android.server.LocationManagerService$Receiver;

        $r4 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r4 != null goto label01;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("provider=");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label01:
        specialinvoke $r0.<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)>($r1);

        $r7 = specialinvoke $r0.<com.android.server.LocationManagerService: java.lang.String[] getPackageNames()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = new com.android.server.LocationManagerService$UpdateRecord;

        specialinvoke $r3.<com.android.server.LocationManagerService$UpdateRecord: void <init>(com.android.server.LocationManagerService,java.lang.String,long,float,com.android.server.LocationManagerService$Receiver,int,java.lang.String[])>($r0, $r1, $l0, $f0, $r2, $i1, $r7);

        $r8 = $r0.<com.android.server.LocationManagerService: java.util.ArrayList mListeners>;

        $z0 = virtualinvoke $r8.<java.util.ArrayList: boolean contains(java.lang.Object)>($r2);

     label03:
        if $z0 != 0 goto label06;

     label04:
        $z0 = virtualinvoke $r2.<com.android.server.LocationManagerService$Receiver: boolean isListener()>();

        if $z0 == 0 goto label05;

        $r9 = virtualinvoke $r2.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r10 = interfaceinvoke $r9.<android.location.ILocationListener: android.os.IBinder asBinder()>();

        interfaceinvoke $r10.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r2, 0);

     label05:
        $r8 = $r0.<com.android.server.LocationManagerService: java.util.ArrayList mListeners>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

     label06:
        $r11 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r11 = (java.util.HashMap) $r12;

        if $r11 != null goto label07;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        $r13 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        virtualinvoke $r13.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r11);

     label07:
        $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r3);

        $r3 = (com.android.server.LocationManagerService$UpdateRecord) $r12;

        if $r3 == null goto label08;

        virtualinvoke $r3.<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked()>();

     label08:
        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedBySettingsLocked(java.lang.String)>($r1);

        if $z0 == 0 goto label12;

        $l0 = specialinvoke $r0.<com.android.server.LocationManagerService: long getMinTimeLocked(java.lang.String)>($r1);

        virtualinvoke $r4.<android.location.LocationProviderImpl: void setMinTime(long)>($l0);

        virtualinvoke $r4.<android.location.LocationProviderImpl: void enableLocationTracking(boolean)>(1);

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateWakelockStatusLocked(boolean)>($z0);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("gps");

        if $z0 == 0 goto label09;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mGpsNavigating>;

        if $z0 == 0 goto label09;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateReportedGpsLocked()>();

     label09:
        $r14 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r14.<android.os.Handler: void removeMessages(int,java.lang.Object)>(1, $r1);

        $r14 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r15 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r14, 1, $r1);

        $r14 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l0 = $l0 + 1000L;

        virtualinvoke $r14.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>($r15, $l0);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l2);

        return;

     label11:
        $r16 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l2);

        return;

     label12:
        $z0 = virtualinvoke $r2.<com.android.server.LocationManagerService$Receiver: boolean isListener()>();

        if $z0 == 0 goto label10;

        $r9 = virtualinvoke $r2.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        interfaceinvoke $r9.<android.location.ILocationListener: void onProviderDisabled(java.lang.String)>($r1);

     label13:
        goto label10;

     label14:
        $r17 := @caughtexception;

     label15:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException calling onProviderDisabled on ");

        $r9 = virtualinvoke $r2.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", $r1);

     label16:
        goto label10;

     label17:
        $r18 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l2);

        throw $r18;

        catch java.lang.Throwable from label02 to label03 with label17;
        catch android.os.RemoteException from label04 to label06 with label11;
        catch java.lang.Throwable from label04 to label06 with label17;
        catch java.lang.Throwable from label06 to label10 with label17;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
    }

    private static boolean shouldBroadcastSafe(android.location.Location, android.location.Location, com.android.server.LocationManagerService$UpdateRecord)
    {
        android.location.Location $r0, $r1;
        com.android.server.LocationManagerService$UpdateRecord $r2;
        double $d0, $d1;
        long $l0, $l1;
        byte $b2;
        float $f0;

        $r0 := @parameter0: android.location.Location;

        $r1 := @parameter1: android.location.Location;

        $r2 := @parameter2: com.android.server.LocationManagerService$UpdateRecord;

        if $r1 != null goto label1;

        return 1;

     label1:
        $l0 = virtualinvoke $r0.<android.location.Location: long getTime()>();

        $l1 = virtualinvoke $r1.<android.location.Location: long getTime()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        return 0;

     label2:
        $f0 = $r2.<com.android.server.LocationManagerService$UpdateRecord: float mMinDistance>;

        $d0 = (double) $f0;

        $b2 = $d0 cmpl 0.0;

        if $b2 <= 0 goto label3;

        $f0 = virtualinvoke $r0.<android.location.Location: float distanceTo(android.location.Location)>($r1);

        $d1 = (double) $f0;

        $b2 = $d1 cmpg $d0;

        if $b2 > 0 goto label3;

        return 0;

     label3:
        return 1;
    }

    private void startGpsLocked()
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0;
        com.android.internal.location.GpsLocationProvider $r1;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r1 == null goto label2;

        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        $z0 = virtualinvoke $r1.<com.android.internal.location.GpsLocationProvider: boolean isLocationTracking()>();

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label3;

        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        virtualinvoke $r1.<com.android.internal.location.GpsLocationProvider: void startNavigating()>();

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return;
    }

    private void stopGpsLocked()
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0;
        com.android.internal.location.GpsLocationProvider $r1;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r1 == null goto label2;

        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        $z0 = virtualinvoke $r1.<com.android.internal.location.GpsLocationProvider: boolean isLocationTracking()>();

        if $z0 == 0 goto label2;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label3;

        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        virtualinvoke $r1.<com.android.internal.location.GpsLocationProvider: void stopNavigating()>();

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return;
    }

    private void updateProviderListenersLocked(java.lang.String, boolean)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        android.location.LocationProviderImpl $r2;
        java.util.ArrayList $r3, $r6, $r10;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        com.android.server.LocationManagerService$UpdateRecord $r7;
        com.android.server.LocationManagerService$Receiver $r8;
        android.location.ILocationListener $r9;
        android.content.Intent $r11;
        android.app.PendingIntent $r12;
        android.content.Context $r13;
        android.app.PendingIntent$CanceledException $r14;
        android.os.RemoteException $r15, $r19;
        long $l3;
        com.android.server.LocationManagerService$LocationWorkerHandler $r16;
        android.os.Message $r17;
        com.android.internal.location.GpsLocationProvider $r18;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $i0 = 0;

        $r2 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r2 != null goto label01;

        return;

     label01:
        $r3 = null;

        $r4 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (java.util.ArrayList) $r5;

        if $r6 == null goto label18;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $i2 = 0;

        $r3 = null;

     label02:
        if $i2 >= $i1 goto label18;

        $r5 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r7 = (com.android.server.LocationManagerService$UpdateRecord) $r5;

        $r8 = $r7.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

     label03:
        $z1 = virtualinvoke $r8.<com.android.server.LocationManagerService$Receiver: boolean isListener()>();

     label04:
        if $z1 == 0 goto label10;

     label05:
        if $z0 == 0 goto label08;

        $r9 = virtualinvoke $r8.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        interfaceinvoke $r9.<android.location.ILocationListener: void onProviderEnabled(java.lang.String)>($r1);

     label06:
        $r10 = $r3;

     label07:
        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        $r3 = $r10;

        goto label02;

     label08:
        $r9 = virtualinvoke $r8.<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>();

        interfaceinvoke $r9.<android.location.ILocationListener: void onProviderDisabled(java.lang.String)>($r1);

     label09:
        $r10 = $r3;

        goto label07;

     label10:
        $r11 = new android.content.Intent;

        specialinvoke $r11.<android.content.Intent: void <init>()>();

        virtualinvoke $r11.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("providerEnabled", $z0);

     label11:
        $r12 = virtualinvoke $r8.<com.android.server.LocationManagerService$Receiver: android.app.PendingIntent getPendingIntent()>();

        $r13 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        virtualinvoke $r12.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>($r13, 0, $r11, null, null);

     label12:
        $r10 = $r3;

        goto label07;

     label13:
        $r14 := @caughtexception;

        if $r3 != null goto label26;

        $r10 = new java.util.ArrayList;

     label14:
        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

     label15:
        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

     label16:
        goto label07;

     label17:
        $r15 := @caughtexception;

        goto label07;

     label18:
        if $r3 == null goto label20;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = $i1 - 1;

     label19:
        if $i1 < 0 goto label20;

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r8 = (com.android.server.LocationManagerService$Receiver) $r5;

        specialinvoke $r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r8);

        $i1 = $i1 + -1;

        goto label19;

     label20:
        if $z0 == 0 goto label22;

        virtualinvoke $r2.<android.location.LocationProviderImpl: void enable()>();

        if $i0 <= 0 goto label21;

        $l3 = specialinvoke $r0.<com.android.server.LocationManagerService: long getMinTimeLocked(java.lang.String)>($r1);

        virtualinvoke $r2.<android.location.LocationProviderImpl: void setMinTime(long)>($l3);

        virtualinvoke $r2.<android.location.LocationProviderImpl: void enableLocationTracking(boolean)>(1);

        $z1 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateWakelockStatusLocked(boolean)>($z1);

     label21:
        if $z0 == 0 goto label24;

        if $i0 <= 0 goto label24;

        $r16 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r16.<android.os.Handler: void removeMessages(int,java.lang.Object)>(1, $r1);

        $r16 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r17 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r16, 1, $r1);

        $r16 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l3 = $l3 + 1000L;

        virtualinvoke $r16.<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>($r17, $l3);

        return;

     label22:
        virtualinvoke $r2.<android.location.LocationProviderImpl: void enableLocationTracking(boolean)>(0);

        $r18 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r2 != $r18 goto label23;

        $r0.<com.android.server.LocationManagerService: boolean mGpsNavigating> = 0;

        specialinvoke $r0.<com.android.server.LocationManagerService: void reportStopGpsLocked()>();

     label23:
        virtualinvoke $r2.<android.location.LocationProviderImpl: void disable()>();

        $z1 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateWakelockStatusLocked(boolean)>($z1);

        goto label21;

     label24:
        $r16 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r16.<android.os.Handler: void removeMessages(int,java.lang.Object)>(1, $r1);

        return;

     label25:
        $r19 := @caughtexception;

        $r10 = $r3;

        goto label07;

     label26:
        $r10 = $r3;

        goto label07;

        catch android.os.RemoteException from label03 to label04 with label25;
        catch android.os.RemoteException from label05 to label06 with label25;
        catch android.os.RemoteException from label08 to label09 with label25;
        catch android.os.RemoteException from label10 to label11 with label25;
        catch android.app.PendingIntent$CanceledException from label11 to label12 with label13;
        catch android.os.RemoteException from label11 to label12 with label25;
        catch android.os.RemoteException from label14 to label15 with label25;
        catch android.os.RemoteException from label15 to label16 with label17;
    }

    private void updateProvidersLocked()
    {
        com.android.server.LocationManagerService $r0;
        java.util.List $r1;
        java.util.Iterator $r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        android.location.LocationProviderImpl $r4;
        java.lang.String $r5, $r7;
        com.android.internal.location.ILocationCollector $r6;
        android.location.LocationProvider r8;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = staticinvoke <android.location.LocationProviderImpl: java.util.List getProviders()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.location.LocationProviderImpl) $r3;

        $z0 = virtualinvoke $r4.<android.location.LocationProviderImpl: boolean isEnabled()>();

        r8 = (android.location.LocationProvider) $r4;

        $r5 = virtualinvoke r8.<android.location.LocationProvider: java.lang.String getName()>();

        $z1 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean isAllowedBySettingsLocked(java.lang.String)>($r5);

        $r6 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        if $r6 == null goto label2;

        r8 = (android.location.LocationProvider) $r4;

        $r7 = virtualinvoke r8.<android.location.LocationProvider: java.lang.String getName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("network");

        if $z2 == 0 goto label2;

        $r6 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        interfaceinvoke $r6.<com.android.internal.location.ILocationCollector: void updateNetworkProviderStatus(boolean)>($z1);

     label2:
        if $z0 == 0 goto label3;

        if $z1 != 0 goto label3;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>($r5, 0);

        goto label1;

     label3:
        if $z0 != 0 goto label1;

        if $z1 == 0 goto label1;

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProviderListenersLocked(java.lang.String,boolean)>($r5, 1);

        goto label1;

     label4:
        return;
    }

    private void updateReportedGpsLocked()
    {
        com.android.server.LocationManagerService $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.location.GpsLocationProvider $r1;
        java.lang.String $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        java.util.ArrayList $r5;
        com.android.server.LocationManagerService$UpdateRecord $r6;
        com.android.server.LocationManagerService$Receiver $r7, $r8;
        boolean $z0;
        java.util.Collection $r9;
        java.util.Iterator $r10;
        com.android.server.LocationManagerService$ProximityAlert $r11;
        android.util.SparseIntArray $r12;
        com.android.internal.app.IBatteryStats $r13;
        android.os.RemoteException $r14;
        android.location.LocationProvider r15;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r1 != null goto label01;

        return;

     label01:
        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        r15 = (android.location.LocationProvider) $r1;

        $r2 = virtualinvoke r15.<android.location.LocationProvider: java.lang.String getName()>();

        $i0 = $r0.<com.android.server.LocationManagerService: int mReportedGpsSeq>;

        $i1 = $i0 + 1;

        if $i1 < 0 goto label05;

        $i1 = $i0 + 1;

     label02:
        $r0.<com.android.server.LocationManagerService: int mReportedGpsSeq> = $i1;

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (java.util.ArrayList) $r4;

        $i2 = 0;

        $i3 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i4 = 0;

     label03:
        if $i4 >= $i3 goto label07;

        $r4 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r6 = (com.android.server.LocationManagerService$UpdateRecord) $r4;

        $r7 = $r6.<com.android.server.LocationManagerService$UpdateRecord: com.android.server.LocationManagerService$Receiver mReceiver>;

        $r8 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener>;

        if $r7 != $r8 goto label06;

     label04:
        $i4 = $i4 + 1;

        goto label03;

     label05:
        $i1 = 0;

        goto label02;

     label06:
        $i5 = $r6.<com.android.server.LocationManagerService$UpdateRecord: int mUid>;

        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean reportGpsUidLocked(int,int,int)>($i0, $i1, $i5);

        if $z0 == 0 goto label04;

        $i2 = $i2 + 1;

        goto label04;

     label07:
        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mProximityAlerts>;

        $r9 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        $r10 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label08:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r4 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.android.server.LocationManagerService$ProximityAlert) $r4;

        $i3 = $r11.<com.android.server.LocationManagerService$ProximityAlert: int mUid>;

        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean reportGpsUidLocked(int,int,int)>($i0, $i1, $i3);

        if $z0 == 0 goto label08;

        $i2 = $i2 + 1;

        goto label08;

     label09:
        $r12 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i0 = virtualinvoke $r12.<android.util.SparseIntArray: int size()>();

        if $i2 == $i0 goto label15;

        $r12 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i0 = virtualinvoke $r12.<android.util.SparseIntArray: int size()>();

        $i0 = $i0 - 1;

     label10:
        if $i0 < 0 goto label16;

        $r12 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i2 = virtualinvoke $r12.<android.util.SparseIntArray: int valueAt(int)>($i0);

        if $i2 == $i1 goto label13;

        $r13 = $r0.<com.android.server.LocationManagerService: com.android.internal.app.IBatteryStats mBatteryStats>;

        $r12 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

     label11:
        $i2 = virtualinvoke $r12.<android.util.SparseIntArray: int keyAt(int)>($i0);

        interfaceinvoke $r13.<com.android.internal.app.IBatteryStats: void noteStopGps(int)>($i2);

     label12:
        $r12 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        virtualinvoke $r12.<android.util.SparseIntArray: void removeAt(int)>($i0);

     label13:
        $i0 = $i0 + -1;

        goto label10;

     label14:
        $r14 := @caughtexception;

        goto label12;

     label15:
        return;

     label16:
        return;

        catch android.os.RemoteException from label11 to label12 with label14;
    }

    private void updateWakelockStatusLocked(boolean)
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        long $l0, $l1, $l2;
        android.location.LocationProviderImpl $r3;
        com.android.internal.location.GpsLocationProvider $r4;
        android.content.Context $r5;
        android.content.Intent $r6;
        android.app.PendingIntent $r7;
        android.app.AlarmManager $r8;
        com.android.server.LocationManagerService$LocationWorkerHandler $r9;

        $r0 := @this: com.android.server.LocationManagerService;

        $z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateWakelockStatus(): ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>($r2);

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $z1 = 0;

        $l1 = 2147483647L;

        $r3 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        if $r3 == null goto label1;

        $r3 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        $z2 = virtualinvoke $r3.<android.location.LocationProviderImpl: boolean isLocationTracking()>();

        if $z2 == 0 goto label1;

        $z1 = 1;

        $r3 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        $l1 = virtualinvoke $r3.<android.location.LocationProviderImpl: long getMinTime()>();

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l1, 2147483647L);

     label1:
        $r4 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r4 == null goto label2;

        $r4 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        $z2 = virtualinvoke $r4.<com.android.internal.location.GpsLocationProvider: boolean isLocationTracking()>();

        if $z2 == 0 goto label2;

        $z1 = 1;

        $r4 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        $l2 = virtualinvoke $r4.<android.location.LocationProviderImpl: long getMinTime()>();

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l2, $l1);

        if $z0 == 0 goto label4;

        specialinvoke $r0.<com.android.server.LocationManagerService: void startGpsLocked()>();

     label2:
        $r0.<com.android.server.LocationManagerService: boolean mScreenOn> = $z0;

        $r5 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $r6 = new android.content.Intent;

        specialinvoke $r6.<android.content.Intent: void <init>(java.lang.String)>("com.android.location.ALARM_INTENT");

        $r7 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r5, 0, $r6, 0);

        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>("Cancelling existing alarm");

        $r8 = $r0.<com.android.server.LocationManagerService: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r8.<android.app.AlarmManager: void cancel(android.app.PendingIntent)>($r7);

        if $z1 == 0 goto label5;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        if $z0 != 0 goto label5;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r8 = $r0.<com.android.server.LocationManagerService: android.app.AlarmManager mAlarmManager>;

        $l2 = $l2 + $l1;

        virtualinvoke $r8.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(2, $l2, $r7);

        $r0.<com.android.server.LocationManagerService: long mAlarmInterval> = $l1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating a new wakelock alarm with minTime = ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>($r2);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;

     label4:
        $z2 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        if $z2 == 0 goto label2;

        if $z0 != 0 goto label2;

        specialinvoke $r0.<com.android.server.LocationManagerService: void stopGpsLocked()>();

        goto label2;

     label5:
        specialinvoke $r0.<com.android.server.LocationManagerService: void log(java.lang.String)>("No need for alarm");

        $r0.<com.android.server.LocationManagerService: long mAlarmInterval> = -1L;

        $r9 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r9.<android.os.Handler: void removeMessages(int)>(2);

        $r9 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r9.<android.os.Handler: void removeMessages(int)>(3);

        specialinvoke $r0.<com.android.server.LocationManagerService: void releaseWakeLockLocked()>();

        goto label3;
    }

    private void writeLastKnownLocationLocked(java.lang.String, android.location.Location)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        android.location.Location $r2;
        java.io.File $r3;
        java.lang.StringBuilder $r4, $r11;
        java.io.FileWriter $r5, $r9;
        long $l0, $l1;
        java.util.HashMap $r6;
        java.lang.Object $r7;
        java.lang.Long $r8;
        byte $b2;
        double $d0;
        float $f0;
        boolean $z0;
        java.io.IOException $r10, $r12, $r13, $r14, $r16, $r17;
        java.lang.Throwable $r15;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.location.Location;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r6 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastWriteTime>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (java.lang.Long) $r7;

        if $r8 == null goto label01;

        $l1 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

        $l1 = $l0 - $l1;

        $b2 = $l1 cmp 60000L;

        if $b2 >= 0 goto label01;

        return;

     label01:
        $r6 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastWriteTime>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(100);

        $l0 = virtualinvoke $r2.<android.location.Location: long getTime()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $d0 = virtualinvoke $r2.<android.location.Location: double getLatitude()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $d0 = virtualinvoke $r2.<android.location.Location: double getLongitude()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $d0 = virtualinvoke $r2.<android.location.Location: double getAltitude()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $f0 = virtualinvoke $r2.<android.location.Location: float getBearing()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $f0 = virtualinvoke $r2.<android.location.Location: float getSpeed()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r9 = null;

     label02:
        $r3 = new java.io.File;

     label03:
        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>("/data/system/location");

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label05;

        $z0 = virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

        if $z0 != 0 goto label05;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", "Unable to create directory to write location");

     label04:
        goto label26;

     label05:
        $r3 = new java.io.File;

        $r11 = new java.lang.StringBuilder;

     label06:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/data/system/location/location.");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r1);

        $r5 = new java.io.FileWriter;

        specialinvoke $r5.<java.io.FileWriter: void <init>(java.io.File)>($r3);

     label07:
        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>($r1);

     label08:
        if $r5 == null goto label25;

     label09:
        virtualinvoke $r5.<java.io.OutputStreamWriter: void close()>();

     label10:
        return;

     label11:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "Exception closing file", $r12);

        return;

     label12:
        $r13 := @caughtexception;

        $r10 = $r13;

     label13:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "Unable to write location", $r10);

     label14:
        if $r9 == null goto label27;

     label15:
        virtualinvoke $r9.<java.io.OutputStreamWriter: void close()>();

     label16:
        return;

     label17:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "Exception closing file", $r14);

        return;

     label18:
        $r15 := @caughtexception;

     label19:
        if $r9 == null goto label21;

     label20:
        virtualinvoke $r9.<java.io.OutputStreamWriter: void close()>();

     label21:
        throw $r15;

     label22:
        $r16 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "Exception closing file", $r16);

        goto label21;

     label23:
        $r15 := @caughtexception;

        $r9 = $r5;

        goto label19;

     label24:
        $r17 := @caughtexception;

        $r10 = $r17;

        $r9 = $r5;

        goto label13;

     label25:
        return;

     label26:
        return;

     label27:
        return;

        catch java.io.IOException from label03 to label04 with label12;
        catch java.lang.Throwable from label02 to label04 with label18;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.lang.Throwable from label05 to label07 with label18;
        catch java.io.IOException from label07 to label08 with label24;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.io.IOException from label20 to label21 with label22;
    }

    public boolean addGpsStatusListener(android.location.IGpsStatusListener)
    {
        com.android.server.LocationManagerService $r0;
        android.location.IGpsStatusListener $r1;
        int $i0;
        com.android.internal.location.GpsLocationProvider $r2;
        android.content.Context $r3;
        java.lang.SecurityException $r4;
        android.os.RemoteException $r5;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: android.location.IGpsStatusListener;

        $r2 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_FINE_LOCATION");

        if $i0 == 0 goto label2;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_FINE_LOCATION permission");

        throw $r4;

     label2:
        $r2 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

     label3:
        virtualinvoke $r2.<com.android.internal.location.GpsLocationProvider: void addGpsStatusListener(android.location.IGpsStatusListener)>($r1);

     label4:
        return 1;

     label5:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("LocationManagerService", "RemoteException in addGpsStatusListener");

        return 0;

        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void addProximityAlert(double, double, float, long, android.app.PendingIntent)
    {
        com.android.server.LocationManagerService $r0;
        double $d0, $d1;
        float $f0;
        long $l0;
        android.app.PendingIntent $r1;
        java.util.HashMap $r2;
        java.lang.Throwable $r3;
        java.lang.SecurityException $r4;
        java.lang.Exception $r5;

        $r0 := @this: com.android.server.LocationManagerService;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $f0 := @parameter2: float;

        $l0 := @parameter3: long;

        $r1 := @parameter4: android.app.PendingIntent;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent)>($d0, $d1, $f0, $l0, $r1);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        $r4 := @caughtexception;

        throw $r4;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "addProximityAlert got exception:", $r5);

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void addTestProvider(java.lang.String, boolean, boolean, boolean, boolean, boolean, boolean, boolean, int, int)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        int $i0, $i1;
        com.android.server.LocationManagerService$MockProvider $r2;
        java.util.HashMap $r3;
        android.location.LocationProviderImpl $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 := @parameter3: boolean;

        $z3 := @parameter4: boolean;

        $z4 := @parameter5: boolean;

        $z5 := @parameter6: boolean;

        $z6 := @parameter7: boolean;

        $i0 := @parameter8: int;

        $i1 := @parameter9: int;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r3;

     label1:
        $r2 = new com.android.server.LocationManagerService$MockProvider;

        specialinvoke $r2.<com.android.server.LocationManagerService$MockProvider: void <init>(com.android.server.LocationManagerService,java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>($r0, $r1, $z0, $z1, $z2, $z3, $z4, $z5, $z6, $i0, $i1);

        $r4 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r4 == null goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" already exists");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label2:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label3:
        throw $r7;

     label4:
        staticinvoke <android.location.LocationProviderImpl: void addProvider(android.location.LocationProviderImpl)>($r2);

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public void clearTestProviderEnabled(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        java.util.HashMap $r2;
        android.location.LocationProviderImpl $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r6;
        java.util.Set $r7;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r3 != null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r6;

     label4:
        $r7 = $r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        $r7 = $r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public void clearTestProviderLocation(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        java.util.HashMap $r2, $r7;
        android.location.LocationProviderImpl $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r3 != null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r6;

     label4:
        $r7 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderLocation>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        exitmonitor $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public void clearTestProviderStatus(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        java.util.HashMap $r2, $r7;
        android.location.LocationProviderImpl $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r3 != null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r6;

     label4:
        $r7 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatus>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r7 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusExtras>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r7 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusUpdateTime>;

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        exitmonitor $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.LocationManagerService $r0;
        java.io.PrintWriter $r1;
        java.lang.String[] $r2;
        java.io.FileDescriptor $r3;
        android.content.Context $r4;
        int $i0, $i2, $i3;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.util.HashMap $r7, $r16;
        boolean $z0;
        com.android.internal.location.GpsLocationProvider $r8;
        android.location.LocationProviderImpl $r9;
        com.android.internal.location.INetworkLocationProvider $r10;
        com.android.server.LocationManagerService$CellLocationUpdater $r11;
        com.android.internal.location.CellState $r12;
        com.android.internal.location.ILocationCollector $r13;
        long $l1;
        java.util.ArrayList $r14;
        java.lang.Object $r15;
        java.util.Set $r17;
        java.util.Iterator $r18, $r20;
        java.util.Map$Entry $r19;
        com.android.server.LocationManagerService$UpdateRecord $r21;
        java.lang.Throwable $r22;
        android.location.Location $r23;
        android.util.PrintWriterPrinter $r24;
        java.lang.Long $r25;
        com.android.server.LocationManagerService$ProximityAlert $r26;
        java.util.HashSet $r27;
        com.android.server.LocationManagerService$Receiver $r28;
        java.lang.Integer $r29;
        android.util.SparseIntArray $r30;

        $r0 := @this: com.android.server.LocationManagerService;

        $r3 := @parameter0: java.io.FileDescriptor;

        $r1 := @parameter1: java.io.PrintWriter;

        $r2 := @parameter2: java.lang.String[];

        $r4 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label01;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump AlarmManager from from pid=");

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return;

     label01:
        $r7 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r7;

     label02:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("Current Location Manager state:");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  sProvidersLoaded=");

        $z0 = <com.android.server.LocationManagerService: boolean sProvidersLoaded>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mGpsLocationProvider=");

        $r8 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mGpsNavigating=");

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mGpsNavigating>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNetworkLocationProvider=");

        $r9 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNetworkLocationInterface=");

        $r10 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastSignalStrength=");

        $i0 = $r0.<com.android.server.LocationManagerService: int mLastSignalStrength>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastRadioType=");

        $i0 = $r0.<com.android.server.LocationManagerService: int mLastRadioType>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCellLocationUpdater=");

        $r11 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$CellLocationUpdater mCellLocationUpdater>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastCellState=");

        $r12 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.CellState mLastCellState>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCollector=");

        $r13 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAlarmInterval=");

        $l1 = $r0.<com.android.server.LocationManagerService: long mAlarmInterval>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mScreenOn=");

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mScreenOn>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWakeLockAcquireTime=");

        $l1 = $r0.<com.android.server.LocationManagerService: long mWakeLockAcquireTime>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeLockGpsReceived=");

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mWakeLockGpsReceived>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWakeLockNetworkReceived=");

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mWakeLockNetworkReceived>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWifiWakeLockAcquired=");

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mWifiWakeLockAcquired>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCellWakeLockAcquired=");

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Listeners:");

        $r14 = $r0.<com.android.server.LocationManagerService: java.util.ArrayList mListeners>;

        $i0 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        $i2 = 0;

     label03:
        if $i2 >= $i0 goto label04;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r14 = $r0.<com.android.server.LocationManagerService: java.util.ArrayList mListeners>;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $i2 = $i2 + 1;

        goto label03;

     label04:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Location Listeners:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label05:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label09;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.util.HashMap) $r15;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r20 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label06:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r15 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r21 = (com.android.server.LocationManagerService$UpdateRecord) $r15;

        virtualinvoke $r21.<com.android.server.LocationManagerService$UpdateRecord: void dump(java.io.PrintWriter,java.lang.String)>($r1, "        ");

        goto label06;

     label07:
        $r22 := @caughtexception;

        exitmonitor $r7;

     label08:
        throw $r22;

     label09:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Last Fix Broadcasts:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastFixBroadcast>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label12;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.util.HashMap) $r15;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r20 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label10;

        $r15 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (android.location.Location) $r15;

        $r24 = new android.util.PrintWriterPrinter;

        specialinvoke $r24.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>($r1);

        virtualinvoke $r23.<android.location.Location: void dump(android.util.Printer,java.lang.String)>($r24, "        ");

        goto label11;

     label12:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Last Status Broadcasts:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastStatusBroadcast>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label15;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r16 = (java.util.HashMap) $r15;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r20 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label14:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r15 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> 0x");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (java.lang.Long) $r15;

        $l1 = virtualinvoke $r25.<java.lang.Long: long longValue()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label14;

     label15:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Records by Provider:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mRecordsByProvider>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (java.util.ArrayList) $r15;

        $r20 = virtualinvoke $r14.<java.util.AbstractList: java.util.Iterator iterator()>();

     label17:
        $z0 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label16;

        $r15 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        $r21 = (com.android.server.LocationManagerService$UpdateRecord) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r21.<com.android.server.LocationManagerService$UpdateRecord: void dump(java.io.PrintWriter,java.lang.String)>($r1, "        ");

        goto label17;

     label18:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Locations by Provider:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationsByProvider>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (android.location.Location) $r15;

        $r24 = new android.util.PrintWriterPrinter;

        specialinvoke $r24.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>($r1);

        virtualinvoke $r23.<android.location.Location: void dump(android.util.Printer,java.lang.String)>($r24, "      ");

        goto label19;

     label20:
        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Last Known Locations:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLastKnownLocation>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label21:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label22;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (android.location.Location) $r15;

        $r24 = new android.util.PrintWriterPrinter;

        specialinvoke $r24.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>($r1);

        virtualinvoke $r23.<android.location.Location: void dump(android.util.Printer,java.lang.String)>($r24, "      ");

        goto label21;

     label22:
        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mProximityAlerts>;

        $i0 = virtualinvoke $r16.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label24;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Proximity Alerts:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mProximityAlerts>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label23:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label24;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (com.android.server.LocationManagerService$ProximityAlert) $r15;

        virtualinvoke $r26.<com.android.server.LocationManagerService$ProximityAlert: void dump(java.io.PrintWriter,java.lang.String)>($r1, "      ");

        goto label23;

     label24:
        $r27 = $r0.<com.android.server.LocationManagerService: java.util.HashSet mProximitiesEntered>;

        $i0 = virtualinvoke $r27.<java.util.HashSet: int size()>();

        if $i0 <= 0 goto label26;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Proximities Entered:");

        $r27 = $r0.<com.android.server.LocationManagerService: java.util.HashSet mProximitiesEntered>;

        $r18 = virtualinvoke $r27.<java.util.HashSet: java.util.Iterator iterator()>();

     label25:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label26;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r26 = (com.android.server.LocationManagerService$ProximityAlert) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r26.<com.android.server.LocationManagerService$ProximityAlert: void dump(java.io.PrintWriter,java.lang.String)>($r1, "      ");

        goto label25;

     label26:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mProximityListener=");

        $r28 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver mProximityListener>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r17 = $r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $i0 = interfaceinvoke $r17.<java.util.Set: int size()>();

        if $i0 <= 0 goto label28;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Enabled Providers:");

        $r17 = $r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label27:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label28;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label27;

     label28:
        $r17 = $r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $i0 = interfaceinvoke $r17.<java.util.Set: int size()>();

        if $i0 <= 0 goto label30;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Disabled Providers:");

        $r17 = $r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label29:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label30;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label29;

     label30:
        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $i0 = virtualinvoke $r16.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label32;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Mock Providers:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviders>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label31:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label32;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label31;

     label32:
        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderLocation>;

        $i0 = virtualinvoke $r16.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label34;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Mock Provider Location:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderLocation>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label33:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label34;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r23 = (android.location.Location) $r15;

        $r24 = new android.util.PrintWriterPrinter;

        specialinvoke $r24.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>($r1);

        virtualinvoke $r23.<android.location.Location: void dump(android.util.Printer,java.lang.String)>($r24, "      ");

        goto label33;

     label34:
        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatus>;

        $i0 = virtualinvoke $r16.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label36;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Mock Provider Status:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatus>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label35:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label36;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> 0x");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r29 = (java.lang.Integer) $r15;

        $i0 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label35;

     label36:
        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusExtras>;

        $i0 = virtualinvoke $r16.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label38;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Mock Provider Status Extras:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusExtras>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label37:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label38;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label37;

     label38:
        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusUpdateTime>;

        $i0 = virtualinvoke $r16.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label40;

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>("  Mock Provider Status Update Time:");

        $r16 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusUpdateTime>;

        $r17 = virtualinvoke $r16.<java.util.HashMap: java.util.Set entrySet()>();

        $r18 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label39:
        $z0 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label40;

        $r15 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        $r19 = (java.util.Map$Entry) $r15;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r15;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -> ");

        $r15 = interfaceinvoke $r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        goto label39;

     label40:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Reported GPS UIDs @ seq ");

        $i0 = $r0.<com.android.server.LocationManagerService: int mReportedGpsSeq>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r30 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i0 = virtualinvoke $r30.<android.util.SparseIntArray: int size()>();

        $i2 = 0;

     label41:
        if $i2 >= $i0 goto label42;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    UID ");

        $r30 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i3 = virtualinvoke $r30.<android.util.SparseIntArray: int keyAt(int)>($i2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" seq=");

        $r30 = $r0.<com.android.server.LocationManagerService: android.util.SparseIntArray mReportedGpsUids>;

        $i3 = virtualinvoke $r30.<android.util.SparseIntArray: int valueAt(int)>($i2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $i2 = $i2 + 1;

        goto label41;

     label42:
        exitmonitor $r7;

     label43:
        return;

        catch java.lang.Throwable from label02 to label08 with label07;
        catch java.lang.Throwable from label09 to label43 with label07;
    }

    public java.util.List getAllProviders()
    {
        com.android.server.LocationManagerService $r0;
        java.util.List $r1;
        java.util.HashMap $r2;
        java.lang.Throwable $r3;
        java.lang.SecurityException $r4;
        java.lang.Exception $r5;

        $r0 := @this: com.android.server.LocationManagerService;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label2:
        $r1 = specialinvoke $r0.<com.android.server.LocationManagerService: java.util.List _getAllProvidersLocked()>();

        exitmonitor $r2;

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        $r4 := @caughtexception;

        throw $r4;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "getAllProviders got exception:", $r5);

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public java.lang.String getFromLocation(double, double, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List)
    {
        com.android.server.LocationManagerService $r0;
        double $d0, $d1;
        int $i0;
        java.lang.String $r1, $r2, $r3, $r4;
        java.util.List $r5;
        java.util.HashMap $r6;
        com.android.internal.location.INetworkLocationProvider $r7;
        java.lang.Throwable $r8;

        $r0 := @this: com.android.server.LocationManagerService;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.lang.String;

        $r2 := @parameter4: java.lang.String;

        $r3 := @parameter5: java.lang.String;

        $r4 := @parameter6: java.lang.String;

        $r5 := @parameter7: java.util.List;

        $r6 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r6;

     label1:
        $r7 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        if $r7 == null goto label3;

        $r7 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        $r1 = interfaceinvoke $r7.<com.android.internal.location.INetworkLocationProvider: java.lang.String getFromLocation(double,double,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($d0, $d1, $i0, $r1, $r2, $r3, $r4, $r5);

        exitmonitor $r6;

     label2:
        return $r1;

     label3:
        exitmonitor $r6;

     label4:
        return null;

     label5:
        $r8 := @caughtexception;

        exitmonitor $r6;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public java.lang.String getFromLocationName(java.lang.String, double, double, double, double, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        double $d0, $d1, $d2, $d3;
        int $i0;
        java.util.List $r6;
        java.util.HashMap $r7;
        com.android.internal.location.INetworkLocationProvider $r8;
        java.lang.Throwable $r9;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        $d1 := @parameter2: double;

        $d2 := @parameter3: double;

        $d3 := @parameter4: double;

        $i0 := @parameter5: int;

        $r2 := @parameter6: java.lang.String;

        $r3 := @parameter7: java.lang.String;

        $r4 := @parameter8: java.lang.String;

        $r5 := @parameter9: java.lang.String;

        $r6 := @parameter10: java.util.List;

        $r7 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r7;

     label1:
        $r8 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        if $r8 == null goto label3;

        $r8 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        $r1 = interfaceinvoke $r8.<com.android.internal.location.INetworkLocationProvider: java.lang.String getFromLocationName(java.lang.String,double,double,double,double,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List)>($r1, $d0, $d1, $d2, $d3, $i0, $r2, $r3, $r4, $r5, $r6);

        exitmonitor $r7;

     label2:
        return $r1;

     label3:
        exitmonitor $r7;

     label4:
        return null;

     label5:
        $r9 := @caughtexception;

        exitmonitor $r7;

     label6:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public android.location.Location getLastKnownLocation(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        android.location.Location $r2;
        java.util.HashMap $r3;
        java.lang.Throwable $r4;
        java.lang.SecurityException $r5;
        java.lang.Exception $r6;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r3;

     label2:
        $r2 = specialinvoke $r0.<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)>($r1);

        exitmonitor $r3;

     label3:
        return $r2;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r4;

     label6:
        $r5 := @caughtexception;

        throw $r5;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "getLastKnownLocation got exception:", $r6);

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public android.os.Bundle getProviderInfo(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        android.os.Bundle $r2;
        java.util.HashMap $r3;
        java.lang.Throwable $r4;
        java.lang.SecurityException $r5;
        java.lang.Exception $r6;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r3;

     label2:
        $r2 = specialinvoke $r0.<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)>($r1);

        exitmonitor $r3;

     label3:
        return $r2;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r4;

     label6:
        $r5 := @caughtexception;

        throw $r5;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "_getProviderInfo got exception:", $r6);

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public java.util.List getProviders(boolean)
    {
        com.android.server.LocationManagerService $r0;
        boolean $z0;
        java.util.List $r1;
        java.util.HashMap $r2;
        java.lang.Throwable $r3;
        java.lang.SecurityException $r4;
        java.lang.Exception $r5;

        $r0 := @this: com.android.server.LocationManagerService;

        $z0 := @parameter0: boolean;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label2:
        $r1 = specialinvoke $r0.<com.android.server.LocationManagerService: java.util.List _getProvidersLocked(boolean)>($z0);

        exitmonitor $r2;

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        $r4 := @caughtexception;

        throw $r4;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "getProviders got exception:", $r5);

        return null;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public boolean isProviderEnabled(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.HashMap $r2;
        java.lang.Throwable $r3;
        java.lang.SecurityException $r4;
        java.lang.Exception $r5;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label2:
        $z0 = specialinvoke $r0.<com.android.server.LocationManagerService: boolean _isProviderEnabledLocked(java.lang.String)>($r1);

        exitmonitor $r2;

     label3:
        return $z0;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        $r4 := @caughtexception;

        throw $r4;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "isProviderEnabled got exception:", $r5);

        return 0;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void removeGpsStatusListener(android.location.IGpsStatusListener)
    {
        com.android.server.LocationManagerService $r0;
        android.location.IGpsStatusListener $r1;
        java.util.HashMap $r2;
        com.android.internal.location.GpsLocationProvider $r3;
        java.lang.Throwable $r4;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: android.location.IGpsStatusListener;

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label1:
        $r3 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        virtualinvoke $r3.<com.android.internal.location.GpsLocationProvider: void removeGpsStatusListener(android.location.IGpsStatusListener)>($r1);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void removeProximityAlert(android.app.PendingIntent)
    {
        com.android.server.LocationManagerService $r0;
        android.app.PendingIntent $r1;
        java.util.HashMap $r2;
        java.lang.Throwable $r3;
        java.lang.SecurityException $r4;
        java.lang.Exception $r5;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: android.app.PendingIntent;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<com.android.server.LocationManagerService: void removeProximityAlertLocked(android.app.PendingIntent)>($r1);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

     label6:
        $r4 := @caughtexception;

        throw $r4;

     label7:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "removeProximityAlert got exception:", $r5);

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void removeTestProvider(java.lang.String)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        java.util.HashMap $r2;
        android.location.LocationProviderImpl $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r3 != null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r6;

     label4:
        staticinvoke <android.location.LocationProviderImpl: void removeProvider(android.location.LocationProviderImpl)>($r3);

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public void removeUpdates(android.location.ILocationListener)
    {
        com.android.server.LocationManagerService $r0;
        android.location.ILocationListener $r1;
        int $i0;
        java.util.HashMap $r2;
        com.android.server.LocationManagerService$Receiver $r3;
        java.lang.Throwable $r4;
        java.lang.SecurityException $r5;
        java.lang.Exception $r6;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: android.location.ILocationListener;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label2:
        $r3 = new com.android.server.LocationManagerService$Receiver;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r3.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,int)>($r0, $r1, $i0);

        specialinvoke $r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r3);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

     label6:
        $r5 := @caughtexception;

        throw $r5;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "removeUpdates got exception:", $r6);

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void removeUpdatesPI(android.app.PendingIntent)
    {
        com.android.server.LocationManagerService $r0;
        android.app.PendingIntent $r1;
        int $i0;
        java.util.HashMap $r2;
        com.android.server.LocationManagerService$Receiver $r3;
        java.lang.Throwable $r4;
        java.lang.SecurityException $r5;
        java.lang.Exception $r6;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: android.app.PendingIntent;

     label1:
        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label2:
        $r3 = new com.android.server.LocationManagerService$Receiver;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r3.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.app.PendingIntent,int)>($r0, $r1, $i0);

        specialinvoke $r0.<com.android.server.LocationManagerService: void removeUpdatesLocked(com.android.server.LocationManagerService$Receiver)>($r3);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

     label6:
        $r5 := @caughtexception;

        throw $r5;

     label7:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "removeUpdates got exception:", $r6);

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void requestLocationUpdates(java.lang.String, long, float, android.location.ILocationListener)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        long $l0;
        float $f0;
        android.location.ILocationListener $r2;
        com.android.server.LocationManagerService$Receiver $r3;
        java.util.HashMap $r4;
        int $i1;
        java.lang.Throwable $r5;
        java.lang.SecurityException $r6;
        java.lang.Exception $r7;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $f0 := @parameter2: float;

        $r2 := @parameter3: android.location.ILocationListener;

     label1:
        $r4 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r4;

     label2:
        $r3 = new com.android.server.LocationManagerService$Receiver;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r3.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener,int)>($r0, $r2, $i1);

        specialinvoke $r0.<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,com.android.server.LocationManagerService$Receiver)>($r1, $l0, $f0, $r3);

        exitmonitor $r4;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r5;

     label6:
        $r6 := @caughtexception;

        throw $r6;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "requestUpdates got exception:", $r7);

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public void requestLocationUpdatesPI(java.lang.String, long, float, android.app.PendingIntent)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        long $l0;
        float $f0;
        android.app.PendingIntent $r2;
        com.android.server.LocationManagerService$Receiver $r3;
        java.util.HashMap $r4;
        int $i1;
        java.lang.Throwable $r5;
        java.lang.SecurityException $r6;
        java.lang.Exception $r7;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $f0 := @parameter2: float;

        $r2 := @parameter3: android.app.PendingIntent;

     label1:
        $r4 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r4;

     label2:
        $r3 = new com.android.server.LocationManagerService$Receiver;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r3.<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.app.PendingIntent,int)>($r0, $r2, $i1);

        specialinvoke $r0.<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,com.android.server.LocationManagerService$Receiver)>($r1, $l0, $f0, $r3);

        exitmonitor $r4;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r4;

     label5:
        throw $r5;

     label6:
        $r6 := @caughtexception;

        throw $r6;

     label7:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationManagerService", "requestUpdates got exception:", $r7);

        return;

        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.SecurityException from label5 to label6 with label6;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1, $r2;
        android.os.Bundle $r3;
        android.content.Context $r4;
        int $i0;
        java.lang.SecurityException $r5;
        java.util.HashMap $r6;
        android.location.LocationProviderImpl $r7;
        boolean $z0;
        java.lang.Throwable $r8;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.os.Bundle;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkPermissionsSafe(java.lang.String)>($r1);

        $r4 = $r0.<com.android.server.LocationManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.ACCESS_LOCATION_EXTRA_COMMANDS");

        if $i0 == 0 goto label1;

        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires ACCESS_LOCATION_EXTRA_COMMANDS permission");

        throw $r5;

     label1:
        $r6 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r6;

     label2:
        $r7 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r1 != null goto label4;

        exitmonitor $r6;

     label3:
        return 0;

     label4:
        $z0 = virtualinvoke $r7.<android.location.LocationProviderImpl: boolean sendExtraCommand(java.lang.String,android.os.Bundle)>($r2, $r3);

        exitmonitor $r6;

     label5:
        return $z0;

     label6:
        $r8 := @caughtexception;

        exitmonitor $r6;

     label7:
        throw $r8;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void setInstallCallback(com.android.internal.location.INetworkLocationManager$InstallCallback)
    {
        com.android.server.LocationManagerService $r0;
        com.android.internal.location.INetworkLocationManager$InstallCallback $r1;
        java.util.HashMap $r2;
        android.os.Message $r3;
        com.android.server.LocationManagerService$LocationWorkerHandler $r4;
        java.lang.Throwable $r5;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: com.android.internal.location.INetworkLocationManager$InstallCallback;

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label1:
        $r4 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(4);

        $r4 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        $r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r4, 4, $r1);

        $r4 = $r0.<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler mLocationHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>($r3);

        exitmonitor $r2;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setLocationCollector(com.android.internal.location.ILocationCollector)
    {
        com.android.server.LocationManagerService $r0;
        com.android.internal.location.ILocationCollector $r1;
        java.util.HashMap $r2;
        com.android.internal.location.GpsLocationProvider $r3;
        java.lang.Throwable $r4;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: com.android.internal.location.ILocationCollector;

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label1:
        $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector> = $r1;

        $r3 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        if $r3 == null goto label2;

        $r3 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.GpsLocationProvider mGpsLocationProvider>;

        $r1 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        virtualinvoke $r3.<com.android.internal.location.GpsLocationProvider: void setLocationCollector(com.android.internal.location.ILocationCollector)>($r1);

     label2:
        exitmonitor $r2;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setNetworkLocationProvider(com.android.internal.location.INetworkLocationProvider)
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap $r1, $r5;
        com.android.internal.location.INetworkLocationProvider $r2;
        java.lang.String[] $r3;
        android.location.LocationProviderImpl $r4;
        int $i0;
        boolean $z0;
        com.android.internal.location.CellState $r6;
        com.android.internal.location.ILocationCollector $r7;
        android.net.wifi.WifiManager $r8;
        java.util.List $r9;
        java.lang.Throwable $r10, $r11;

        $r0 := @this: com.android.server.LocationManagerService;

        $r2 := @parameter0: com.android.internal.location.INetworkLocationProvider;

        $r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r1;

     label01:
        $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface> = $r2;

        $r3 = specialinvoke $r0.<com.android.server.LocationManagerService: java.lang.String[] getPackageNames()>();

        interfaceinvoke $r2.<com.android.internal.location.INetworkLocationProvider: void addListener(java.lang.String[])>($r3);

        $r4 = (android.location.LocationProviderImpl) $r2;

        $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider> = $r4;

        $r4 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        staticinvoke <android.location.LocationProviderImpl: void addProvider(android.location.LocationProviderImpl)>($r4);

        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        $r5 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r5;

     label02:
        $r4 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        $i0 = $r0.<com.android.server.LocationManagerService: int mNetworkState>;

        virtualinvoke $r4.<android.location.LocationProviderImpl: void updateNetworkState(int)>($i0);

        $r2 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mWifiEnabled>;

        interfaceinvoke $r2.<com.android.internal.location.INetworkLocationProvider: void updateWifiEnabledState(boolean)>($z0);

        $r2 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        $z0 = $r0.<com.android.server.LocationManagerService: boolean mCellWakeLockAcquired>;

        interfaceinvoke $r2.<com.android.internal.location.INetworkLocationProvider: void updateCellLockStatus(boolean)>($z0);

        $r6 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.CellState mLastCellState>;

        if $r6 == null goto label04;

        $r7 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        if $r7 == null goto label03;

        $r7 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        $r6 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.CellState mLastCellState>;

        interfaceinvoke $r7.<com.android.internal.location.ILocationCollector: void updateCellState(com.android.internal.location.CellState)>($r6);

     label03:
        $r4 = $r0.<com.android.server.LocationManagerService: android.location.LocationProviderImpl mNetworkLocationProvider>;

        $r6 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.CellState mLastCellState>;

        virtualinvoke $r4.<android.location.LocationProviderImpl: void updateCellState(com.android.internal.location.CellState)>($r6);

     label04:
        $r8 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager mWifiManager>;

        if $r8 == null goto label05;

        $r8 = $r0.<com.android.server.LocationManagerService: android.net.wifi.WifiManager mWifiManager>;

        $r9 = virtualinvoke $r8.<android.net.wifi.WifiManager: java.util.List getScanResults()>();

        if $r9 == null goto label05;

        $i0 = interfaceinvoke $r9.<java.util.List: int size()>();

        if $i0 == 0 goto label05;

        $r2 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.INetworkLocationProvider mNetworkLocationInterface>;

        interfaceinvoke $r2.<com.android.internal.location.INetworkLocationProvider: void updateWifiScanResults(java.util.List)>($r9);

        $r7 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        if $r7 == null goto label05;

        $r7 = $r0.<com.android.server.LocationManagerService: com.android.internal.location.ILocationCollector mCollector>;

        interfaceinvoke $r7.<com.android.internal.location.ILocationCollector: void updateWifiScanResults(java.util.List)>($r9);

     label05:
        exitmonitor $r5;

     label06:
        exitmonitor $r1;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor $r5;

     label10:
        throw $r10;

     label11:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label12 with label11;
    }

    public void setTestProviderEnabled(java.lang.String, boolean)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        boolean $z0;
        java.util.HashMap $r2;
        android.location.LocationProviderImpl $r3;
        java.lang.IllegalArgumentException $r4;
        java.lang.StringBuilder $r5;
        java.lang.Throwable $r6;
        java.util.Set $r7;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r2 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r2;

     label1:
        $r3 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r3 != null goto label4;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label3:
        throw $r6;

     label4:
        if $z0 == 0 goto label8;

     label5:
        $r7 = $r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r1);

        $r7 = $r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>($r1);

     label6:
        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor $r2;

     label7:
        return;

     label8:
        $r7 = $r0.<com.android.server.LocationManagerService: java.util.Set mEnabledProviders>;

        interfaceinvoke $r7.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        $r7 = $r0.<com.android.server.LocationManagerService: java.util.Set mDisabledProviders>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r1);

     label9:
        goto label6;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label5 to label7 with label2;
        catch java.lang.Throwable from label8 to label9 with label2;
    }

    public void setTestProviderLocation(java.lang.String, android.location.Location)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        android.location.Location $r2;
        java.util.HashMap $r3, $r8;
        android.location.LocationProviderImpl $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.location.Location;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r3;

     label1:
        $r4 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r4 != null goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label2:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label3:
        throw $r7;

     label4:
        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderLocation>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        exitmonitor $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long)
    {
        com.android.server.LocationManagerService $r0;
        java.lang.String $r1;
        int $i0;
        android.os.Bundle $r2;
        long $l1;
        java.util.HashMap $r3, $r8;
        android.location.LocationProviderImpl $r4;
        java.lang.IllegalArgumentException $r5;
        java.lang.StringBuilder $r6;
        java.lang.Throwable $r7;
        java.lang.Integer $r9;
        java.lang.Long $r10;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.os.Bundle;

        $l1 := @parameter3: long;

        specialinvoke $r0.<com.android.server.LocationManagerService: void checkMockPermissionsSafe()>();

        $r3 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r3;

     label1:
        $r4 = staticinvoke <android.location.LocationProviderImpl: android.location.LocationProviderImpl getProvider(java.lang.String)>($r1);

        if $r4 != null goto label4;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Provider \"");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" unknown");

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label2:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label3:
        throw $r7;

     label4:
        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatus>;

        $r9 = new java.lang.Integer;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r9);

        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusExtras>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        $r8 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mMockProviderStatusUpdateTime>;

        $r10 = new java.lang.Long;

        specialinvoke $r10.<java.lang.Long: void <init>(long)>($l1);

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r10);

        exitmonitor $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public void updateProviders()
    {
        com.android.server.LocationManagerService $r0;
        java.util.HashMap $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.server.LocationManagerService;

        $r1 = $r0.<com.android.server.LocationManagerService: java.util.HashMap mLocationListeners>;

        entermonitor $r1;

     label1:
        specialinvoke $r0.<com.android.server.LocationManagerService: void updateProvidersLocked()>();

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
