public final class android.test.MoreAsserts extends java.lang.Object
{

    private void <init>()
    {
        android.test.MoreAsserts $r0;

        $r0 := @this: android.test.MoreAsserts;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertAssignableFrom(java.lang.Class, java.lang.Class)
    {
        java.lang.Class $r0, $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Class;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to be assignable from actual class ");

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r3, $z0);

        return;
    }

    public static void assertAssignableFrom(java.lang.Class, java.lang.Object)
    {
        java.lang.Class $r0, $r2;
        java.lang.Object $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <android.test.MoreAsserts: void assertAssignableFrom(java.lang.Class,java.lang.Class)>($r0, $r2);

        return;
    }

    public static java.util.regex.MatchResult assertContainsRegex(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.util.regex.MatchResult $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.test.MoreAsserts: java.util.regex.MatchResult assertContainsRegex(java.lang.String,java.lang.String,java.lang.String)>(null, $r0, $r1);

        return $r2;
    }

    public static java.util.regex.MatchResult assertContainsRegex(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r2 != null goto label1;

        staticinvoke <android.test.MoreAsserts: void failNotContains(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

     label1:
        $r3 = staticinvoke <android.test.MoreAsserts: java.util.regex.Matcher getMatcher(java.lang.String,java.lang.String)>($r1, $r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label2;

        staticinvoke <android.test.MoreAsserts: void failNotContains(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        return $r3;

     label2:
        return $r3;
    }

    public static transient void assertContentsInAnyOrder(java.lang.Iterable, java.lang.Object[])
    {
        java.lang.Iterable $r0;
        java.lang.Object[] $r1;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <android.test.MoreAsserts: void assertContentsInAnyOrder(java.lang.String,java.lang.Iterable,java.lang.Object[])>(null, $r0, $r1);

        return;
    }

    public static transient void assertContentsInAnyOrder(java.lang.String, java.lang.Iterable, java.lang.Object[])
    {
        java.lang.String $r0, $r8;
        java.lang.Iterable $r1;
        java.lang.Object[] $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4, $r6;
        int $i0, $i1;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.StringBuilder $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = new java.util.HashMap;

        $i0 = lengthof $r2;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>($i0);

        $i0 = lengthof $r2;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r4 = $r2[$i1];

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r4);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r5 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r6 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        if $r6 != null goto label3;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extra object in actual: (");

        $r8 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r8);

        goto label3;

     label4:
        $i0 = virtualinvoke $r3.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label5;

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, "Extra objects in expected.");

        return;

     label5:
        return;
    }

    public static transient void assertContentsInOrder(java.lang.Iterable, java.lang.Object[])
    {
        java.lang.Iterable $r0;
        java.lang.Object[] $r1;

        $r0 := @parameter0: java.lang.Iterable;

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <android.test.MoreAsserts: void assertContentsInOrder(java.lang.String,java.lang.Iterable,java.lang.Object[])>(null, $r0, $r1);

        return;
    }

    public static transient void assertContentsInOrder(java.lang.String, java.lang.Iterable, java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Iterable $r1;
        java.lang.Object[] $r2;
        java.util.List $r3;
        java.lang.Iterable[] $r4;
        java.util.ArrayList $r5;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 := @parameter2: java.lang.Object[];

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2);

        $r4 = newarray (java.lang.Iterable)[1];

        $r4[0] = $r1;

        $r5 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r4);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r0, $r3, $r5);

        return;
    }

    public static void assertEmpty(java.lang.Iterable)
    {
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <android.test.MoreAsserts: void assertEmpty(java.lang.String,java.lang.Iterable)>(null, $r0);

        return;
    }

    public static void assertEmpty(java.lang.String, java.lang.Iterable)
    {
        java.lang.String $r0, $r3;
        java.lang.Iterable $r1;
        java.util.Iterator $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failNotEmpty(java.lang.String,java.lang.String)>($r0, $r3);

        return;

     label1:
        return;
    }

    public static void assertEmpty(java.lang.String, java.util.Map)
    {
        java.lang.String $r0, $r2;
        java.util.Map $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Map;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failNotEmpty(java.lang.String,java.lang.String)>($r0, $r2);

        return;

     label1:
        return;
    }

    public static void assertEmpty(java.util.Map)
    {
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <android.test.MoreAsserts: void assertEmpty(java.lang.String,java.util.Map)>(null, $r0);

        return;
    }

    public static void assertEquals(java.lang.String, java.util.Set, java.util.Set)
    {
        java.lang.String $r0, $r7;
        java.util.Set $r1, $r2;
        java.util.HashSet $r3, $r4, $r5;
        int $i0;
        java.lang.StringBuilder $r6;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Set;

        $r2 := @parameter2: java.util.Set;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>($r1);

        interfaceinvoke $r5.<java.util.Set: boolean removeAll(java.util.Collection)>($r2);

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r2);

        interfaceinvoke $r4.<java.util.Set: boolean removeAll(java.util.Collection)>($r1);

        $i0 = interfaceinvoke $r5.<java.util.Set: int size()>();

        if $i0 != 0 goto label1;

        $i0 = interfaceinvoke $r4.<java.util.Set: int size()>();

        if $i0 == 0 goto label2;

     label1:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>(java.util.Collection)>($r1);

        interfaceinvoke $r3.<java.util.Set: boolean retainAll(java.util.Collection)>($r2);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sets do not match.\nOnly in expected: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nOnly in actual: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nIntersection: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r7);

        return;

     label2:
        return;
    }

    public static void assertEquals(java.lang.String, byte[], byte[])
    {
        java.lang.String $r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        byte $b2, $b3;
        java.lang.Byte $r3, $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        staticinvoke <android.test.MoreAsserts: void failWrongLength(java.lang.String,int,int)>($r0, $i0, $i1);

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $b2 = $r1[$i0];

        $b3 = $r2[$i0];

        if $b2 == $b3 goto label3;

        $b2 = $r1[$i0];

        $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        $b2 = $r2[$i0];

        $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b2);

        staticinvoke <android.test.MoreAsserts: void failWrongElement(java.lang.String,int,java.lang.Object,java.lang.Object)>($r0, $i0, $r3, $r4);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return;
    }

    public static void assertEquals(java.lang.String, double[], double[])
    {
        java.lang.String $r0;
        double[] $r1, $r2;
        double $d0, $d1;
        int $i0, $i1;
        byte $b2;
        java.lang.Double $r3, $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: double[];

        $r2 := @parameter2: double[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        staticinvoke <android.test.MoreAsserts: void failWrongLength(java.lang.String,int,int)>($r0, $i0, $i1);

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $d1 = $r1[$i0];

        $d0 = $r2[$i0];

        $b2 = $d1 cmpl $d0;

        if $b2 == 0 goto label3;

        $d0 = $r1[$i0];

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d0 = $r2[$i0];

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        staticinvoke <android.test.MoreAsserts: void failWrongElement(java.lang.String,int,java.lang.Object,java.lang.Object)>($r0, $i0, $r3, $r4);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return;
    }

    public static void assertEquals(java.lang.String, int[], int[])
    {
        java.lang.String $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.Integer $r3, $r4;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: int[];

        $r2 := @parameter2: int[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        staticinvoke <android.test.MoreAsserts: void failWrongLength(java.lang.String,int,int)>($r0, $i0, $i1);

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $i1 = $r1[$i0];

        $i2 = $r2[$i0];

        if $i1 == $i2 goto label3;

        $i1 = $r1[$i0];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $i1 = $r2[$i0];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        staticinvoke <android.test.MoreAsserts: void failWrongElement(java.lang.String,int,java.lang.Object,java.lang.Object)>($r0, $i0, $r3, $r4);

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return;
    }

    public static void assertEquals(java.lang.String, java.lang.Object[], java.lang.Object[])
    {
        java.lang.String $r0;
        java.lang.Object[] $r1, $r2;
        java.lang.Object $r3, $r4;
        boolean $z0;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object[];

        $r2 := @parameter2: java.lang.Object[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        staticinvoke <android.test.MoreAsserts: void failWrongLength(java.lang.String,int,int)>($r0, $i0, $i1);

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label6;

        $r4 = $r1[$i0];

        $r3 = $r2[$i0];

        if $r4 != null goto label4;

        if $r3 != null goto label5;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

     label5:
        staticinvoke <android.test.MoreAsserts: void failWrongElement(java.lang.String,int,java.lang.Object,java.lang.Object)>($r0, $i0, $r4, $r3);

        goto label3;

     label6:
        return;
    }

    public static void assertEquals(java.util.Set, java.util.Set)
    {
        java.util.Set $r0, $r1;

        $r0 := @parameter0: java.util.Set;

        $r1 := @parameter1: java.util.Set;

        staticinvoke <android.test.MoreAsserts: void assertEquals(java.lang.String,java.util.Set,java.util.Set)>(null, $r0, $r1);

        return;
    }

    public static void assertEquals(byte[], byte[])
    {
        byte[] $r0, $r1;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        staticinvoke <android.test.MoreAsserts: void assertEquals(java.lang.String,byte[],byte[])>(null, $r0, $r1);

        return;
    }

    public static void assertEquals(double[], double[])
    {
        double[] $r0, $r1;

        $r0 := @parameter0: double[];

        $r1 := @parameter1: double[];

        staticinvoke <android.test.MoreAsserts: void assertEquals(java.lang.String,double[],double[])>(null, $r0, $r1);

        return;
    }

    public static void assertEquals(int[], int[])
    {
        int[] $r0, $r1;

        $r0 := @parameter0: int[];

        $r1 := @parameter1: int[];

        staticinvoke <android.test.MoreAsserts: void assertEquals(java.lang.String,int[],int[])>(null, $r0, $r1);

        return;
    }

    public static void assertEquals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] $r0, $r1;

        $r0 := @parameter0: java.lang.Object[];

        $r1 := @parameter1: java.lang.Object[];

        staticinvoke <android.test.MoreAsserts: void assertEquals(java.lang.String,java.lang.Object[],java.lang.Object[])>(null, $r0, $r1);

        return;
    }

    public static java.util.regex.MatchResult assertMatchesRegex(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.util.regex.MatchResult $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <android.test.MoreAsserts: java.util.regex.MatchResult assertMatchesRegex(java.lang.String,java.lang.String,java.lang.String)>(null, $r0, $r1);

        return $r2;
    }

    public static java.util.regex.MatchResult assertMatchesRegex(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r2 != null goto label1;

        staticinvoke <android.test.MoreAsserts: void failNotMatches(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

     label1:
        $r3 = staticinvoke <android.test.MoreAsserts: java.util.regex.Matcher getMatcher(java.lang.String,java.lang.String)>($r1, $r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label2;

        staticinvoke <android.test.MoreAsserts: void failNotMatches(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        return $r3;

     label2:
        return $r3;
    }

    public static void assertNotContainsRegex(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <android.test.MoreAsserts: void assertNotContainsRegex(java.lang.String,java.lang.String,java.lang.String)>(null, $r0, $r1);

        return;
    }

    public static void assertNotContainsRegex(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <android.test.MoreAsserts: java.util.regex.Matcher getMatcher(java.lang.String,java.lang.String)>($r1, $r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.test.MoreAsserts: void failContains(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        return;

     label1:
        return;
    }

    public static void assertNotEmpty(java.lang.Iterable)
    {
        java.lang.Iterable $r0;

        $r0 := @parameter0: java.lang.Iterable;

        staticinvoke <android.test.MoreAsserts: void assertNotEmpty(java.lang.String,java.lang.Iterable)>(null, $r0);

        return;
    }

    public static void assertNotEmpty(java.lang.String, java.lang.Iterable)
    {
        java.lang.String $r0;
        java.lang.Iterable $r1;
        java.util.Iterator $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.test.MoreAsserts: void failEmpty(java.lang.String)>($r0);

        return;

     label1:
        return;
    }

    public static void assertNotEmpty(java.lang.String, java.util.Map)
    {
        java.lang.String $r0;
        java.util.Map $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.Map;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.test.MoreAsserts: void failEmpty(java.lang.String)>($r0);

        return;

     label1:
        return;
    }

    public static void assertNotEmpty(java.util.Map)
    {
        java.util.Map $r0;

        $r0 := @parameter0: java.util.Map;

        staticinvoke <android.test.MoreAsserts: void assertNotEmpty(java.lang.String,java.util.Map)>(null, $r0);

        return;
    }

    public static void assertNotEqual(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        staticinvoke <android.test.MoreAsserts: void assertNotEqual(java.lang.String,java.lang.Object,java.lang.Object)>(null, $r0, $r1);

        return;
    }

    public static void assertNotEqual(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0;
        java.lang.Object $r1, $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $z0 = staticinvoke <android.test.MoreAsserts: boolean equal(java.lang.Object,java.lang.Object)>($r1, $r2);

        if $z0 == 0 goto label1;

        staticinvoke <android.test.MoreAsserts: void failEqual(java.lang.String,java.lang.Object)>($r0, $r1);

        return;

     label1:
        return;
    }

    public static void assertNotMatchesRegex(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        staticinvoke <android.test.MoreAsserts: void assertNotMatchesRegex(java.lang.String,java.lang.String,java.lang.String)>(null, $r0, $r1);

        return;
    }

    public static void assertNotMatchesRegex(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.util.regex.Matcher $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <android.test.MoreAsserts: java.util.regex.Matcher getMatcher(java.lang.String,java.lang.String)>($r1, $r2);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.test.MoreAsserts: void failMatch(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2);

        return;

     label1:
        return;
    }

    public static void checkEqualsAndHashCodeMethods(java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        $z0 := @parameter2: boolean;

        staticinvoke <android.test.MoreAsserts: void checkEqualsAndHashCodeMethods(java.lang.String,java.lang.Object,java.lang.Object,boolean)>(null, $r0, $r1, $z0);

        return;
    }

    public static void checkEqualsAndHashCodeMethods(java.lang.String, java.lang.Object, java.lang.Object, boolean)
    {
        java.lang.String $r0, $r3;
        java.lang.Object $r1, $r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 := @parameter2: java.lang.Object;

        $z0 := @parameter3: boolean;

        if $r1 != null goto label1;

        if $r2 != null goto label1;

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("Your check is dubious...why would you expect null != null?", $z0);

        return;

     label1:
        if $r1 == null goto label2;

        if $r2 != null goto label3;

     label2:
        staticinvoke <junit.framework.Assert: void assertFalse(java.lang.String,boolean)>("Your check is dubious...why would you expect an object to be equal to null?", $z0);

     label3:
        if $r1 == null goto label4;

        $z1 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,boolean,boolean)>($r0, $z0, $z1);

     label4:
        if $r2 == null goto label5;

        $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,boolean,boolean)>($r0, $z0, $z1);

     label5:
        if $z0 == 0 goto label9;

        $r3 = "hashCode() values for equal objects should be the same";

        if $r0 == null goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hashCode() values for equal objects should be the same");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        if $i0 != $i1 goto label8;

        $z0 = 1;

     label7:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r3, $z0);

        return;

     label8:
        $z0 = 0;

        goto label7;

     label9:
        return;
    }

    private static boolean equal(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        if $r0 == $r1 goto label1;

        if $r0 == null goto label2;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private static void failContains(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected not to contain regex:<");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:<");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r1);

        return;
    }

    private static void failEmpty(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, "expected not to be empty, but was");

        return;
    }

    private static void failEqual(java.lang.String, java.lang.Object)
    {
        java.lang.String $r0, $r3;
        java.lang.Object $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected not to be:<");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r3);

        return;
    }

    private static void failMatch(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected not to match regex:<");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:<");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r1);

        return;
    }

    private static void failNotContains(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r2 != null goto label2;

        $r2 = "null";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected to contain regex:<");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r1);

        return;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    private static void failNotEmpty(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected to be empty, but contained: <");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r1);

        return;
    }

    private static void failNotMatches(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        if $r2 != null goto label2;

        $r2 = "null";

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected to match regex:<");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r1);

        return;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(60);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    private static void failWithMessage(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label2;

        $r0 = $r1;

     label1:
        staticinvoke <junit.framework.Assert: void fail(java.lang.String)>($r0);

        return;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label1;
    }

    private static void failWrongElement(java.lang.String, int, java.lang.Object, java.lang.Object)
    {
        java.lang.String $r0, $r4;
        int $i0;
        java.lang.Object $r1, $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        $r2 := @parameter3: java.lang.Object;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected array element[");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:<");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:<");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r4);

        return;
    }

    private static void failWrongLength(java.lang.String, int, int)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected array length:<");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> but was:<");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(62);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>($r0, $r2);

        return;
    }

    private static java.util.regex.Matcher getMatcher(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        return $r3;
    }
}
