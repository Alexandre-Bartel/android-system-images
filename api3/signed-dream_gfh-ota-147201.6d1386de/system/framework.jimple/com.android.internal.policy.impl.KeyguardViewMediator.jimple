public class com.android.internal.policy.impl.KeyguardViewMediator extends java.lang.Object implements com.android.internal.policy.impl.KeyguardUpdateMonitor$ConfigurationChangeCallback, com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback, com.android.internal.policy.impl.KeyguardViewCallback
{
    protected static final int AWAKE_INTERVAL_DEFAULT_KEYBOARD_OPEN_MS;
    protected static final int AWAKE_INTERVAL_DEFAULT_MS;
    private static final boolean DBG_WAKE;
    private static final boolean DEBUG;
    private static final java.lang.String DELAYED_KEYGUARD_ACTION;
    private static final int HIDE;
    private static final int KEYGUARD_DELAY_MS;
    private static final int KEYGUARD_DONE;
    private static final int KEYGUARD_DONE_DRAWING;
    private static final int KEYGUARD_DONE_DRAWING_TIMEOUT_MS;
    private static final int NOTIFY_SCREEN_OFF;
    private static final int NOTIFY_SCREEN_ON;
    private static final int RESET;
    private static final int SHOW;
    private static final java.lang.String TAG;
    private static final int TIMEOUT;
    private static final int VERIFY_UNLOCK;
    private static final int WAKE_WHEN_READY;
    private android.app.AlarmManager mAlarmManager;
    private android.content.BroadcastReceiver mBroadCastReceiver;
    private com.android.internal.policy.impl.PhoneWindowManager mCallback;
    private android.content.Context mContext;
    private int mDelayedShowingSequence;
    private android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback;
    private boolean mExternallyEnabled;
    private android.os.Handler mHandler;
    private boolean mKeyboardOpen;
    private com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager;
    private com.android.internal.policy.impl.KeyguardViewProperties mKeyguardViewProperties;
    private boolean mNeedToReshowWhenReenabled;
    private android.os.PowerManager mPM;
    android.os.LocalPowerManager mRealPowerManager;
    private boolean mScreenOn;
    private boolean mShowing;
    private android.app.StatusBarManager mStatusBarManager;
    private boolean mSystemReady;
    private com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor;
    private android.content.Intent mUserPresentIntent;
    private boolean mWaitingUntilKeyguardVisible;
    private android.os.PowerManager$WakeLock mWakeAndHandOff;
    private android.os.PowerManager$WakeLock mWakeLock;
    private int mWakelockSequence;

    public void <init>(android.content.Context, com.android.internal.policy.impl.PhoneWindowManager, android.os.LocalPowerManager)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.content.Context $r1, $r15;
        com.android.internal.policy.impl.PhoneWindowManager $r2;
        android.os.LocalPowerManager $r3;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r4, r24;
        android.content.IntentFilter $r5, r23;
        java.lang.Object $r8;
        android.os.PowerManager $r9;
        android.os.PowerManager$WakeLock $r10;
        android.content.BroadcastReceiver $r11;
        android.app.AlarmManager $r12;
        android.content.ContentResolver $r16;
        android.view.WindowManagerImpl $r18;
        com.android.internal.policy.impl.KeyguardViewProperties $r19;
        com.android.internal.policy.impl.KeyguardViewMediator$1 r21;
        com.android.internal.policy.impl.KeyguardViewMediator$2 r22;
        com.android.internal.widget.LockPatternUtils r25;
        com.android.internal.policy.impl.LockPatternKeyguardViewProperties r26;
        com.android.internal.policy.impl.KeyguardViewManager r27;
        android.content.Intent r28;
        android.view.ViewManager r29;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.android.internal.policy.impl.PhoneWindowManager;

        $r3 := @parameter2: android.os.LocalPowerManager;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mExternallyEnabled> = 1;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mNeedToReshowWhenReenabled> = 0;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mShowing> = 0;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mKeyboardOpen> = 0;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mScreenOn> = 0;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mWaitingUntilKeyguardVisible> = 0;

        r21 = new com.android.internal.policy.impl.KeyguardViewMediator$1;

        specialinvoke r21.<com.android.internal.policy.impl.KeyguardViewMediator$1: void <init>(com.android.internal.policy.impl.KeyguardViewMediator)>($r0);

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.BroadcastReceiver mBroadCastReceiver> = r21;

        r22 = new com.android.internal.policy.impl.KeyguardViewMediator$2;

        specialinvoke r22.<com.android.internal.policy.impl.KeyguardViewMediator$2: void <init>(com.android.internal.policy.impl.KeyguardViewMediator)>($r0);

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler> = r22;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.Context mContext> = $r1;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.LocalPowerManager mRealPowerManager> = $r3;

        $r8 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r9 = (android.os.PowerManager) $r8;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager mPM> = $r9;

        $r9 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager mPM>;

        $r10 = virtualinvoke $r9.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(268435482, "keyguard");

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeLock> = $r10;

        $r10 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r10.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r9 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager mPM>;

        $r10 = virtualinvoke $r9.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "keyguardWakeAndHandOff");

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeAndHandOff> = $r10;

        $r10 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeAndHandOff>;

        virtualinvoke $r10.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        r23 = new android.content.IntentFilter;

        $r5 = r23;

        specialinvoke r23.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD");

        virtualinvoke $r5.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PHONE_STATE");

        $r11 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.BroadcastReceiver mBroadCastReceiver>;

        virtualinvoke $r1.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r11, $r5);

        $r8 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("alarm");

        $r12 = (android.app.AlarmManager) $r8;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.app.AlarmManager mAlarmManager> = $r12;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.PhoneWindowManager mCallback> = $r2;

        r24 = new com.android.internal.policy.impl.KeyguardUpdateMonitor;

        specialinvoke r24.<com.android.internal.policy.impl.KeyguardUpdateMonitor: void <init>(android.content.Context)>($r1);

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor> = r24;

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        virtualinvoke $r4.<com.android.internal.policy.impl.KeyguardUpdateMonitor: void registerConfigurationChangeCallback(com.android.internal.policy.impl.KeyguardUpdateMonitor$ConfigurationChangeCallback)>($r0);

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        virtualinvoke $r4.<com.android.internal.policy.impl.KeyguardUpdateMonitor: void registerSimStateCallback(com.android.internal.policy.impl.KeyguardUpdateMonitor$SimStateCallback)>($r0);

        r26 = new com.android.internal.policy.impl.LockPatternKeyguardViewProperties;

        r25 = new com.android.internal.widget.LockPatternUtils;

        $r15 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.Context mContext>;

        $r16 = virtualinvoke $r15.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        specialinvoke r25.<com.android.internal.widget.LockPatternUtils: void <init>(android.content.ContentResolver)>($r16);

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        specialinvoke r26.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: void <init>(com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardUpdateMonitor)>(r25, $r4);

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewProperties mKeyguardViewProperties> = r26;

        r27 = new com.android.internal.policy.impl.KeyguardViewManager;

        $r18 = staticinvoke <android.view.WindowManagerImpl: android.view.WindowManagerImpl getDefault()>();

        $r19 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewProperties mKeyguardViewProperties>;

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        r29 = (android.view.ViewManager) $r18;

        specialinvoke r27.<com.android.internal.policy.impl.KeyguardViewManager: void <init>(android.content.Context,android.view.ViewManager,com.android.internal.policy.impl.KeyguardViewCallback,com.android.internal.policy.impl.KeyguardViewProperties,com.android.internal.policy.impl.KeyguardUpdateMonitor)>($r1, r29, $r0, $r19, $r4);

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager> = r27;

        r28 = new android.content.Intent;

        specialinvoke r28.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.USER_PRESENT");

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.Intent mUserPresentIntent> = r28;

        return;
    }

    static int access$000(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int i0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        i0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: int mDelayedShowingSequence>;

        return i0;
    }

    static void access$100(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()>();

        return;
    }

    static void access$1000(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleNotifyScreenOn()>();

        return;
    }

    static void access$1100(com.android.internal.policy.impl.KeyguardViewMediator, int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter1: int;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleWakeWhenReady(int)>($i0);

        return;
    }

    static void access$1200(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDone()>();

        return;
    }

    static void access$1300(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleKeyguardDoneDrawing()>();

        return;
    }

    static boolean access$200(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean z0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mScreenOn>;

        return z0;
    }

    static boolean access$300(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean z0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mExternallyEnabled>;

        return z0;
    }

    static void access$400(com.android.internal.policy.impl.KeyguardViewMediator, int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter1: int;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleTimeout(int)>($i0);

        return;
    }

    static void access$500(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleShow()>();

        return;
    }

    static void access$600(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()>();

        return;
    }

    static void access$700(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleReset()>();

        return;
    }

    static void access$800(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleVerifyUnlock()>();

        return;
    }

    static void access$900(com.android.internal.policy.impl.KeyguardViewMediator)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleNotifyScreenOff()>();

        return;
    }

    private void doKeyguard()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0, $z1;
        com.android.internal.policy.impl.KeyguardViewManager $r1;
        java.lang.Throwable $r2;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r3;
        com.android.internal.telephony.SimCard$State $r4, $r5;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label01:
        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mExternallyEnabled>;

        if $z0 != 0 goto label03;

        exitmonitor $r0;

     label02:
        return;

     label03:
        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewManager: boolean isShowing()>();

        if $z0 == 0 goto label07;

        exitmonitor $r0;

     label04:
        return;

     label05:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label06:
        throw $r2;

     label07:
        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $z0 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean isDeviceProvisioned()>();

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r4 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $z1 = virtualinvoke $r4.<com.android.internal.telephony.SimCard$State: boolean isPinLocked()>();

        if $z1 != 0 goto label08;

        $r5 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State ABSENT>;

        if $r4 != $r5 goto label11;

     label08:
        $z1 = 1;

     label09:
        if $z1 != 0 goto label12;

        if $z0 != 0 goto label12;

        exitmonitor $r0;

     label10:
        return;

     label11:
        $z1 = 0;

        goto label09;

     label12:
        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()>();

        exitmonitor $r0;

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label07 to label10 with label05;
        catch java.lang.Throwable from label11 to label13 with label05;
    }

    private void handleHide()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.os.LocalPowerManager $r1;
        com.android.internal.policy.impl.KeyguardViewManager $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.LocalPowerManager mRealPowerManager>;

        interfaceinvoke $r1.<android.os.LocalPowerManager: void enableUserActivity(boolean)>(1);

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardViewManager: void hide()>();

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mShowing> = 0;

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleKeyguardDone()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        long $l0;
        android.os.PowerManager $r1;
        android.os.PowerManager$WakeLock $r2;
        android.content.Context $r3;
        android.content.Intent $r4;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void handleHide()>();

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager mPM>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r1.<android.os.PowerManager: void userActivity(long,boolean)>($l0, 1);

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.Context mContext>;

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.Intent mUserPresentIntent>;

        virtualinvoke $r3.<android.content.Context: void sendBroadcast(android.content.Intent)>($r4);

        return;
    }

    private void handleKeyguardDoneDrawing()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0;
        android.os.Handler $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mWaitingUntilKeyguardVisible>;

        if $z0 == 0 goto label2;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mWaitingUntilKeyguardVisible> = 0;

        virtualinvoke $r0.<java.lang.Object: void notifyAll()>();

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: void removeMessages(int)>(10);

     label2:
        exitmonitor $r0;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void handleNotifyScreenOff()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        com.android.internal.policy.impl.KeyguardViewManager $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewManager: void onScreenTurnedOff()>();

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleNotifyScreenOn()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        com.android.internal.policy.impl.KeyguardViewManager $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewManager: void onScreenTurnedOn()>();

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleReset()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        com.android.internal.policy.impl.KeyguardViewManager $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewManager: void reset()>();

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleShow()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0;
        android.os.LocalPowerManager $r1;
        com.android.internal.policy.impl.PhoneWindowManager $r2;
        com.android.internal.policy.impl.KeyguardViewManager $r3;
        java.lang.Throwable $r4;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mSystemReady>;

        if $z0 != 0 goto label3;

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.LocalPowerManager mRealPowerManager>;

        interfaceinvoke $r1.<android.os.LocalPowerManager: void enableUserActivity(boolean)>(0);

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.PhoneWindowManager mCallback>;

        virtualinvoke $r2.<com.android.internal.policy.impl.PhoneWindowManager: void onKeyguardShow()>();

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardViewManager: void show()>();

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mShowing> = 1;

        exitmonitor $r0;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private void handleTimeout(int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0, $i1;
        android.os.PowerManager$WakeLock $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $i1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: int mWakelockSequence>;

        if $i0 != $i1 goto label2;

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r1.<android.os.PowerManager$WakeLock: void release()>();

     label2:
        exitmonitor $r0;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void handleVerifyUnlock()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        com.android.internal.policy.impl.KeyguardViewManager $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardViewManager: void verifyUnlock()>();

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mShowing> = 1;

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void handleWakeWhenReady(int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        com.android.internal.policy.impl.KeyguardViewManager $r3;
        android.os.PowerManager$WakeLock $r4;
        boolean $z0;
        java.lang.Throwable $r5;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleWakeWhenReady(");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("KeyguardViewMediator", $r2);

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardViewManager: void wakeWhenReadyTq(int)>($i0);

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeAndHandOff>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void release()>();

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r4.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 != 0 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeyguardViewMediator", "mKeyguardViewManager.wakeWhenReadyTq did not poke wake lock");

     label2:
        exitmonitor $r0;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void hideLocked()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.os.Message $r1;
        android.os.Handler $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        $r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r1);

        return;
    }

    private boolean isWakeKeyWhenKeyguardShowing(int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 24: goto label2;
            case 25: goto label2;
            case 27: goto label2;
            case 79: goto label2;
            case 85: goto label2;
            case 86: goto label2;
            case 87: goto label2;
            case 88: goto label2;
            case 89: goto label2;
            case 90: goto label2;
            case 91: goto label2;
            default: goto label1;
        };

     label1:
        return 1;

     label2:
        return 0;
    }

    private void notifyScreenOffLocked()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.os.Handler $r1;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(6);

        return;
    }

    private void notifyScreenOnLocked()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.os.Handler $r1;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(7);

        return;
    }

    private void resetStateLocked()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.os.Message $r1;
        android.os.Handler $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        $r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r1);

        return;
    }

    private void setStatusBarExpandable(boolean)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0;
        java.lang.Object $r1;
        android.app.StatusBarManager $r2;
        android.content.Context $r3;
        byte $b0;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $z0 := @parameter0: boolean;

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.app.StatusBarManager mStatusBarManager>;

        if $r2 != null goto label1;

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.Context mContext>;

        $r1 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("statusbar");

        $r2 = (android.app.StatusBarManager) $r1;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.app.StatusBarManager mStatusBarManager> = $r2;

     label1:
        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.app.StatusBarManager mStatusBarManager>;

        if $z0 == 0 goto label3;

        $b0 = 0;

     label2:
        virtualinvoke $r2.<android.app.StatusBarManager: void disable(int)>($b0);

        return;

     label3:
        $b0 = 1;

        goto label2;
    }

    private void showLocked()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.os.Message $r1;
        android.os.Handler $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        $r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r1);

        return;
    }

    private void verifyUnlockLocked()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.os.Handler $r1;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(5);

        return;
    }

    private void wakeWhenReadyLocked(int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        android.os.PowerManager$WakeLock $r3;
        android.os.Handler $r4;
        android.os.Message $r5;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wakeWhenReadyLocked(");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("KeyguardViewMediator", $r2);

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeAndHandOff>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire()>();

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(8, $i0, 0);

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>($r5);

        return;
    }

    public boolean isInputRestricted()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r1;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mShowing>;

        if $z0 != 0 goto label1;

        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mNeedToReshowWhenReenabled>;

        if $z0 != 0 goto label1;

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean isDeviceProvisioned()>();

        if $z0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isShowing()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean z0;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mShowing>;

        return z0;
    }

    public void keyguardDone(boolean)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0;
        android.os.Message $r1;
        android.os.Handler $r2;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r3;
        android.view.WindowManagerPolicy$OnKeyguardExitResult $r4;
        java.lang.Throwable $r5;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(70000, 2);

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        $r1 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(9);

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r1);

        if $z0 == 0 goto label2;

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: void clearFailedAttempts()>();

     label2:
        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback>;

        if $r4 == null goto label3;

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback>;

        interfaceinvoke $r4.<android.view.WindowManagerPolicy$OnKeyguardExitResult: void onKeyguardExitResult(boolean)>($z0);

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback> = null;

        if $z0 == 0 goto label3;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mExternallyEnabled> = 1;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mNeedToReshowWhenReenabled> = 0;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void setStatusBarExpandable(boolean)>(1);

     label3:
        exitmonitor $r0;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void keyguardDoneDrawing()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.os.Handler $r1;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(10);

        return;
    }

    public void onKeyboardChange(boolean)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardViewProperties $r1;
        com.android.internal.policy.impl.KeyguardViewManager $r2;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $z0 := @parameter0: boolean;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mKeyboardOpen> = $z0;

        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mKeyboardOpen>;

        if $z0 == 0 goto label1;

        $r1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewProperties mKeyguardViewProperties>;

        $z0 = interfaceinvoke $r1.<com.android.internal.policy.impl.KeyguardViewProperties: boolean isSecure()>();

        if $z0 != 0 goto label2;

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardViewManager mKeyguardViewManager>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardViewManager: boolean isShowing()>();

        if $z0 == 0 goto label3;

        virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void keyguardDone(boolean)>(1);

        return;

     label1:
        return;

     label2:
        return;

     label3:
        return;
    }

    public void onOrientationChange(boolean)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $z0 := @parameter0: boolean;

        return;
    }

    public void onScreenTurnedOff(int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0;
        android.content.Intent $r1;
        long $l1;
        android.view.WindowManagerPolicy$OnKeyguardExitResult $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        android.content.Context $r4;
        android.app.PendingIntent $r5;
        android.app.AlarmManager $r6;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label01:
        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mScreenOn> = 0;

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback>;

        if $r2 == null goto label04;

        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback>;

        interfaceinvoke $r2.<android.view.WindowManagerPolicy$OnKeyguardExitResult: void onKeyguardExitResult(boolean)>(0);

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback> = null;

        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mExternallyEnabled>;

        if $z0 != 0 goto label02;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()>();

     label02:
        exitmonitor $r0;

     label03:
        return;

     label04:
        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mShowing>;

        if $z0 == 0 goto label07;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOffLocked()>();

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()>();

        goto label02;

     label05:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label06:
        throw $r3;

     label07:
        if $i0 != 2 goto label09;

     label08:
        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l1 = $l1 + 0L;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD");

        $i0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: int mDelayedShowingSequence>;

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("seq", $i0);

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.content.Context mContext>;

        $r5 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r4, 0, $r1, 268435456);

        $r6 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.app.AlarmManager mAlarmManager>;

        virtualinvoke $r6.<android.app.AlarmManager: void set(int,long,android.app.PendingIntent)>(2, $l1, $r5);

        goto label02;

     label09:
        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()>();

     label10:
        goto label02;

        catch java.lang.Throwable from label01 to label03 with label05;
        catch java.lang.Throwable from label04 to label06 with label05;
        catch java.lang.Throwable from label08 to label10 with label05;
    }

    public void onScreenTurnedOn()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0;
        java.lang.Throwable $r1;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mScreenOn> = 1;

        $i0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: int mDelayedShowingSequence>;

        $i0 = $i0 + 1;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: int mDelayedShowingSequence> = $i0;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void notifyScreenOnLocked()>();

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void onSimStateChanged(com.android.internal.telephony.SimCard$State)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        com.android.internal.telephony.SimCard$State $r1;
        int[] $r2;
        int $i0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r3;
        boolean $z0;
        java.lang.Enum r4;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r1 := @parameter0: com.android.internal.telephony.SimCard$State;

        $r2 = <com.android.internal.policy.impl.KeyguardViewMediator$3: int[] $SwitchMap$com$android$internal$telephony$SimCard$State>;

        r4 = (java.lang.Enum) $r1;

        $i0 = virtualinvoke r4.<java.lang.Enum: int ordinal()>();

        $i0 = $r2[$i0];

        lookupswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label6;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $z0 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean isDeviceProvisioned()>();

        if $z0 != 0 goto label7;

        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isShowing()>();

        if $z0 != 0 goto label3;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()>();

        return;

     label3:
        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()>();

        return;

     label4:
        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isShowing()>();

        if $z0 != 0 goto label5;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()>();

        return;

     label5:
        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()>();

        return;

     label6:
        $z0 = virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isShowing()>();

        if $z0 == 0 goto label8;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()>();

        return;

     label7:
        return;

     label8:
        return;
    }

    public void onSystemReady()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        java.lang.Throwable $r1;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        entermonitor $r0;

     label1:
        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mSystemReady> = 1;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void doKeyguard()>();

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean onWakeKeyWhenKeyguardShowingTq(int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter0: int;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean isWakeKeyWhenKeyguardShowing(int)>($i0);

        if $z0 == 0 goto label1;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void wakeWhenReadyLocked(int)>($i0);

        return 1;

     label1:
        return 0;
    }

    public void pokeWakelock()
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0;
        short $s0;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mKeyboardOpen>;

        if $z0 == 0 goto label2;

        $s0 = 10000;

     label1:
        virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void pokeWakelock(int)>($s0);

        return;

     label2:
        $s0 = 5000;

        goto label1;
    }

    public void pokeWakelock(int)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        android.os.PowerManager$WakeLock $r3;
        android.os.Handler $r4;
        android.os.Message $r5;
        long $l2;
        java.lang.Throwable $r6;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pokeWakelock(");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("KeyguardViewMediator", $r2);

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire()>();

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(1);

        $i1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: int mWakelockSequence>;

        $i1 = $i1 + 1;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: int mWakelockSequence> = $i1;

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        $i1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: int mWakelockSequence>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(1, $i1, 0);

        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        $l2 = (long) $i0;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r5, $l2);

        exitmonitor $r0;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setKeyguardEnabled(boolean)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        boolean $z0, $z1;
        java.lang.InterruptedException $r1;
        java.lang.Thread $r2;
        android.view.WindowManagerPolicy$OnKeyguardExitResult $r3;
        java.lang.Throwable $r4;
        android.os.Handler $r5;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label01:
        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mExternallyEnabled> = $z0;

        if $z0 != 0 goto label08;

        $z1 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mShowing>;

        if $z1 == 0 goto label08;

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback>;

        if $r3 == null goto label03;

        exitmonitor $r0;

     label02:
        return;

     label03:
        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mNeedToReshowWhenReenabled> = 1;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void setStatusBarExpandable(boolean)>(0);

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void hideLocked()>();

     label04:
        exitmonitor $r0;

     label05:
        return;

     label06:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label07:
        throw $r4;

     label08:
        if $z0 == 0 goto label04;

     label09:
        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mNeedToReshowWhenReenabled>;

        if $z0 == 0 goto label04;

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mNeedToReshowWhenReenabled> = 0;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void setStatusBarExpandable(boolean)>(1);

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback>;

        if $r3 == null goto label10;

        $r3 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback>;

        interfaceinvoke $r3.<android.view.WindowManagerPolicy$OnKeyguardExitResult: void onKeyguardExitResult(boolean)>(0);

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback> = null;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void resetStateLocked()>();

        goto label04;

     label10:
        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void showLocked()>();

        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mWaitingUntilKeyguardVisible> = 1;

        $r5 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(10, 2000L);

     label11:
        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mWaitingUntilKeyguardVisible>;

     label12:
        if $z0 == 0 goto label04;

     label13:
        virtualinvoke $r0.<java.lang.Object: void wait()>();

     label14:
        goto label11;

     label15:
        $r1 := @caughtexception;

     label16:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void interrupt()>();

     label17:
        goto label11;

        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label12 with label06;
        catch java.lang.InterruptedException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label06;
        catch java.lang.Throwable from label16 to label17 with label06;
    }

    public void verifyUnlock(android.view.WindowManagerPolicy$OnKeyguardExitResult)
    {
        com.android.internal.policy.impl.KeyguardViewMediator $r0;
        android.view.WindowManagerPolicy$OnKeyguardExitResult $r1, $r4;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.android.internal.policy.impl.KeyguardViewMediator;

        $r1 := @parameter0: android.view.WindowManagerPolicy$OnKeyguardExitResult;

        entermonitor $r0;

     label1:
        $r2 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean isDeviceProvisioned()>();

        if $z0 != 0 goto label4;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy$OnKeyguardExitResult: void onKeyguardExitResult(boolean)>(0);

     label2:
        exitmonitor $r0;

     label3:
        return;

     label4:
        $z0 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: boolean mExternallyEnabled>;

        if $z0 == 0 goto label7;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("KeyguardViewMediator", "verifyUnlock called when not externally disabled");

        interfaceinvoke $r1.<android.view.WindowManagerPolicy$OnKeyguardExitResult: void onKeyguardExitResult(boolean)>(0);

        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r3;

     label7:
        $r4 = $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback>;

        if $r4 == null goto label8;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy$OnKeyguardExitResult: void onKeyguardExitResult(boolean)>(0);

        goto label2;

     label8:
        $r0.<com.android.internal.policy.impl.KeyguardViewMediator: android.view.WindowManagerPolicy$OnKeyguardExitResult mExitSecureCallback> = $r1;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewMediator: void verifyUnlockLocked()>();

     label9:
        goto label2;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
        catch java.lang.Throwable from label7 to label9 with label5;
    }

    public static void <clinit>()
    {
        <com.android.internal.policy.impl.KeyguardViewMediator: int WAKE_WHEN_READY> = 8;

        <com.android.internal.policy.impl.KeyguardViewMediator: int VERIFY_UNLOCK> = 5;

        <com.android.internal.policy.impl.KeyguardViewMediator: int TIMEOUT> = 1;

        <com.android.internal.policy.impl.KeyguardViewMediator: java.lang.String TAG> = "KeyguardViewMediator";

        <com.android.internal.policy.impl.KeyguardViewMediator: int SHOW> = 2;

        <com.android.internal.policy.impl.KeyguardViewMediator: int RESET> = 4;

        <com.android.internal.policy.impl.KeyguardViewMediator: int NOTIFY_SCREEN_ON> = 7;

        <com.android.internal.policy.impl.KeyguardViewMediator: int NOTIFY_SCREEN_OFF> = 6;

        <com.android.internal.policy.impl.KeyguardViewMediator: int KEYGUARD_DONE_DRAWING_TIMEOUT_MS> = 2000;

        <com.android.internal.policy.impl.KeyguardViewMediator: int KEYGUARD_DONE_DRAWING> = 10;

        <com.android.internal.policy.impl.KeyguardViewMediator: int KEYGUARD_DONE> = 9;

        <com.android.internal.policy.impl.KeyguardViewMediator: int KEYGUARD_DELAY_MS> = 0;

        <com.android.internal.policy.impl.KeyguardViewMediator: int HIDE> = 3;

        <com.android.internal.policy.impl.KeyguardViewMediator: java.lang.String DELAYED_KEYGUARD_ACTION> = "com.android.internal.policy.impl.PhoneWindowManager.DELAYED_KEYGUARD";

        <com.android.internal.policy.impl.KeyguardViewMediator: boolean DEBUG> = 0;

        <com.android.internal.policy.impl.KeyguardViewMediator: boolean DBG_WAKE> = 1;

        <com.android.internal.policy.impl.KeyguardViewMediator: int AWAKE_INTERVAL_DEFAULT_MS> = 5000;

        <com.android.internal.policy.impl.KeyguardViewMediator: int AWAKE_INTERVAL_DEFAULT_KEYBOARD_OPEN_MS> = 10000;

        return;
    }
}
