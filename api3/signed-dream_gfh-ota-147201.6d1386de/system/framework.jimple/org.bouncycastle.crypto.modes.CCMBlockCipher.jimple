public class org.bouncycastle.crypto.modes.CCMBlockCipher extends java.lang.Object
{
    private int blockSize;
    private org.bouncycastle.crypto.BlockCipher cipher;
    private boolean forEncryption;
    private byte[] macBlock;
    private org.bouncycastle.crypto.params.CCMParameters params;

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher $r0;
        org.bouncycastle.crypto.BlockCipher $r1;
        int $i0;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher> = null;

        $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher> = $r1;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize> = $i0;

        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r2 = newarray (byte)[$i0];

        $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock> = $r2;

        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        if $i0 == 16 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cipher required with a block size of 16.");

        throw $r3;

     label1:
        return;
    }

    private boolean areEqual(byte[], byte[])
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher $r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        byte $b2, $b3;

        $r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r2;

        if $i0 == $i1 goto label4;

        $b2 = $r1[$i0];

        $b3 = $r2[$i0];

        if $b2 == $b3 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 1;
    }

    private int calculateMac(byte[], int, int, byte[])
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher $r0;
        byte[] $r1, $r2, $r3, $r7, $r8;
        int $i0, $i1, $i2, $i4, $i5, $i6;
        org.bouncycastle.crypto.macs.CBCBlockCipherMac $r4;
        org.bouncycastle.crypto.BlockCipher $r5;
        org.bouncycastle.crypto.params.CCMParameters $r6;
        org.bouncycastle.crypto.params.KeyParameter $r9;
        byte $b3;

        $r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $r4 = new org.bouncycastle.crypto.macs.CBCBlockCipherMac;

        $r5 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r6 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        $i2 = virtualinvoke $r6.<org.bouncycastle.crypto.params.CCMParameters: int getMacSize()>();

        specialinvoke $r4.<org.bouncycastle.crypto.macs.CBCBlockCipherMac: void <init>(org.bouncycastle.crypto.BlockCipher,int)>($r5, $i2);

        $r6 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        $r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.CCMParameters: byte[] getNonce()>();

        $r6 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        $r8 = virtualinvoke $r6.<org.bouncycastle.crypto.params.CCMParameters: byte[] getAssociatedText()>();

        $r6 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        $r9 = virtualinvoke $r6.<org.bouncycastle.crypto.params.CCMParameters: org.bouncycastle.crypto.params.KeyParameter getKey()>();

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>($r9);

        $r3 = newarray (byte)[16];

        if $r8 == null goto label1;

        $i2 = lengthof $r8;

        if $i2 == 0 goto label1;

        $b3 = $r3[0];

        $b3 = $b3 | 64;

        $b3 = (byte) $b3;

        $r3[0] = $b3;

     label1:
        $b3 = $r3[0];

        $i2 = interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $i2 = $i2 - 2;

        $i2 = $i2 / 2;

        $i2 = $i2 & 7;

        $i2 = $i2 << 3;

        $i2 = $b3 | $i2;

        $b3 = (byte) $i2;

        $r3[0] = $b3;

        $b3 = $r3[0];

        $i2 = lengthof $r7;

        $i2 = 15 - $i2;

        $i2 = $i2 - 1;

        $i2 = $i2 & 7;

        $i2 = $b3 | $i2;

        $b3 = (byte) $i2;

        $r3[0] = $b3;

        $i2 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r3, 1, $i2);

        $i2 = $i1;

        $i4 = 1;

     label2:
        if $i2 <= 0 goto label3;

        $i5 = lengthof $r3;

        $i5 = $i5 - $i4;

        $i6 = $i2 & 255;

        $b3 = (byte) $i6;

        $r3[$i5] = $b3;

        $i2 = $i2 >>> 8;

        $i4 = $i4 + 1;

        goto label2;

     label3:
        $i2 = lengthof $r3;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r3, 0, $i2);

        if $r8 == null goto label7;

        $i2 = lengthof $r8;

        if $i2 >= 65280 goto label6;

        $i2 = lengthof $r8;

        $i2 = $i2 >> 8;

        $b3 = (byte) $i2;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>($b3);

        $i2 = lengthof $r8;

        $b3 = (byte) $i2;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>($b3);

        $b3 = 2;

     label4:
        $i2 = lengthof $r8;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r8, 0, $i2);

        $i2 = lengthof $r8;

        $i2 = $i2 + $b3;

        $i2 = $i2 % 16;

        if $i2 == 0 goto label7;

        $i4 = 0;

     label5:
        $i5 = 16 - $i2;

        if $i4 == $i5 goto label7;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>(0);

        $i4 = $i4 + 1;

        goto label5;

     label6:
        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>(-1);

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>(-2);

        $i2 = lengthof $r8;

        $i2 = $i2 >> 24;

        $b3 = (byte) $i2;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>($b3);

        $i2 = lengthof $r8;

        $i2 = $i2 >> 16;

        $b3 = (byte) $i2;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>($b3);

        $i2 = lengthof $r8;

        $i2 = $i2 >> 8;

        $b3 = (byte) $i2;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>($b3);

        $i2 = lengthof $r8;

        $b3 = (byte) $i2;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte)>($b3);

        $b3 = 6;

        goto label4;

     label7:
        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r1, $i0, $i1);

        $i0 = interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>($r2, 0);

        return $i0;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher $r0;
        java.lang.StringBuilder $r1;
        org.bouncycastle.crypto.BlockCipher $r2;
        java.lang.String $r3;

        $r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r3 = interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/CCM");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public byte[] getMac()
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher $r0;
        byte[] $r1, $r3;
        int $i0;
        org.bouncycastle.crypto.params.CCMParameters $r2;

        $r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r2 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        $i0 = virtualinvoke $r2.<org.bouncycastle.crypto.params.CCMParameters: int getMacSize()>();

        $i0 = $i0 / 8;

        $r1 = newarray (byte)[$i0];

        $r3 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i0);

        return $r1;
    }

    public org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher $r0;
        org.bouncycastle.crypto.BlockCipher r1;

        $r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        r1 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        return r1;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher $r0;
        boolean $z0, $z1;
        org.bouncycastle.crypto.CipherParameters $r1;
        java.lang.IllegalArgumentException $r2;
        org.bouncycastle.crypto.params.CCMParameters $r3;

        $r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z1 = $r1 instanceof org.bouncycastle.crypto.params.CCMParameters;

        if $z1 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parameters need to be CCMParameters");

        throw $r2;

     label1:
        $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean forEncryption> = $z0;

        $r3 = (org.bouncycastle.crypto.params.CCMParameters) $r1;

        $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params> = $r3;

        return;
    }

    public byte[] processPacket(byte[], int, int) throws java.lang.IllegalStateException, org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.modes.CCMBlockCipher $r0;
        byte[] $r1, $r3, $r7, $r10;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        org.bouncycastle.crypto.modes.SICBlockCipher $r2;
        org.bouncycastle.crypto.params.CCMParameters $r4;
        java.lang.IllegalStateException $r5;
        org.bouncycastle.crypto.BlockCipher $r6;
        byte $b4;
        boolean $z0;
        org.bouncycastle.crypto.params.ParametersWithIV $r8;
        org.bouncycastle.crypto.params.KeyParameter $r9;
        org.bouncycastle.crypto.InvalidCipherTextException $r11;

        $r0 := @this: org.bouncycastle.crypto.modes.CCMBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r4 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        if $r4 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CCM cipher unitialized.");

        throw $r5;

     label1:
        $r2 = new org.bouncycastle.crypto.modes.SICBlockCipher;

        $r6 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        specialinvoke $r2.<org.bouncycastle.crypto.modes.SICBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>($r6);

        $i3 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r3 = newarray (byte)[$i3];

        $r4 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        $r7 = virtualinvoke $r4.<org.bouncycastle.crypto.params.CCMParameters: byte[] getNonce()>();

        $r4 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        $i3 = virtualinvoke $r4.<org.bouncycastle.crypto.params.CCMParameters: int getMacSize()>();

        $i2 = $i3 / 8;

        $i3 = lengthof $r7;

        $i3 = 15 - $i3;

        $i3 = $i3 - 1;

        $i3 = $i3 & 7;

        $b4 = (byte) $i3;

        $r3[0] = $b4;

        $i3 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r3, 1, $i3);

        $z0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        $r8 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r4 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: org.bouncycastle.crypto.params.CCMParameters params>;

        $r9 = virtualinvoke $r4.<org.bouncycastle.crypto.params.CCMParameters: org.bouncycastle.crypto.params.KeyParameter getKey()>();

        specialinvoke $r8.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r9, $r3);

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>($z0, $r8);

        $z0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label4;

        $i5 = $i0;

        $i3 = 0;

        $i2 = $i1 + $i2;

        $r3 = newarray (byte)[$i2];

        $r7 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        specialinvoke $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int calculateMac(byte[],int,int,byte[])>($r1, $i0, $i1, $r7);

        $r7 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $r10 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, $r10, 0);

     label2:
        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i0 = $i1 - $i0;

        if $i5 >= $i0 goto label3;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, $i5, $r3, $i3);

        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i3 = $i3 + $i0;

        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i5 = $i5 + $i0;

        goto label2;

     label3:
        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r7 = newarray (byte)[$i0];

        $i0 = $i1 - $i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i5, $r7, 0, $i0);

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, $r7, 0);

        $i0 = $i1 - $i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r3, $i3, $i0);

        $i0 = $i1 - $i5;

        $i0 = $i3 + $i0;

        $r1 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i1 = lengthof $r3;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r3, $i0, $i1);

        return $r3;

     label4:
        $i5 = $i0;

        $i3 = 0;

        $i6 = $i1 - $i2;

        $r3 = newarray (byte)[$i6];

        $i0 = $i0 + $i1;

        $i0 = $i0 - $i2;

        $r7 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r7, 0, $i2);

        $r7 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $r10 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, $r10, 0);

        $i0 = $i2;

     label5:
        $r7 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $i1 = lengthof $r7;

        if $i0 == $i1 goto label6;

        $r7 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $r7[$i0] = 0;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $i0 = lengthof $r3;

        $i1 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i0 = $i0 - $i1;

        if $i3 >= $i0 goto label7;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, $i5, $r3, $i3);

        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i3 = $i3 + $i0;

        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $i5 = $i5 + $i0;

        goto label6;

     label7:
        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r7 = newarray (byte)[$i0];

        $i0 = lengthof $r3;

        $i0 = $i0 - $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i5, $r7, 0, $i0);

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, $r7, 0);

        $i0 = lengthof $r3;

        $i0 = $i0 - $i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r3, $i3, $i0);

        $i0 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int blockSize>;

        $r1 = newarray (byte)[$i0];

        $i0 = lengthof $r3;

        specialinvoke $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: int calculateMac(byte[],int,int,byte[])>($r3, 0, $i0, $r1);

        $r7 = $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: byte[] macBlock>;

        $z0 = specialinvoke $r0.<org.bouncycastle.crypto.modes.CCMBlockCipher: boolean areEqual(byte[],byte[])>($r7, $r1);

        if $z0 != 0 goto label8;

        $r11 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r11.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("mac check in CCM failed");

        throw $r11;

     label8:
        return $r3;
    }
}
