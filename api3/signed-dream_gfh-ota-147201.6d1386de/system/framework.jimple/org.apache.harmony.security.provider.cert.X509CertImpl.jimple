public class org.apache.harmony.security.provider.cert.X509CertImpl extends java.security.cert.X509Certificate
{
    private static final long serialVersionUID;
    private final org.apache.harmony.security.x509.Certificate certificate;
    private byte[] encoding;
    private final org.apache.harmony.security.x509.Extensions extensions;
    private javax.security.auth.x500.X500Principal issuer;
    private long notAfter;
    private long notBefore;
    private boolean nullSigAlgParams;
    private java.security.PublicKey publicKey;
    private java.math.BigInteger serialNumber;
    private java.lang.String sigAlgName;
    private java.lang.String sigAlgOID;
    private byte[] sigAlgParams;
    private byte[] signature;
    private javax.security.auth.x500.X500Principal subject;
    private final org.apache.harmony.security.x509.TBSCertificate tbsCert;
    private byte[] tbsCertificate;

    public void <init>(java.io.InputStream) throws java.security.cert.CertificateException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.io.InputStream $r1;
        org.apache.harmony.security.asn1.ASN1Sequence $r2;
        java.lang.Object $r3;
        org.apache.harmony.security.x509.Certificate $r4;
        org.apache.harmony.security.x509.TBSCertificate $r5;
        org.apache.harmony.security.x509.Extensions $r6;
        java.io.IOException $r7;
        java.security.cert.CertificateException $r8;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 := @parameter0: java.io.InputStream;

        specialinvoke $r0.<java.security.cert.X509Certificate: void <init>()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = -1L;

        $r2 = <org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(java.io.InputStream)>($r1);

     label2:
        $r4 = (org.apache.harmony.security.x509.Certificate) $r3;

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate> = $r4;

     label3:
        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.x509.TBSCertificate getTbsCertificate()>();

     label4:
        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert> = $r5;

     label5:
        $r5 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r6 = virtualinvoke $r5.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Extensions getExtensions()>();

     label6:
        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions> = $r6;

        return;

     label7:
        $r7 := @caughtexception;

        $r8 = new java.security.cert.CertificateException;

        specialinvoke $r8.<java.security.cert.CertificateException: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

        catch java.io.IOException from label1 to label2 with label7;
        catch java.io.IOException from label3 to label4 with label7;
        catch java.io.IOException from label5 to label6 with label7;
    }

    public void <init>(org.apache.harmony.security.x509.Certificate)
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        org.apache.harmony.security.x509.Certificate $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x509.Extensions $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 := @parameter0: org.apache.harmony.security.x509.Certificate;

        specialinvoke $r0.<java.security.cert.X509Certificate: void <init>()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = -1L;

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate> = $r1;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.x509.TBSCertificate getTbsCertificate()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert> = $r2;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Extensions getExtensions()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions> = $r3;

        return;
    }

    public void <init>(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        byte[] $r1;
        java.lang.Object $r2;
        org.apache.harmony.security.asn1.ASN1Sequence $r3;
        org.apache.harmony.security.x509.Certificate $r4;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 := @parameter0: byte[];

        $r3 = <org.apache.harmony.security.x509.Certificate: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r2 = virtualinvoke $r3.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>($r1);

        $r4 = (org.apache.harmony.security.x509.Certificate) $r2;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(org.apache.harmony.security.x509.Certificate)>($r4);

        return;
    }

    private void fastVerify(java.security.PublicKey) throws java.security.SignatureException, java.security.InvalidKeyException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.security.PublicKey $r1;
        boolean $z0;
        java.security.InvalidKeyException $r2;
        java.lang.String $r3, $r6;
        java.security.interfaces.RSAPublicKey $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        byte[] $r7, $r10;
        org.apache.harmony.security.x509.TBSCertificate $r8;
        org.apache.harmony.security.x509.Certificate $r9;
        java.security.SignatureException $r11;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 := @parameter0: java.security.PublicKey;

        $z0 = $r1 instanceof java.security.interfaces.RSAPublicKey;

        if $z0 != 0 goto label1;

        $r2 = new java.security.InvalidKeyException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.15C1");

        specialinvoke $r2.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r4 = (java.security.interfaces.RSAPublicKey) $r1;

        $r3 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>("with");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $i1 = $i0 + 4;

        $r6 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        if $r7 != null goto label2;

        $r8 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r7 = virtualinvoke $r8.<org.apache.harmony.security.x509.TBSCertificate: byte[] getEncoded()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate> = $r7;

     label2:
        $r9 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r7 = virtualinvoke $r9.<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()>();

        $r10 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        $z0 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: boolean verifySignature(byte[],byte[],java.lang.String,java.security.interfaces.RSAPublicKey)>($r10, $r7, $r3, $r4);

        if $z0 != 0 goto label3;

        $r11 = new java.security.SignatureException;

        $r3 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.15C");

        specialinvoke $r11.<java.security.SignatureException: void <init>(java.lang.String)>($r3);

        throw $r11;

     label3:
        return;
    }

    public void checkValidity() throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        long $l0, $l2;
        byte $b1;
        org.apache.harmony.security.x509.TBSCertificate $r1;
        org.apache.harmony.security.x509.Validity $r2;
        java.util.Date $r3;
        java.security.cert.CertificateNotYetValidException $r4;
        java.security.cert.CertificateExpiredException $r5;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $l0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Validity: java.util.Date getNotBefore()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = $l0;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Validity: java.util.Date getNotAfter()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter> = $l0;

     label1:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        $b1 = $l0 cmp $l2;

        if $b1 >= 0 goto label2;

        $r4 = new java.security.cert.CertificateNotYetValidException;

        specialinvoke $r4.<java.security.cert.CertificateNotYetValidException: void <init>()>();

        throw $r4;

     label2:
        $l2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter>;

        $b1 = $l0 cmp $l2;

        if $b1 <= 0 goto label3;

        $r5 = new java.security.cert.CertificateExpiredException;

        specialinvoke $r5.<java.security.cert.CertificateExpiredException: void <init>()>();

        throw $r5;

     label3:
        return;
    }

    public void checkValidity(java.util.Date) throws java.security.cert.CertificateExpiredException, java.security.cert.CertificateNotYetValidException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.util.Date $r1, $r4;
        long $l0, $l2;
        byte $b1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x509.Validity $r3;
        java.security.cert.CertificateNotYetValidException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.security.cert.CertificateExpiredException $r8;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 := @parameter0: java.util.Date;

        $l0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.Validity: java.util.Date getNotBefore()>();

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = $l0;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.Validity: java.util.Date getNotAfter()>();

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter> = $l0;

     label1:
        $l0 = virtualinvoke $r1.<java.util.Date: long getTime()>();

        $l2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        $b1 = $l0 cmp $l2;

        if $b1 >= 0 goto label2;

        $r5 = new java.security.cert.CertificateNotYetValidException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current time: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", validation time: ");

        $r1 = new java.util.Date;

        $l0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.security.cert.CertificateNotYetValidException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label2:
        $l2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter>;

        $b1 = $l0 cmp $l2;

        if $b1 <= 0 goto label3;

        $r8 = new java.security.cert.CertificateExpiredException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current time: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", expiration time: ");

        $r1 = new java.util.Date;

        $l0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter>;

        specialinvoke $r1.<java.util.Date: void <init>(long)>($l0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.security.cert.CertificateExpiredException: void <init>(java.lang.String)>($r7);

        throw $r8;

     label3:
        return;
    }

    public int getBasicConstraints()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        int $i0;
        org.apache.harmony.security.x509.Extensions $r1;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return 2147483647;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.security.x509.Extensions: int valueOfBasicConstrains()>();

        return $i0;
    }

    public java.util.Set getCriticalExtensionOIDs()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.util.Set $r1;
        org.apache.harmony.security.x509.Extensions $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.Set getCriticalExtensions()>();

        return $r1;
    }

    public byte[] getEncoded() throws java.security.cert.CertificateEncodingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        byte[] $r1, $r3, $r4;
        org.apache.harmony.security.x509.Certificate $r2;
        int $i0;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] encoding>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Certificate: byte[] getEncoded()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] encoding> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] encoding>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] encoding>;

        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] encoding>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i0);

        return $r1;
    }

    public java.util.List getExtendedKeyUsage() throws java.security.cert.CertificateParsingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.util.List $r1;
        org.apache.harmony.security.x509.Extensions $r2;
        java.io.IOException $r3;
        java.security.cert.CertificateParsingException $r4;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

     label2:
        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.List valueOfExtendedKeyUsage()>();

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.security.cert.CertificateParsingException;

        specialinvoke $r4.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public byte[] getExtensionValue(java.lang.String)
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.Extensions $r2;
        org.apache.harmony.security.x509.Extension $r3;
        byte[] $r4;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: org.apache.harmony.security.x509.Extension getExtensionByOID(java.lang.String)>($r1);

        if $r3 != null goto label2;

        return null;

     label2:
        $r4 = virtualinvoke $r3.<org.apache.harmony.security.x509.Extension: byte[] getRawExtnValue()>();

        return $r4;
    }

    public java.util.Collection getIssuerAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.util.List $r1;
        org.apache.harmony.security.x509.Extensions $r2;
        java.io.IOException $r3;
        java.security.cert.CertificateParsingException $r4;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

     label2:
        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.List valueOfIssuerAlternativeName()>();

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.security.cert.CertificateParsingException;

        specialinvoke $r4.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public java.security.Principal getIssuerDN()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x501.Name $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal issuer>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getIssuer()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal issuer> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal issuer>;

        return $r1;
    }

    public boolean[] getIssuerUniqueID()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        boolean[] $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: boolean[] getIssuerUniqueID()>();

        return $r1;
    }

    public javax.security.auth.x500.X500Principal getIssuerX500Principal()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x501.Name $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal issuer>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getIssuer()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal issuer> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal issuer>;

        return $r1;
    }

    public boolean[] getKeyUsage()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        boolean[] $r1;
        org.apache.harmony.security.x509.Extensions $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: boolean[] valueOfKeyUsage()>();

        return $r1;
    }

    public java.util.Set getNonCriticalExtensionOIDs()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.util.Set $r1;
        org.apache.harmony.security.x509.Extensions $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.Set getNonCriticalExtensions()>();

        return $r1;
    }

    public java.util.Date getNotAfter()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        long $l0;
        byte $b1;
        org.apache.harmony.security.x509.TBSCertificate $r1;
        org.apache.harmony.security.x509.Validity $r2;
        java.util.Date $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $l0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Validity: java.util.Date getNotBefore()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = $l0;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Validity: java.util.Date getNotAfter()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter> = $l0;

     label1:
        $r3 = new java.util.Date;

        $l0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter>;

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l0);

        return $r3;
    }

    public java.util.Date getNotBefore()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        long $l0;
        byte $b1;
        org.apache.harmony.security.x509.TBSCertificate $r1;
        org.apache.harmony.security.x509.Validity $r2;
        java.util.Date $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $l0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Validity: java.util.Date getNotBefore()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore> = $l0;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.Validity getValidity()>();

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.Validity: java.util.Date getNotAfter()>();

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notAfter> = $l0;

     label1:
        $r3 = new java.util.Date;

        $l0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: long notBefore>;

        specialinvoke $r3.<java.util.Date: void <init>(long)>($l0);

        return $r3;
    }

    public java.security.PublicKey getPublicKey()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.security.PublicKey $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x509.SubjectPublicKeyInfo $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.PublicKey publicKey>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.SubjectPublicKeyInfo getSubjectPublicKeyInfo()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.SubjectPublicKeyInfo: java.security.PublicKey getPublicKey()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.PublicKey publicKey> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.security.PublicKey publicKey>;

        return $r1;
    }

    public java.math.BigInteger getSerialNumber()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.math.BigInteger $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.math.BigInteger serialNumber>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: java.math.BigInteger getSerialNumber()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.math.BigInteger serialNumber> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.math.BigInteger serialNumber>;

        return $r1;
    }

    public java.lang.String getSigAlgName()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID>;

        $r1 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r1);

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName>;

        if $r1 != null goto label1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID>;

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName>;

        return $r1;
    }

    public java.lang.String getSigAlgOID()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: java.lang.String getAlgorithm()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID>;

        $r1 = staticinvoke <org.apache.harmony.security.utils.AlgNameMapper: java.lang.String map2AlgName(java.lang.String)>($r1);

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName>;

        if $r1 != null goto label1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID>;

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgName> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String sigAlgOID>;

        return $r1;
    }

    public byte[] getSigAlgParams()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        boolean $z0;
        byte[] $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x509.AlgorithmIdentifier $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $z0 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: boolean nullSigAlgParams>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] sigAlgParams>;

        if $r1 != null goto label2;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x509.AlgorithmIdentifier getSignature()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x509.AlgorithmIdentifier: byte[] getParameters()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] sigAlgParams> = $r1;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] sigAlgParams>;

        if $r1 != null goto label2;

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: boolean nullSigAlgParams> = 1;

        return null;

     label2:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] sigAlgParams>;

        return $r1;
    }

    public byte[] getSignature()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        byte[] $r1, $r3, $r4;
        org.apache.harmony.security.x509.Certificate $r2;
        int $i0;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] signature>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] signature> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] signature>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] signature>;

        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] signature>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i0);

        return $r1;
    }

    public java.util.Collection getSubjectAlternativeNames() throws java.security.cert.CertificateParsingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.util.List $r1;
        org.apache.harmony.security.x509.Extensions $r2;
        java.io.IOException $r3;
        java.security.cert.CertificateParsingException $r4;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

     label2:
        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Extensions: java.util.List valueOfSubjectAlternativeName()>();

     label3:
        return $r1;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.security.cert.CertificateParsingException;

        specialinvoke $r4.<java.security.cert.CertificateParsingException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public java.security.Principal getSubjectDN()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x501.Name $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal subject>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getSubject()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal subject> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal subject>;

        return $r1;
    }

    public boolean[] getSubjectUniqueID()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        boolean[] $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: boolean[] getSubjectUniqueID()>();

        return $r1;
    }

    public javax.security.auth.x500.X500Principal getSubjectX500Principal()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        org.apache.harmony.security.x501.Name $r3;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal subject>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: org.apache.harmony.security.x501.Name getSubject()>();

        $r1 = virtualinvoke $r3.<org.apache.harmony.security.x501.Name: javax.security.auth.x500.X500Principal getX500Principal()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal subject> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: javax.security.auth.x500.X500Principal subject>;

        return $r1;
    }

    public byte[] getTBSCertificate() throws java.security.cert.CertificateEncodingException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        byte[] $r1, $r3, $r4;
        org.apache.harmony.security.x509.TBSCertificate $r2;
        int $i0;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.TBSCertificate: byte[] getEncoded()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        $i0 = lengthof $r1;

        $r1 = newarray (byte)[$i0];

        $r3 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i0);

        return $r1;
    }

    public int getVersion()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        int $i0;
        org.apache.harmony.security.x509.TBSCertificate $r1;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.security.x509.TBSCertificate: int getVersion()>();

        $i0 = $i0 + 1;

        return $i0;
    }

    public boolean hasUnsupportedCriticalExtension()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        boolean $z0;
        org.apache.harmony.security.x509.Extensions $r1;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r1 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Extensions extensions>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.security.x509.Extensions: boolean hasUnsupportedCritical()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.Certificate $r2;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r2 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.x509.Certificate: java.lang.String toString()>();

        return $r1;
    }

    public void verify(java.security.PublicKey) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.security.PublicKey $r1;
        java.lang.String $r2;
        boolean $z0;
        java.security.Signature $r3;
        byte[] $r4, $r6;
        org.apache.harmony.security.x509.TBSCertificate $r5;
        int $i0;
        org.apache.harmony.security.x509.Certificate $r7;
        java.security.SignatureException $r8;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 := @parameter0: java.security.PublicKey;

        $r2 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("withRSA");

        if $z0 == 0 goto label1;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: void fastVerify(java.security.PublicKey)>($r1);

        return;

     label1:
        $r2 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()>();

        $r3 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String)>($r2);

        virtualinvoke $r3.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1);

        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        if $r4 != null goto label2;

        $r5 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r4 = virtualinvoke $r5.<org.apache.harmony.security.x509.TBSCertificate: byte[] getEncoded()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate> = $r4;

     label2:
        $r4 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        $r6 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        $i0 = lengthof $r6;

        virtualinvoke $r3.<java.security.Signature: void update(byte[],int,int)>($r4, 0, $i0);

        $r7 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r4 = virtualinvoke $r7.<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()>();

        $z0 = virtualinvoke $r3.<java.security.Signature: boolean verify(byte[])>($r4);

        if $z0 != 0 goto label3;

        $r8 = new java.security.SignatureException;

        $r2 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.15C");

        specialinvoke $r8.<java.security.SignatureException: void <init>(java.lang.String)>($r2);

        throw $r8;

     label3:
        return;
    }

    public void verify(java.security.PublicKey, java.lang.String) throws java.security.cert.CertificateException, java.security.NoSuchAlgorithmException, java.security.InvalidKeyException, java.security.NoSuchProviderException, java.security.SignatureException
    {
        org.apache.harmony.security.provider.cert.X509CertImpl $r0;
        java.security.PublicKey $r1;
        java.lang.String $r2, $r3;
        boolean $z0;
        java.security.Signature $r4;
        byte[] $r5, $r7;
        org.apache.harmony.security.x509.TBSCertificate $r6;
        int $i0;
        org.apache.harmony.security.x509.Certificate $r8;
        java.security.SignatureException $r9;

        $r0 := @this: org.apache.harmony.security.provider.cert.X509CertImpl;

        $r1 := @parameter0: java.security.PublicKey;

        $r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>("withRSA");

        if $z0 == 0 goto label1;

        specialinvoke $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: void fastVerify(java.security.PublicKey)>($r1);

        return;

     label1:
        $r3 = virtualinvoke $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: java.lang.String getSigAlgName()>();

        $r4 = staticinvoke <java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)>($r3, $r2);

        virtualinvoke $r4.<java.security.Signature: void initVerify(java.security.PublicKey)>($r1);

        $r5 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        if $r5 != null goto label2;

        $r6 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.TBSCertificate tbsCert>;

        $r5 = virtualinvoke $r6.<org.apache.harmony.security.x509.TBSCertificate: byte[] getEncoded()>();

        $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate> = $r5;

     label2:
        $r5 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        $r7 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: byte[] tbsCertificate>;

        $i0 = lengthof $r7;

        virtualinvoke $r4.<java.security.Signature: void update(byte[],int,int)>($r5, 0, $i0);

        $r8 = $r0.<org.apache.harmony.security.provider.cert.X509CertImpl: org.apache.harmony.security.x509.Certificate certificate>;

        $r5 = virtualinvoke $r8.<org.apache.harmony.security.x509.Certificate: byte[] getSignatureValue()>();

        $z0 = virtualinvoke $r4.<java.security.Signature: boolean verify(byte[])>($r5);

        if $z0 != 0 goto label3;

        $r9 = new java.security.SignatureException;

        $r2 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.15C");

        specialinvoke $r9.<java.security.SignatureException: void <init>(java.lang.String)>($r2);

        throw $r9;

     label3:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.security.provider.cert.X509CertImpl: long serialVersionUID> = 2972248729446736154L;

        return;
    }
}
