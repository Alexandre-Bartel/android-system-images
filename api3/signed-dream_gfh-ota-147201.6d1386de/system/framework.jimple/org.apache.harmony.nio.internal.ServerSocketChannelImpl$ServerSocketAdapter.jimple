class org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter extends java.net.ServerSocket
{
    org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl;
    final org.apache.harmony.nio.internal.ServerSocketChannelImpl this$0;

    void <init>(org.apache.harmony.nio.internal.ServerSocketChannelImpl, java.net.SocketImpl, org.apache.harmony.nio.internal.ServerSocketChannelImpl)
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r1, $r3;
        java.net.SocketImpl $r2;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r1 := @parameter0: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        $r2 := @parameter1: java.net.SocketImpl;

        $r3 := @parameter2: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl this$0> = $r1;

        specialinvoke $r0.<java.net.ServerSocket: void <init>(java.net.SocketImpl)>($r2);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl> = $r3;

        return;
    }

    private java.net.Socket accept(java.net.Socket, org.apache.harmony.nio.internal.SocketChannelImpl) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        java.net.Socket $r1;
        org.apache.harmony.nio.internal.SocketChannelImpl $r2;
        java.lang.SecurityManager $r3;
        java.net.InetAddress $r4;
        java.lang.String $r5;
        int $i0;
        java.lang.Throwable $r6, $r7;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: org.apache.harmony.nio.internal.SocketChannelImpl;

     label1:
        entermonitor $r0;

     label2:
        specialinvoke $r0.<java.net.ServerSocket: void implAccept(java.net.Socket)>($r1);

        virtualinvoke $r2.<org.apache.harmony.nio.internal.SocketChannelImpl: void setConnected()>();

        virtualinvoke $r2.<org.apache.harmony.nio.internal.SocketChannelImpl: void setBound(boolean)>(1);

        exitmonitor $r0;

     label3:
        $r3 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r3 == null goto label4;

        $r4 = virtualinvoke $r1.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        $r5 = virtualinvoke $r4.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $i0 = virtualinvoke $r1.<java.net.Socket: int getPort()>();

        virtualinvoke $r3.<java.lang.SecurityManager: void checkAccept(java.lang.String,int)>($r5, $i0);

     label4:
        goto label9;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor $r0;

     label7:
        throw $r6;

     label8:
        $r7 := @caughtexception;

        virtualinvoke $r1.<java.net.Socket: void close()>();

        throw $r7;

     label9:
        return $r1;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    static java.net.Socket access$100(org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter, java.net.Socket, org.apache.harmony.nio.internal.SocketChannelImpl) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        java.net.Socket $r1;
        org.apache.harmony.nio.internal.SocketChannelImpl $r2;

        $r0 := @parameter0: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r1 := @parameter1: java.net.Socket;

        $r2 := @parameter2: org.apache.harmony.nio.internal.SocketChannelImpl;

        $r1 = specialinvoke $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: java.net.Socket accept(java.net.Socket,org.apache.harmony.nio.internal.SocketChannelImpl)>($r1, $r2);

        return $r1;
    }

    public java.net.Socket accept() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r1;
        boolean $z0;
        java.nio.channels.IllegalBlockingModeException $r2;
        java.nio.channels.SocketChannel $r3;
        java.net.Socket $r4;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl this$0>;

        $z0 = $r1.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: boolean isBound>;

        if $z0 != 0 goto label1;

        $r2 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r2.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r2;

     label1:
        $r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        $r3 = virtualinvoke $r1.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.nio.channels.SocketChannel accept()>();

        if $r3 != null goto label2;

        $r2 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r2.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r2;

     label2:
        $r4 = virtualinvoke $r3.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

        return $r4;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        java.net.SocketAddress $r1;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r2;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r1 := @parameter0: java.net.SocketAddress;

        specialinvoke $r0.<java.net.ServerSocket: void bind(java.net.SocketAddress)>($r1);

        $r2 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        $r2.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: boolean isBound> = 1;

        return;
    }

    public void bind(java.net.SocketAddress, int) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        java.net.SocketAddress $r1;
        int $i0;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r2;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r1 := @parameter0: java.net.SocketAddress;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.net.ServerSocket: void bind(java.net.SocketAddress,int)>($r1, $i0);

        $r2 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        $r2.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: boolean isBound> = 1;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>();

        if $z0 == 0 goto label4;

        $r2 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        virtualinvoke $r2.<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>();

     label2:
        $r2 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        $r2.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: int status> = 1;

        exitmonitor $r1;

     label3:
        return;

     label4:
        specialinvoke $r0.<java.net.ServerSocket: void close()>();

        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public java.nio.channels.ServerSocketChannel getChannel()
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl r1;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        return r1;
    }

    public boolean isBound()
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r0;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r1;
        boolean z0;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: org.apache.harmony.nio.internal.ServerSocketChannelImpl channelImpl>;

        z0 = $r1.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: boolean isBound>;

        return z0;
    }
}
