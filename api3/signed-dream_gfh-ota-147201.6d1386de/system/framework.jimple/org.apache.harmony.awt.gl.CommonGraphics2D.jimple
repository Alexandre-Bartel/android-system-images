public abstract class org.apache.harmony.awt.gl.CommonGraphics2D extends java.awt.Graphics2D
{
    protected static final boolean debugOutput;
    protected java.awt.Color bgColor;
    protected org.apache.harmony.awt.gl.render.Blitter blitter;
    protected org.apache.harmony.awt.gl.MultiRectArea clip;
    protected java.awt.Composite composite;
    protected org.apache.harmony.awt.gl.Surface dstSurf;
    protected java.awt.Color fgColor;
    protected java.awt.Font font;
    protected java.awt.font.FontRenderContext frc;
    protected java.awt.RenderingHints hints;
    protected org.apache.harmony.awt.gl.render.JavaShapeRasterizer jsr;
    protected org.apache.harmony.awt.gl.TextRenderer jtr;
    protected double[] matrix;
    public java.awt.Point origPoint;
    protected java.awt.Paint paint;
    protected java.awt.Stroke stroke;
    protected java.awt.geom.AffineTransform transform;

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        $r0 = "1";

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("g2d.debug");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput> = $z0;

        return;
    }

    protected void <init>()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        org.apache.harmony.awt.gl.render.Blitter $r1;
        java.awt.RenderingHints $r2;
        java.awt.Color $r3;
        java.awt.AlphaComposite $r4;
        java.awt.BasicStroke $r5;
        java.awt.font.FontRenderContext $r6;
        org.apache.harmony.awt.gl.render.JavaShapeRasterizer $r7;
        java.awt.Font $r8;
        org.apache.harmony.awt.gl.render.JavaTextRenderer $r9;
        java.awt.geom.AffineTransform $r10;
        double[] $r11;
        java.awt.Point $r12;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        specialinvoke $r0.<java.awt.Graphics2D: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf> = null;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.render.NullBlitter: org.apache.harmony.awt.gl.render.Blitter getInstance()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter> = $r1;

        $r2 = new java.awt.RenderingHints;

        specialinvoke $r2.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints> = $r2;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip> = null;

        $r3 = <java.awt.Color: java.awt.Color WHITE>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint paint> = $r3;

        $r3 = <java.awt.Color: java.awt.Color WHITE>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color fgColor> = $r3;

        $r3 = <java.awt.Color: java.awt.Color BLACK>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color bgColor> = $r3;

        $r4 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite> = $r4;

        $r5 = new java.awt.BasicStroke;

        specialinvoke $r5.<java.awt.BasicStroke: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke> = $r5;

        $r6 = new java.awt.font.FontRenderContext;

        specialinvoke $r6.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>(null, 0, 0);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.font.FontRenderContext frc> = $r6;

        $r7 = new org.apache.harmony.awt.gl.render.JavaShapeRasterizer;

        specialinvoke $r7.<org.apache.harmony.awt.gl.render.JavaShapeRasterizer: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.JavaShapeRasterizer jsr> = $r7;

        $r8 = new java.awt.Font;

        specialinvoke $r8.<java.awt.Font: void <init>(java.lang.String,int,int)>("Dialog", 0, 12);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Font font> = $r8;

        $r9 = <org.apache.harmony.awt.gl.render.JavaTextRenderer: org.apache.harmony.awt.gl.render.JavaTextRenderer inst>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.TextRenderer jtr> = $r9;

        $r10 = new java.awt.geom.AffineTransform;

        specialinvoke $r10.<java.awt.geom.AffineTransform: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform> = $r10;

        $r11 = newarray (double)[6];

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix> = $r11;

        $r12 = new java.awt.Point;

        specialinvoke $r12.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Point origPoint> = $r12;

        return;
    }

    protected void <init>(int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void <init>(int,int,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, null);

        return;
    }

    protected void <init>(int, int, org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1;
        org.apache.harmony.awt.gl.MultiRectArea $r1;
        org.apache.harmony.awt.gl.render.Blitter $r2;
        java.awt.RenderingHints $r3;
        java.awt.Color $r4;
        java.awt.AlphaComposite $r5;
        java.awt.BasicStroke $r6;
        java.awt.font.FontRenderContext $r7;
        org.apache.harmony.awt.gl.render.JavaShapeRasterizer $r8;
        java.awt.Font $r9;
        org.apache.harmony.awt.gl.render.JavaTextRenderer $r10;
        java.awt.geom.AffineTransform $r11;
        double[] $r12;
        java.awt.Point $r13;
        double $d0, $d1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: org.apache.harmony.awt.gl.MultiRectArea;

        specialinvoke $r0.<java.awt.Graphics2D: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf> = null;

        $r2 = staticinvoke <org.apache.harmony.awt.gl.render.NullBlitter: org.apache.harmony.awt.gl.render.Blitter getInstance()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter> = $r2;

        $r3 = new java.awt.RenderingHints;

        specialinvoke $r3.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints> = $r3;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip> = null;

        $r4 = <java.awt.Color: java.awt.Color WHITE>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint paint> = $r4;

        $r4 = <java.awt.Color: java.awt.Color WHITE>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color fgColor> = $r4;

        $r4 = <java.awt.Color: java.awt.Color BLACK>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color bgColor> = $r4;

        $r5 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite> = $r5;

        $r6 = new java.awt.BasicStroke;

        specialinvoke $r6.<java.awt.BasicStroke: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke> = $r6;

        $r7 = new java.awt.font.FontRenderContext;

        specialinvoke $r7.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>(null, 0, 0);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.font.FontRenderContext frc> = $r7;

        $r8 = new org.apache.harmony.awt.gl.render.JavaShapeRasterizer;

        specialinvoke $r8.<org.apache.harmony.awt.gl.render.JavaShapeRasterizer: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.JavaShapeRasterizer jsr> = $r8;

        $r9 = new java.awt.Font;

        specialinvoke $r9.<java.awt.Font: void <init>(java.lang.String,int,int)>("Dialog", 0, 12);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Font font> = $r9;

        $r10 = <org.apache.harmony.awt.gl.render.JavaTextRenderer: org.apache.harmony.awt.gl.render.JavaTextRenderer inst>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.TextRenderer jtr> = $r10;

        $r11 = new java.awt.geom.AffineTransform;

        specialinvoke $r11.<java.awt.geom.AffineTransform: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform> = $r11;

        $r12 = newarray (double)[6];

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix> = $r12;

        $r13 = new java.awt.Point;

        specialinvoke $r13.<java.awt.Point: void <init>(int,int)>(0, 0);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Point origPoint> = $r13;

        $d0 = (double) $i0;

        $d1 = (double) $i1;

        $r11 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransform(java.awt.geom.AffineTransform)>($r11);

        $r13 = new java.awt.Point;

        specialinvoke $r13.<java.awt.Point: void <init>(int,int)>($i0, $i1);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Point origPoint> = $r13;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setClip(java.awt.Shape)>($r1);

        return;
    }

    public void addRenderingHints(java.util.Map)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.util.Map $r1;
        java.awt.RenderingHints $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.util.Map;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints>;

        virtualinvoke $r2.<java.awt.RenderingHints: void putAll(java.util.Map)>($r1);

        return;
    }

    public void clearRect(int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        java.awt.Color $r1, $r3;
        java.awt.Paint $r2;
        boolean $z0;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color getColor()>();

        $r2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint getPaint()>();

        $r3 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color getBackground()>();

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setColor(java.awt.Color)>($r3);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillRect(int,int,int,int)>($i0, $i1, $i2, $i3);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setColor(java.awt.Color)>($r1);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setPaint(java.awt.Paint)>($r2);

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.clearRect(");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;

     label1:
        return;
    }

    public void clip(java.awt.Shape)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Shape $r1;
        boolean $z0;
        org.apache.harmony.awt.gl.MultiRectArea $r2, $r3;
        java.awt.geom.AffineTransform $r4;
        double $d0;
        int $i0, $i1;
        java.awt.Rectangle $r5;
        org.apache.harmony.awt.gl.render.JavaShapeRasterizer $r6;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Shape;

        if $r1 != null goto label1;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip> = null;

        return;

     label1:
        $z0 = $r1 instanceof org.apache.harmony.awt.gl.MultiRectArea;

        if $z0 == 0 goto label3;

        $r2 = new org.apache.harmony.awt.gl.MultiRectArea;

        $r3 = (org.apache.harmony.awt.gl.MultiRectArea) $r1;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(org.apache.harmony.awt.gl.MultiRectArea)>($r3);

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $i0 = (int) $d0;

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $i1 = (int) $d0;

        virtualinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea: void translate(int,int)>($i0, $i1);

     label2:
        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        if $r3 != null goto label5;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)>($r2);

        return;

     label3:
        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $i0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: int getType()>();

        $z0 = $r1 instanceof java.awt.Rectangle;

        if $z0 == 0 goto label4;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label4;

        $r2 = new org.apache.harmony.awt.gl.MultiRectArea;

        $r5 = (java.awt.Rectangle) $r1;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(java.awt.Rectangle)>($r5);

        if $i0 != 1 goto label2;

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $i0 = (int) $d0;

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $i1 = (int) $d0;

        virtualinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea: void translate(int,int)>($i0, $i1);

        goto label2;

     label4:
        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r1 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.JavaShapeRasterizer jsr>;

        $r2 = virtualinvoke $r6.<org.apache.harmony.awt.gl.render.JavaShapeRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(java.awt.Shape,double)>($r1, 0.5);

        goto label2;

     label5:
        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r3.<org.apache.harmony.awt.gl.MultiRectArea: void intersect(org.apache.harmony.awt.gl.MultiRectArea)>($r2);

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)>($r2);

        return;
    }

    public void clipRect(int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        java.awt.Rectangle $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void clip(java.awt.Shape)>($r1);

        return;
    }

    protected void copyInternalFields(org.apache.harmony.awt.gl.CommonGraphics2D)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0, $r1;
        org.apache.harmony.awt.gl.MultiRectArea $r2, $r12;
        java.awt.Color $r3;
        java.awt.Paint $r4;
        java.awt.Composite $r5;
        java.awt.Stroke $r6;
        java.awt.Font $r7;
        java.awt.geom.AffineTransform $r8, $r9;
        java.awt.Point $r10, $r11;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        if $r2 != null goto label2;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)>(null);

     label1:
        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color bgColor>;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setBackground(java.awt.Color)>($r3);

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color fgColor>;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setColor(java.awt.Color)>($r3);

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint paint>;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setPaint(java.awt.Paint)>($r4);

        $r5 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setComposite(java.awt.Composite)>($r5);

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setStroke(java.awt.Stroke)>($r6);

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Font font>;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setFont(java.awt.Font)>($r7);

        $r8 = new java.awt.geom.AffineTransform;

        $r9 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        specialinvoke $r8.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>($r9);

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransform(java.awt.geom.AffineTransform)>($r8);

        $r10 = new java.awt.Point;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Point origPoint>;

        specialinvoke $r10.<java.awt.Point: void <init>(java.awt.Point)>($r11);

        $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Point origPoint> = $r10;

        return;

     label2:
        $r2 = new org.apache.harmony.awt.gl.MultiRectArea;

        $r12 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        specialinvoke $r2.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(org.apache.harmony.awt.gl.MultiRectArea)>($r12);

        virtualinvoke $r1.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)>($r2);

        goto label1;
    }

    public void dispose()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        return;
    }

    public void draw(java.awt.Shape)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        float[] $r1;
        java.awt.Shape $r2;
        java.awt.Stroke $r3;
        boolean $z0;
        java.awt.BasicStroke $r4;
        float $f0;
        byte $b0;
        org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher $r5;
        java.awt.geom.AffineTransform $r6;
        java.awt.geom.PathIterator $r7;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        double $d0;
        org.apache.harmony.awt.gl.MultiRectArea $r8;
        org.apache.harmony.awt.gl.render.JavaShapeRasterizer $r9;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r2 := @parameter0: java.awt.Shape;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $z0 = $r3 instanceof java.awt.BasicStroke;

        if $z0 == 0 goto label8;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r4 = (java.awt.BasicStroke) $r3;

        $f0 = virtualinvoke $r4.<java.awt.BasicStroke: float getLineWidth()>();

        $b0 = $f0 cmpg 1.0F;

        if $b0 > 0 goto label8;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r4 = (java.awt.BasicStroke) $r3;

        $r1 = virtualinvoke $r4.<java.awt.BasicStroke: float[] getDashArray()>();

        if $r1 != null goto label4;

        $r5 = null;

     label1:
        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r7 = interfaceinvoke $r2.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform,double)>($r6, 0.5);

        $r1 = newarray (float)[6];

        $i1 = -2147483648;

        $i2 = -2147483648;

        $i3 = -2147483648;

        $i4 = -2147483648;

     label2:
        $z0 = interfaceinvoke $r7.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label9;

        $i5 = interfaceinvoke $r7.<java.awt.geom.PathIterator: int currentSegment(float[])>($r1);

        lookupswitch($i5)
        {
            case 0: goto label5;
            case 1: goto label6;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label7;
            default: goto label3;
        };

     label3:
        interfaceinvoke $r7.<java.awt.geom.PathIterator: void next()>();

        goto label2;

     label4:
        $r5 = new org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher;

        $r1 = virtualinvoke $r4.<java.awt.BasicStroke: float[] getDashArray()>();

        $f0 = virtualinvoke $r4.<java.awt.BasicStroke: float getDashPhase()>();

        specialinvoke $r5.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: void <init>(float[],float)>($r1, $f0);

        goto label1;

     label5:
        $f0 = $r1[0];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i1 = (int) $d0;

        $f0 = $r1[1];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i2 = (int) $d0;

        $i3 = $i1;

        $i4 = $i2;

        goto label3;

     label6:
        $f0 = $r1[0];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i5 = (int) $d0;

        $f0 = $r1[1];

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i6 = (int) $d0;

        $r8 = staticinvoke <org.apache.harmony.awt.gl.render.JavaLineRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(int,int,int,int,org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher,boolean)>($i1, $i2, $i5, $i6, null, $r5, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectArea(org.apache.harmony.awt.gl.MultiRectArea)>($r8);

        $i1 = $i5;

        $i2 = $i6;

        goto label3;

     label7:
        $r8 = staticinvoke <org.apache.harmony.awt.gl.render.JavaLineRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(int,int,int,int,org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher,boolean)>($i1, $i2, $i3, $i4, null, $r5, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectArea(org.apache.harmony.awt.gl.MultiRectArea)>($r8);

        $i1 = $i3;

        $i2 = $i4;

        goto label3;

     label8:
        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r2 = interfaceinvoke $r3.<java.awt.Stroke: java.awt.Shape createStrokedShape(java.awt.Shape)>($r2);

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r2 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r2);

        $r9 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.JavaShapeRasterizer jsr>;

        $r8 = virtualinvoke $r9.<org.apache.harmony.awt.gl.render.JavaShapeRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(java.awt.Shape,double)>($r2, 0.5);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectArea(org.apache.harmony.awt.gl.MultiRectArea)>($r8);

        return;

     label9:
        return;
    }

    public void drawArc(int, int, int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        org.apache.harmony.awt.gl.MultiRectArea $r1;
        java.awt.Point $r2;
        java.awt.Stroke $r3;
        boolean $z0;
        java.awt.BasicStroke $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        byte $b6;
        float[] $r5;
        java.awt.geom.AffineTransform $r6;
        double $d0, $d1;
        java.awt.geom.Arc2D$Float $r7;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $z0 = $r3 instanceof java.awt.BasicStroke;

        if $z0 == 0 goto label2;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r4 = (java.awt.BasicStroke) $r3;

        $f0 = virtualinvoke $r4.<java.awt.BasicStroke: float getLineWidth()>();

        $b6 = $f0 cmpg 1.0F;

        if $b6 > 0 goto label2;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r4 = (java.awt.BasicStroke) $r3;

        $r5 = virtualinvoke $r4.<java.awt.BasicStroke: float[] getDashArray()>();

        if $r5 != null goto label2;

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $z0 = virtualinvoke $r6.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label1;

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $i7 = virtualinvoke $r6.<java.awt.geom.AffineTransform: int getType()>();

        if $i7 != 1 goto label2;

     label1:
        $r2 = new java.awt.Point;

        specialinvoke $r2.<java.awt.Point: void <init>(int,int)>($i0, $i1);

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r2, $r2);

        $d0 = (double) $i4;

        $d1 = (double) $i5;

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.render.JavaArcRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(int,int,int,int,double,double,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $i2, $i3, $d0, $d1, $r1);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectArea(org.apache.harmony.awt.gl.MultiRectArea)>($r1);

        return;

     label2:
        $r7 = new java.awt.geom.Arc2D$Float;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $f2 = (float) $i2;

        $f3 = (float) $i3;

        $f4 = (float) $i4;

        $f5 = (float) $i5;

        specialinvoke $r7.<java.awt.geom.Arc2D$Float: void <init>(float,float,float,float,float,float,int)>($f0, $f1, $f2, $f3, $f4, $f5, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void draw(java.awt.Shape)>($r7);

        return;
    }

    public void drawGlyphVector(java.awt.font.GlyphVector, float, float)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.font.GlyphVector $r1;
        float $f0, $f1;
        double[] $r2;
        java.awt.Font $r3;
        java.awt.geom.AffineTransform $r4;
        boolean $z0;
        int $i0;
        org.apache.harmony.awt.gl.TextRenderer $r5;
        double $d0, $d1;
        java.awt.Shape $r6;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.font.GlyphVector;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $r3 = virtualinvoke $r1.<java.awt.font.GlyphVector: java.awt.Font getFont()>();

        $r4 = virtualinvoke $r3.<java.awt.Font: java.awt.geom.AffineTransform getTransform()>();

        $r2 = newarray (double)[6];

        if $r4 == null goto label1;

        $z0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: int getType()>();

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r2);

        if $i0 != 1 goto label2;

        $i0 = virtualinvoke $r1.<java.awt.font.GlyphVector: int getLayoutFlags()>();

        $i0 = $i0 & 1;

        if $i0 != 0 goto label2;

        $r5 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.TextRenderer jtr>;

        $d0 = (double) $f0;

        $d1 = $r2[4];

        $d0 = $d0 + $d1;

        $i0 = (int) $d0;

        $f0 = (float) $i0;

        $d0 = (double) $f1;

        $d1 = $r2[5];

        $d0 = $d0 + $d1;

        $i0 = (int) $d0;

        $f1 = (float) $i0;

        virtualinvoke $r5.<org.apache.harmony.awt.gl.TextRenderer: void drawGlyphVector(java.awt.Graphics2D,java.awt.font.GlyphVector,float,float)>($r0, $r1, $f0, $f1);

        return;

     label1:
        $i0 = virtualinvoke $r1.<java.awt.font.GlyphVector: int getLayoutFlags()>();

        $i0 = $i0 & 1;

        if $i0 != 0 goto label2;

        $r5 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.TextRenderer jtr>;

        virtualinvoke $r5.<org.apache.harmony.awt.gl.TextRenderer: void drawGlyphVector(java.awt.Graphics2D,java.awt.font.GlyphVector,float,float)>($r0, $r1, $f0, $f1);

        return;

     label2:
        $r6 = virtualinvoke $r1.<java.awt.font.GlyphVector: java.awt.Shape getOutline(float,float)>($f0, $f1);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fill(java.awt.Shape)>($r6);

        return;
    }

    public void drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.image.BufferedImageOp $r1;
        int $i0, $i1, $i2, $i3;
        java.awt.image.BufferedImage $r2;
        boolean $z0;
        java.awt.image.AffineTransformOp $r3;
        java.awt.geom.AffineTransform $r4, $r8;
        org.apache.harmony.awt.gl.Surface $r5, $r7;
        org.apache.harmony.awt.gl.render.Blitter $r6;
        java.lang.Object $r9;
        java.awt.Composite $r10;
        org.apache.harmony.awt.gl.MultiRectArea $r11;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r2 := @parameter0: java.awt.image.BufferedImage;

        $r1 := @parameter1: java.awt.image.BufferedImageOp;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if $r2 != null goto label1;

        return;

     label1:
        if $r1 != null goto label2;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r2, $i0, $i1, null);

        return;

     label2:
        $z0 = $r1 instanceof java.awt.image.AffineTransformOp;

        if $z0 == 0 goto label3;

        $r3 = (java.awt.image.AffineTransformOp) $r1;

        $r4 = virtualinvoke $r3.<java.awt.image.AffineTransformOp: java.awt.geom.AffineTransform getTransform()>();

        $r5 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r2);

        $i2 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i3 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r9 = virtualinvoke $r8.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r8 = (java.awt.geom.AffineTransform) $r9;

        $r10 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        interfaceinvoke $r6.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r5, $i0, $i1, $r7, $i2, $i3, $r8, $r4, $r10, null, $r11);

        return;

     label3:
        $r2 = interfaceinvoke $r1.<java.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r2, null);

        $r5 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r2);

        $i2 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i3 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r9 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r4 = (java.awt.geom.AffineTransform) $r9;

        $r10 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        interfaceinvoke $r6.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r5, $i0, $i1, $r7, $i2, $i3, $r4, $r10, null, $r11);

        return;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.awt.Color $r2;
        java.awt.image.ImageObserver $r3;
        boolean $z0, $z1;
        org.apache.harmony.awt.gl.image.OffscreenImage $r4;
        org.apache.harmony.awt.gl.Surface $r6, $r8;
        org.apache.harmony.awt.gl.render.Blitter $r7;
        java.awt.geom.AffineTransform $r9, $r13;
        java.lang.Object $r10;
        java.awt.Composite $r11;
        org.apache.harmony.awt.gl.MultiRectArea $r12;
        float $f0, $f1;
        double $d0, $d1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 := @parameter7: int;

        $i7 := @parameter8: int;

        $r2 := @parameter9: java.awt.Color;

        $r3 := @parameter10: java.awt.image.ImageObserver;

        if $r1 != null goto label01;

        return 1;

     label01:
        if $i0 == $i2 goto label02;

        if $i1 == $i3 goto label02;

        if $i4 == $i6 goto label02;

        if $i5 != $i7 goto label03;

     label02:
        return 1;

     label03:
        $z0 = 0;

        $z1 = $r1 instanceof org.apache.harmony.awt.gl.image.OffscreenImage;

        if $z1 == 0 goto label10;

        $r4 = (org.apache.harmony.awt.gl.image.OffscreenImage) $r1;

        $i8 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i8 = $i8 & 64;

        if $i8 == 0 goto label04;

        return 0;

     label04:
        $z1 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: boolean prepareImage(java.awt.image.ImageObserver)>($r3);

        $i8 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i8 = $i8 & 8;

        if $i8 == 0 goto label09;

        $z0 = 1;

     label05:
        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: org.apache.harmony.awt.gl.ImageSurface getImageSurface()>();

     label06:
        if $z1 != 0 goto label07;

        if $z0 == 0 goto label08;

     label07:
        $i2 = $i2 - $i0;

        $i3 = $i3 - $i1;

        $i6 = $i6 - $i4;

        $i7 = $i7 - $i5;

        if $i6 != $i2 goto label11;

        if $i7 != $i3 goto label11;

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r9 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r9 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        interfaceinvoke $r7.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i4, $i5, $r6, $i0, $i1, $r8, $i6, $i7, $r9, $r11, $r2, $r12);

     label08:
        return $z1;

     label09:
        $z0 = 0;

        goto label05;

     label10:
        $z1 = 1;

        $r6 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r1);

        goto label06;

     label11:
        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();

        $f0 = (float) $i2;

        $f1 = (float) $i6;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $f0 = (float) $i3;

        $f1 = (float) $i7;

        $f0 = $f0 / $f1;

        $d1 = (double) $f0;

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void setToScale(double,double)>($d0, $d1);

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r13 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r13 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        interfaceinvoke $r7.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i4, $i5, $r6, $i0, $i1, $r8, $i6, $i7, $r13, $r9, $r11, $r2, $r12);

        goto label08;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.image.ImageObserver)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.awt.image.ImageObserver $r2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 := @parameter7: int;

        $i7 := @parameter8: int;

        $r2 := @parameter9: java.awt.image.ImageObserver;

        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)>($r1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, null, $r2);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.Color $r2;
        java.awt.image.ImageObserver $r3;
        boolean $z0, $z1;
        org.apache.harmony.awt.gl.image.OffscreenImage $r4;
        org.apache.harmony.awt.gl.Surface $r6, $r8;
        org.apache.harmony.awt.gl.render.Blitter $r7;
        java.awt.geom.AffineTransform $r9, $r13;
        java.lang.Object $r10;
        java.awt.Composite $r11;
        org.apache.harmony.awt.gl.MultiRectArea $r12;
        float $f0, $f1;
        double $d0, $d1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 := @parameter5: java.awt.Color;

        $r3 := @parameter6: java.awt.image.ImageObserver;

        if $r1 != null goto label01;

        return 1;

     label01:
        if $i2 == 0 goto label02;

        if $i3 != 0 goto label03;

     label02:
        return 1;

     label03:
        $z0 = 0;

        $z1 = $r1 instanceof org.apache.harmony.awt.gl.image.OffscreenImage;

        if $z1 == 0 goto label10;

        $r4 = (org.apache.harmony.awt.gl.image.OffscreenImage) $r1;

        $i4 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i4 = $i4 & 64;

        if $i4 == 0 goto label04;

        return 0;

     label04:
        $z1 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: boolean prepareImage(java.awt.image.ImageObserver)>($r3);

        $i4 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i4 = $i4 & 8;

        if $i4 == 0 goto label09;

        $z0 = 1;

     label05:
        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: org.apache.harmony.awt.gl.ImageSurface getImageSurface()>();

     label06:
        if $z1 != 0 goto label07;

        if $z0 == 0 goto label08;

     label07:
        $i4 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i5 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        if $i4 != $i2 goto label11;

        if $i5 != $i3 goto label11;

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r9 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r9 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        interfaceinvoke $r7.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r6, $i0, $i1, $r8, $i4, $i5, $r9, $r11, $r2, $r12);

     label08:
        return $z1;

     label09:
        $z0 = 0;

        goto label05;

     label10:
        $z1 = 1;

        $r6 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r1);

        goto label06;

     label11:
        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();

        $f0 = (float) $i2;

        $f1 = (float) $i4;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $f0 = (float) $i3;

        $f1 = (float) $i5;

        $f0 = $f0 / $f1;

        $d1 = (double) $f0;

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void setToScale(double,double)>($d0, $d1);

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r13 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r13 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        interfaceinvoke $r7.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r6, $i0, $i1, $r8, $i4, $i5, $r13, $r9, $r11, $r2, $r12);

        goto label08;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3;
        java.awt.image.ImageObserver $r2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 := @parameter5: java.awt.image.ImageObserver;

        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)>($r1, $i0, $i1, $i2, $i3, null, $r2);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3;
        java.awt.Color $r2;
        java.awt.image.ImageObserver $r3;
        boolean $z0, $z1;
        org.apache.harmony.awt.gl.image.OffscreenImage $r4;
        org.apache.harmony.awt.gl.Surface $r6, $r8;
        org.apache.harmony.awt.gl.render.Blitter $r7;
        java.awt.geom.AffineTransform $r9;
        java.lang.Object $r10;
        java.awt.Composite $r11;
        org.apache.harmony.awt.gl.MultiRectArea $r12;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.awt.Color;

        $r3 := @parameter4: java.awt.image.ImageObserver;

        if $r1 != null goto label1;

        return 1;

     label1:
        $z0 = 0;

        $z1 = $r1 instanceof org.apache.harmony.awt.gl.image.OffscreenImage;

        if $z1 == 0 goto label8;

        $r4 = (org.apache.harmony.awt.gl.image.OffscreenImage) $r1;

        $i2 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i2 = $i2 & 64;

        if $i2 == 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: boolean prepareImage(java.awt.image.ImageObserver)>($r3);

        $i2 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i2 = $i2 & 8;

        if $i2 == 0 goto label7;

        $z0 = 1;

     label3:
        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: org.apache.harmony.awt.gl.ImageSurface getImageSurface()>();

     label4:
        if $z1 != 0 goto label5;

        if $z0 == 0 goto label6;

     label5:
        $i2 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i3 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r9 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r9 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        interfaceinvoke $r7.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r6, $i0, $i1, $r8, $i2, $i3, $r9, $r11, $r2, $r12);

     label6:
        return $z1;

     label7:
        $z0 = 0;

        goto label3;

     label8:
        $z1 = 1;

        $r6 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r1);

        goto label4;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1;
        java.awt.image.ImageObserver $r2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.awt.image.ImageObserver;

        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)>($r1, $i0, $i1, null, $r2);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Image $r1;
        java.awt.geom.AffineTransform $r2, $r7;
        java.awt.image.ImageObserver $r3;
        boolean $z0, $z1;
        org.apache.harmony.awt.gl.image.OffscreenImage $r4;
        int $i0, $i1;
        org.apache.harmony.awt.gl.Surface $r6, $r10;
        java.lang.Object $r8;
        org.apache.harmony.awt.gl.render.Blitter $r9;
        java.awt.Composite $r11;
        org.apache.harmony.awt.gl.MultiRectArea $r12;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $r2 := @parameter1: java.awt.geom.AffineTransform;

        $r3 := @parameter2: java.awt.image.ImageObserver;

        if $r1 != null goto label01;

        return 1;

     label01:
        if $r2 == null goto label02;

        $z0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 == 0 goto label03;

     label02:
        $z0 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r1, 0, 0, $r3);

        return $z0;

     label03:
        $z0 = 0;

        $z1 = $r1 instanceof org.apache.harmony.awt.gl.image.OffscreenImage;

        if $z1 == 0 goto label10;

        $r4 = (org.apache.harmony.awt.gl.image.OffscreenImage) $r1;

        $i0 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i0 = $i0 & 64;

        if $i0 == 0 goto label04;

        return 0;

     label04:
        $z1 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: boolean prepareImage(java.awt.image.ImageObserver)>($r3);

        $i0 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i0 = $i0 & 8;

        if $i0 == 0 goto label09;

        $z0 = 1;

     label05:
        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: org.apache.harmony.awt.gl.ImageSurface getImageSurface()>();

     label06:
        if $z1 != 0 goto label07;

        if $z0 == 0 goto label08;

     label07:
        $i0 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i1 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r8 = virtualinvoke $r7.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r7 = (java.awt.geom.AffineTransform) $r8;

        virtualinvoke $r7.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

        $r9 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r10 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        interfaceinvoke $r9.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r6, 0, 0, $r10, $i0, $i1, $r7, $r11, null, $r12);

     label08:
        return $z1;

     label09:
        $z0 = 0;

        goto label05;

     label10:
        $z1 = 1;

        $r6 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r1);

        goto label06;
    }

    public void drawLine(int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        java.awt.Point $r1, $r2;
        boolean $z0;
        java.io.PrintStream $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.awt.Stroke $r6;
        java.awt.BasicStroke $r7;
        float $f0, $f1, $f2, $f3;
        byte $b4;
        java.awt.geom.AffineTransform $r8;
        float[] $r9;
        org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher $r10;
        org.apache.harmony.awt.gl.MultiRectArea $r11;
        java.awt.geom.Line2D$Float $r12;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.drawLine(");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $z0 = $r6 instanceof java.awt.BasicStroke;

        if $z0 == 0 goto label4;

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r7 = (java.awt.BasicStroke) $r6;

        $f0 = virtualinvoke $r7.<java.awt.BasicStroke: float getLineWidth()>();

        $b4 = $f0 cmpg 1.0F;

        if $b4 > 0 goto label4;

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r7 = (java.awt.BasicStroke) $r6;

        $r1 = new java.awt.Point;

        specialinvoke $r1.<java.awt.Point: void <init>(int,int)>($i0, $i1);

        $r2 = new java.awt.Point;

        specialinvoke $r2.<java.awt.Point: void <init>(int,int)>($i2, $i3);

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r8.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r1, $r1);

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r8.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r2, $r2);

        $r9 = virtualinvoke $r7.<java.awt.BasicStroke: float[] getDashArray()>();

        if $r9 != null goto label3;

        $r10 = null;

     label2:
        $i0 = $r1.<java.awt.Point: int x>;

        $i1 = $r1.<java.awt.Point: int y>;

        $i2 = $r2.<java.awt.Point: int x>;

        $i3 = $r2.<java.awt.Point: int y>;

        $r11 = staticinvoke <org.apache.harmony.awt.gl.render.JavaLineRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(int,int,int,int,org.apache.harmony.awt.gl.MultiRectArea,org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher,boolean)>($i0, $i1, $i2, $i3, null, $r10, 0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectArea(org.apache.harmony.awt.gl.MultiRectArea)>($r11);

        return;

     label3:
        $r10 = new org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher;

        $r9 = virtualinvoke $r7.<java.awt.BasicStroke: float[] getDashArray()>();

        $f0 = virtualinvoke $r7.<java.awt.BasicStroke: float getDashPhase()>();

        specialinvoke $r10.<org.apache.harmony.awt.gl.render.JavaLineRasterizer$LineDasher: void <init>(float[],float)>($r9, $f0);

        goto label2;

     label4:
        $r12 = new java.awt.geom.Line2D$Float;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $f2 = (float) $i2;

        $f3 = (float) $i3;

        specialinvoke $r12.<java.awt.geom.Line2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void draw(java.awt.Shape)>($r12);

        return;
    }

    public void drawOval(int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i5;
        org.apache.harmony.awt.gl.MultiRectArea $r1;
        java.awt.Point $r2;
        java.awt.Stroke $r3;
        boolean $z0;
        java.awt.BasicStroke $r4;
        float $f0, $f1, $f2, $f3;
        byte $b4;
        float[] $r5;
        java.awt.geom.AffineTransform $r6;
        java.awt.geom.Ellipse2D$Float $r7;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $z0 = $r3 instanceof java.awt.BasicStroke;

        if $z0 == 0 goto label2;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r4 = (java.awt.BasicStroke) $r3;

        $f0 = virtualinvoke $r4.<java.awt.BasicStroke: float getLineWidth()>();

        $b4 = $f0 cmpg 1.0F;

        if $b4 > 0 goto label2;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        $r4 = (java.awt.BasicStroke) $r3;

        $r5 = virtualinvoke $r4.<java.awt.BasicStroke: float[] getDashArray()>();

        if $r5 != null goto label2;

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $z0 = virtualinvoke $r6.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label1;

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $i5 = virtualinvoke $r6.<java.awt.geom.AffineTransform: int getType()>();

        if $i5 != 1 goto label2;

     label1:
        $r2 = new java.awt.Point;

        specialinvoke $r2.<java.awt.Point: void <init>(int,int)>($i0, $i1);

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r6.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r2, $r2);

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.render.JavaArcRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(int,int,int,int,double,double,org.apache.harmony.awt.gl.MultiRectArea)>($i0, $i1, $i2, $i3, 0.0, 360.0, $r1);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectArea(org.apache.harmony.awt.gl.MultiRectArea)>($r1);

        return;

     label2:
        $r7 = new java.awt.geom.Ellipse2D$Float;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $f2 = (float) $i2;

        $f3 = (float) $i3;

        specialinvoke $r7.<java.awt.geom.Ellipse2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void draw(java.awt.Shape)>($r7);

        return;
    }

    public void drawPolygon(java.awt.Polygon)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Polygon $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Polygon;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void draw(java.awt.Shape)>($r1);

        return;
    }

    public void drawPolygon(int[], int[], int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int[] $r1, $r2;
        int $i0;
        java.awt.Polygon $r3;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $r3 = new java.awt.Polygon;

        specialinvoke $r3.<java.awt.Polygon: void <init>(int[],int[],int)>($r1, $r2, $i0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void draw(java.awt.Shape)>($r3);

        return;
    }

    public void drawPolyline(int[], int[], int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i2 = 0;

     label1:
        $i1 = $i0 - 1;

        if $i2 >= $i1 goto label2;

        $i3 = $r1[$i2];

        $i1 = $r2[$i2];

        $i4 = $i2 + 1;

        $i4 = $r1[$i4];

        $i5 = $i2 + 1;

        $i5 = $r2[$i5];

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void drawLine(int,int,int,int)>($i3, $i1, $i4, $i5);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.image.renderable.RenderableImage $r1;
        int $i0, $i1;
        java.awt.geom.AffineTransform $r2;
        double $d0, $d1, $d2;
        byte $b2;
        java.awt.image.RenderedImage $r3;
        float $f0;
        long $l3;
        java.lang.Object $r4;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.image.renderable.RenderableImage;

        $r2 := @parameter1: java.awt.geom.AffineTransform;

        if $r1 != null goto label1;

        return;

     label1:
        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleY()>();

        $b2 = $d0 cmpl 1.0;

        if $b2 != 0 goto label2;

        $b2 = $d1 cmpl 1.0;

        if $b2 != 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createDefaultRendering()>();

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r3, $r2);

        return;

     label2:
        $f0 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: float getWidth()>();

        $d2 = (double) $f0;

        $d0 = $d2 * $d0;

        $l3 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i1 = (int) $l3;

        $f0 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: float getHeight()>();

        $d0 = (double) $f0;

        $d1 = $d0 * $d1;

        $l3 = staticinvoke <java.lang.Math: long round(double)>($d1);

        $i0 = (int) $l3;

        $r4 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r2 = (java.awt.geom.AffineTransform) $r4;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void scale(double,double)>(1.0, 1.0);

        $r3 = interfaceinvoke $r1.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createScaledRendering(int,int,java.awt.RenderingHints)>($i1, $i0, null);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>($r3, $r2);

        return;
    }

    public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.image.RenderedImage $r1;
        java.awt.geom.AffineTransform $r2;
        boolean $z0;
        java.awt.Image $r3;
        java.awt.image.ColorModel $r4;
        java.awt.image.WritableRaster $r5;
        java.awt.image.BufferedImage r6;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.image.RenderedImage;

        $r2 := @parameter1: java.awt.geom.AffineTransform;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = $r1 instanceof java.awt.Image;

        if $z0 == 0 goto label3;

        $r3 = (java.awt.Image) $r1;

     label2:
        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)>($r3, $r2, null);

        return;

     label3:
        r6 = new java.awt.image.BufferedImage;

        $r3 = r6;

        $r4 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r5 = interfaceinvoke $r1.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(null);

        specialinvoke r6.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r4, $r5, 0, null);

        goto label2;
    }

    public void drawRoundRect(int, int, int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        boolean $z0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.awt.geom.RoundRectangle2D$Float $r4;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.drawRoundRect(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label1:
        $r4 = new java.awt.geom.RoundRectangle2D$Float;

        $f3 = (float) $i0;

        $f4 = (float) $i1;

        $f5 = (float) $i2;

        $f0 = (float) $i3;

        $f1 = (float) $i4;

        $f2 = (float) $i5;

        specialinvoke $r4.<java.awt.geom.RoundRectangle2D$Float: void <init>(float,float,float,float,float,float)>($f3, $f4, $f5, $f0, $f1, $f2);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void draw(java.awt.Shape)>($r4);

        return;
    }

    public void drawString(java.lang.String, float, float)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.lang.String $r1, $r5;
        float $f0, $f1;
        double[] $r2;
        boolean $z0;
        java.io.PrintStream $r3;
        java.lang.StringBuilder $r4;
        java.awt.geom.AffineTransform $r6, $r9;
        java.lang.Object $r7;
        java.awt.Font $r8;
        int $i0;
        org.apache.harmony.awt.gl.TextRenderer $r10;
        double $d0, $d1;
        java.awt.font.FontRenderContext $r11;
        java.awt.font.GlyphVector $r12;
        java.awt.Shape $r13;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.drawString(");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label1:
        $r6 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r7 = virtualinvoke $r6.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r6 = (java.awt.geom.AffineTransform) $r7;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Font font>;

        $r9 = virtualinvoke $r8.<java.awt.Font: java.awt.geom.AffineTransform getTransform()>();

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r9);

        $r2 = newarray (double)[6];

        $z0 = virtualinvoke $r6.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 != 0 goto label3;

        $i0 = virtualinvoke $r6.<java.awt.geom.AffineTransform: int getType()>();

        virtualinvoke $r6.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r2);

        if $i0 != 1 goto label2;

        $r10 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.TextRenderer jtr>;

        $d0 = (double) $f0;

        $d1 = virtualinvoke $r9.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d0 = $d0 + $d1;

        $f0 = (float) $d0;

        $d0 = (double) $f1;

        $d1 = virtualinvoke $r9.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d0 = $d0 + $d1;

        $f1 = (float) $d0;

        virtualinvoke $r10.<org.apache.harmony.awt.gl.TextRenderer: void drawString(java.awt.Graphics2D,java.lang.String,float,float)>($r0, $r1, $f0, $f1);

        return;

     label2:
        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Font font>;

        $r11 = virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        $r12 = virtualinvoke $r8.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>($r11, $r1);

        $r13 = virtualinvoke $r12.<java.awt.font.GlyphVector: java.awt.Shape getOutline(float,float)>($f0, $f1);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fill(java.awt.Shape)>($r13);

        return;

     label3:
        $r10 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.TextRenderer jtr>;

        virtualinvoke $r10.<org.apache.harmony.awt.gl.TextRenderer: void drawString(java.awt.Graphics2D,java.lang.String,float,float)>($r0, $r1, $f0, $f1);

        return;
    }

    public void drawString(java.lang.String, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.lang.String $r1;
        int $i0, $i1;
        float $f0, $f1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void drawString(java.lang.String,float,float)>($r1, $f0, $f1);

        return;
    }

    public void drawString(java.text.AttributedCharacterIterator, float, float)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.text.AttributedCharacterIterator $r1;
        float $f0, $f1;
        java.awt.Font $r2;
        java.awt.font.FontRenderContext $r3;
        java.awt.font.GlyphVector $r4;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.text.AttributedCharacterIterator;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Font font>;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.font.FontRenderContext frc>;

        $r4 = virtualinvoke $r2.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.text.CharacterIterator)>($r3, $r1);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void drawGlyphVector(java.awt.font.GlyphVector,float,float)>($r4, $f0, $f1);

        return;
    }

    public void drawString(java.text.AttributedCharacterIterator, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.text.AttributedCharacterIterator $r1;
        int $i0, $i1;
        float $f0, $f1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.text.AttributedCharacterIterator;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void drawString(java.text.AttributedCharacterIterator,float,float)>($r1, $f0, $f1);

        return;
    }

    public void fill(java.awt.Shape)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Shape $r1;
        java.awt.geom.AffineTransform $r2;
        org.apache.harmony.awt.gl.render.JavaShapeRasterizer $r3;
        org.apache.harmony.awt.gl.MultiRectArea $r4;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Shape;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r1 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.JavaShapeRasterizer jsr>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.awt.gl.render.JavaShapeRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(java.awt.Shape,double)>($r1, 0.5);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectArea(org.apache.harmony.awt.gl.MultiRectArea)>($r4);

        return;
    }

    public void fillArc(int, int, int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.geom.Arc2D$Float $r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 = new java.awt.geom.Arc2D$Float;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $f2 = (float) $i2;

        $f3 = (float) $i3;

        $f4 = (float) $i4;

        $f5 = (float) $i5;

        specialinvoke $r1.<java.awt.geom.Arc2D$Float: void <init>(float,float,float,float,float,float,int)>($f0, $f1, $f2, $f3, $f4, $f5, 2);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fill(java.awt.Shape)>($r1);

        return;
    }

    protected void fillMultiRectArea(org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        org.apache.harmony.awt.gl.MultiRectArea $r1, $r2;
        int[] $r3;
        int $i0;
        boolean $z0;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.awt.Paint $r7;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        if $r2 == null goto label1;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.MultiRectArea: void intersect(org.apache.harmony.awt.gl.MultiRectArea)>($r2);

     label1:
        $r3 = $r1.<org.apache.harmony.awt.gl.MultiRectArea: int[] rect>;

        $i0 = $r3[0];

        if $i0 >= 5 goto label2;

        return;

     label2:
        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label3;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.fillMultiRectArea(");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label3:
        $r7 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint paint>;

        $z0 = $r7 instanceof java.awt.Color;

        if $z0 == 0 goto label4;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectAreaColor(org.apache.harmony.awt.gl.MultiRectArea)>($r1);

        return;

     label4:
        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectAreaPaint(org.apache.harmony.awt.gl.MultiRectArea)>($r1);

        return;
    }

    protected void fillMultiRectAreaColor(org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        org.apache.harmony.awt.gl.MultiRectArea $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fillMultiRectAreaPaint(org.apache.harmony.awt.gl.MultiRectArea)>($r1);

        return;
    }

    protected void fillMultiRectAreaPaint(org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        org.apache.harmony.awt.gl.MultiRectArea $r1;
        org.apache.harmony.awt.gl.ImageSurface $r2;
        int $i0, $i1, $i2, $i3;
        java.awt.Rectangle $r3;
        java.awt.Paint $r4;
        java.awt.geom.AffineTransform $r5;
        java.awt.RenderingHints $r6;
        java.awt.PaintContext $r7;
        java.awt.image.Raster $r8;
        boolean $z0;
        java.awt.image.WritableRaster $r9, $r14;
        java.awt.image.ColorModel $r10;
        org.apache.harmony.awt.gl.render.Blitter $r11;
        org.apache.harmony.awt.gl.Surface $r12;
        java.awt.Composite $r13;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r3 = virtualinvoke $r1.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle getBounds()>();

        $i0 = $r3.<java.awt.Rectangle: int x>;

        $i1 = $r3.<java.awt.Rectangle: int y>;

        $i2 = $r3.<java.awt.Rectangle: int width>;

        $i3 = $r3.<java.awt.Rectangle: int height>;

        if $i2 <= 0 goto label4;

        if $i3 > 0 goto label1;

        return;

     label1:
        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint paint>;

        $r5 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r6 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints>;

        $r7 = interfaceinvoke $r4.<java.awt.Paint: java.awt.PaintContext createContext(java.awt.image.ColorModel,java.awt.Rectangle,java.awt.geom.Rectangle2D,java.awt.geom.AffineTransform,java.awt.RenderingHints)>(null, $r3, $r3, $r5, $r6);

        $r8 = interfaceinvoke $r7.<java.awt.PaintContext: java.awt.image.Raster getRaster(int,int,int,int)>($i0, $i1, $i2, $i3);

        $z0 = $r8 instanceof java.awt.image.WritableRaster;

        if $z0 == 0 goto label3;

        $r9 = (java.awt.image.WritableRaster) $r8;

     label2:
        $r2 = new org.apache.harmony.awt.gl.ImageSurface;

        $r10 = interfaceinvoke $r7.<java.awt.PaintContext: java.awt.image.ColorModel getColorModel()>();

        specialinvoke $r2.<org.apache.harmony.awt.gl.ImageSurface: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster)>($r10, $r9);

        $r11 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.Blitter blitter>;

        $r12 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r13 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        interfaceinvoke $r11.<org.apache.harmony.awt.gl.render.Blitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r2, $i0, $i1, $r12, $i2, $i3, $r13, null, $r1);

        virtualinvoke $r2.<org.apache.harmony.awt.gl.ImageSurface: void dispose()>();

        return;

     label3:
        $r14 = virtualinvoke $r8.<java.awt.image.Raster: java.awt.image.WritableRaster createCompatibleWritableRaster()>();

        $r9 = $r14;

        virtualinvoke $r14.<java.awt.image.WritableRaster: void setRect(java.awt.image.Raster)>($r8);

        goto label2;

     label4:
        return;
    }

    public void fillOval(int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        java.awt.geom.Ellipse2D$Float $r1;
        float $f0, $f1, $f2, $f3;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = new java.awt.geom.Ellipse2D$Float;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $f2 = (float) $i2;

        $f3 = (float) $i3;

        specialinvoke $r1.<java.awt.geom.Ellipse2D$Float: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fill(java.awt.Shape)>($r1);

        return;
    }

    public void fillPolygon(java.awt.Polygon)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Polygon $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Polygon;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fill(java.awt.Shape)>($r1);

        return;
    }

    public void fillPolygon(int[], int[], int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int[] $r1, $r2;
        int $i0;
        java.awt.Polygon $r3;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $r3 = new java.awt.Polygon;

        specialinvoke $r3.<java.awt.Polygon: void <init>(int[],int[],int)>($r1, $r2, $i0);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fill(java.awt.Shape)>($r3);

        return;
    }

    public void fillRect(int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.awt.Rectangle $r4;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.fillRect(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label1:
        $r4 = new java.awt.Rectangle;

        specialinvoke $r4.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fill(java.awt.Shape)>($r4);

        return;
    }

    public void fillRoundRect(int, int, int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        boolean $z0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.awt.geom.RoundRectangle2D$Float $r4;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.fillRoundRect(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label1:
        $r4 = new java.awt.geom.RoundRectangle2D$Float;

        $f3 = (float) $i0;

        $f4 = (float) $i1;

        $f5 = (float) $i2;

        $f0 = (float) $i3;

        $f1 = (float) $i4;

        $f2 = (float) $i5;

        specialinvoke $r4.<java.awt.geom.RoundRectangle2D$Float: void <init>(float,float,float,float,float,float)>($f3, $f4, $f5, $f0, $f1, $f2);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void fill(java.awt.Shape)>($r4);

        return;
    }

    public java.awt.Color getBackground()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Color r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color bgColor>;

        return r1;
    }

    public java.awt.Shape getClip()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        org.apache.harmony.awt.gl.MultiRectArea $r1, $r2;
        java.awt.geom.AffineTransform $r3;
        double $d0;
        float $f0;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = new org.apache.harmony.awt.gl.MultiRectArea;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        specialinvoke $r1.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(org.apache.harmony.awt.gl.MultiRectArea)>($r2);

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f0 = (float) $d0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i0 = neg $i0;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f0 = (float) $d0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i1 = neg $i1;

        virtualinvoke $r1.<org.apache.harmony.awt.gl.MultiRectArea: void translate(int,int)>($i0, $i1);

        return $r1;
    }

    public java.awt.Rectangle getClipBounds()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        org.apache.harmony.awt.gl.MultiRectArea $r1;
        java.awt.Rectangle $r2;
        java.lang.Object $r3;
        java.awt.geom.AffineTransform $r4;
        double $d0;
        float $f0;
        int $i0, $i1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.awt.gl.MultiRectArea: java.awt.Rectangle getBounds()>();

        $r3 = virtualinvoke $r2.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        $r2 = (java.awt.Rectangle) $r3;

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f0 = (float) $d0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i0 = neg $i0;

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f0 = (float) $d0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i1 = neg $i1;

        virtualinvoke $r2.<java.awt.Rectangle: void translate(int,int)>($i0, $i1);

        return $r2;
    }

    public java.awt.Color getColor()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Color r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color fgColor>;

        return r1;
    }

    public java.awt.Composite getComposite()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Composite r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite>;

        return r1;
    }

    public java.awt.Font getFont()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Font r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Font font>;

        return r1;
    }

    public java.awt.FontMetrics getFontMetrics(java.awt.Font)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Font $r1;
        java.awt.Toolkit $r2;
        java.awt.FontMetrics $r3;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Font;

        $r2 = staticinvoke <java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>();

        $r3 = virtualinvoke $r2.<java.awt.Toolkit: java.awt.FontMetrics getFontMetrics(java.awt.Font)>($r1);

        return $r3;
    }

    public java.awt.font.FontRenderContext getFontRenderContext()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.font.FontRenderContext r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.font.FontRenderContext frc>;

        return r1;
    }

    public java.awt.Paint getPaint()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Paint r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint paint>;

        return r1;
    }

    public java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.RenderingHints$Key $r1;
        java.lang.Object $r2;
        java.awt.RenderingHints $r3;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.RenderingHints$Key;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints>;

        $r2 = virtualinvoke $r3.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r1);

        return $r2;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.RenderingHints r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints>;

        return r1;
    }

    public java.awt.Stroke getStroke()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Stroke r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke>;

        return r1;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        java.awt.geom.AffineTransform $r0;
        java.lang.Object $r1;
        org.apache.harmony.awt.gl.CommonGraphics2D $r2;

        $r2 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r0 = $r2.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r1 = virtualinvoke $r0.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r0 = (java.awt.geom.AffineTransform) $r1;

        return $r0;
    }

    public boolean hit(java.awt.Rectangle, java.awt.Shape, boolean)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Rectangle $r1;
        java.awt.Shape $r2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Rectangle;

        $r2 := @parameter1: java.awt.Shape;

        $z0 := @parameter2: boolean;

        return 0;
    }

    public void rotate(double)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        double $d0;
        double[] $r1;
        java.awt.geom.AffineTransform $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $d0 := @parameter0: double;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void rotate(double)>($d0);

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r1);

        return;
    }

    public void rotate(double, double, double)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        double $d0, $d1, $d2;
        java.awt.geom.AffineTransform $r1;
        double[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void rotate(double,double,double)>($d0, $d1, $d2);

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r2);

        return;
    }

    public void scale(double, double)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        double $d0, $d1;
        double[] $r1;
        java.awt.geom.AffineTransform $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void scale(double,double)>($d0, $d1);

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r1);

        return;
    }

    public void setBackground(java.awt.Color)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Color $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Color;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color bgColor> = $r1;

        return;
    }

    public void setClip(int, int, int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        java.awt.Rectangle $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setClip(java.awt.Shape)>($r1);

        return;
    }

    public void setClip(java.awt.Shape)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Shape $r1;
        boolean $z0;
        java.io.PrintStream $r2;
        java.lang.StringBuilder $r3;
        java.awt.Rectangle $r4;
        java.lang.String $r5;
        org.apache.harmony.awt.gl.MultiRectArea $r6, $r7;
        java.awt.geom.AffineTransform $r8;
        double $d0;
        float $f0;
        int $i0, $i1;
        org.apache.harmony.awt.gl.render.JavaShapeRasterizer $r9;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Shape;

        if $r1 != null goto label1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)>(null);

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label6;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("CommonGraphics2D.setClip(null)");

        return;

     label1:
        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.setClip(");

        $r4 = interfaceinvoke $r1.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label2:
        $z0 = $r1 instanceof org.apache.harmony.awt.gl.MultiRectArea;

        if $z0 == 0 goto label3;

        $r6 = new org.apache.harmony.awt.gl.MultiRectArea;

        $r7 = (org.apache.harmony.awt.gl.MultiRectArea) $r1;

        specialinvoke $r6.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(org.apache.harmony.awt.gl.MultiRectArea)>($r7);

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r8.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f0 = (float) $d0;

        $i0 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r8.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f0 = (float) $d0;

        $i1 = staticinvoke <java.lang.Math: int round(float)>($f0);

        virtualinvoke $r6.<org.apache.harmony.awt.gl.MultiRectArea: void translate(int,int)>($i0, $i1);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)>($r6);

        return;

     label3:
        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $i0 = virtualinvoke $r8.<java.awt.geom.AffineTransform: int getType()>();

        $z0 = $r1 instanceof java.awt.Rectangle;

        if $z0 == 0 goto label5;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label5;

        $r6 = new org.apache.harmony.awt.gl.MultiRectArea;

        $r4 = (java.awt.Rectangle) $r1;

        specialinvoke $r6.<org.apache.harmony.awt.gl.MultiRectArea: void <init>(java.awt.Rectangle)>($r4);

        if $i0 != 1 goto label4;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r8.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $i0 = (int) $d0;

        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d0 = virtualinvoke $r8.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $i1 = (int) $d0;

        virtualinvoke $r6.<org.apache.harmony.awt.gl.MultiRectArea: void translate(int,int)>($i0, $i1);

     label4:
        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)>($r6);

        return;

     label5:
        $r8 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r1 = virtualinvoke $r8.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        $r9 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.render.JavaShapeRasterizer jsr>;

        $r6 = virtualinvoke $r9.<org.apache.harmony.awt.gl.render.JavaShapeRasterizer: org.apache.harmony.awt.gl.MultiRectArea rasterize(java.awt.Shape,double)>($r1, 0.5);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)>($r6);

        return;

     label6:
        return;
    }

    public void setColor(java.awt.Color)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Color $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Color;

        if $r1 == null goto label1;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color fgColor> = $r1;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint paint> = $r1;

        return;

     label1:
        return;
    }

    public void setComposite(java.awt.Composite)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Composite $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Composite;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite> = $r1;

        return;
    }

    public void setFont(java.awt.Font)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Font $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Font;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Font font> = $r1;

        return;
    }

    public void setPaint(java.awt.Paint)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        boolean $z0;
        java.awt.Paint $r1;
        java.awt.Color $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Paint;

        if $r1 != null goto label1;

        return;

     label1:
        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Paint paint> = $r1;

        $z0 = $r1 instanceof java.awt.Color;

        if $z0 == 0 goto label2;

        $r2 = (java.awt.Color) $r1;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Color fgColor> = $r2;

        return;

     label2:
        return;
    }

    public void setPaintMode()
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.AlphaComposite $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite> = $r1;

        return;
    }

    public void setRenderingHint(java.awt.RenderingHints$Key, java.lang.Object)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.RenderingHints$Key $r1;
        java.lang.Object $r2;
        java.awt.RenderingHints $r3;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.RenderingHints$Key;

        $r2 := @parameter1: java.lang.Object;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints>;

        virtualinvoke $r3.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    public void setRenderingHints(java.util.Map)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.util.Map $r1;
        java.awt.RenderingHints $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.util.Map;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints>;

        virtualinvoke $r2.<java.awt.RenderingHints: void clear()>();

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.RenderingHints hints>;

        virtualinvoke $r2.<java.awt.RenderingHints: void putAll(java.util.Map)>($r1);

        return;
    }

    public void setStroke(java.awt.Stroke)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Stroke $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Stroke;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Stroke stroke> = $r1;

        return;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.geom.AffineTransform $r1;
        double[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.geom.AffineTransform;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform> = $r1;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r2);

        return;
    }

    protected void setTransformedClip(org.apache.harmony.awt.gl.MultiRectArea)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        org.apache.harmony.awt.gl.MultiRectArea $r1;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: org.apache.harmony.awt.gl.MultiRectArea;

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip> = $r1;

        return;
    }

    public void setXORMode(java.awt.Color)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.Color $r1;
        org.apache.harmony.awt.gl.XORComposite $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.Color;

        $r2 = new org.apache.harmony.awt.gl.XORComposite;

        specialinvoke $r2.<org.apache.harmony.awt.gl.XORComposite: void <init>(java.awt.Color)>($r1);

        $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.Composite composite> = $r2;

        return;
    }

    public void shear(double, double)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        double $d0, $d1;
        double[] $r1;
        java.awt.geom.AffineTransform $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void shear(double,double)>($d0, $d1);

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix>;

        virtualinvoke $r2.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r1);

        return;
    }

    public void transform(java.awt.geom.AffineTransform)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        java.awt.geom.AffineTransform $r1, $r3;
        double[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $r1 := @parameter0: java.awt.geom.AffineTransform;

        $r3 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r3.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r1);

        $r1 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r2 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix>;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r2);

        return;
    }

    public void translate(double, double)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        double $d0, $d1;
        boolean $z0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.awt.geom.AffineTransform $r4;
        double[] $r5;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.translate(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label1:
        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d0, $d1);

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r5 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix>;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r5);

        return;
    }

    public void translate(int, int)
    {
        org.apache.harmony.awt.gl.CommonGraphics2D $r0;
        int $i0, $i1;
        double $d0, $d1;
        boolean $z0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.awt.geom.AffineTransform $r4;
        double[] $r5;

        $r0 := @this: org.apache.harmony.awt.gl.CommonGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = <org.apache.harmony.awt.gl.CommonGraphics2D: boolean debugOutput>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CommonGraphics2D.translate(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

     label1:
        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $d1 = (double) $i0;

        $d0 = (double) $i1;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void translate(double,double)>($d1, $d0);

        $r4 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: java.awt.geom.AffineTransform transform>;

        $r5 = $r0.<org.apache.harmony.awt.gl.CommonGraphics2D: double[] matrix>;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r5);

        return;
    }
}
