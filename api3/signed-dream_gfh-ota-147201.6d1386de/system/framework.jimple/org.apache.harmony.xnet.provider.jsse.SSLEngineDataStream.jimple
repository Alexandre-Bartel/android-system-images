public class org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream extends java.lang.Object implements org.apache.harmony.xnet.provider.jsse.DataStream
{
    private int available;
    private int consumed;
    private int limit;
    private int offset;
    private java.nio.ByteBuffer[] srcs;

    protected void <init>()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int available()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream;

        i0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available>;

        return i0;
    }

    protected int consumed()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream;

        i0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int consumed>;

        return i0;
    }

    public byte[] getData(int)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r0;
        int $i0, $i1, $i2, $i3;
        byte[] $r1;
        java.nio.ByteBuffer[] $r2;
        java.nio.ByteBuffer $r3;
        boolean $z0;
        byte $b4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream;

        $i0 := @parameter0: int;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available>;

        if $i0 >= $i2 goto label4;

     label1:
        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available>;

        $i2 = $i2 - $i0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available> = $i2;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int consumed>;

        $i2 = $i2 + $i0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int consumed> = $i2;

        $r1 = newarray (byte)[$i0];

        $i2 = 0;

     label2:
        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int offset>;

        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int limit>;

        if $i1 >= $i3 goto label7;

     label3:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: java.nio.ByteBuffer[] srcs>;

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int offset>;

        $r3 = $r2[$i1];

        $z0 = virtualinvoke $r3.<java.nio.Buffer: boolean hasRemaining()>();

        if $z0 == 0 goto label5;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: java.nio.ByteBuffer[] srcs>;

        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int offset>;

        $r3 = $r2[$i3];

        $b4 = virtualinvoke $r3.<java.nio.ByteBuffer: byte get()>();

        $r1[$i2] = $b4;

        $i0 = $i0 + -1;

        if $i0 != 0 goto label6;

        return $r1;

     label4:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available>;

        goto label1;

     label5:
        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int offset>;

        $i1 = $i1 + 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int offset> = $i1;

        goto label2;

     label6:
        $i2 = $i2 + 1;

        goto label3;

     label7:
        return $r1;
    }

    public boolean hasData()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream;

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void setSourceBuffers(java.nio.ByteBuffer[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0, $i1, $i2;
        java.nio.ByteBuffer $r2;
        java.lang.IllegalStateException $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: java.nio.ByteBuffer[] srcs> = $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int offset> = $i0;

        $i1 = $i0 + $i1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int limit> = $i1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int consumed> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available> = 0;

     label1:
        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int limit>;

        if $i0 >= $i1 goto label3;

        $r2 = $r1[$i0];

        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some of the input parameters are null");

        throw $r3;

     label2:
        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available>;

        $r2 = $r1[$i0];

        $i1 = virtualinvoke $r2.<java.nio.Buffer: int remaining()>();

        $i1 = $i2 + $i1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available> = $i1;

        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }
}
