public class org.bouncycastle.asn1.x509.KeyUsage extends org.bouncycastle.asn1.DERBitString
{
    public static final int cRLSign;
    public static final int dataEncipherment;
    public static final int decipherOnly;
    public static final int digitalSignature;
    public static final int encipherOnly;
    public static final int keyAgreement;
    public static final int keyCertSign;
    public static final int keyEncipherment;
    public static final int nonRepudiation;

    public void <init>(int)
    {
        org.bouncycastle.asn1.x509.KeyUsage $r0;
        int $i0;
        byte[] $r1;

        $r0 := @this: org.bouncycastle.asn1.x509.KeyUsage;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <org.bouncycastle.asn1.x509.KeyUsage: byte[] getBytes(int)>($i0);

        $i0 = staticinvoke <org.bouncycastle.asn1.x509.KeyUsage: int getPadBits(int)>($i0);

        specialinvoke $r0.<org.bouncycastle.asn1.DERBitString: void <init>(byte[],int)>($r1, $i0);

        return;
    }

    public void <init>(org.bouncycastle.asn1.DERBitString)
    {
        org.bouncycastle.asn1.x509.KeyUsage $r0;
        org.bouncycastle.asn1.DERBitString $r1;
        byte[] $r2;
        int $i0;

        $r0 := @this: org.bouncycastle.asn1.x509.KeyUsage;

        $r1 := @parameter0: org.bouncycastle.asn1.DERBitString;

        $r2 = virtualinvoke $r1.<org.bouncycastle.asn1.DERBitString: byte[] getBytes()>();

        $i0 = virtualinvoke $r1.<org.bouncycastle.asn1.DERBitString: int getPadBits()>();

        specialinvoke $r0.<org.bouncycastle.asn1.DERBitString: void <init>(byte[],int)>($r2, $i0);

        return;
    }

    public java.lang.String toString()
    {
        org.bouncycastle.asn1.x509.KeyUsage $r0;
        byte[] $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        byte $b1;
        short $s2;
        java.lang.String $r3;

        $r0 := @this: org.bouncycastle.asn1.x509.KeyUsage;

        $r1 = $r0.<org.bouncycastle.asn1.DERBitString: byte[] data>;

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeyUsage: 0x");

        $r1 = $r0.<org.bouncycastle.asn1.DERBitString: byte[] data>;

        $b1 = $r1[0];

        $s2 = $b1 & 255;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s2);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("KeyUsage: 0x");

        $r1 = $r0.<org.bouncycastle.asn1.DERBitString: byte[] data>;

        $b1 = $r1[1];

        $s2 = $b1 & 255;

        $i0 = $s2 << 8;

        $r1 = $r0.<org.bouncycastle.asn1.DERBitString: byte[] data>;

        $b1 = $r1[0];

        $s2 = $b1 & 255;

        $i0 = $i0 | $s2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.asn1.x509.KeyUsage: int nonRepudiation> = 64;

        <org.bouncycastle.asn1.x509.KeyUsage: int keyEncipherment> = 32;

        <org.bouncycastle.asn1.x509.KeyUsage: int keyCertSign> = 4;

        <org.bouncycastle.asn1.x509.KeyUsage: int keyAgreement> = 8;

        <org.bouncycastle.asn1.x509.KeyUsage: int encipherOnly> = 1;

        <org.bouncycastle.asn1.x509.KeyUsage: int digitalSignature> = 128;

        <org.bouncycastle.asn1.x509.KeyUsage: int decipherOnly> = 32768;

        <org.bouncycastle.asn1.x509.KeyUsage: int dataEncipherment> = 16;

        <org.bouncycastle.asn1.x509.KeyUsage: int cRLSign> = 2;

        return;
    }
}
