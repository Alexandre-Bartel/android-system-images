public abstract class org.apache.commons.logging.LogFactory extends java.lang.Object
{
    public static final java.lang.String DIAGNOSTICS_DEST_PROPERTY;
    public static final java.lang.String FACTORY_DEFAULT;
    public static final java.lang.String FACTORY_PROPERTIES;
    public static final java.lang.String FACTORY_PROPERTY;
    public static final java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY;
    public static final java.lang.String PRIORITY_KEY;
    protected static final java.lang.String SERVICE_ID;
    public static final java.lang.String TCCL_KEY;
    private static final java.lang.String WEAK_HASHTABLE_CLASSNAME;
    private static java.lang.String diagnosticPrefix;
    private static java.io.PrintStream diagnosticsStream;
    protected static java.util.Hashtable factories;
    protected static org.apache.commons.logging.LogFactory nullClassLoaderFactory;
    private static java.lang.ClassLoader thisClassLoader;

    static void <clinit>()
    {
        java.lang.ClassLoader $r0;
        java.util.Hashtable $r1;
        boolean $z0;

        <org.apache.commons.logging.LogFactory: java.lang.String WEAK_HASHTABLE_CLASSNAME> = "org.apache.commons.logging.impl.WeakHashtable";

        <org.apache.commons.logging.LogFactory: java.lang.String TCCL_KEY> = "use_tccl";

        <org.apache.commons.logging.LogFactory: java.lang.String SERVICE_ID> = "META-INF/services/org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String PRIORITY_KEY> = "priority";

        <org.apache.commons.logging.LogFactory: java.lang.String HASHTABLE_IMPLEMENTATION_PROPERTY> = "org.apache.commons.logging.LogFactory.HashtableImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTY> = "org.apache.commons.logging.LogFactory";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_PROPERTIES> = "commons-logging.properties";

        <org.apache.commons.logging.LogFactory: java.lang.String FACTORY_DEFAULT> = "org.apache.commons.logging.impl.LogFactoryImpl";

        <org.apache.commons.logging.LogFactory: java.lang.String DIAGNOSTICS_DEST_PROPERTY> = "org.apache.commons.logging.diagnostics.dest";

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = null;

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = null;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader> = $r0;

        staticinvoke <org.apache.commons.logging.LogFactory: void initDiagnostics()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logClassLoaderEnvironment(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Hashtable createFactoryStore()>();

        <org.apache.commons.logging.LogFactory: java.util.Hashtable factories> = $r1;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("BOOTSTRAP COMPLETED");

        return;

     label1:
        return;
    }

    protected void <init>()
    {
        org.apache.commons.logging.LogFactory $r0;

        $r0 := @this: org.apache.commons.logging.LogFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000(java.lang.String)
    {
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r0);

        return;
    }

    private static void cacheFactory(java.lang.ClassLoader, org.apache.commons.logging.LogFactory)
    {
        java.lang.ClassLoader $r0;
        org.apache.commons.logging.LogFactory $r1;
        java.util.Hashtable $r2;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r1 := @parameter1: org.apache.commons.logging.LogFactory;

        if $r1 == null goto label2;

        if $r0 != null goto label1;

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = $r1;

        return;

     label1:
        $r2 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r1);

        return;

     label2:
        return;
    }

    protected static java.lang.Object createFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.ClassLoader $r0, $r11;
        java.lang.Class $r1, $r3, $r4, $r5;
        java.lang.String $r2, $r7;
        boolean $z0;
        java.lang.StringBuilder $r6;
        java.lang.Object $r8;
        org.apache.commons.logging.LogFactory $r9;
        org.apache.commons.logging.LogConfigurationException $r10;
        java.lang.ClassNotFoundException $r12;
        java.lang.Exception $r13;
        java.lang.NoClassDefFoundError $r14;
        java.lang.ClassCastException $r15;

        $r2 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.ClassLoader;

        $r1 = class "org/apache/commons/logging/LogFactory";

        $r3 = null;

        if $r0 == null goto label25;

     label01:
        $r4 = virtualinvoke $r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r2);

     label02:
        $r3 = $r4;

     label03:
        $r5 = class "org/apache/commons/logging/LogFactory";

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label07;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label04;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loaded class ");

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from classloader ");

        $r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r7);

     label04:
        $r8 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

     label05:
        $r9 = (org.apache.commons.logging.LogFactory) $r8;

     label06:
        return $r9;

     label07:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label04;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Factory class ");

        $r7 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" loaded from classloader ");

        $r11 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r11);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not extend \'");

        $r5 = class "org/apache/commons/logging/LogFactory";

        $r7 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as loaded by this classloader.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r7);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[BAD CL TREE] ", $r0);

     label08:
        goto label04;

     label09:
        $r12 := @caughtexception;

        $r11 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if $r0 != $r11 goto label25;

     label10:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label11;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to locate any class called \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via classloader ");

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r2);

     label11:
        throw $r12;

     label12:
        $r13 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label13;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Unable to create LogFactory instance.");

     label13:
        if $r3 == null goto label28;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 != 0 goto label28;

        $r10 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r10.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("The chosen LogFactory implementation does not extend LogFactory. Please check your configuration.", $r13);

        return $r10;

     label14:
        $r14 := @caughtexception;

        $r11 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if $r0 != $r11 goto label25;

     label15:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label16;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be loaded");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" via classloader ");

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - it depends on some other class that cannot");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" be found.");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r2);

     label16:
        throw $r14;

     label17:
        $r15 := @caughtexception;

        $r11 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

     label18:
        if $r0 != $r11 goto label25;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean implementsLogFactory(java.lang.Class)>($r3);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The application has specified that a custom LogFactory implementation should be used but Class \'");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be converted to \'");

        $r4 = class "org/apache/commons/logging/LogFactory";

        $r2 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. ");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label19:
        if $z0 == 0 goto label23;

     label20:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The conflict is caused by the presence of multiple LogFactory classes in incompatible classloaders. ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Background can be found in http://jakarta.apache.org/commons/logging/tech.html. ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("If you have not explicitly specified a custom LogFactory then it is likely that ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the container has set one without your knowledge. ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("In this case, consider using the commons-logging-adapters.jar file or ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("specifying the standard LogFactory from the command line. ");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Help can be found @http://jakarta.apache.org/commons/logging/troubleshooting.html.");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label22;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r2);

     label22:
        $r15 = new java.lang.ClassCastException;

        specialinvoke $r15.<java.lang.ClassCastException: void <init>(java.lang.String)>($r2);

        throw $r15;

     label23:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Please check the custom implementation. ");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label24:
        goto label21;

     label25:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label26;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to load factory class via classloader ");

        $r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - trying the classloader associated with this LogFactory.");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r7);

     label26:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

        $r3 = $r4;

        $r8 = virtualinvoke $r4.<java.lang.Class: java.lang.Object newInstance()>();

        $r9 = (org.apache.commons.logging.LogFactory) $r8;

     label27:
        return $r9;

     label28:
        $r10 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r10.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r13);

        return $r10;

        catch java.lang.ClassNotFoundException from label01 to label02 with label09;
        catch java.lang.ClassNotFoundException from label03 to label05 with label09;
        catch java.lang.ClassNotFoundException from label07 to label08 with label09;
        catch java.lang.NoClassDefFoundError from label01 to label02 with label14;
        catch java.lang.NoClassDefFoundError from label03 to label06 with label14;
        catch java.lang.NoClassDefFoundError from label07 to label08 with label14;
        catch java.lang.ClassCastException from label01 to label02 with label17;
        catch java.lang.ClassCastException from label03 to label06 with label17;
        catch java.lang.ClassCastException from label07 to label08 with label17;
        catch java.lang.Exception from label01 to label02 with label12;
        catch java.lang.Exception from label03 to label05 with label12;
        catch java.lang.Exception from label07 to label08 with label12;
        catch java.lang.Exception from label10 to label12 with label12;
        catch java.lang.Exception from label15 to label17 with label12;
        catch java.lang.Exception from label18 to label19 with label12;
        catch java.lang.Exception from label20 to label21 with label12;
        catch java.lang.Exception from label21 to label24 with label12;
        catch java.lang.Exception from label25 to label27 with label12;
    }

    private static final java.util.Hashtable createFactoryStore()
    {
        java.util.Hashtable $r0;
        java.lang.String $r1, $r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        boolean $z0;
        java.io.PrintStream $r6;

        $r0 = null;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory.HashtableImpl");

        $r2 = $r1;

        if $r1 != null goto label1;

        $r2 = "org.apache.commons.logging.impl.WeakHashtable";

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        $r0 = (java.util.Hashtable) $r4;

     label2:
        if $r0 != null goto label5;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        return $r0;

     label3:
        $r5 := @caughtexception;

        $r1 = "org.apache.commons.logging.impl.WeakHashtable";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label4;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

        goto label2;

     label4:
        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("[ERROR] LogFactory: Load of custom hashtable failed");

        goto label2;

     label5:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected static java.lang.ClassLoader directGetContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class $r0;
        java.lang.reflect.Method $r1;
        java.lang.Thread $r2;
        java.lang.Object $r3;
        java.lang.ClassLoader $r4;
        java.lang.IllegalAccessException $r5;
        org.apache.commons.logging.LogConfigurationException $r6;
        java.lang.NoSuchMethodException $r7;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.Throwable $r9;
        boolean $z0;

        $r0 = class "java/lang/Thread";

     label01:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getContextClassLoader", null);

     label02:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, null);

     label03:
        $r4 = (java.lang.ClassLoader) $r3;

        return $r4;

     label04:
        $r5 := @caughtexception;

        $r6 = new org.apache.commons.logging.LogConfigurationException;

     label05:
        specialinvoke $r6.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected IllegalAccessException", $r5);

     label06:
        throw $r6;

     label07:
        $r7 := @caughtexception;

        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/LogFactory");

        return $r4;

     label08:
        $r8 := @caughtexception;

     label09:
        $r9 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label10:
        $z0 = $r9 instanceof java.lang.SecurityException;

        if $z0 != 0 goto label13;

     label11:
        $r6 = new org.apache.commons.logging.LogConfigurationException;

        $r9 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        specialinvoke $r6.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected InvocationTargetException", $r9);

     label12:
        throw $r6;

     label13:
        return null;

        catch java.lang.NoSuchMethodException from label01 to label02 with label07;
        catch java.lang.IllegalAccessException from label02 to label03 with label04;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label08;
        catch java.lang.NoSuchMethodException from label02 to label03 with label07;
        catch java.lang.NoSuchMethodException from label05 to label06 with label07;
        catch java.lang.NoSuchMethodException from label09 to label10 with label07;
        catch java.lang.NoSuchMethodException from label11 to label12 with label07;
    }

    private static org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)
    {
        java.lang.ClassLoader $r0;
        java.util.Hashtable $r1;
        java.lang.Object $r2;
        org.apache.commons.logging.LogFactory $r3;

        $r0 := @parameter0: java.lang.ClassLoader;

        if $r0 != null goto label1;

        $r3 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        return $r3;

     label1:
        $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        $r3 = (org.apache.commons.logging.LogFactory) $r2;

        return $r3;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.SecurityException $r1;
        java.lang.ClassLoader $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: java.lang.Class;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label2:
        return $r2;

     label3:
        $r1 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to get classloader for class \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' due to security restrictions - ");

        $r4 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

     label4:
        throw $r1;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private static final java.util.Properties getConfigurationFile(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader $r0;
        java.lang.String $r1, $r8;
        java.util.Properties $r2, $r7;
        double $d0, $d1;
        java.net.URL $r3, $r6;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r9;
        java.lang.SecurityException $r10;
        byte $b0;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r1 := @parameter1: java.lang.String;

        $r2 = null;

        $d0 = 0.0;

        $r3 = null;

     label01:
        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Enumeration getResources(java.lang.ClassLoader,java.lang.String)>($r0, $r1);

        if $r4 != null goto label03;

     label02:
        return null;

     label03:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label11;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (java.net.URL) $r5;

        $r7 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getProperties(java.net.URL)>($r6);

        if $r7 == null goto label03;

        if $r2 != null goto label13;

     label04:
        $r3 = $r6;

     label05:
        $r2 = $r7;

        $r8 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

     label06:
        $d0 = 0.0;

     label07:
        if $r8 == null goto label08;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

     label08:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label03;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file found at \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8);

     label09:
        goto label03;

     label10:
        $r10 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label11;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("SecurityException thrown while trying to find/read config files.");

     label11:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label12;

        if $r2 != null goto label24;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] No properties file of name \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found.");

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r1);

     label12:
        return $r2;

     label13:
        $r8 = virtualinvoke $r7.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("priority");

     label14:
        $d1 = 0.0;

     label15:
        if $r8 == null goto label16;

        $d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r8);

     label16:
        $b0 = $d1 cmpl $d0;

     label17:
        if $b0 <= 0 goto label22;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

     label18:
        if $z0 == 0 goto label20;

     label19:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file at \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" overrides file at \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8);

     label20:
        $r3 = $r6;

        $r2 = $r7;

        $d0 = $d1;

     label21:
        goto label03;

     label22:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label03;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file at \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not override file at \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with priority ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r8 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8);

     label23:
        goto label03;

     label24:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file of name \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' found at \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r1);

        goto label12;

        catch java.lang.SecurityException from label01 to label02 with label10;
        catch java.lang.SecurityException from label03 to label04 with label10;
        catch java.lang.SecurityException from label05 to label06 with label10;
        catch java.lang.SecurityException from label07 to label09 with label10;
        catch java.lang.SecurityException from label13 to label14 with label10;
        catch java.lang.SecurityException from label15 to label16 with label10;
        catch java.lang.SecurityException from label17 to label18 with label10;
        catch java.lang.SecurityException from label19 to label20 with label10;
        catch java.lang.SecurityException from label21 to label23 with label10;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Object $r0;
        org.apache.commons.logging.LogFactory$1 $r1;
        java.lang.ClassLoader $r2;

        $r1 = new org.apache.commons.logging.LogFactory$1;

        specialinvoke $r1.<org.apache.commons.logging.LogFactory$1: void <init>()>();

        $r0 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $r2 = (java.lang.ClassLoader) $r0;

        return $r2;
    }

    public static org.apache.commons.logging.LogFactory getFactory() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader $r0, $r6;
        boolean $z0;
        org.apache.commons.logging.LogFactory $r1, $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r8;
        java.util.Properties $r5;
        java.lang.Boolean $r7;
        java.io.InputStream $r9;
        java.io.BufferedReader $r10;
        java.io.InputStreamReader $r11;
        java.util.Enumeration $r12;
        java.lang.Object $r13;
        java.lang.SecurityException $r14;
        java.lang.RuntimeException $r15;
        java.io.UnsupportedEncodingException $r16;
        java.lang.Exception $r17;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>();

        if $r0 != null goto label01;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Context classloader is null.");

     label01:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory getCachedFactory(java.lang.ClassLoader)>($r0);

        $r2 = $r1;

        if $r1 == null goto label02;

        return $r1;

     label02:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label03;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] LogFactory implementation requested for the first time for context classloader ");

        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[LOOKUP] ", $r0);

     label03:
        $r5 = staticinvoke <org.apache.commons.logging.LogFactory: java.util.Properties getConfigurationFile(java.lang.ClassLoader,java.lang.String)>($r0, "commons-logging.properties");

        $r6 = $r0;

        if $r5 == null goto label04;

        $r4 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("use_tccl");

        if $r4 == null goto label04;

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r4);

        $z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label04;

        $r6 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

     label04:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label05;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for system property [org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label05:
        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

        if $r4 == null goto label23;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label06;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Creating an instance of LogFactory class \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as specified by system property ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.commons.logging.LogFactory");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8);

     label06:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>($r4, $r6, $r0);

     label07:
        $r2 = $r1;

     label08:
        if $r2 != null goto label32;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label09;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking for a resource file of name [META-INF/services/org.apache.commons.logging.LogFactory] to define the LogFactory subclass to use...");

     label09:
        $r9 = staticinvoke <org.apache.commons.logging.LogFactory: java.io.InputStream getResourceAsStream(java.lang.ClassLoader,java.lang.String)>($r0, "META-INF/services/org.apache.commons.logging.LogFactory");

     label10:
        if $r9 == null goto label31;

        $r10 = new java.io.BufferedReader;

        $r11 = new java.io.InputStreamReader;

     label11:
        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r9, "UTF-8");

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>($r11);

     label12:
        $r4 = virtualinvoke $r10.<java.io.BufferedReader: java.lang.String readLine()>();

        virtualinvoke $r10.<java.io.BufferedReader: void close()>();

     label13:
        if $r4 == null goto label32;

     label14:
        $r8 = "";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label32;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label15;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP]  Creating an instance of LogFactory class ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as specified by file \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("META-INF/services/org.apache.commons.logging.LogFactory");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' which was present in the path of the context");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" classloader.");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8);

     label15:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>($r4, $r6, $r0);

     label16:
        if $r1 != null goto label35;

        if $r5 == null goto label36;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label17;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Looking in properties file for entry with key \'org.apache.commons.logging.LogFactory\' to define the LogFactory subclass to use...");

     label17:
        $r4 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.LogFactory");

        if $r4 == null goto label34;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label18;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] Properties file specifies LogFactory subclass \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r8);

     label18:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>($r4, $r6, $r0);

     label19:
        if $r1 != null goto label21;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label20;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Loading the default LogFactory implementation \'org.apache.commons.logging.impl.LogFactoryImpl\' via the same classloader that loaded this LogFactory class (ie not looking in the context classloader).");

     label20:
        $r6 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>("org.apache.commons.logging.impl.LogFactoryImpl", $r6, $r0);

     label21:
        if $r1 == null goto label37;

        staticinvoke <org.apache.commons.logging.LogFactory: void cacheFactory(java.lang.ClassLoader,org.apache.commons.logging.LogFactory)>($r0, $r1);

        if $r5 == null goto label37;

        $r12 = virtualinvoke $r5.<java.util.Properties: java.util.Enumeration propertyNames()>();

     label22:
        $z0 = interfaceinvoke $r12.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label37;

        $r13 = interfaceinvoke $r12.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = (java.lang.String) $r13;

        $r8 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        virtualinvoke $r1.<org.apache.commons.logging.LogFactory: void setAttribute(java.lang.String,java.lang.Object)>($r4, $r8);

        goto label22;

     label23:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label24;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No system property [org.apache.commons.logging.LogFactory] defined.");

     label24:
        goto label07;

     label25:
        $r14 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label08;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r4 = virtualinvoke $r14.<java.lang.Throwable: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

        goto label08;

     label26:
        $r15 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label27;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] An exception occurred while trying to create an instance of the custom factory class: [");

        $r4 = virtualinvoke $r15.<java.lang.Throwable: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as specified by a system property.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

     label27:
        throw $r15;

     label28:
        $r16 := @caughtexception;

        $r10 = new java.io.BufferedReader;

        $r11 = new java.io.InputStreamReader;

     label29:
        specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r9);

        specialinvoke $r10.<java.io.BufferedReader: void <init>(java.io.Reader)>($r11);

     label30:
        goto label12;

     label31:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label32;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No resource file with name \'META-INF/services/org.apache.commons.logging.LogFactory\' found.");

     label32:
        $r1 = $r2;

        goto label16;

     label33:
        $r17 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label32;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LOOKUP] A security exception occurred while trying to create an instance of the custom factory class: [");

        $r4 = virtualinvoke $r17.<java.lang.Throwable: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. Trying alternative implementations...");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

        goto label32;

     label34:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label35;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] Properties file has no entry specifying LogFactory subclass.");

     label35:
        goto label19;

     label36:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label35;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[LOOKUP] No properties file available to determine LogFactory subclass from..");

        goto label35;

     label37:
        return $r1;

        catch java.lang.SecurityException from label05 to label07 with label25;
        catch java.lang.RuntimeException from label05 to label07 with label26;
        catch java.lang.Exception from label09 to label10 with label33;
        catch java.io.UnsupportedEncodingException from label11 to label12 with label28;
        catch java.lang.Exception from label11 to label12 with label33;
        catch java.lang.Exception from label12 to label13 with label33;
        catch java.lang.Exception from label14 to label16 with label33;
        catch java.lang.SecurityException from label23 to label24 with label25;
        catch java.lang.RuntimeException from label23 to label24 with label26;
        catch java.lang.Exception from label29 to label30 with label33;
        catch java.lang.Exception from label30 to label32 with label33;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        org.apache.commons.logging.Log $r2;

        $r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.String)>($r1);

        return $r2;
    }

    public static org.apache.commons.logging.Log getLog(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String $r0;
        org.apache.commons.logging.impl.Jdk14Logger $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new org.apache.commons.logging.impl.Jdk14Logger;

        specialinvoke $r1.<org.apache.commons.logging.impl.Jdk14Logger: void <init>(java.lang.String)>($r0);

        return $r1;
    }

    private static java.util.Properties getProperties(java.net.URL)
    {
        org.apache.commons.logging.LogFactory$5 $r0;
        java.lang.Object $r1;
        java.net.URL $r2;
        java.util.Properties $r3;

        $r2 := @parameter0: java.net.URL;

        $r0 = new org.apache.commons.logging.LogFactory$5;

        specialinvoke $r0.<org.apache.commons.logging.LogFactory$5: void <init>(java.net.URL)>($r2);

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r3 = (java.util.Properties) $r1;

        return $r3;
    }

    private static java.io.InputStream getResourceAsStream(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.String $r0;
        org.apache.commons.logging.LogFactory$3 $r1;
        java.lang.Object $r2;
        java.lang.ClassLoader $r3;
        java.io.InputStream $r4;

        $r3 := @parameter0: java.lang.ClassLoader;

        $r0 := @parameter1: java.lang.String;

        $r1 = new org.apache.commons.logging.LogFactory$3;

        specialinvoke $r1.<org.apache.commons.logging.LogFactory$3: void <init>(java.lang.ClassLoader,java.lang.String)>($r3, $r0);

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $r4 = (java.io.InputStream) $r2;

        return $r4;
    }

    private static java.util.Enumeration getResources(java.lang.ClassLoader, java.lang.String)
    {
        java.lang.ClassLoader $r0;
        java.lang.String $r1;
        org.apache.commons.logging.LogFactory$4 $r2;
        java.lang.Object $r3;
        java.util.Enumeration $r4;

        $r0 := @parameter0: java.lang.ClassLoader;

        $r1 := @parameter1: java.lang.String;

        $r2 = new org.apache.commons.logging.LogFactory$4;

        specialinvoke $r2.<org.apache.commons.logging.LogFactory$4: void <init>(java.lang.ClassLoader,java.lang.String)>($r0, $r1);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r2);

        $r4 = (java.util.Enumeration) $r3;

        return $r4;
    }

    private static boolean implementsLogFactory(java.lang.Class)
    {
        java.lang.Class $r0, $r2;
        boolean $z0, $z1;
        java.lang.ClassLoader $r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.lang.SecurityException $r5;
        java.lang.LinkageError $r6;
        java.lang.ClassNotFoundException $r7;

        $r0 := @parameter0: java.lang.Class;

        $z0 = 0;

        if $r0 == null goto label14;

     label01:
        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 != null goto label03;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] was loaded by the boot classloader");

     label02:
        return 0;

     label03:
        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>("[CUSTOM LOG FACTORY] ", $r1);

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("org.apache.commons.logging.LogFactory", 0, $r1);

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r0);

     label04:
        $z0 = $z1;

     label05:
        if $z1 == 0 goto label09;

     label06:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] ");

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implements LogFactory but was loaded by an incompatible classloader.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

     label07:
        return $z1;

     label08:
        $r5 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] SecurityException thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r4 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

        return $z0;

     label09:
        $r3 = new java.lang.StringBuilder;

     label10:
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] ");

        $r4 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement LogFactory.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

     label11:
        return $z1;

     label12:
        $r6 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[CUSTOM LOG FACTORY] LinkageError thrown whilst trying to determine whether the compatibility was caused by a classloader conflict: ");

        $r4 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

        return $z0;

     label13:
        $r7 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[CUSTOM LOG FACTORY] LogFactory class cannot be loaded by classloader which loaded the custom LogFactory implementation. Is the custom factory in the right classloader?");

        return $z0;

     label14:
        return 0;

        catch java.lang.SecurityException from label01 to label02 with label08;
        catch java.lang.SecurityException from label03 to label04 with label08;
        catch java.lang.SecurityException from label06 to label07 with label08;
        catch java.lang.LinkageError from label01 to label02 with label12;
        catch java.lang.LinkageError from label03 to label04 with label12;
        catch java.lang.LinkageError from label05 to label07 with label12;
        catch java.lang.ClassNotFoundException from label01 to label02 with label13;
        catch java.lang.ClassNotFoundException from label03 to label04 with label13;
        catch java.lang.ClassNotFoundException from label06 to label07 with label13;
        catch java.lang.SecurityException from label10 to label11 with label08;
        catch java.lang.LinkageError from label09 to label11 with label12;
        catch java.lang.ClassNotFoundException from label10 to label11 with label13;
    }

    private static void initDiagnostics()
    {
        java.lang.ClassLoader $r0, $r5;
        java.io.FileOutputStream $r1;
        java.lang.String $r2;
        java.lang.SecurityException $r3, $r8;
        boolean $z0;
        java.io.PrintStream $r4;
        java.lang.StringBuilder $r6;
        java.io.IOException $r7;

     label01:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.diagnostics.dest");

     label02:
        if $r2 != null goto label04;

        return;

     label03:
        $r3 := @caughtexception;

        return;

     label04:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("STDOUT");

        if $z0 == 0 goto label07;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r4;

     label05:
        $r0 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        $r5 = <org.apache.commons.logging.LogFactory: java.lang.ClassLoader thisClassLoader>;

        if $r5 != null goto label12;

        $r2 = "BOOTLOADER";

     label06:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LogFactory from ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix> = $r2;

        return;

     label07:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("STDERR");

        if $z0 == 0 goto label08;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r4;

        goto label05;

     label08:
        $r1 = new java.io.FileOutputStream;

     label09:
        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>($r2, 1);

        $r4 = new java.io.PrintStream;

        specialinvoke $r4.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r1);

     label10:
        <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream> = $r4;

        goto label05;

     label11:
        $r7 := @caughtexception;

        return;

     label12:
        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r0);

     label13:
        goto label06;

     label14:
        $r8 := @caughtexception;

        $r2 = "UNKNOWN";

        goto label06;

        catch java.lang.SecurityException from label01 to label02 with label03;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.SecurityException from label12 to label13 with label14;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        java.io.PrintStream $r0;

        $r0 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private static void logClassLoaderEnvironment(java.lang.Class)
    {
        java.lang.Class $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r4;
        java.lang.ClassLoader $r3;
        java.lang.SecurityException $r5, $r6;

        $r0 := @parameter0: java.lang.Class;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

     label2:
        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Extension directories (java.ext.dir): ");

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.ext.dir");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r2);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Application classpath (java.class.path): ");

        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r2);

     label3:
        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

     label4:
        $r3 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r0);

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Class ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was loaded via classloader ");

        $r4 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r4);

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Ancestry of classloader which loaded ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logHierarchy(java.lang.String,java.lang.ClassLoader)>($r2, $r3);

        return;

     label6:
        $r5 := @caughtexception;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("[ENV] Security setting prevent interrogation of system classpaths.");

        goto label3;

     label7:
        $r6 := @caughtexception;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Security forbids determining the classloader for ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r2);

        return;

        catch java.lang.SecurityException from label2 to label3 with label6;
        catch java.lang.SecurityException from label4 to label5 with label7;
    }

    private static final void logDiagnostic(java.lang.String)
    {
        java.lang.String $r0, $r1;
        java.io.PrintStream $r2;

        $r0 := @parameter0: java.lang.String;

        $r2 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r2 == null goto label1;

        $r2 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        $r1 = <org.apache.commons.logging.LogFactory: java.lang.String diagnosticPrefix>;

        virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r1);

        $r2 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r0);

        $r2 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r2.<java.io.PrintStream: void flush()>();

        return;

     label1:
        return;
    }

    private static void logHierarchy(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String $r0, $r3, $r5;
        java.lang.StringBuffer $r1;
        java.lang.ClassLoader $r2, $r6, $r7;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.SecurityException $r8, $r9;

        $r0 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        if $r2 == null goto label02;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r5 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r3);

     label02:
        $r6 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label03:
        if $r2 == null goto label10;

        $r1 = new java.lang.StringBuffer;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClassLoader tree:");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>($r0);

     label04:
        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r2);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r0);

        if $r2 != $r6 goto label05;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (SYSTEM) ");

     label05:
        $r7 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

     label06:
        $r2 = $r7;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> ");

        if $r7 != null goto label04;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("BOOT");

     label07:
        $r0 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r0);

        return;

     label08:
        $r8 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Security forbids determining the system classloader.");

        $r0 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r0);

        return;

     label09:
        $r9 := @caughtexception;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" --> SECRET");

        goto label07;

     label10:
        return;

        catch java.lang.SecurityException from label02 to label03 with label08;
        catch java.lang.SecurityException from label05 to label06 with label09;
    }

    protected static final void logRawDiagnostic(java.lang.String)
    {
        java.lang.String $r0;
        java.io.PrintStream $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        if $r1 == null goto label1;

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r0);

        $r1 = <org.apache.commons.logging.LogFactory: java.io.PrintStream diagnosticsStream>;

        virtualinvoke $r1.<java.io.PrintStream: void flush()>();

        return;

     label1:
        return;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.String $r0;
        java.lang.ClassLoader $r1;
        org.apache.commons.logging.LogFactory $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory newFactory(java.lang.String,java.lang.ClassLoader,java.lang.ClassLoader)>($r0, $r1, null);

        return $r2;
    }

    protected static org.apache.commons.logging.LogFactory newFactory(java.lang.String, java.lang.ClassLoader, java.lang.ClassLoader) throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.String $r0;
        java.lang.ClassLoader $r1, $r2;
        org.apache.commons.logging.LogFactory$2 $r3;
        java.lang.Object $r4;
        boolean $z0;
        org.apache.commons.logging.LogConfigurationException $r5;
        java.lang.StringBuilder $r6;
        org.apache.commons.logging.LogFactory $r7;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.ClassLoader;

        $r2 := @parameter2: java.lang.ClassLoader;

        $r3 = new org.apache.commons.logging.LogFactory$2;

        specialinvoke $r3.<org.apache.commons.logging.LogFactory$2: void <init>(java.lang.String,java.lang.ClassLoader)>($r0, $r1);

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);

        $z0 = $r4 instanceof org.apache.commons.logging.LogConfigurationException;

        if $z0 == 0 goto label2;

        $r5 = (org.apache.commons.logging.LogConfigurationException) $r4;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("An error occurred while loading the factory class:");

        $r0 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r0);

     label1:
        throw $r5;

     label2:
        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created object ");

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to manage classloader ");

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r0);

     label3:
        $r7 = (org.apache.commons.logging.LogFactory) $r4;

        return $r7;
    }

    public static java.lang.String objectId(java.lang.Object)
    {
        java.lang.Object $r0;
        java.lang.StringBuilder $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        int $i0;

        $r0 := @parameter0: java.lang.Object;

        if $r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static void release(java.lang.ClassLoader)
    {
        java.lang.ClassLoader $r0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.util.Hashtable $r3, $r5;
        org.apache.commons.logging.LogFactory $r4;
        java.lang.Object $r6;
        java.lang.Throwable $r7;

        $r0 := @parameter0: java.lang.ClassLoader;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Releasing factory for classloader ");

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.String objectId(java.lang.Object)>($r0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>($r2);

     label1:
        $r3 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        entermonitor $r3;

        if $r0 != null goto label5;

     label2:
        $r4 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r4 == null goto label3;

        $r4 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r4.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

     label3:
        exitmonitor $r3;

     label4:
        return;

     label5:
        $r5 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r6 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (org.apache.commons.logging.LogFactory) $r6;

        if $r4 == null goto label3;

        virtualinvoke $r4.<org.apache.commons.logging.LogFactory: void release()>();

        $r5 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r0);

        goto label3;

     label6:
        $r7 := @caughtexception;

        exitmonitor $r3;

     label7:
        throw $r7;

        catch java.lang.Throwable from label2 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    public static void releaseAll()
    {
        boolean $z0;
        java.util.Hashtable $r0, $r1;
        java.util.Enumeration $r2;
        java.lang.Object $r3;
        org.apache.commons.logging.LogFactory $r4;
        java.lang.Throwable $r5;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        staticinvoke <org.apache.commons.logging.LogFactory: void logDiagnostic(java.lang.String)>("Releasing factory for all classloaders.");

     label1:
        $r0 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        entermonitor $r0;

     label2:
        $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Enumeration elements()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r4 = (org.apache.commons.logging.LogFactory) $r3;

        virtualinvoke $r4.<org.apache.commons.logging.LogFactory: void release()>();

        goto label3;

     label4:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r5;

     label6:
        $r1 = <org.apache.commons.logging.LogFactory: java.util.Hashtable factories>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        $r4 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        if $r4 == null goto label7;

        $r4 = <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory>;

        virtualinvoke $r4.<org.apache.commons.logging.LogFactory: void release()>();

        <org.apache.commons.logging.LogFactory: org.apache.commons.logging.LogFactory nullClassLoaderFactory> = null;

     label7:
        exitmonitor $r0;

     label8:
        return;

        catch java.lang.Throwable from label2 to label5 with label4;
        catch java.lang.Throwable from label6 to label8 with label4;
    }

    public abstract java.lang.Object getAttribute(java.lang.String);

    public abstract java.lang.String[] getAttributeNames();

    public abstract org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException;

    public abstract org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException;

    public abstract void release();

    public abstract void removeAttribute(java.lang.String);

    public abstract void setAttribute(java.lang.String, java.lang.Object);
}
