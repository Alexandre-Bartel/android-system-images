public class android.test.mock.MockPackageManager extends android.content.pm.PackageManager
{

    public void <init>()
    {
        android.test.mock.MockPackageManager $r0;

        $r0 := @this: android.test.mock.MockPackageManager;

        specialinvoke $r0.<android.content.pm.PackageManager: void <init>()>();

        return;
    }

    public void addPackageToPreferred(java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public boolean addPermission(android.content.pm.PermissionInfo)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.pm.PermissionInfo $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.pm.PermissionInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.IntentFilter $r1;
        int $i0;
        android.content.ComponentName[] $r2;
        android.content.ComponentName $r3;
        java.lang.UnsupportedOperationException $r4;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.IntentFilter;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.content.ComponentName[];

        $r3 := @parameter3: android.content.ComponentName;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public int checkPermission(java.lang.String, java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1, $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int checkSignatures(java.lang.String, java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1, $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        android.content.pm.IPackageDataObserver $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.pm.IPackageDataObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void clearPackagePreferredActivities(java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void deleteApplicationCacheFiles(java.lang.String, android.content.pm.IPackageDataObserver)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        android.content.pm.IPackageDataObserver $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.pm.IPackageDataObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void deletePackage(java.lang.String, android.content.pm.IPackageDeleteObserver, int)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        android.content.pm.IPackageDeleteObserver $r2;
        int $i0;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.pm.IPackageDeleteObserver;

        $i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void freeStorage(long, android.app.PendingIntent)
    {
        android.test.mock.MockPackageManager $r0;
        long $l0;
        android.app.PendingIntent $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $l0 := @parameter0: long;

        $r1 := @parameter1: android.app.PendingIntent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void freeStorageAndNotify(long, android.content.pm.IPackageDataObserver)
    {
        android.test.mock.MockPackageManager $r0;
        long $l0;
        android.content.pm.IPackageDataObserver $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $l0 := @parameter0: long;

        $r1 := @parameter1: android.content.pm.IPackageDataObserver;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getActivityIcon(android.content.Intent) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        android.content.Intent $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.Intent;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List getAllPermissionGroups(int)
    {
        android.test.mock.MockPackageManager $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getApplicationEnabledSetting(java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.pm.ApplicationInfo $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getApplicationIcon(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.pm.ApplicationInfo $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getComponentEnabledSetting(android.content.ComponentName)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.graphics.drawable.Drawable getDefaultActivityIcon()
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.graphics.drawable.Drawable getDrawable(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        android.content.pm.ApplicationInfo $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.content.pm.ApplicationInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.util.List getInstalledApplications(int)
    {
        android.test.mock.MockPackageManager $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List getInstalledPackages(int)
    {
        android.test.mock.MockPackageManager $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.Intent getLaunchIntentForPackage(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String getNameForUid(int)
    {
        android.test.mock.MockPackageManager $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String, int)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int[] getPackageGids(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PackageInfo getPackageInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void getPackageSizeInfo(java.lang.String, android.content.pm.IPackageStatsObserver)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        android.content.pm.IPackageStatsObserver $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.content.pm.IPackageStatsObserver;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public java.lang.String[] getPackagesForUid(int)
    {
        android.test.mock.MockPackageManager $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public int getPreferredActivities(java.util.List, java.util.List, java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.util.List $r1, $r2;
        java.lang.String $r3;
        java.lang.UnsupportedOperationException $r4;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.util.List;

        $r2 := @parameter1: java.util.List;

        $r3 := @parameter2: java.lang.String;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public java.util.List getPreferredPackages(int)
    {
        android.test.mock.MockPackageManager $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.Resources getResourcesForActivity(android.content.ComponentName) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.pm.ApplicationInfo $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.pm.ApplicationInfo;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.Resources getResourcesForApplication(java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.lang.String[] getSystemSharedLibraryNames()
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.CharSequence getText(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        android.content.pm.ApplicationInfo $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.content.pm.ApplicationInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int getUidForSharedUser(java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.res.XmlResourceParser getXml(java.lang.String, int, android.content.pm.ApplicationInfo)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        android.content.pm.ApplicationInfo $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: android.content.pm.ApplicationInfo;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public void installPackage(android.net.Uri)
    {
        android.test.mock.MockPackageManager $r0;
        android.net.Uri $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.net.Uri;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void installPackage(android.net.Uri, android.content.pm.IPackageInstallObserver, int)
    {
        android.test.mock.MockPackageManager $r0;
        android.net.Uri $r1;
        android.content.pm.IPackageInstallObserver $r2;
        int $i0;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: android.content.pm.IPackageInstallObserver;

        $i0 := @parameter2: int;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public boolean isSafeMode()
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.util.List queryBroadcastReceivers(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.Intent $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.Intent;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryContentProviders(java.lang.String, int, int)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryInstrumentation(java.lang.String, int)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryIntentActivities(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.Intent $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.Intent;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryIntentActivityOptions(android.content.ComponentName, android.content.Intent[], android.content.Intent, int)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        android.content.Intent[] $r2;
        android.content.Intent $r3;
        int $i0;
        java.lang.UnsupportedOperationException $r4;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $r2 := @parameter1: android.content.Intent[];

        $r3 := @parameter2: android.content.Intent;

        $i0 := @parameter3: int;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;
    }

    public java.util.List queryIntentServices(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.Intent $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.Intent;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public java.util.List queryPermissionsByGroup(java.lang.String, int) throws android.content.pm.PackageManager$NameNotFoundException
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void removePackageFromPreferred(java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void removePermission(java.lang.String)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ResolveInfo resolveActivity(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.Intent $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.Intent;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, int)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public android.content.pm.ResolveInfo resolveService(android.content.Intent, int)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.Intent $r1;
        int $i0;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.Intent;

        $i0 := @parameter1: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setApplicationEnabledSetting(java.lang.String, int, int)
    {
        android.test.mock.MockPackageManager $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }

    public void setComponentEnabledSetting(android.content.ComponentName, int, int)
    {
        android.test.mock.MockPackageManager $r0;
        android.content.ComponentName $r1;
        int $i0, $i1;
        java.lang.UnsupportedOperationException $r2;

        $r0 := @this: android.test.mock.MockPackageManager;

        $r1 := @parameter0: android.content.ComponentName;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r2;
    }
}
