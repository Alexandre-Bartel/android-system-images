class android.webkit.DataLoader extends android.webkit.StreamLoader
{
    private java.lang.String mContentType;

    void <init>(java.lang.String, android.webkit.LoadListener)
    {
        android.webkit.DataLoader $r0;
        java.lang.String $r1, $r3;
        android.webkit.LoadListener $r2;
        int $i0;
        java.io.ByteArrayInputStream $r4;
        byte[] $r5;
        long $l1;

        $r0 := @this: android.webkit.DataLoader;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: android.webkit.LoadListener;

        specialinvoke $r0.<android.webkit.StreamLoader: void <init>(android.webkit.LoadListener)>($r2);

        $r3 = "data:";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(44);

        if $i0 == -1 goto label2;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r0.<android.webkit.DataLoader: java.lang.String mContentType> = $r3;

        $i0 = $i0 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

     label1:
        $r4 = new java.io.ByteArrayInputStream;

        $r5 = virtualinvoke $r1.<java.lang.String: byte[] getBytes()>();

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r0.<android.webkit.StreamLoader: java.io.InputStream mDataStream> = $r4;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $l1 = (long) $i0;

        $r0.<android.webkit.StreamLoader: long mContentLength> = $l1;

        return;

     label2:
        goto label1;
    }

    public static void requestUrl(java.lang.String, android.webkit.LoadListener)
    {
        java.lang.String $r0;
        android.webkit.LoadListener $r1;
        android.webkit.DataLoader $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: android.webkit.LoadListener;

        $r2 = new android.webkit.DataLoader;

        specialinvoke $r2.<android.webkit.DataLoader: void <init>(java.lang.String,android.webkit.LoadListener)>($r0, $r1);

        virtualinvoke $r2.<android.webkit.StreamLoader: void load()>();

        return;
    }

    protected void buildHeaders(android.net.http.Headers)
    {
        android.webkit.DataLoader $r0;
        android.net.http.Headers $r1;
        java.lang.String $r2;

        $r0 := @this: android.webkit.DataLoader;

        $r1 := @parameter0: android.net.http.Headers;

        $r2 = $r0.<android.webkit.DataLoader: java.lang.String mContentType>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.webkit.DataLoader: java.lang.String mContentType>;

        virtualinvoke $r1.<android.net.http.Headers: void setContentType(java.lang.String)>($r2);

        return;

     label1:
        return;
    }

    protected boolean setupStreamAndSendStatus()
    {
        android.webkit.DataLoader $r0;
        android.webkit.LoadListener $r1;

        $r0 := @this: android.webkit.DataLoader;

        $r1 = $r0.<android.webkit.StreamLoader: android.webkit.LoadListener mHandler>;

        virtualinvoke $r1.<android.webkit.LoadListener: void status(int,int,int,java.lang.String)>(1, 1, 0, "OK");

        return 1;
    }
}
