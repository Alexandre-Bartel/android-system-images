public class org.apache.http.impl.io.ChunkedInputStream extends java.io.InputStream
{
    private boolean bof;
    private final org.apache.http.util.CharArrayBuffer buffer;
    private int chunkSize;
    private boolean closed;
    private boolean eof;
    private org.apache.http.Header[] footers;
    private org.apache.http.io.SessionInputBuffer in;
    private int pos;

    public void <init>(org.apache.http.io.SessionInputBuffer)
    {
        org.apache.http.impl.io.ChunkedInputStream $r0;
        org.apache.http.io.SessionInputBuffer $r1;
        org.apache.http.Header[] $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.util.CharArrayBuffer $r4;

        $r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        specialinvoke $r0.<java.io.InputStream: void <init>()>();

        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean bof> = 1;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 0;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed> = 0;

        $r2 = newarray (org.apache.http.Header)[0];

        $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] footers> = $r2;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session input buffer may not be null");

        throw $r3;

     label1:
        $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in> = $r1;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos> = 0;

        $r4 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r4.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(16);

        $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer> = $r4;

        return;
    }

    static void exhaustInputStream(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        byte[] $r1;
        int $i0;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = newarray (byte)[1024];

     label1:
        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r1);

        if $i0 >= 0 goto label1;

        return;
    }

    private int getChunkSize() throws java.io.IOException
    {
        org.apache.http.impl.io.ChunkedInputStream $r0;
        boolean $z0;
        org.apache.http.io.SessionInputBuffer $r1;
        int $i0, $i1;
        org.apache.http.MalformedChunkCodingException $r2;
        org.apache.http.util.CharArrayBuffer $r3;
        java.lang.String $r4;
        java.lang.NumberFormatException $r5;

        $r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean bof>;

        if $z0 != 0 goto label2;

        $r1 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i0 = interfaceinvoke $r1.<org.apache.http.io.SessionInputBuffer: int read()>();

        $r1 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i1 = interfaceinvoke $r1.<org.apache.http.io.SessionInputBuffer: int read()>();

        if $i0 != 13 goto label1;

        if $i1 == 10 goto label2;

     label1:
        $r2 = new org.apache.http.MalformedChunkCodingException;

        specialinvoke $r2.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>("CRLF expected at end of chunk");

        throw $r2;

     label2:
        $r3 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        virtualinvoke $r3.<org.apache.http.util.CharArrayBuffer: void clear()>();

        $r1 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $r3 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        $i0 = interfaceinvoke $r1.<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>($r3);

        if $i0 != -1 goto label3;

        $r2 = new org.apache.http.MalformedChunkCodingException;

        specialinvoke $r2.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>("Chunked stream ended unexpectedly");

        throw $r2;

     label3:
        $r3 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        $i0 = virtualinvoke $r3.<org.apache.http.util.CharArrayBuffer: int indexOf(int)>(59);

        $i1 = $i0;

        if $i0 >= 0 goto label4;

        $r3 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

        $i1 = virtualinvoke $r3.<org.apache.http.util.CharArrayBuffer: int length()>();

     label4:
        $r3 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.util.CharArrayBuffer buffer>;

     label5:
        $r4 = virtualinvoke $r3.<org.apache.http.util.CharArrayBuffer: java.lang.String substringTrimmed(int,int)>(0, $i1);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, 16);

     label6:
        return $i0;

     label7:
        $r5 := @caughtexception;

        $r2 = new org.apache.http.MalformedChunkCodingException;

        specialinvoke $r2.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>("Bad chunk header");

        throw $r2;

        catch java.lang.NumberFormatException from label5 to label6 with label7;
    }

    private void nextChunk() throws java.io.IOException
    {
        org.apache.http.impl.io.ChunkedInputStream $r0;
        int $i0;
        org.apache.http.MalformedChunkCodingException $r1;

        $r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $i0 = specialinvoke $r0.<org.apache.http.impl.io.ChunkedInputStream: int getChunkSize()>();

        $r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize> = $i0;

        $i0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        if $i0 >= 0 goto label1;

        $r1 = new org.apache.http.MalformedChunkCodingException;

        specialinvoke $r1.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>("Negative chunk size");

        throw $r1;

     label1:
        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean bof> = 0;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos> = 0;

        $i0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        if $i0 != 0 goto label2;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 1;

        specialinvoke $r0.<org.apache.http.impl.io.ChunkedInputStream: void parseTrailerHeaders()>();

        return;

     label2:
        return;
    }

    private void parseTrailerHeaders() throws java.io.IOException
    {
        org.apache.http.impl.io.ChunkedInputStream $r0;
        org.apache.http.MalformedChunkCodingException $r1;
        org.apache.http.io.SessionInputBuffer $r2;
        org.apache.http.Header[] $r3;
        org.apache.http.HttpException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;

        $r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $r2 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

     label1:
        $r3 = staticinvoke <org.apache.http.impl.io.AbstractMessageParser: org.apache.http.Header[] parseHeaders(org.apache.http.io.SessionInputBuffer,int,int,org.apache.http.message.LineParser)>($r2, -1, -1, null);

     label2:
        $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] footers> = $r3;

        return;

     label3:
        $r4 := @caughtexception;

        $r1 = new org.apache.http.MalformedChunkCodingException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid footer: ");

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>($r6);

        staticinvoke <org.apache.http.util.ExceptionUtils: void initCause(java.lang.Throwable,java.lang.Throwable)>($r1, $r4);

        throw $r1;

        catch org.apache.http.HttpException from label1 to label2 with label3;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.impl.io.ChunkedInputStream $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed>;

        if $z0 != 0 goto label4;

     label1:
        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z0 != 0 goto label2;

        staticinvoke <org.apache.http.impl.io.ChunkedInputStream: void exhaustInputStream(java.io.InputStream)>($r0);

     label2:
        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 1;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed> = 1;

        return;

     label3:
        $r1 := @caughtexception;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof> = 1;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed> = 1;

        throw $r1;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public org.apache.http.Header[] getFooters()
    {
        org.apache.http.Header[] $r0;
        java.lang.Object $r1;
        org.apache.http.impl.io.ChunkedInputStream $r2;

        $r2 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $r0 = $r2.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.Header[] footers>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (org.apache.http.Header[]) $r1;

        $r0 = (org.apache.http.Header[]) $r0;

        return $r0;
    }

    public int read() throws java.io.IOException
    {
        org.apache.http.impl.io.ChunkedInputStream $r0;
        int $i0, $i1;
        boolean $z0;
        java.io.IOException $r1;
        org.apache.http.io.SessionInputBuffer $r2;

        $r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r1;

     label1:
        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z0 == 0 goto label2;

        return -1;

     label2:
        $i0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i1 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        if $i0 < $i1 goto label3;

        specialinvoke $r0.<org.apache.http.impl.io.ChunkedInputStream: void nextChunk()>();

        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z0 == 0 goto label3;

        return -1;

     label3:
        $i0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i0 = $i0 + 1;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos> = $i0;

        $r2 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i0 = interfaceinvoke $r2.<org.apache.http.io.SessionInputBuffer: int read()>();

        return $i0;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.ChunkedInputStream $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r0.<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.ChunkedInputStream $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        java.io.IOException $r2;
        org.apache.http.io.SessionInputBuffer $r3;

        $r0 := @this: org.apache.http.impl.io.ChunkedInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r2;

     label1:
        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z0 == 0 goto label2;

        return -1;

     label2:
        $i2 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i3 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        if $i2 < $i3 goto label3;

        specialinvoke $r0.<org.apache.http.impl.io.ChunkedInputStream: void nextChunk()>();

        $z0 = $r0.<org.apache.http.impl.io.ChunkedInputStream: boolean eof>;

        if $z0 == 0 goto label3;

        return -1;

     label3:
        $i2 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int chunkSize>;

        $i3 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i2 = $i2 - $i3;

        $i1 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r3 = $r0.<org.apache.http.impl.io.ChunkedInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i0 = interfaceinvoke $r3.<org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>($r1, $i0, $i1);

        $i1 = $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos>;

        $i1 = $i1 + $i0;

        $r0.<org.apache.http.impl.io.ChunkedInputStream: int pos> = $i1;

        return $i0;
    }
}
