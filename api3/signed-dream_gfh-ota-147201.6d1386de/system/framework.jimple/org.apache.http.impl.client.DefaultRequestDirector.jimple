public class org.apache.http.impl.client.DefaultRequestDirector extends java.lang.Object implements org.apache.http.client.RequestDirector
{
    protected final org.apache.http.conn.ClientConnectionManager connManager;
    protected final org.apache.http.protocol.HttpProcessor httpProcessor;
    protected final org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy;
    private final org.apache.commons.logging.Log log;
    protected org.apache.http.conn.ManagedClientConnection managedConn;
    private int maxRedirects;
    protected final org.apache.http.params.HttpParams params;
    private final org.apache.http.client.AuthenticationHandler proxyAuthHandler;
    private final org.apache.http.auth.AuthState proxyAuthState;
    private int redirectCount;
    protected final org.apache.http.client.RedirectHandler redirectHandler;
    protected final org.apache.http.protocol.HttpRequestExecutor requestExec;
    protected final org.apache.http.client.HttpRequestRetryHandler retryHandler;
    protected final org.apache.http.ConnectionReuseStrategy reuseStrategy;
    protected final org.apache.http.conn.routing.HttpRoutePlanner routePlanner;
    private final org.apache.http.client.AuthenticationHandler targetAuthHandler;
    private final org.apache.http.auth.AuthState targetAuthState;
    private final org.apache.http.client.UserTokenHandler userTokenHandler;

    public void <init>(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.protocol.HttpRequestExecutor $r1;
        org.apache.http.conn.ClientConnectionManager $r2;
        org.apache.http.ConnectionReuseStrategy $r3;
        org.apache.http.conn.ConnectionKeepAliveStrategy $r4;
        org.apache.http.conn.routing.HttpRoutePlanner $r5;
        org.apache.http.protocol.HttpProcessor $r6;
        org.apache.http.client.HttpRequestRetryHandler $r7;
        org.apache.http.client.RedirectHandler $r8;
        org.apache.http.client.AuthenticationHandler $r9, $r10;
        org.apache.http.client.UserTokenHandler $r11;
        org.apache.http.params.HttpParams $r12;
        java.lang.Class $r13;
        org.apache.commons.logging.Log $r14;
        java.lang.IllegalArgumentException $r15;
        int $i0;
        org.apache.http.auth.AuthState $r16;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.protocol.HttpRequestExecutor;

        $r2 := @parameter1: org.apache.http.conn.ClientConnectionManager;

        $r3 := @parameter2: org.apache.http.ConnectionReuseStrategy;

        $r4 := @parameter3: org.apache.http.conn.ConnectionKeepAliveStrategy;

        $r5 := @parameter4: org.apache.http.conn.routing.HttpRoutePlanner;

        $r6 := @parameter5: org.apache.http.protocol.HttpProcessor;

        $r7 := @parameter6: org.apache.http.client.HttpRequestRetryHandler;

        $r8 := @parameter7: org.apache.http.client.RedirectHandler;

        $r9 := @parameter8: org.apache.http.client.AuthenticationHandler;

        $r10 := @parameter9: org.apache.http.client.AuthenticationHandler;

        $r11 := @parameter10: org.apache.http.client.UserTokenHandler;

        $r12 := @parameter11: org.apache.http.params.HttpParams;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r13 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r13);

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log> = $r14;

        if $r1 != null goto label01;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request executor may not be null.");

        throw $r15;

     label01:
        if $r2 != null goto label02;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Client connection manager may not be null.");

        throw $r15;

     label02:
        if $r3 != null goto label03;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection reuse strategy may not be null.");

        throw $r15;

     label03:
        if $r4 != null goto label04;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection keep alive strategy may not be null.");

        throw $r15;

     label04:
        if $r5 != null goto label05;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Route planner may not be null.");

        throw $r15;

     label05:
        if $r6 != null goto label06;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP protocol processor may not be null.");

        throw $r15;

     label06:
        if $r7 != null goto label07;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request retry handler may not be null.");

        throw $r15;

     label07:
        if $r8 != null goto label08;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Redirect handler may not be null.");

        throw $r15;

     label08:
        if $r9 != null goto label09;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target authentication handler may not be null.");

        throw $r15;

     label09:
        if $r10 != null goto label10;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Proxy authentication handler may not be null.");

        throw $r15;

     label10:
        if $r11 != null goto label11;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("User token handler may not be null.");

        throw $r15;

     label11:
        if $r12 != null goto label12;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r15;

     label12:
        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.protocol.HttpRequestExecutor requestExec> = $r1;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ClientConnectionManager connManager> = $r2;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.ConnectionReuseStrategy reuseStrategy> = $r3;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy> = $r4;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoutePlanner routePlanner> = $r5;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.protocol.HttpProcessor httpProcessor> = $r6;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.HttpRequestRetryHandler retryHandler> = $r7;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.RedirectHandler redirectHandler> = $r8;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler targetAuthHandler> = $r9;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler proxyAuthHandler> = $r10;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.UserTokenHandler userTokenHandler> = $r11;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params> = $r12;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn> = null;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: int redirectCount> = 0;

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        $i0 = interfaceinvoke $r12.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.protocol.max-redirects", 100);

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: int maxRedirects> = $i0;

        $r16 = new org.apache.http.auth.AuthState;

        specialinvoke $r16.<org.apache.http.auth.AuthState: void <init>()>();

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState targetAuthState> = $r16;

        $r16 = new org.apache.http.auth.AuthState;

        specialinvoke $r16.<org.apache.http.auth.AuthState: void <init>()>();

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState> = $r16;

        return;
    }

    private void abortConnection()
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        java.io.IOException $r1, $r2;
        org.apache.http.conn.ManagedClientConnection $r3;
        org.apache.commons.logging.Log $r4;
        boolean $z0;
        java.lang.String $r5;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r3 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        if $r3 == null goto label6;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn> = null;

     label1:
        interfaceinvoke $r3.<org.apache.http.conn.ManagedClientConnection: void abortConnection()>();

     label2:
        interfaceinvoke $r3.<org.apache.http.conn.ManagedClientConnection: void releaseConnection()>();

     label3:
        return;

     label4:
        $r1 := @caughtexception;

        $r4 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r4.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r4 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r5 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r5, $r1);

        goto label2;

     label5:
        $r2 := @caughtexception;

        $r4 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r4.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("Error releasing connection", $r2);

        return;

     label6:
        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label5;
    }

    private void processChallenges(java.util.Map, org.apache.http.auth.AuthState, org.apache.http.client.AuthenticationHandler, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.MalformedChallengeException, org.apache.http.auth.AuthenticationException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        java.util.Map $r1;
        org.apache.http.auth.AuthState $r2;
        org.apache.http.client.AuthenticationHandler $r3;
        org.apache.http.HttpResponse $r4;
        org.apache.http.protocol.HttpContext $r5;
        org.apache.http.auth.AuthScheme $r6, $r7;
        java.lang.String $r8, $r10;
        java.util.Locale $r9;
        java.lang.Object $r11;
        org.apache.http.Header $r12;
        org.apache.http.auth.AuthenticationException $r13;
        java.lang.StringBuilder $r14;
        org.apache.commons.logging.Log $r15;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: java.util.Map;

        $r2 := @parameter1: org.apache.http.auth.AuthState;

        $r3 := @parameter2: org.apache.http.client.AuthenticationHandler;

        $r4 := @parameter3: org.apache.http.HttpResponse;

        $r5 := @parameter4: org.apache.http.protocol.HttpContext;

        $r6 = virtualinvoke $r2.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        $r7 = $r6;

        if $r6 != null goto label1;

        $r6 = interfaceinvoke $r3.<org.apache.http.client.AuthenticationHandler: org.apache.http.auth.AuthScheme selectScheme(java.util.Map,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r1, $r4, $r5);

        $r7 = $r6;

        virtualinvoke $r2.<org.apache.http.auth.AuthState: void setAuthScheme(org.apache.http.auth.AuthScheme)>($r6);

     label1:
        $r8 = interfaceinvoke $r7.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r9 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r10 = virtualinvoke $r8.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r9);

        $r11 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (org.apache.http.Header) $r11;

        if $r12 != null goto label2;

        $r13 = new org.apache.http.auth.AuthenticationException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" authorization challenge expected, but not found");

        $r8 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.apache.http.auth.AuthenticationException: void <init>(java.lang.String)>($r8);

        throw $r13;

     label2:
        interfaceinvoke $r7.<org.apache.http.auth.AuthScheme: void processChallenge(org.apache.http.Header)>($r12);

        $r15 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r15.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Authorization challenge processed");

        return;
    }

    private void updateAuthState(org.apache.http.auth.AuthState, org.apache.http.HttpHost, org.apache.http.client.CredentialsProvider)
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.auth.AuthState $r1;
        org.apache.http.HttpHost $r2;
        org.apache.http.client.CredentialsProvider $r3;
        org.apache.http.auth.AuthScope $r4;
        boolean $z0;
        java.lang.String $r5, $r10, $r11;
        int $i0, $i1;
        org.apache.http.conn.ClientConnectionManager $r6;
        org.apache.http.conn.scheme.SchemeRegistry $r7;
        org.apache.http.conn.scheme.Scheme $r8;
        org.apache.http.auth.AuthScheme $r9;
        org.apache.commons.logging.Log $r12;
        java.lang.StringBuilder $r13;
        org.apache.http.auth.Credentials $r14, $r15;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.auth.AuthState;

        $r2 := @parameter1: org.apache.http.HttpHost;

        $r3 := @parameter2: org.apache.http.client.CredentialsProvider;

        $z0 = virtualinvoke $r1.<org.apache.http.auth.AuthState: boolean isValid()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = virtualinvoke $r2.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i0 = virtualinvoke $r2.<org.apache.http.HttpHost: int getPort()>();

        $i1 = $i0;

        if $i0 >= 0 goto label2;

        $r6 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ClientConnectionManager connManager>;

        $r7 = interfaceinvoke $r6.<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>();

        $r8 = virtualinvoke $r7.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(org.apache.http.HttpHost)>($r2);

        $i1 = virtualinvoke $r8.<org.apache.http.conn.scheme.Scheme: int getDefaultPort()>();

     label2:
        $r9 = virtualinvoke $r1.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        $r4 = new org.apache.http.auth.AuthScope;

        $r10 = interfaceinvoke $r9.<org.apache.http.auth.AuthScheme: java.lang.String getRealm()>();

        $r11 = interfaceinvoke $r9.<org.apache.http.auth.AuthScheme: java.lang.String getSchemeName()>();

        specialinvoke $r4.<org.apache.http.auth.AuthScope: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>($r5, $i1, $r10, $r11);

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label3;

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication scope: ");

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r5);

     label3:
        $r14 = virtualinvoke $r1.<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>();

        $r15 = $r14;

        if $r14 != null goto label6;

        $r14 = interfaceinvoke $r3.<org.apache.http.client.CredentialsProvider: org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)>($r4);

        $r15 = $r14;

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r12.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        if $r14 == null goto label5;

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Found credentials");

     label4:
        virtualinvoke $r1.<org.apache.http.auth.AuthState: void setAuthScope(org.apache.http.auth.AuthScope)>($r4);

        virtualinvoke $r1.<org.apache.http.auth.AuthState: void setCredentials(org.apache.http.auth.Credentials)>($r15);

        return;

     label5:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Credentials not found");

        goto label4;

     label6:
        $z0 = interfaceinvoke $r9.<org.apache.http.auth.AuthScheme: boolean isComplete()>();

        if $z0 == 0 goto label4;

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Authentication failed");

        $r15 = null;

        goto label4;
    }

    private org.apache.http.impl.client.RequestWrapper wrapRequest(org.apache.http.HttpRequest) throws org.apache.http.ProtocolException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.HttpRequest $r1;
        boolean $z0;
        org.apache.http.HttpEntityEnclosingRequest $r3;
        org.apache.http.impl.client.EntityEnclosingRequestWrapper r4;
        org.apache.http.impl.client.RequestWrapper r5;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.HttpRequest;

        $z0 = $r1 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label1;

        r4 = new org.apache.http.impl.client.EntityEnclosingRequestWrapper;

        $r3 = (org.apache.http.HttpEntityEnclosingRequest) $r1;

        specialinvoke r4.<org.apache.http.impl.client.EntityEnclosingRequestWrapper: void <init>(org.apache.http.HttpEntityEnclosingRequest)>($r3);

        return r4;

     label1:
        r5 = new org.apache.http.impl.client.RequestWrapper;

        specialinvoke r5.<org.apache.http.impl.client.RequestWrapper: void <init>(org.apache.http.HttpRequest)>($r1);

        return r5;
    }

    protected org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.conn.routing.HttpRoute $r1;
        org.apache.http.protocol.HttpContext $r2;
        java.lang.StringBuilder $r3;
        org.apache.http.message.BasicHttpRequest $r4;
        org.apache.http.HttpHost $r5;
        java.lang.String $r6, $r9;
        int $i0, $i1;
        org.apache.http.conn.ClientConnectionManager $r7;
        org.apache.http.conn.scheme.SchemeRegistry $r8;
        org.apache.http.conn.scheme.Scheme $r10;
        org.apache.http.params.HttpParams $r11;
        org.apache.http.ProtocolVersion $r12;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r2 := @parameter1: org.apache.http.protocol.HttpContext;

        $r5 = virtualinvoke $r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>();

        $r6 = virtualinvoke $r5.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        $i0 = virtualinvoke $r5.<org.apache.http.HttpHost: int getPort()>();

        $i1 = $i0;

        if $i0 >= 0 goto label1;

        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ClientConnectionManager connManager>;

        $r8 = interfaceinvoke $r7.<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.scheme.SchemeRegistry getSchemeRegistry()>();

        $r9 = virtualinvoke $r5.<org.apache.http.HttpHost: java.lang.String getSchemeName()>();

        $r10 = virtualinvoke $r8.<org.apache.http.conn.scheme.SchemeRegistry: org.apache.http.conn.scheme.Scheme getScheme(java.lang.String)>($r9);

        $i1 = virtualinvoke $r10.<org.apache.http.conn.scheme.Scheme: int getDefaultPort()>();

     label1:
        $r3 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $i0 = $i0 + 6;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        $r12 = staticinvoke <org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>($r11);

        $r4 = new org.apache.http.message.BasicHttpRequest;

        specialinvoke $r4.<org.apache.http.message.BasicHttpRequest: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>("CONNECT", $r6, $r12);

        return $r4;
    }

    protected boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute, int, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.conn.routing.HttpRoute $r1;
        int $i0;
        org.apache.http.protocol.HttpContext $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.http.protocol.HttpContext;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Proxy chains are not supported.");

        throw $r3;
    }

    protected boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.conn.routing.HttpRoute $r1;
        org.apache.http.protocol.HttpContext $r2;
        org.apache.http.HttpHost $r3, $r4;
        org.apache.http.HttpResponse $r5, $r16;
        boolean $z0, $z1;
        org.apache.http.conn.ManagedClientConnection $r6;
        org.apache.http.params.HttpParams $r7;
        org.apache.http.HttpRequest $r8;
        java.lang.String $r9;
        org.apache.http.auth.AuthState $r10;
        org.apache.http.auth.AuthScheme $r11;
        org.apache.http.auth.AuthScope $r12;
        org.apache.http.auth.Credentials $r13;
        org.apache.http.Header $r14;
        org.apache.http.protocol.HttpRequestExecutor $r15;
        org.apache.http.StatusLine $r17;
        int $i0;
        org.apache.http.HttpException $r18;
        java.lang.StringBuilder $r19;
        org.apache.http.auth.AuthenticationException $r20, $r28;
        org.apache.commons.logging.Log $r21;
        java.lang.Object $r22;
        org.apache.http.client.CredentialsProvider $r23;
        org.apache.http.client.AuthenticationHandler $r24;
        java.util.Map $r25;
        org.apache.http.ConnectionReuseStrategy $r26;
        org.apache.http.HttpEntity $r27;
        org.apache.http.entity.BufferedHttpEntity $r29;
        org.apache.http.impl.client.TunnelRefusedException $r30;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r2 := @parameter1: org.apache.http.protocol.HttpContext;

        $r3 = virtualinvoke $r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>();

        $r4 = virtualinvoke $r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>();

        $r5 = null;

        $z0 = 0;

     label01:
        if $z0 != 0 goto label11;

        $z0 = 1;

        $r6 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $z1 = interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: boolean isOpen()>();

        if $z1 != 0 goto label02;

        $r6 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r1, $r2, $r7);

     label02:
        $r8 = virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.HttpRequest createConnectRequest(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>($r1, $r2);

        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        $r9 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getUserAgent(org.apache.http.params.HttpParams)>($r7);

        if $r9 == null goto label03;

        interfaceinvoke $r8.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("User-Agent", $r9);

     label03:
        $r9 = virtualinvoke $r4.<org.apache.http.HttpHost: java.lang.String toHostString()>();

        interfaceinvoke $r8.<org.apache.http.HttpRequest: void addHeader(java.lang.String,java.lang.String)>("Host", $r9);

        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        $r11 = virtualinvoke $r10.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        $r12 = virtualinvoke $r10.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScope getAuthScope()>();

        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        $r13 = virtualinvoke $r10.<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>();

        if $r13 == null goto label05;

        if $r12 != null goto label04;

        $z1 = interfaceinvoke $r11.<org.apache.http.auth.AuthScheme: boolean isConnectionBased()>();

        if $z1 != 0 goto label05;

     label04:
        $r14 = interfaceinvoke $r11.<org.apache.http.auth.AuthScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest)>($r13, $r8);

        interfaceinvoke $r8.<org.apache.http.HttpRequest: void addHeader(org.apache.http.Header)>($r14);

     label05:
        $r15 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.protocol.HttpRequestExecutor requestExec>;

        $r6 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $r16 = virtualinvoke $r15.<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>($r8, $r6, $r2);

        $r5 = $r16;

        $r17 = interfaceinvoke $r16.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r17.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 >= 200 goto label07;

        $r18 = new org.apache.http.HttpException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected response to CONNECT request: ");

        $r17 = interfaceinvoke $r16.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.http.HttpException: void <init>(java.lang.String)>($r9);

        throw $r18;

     label06:
        $r20 := @caughtexception;

        $r21 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isErrorEnabled()>();

        if $z1 == 0 goto label05;

        $r21 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Proxy authentication error: ");

        $r9 = virtualinvoke $r20.<java.lang.Throwable: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r9);

        goto label05;

     label07:
        $r22 = interfaceinvoke $r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.credentials-provider");

        $r23 = (org.apache.http.client.CredentialsProvider) $r22;

        if $r23 == null goto label01;

        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        $z1 = staticinvoke <org.apache.http.client.params.HttpClientParams: boolean isAuthenticating(org.apache.http.params.HttpParams)>($r7);

        if $z1 == 0 goto label01;

        $r24 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler proxyAuthHandler>;

        $z1 = interfaceinvoke $r24.<org.apache.http.client.AuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r16, $r2);

        if $z1 == 0 goto label14;

        $r21 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Proxy requested authentication");

        $r24 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler proxyAuthHandler>;

        $r25 = interfaceinvoke $r24.<org.apache.http.client.AuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r16, $r2);

        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        $r24 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler proxyAuthHandler>;

     label08:
        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void processChallenges(java.util.Map,org.apache.http.auth.AuthState,org.apache.http.client.AuthenticationHandler,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r25, $r10, $r24, $r16, $r2);

     label09:
        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void updateAuthState(org.apache.http.auth.AuthState,org.apache.http.HttpHost,org.apache.http.client.CredentialsProvider)>($r10, $r3, $r23);

        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        $r13 = virtualinvoke $r10.<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>();

        if $r13 == null goto label01;

        $z0 = 0;

        $r26 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.ConnectionReuseStrategy reuseStrategy>;

        $z1 = interfaceinvoke $r26.<org.apache.http.ConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r16, $r2);

        if $z1 == 0 goto label13;

        $r21 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Connection kept alive");

        $r27 = interfaceinvoke $r16.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if $r27 == null goto label01;

        interfaceinvoke $r27.<org.apache.http.HttpEntity: void consumeContent()>();

        goto label01;

     label10:
        $r28 := @caughtexception;

        $r21 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z1 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z1 == 0 goto label09;

        $r21 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication error: ");

        $r9 = virtualinvoke $r28.<java.lang.Throwable: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r21.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r9);

     label11:
        $r17 = interfaceinvoke $r5.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r17.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 <= 299 goto label15;

        $r27 = interfaceinvoke $r5.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if $r27 == null goto label12;

        $r29 = new org.apache.http.entity.BufferedHttpEntity;

        specialinvoke $r29.<org.apache.http.entity.BufferedHttpEntity: void <init>(org.apache.http.HttpEntity)>($r27);

        interfaceinvoke $r5.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r29);

     label12:
        $r6 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: void close()>();

        $r30 = new org.apache.http.impl.client.TunnelRefusedException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CONNECT refused by proxy: ");

        $r17 = interfaceinvoke $r5.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r9 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<org.apache.http.impl.client.TunnelRefusedException: void <init>(java.lang.String,org.apache.http.HttpResponse)>($r9, $r5);

        throw $r30;

     label13:
        $r6 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: void close()>();

        goto label01;

     label14:
        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        virtualinvoke $r10.<org.apache.http.auth.AuthState: void setAuthScope(org.apache.http.auth.AuthScope)>(null);

        goto label01;

     label15:
        $r6 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: void markReusable()>();

        return 0;

        catch org.apache.http.auth.AuthenticationException from label04 to label05 with label06;
        catch org.apache.http.auth.AuthenticationException from label08 to label09 with label10;
    }

    protected org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.HttpRequest $r1;
        org.apache.http.protocol.HttpContext $r2;
        org.apache.http.HttpHost $r3;
        org.apache.http.params.HttpParams $r4;
        java.lang.Object $r5;
        java.lang.IllegalStateException $r6;
        org.apache.http.conn.routing.HttpRoutePlanner $r7;
        org.apache.http.conn.routing.HttpRoute $r8;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r3 := @parameter0: org.apache.http.HttpHost;

        $r1 := @parameter1: org.apache.http.HttpRequest;

        $r2 := @parameter2: org.apache.http.protocol.HttpContext;

        if $r3 != null goto label1;

        $r4 = interfaceinvoke $r1.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r5 = interfaceinvoke $r4.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.default-host");

        $r3 = (org.apache.http.HttpHost) $r5;

     label1:
        if $r3 != null goto label2;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host must not be null, or set in parameters.");

        throw $r6;

     label2:
        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoutePlanner routePlanner>;

        $r8 = interfaceinvoke $r7.<org.apache.http.conn.routing.HttpRoutePlanner: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r3, $r1, $r2);

        return $r8;
    }

    protected void establishRoute(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.conn.routing.HttpRoute $r1, $r5;
        org.apache.http.protocol.HttpContext $r2;
        int $i0, $i1;
        org.apache.http.conn.routing.BasicRouteDirector $r3;
        org.apache.http.conn.ManagedClientConnection $r4;
        java.lang.IllegalStateException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        org.apache.http.params.HttpParams $r9;
        boolean $z0;
        org.apache.commons.logging.Log $r10;
        org.apache.http.HttpHost $r11;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r2 := @parameter1: org.apache.http.protocol.HttpContext;

        $r3 = new org.apache.http.conn.routing.BasicRouteDirector;

        specialinvoke $r3.<org.apache.http.conn.routing.BasicRouteDirector: void <init>()>();

     label1:
        $r4 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $r5 = interfaceinvoke $r4.<org.apache.http.conn.ManagedClientConnection: org.apache.http.conn.routing.HttpRoute getRoute()>();

        $i1 = interfaceinvoke $r3.<org.apache.http.conn.routing.HttpRouteDirector: int nextStep(org.apache.http.conn.routing.RouteInfo,org.apache.http.conn.routing.RouteInfo)>($r1, $r5);

        lookupswitch($i1)
        {
            case -1: goto label8;
            case 0: goto label4;
            case 1: goto label3;
            case 2: goto label3;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            default: goto label2;
        };

     label2:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown step indicator ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from RouteDirector.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label3:
        $r4 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $r9 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        interfaceinvoke $r4.<org.apache.http.conn.ManagedClientConnection: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r1, $r2, $r9);

     label4:
        if $i1 > 0 goto label1;

        return;

     label5:
        $z0 = virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToTarget(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>($r1, $r2);

        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Tunnel to target created.");

        $r4 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $r9 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        interfaceinvoke $r4.<org.apache.http.conn.ManagedClientConnection: void tunnelTarget(boolean,org.apache.http.params.HttpParams)>($z0, $r9);

        goto label4;

     label6:
        $i0 = virtualinvoke $r5.<org.apache.http.conn.routing.HttpRoute: int getHopCount()>();

        $i0 = $i0 - 1;

        $z0 = virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: boolean createTunnelToProxy(org.apache.http.conn.routing.HttpRoute,int,org.apache.http.protocol.HttpContext)>($r1, $i0, $r2);

        $r10 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Tunnel to proxy created.");

        $r4 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $r11 = virtualinvoke $r1.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getHopTarget(int)>($i0);

        $r9 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        interfaceinvoke $r4.<org.apache.http.conn.ManagedClientConnection: void tunnelProxy(org.apache.http.HttpHost,boolean,org.apache.http.params.HttpParams)>($r11, $z0, $r9);

        goto label4;

     label7:
        $r4 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $r9 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        interfaceinvoke $r4.<org.apache.http.conn.ManagedClientConnection: void layerProtocol(org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r2, $r9);

        goto label4;

     label8:
        $r6 = new java.lang.IllegalStateException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to establish route.\nplanned = ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\ncurrent = ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r6;
    }

    public org.apache.http.HttpResponse execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.protocol.HttpContext $r1;
        org.apache.http.conn.BasicManagedEntity $r2;
        java.io.InterruptedIOException $r3;
        org.apache.http.HttpHost $r4, $r18;
        org.apache.http.HttpRequest $r5;
        org.apache.http.impl.client.RequestWrapper $r6;
        org.apache.http.params.HttpParams $r7;
        org.apache.http.conn.routing.HttpRoute $r8, $r38;
        org.apache.http.impl.client.RoutedRequest $r9, $r36;
        long $l0, $l3;
        int $i1, $i2;
        boolean $z0, $z1, $z2;
        org.apache.http.HttpResponse $r10;
        java.lang.Object $r11;
        org.apache.http.conn.ManagedClientConnection $r12;
        org.apache.http.conn.ClientConnectionManager $r13;
        org.apache.http.conn.ClientConnectionRequest $r14;
        org.apache.http.client.methods.AbortableHttpRequest $r15;
        java.util.concurrent.TimeUnit $r16;
        org.apache.commons.logging.Log $r17;
        org.apache.http.auth.AuthState $r19;
        org.apache.http.protocol.HttpRequestExecutor $r20;
        org.apache.http.protocol.HttpProcessor $r21;
        org.apache.http.client.NonRepeatableRequestException $r22;
        org.apache.http.HttpException $r23;
        java.lang.InterruptedException $r24;
        java.io.IOException $r25, $r30;
        org.apache.http.impl.client.TunnelRefusedException $r26;
        java.lang.String $r27;
        org.apache.http.HttpEntity $r28;
        java.lang.StringBuilder $r29;
        org.apache.http.client.HttpRequestRetryHandler $r31;
        java.lang.Class $r32;
        java.lang.RuntimeException $r33;
        org.apache.http.ConnectionReuseStrategy $r34;
        org.apache.http.conn.ConnectionKeepAliveStrategy $r35;
        org.apache.http.client.UserTokenHandler $r37;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r4 := @parameter0: org.apache.http.HttpHost;

        $r5 := @parameter1: org.apache.http.HttpRequest;

        $r1 := @parameter2: org.apache.http.protocol.HttpContext;

        $r6 = specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RequestWrapper wrapRequest(org.apache.http.HttpRequest)>($r5);

        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        virtualinvoke $r6.<org.apache.http.message.AbstractHttpMessage: void setParams(org.apache.http.params.HttpParams)>($r7);

        $r8 = virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r4, $r6, $r1);

        $r9 = new org.apache.http.impl.client.RoutedRequest;

        specialinvoke $r9.<org.apache.http.impl.client.RoutedRequest: void <init>(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute)>($r6, $r8);

        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        $l0 = staticinvoke <org.apache.http.conn.params.ConnManagerParams: long getTimeout(org.apache.http.params.HttpParams)>($r7);

        $i1 = 0;

        $z0 = 0;

        $r10 = null;

        $z1 = 0;

     label001:
        if $z1 != 0 goto label046;

     label002:
        $r6 = virtualinvoke $r9.<org.apache.http.impl.client.RoutedRequest: org.apache.http.impl.client.RequestWrapper getRequest()>();

        $r8 = virtualinvoke $r9.<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()>();

        $r11 = interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.user-token");

     label003:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        if $r12 != null goto label017;

     label004:
        $r13 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ClientConnectionManager connManager>;

        $r14 = interfaceinvoke $r13.<org.apache.http.conn.ClientConnectionManager: org.apache.http.conn.ClientConnectionRequest requestConnection(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>($r8, $r11);

     label005:
        $z2 = $r5 instanceof org.apache.http.client.methods.AbortableHttpRequest;

     label006:
        if $z2 == 0 goto label008;

     label007:
        $r15 = (org.apache.http.client.methods.AbortableHttpRequest) $r5;

        interfaceinvoke $r15.<org.apache.http.client.methods.AbortableHttpRequest: void setConnectionRequest(org.apache.http.conn.ClientConnectionRequest)>($r14);

     label008:
        $r16 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

     label009:
        $r12 = interfaceinvoke $r14.<org.apache.http.conn.ClientConnectionRequest: org.apache.http.conn.ManagedClientConnection getConnection(long,java.util.concurrent.TimeUnit)>($l0, $r16);

     label010:
        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn> = $r12;

     label011:
        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

     label012:
        $z2 = staticinvoke <org.apache.http.params.HttpConnectionParams: boolean isStaleCheckingEnabled(org.apache.http.params.HttpParams)>($r7);

     label013:
        if $z2 == 0 goto label017;

     label014:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Stale connection check");

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $z2 = interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: boolean isStale()>();

     label015:
        if $z2 == 0 goto label017;

     label016:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Stale connection detected");

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void close()>();

     label017:
        $z2 = $r5 instanceof org.apache.http.client.methods.AbortableHttpRequest;

     label018:
        if $z2 == 0 goto label020;

        $r15 = (org.apache.http.client.methods.AbortableHttpRequest) $r5;

     label019:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r15.<org.apache.http.client.methods.AbortableHttpRequest: void setReleaseTrigger(org.apache.http.conn.ConnectionReleaseTrigger)>($r12);

     label020:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $z2 = interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: boolean isOpen()>();

        if $z2 != 0 goto label023;

     label021:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

     label022:
        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r8, $r1, $r7);

     label023:
        virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void establishRoute(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext)>($r8, $r1);

     label024:
        virtualinvoke $r6.<org.apache.http.impl.client.RequestWrapper: void resetHeaders()>();

        virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute)>($r6, $r8);

        $r7 = virtualinvoke $r6.<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams getParams()>();

        $r11 = interfaceinvoke $r7.<org.apache.http.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.virtual-host");

     label025:
        $r18 = (org.apache.http.HttpHost) $r11;

     label026:
        $r4 = $r18;

     label027:
        if $r18 != null goto label028;

        $r4 = virtualinvoke $r8.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>();

     label028:
        $r18 = virtualinvoke $r8.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>();

        interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.target_host", $r4);

        interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.proxy_host", $r18);

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.connection", $r12);

        $r19 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState targetAuthState>;

        interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.auth.target-scope", $r19);

        $r19 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.auth.proxy-scope", $r19);

     label029:
        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.protocol.HttpRequestExecutor requestExec>;

     label030:
        $r21 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.protocol.HttpProcessor httpProcessor>;

        virtualinvoke $r20.<org.apache.http.protocol.HttpRequestExecutor: void preProcess(org.apache.http.HttpRequest,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>($r6, $r21, $r1);

        interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request", $r6);

     label031:
        $z0 = 1;

     label032:
        if $z0 == 0 goto label076;

     label033:
        $i1 = $i1 + 1;

        virtualinvoke $r6.<org.apache.http.impl.client.RequestWrapper: void incrementExecCount()>();

        $i2 = virtualinvoke $r6.<org.apache.http.impl.client.RequestWrapper: int getExecCount()>();

        if $i2 <= 1 goto label050;

        $z2 = virtualinvoke $r6.<org.apache.http.impl.client.RequestWrapper: boolean isRepeatable()>();

     label034:
        if $z2 != 0 goto label050;

     label035:
        $r22 = new org.apache.http.client.NonRepeatableRequestException;

        specialinvoke $r22.<org.apache.http.client.NonRepeatableRequestException: void <init>(java.lang.String)>("Cannot retry request with a non-repeatable request entity");

     label036:
        throw $r22;

     label037:
        $r23 := @caughtexception;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void abortConnection()>();

        throw $r23;

     label038:
        $r24 := @caughtexception;

        $r3 = new java.io.InterruptedIOException;

     label039:
        specialinvoke $r3.<java.io.InterruptedIOException: void <init>()>();

        virtualinvoke $r3.<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>($r24);

     label040:
        throw $r3;

     label041:
        $r25 := @caughtexception;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void abortConnection()>();

        throw $r25;

     label042:
        $r26 := @caughtexception;

     label043:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

     label044:
        $z1 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label045;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r27 = virtualinvoke $r26.<java.lang.Throwable: java.lang.String getMessage()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27);

     label045:
        $r10 = virtualinvoke $r26.<org.apache.http.impl.client.TunnelRefusedException: org.apache.http.HttpResponse getResponse()>();

     label046:
        if $r10 == null goto label047;

        $r28 = interfaceinvoke $r10.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if $r28 == null goto label047;

        $r28 = interfaceinvoke $r10.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        $z1 = interfaceinvoke $r28.<org.apache.http.HttpEntity: boolean isStreaming()>();

        if $z1 != 0 goto label098;

     label047:
        if $z0 == 0 goto label048;

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void markReusable()>();

     label048:
        virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void releaseConnection()>();

     label049:
        return $r10;

     label050:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

     label051:
        $z2 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

     label052:
        if $z2 == 0 goto label054;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

     label053:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt ");

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to execute request");

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27);

     label054:
        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.protocol.HttpRequestExecutor requestExec>;

     label055:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        $r10 = virtualinvoke $r20.<org.apache.http.protocol.HttpRequestExecutor: org.apache.http.HttpResponse execute(org.apache.http.HttpRequest,org.apache.http.HttpClientConnection,org.apache.http.protocol.HttpContext)>($r6, $r12, $r1);

     label056:
        $z0 = 0;

        goto label032;

     label057:
        $r30 := @caughtexception;

     label058:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

     label059:
        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Closing the connection.");

        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void close()>();

        $r31 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.HttpRequestRetryHandler retryHandler>;

        $z2 = interfaceinvoke $r31.<org.apache.http.client.HttpRequestRetryHandler: boolean retryRequest(java.io.IOException,int,org.apache.http.protocol.HttpContext)>($r30, $i1, $r1);

     label060:
        if $z2 == 0 goto label074;

     label061:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z2 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

     label062:
        if $z2 == 0 goto label064;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

     label063:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I/O exception (");

        $r32 = virtualinvoke $r30.<java.lang.Object: java.lang.Class getClass()>();

        $r27 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") caught when processing request: ");

        $r27 = virtualinvoke $r30.<java.lang.Throwable: java.lang.String getMessage()>();

        $r29 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r27 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r27);

     label064:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z2 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

     label065:
        if $z2 == 0 goto label067;

     label066:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r27 = virtualinvoke $r30.<java.lang.Throwable: java.lang.String getMessage()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r27, $r30);

     label067:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Retrying request");

        $i2 = virtualinvoke $r8.<org.apache.http.conn.routing.HttpRoute: int getHopCount()>();

     label068:
        if $i2 != 1 goto label075;

     label069:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Reopening the direct connection.");

     label070:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

     label071:
        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void open(org.apache.http.conn.routing.HttpRoute,org.apache.http.protocol.HttpContext,org.apache.http.params.HttpParams)>($r8, $r1, $r7);

     label072:
        goto label032;

     label073:
        $r33 := @caughtexception;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void abortConnection()>();

        throw $r33;

     label074:
        throw $r30;

     label075:
        $z0 = 0;

        goto label032;

     label076:
        $r7 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.params.HttpParams params>;

     label077:
        interfaceinvoke $r10.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r7);

     label078:
        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.protocol.HttpRequestExecutor requestExec>;

     label079:
        $r21 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.protocol.HttpProcessor httpProcessor>;

        virtualinvoke $r20.<org.apache.http.protocol.HttpRequestExecutor: void postProcess(org.apache.http.HttpResponse,org.apache.http.protocol.HttpProcessor,org.apache.http.protocol.HttpContext)>($r10, $r21, $r1);

        $r34 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.ConnectionReuseStrategy reuseStrategy>;

        $z2 = interfaceinvoke $r34.<org.apache.http.ConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r10, $r1);

     label080:
        $z0 = $z2;

     label081:
        if $z2 == 0 goto label084;

        $r35 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ConnectionKeepAliveStrategy keepAliveStrategy>;

        $l3 = interfaceinvoke $r35.<org.apache.http.conn.ConnectionKeepAliveStrategy: long getKeepAliveDuration(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r10, $r1);

     label082:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

     label083:
        $r16 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void setIdleDuration(long,java.util.concurrent.TimeUnit)>($l3, $r16);

     label084:
        $r36 = virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r9, $r10, $r1);

     label085:
        if $r36 != null goto label091;

     label086:
        $z1 = 1;

     label087:
        $r37 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.UserTokenHandler userTokenHandler>;

        $r11 = interfaceinvoke $r37.<org.apache.http.client.UserTokenHandler: java.lang.Object getUserToken(org.apache.http.protocol.HttpContext)>($r1);

        interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.user-token", $r11);

     label088:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        if $r12 == null goto label001;

     label089:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void setState(java.lang.Object)>($r11);

     label090:
        goto label001;

     label091:
        if $z2 == 0 goto label097;

     label092:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Connection kept alive");

        $r28 = interfaceinvoke $r10.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

        if $r28 == null goto label093;

        interfaceinvoke $r28.<org.apache.http.HttpEntity: void consumeContent()>();

     label093:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void markReusable()>();

     label094:
        $r8 = virtualinvoke $r36.<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()>();

        $r38 = virtualinvoke $r9.<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()>();

        $z2 = virtualinvoke $r8.<org.apache.http.conn.routing.HttpRoute: boolean equals(java.lang.Object)>($r38);

        if $z2 != 0 goto label095;

        virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void releaseConnection()>();

     label095:
        $r9 = $r36;

     label096:
        goto label087;

     label097:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        interfaceinvoke $r12.<org.apache.http.conn.ManagedClientConnection: void close()>();

        goto label094;

     label098:
        $r28 = interfaceinvoke $r10.<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>();

     label099:
        $r2 = new org.apache.http.conn.BasicManagedEntity;

     label100:
        $r12 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

        specialinvoke $r2.<org.apache.http.conn.BasicManagedEntity: void <init>(org.apache.http.HttpEntity,org.apache.http.conn.ManagedClientConnection,boolean)>($r28, $r12, $z0);

        interfaceinvoke $r10.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r2);

     label101:
        return $r10;

        catch org.apache.http.HttpException from label002 to label003 with label037;
        catch org.apache.http.HttpException from label004 to label005 with label037;
        catch org.apache.http.HttpException from label007 to label008 with label037;
        catch java.io.IOException from label002 to label003 with label041;
        catch java.io.IOException from label004 to label005 with label041;
        catch java.io.IOException from label007 to label008 with label041;
        catch java.lang.RuntimeException from label002 to label005 with label073;
        catch java.lang.RuntimeException from label006 to label008 with label073;
        catch java.lang.InterruptedException from label009 to label010 with label038;
        catch org.apache.http.HttpException from label009 to label010 with label037;
        catch java.io.IOException from label009 to label010 with label041;
        catch java.lang.RuntimeException from label009 to label011 with label073;
        catch org.apache.http.HttpException from label012 to label013 with label037;
        catch org.apache.http.HttpException from label014 to label015 with label037;
        catch org.apache.http.HttpException from label016 to label017 with label037;
        catch org.apache.http.HttpException from label019 to label021 with label037;
        catch org.apache.http.HttpException from label022 to label023 with label037;
        catch java.io.IOException from label012 to label013 with label041;
        catch java.io.IOException from label014 to label015 with label041;
        catch java.io.IOException from label016 to label017 with label041;
        catch java.io.IOException from label019 to label021 with label041;
        catch java.io.IOException from label022 to label023 with label041;
        catch java.lang.RuntimeException from label011 to label017 with label073;
        catch java.lang.RuntimeException from label018 to label023 with label073;
        catch org.apache.http.impl.client.TunnelRefusedException from label023 to label024 with label042;
        catch org.apache.http.HttpException from label023 to label024 with label037;
        catch java.io.IOException from label023 to label024 with label041;
        catch java.lang.RuntimeException from label023 to label024 with label073;
        catch org.apache.http.HttpException from label024 to label025 with label037;
        catch org.apache.http.HttpException from label027 to label029 with label037;
        catch org.apache.http.HttpException from label030 to label031 with label037;
        catch org.apache.http.HttpException from label033 to label034 with label037;
        catch org.apache.http.HttpException from label035 to label037 with label037;
        catch java.io.IOException from label024 to label025 with label041;
        catch java.io.IOException from label027 to label029 with label041;
        catch java.io.IOException from label030 to label031 with label041;
        catch java.io.IOException from label033 to label034 with label041;
        catch java.io.IOException from label035 to label036 with label041;
        catch java.lang.RuntimeException from label024 to label026 with label073;
        catch java.lang.RuntimeException from label027 to label031 with label073;
        catch java.lang.RuntimeException from label032 to label037 with label073;
        catch org.apache.http.HttpException from label039 to label040 with label037;
        catch java.io.IOException from label039 to label041 with label041;
        catch java.lang.RuntimeException from label039 to label041 with label073;
        catch org.apache.http.HttpException from label044 to label046 with label037;
        catch org.apache.http.HttpException from label046 to label049 with label037;
        catch java.io.IOException from label044 to label046 with label041;
        catch java.io.IOException from label046 to label049 with label041;
        catch java.lang.RuntimeException from label043 to label046 with label073;
        catch java.lang.RuntimeException from label046 to label049 with label073;
        catch java.io.IOException from label051 to label052 with label057;
        catch java.io.IOException from label053 to label054 with label057;
        catch java.io.IOException from label055 to label056 with label057;
        catch org.apache.http.HttpException from label051 to label052 with label037;
        catch org.apache.http.HttpException from label053 to label054 with label037;
        catch org.apache.http.HttpException from label055 to label056 with label037;
        catch java.lang.RuntimeException from label050 to label056 with label073;
        catch org.apache.http.HttpException from label059 to label060 with label037;
        catch org.apache.http.HttpException from label061 to label062 with label037;
        catch org.apache.http.HttpException from label063 to label065 with label037;
        catch org.apache.http.HttpException from label066 to label068 with label037;
        catch org.apache.http.HttpException from label069 to label070 with label037;
        catch org.apache.http.HttpException from label071 to label072 with label037;
        catch java.io.IOException from label059 to label060 with label041;
        catch java.io.IOException from label061 to label062 with label041;
        catch java.io.IOException from label063 to label065 with label041;
        catch java.io.IOException from label066 to label068 with label041;
        catch java.io.IOException from label069 to label070 with label041;
        catch java.io.IOException from label071 to label072 with label041;
        catch java.lang.RuntimeException from label058 to label072 with label073;
        catch org.apache.http.HttpException from label077 to label078 with label037;
        catch org.apache.http.HttpException from label079 to label080 with label037;
        catch org.apache.http.HttpException from label081 to label082 with label037;
        catch org.apache.http.HttpException from label083 to label085 with label037;
        catch org.apache.http.HttpException from label087 to label088 with label037;
        catch org.apache.http.HttpException from label089 to label090 with label037;
        catch org.apache.http.HttpException from label092 to label095 with label037;
        catch org.apache.http.HttpException from label097 to label099 with label037;
        catch org.apache.http.HttpException from label100 to label101 with label037;
        catch java.io.IOException from label074 to label075 with label041;
        catch java.io.IOException from label076 to label078 with label041;
        catch java.io.IOException from label079 to label080 with label041;
        catch java.io.IOException from label081 to label082 with label041;
        catch java.io.IOException from label083 to label085 with label041;
        catch java.io.IOException from label087 to label088 with label041;
        catch java.io.IOException from label089 to label090 with label041;
        catch java.io.IOException from label092 to label095 with label041;
        catch java.io.IOException from label097 to label099 with label041;
        catch java.io.IOException from label100 to label101 with label041;
        catch java.lang.RuntimeException from label074 to label075 with label073;
        catch java.lang.RuntimeException from label076 to label080 with label073;
        catch java.lang.RuntimeException from label081 to label085 with label073;
        catch java.lang.RuntimeException from label086 to label090 with label073;
        catch java.lang.RuntimeException from label091 to label095 with label073;
        catch java.lang.RuntimeException from label096 to label101 with label073;
    }

    protected org.apache.http.impl.client.RoutedRequest handleResponse(org.apache.http.impl.client.RoutedRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.impl.client.RoutedRequest $r1;
        org.apache.http.HttpResponse $r2;
        org.apache.http.protocol.HttpContext $r3;
        org.apache.http.HttpHost $r4;
        org.apache.http.client.methods.HttpGet $r5;
        org.apache.http.impl.client.RequestWrapper $r6;
        org.apache.http.conn.routing.HttpRoute $r7;
        org.apache.http.params.HttpParams $r8;
        boolean $z0;
        org.apache.http.client.RedirectHandler $r9;
        int $i0, $i1;
        org.apache.http.client.RedirectException $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12, $r14;
        java.net.URI $r13;
        org.apache.http.HttpRequest $r15;
        org.apache.http.Header[] $r16;
        org.apache.commons.logging.Log $r17;
        java.lang.Object $r18;
        org.apache.http.client.CredentialsProvider $r19;
        org.apache.http.client.AuthenticationHandler $r20;
        java.util.Map $r21;
        org.apache.http.auth.AuthState $r22;
        org.apache.http.auth.Credentials $r23;
        org.apache.http.auth.AuthenticationException $r24, $r25;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.impl.client.RoutedRequest;

        $r2 := @parameter1: org.apache.http.HttpResponse;

        $r3 := @parameter2: org.apache.http.protocol.HttpContext;

        $r7 = virtualinvoke $r1.<org.apache.http.impl.client.RoutedRequest: org.apache.http.conn.routing.HttpRoute getRoute()>();

        $r4 = virtualinvoke $r7.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>();

        $r6 = virtualinvoke $r1.<org.apache.http.impl.client.RoutedRequest: org.apache.http.impl.client.RequestWrapper getRequest()>();

        $r8 = virtualinvoke $r6.<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams getParams()>();

        $z0 = staticinvoke <org.apache.http.client.params.HttpClientParams: boolean isRedirecting(org.apache.http.params.HttpParams)>($r8);

        if $z0 == 0 goto label03;

        $r9 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.RedirectHandler redirectHandler>;

        $z0 = interfaceinvoke $r9.<org.apache.http.client.RedirectHandler: boolean isRedirectRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r2, $r3);

        if $z0 == 0 goto label03;

        $i0 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: int redirectCount>;

        $i1 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: int maxRedirects>;

        if $i0 < $i1 goto label01;

        $r10 = new org.apache.http.client.RedirectException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Maximum redirects (");

        $i0 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: int maxRedirects>;

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") exceeded");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.http.client.RedirectException: void <init>(java.lang.String)>($r12);

        throw $r10;

     label01:
        $i0 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: int redirectCount>;

        $i0 = $i0 + 1;

        $r0.<org.apache.http.impl.client.DefaultRequestDirector: int redirectCount> = $i0;

        $r9 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.RedirectHandler redirectHandler>;

        $r13 = interfaceinvoke $r9.<org.apache.http.client.RedirectHandler: java.net.URI getLocationURI(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r2, $r3);

        $r4 = new org.apache.http.HttpHost;

        $r12 = virtualinvoke $r13.<java.net.URI: java.lang.String getHost()>();

        $i0 = virtualinvoke $r13.<java.net.URI: int getPort()>();

        $r14 = virtualinvoke $r13.<java.net.URI: java.lang.String getScheme()>();

        specialinvoke $r4.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r12, $i0, $r14);

        $r5 = new org.apache.http.client.methods.HttpGet;

        specialinvoke $r5.<org.apache.http.client.methods.HttpGet: void <init>(java.net.URI)>($r13);

        $r15 = virtualinvoke $r6.<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest getOriginal()>();

        $r16 = interfaceinvoke $r15.<org.apache.http.HttpRequest: org.apache.http.Header[] getAllHeaders()>();

        virtualinvoke $r5.<org.apache.http.message.AbstractHttpMessage: void setHeaders(org.apache.http.Header[])>($r16);

        $r6 = new org.apache.http.impl.client.RequestWrapper;

        specialinvoke $r6.<org.apache.http.impl.client.RequestWrapper: void <init>(org.apache.http.HttpRequest)>($r5);

        virtualinvoke $r6.<org.apache.http.message.AbstractHttpMessage: void setParams(org.apache.http.params.HttpParams)>($r8);

        $r7 = virtualinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.routing.HttpRoute determineRoute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r4, $r6, $r3);

        $r1 = new org.apache.http.impl.client.RoutedRequest;

        specialinvoke $r1.<org.apache.http.impl.client.RoutedRequest: void <init>(org.apache.http.impl.client.RequestWrapper,org.apache.http.conn.routing.HttpRoute)>($r6, $r7);

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label02;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redirecting to \'");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' via ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12);

     label02:
        return $r1;

     label03:
        $r18 = interfaceinvoke $r3.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.credentials-provider");

        $r19 = (org.apache.http.client.CredentialsProvider) $r18;

        if $r19 == null goto label15;

        $z0 = staticinvoke <org.apache.http.client.params.HttpClientParams: boolean isAuthenticating(org.apache.http.params.HttpParams)>($r8);

        if $z0 == 0 goto label15;

        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler targetAuthHandler>;

        $z0 = interfaceinvoke $r20.<org.apache.http.client.AuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r2, $r3);

        if $z0 == 0 goto label09;

        $r18 = interfaceinvoke $r3.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.target_host");

        $r4 = (org.apache.http.HttpHost) $r18;

        if $r4 != null goto label04;

        $r4 = virtualinvoke $r7.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>();

     label04:
        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Target requested authentication");

        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler targetAuthHandler>;

        $r21 = interfaceinvoke $r20.<org.apache.http.client.AuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r2, $r3);

        $r22 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState targetAuthState>;

        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler targetAuthHandler>;

     label05:
        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void processChallenges(java.util.Map,org.apache.http.auth.AuthState,org.apache.http.client.AuthenticationHandler,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r21, $r22, $r20, $r2, $r3);

     label06:
        $r22 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState targetAuthState>;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void updateAuthState(org.apache.http.auth.AuthState,org.apache.http.HttpHost,org.apache.http.client.CredentialsProvider)>($r22, $r4, $r19);

        $r22 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState targetAuthState>;

        $r23 = virtualinvoke $r22.<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>();

        if $r23 == null goto label08;

        return $r1;

     label07:
        $r24 := @caughtexception;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label06;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication error: ");

        $r12 = virtualinvoke $r24.<java.lang.Throwable: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r12);

        return null;

     label08:
        return null;

     label09:
        $r22 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState targetAuthState>;

        virtualinvoke $r22.<org.apache.http.auth.AuthState: void setAuthScope(org.apache.http.auth.AuthScope)>(null);

        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler proxyAuthHandler>;

        $z0 = interfaceinvoke $r20.<org.apache.http.client.AuthenticationHandler: boolean isAuthenticationRequested(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r2, $r3);

        if $z0 == 0 goto label14;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Proxy requested authentication");

        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler proxyAuthHandler>;

        $r21 = interfaceinvoke $r20.<org.apache.http.client.AuthenticationHandler: java.util.Map getChallenges(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r2, $r3);

        $r22 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        $r20 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.client.AuthenticationHandler proxyAuthHandler>;

     label10:
        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void processChallenges(java.util.Map,org.apache.http.auth.AuthState,org.apache.http.client.AuthenticationHandler,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r21, $r22, $r20, $r2, $r3);

     label11:
        $r22 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        specialinvoke $r0.<org.apache.http.impl.client.DefaultRequestDirector: void updateAuthState(org.apache.http.auth.AuthState,org.apache.http.HttpHost,org.apache.http.client.CredentialsProvider)>($r22, $r4, $r19);

        $r22 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        $r23 = virtualinvoke $r22.<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>();

        if $r23 == null goto label13;

        return $r1;

     label12:
        $r25 := @caughtexception;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z0 == 0 goto label11;

        $r17 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Authentication error: ");

        $r12 = virtualinvoke $r25.<java.lang.Throwable: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r12);

        return null;

     label13:
        return null;

     label14:
        $r22 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.auth.AuthState proxyAuthState>;

        virtualinvoke $r22.<org.apache.http.auth.AuthState: void setAuthScope(org.apache.http.auth.AuthScope)>(null);

     label15:
        return null;

        catch org.apache.http.auth.AuthenticationException from label05 to label06 with label07;
        catch org.apache.http.auth.AuthenticationException from label10 to label11 with label12;
    }

    protected void releaseConnection()
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.conn.ManagedClientConnection $r1;
        java.io.IOException $r2;
        org.apache.commons.logging.Log $r3;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn>;

     label1:
        interfaceinvoke $r1.<org.apache.http.conn.ManagedClientConnection: void releaseConnection()>();

     label2:
        $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.http.conn.ManagedClientConnection managedConn> = null;

        return;

     label3:
        $r2 := @caughtexception;

        $r3 = $r0.<org.apache.http.impl.client.DefaultRequestDirector: org.apache.commons.logging.Log log>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("IOException releasing connection", $r2);

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void rewriteRequestURI(org.apache.http.impl.client.RequestWrapper, org.apache.http.conn.routing.HttpRoute) throws org.apache.http.ProtocolException
    {
        org.apache.http.impl.client.DefaultRequestDirector $r0;
        org.apache.http.impl.client.RequestWrapper $r1;
        org.apache.http.conn.routing.HttpRoute $r2;
        java.net.URI $r3;
        org.apache.http.HttpHost $r4;
        boolean $z0;
        java.net.URISyntaxException $r5;
        org.apache.http.ProtocolException $r6;
        java.lang.StringBuilder $r7;
        org.apache.http.RequestLine $r8;
        java.lang.String $r9;

        $r0 := @this: org.apache.http.impl.client.DefaultRequestDirector;

        $r1 := @parameter0: org.apache.http.impl.client.RequestWrapper;

        $r2 := @parameter1: org.apache.http.conn.routing.HttpRoute;

     label1:
        $r3 = virtualinvoke $r1.<org.apache.http.impl.client.RequestWrapper: java.net.URI getURI()>();

        $r4 = virtualinvoke $r2.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getProxyHost()>();

        if $r4 == null goto label3;

        $z0 = virtualinvoke $r2.<org.apache.http.conn.routing.HttpRoute: boolean isTunnelled()>();

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r3.<java.net.URI: boolean isAbsolute()>();

        if $z0 != 0 goto label6;

        $r4 = virtualinvoke $r2.<org.apache.http.conn.routing.HttpRoute: org.apache.http.HttpHost getTargetHost()>();

        $r3 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost)>($r3, $r4);

        virtualinvoke $r1.<org.apache.http.impl.client.RequestWrapper: void setURI(java.net.URI)>($r3);

     label2:
        return;

     label3:
        $z0 = virtualinvoke $r3.<java.net.URI: boolean isAbsolute()>();

        if $z0 == 0 goto label7;

        $r3 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost)>($r3, null);

        virtualinvoke $r1.<org.apache.http.impl.client.RequestWrapper: void setURI(java.net.URI)>($r3);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        $r6 = new org.apache.http.ProtocolException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid URI: ");

        $r8 = virtualinvoke $r1.<org.apache.http.impl.client.RequestWrapper: org.apache.http.RequestLine getRequestLine()>();

        $r9 = interfaceinvoke $r8.<org.apache.http.RequestLine: java.lang.String getUri()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r5);

        throw $r6;

     label6:
        return;

     label7:
        return;

        catch java.net.URISyntaxException from label1 to label2 with label5;
        catch java.net.URISyntaxException from label3 to label4 with label5;
    }
}
