public class org.apache.harmony.xml.ExpatPullParser extends java.lang.Object implements org.xmlpull.v1.XmlPullParser
{
    private static final int BUFFER_SIZE;
    public static final java.lang.String FEATURE_RELAXED;
    private static final java.lang.String NOT_A_START_TAG;
    private org.apache.harmony.xml.ExpatPullParser$Document document;
    private boolean processNamespaces;
    private boolean relaxed;

    public void <init>()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xml.ExpatPullParser: boolean processNamespaces> = 0;

        $r0.<org.apache.harmony.xml.ExpatPullParser: boolean relaxed> = 0;

        return;
    }

    static boolean access$400(org.apache.harmony.xml.ExpatPullParser)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        boolean z0;

        $r0 := @parameter0: org.apache.harmony.xml.ExpatPullParser;

        z0 = $r0.<org.apache.harmony.xml.ExpatPullParser: boolean relaxed>;

        return z0;
    }

    public void defineEntityReplacementText(java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1, $r2;
        java.lang.UnsupportedOperationException $r3;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;
    }

    public int getAttributeCount()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        org.apache.harmony.xml.ExpatPullParser$Document $r1;
        org.apache.harmony.xml.ExpatPullParser$Event $r2;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r2 = $r1.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.xml.ExpatPullParser$Event: int getAttributeCount()>();

        return $i0;
    }

    public java.lang.String getAttributeName(int)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;
        org.apache.harmony.xml.ExpatPullParser$Event $r3;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r1 = virtualinvoke $r3.<org.apache.harmony.xml.ExpatPullParser$Event: java.lang.String getAttributeName(int)>($i0);

        return $r1;
    }

    public java.lang.String getAttributeNamespace(int)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;
        org.apache.harmony.xml.ExpatPullParser$Event $r3;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r1 = virtualinvoke $r3.<org.apache.harmony.xml.ExpatPullParser$Event: java.lang.String getAttributeNamespace(int)>($i0);

        return $r1;
    }

    public java.lang.String getAttributePrefix(int)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.String getAttributeType(int)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        return "CDATA";
    }

    public java.lang.String getAttributeValue(int)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;
        org.apache.harmony.xml.ExpatPullParser$Event $r3;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r1 = virtualinvoke $r3.<org.apache.harmony.xml.ExpatPullParser$Event: java.lang.String getAttributeValue(int)>($i0);

        return $r1;
    }

    public java.lang.String getAttributeValue(java.lang.String, java.lang.String)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1, $r2;
        org.apache.harmony.xml.ExpatPullParser$Document $r3;
        org.apache.harmony.xml.ExpatPullParser$Event $r4;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r4 = $r3.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r1 = virtualinvoke $r4.<org.apache.harmony.xml.ExpatPullParser$Event: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>($r1, $r2);

        return $r1;
    }

    public int getColumnNumber()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        return -1;
    }

    public int getDepth()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        org.apache.harmony.xml.ExpatPullParser$Document $r1;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.xml.ExpatPullParser$Document: int getDepth()>();

        return $i0;
    }

    public int getEventType() throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        org.apache.harmony.xml.ExpatPullParser$Document $r1;
        org.apache.harmony.xml.ExpatPullParser$Event $r2;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r2 = $r1.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.xml.ExpatPullParser$Event: int getType()>();

        return $i0;
    }

    public boolean getFeature(java.lang.String)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null feature name");

        throw $r2;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/features.html#process-namespaces");

        if $z0 == 0 goto label2;

        $z0 = $r0.<org.apache.harmony.xml.ExpatPullParser: boolean processNamespaces>;

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public java.lang.String getInputEncoding()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.xml.ExpatPullParser$Document: java.lang.String getEncoding()>();

        return $r1;
    }

    public int getLineNumber()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        return -1;
    }

    public java.lang.String getName()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;
        org.apache.harmony.xml.ExpatPullParser$Event $r3;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r1 = virtualinvoke $r3.<org.apache.harmony.xml.ExpatPullParser$Event: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getNamespace()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;
        org.apache.harmony.xml.ExpatPullParser$Event $r3;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r1 = virtualinvoke $r3.<org.apache.harmony.xml.ExpatPullParser$Event: java.lang.String getNamespace()>();

        return $r1;
    }

    public java.lang.String getNamespace(java.lang.String)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;
        org.apache.harmony.xml.ExpatPullParser$Event $r3;
        org.apache.harmony.xml.ExpatPullParser$NamespaceStack $r4;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r1 = "";

     label1:
        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r4 = $r3.<org.apache.harmony.xml.ExpatPullParser$Event: org.apache.harmony.xml.ExpatPullParser$NamespaceStack namespaceStack>;

        $r1 = virtualinvoke $r4.<org.apache.harmony.xml.ExpatPullParser$NamespaceStack: java.lang.String uriFor(java.lang.String)>($r1);

        return $r1;
    }

    public int getNamespaceCount(int) throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        org.apache.harmony.xml.ExpatPullParser$Document $r1;
        org.apache.harmony.xml.ExpatPullParser$Event $r2;
        org.apache.harmony.xml.ExpatPullParser$NamespaceStack $r3;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r2 = $r1.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Event: org.apache.harmony.xml.ExpatPullParser$NamespaceStack namespaceStack>;

        $i0 = virtualinvoke $r3.<org.apache.harmony.xml.ExpatPullParser$NamespaceStack: int countAt(int)>($i0);

        return $i0;
    }

    public java.lang.String getNamespacePrefix(int) throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;
        org.apache.harmony.xml.ExpatPullParser$Event $r3;
        org.apache.harmony.xml.ExpatPullParser$NamespaceStack $r4;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r4 = $r3.<org.apache.harmony.xml.ExpatPullParser$Event: org.apache.harmony.xml.ExpatPullParser$NamespaceStack namespaceStack>;

        $r1 = virtualinvoke $r4.<org.apache.harmony.xml.ExpatPullParser$NamespaceStack: java.lang.String prefixAt(int)>($i0);

        if $r1 == "" goto label2;

        $z0 = 1;

     label1:
        if $z0 == 0 goto label3;

        return $r1;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return null;
    }

    public java.lang.String getNamespaceUri(int) throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        java.lang.String $r1;
        org.apache.harmony.xml.ExpatPullParser$Document $r2;
        org.apache.harmony.xml.ExpatPullParser$Event $r3;
        org.apache.harmony.xml.ExpatPullParser$NamespaceStack $r4;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        $r2 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r3 = $r2.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r4 = $r3.<org.apache.harmony.xml.ExpatPullParser$Event: org.apache.harmony.xml.ExpatPullParser$NamespaceStack namespaceStack>;

        $r1 = virtualinvoke $r4.<org.apache.harmony.xml.ExpatPullParser$NamespaceStack: java.lang.String uriAt(int)>($i0);

        return $r1;
    }

    public java.lang.String getPositionDescription()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("line ");

        $i0 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: int getLineNumber()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");

        $i0 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: int getColumnNumber()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getPrefix()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getText()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        org.apache.harmony.xml.ExpatPullParser$Document $r1;
        org.apache.harmony.xml.ExpatPullParser$Event $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r2 = $r1.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.xml.ExpatPullParser$Event: java.lang.StringBuilder getText()>();

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public char[] getTextCharacters(int[])
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int[] $r1;
        char[] $r2;
        org.apache.harmony.xml.ExpatPullParser$Document $r3;
        org.apache.harmony.xml.ExpatPullParser$Event $r4;
        java.lang.StringBuilder $r5;
        int $i0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: int[];

        $r3 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r4 = $r3.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.xml.ExpatPullParser$Event: java.lang.StringBuilder getText()>();

        $i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        $r2 = newarray (char)[$i0];

        virtualinvoke $r5.<java.lang.StringBuilder: void getChars(int,int,char[],int)>(0, $i0, $r2, 0);

        $r1[0] = 0;

        $r1[1] = $i0;

        return $r2;
    }

    public boolean isAttributeDefault(int)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean isEmptyElementTag() throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        boolean $z0;
        org.apache.harmony.xml.ExpatPullParser$Document $r1;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xml.ExpatPullParser$Document: boolean isCurrentElementEmpty()>();

        return $z0;
    }

    public boolean isNamespaceProcessingEnabled()
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        z0 = $r0.<org.apache.harmony.xml.ExpatPullParser: boolean processNamespaces>;

        return z0;
    }

    public boolean isWhitespace() throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0, $i1;
        org.xmlpull.v1.XmlPullParserException $r1;
        java.lang.String $r2;
        char $c2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: int getEventType()>();

        if $i0 == 4 goto label1;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Not on text.");

        throw $r1;

     label1:
        $r2 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: java.lang.String getText()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        return 1;

     label2:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        $c2 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i1);

        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c2);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return 1;
    }

    public int next() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0;
        org.apache.harmony.xml.ExpatPullParser$Document $r1;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.xml.ExpatPullParser$Document: int dequeue()>();

        return $i0;
    }

    public int nextTag() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0, $i1;
        boolean $z0;
        org.xmlpull.v1.XmlPullParserException $r1;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: int next()>();

        $i1 = $i0;

        if $i0 != 4 goto label1;

        $z0 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: boolean isWhitespace()>();

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: int next()>();

     label1:
        if $i1 == 2 goto label2;

        if $i1 == 3 goto label3;

        $r1 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r1.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)>("Expected start or end tag", $r0, null);

        throw $r1;

     label2:
        return $i1;

     label3:
        return $i1;
    }

    public java.lang.String nextText() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        org.apache.harmony.xml.ExpatPullParser$Document $r1;
        org.apache.harmony.xml.ExpatPullParser$Event $r2;
        int $i0;
        org.xmlpull.v1.XmlPullParserException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String[] $r5;
        java.lang.String $r6;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $r2 = $r1.<org.apache.harmony.xml.ExpatPullParser$Document: org.apache.harmony.xml.ExpatPullParser$Event currentEvent>;

        $i0 = virtualinvoke $r2.<org.apache.harmony.xml.ExpatPullParser$Event: int getType()>();

        if $i0 == 2 goto label1;

        $r3 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Not on start tag.");

        throw $r3;

     label1:
        $r1 = $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document>;

        $i0 = virtualinvoke $r1.<org.apache.harmony.xml.ExpatPullParser$Document: int dequeue()>();

        lookupswitch($i0)
        {
            case 3: goto label4;
            case 4: goto label3;
            default: goto label2;
        };

     label2:
        $r3 = new org.xmlpull.v1.XmlPullParserException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected event type: ");

        $r5 = <org.apache.harmony.xml.ExpatPullParser: java.lang.String[] TYPES>;

        $r6 = $r5[$i0];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r6);

        throw $r3;

     label3:
        $r6 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: java.lang.String getText()>();

        return $r6;

     label4:
        return "";
    }

    public int nextToken() throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public void require(int, java.lang.String, java.lang.String) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r3;
        boolean $z0;
        org.xmlpull.v1.XmlPullParserException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String[] $r6;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i1 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: int getEventType()>();

        if $i0 != $i1 goto label2;

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: java.lang.String getNamespace()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

     label1:
        if $r2 == null goto label3;

        $r1 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label4;

     label2:
        $r4 = new org.xmlpull.v1.XmlPullParserException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");

        $r6 = <org.apache.harmony.xml.ExpatPullParser: java.lang.String[] TYPES>;

        $r1 = $r6[$i0];

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<org.apache.harmony.xml.ExpatPullParser: java.lang.String getPositionDescription()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label3:
        return;

     label4:
        return;
    }

    public void setFeature(java.lang.String, boolean) throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;
        org.xmlpull.v1.XmlPullParserException $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null feature name");

        throw $r2;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/features.html#process-namespaces");

        if $z1 == 0 goto label2;

        $r0.<org.apache.harmony.xml.ExpatPullParser: boolean processNamespaces> = $z0;

        return;

     label2:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/features.html#relaxed");

        if $z1 == 0 goto label3;

        $r0.<org.apache.harmony.xml.ExpatPullParser: boolean relaxed> = 1;

        return;

     label3:
        if $z0 != 0 goto label4;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/features.html#report-namespace-prefixes");

        if $z0 != 0 goto label5;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/features.html#process-docdecl");

        if $z0 != 0 goto label6;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("http://xmlpull.org/v1/doc/features.html#validation");

        if $z0 != 0 goto label7;

     label4:
        $r3 = new org.xmlpull.v1.XmlPullParserException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported feature: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label5:
        return;

     label6:
        return;

     label7:
        return;
    }

    public void setInput(java.io.InputStream, java.lang.String) throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.io.InputStream $r1;
        java.lang.String $r2;
        org.apache.harmony.xml.ExpatPullParser$ByteDocument $r3;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.lang.String;

        $r3 = new org.apache.harmony.xml.ExpatPullParser$ByteDocument;

        $z0 = $r0.<org.apache.harmony.xml.ExpatPullParser: boolean processNamespaces>;

        specialinvoke $r3.<org.apache.harmony.xml.ExpatPullParser$ByteDocument: void <init>(org.apache.harmony.xml.ExpatPullParser,java.io.InputStream,java.lang.String,boolean)>($r0, $r1, $r2, $z0);

        $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document> = $r3;

        return;
    }

    public void setInput(java.io.Reader) throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.io.Reader $r1;
        org.apache.harmony.xml.ExpatPullParser$CharDocument $r2;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.io.Reader;

        $r2 = new org.apache.harmony.xml.ExpatPullParser$CharDocument;

        $z0 = $r0.<org.apache.harmony.xml.ExpatPullParser: boolean processNamespaces>;

        specialinvoke $r2.<org.apache.harmony.xml.ExpatPullParser$CharDocument: void <init>(org.apache.harmony.xml.ExpatPullParser,java.io.Reader,boolean)>($r0, $r1, $z0);

        $r0.<org.apache.harmony.xml.ExpatPullParser: org.apache.harmony.xml.ExpatPullParser$Document document> = $r2;

        return;
    }

    public void setNamespaceProcessingEnabled(boolean)
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $z0 := @parameter0: boolean;

        $r0.<org.apache.harmony.xml.ExpatPullParser: boolean processNamespaces> = $z0;

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object) throws org.xmlpull.v1.XmlPullParserException
    {
        org.apache.harmony.xml.ExpatPullParser $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3;
        org.xmlpull.v1.XmlPullParserException $r4;

        $r0 := @this: org.apache.harmony.xml.ExpatPullParser;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null feature name");

        throw $r3;

     label1:
        $r4 = new org.xmlpull.v1.XmlPullParserException;

        specialinvoke $r4.<org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)>("Properties aren\'t supported.");

        throw $r4;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.xml.ExpatPullParser: java.lang.String NOT_A_START_TAG> = "This is not a start tag.";

        <org.apache.harmony.xml.ExpatPullParser: java.lang.String FEATURE_RELAXED> = "http://xmlpull.org/v1/doc/features.html#relaxed";

        <org.apache.harmony.xml.ExpatPullParser: int BUFFER_SIZE> = 8096;

        return;
    }
}
