public abstract class android.view.Window extends java.lang.Object
{
    protected static final int DEFAULT_FEATURES;
    public static final int FEATURE_CONTEXT_MENU;
    public static final int FEATURE_CUSTOM_TITLE;
    public static final int FEATURE_INDETERMINATE_PROGRESS;
    public static final int FEATURE_LEFT_ICON;
    public static final int FEATURE_NO_TITLE;
    private static final int FEATURE_OPENGL;
    public static final int FEATURE_OPTIONS_PANEL;
    public static final int FEATURE_PROGRESS;
    public static final int FEATURE_RIGHT_ICON;
    public static final int ID_ANDROID_CONTENT;
    public static final int PROGRESS_END;
    public static final int PROGRESS_INDETERMINATE_OFF;
    public static final int PROGRESS_INDETERMINATE_ON;
    public static final int PROGRESS_SECONDARY_END;
    public static final int PROGRESS_SECONDARY_START;
    public static final int PROGRESS_START;
    public static final int PROGRESS_VISIBILITY_OFF;
    public static final int PROGRESS_VISIBILITY_ON;
    private android.view.Window mActiveChild;
    private java.lang.String mAppName;
    private android.os.IBinder mAppToken;
    private android.view.Window$Callback mCallback;
    private android.view.Window mContainer;
    private final android.content.Context mContext;
    private int mDefaultWindowFormat;
    private int mFeatures;
    private int mForcedWindowFlags;
    private boolean mHasChildren;
    private boolean mHasSoftInputMode;
    private boolean mHaveWindowFormat;
    private boolean mIsActive;
    private int mLocalFeatures;
    private final android.view.WindowManager$LayoutParams mWindowAttributes;
    private android.view.WindowManager mWindowManager;
    private android.content.res.TypedArray mWindowStyle;

    public void <init>(android.content.Context)
    {
        android.view.Window $r0;
        android.content.Context $r1;
        android.view.WindowManager$LayoutParams $r2;

        $r0 := @this: android.view.Window;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.view.Window: boolean mIsActive> = 0;

        $r0.<android.view.Window: boolean mHasChildren> = 0;

        $r0.<android.view.Window: int mForcedWindowFlags> = 0;

        $r0.<android.view.Window: int mFeatures> = 65;

        $r0.<android.view.Window: int mLocalFeatures> = 65;

        $r0.<android.view.Window: boolean mHaveWindowFormat> = 0;

        $r0.<android.view.Window: int mDefaultWindowFormat> = -1;

        $r0.<android.view.Window: boolean mHasSoftInputMode> = 0;

        $r2 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r2.<android.view.WindowManager$LayoutParams: void <init>()>();

        $r0.<android.view.Window: android.view.WindowManager$LayoutParams mWindowAttributes> = $r2;

        $r0.<android.view.Window: android.content.Context mContext> = $r1;

        return;
    }

    static java.lang.String access$000(android.view.Window)
    {
        android.view.Window $r0;
        java.lang.String r1;

        $r0 := @parameter0: android.view.Window;

        r1 = $r0.<android.view.Window: java.lang.String mAppName>;

        return r1;
    }

    static android.view.Window access$100(android.view.Window)
    {
        android.view.Window $r0;

        $r0 := @parameter0: android.view.Window;

        $r0 = $r0.<android.view.Window: android.view.Window mContainer>;

        return $r0;
    }

    static android.os.IBinder access$200(android.view.Window)
    {
        android.view.Window $r0;
        android.os.IBinder r1;

        $r0 := @parameter0: android.view.Window;

        r1 = $r0.<android.view.Window: android.os.IBinder mAppToken>;

        return r1;
    }

    static android.content.Context access$300(android.view.Window)
    {
        android.view.Window $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.view.Window;

        r1 = $r0.<android.view.Window: android.content.Context mContext>;

        return r1;
    }

    public abstract void addContentView(android.view.View, android.view.ViewGroup$LayoutParams);

    public void addFlags(int)
    {
        android.view.Window $r0;
        int $i0;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<android.view.Window: void setFlags(int,int)>($i0, $i0);

        return;
    }

    public void clearFlags(int)
    {
        android.view.Window $r0;
        int $i0;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<android.view.Window: void setFlags(int,int)>(0, $i0);

        return;
    }

    public abstract void closeAllPanels();

    public abstract void closePanel(int);

    public android.view.View findViewById(int)
    {
        android.view.Window $r0;
        int $i0;
        android.view.View $r1;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.View getDecorView()>();

        $r1 = virtualinvoke $r1.<android.view.View: android.view.View findViewById(int)>($i0);

        return $r1;
    }

    public final android.view.WindowManager$LayoutParams getAttributes()
    {
        android.view.Window $r0;
        android.view.WindowManager$LayoutParams r1;

        $r0 := @this: android.view.Window;

        r1 = $r0.<android.view.Window: android.view.WindowManager$LayoutParams mWindowAttributes>;

        return r1;
    }

    public final android.view.Window$Callback getCallback()
    {
        android.view.Window $r0;
        android.view.Window$Callback r1;

        $r0 := @this: android.view.Window;

        r1 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        return r1;
    }

    public final android.view.Window getContainer()
    {
        android.view.Window $r0;

        $r0 := @this: android.view.Window;

        $r0 = $r0.<android.view.Window: android.view.Window mContainer>;

        return $r0;
    }

    public final android.content.Context getContext()
    {
        android.view.Window $r0;
        android.content.Context r1;

        $r0 := @this: android.view.Window;

        r1 = $r0.<android.view.Window: android.content.Context mContext>;

        return r1;
    }

    public abstract android.view.View getCurrentFocus();

    public abstract android.view.View getDecorView();

    protected final int getFeatures()
    {
        android.view.Window $r0;
        int i0;

        $r0 := @this: android.view.Window;

        i0 = $r0.<android.view.Window: int mFeatures>;

        return i0;
    }

    protected final int getForcedWindowFlags()
    {
        android.view.Window $r0;
        int i0;

        $r0 := @this: android.view.Window;

        i0 = $r0.<android.view.Window: int mForcedWindowFlags>;

        return i0;
    }

    public abstract android.view.LayoutInflater getLayoutInflater();

    protected final int getLocalFeatures()
    {
        android.view.Window $r0;
        int i0;

        $r0 := @this: android.view.Window;

        i0 = $r0.<android.view.Window: int mLocalFeatures>;

        return i0;
    }

    public abstract int getVolumeControlStream();

    public android.view.WindowManager getWindowManager()
    {
        android.view.Window $r0;
        android.view.WindowManager r1;

        $r0 := @this: android.view.Window;

        r1 = $r0.<android.view.Window: android.view.WindowManager mWindowManager>;

        return r1;
    }

    public final android.content.res.TypedArray getWindowStyle()
    {
        android.view.Window $r0;
        int[] $r1;
        android.content.res.TypedArray $r2;
        android.content.Context $r3;
        java.lang.Throwable $r4;

        $r0 := @this: android.view.Window;

        entermonitor $r0;

     label1:
        $r2 = $r0.<android.view.Window: android.content.res.TypedArray mWindowStyle>;

        if $r2 != null goto label2;

        $r3 = $r0.<android.view.Window: android.content.Context mContext>;

        $r1 = <com.android.internal.R$styleable: int[] Window>;

        $r2 = virtualinvoke $r3.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r1);

        $r0.<android.view.Window: android.content.res.TypedArray mWindowStyle> = $r2;

     label2:
        $r2 = $r0.<android.view.Window: android.content.res.TypedArray mWindowStyle>;

        exitmonitor $r0;

     label3:
        return $r2;

     label4:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public final boolean hasChildren()
    {
        android.view.Window $r0;
        boolean z0;

        $r0 := @this: android.view.Window;

        z0 = $r0.<android.view.Window: boolean mHasChildren>;

        return z0;
    }

    protected final boolean hasSoftInputMode()
    {
        android.view.Window $r0;
        boolean z0;

        $r0 := @this: android.view.Window;

        z0 = $r0.<android.view.Window: boolean mHasSoftInputMode>;

        return z0;
    }

    public final boolean isActive()
    {
        android.view.Window $r0;
        boolean z0;

        $r0 := @this: android.view.Window;

        z0 = $r0.<android.view.Window: boolean mIsActive>;

        return z0;
    }

    public abstract boolean isFloating();

    public abstract boolean isShortcutKey(int, android.view.KeyEvent);

    public final void makeActive()
    {
        android.view.Window $r0, $r1;

        $r0 := @this: android.view.Window;

        $r1 = $r0.<android.view.Window: android.view.Window mContainer>;

        if $r1 == null goto label2;

        $r1 = $r0.<android.view.Window: android.view.Window mContainer>;

        $r1 = $r1.<android.view.Window: android.view.Window mActiveChild>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.view.Window: android.view.Window mContainer>;

        $r1 = $r1.<android.view.Window: android.view.Window mActiveChild>;

        $r1.<android.view.Window: boolean mIsActive> = 0;

     label1:
        $r1 = $r0.<android.view.Window: android.view.Window mContainer>;

        $r1.<android.view.Window: android.view.Window mActiveChild> = $r0;

     label2:
        $r0.<android.view.Window: boolean mIsActive> = 1;

        virtualinvoke $r0.<android.view.Window: void onActive()>();

        return;
    }

    protected abstract void onActive();

    public abstract void onConfigurationChanged(android.content.res.Configuration);

    public abstract void openPanel(int, android.view.KeyEvent);

    public abstract android.view.View peekDecorView();

    public abstract boolean performContextMenuIdentifierAction(int, int);

    public abstract boolean performPanelIdentifierAction(int, int, int);

    public abstract boolean performPanelShortcut(int, int, android.view.KeyEvent, int);

    public boolean requestFeature(int)
    {
        android.view.Window $r0, $r1;
        int $i0, $i1, $i2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $i0 = 1 << $i0;

        $i1 = $r0.<android.view.Window: int mFeatures>;

        $i1 = $i1 | $i0;

        $r0.<android.view.Window: int mFeatures> = $i1;

        $i1 = $r0.<android.view.Window: int mLocalFeatures>;

        $r1 = $r0.<android.view.Window: android.view.Window mContainer>;

        if $r1 == null goto label2;

        $r1 = $r0.<android.view.Window: android.view.Window mContainer>;

        $i2 = $r1.<android.view.Window: int mFeatures>;

        $i2 = $i2 ^ -1;

        $i2 = $i2 & $i0;

     label1:
        $i1 = $i1 | $i2;

        $r0.<android.view.Window: int mLocalFeatures> = $i1;

        $i1 = $r0.<android.view.Window: int mFeatures>;

        $i0 = $i1 & $i0;

        if $i0 == 0 goto label3;

        return 1;

     label2:
        $i2 = $i0;

        goto label1;

     label3:
        return 0;
    }

    public abstract void restoreHierarchyState(android.os.Bundle);

    public abstract android.os.Bundle saveHierarchyState();

    public void setAttributes(android.view.WindowManager$LayoutParams)
    {
        android.view.Window $r0;
        android.view.WindowManager$LayoutParams $r1, $r2;
        android.view.Window$Callback $r3;

        $r0 := @this: android.view.Window;

        $r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 = $r0.<android.view.Window: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke $r2.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>($r1);

        $r3 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r3 == null goto label1;

        $r3 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        $r1 = $r0.<android.view.Window: android.view.WindowManager$LayoutParams mWindowAttributes>;

        interfaceinvoke $r3.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label1:
        return;
    }

    public abstract void setBackgroundDrawable(android.graphics.drawable.Drawable);

    public void setBackgroundDrawableResource(int)
    {
        android.view.Window $r0;
        int $i0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        android.graphics.drawable.Drawable $r3;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.view.Window: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>($i0);

        virtualinvoke $r0.<android.view.Window: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r3);

        return;
    }

    public void setCallback(android.view.Window$Callback)
    {
        android.view.Window $r0;
        android.view.Window$Callback $r1;

        $r0 := @this: android.view.Window;

        $r1 := @parameter0: android.view.Window$Callback;

        $r0.<android.view.Window: android.view.Window$Callback mCallback> = $r1;

        return;
    }

    public abstract void setChildDrawable(int, android.graphics.drawable.Drawable);

    public abstract void setChildInt(int, int);

    public void setContainer(android.view.Window)
    {
        android.view.Window $r0, $r1;
        int $i0;

        $r0 := @this: android.view.Window;

        $r1 := @parameter0: android.view.Window;

        $r0.<android.view.Window: android.view.Window mContainer> = $r1;

        if $r1 == null goto label1;

        $i0 = $r0.<android.view.Window: int mFeatures>;

        $i0 = $i0 | 2;

        $r0.<android.view.Window: int mFeatures> = $i0;

        $i0 = $r0.<android.view.Window: int mLocalFeatures>;

        $i0 = $i0 | 2;

        $r0.<android.view.Window: int mLocalFeatures> = $i0;

        $r1.<android.view.Window: boolean mHasChildren> = 1;

        return;

     label1:
        return;
    }

    public abstract void setContentView(int);

    public abstract void setContentView(android.view.View);

    public abstract void setContentView(android.view.View, android.view.ViewGroup$LayoutParams);

    protected void setDefaultWindowFormat(int)
    {
        android.view.Window $r0;
        int $i0;
        android.view.WindowManager$LayoutParams $r1;
        boolean $z0;
        android.view.Window$Callback $r2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $r0.<android.view.Window: int mDefaultWindowFormat> = $i0;

        $z0 = $r0.<android.view.Window: boolean mHaveWindowFormat>;

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $r1.<android.view.WindowManager$LayoutParams: int format> = $i0;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label2;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r2.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label1:
        return;

     label2:
        return;
    }

    public abstract void setFeatureDrawable(int, android.graphics.drawable.Drawable);

    public abstract void setFeatureDrawableAlpha(int, int);

    public abstract void setFeatureDrawableResource(int, int);

    public abstract void setFeatureDrawableUri(int, android.net.Uri);

    public abstract void setFeatureInt(int, int);

    public void setFlags(int, int)
    {
        android.view.Window $r0;
        int $i0, $i1, $i2, $i3;
        android.view.WindowManager$LayoutParams $r1;
        android.view.Window$Callback $r2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $i2 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i1 ^ -1;

        $i2 = $i2 & $i3;

        $i0 = $i0 & $i1;

        $i0 = $i2 | $i0;

        $r1.<android.view.WindowManager$LayoutParams: int flags> = $i0;

        $i0 = $r0.<android.view.Window: int mForcedWindowFlags>;

        $i0 = $i0 | $i1;

        $r0.<android.view.Window: int mForcedWindowFlags> = $i0;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r2.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label1:
        return;
    }

    public void setFormat(int)
    {
        android.view.Window $r0;
        int $i0;
        android.view.WindowManager$LayoutParams $r1;
        android.view.Window$Callback $r2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        if $i0 == 0 goto label2;

        $r1.<android.view.WindowManager$LayoutParams: int format> = $i0;

        $r0.<android.view.Window: boolean mHaveWindowFormat> = 1;

     label1:
        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label3;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r2.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label2:
        $i0 = $r0.<android.view.Window: int mDefaultWindowFormat>;

        $r1.<android.view.WindowManager$LayoutParams: int format> = $i0;

        $r0.<android.view.Window: boolean mHaveWindowFormat> = 0;

        goto label1;

     label3:
        return;
    }

    public void setGravity(int)
    {
        android.view.Window $r0;
        int $i0;
        android.view.WindowManager$LayoutParams $r1;
        android.view.Window$Callback $r2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $r1.<android.view.WindowManager$LayoutParams: int gravity> = $i0;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r2.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label1:
        return;
    }

    public void setLayout(int, int)
    {
        android.view.Window $r0;
        int $i0, $i1;
        android.view.WindowManager$LayoutParams $r1;
        android.view.Window$Callback $r2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $r1.<android.view.ViewGroup$LayoutParams: int width> = $i0;

        $r1.<android.view.ViewGroup$LayoutParams: int height> = $i1;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r2.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label1:
        return;
    }

    public void setSoftInputMode(int)
    {
        android.view.Window $r0;
        int $i0;
        android.view.WindowManager$LayoutParams $r1;
        android.view.Window$Callback $r2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        if $i0 == 0 goto label2;

        $r1.<android.view.WindowManager$LayoutParams: int softInputMode> = $i0;

        $r0.<android.view.Window: boolean mHasSoftInputMode> = 1;

     label1:
        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label3;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r2.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label2:
        $r0.<android.view.Window: boolean mHasSoftInputMode> = 0;

        goto label1;

     label3:
        return;
    }

    public abstract void setTitle(java.lang.CharSequence);

    public abstract void setTitleColor(int);

    public void setType(int)
    {
        android.view.Window $r0;
        int $i0;
        android.view.WindowManager$LayoutParams $r1;
        android.view.Window$Callback $r2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $r1.<android.view.WindowManager$LayoutParams: int type> = $i0;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r2.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label1:
        return;
    }

    public abstract void setVolumeControlStream(int);

    public void setWindowAnimations(int)
    {
        android.view.Window $r0;
        int $i0;
        android.view.WindowManager$LayoutParams $r1;
        android.view.Window$Callback $r2;

        $r0 := @this: android.view.Window;

        $i0 := @parameter0: int;

        $r1 = virtualinvoke $r0.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $r1.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i0;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        if $r2 == null goto label1;

        $r2 = $r0.<android.view.Window: android.view.Window$Callback mCallback>;

        interfaceinvoke $r2.<android.view.Window$Callback: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r1);

        return;

     label1:
        return;
    }

    public void setWindowManager(android.view.WindowManager, android.os.IBinder, java.lang.String)
    {
        android.view.Window $r0;
        android.os.IBinder $r1;
        java.lang.String $r2;
        android.view.Window$LocalWindowManager $r3;
        android.view.WindowManager $r5;

        $r0 := @this: android.view.Window;

        $r5 := @parameter0: android.view.WindowManager;

        $r1 := @parameter1: android.os.IBinder;

        $r2 := @parameter2: java.lang.String;

        $r0.<android.view.Window: android.os.IBinder mAppToken> = $r1;

        $r0.<android.view.Window: java.lang.String mAppName> = $r2;

        if $r5 != null goto label1;

        $r5 = staticinvoke <android.view.WindowManagerImpl: android.view.WindowManagerImpl getDefault()>();

     label1:
        $r3 = new android.view.Window$LocalWindowManager;

        specialinvoke $r3.<android.view.Window$LocalWindowManager: void <init>(android.view.Window,android.view.WindowManager)>($r0, $r5);

        $r0.<android.view.Window: android.view.WindowManager mWindowManager> = $r3;

        return;
    }

    public abstract boolean superDispatchKeyEvent(android.view.KeyEvent);

    public abstract boolean superDispatchTouchEvent(android.view.MotionEvent);

    public abstract boolean superDispatchTrackballEvent(android.view.MotionEvent);

    public abstract void takeKeyEvents(boolean);

    public abstract void togglePanel(int, android.view.KeyEvent);

    public static void <clinit>()
    {
        <android.view.Window: int PROGRESS_VISIBILITY_ON> = -1;

        <android.view.Window: int PROGRESS_VISIBILITY_OFF> = -2;

        <android.view.Window: int PROGRESS_START> = 0;

        <android.view.Window: int PROGRESS_SECONDARY_START> = 20000;

        <android.view.Window: int PROGRESS_SECONDARY_END> = 30000;

        <android.view.Window: int PROGRESS_INDETERMINATE_ON> = -3;

        <android.view.Window: int PROGRESS_INDETERMINATE_OFF> = -4;

        <android.view.Window: int PROGRESS_END> = 10000;

        <android.view.Window: int ID_ANDROID_CONTENT> = 16908290;

        <android.view.Window: int FEATURE_RIGHT_ICON> = 4;

        <android.view.Window: int FEATURE_PROGRESS> = 2;

        <android.view.Window: int FEATURE_OPTIONS_PANEL> = 0;

        <android.view.Window: int FEATURE_OPENGL> = 8;

        <android.view.Window: int FEATURE_NO_TITLE> = 1;

        <android.view.Window: int FEATURE_LEFT_ICON> = 3;

        <android.view.Window: int FEATURE_INDETERMINATE_PROGRESS> = 5;

        <android.view.Window: int FEATURE_CUSTOM_TITLE> = 7;

        <android.view.Window: int FEATURE_CONTEXT_MENU> = 6;

        <android.view.Window: int DEFAULT_FEATURES> = 65;

        return;
    }
}
