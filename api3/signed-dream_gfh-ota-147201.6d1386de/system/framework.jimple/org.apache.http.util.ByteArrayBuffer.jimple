public final class org.apache.http.util.ByteArrayBuffer extends java.lang.Object
{
    private byte[] buffer;
    private int len;

    public void <init>(int)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        byte[] $r2;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer capacity may not be negative");

        throw $r1;

     label1:
        $r2 = newarray (byte)[$i0];

        $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer> = $r2;

        return;
    }

    private void expand(int)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        int $i0, $i1;
        byte[] $r1, $r2;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i1 = lengthof $r1;

        $i1 = $i1 << 1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $r1 = newarray (byte)[$i0];

        $r2 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i0 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer> = $r1;

        return;
    }

    public void append(int)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        int $i0, $i1, $i2;
        byte $b3;
        byte[] $r1;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 := @parameter0: int;

        $i1 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $i1 = $i1 + 1;

        $r1 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i2 = lengthof $r1;

        if $i1 <= $i2 goto label1;

        specialinvoke $r0.<org.apache.http.util.ByteArrayBuffer: void expand(int)>($i1);

     label1:
        $r1 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i2 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $b3 = (byte) $i0;

        $r1[$i2] = $b3;

        $r0.<org.apache.http.util.ByteArrayBuffer: int len> = $i1;

        return;
    }

    public void append(org.apache.http.util.CharArrayBuffer, int, int)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0, $i1;
        char[] $r2;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: char[] buffer()>();

        virtualinvoke $r0.<org.apache.http.util.ByteArrayBuffer: void append(char[],int,int)>($r2, $i0, $i1);

        return;
    }

    public void append(byte[], int, int)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        byte[] $r1, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r2;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return;

     label1:
        if $i0 < 0 goto label2;

        $i2 = lengthof $r1;

        if $i0 > $i2 goto label2;

        if $i1 < 0 goto label2;

        $i2 = $i0 + $i1;

        if $i2 < 0 goto label2;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        if $i1 == 0 goto label5;

        $i2 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $i2 = $i2 + $i1;

        $r3 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i3 = lengthof $r3;

        if $i2 <= $i3 goto label4;

        specialinvoke $r0.<org.apache.http.util.ByteArrayBuffer: void expand(int)>($i2);

     label4:
        $r3 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i3 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r3, $i3, $i1);

        $r0.<org.apache.http.util.ByteArrayBuffer: int len> = $i2;

        return;

     label5:
        return;
    }

    public void append(char[], int, int)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        char[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r2;
        byte[] $r3;
        char $c4;
        byte $b5;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return;

     label1:
        if $i0 < 0 goto label2;

        $i2 = lengthof $r1;

        if $i0 > $i2 goto label2;

        if $i1 < 0 goto label2;

        $i2 = $i0 + $i1;

        if $i2 < 0 goto label2;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        if $i1 == 0 goto label6;

        $i2 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $i1 = $i2 + $i1;

        $r3 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i3 = lengthof $r3;

        if $i1 <= $i3 goto label4;

        specialinvoke $r0.<org.apache.http.util.ByteArrayBuffer: void expand(int)>($i1);

     label4:
        if $i2 >= $i1 goto label5;

        $r3 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $c4 = $r1[$i0];

        $b5 = (byte) $c4;

        $r3[$i2] = $b5;

        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        $r0.<org.apache.http.util.ByteArrayBuffer: int len> = $i1;

        return;

     label6:
        return;
    }

    public byte[] buffer()
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        byte[] r1;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        r1 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        return r1;
    }

    public int byteAt(int)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        int $i0;
        byte[] $r1;
        byte $b1;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $b1 = $r1[$i0];

        return $b1;
    }

    public int capacity()
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r1 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public void clear()
    {
        org.apache.http.util.ByteArrayBuffer $r0;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $r0.<org.apache.http.util.ByteArrayBuffer: int len> = 0;

        return;
    }

    public boolean isEmpty()
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        int $i0;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isFull()
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        int $i0, $i1;
        byte[] $r1;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $r1 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int length()
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        int i0;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        i0 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        return i0;
    }

    public void setLength(int)
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        int $i0, $i1;
        byte[] $r1;
        java.lang.IndexOutOfBoundsException $r2;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $r0.<org.apache.http.util.ByteArrayBuffer: int len> = $i0;

        return;
    }

    public byte[] toByteArray()
    {
        org.apache.http.util.ByteArrayBuffer $r0;
        byte[] $r1, $r2;
        int $i0;

        $r0 := @this: org.apache.http.util.ByteArrayBuffer;

        $i0 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        $r1 = newarray (byte)[$i0];

        $i0 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        if $i0 <= 0 goto label1;

        $r2 = $r0.<org.apache.http.util.ByteArrayBuffer: byte[] buffer>;

        $i0 = $r0.<org.apache.http.util.ByteArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        return $r1;

     label1:
        return $r1;
    }
}
