public class android.text.Selection extends java.lang.Object
{
    public static final java.lang.Object SELECTION_END;
    public static final java.lang.Object SELECTION_START;

    static void <clinit>()
    {
        android.text.Selection$START $r0;
        android.text.Selection$END $r1;

        $r0 = new android.text.Selection$START;

        specialinvoke $r0.<android.text.Selection$START: void <init>(android.text.Selection$1)>(null);

        <android.text.Selection: java.lang.Object SELECTION_START> = $r0;

        $r1 = new android.text.Selection$END;

        specialinvoke $r1.<android.text.Selection$END: void <init>(android.text.Selection$1)>(null);

        <android.text.Selection: java.lang.Object SELECTION_END> = $r1;

        return;
    }

    private void <init>()
    {
        android.text.Selection $r0;

        $r0 := @this: android.text.Selection;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int chooseHorizontal(android.text.Layout, int, int, int)
    {
        android.text.Layout $r0;
        int $i0, $i1, $i2, $i3, $i4;
        float $f0, $f1;
        byte $b5;

        $r0 := @parameter0: android.text.Layout;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 = virtualinvoke $r0.<android.text.Layout: int getLineForOffset(int)>($i1);

        $i4 = virtualinvoke $r0.<android.text.Layout: int getLineForOffset(int)>($i2);

        if $i3 != $i4 goto label4;

        $f0 = virtualinvoke $r0.<android.text.Layout: float getPrimaryHorizontal(int)>($i1);

        $f1 = virtualinvoke $r0.<android.text.Layout: float getPrimaryHorizontal(int)>($i2);

        if $i0 >= 0 goto label2;

        $b5 = $f0 cmpg $f1;

        if $b5 >= 0 goto label1;

        return $i1;

     label1:
        return $i2;

     label2:
        $b5 = $f0 cmpl $f1;

        if $b5 <= 0 goto label3;

        return $i1;

     label3:
        return $i2;

     label4:
        $i3 = virtualinvoke $r0.<android.text.Layout: int getLineForOffset(int)>($i1);

        $i3 = virtualinvoke $r0.<android.text.Layout: int getParagraphDirection(int)>($i3);

        if $i3 != $i0 goto label5;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i2);

        return $i0;

     label5:
        $i0 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        return $i0;
    }

    public static boolean extendDown(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1, $i2, $i3;
        float $f0;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        $i1 = virtualinvoke $r1.<android.text.Layout: int getLineForOffset(int)>($i0);

        $i2 = virtualinvoke $r1.<android.text.Layout: int getLineCount()>();

        $i2 = $i2 - 1;

        if $i1 >= $i2 goto label3;

        $i2 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i1);

        $i3 = $i1 + 1;

        $i3 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i3);

        if $i2 != $i3 goto label2;

        $f0 = virtualinvoke $r1.<android.text.Layout: float getPrimaryHorizontal(int)>($i0);

        $i0 = $i1 + 1;

        $i0 = virtualinvoke $r1.<android.text.Layout: int getOffsetForHorizontal(int,float)>($i0, $f0);

     label1:
        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;

     label2:
        $i0 = $i1 + 1;

        $i0 = virtualinvoke $r1.<android.text.Layout: int getLineStart(int)>($i0);

        goto label1;

     label3:
        $i1 = interfaceinvoke $r0.<android.text.Spannable: int length()>();

        if $i0 == $i1 goto label4;

        $i0 = interfaceinvoke $r0.<android.text.Spannable: int length()>();

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;

     label4:
        return 1;
    }

    public static boolean extendLeft(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        $i1 = virtualinvoke $r1.<android.text.Layout: int getOffsetToLeftOf(int)>($i0);

        if $i1 == $i0 goto label1;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>($r0, $i1);

        return 1;

     label1:
        return 1;
    }

    public static boolean extendRight(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        $i1 = virtualinvoke $r1.<android.text.Layout: int getOffsetToRightOf(int)>($i0);

        if $i1 == $i0 goto label1;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>($r0, $i1);

        return 1;

     label1:
        return 1;
    }

    public static final void extendSelection(android.text.Spannable, int)
    {
        android.text.Spannable $r0;
        int $i0, $i1;
        java.lang.Object $r1;

        $r0 := @parameter0: android.text.Spannable;

        $i0 := @parameter1: int;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_END>;

        $i1 = interfaceinvoke $r0.<android.text.Spannable: int getSpanStart(java.lang.Object)>($r1);

        if $i1 == $i0 goto label1;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_END>;

        interfaceinvoke $r0.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r1, $i0, $i0, 34);

        return;

     label1:
        return;
    }

    public static boolean extendToLeftEdge(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>($r0, $r1, -1);

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;
    }

    public static boolean extendToRightEdge(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>($r0, $r1, 1);

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;
    }

    public static boolean extendUp(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1, $i2, $i3;
        float $f0;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        $i1 = virtualinvoke $r1.<android.text.Layout: int getLineForOffset(int)>($i0);

        if $i1 <= 0 goto label3;

        $i2 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i1);

        $i3 = $i1 - 1;

        $i3 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i3);

        if $i2 != $i3 goto label2;

        $f0 = virtualinvoke $r1.<android.text.Layout: float getPrimaryHorizontal(int)>($i0);

        $i0 = $i1 - 1;

        $i0 = virtualinvoke $r1.<android.text.Layout: int getOffsetForHorizontal(int,float)>($i0, $f0);

     label1:
        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;

     label2:
        $i0 = $i1 - 1;

        $i0 = virtualinvoke $r1.<android.text.Layout: int getLineStart(int)>($i0);

        goto label1;

     label3:
        if $i0 == 0 goto label4;

        staticinvoke <android.text.Selection: void extendSelection(android.text.Spannable,int)>($r0, 0);

        return 1;

     label4:
        return 1;
    }

    private static int findEdge(android.text.Spannable, android.text.Layout, int)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1, $i2;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 := @parameter2: int;

        $i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        $i1 = virtualinvoke $r1.<android.text.Layout: int getLineForOffset(int)>($i1);

        $i2 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i1);

        $i0 = $i0 * $i2;

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r1.<android.text.Layout: int getLineStart(int)>($i1);

        return $i0;

     label1:
        $i0 = virtualinvoke $r1.<android.text.Layout: int getLineEnd(int)>($i1);

        $i2 = virtualinvoke $r1.<android.text.Layout: int getLineCount()>();

        $i2 = $i2 - 1;

        if $i1 != $i2 goto label2;

        return $i0;

     label2:
        $i0 = $i0 - 1;

        return $i0;
    }

    public static final int getSelectionEnd(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence $r0;
        boolean $z0;
        android.text.Spanned $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $z0 = $r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label1;

        $r1 = (android.text.Spanned) $r0;

        $r2 = <android.text.Selection: java.lang.Object SELECTION_END>;

        $i0 = interfaceinvoke $r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r2);

        return $i0;

     label1:
        return -1;
    }

    public static final int getSelectionStart(java.lang.CharSequence)
    {
        int $i0;
        java.lang.CharSequence $r0;
        boolean $z0;
        android.text.Spanned $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $z0 = $r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label1;

        $r1 = (android.text.Spanned) $r0;

        $r2 = <android.text.Selection: java.lang.Object SELECTION_START>;

        $i0 = interfaceinvoke $r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r2);

        return $i0;

     label1:
        return -1;
    }

    public static boolean moveDown(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1, $i2, $i3;
        float $f0;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>($r0);

        $i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        if $i0 == $i1 goto label2;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i1);

        if $i2 != 0 goto label1;

        $i2 = interfaceinvoke $r0.<android.text.Spannable: int length()>();

        if $i1 != $i2 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $i2 = virtualinvoke $r1.<android.text.Layout: int getLineForOffset(int)>($i1);

        $i0 = virtualinvoke $r1.<android.text.Layout: int getLineCount()>();

        $i0 = $i0 - 1;

        if $i2 >= $i0 goto label5;

        $i0 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i2);

        $i3 = $i2 + 1;

        $i3 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i3);

        if $i0 != $i3 goto label4;

        $f0 = virtualinvoke $r1.<android.text.Layout: float getPrimaryHorizontal(int)>($i1);

        $i1 = $i2 + 1;

        $i1 = virtualinvoke $r1.<android.text.Layout: int getOffsetForHorizontal(int,float)>($i1, $f0);

     label3:
        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i1);

        return 1;

     label4:
        $i1 = $i2 + 1;

        $i1 = virtualinvoke $r1.<android.text.Layout: int getLineStart(int)>($i1);

        goto label3;

     label5:
        return 0;
    }

    public static boolean moveLeft(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>($r0);

        $i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        if $i0 == $i1 goto label1;

        $i1 = staticinvoke <android.text.Selection: int chooseHorizontal(android.text.Layout,int,int,int)>($r1, -1, $i0, $i1);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i1);

        return 1;

     label1:
        $i0 = virtualinvoke $r1.<android.text.Layout: int getOffsetToLeftOf(int)>($i1);

        if $i0 == $i1 goto label2;

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;

     label2:
        return 0;
    }

    public static boolean moveRight(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>($r0);

        $i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        if $i0 == $i1 goto label1;

        $i1 = staticinvoke <android.text.Selection: int chooseHorizontal(android.text.Layout,int,int,int)>($r1, 1, $i0, $i1);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i1);

        return 1;

     label1:
        $i0 = virtualinvoke $r1.<android.text.Layout: int getOffsetToRightOf(int)>($i1);

        if $i0 == $i1 goto label2;

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;

     label2:
        return 0;
    }

    public static boolean moveToLeftEdge(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>($r0, $r1, -1);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;
    }

    public static boolean moveToRightEdge(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>($r0, $r1, 1);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i0);

        return 1;
    }

    public static boolean moveUp(android.text.Spannable, android.text.Layout)
    {
        android.text.Spannable $r0;
        android.text.Layout $r1;
        int $i0, $i1, $i2, $i3;
        float $f0;

        $r0 := @parameter0: android.text.Spannable;

        $r1 := @parameter1: android.text.Layout;

        $i0 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>($r0);

        $i1 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        if $i0 == $i1 goto label2;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i1);

        $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i2);

        if $i2 != 0 goto label1;

        $i2 = interfaceinvoke $r0.<android.text.Spannable: int length()>();

        if $i1 != $i2 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $i2 = virtualinvoke $r1.<android.text.Layout: int getLineForOffset(int)>($i1);

        if $i2 <= 0 goto label5;

        $i0 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i2);

        $i3 = $i2 - 1;

        $i3 = virtualinvoke $r1.<android.text.Layout: int getParagraphDirection(int)>($i3);

        if $i0 != $i3 goto label4;

        $f0 = virtualinvoke $r1.<android.text.Layout: float getPrimaryHorizontal(int)>($i1);

        $i1 = $i2 - 1;

        $i1 = virtualinvoke $r1.<android.text.Layout: int getOffsetForHorizontal(int,float)>($i1, $f0);

     label3:
        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int)>($r0, $i1);

        return 1;

     label4:
        $i1 = $i2 - 1;

        $i1 = virtualinvoke $r1.<android.text.Layout: int getLineStart(int)>($i1);

        goto label3;

     label5:
        return 0;
    }

    public static final void removeSelection(android.text.Spannable)
    {
        android.text.Spannable $r0;
        java.lang.Object $r1;

        $r0 := @parameter0: android.text.Spannable;

        $r1 = <android.text.Selection: java.lang.Object SELECTION_START>;

        interfaceinvoke $r0.<android.text.Spannable: void removeSpan(java.lang.Object)>($r1);

        $r1 = <android.text.Selection: java.lang.Object SELECTION_END>;

        interfaceinvoke $r0.<android.text.Spannable: void removeSpan(java.lang.Object)>($r1);

        return;
    }

    public static final void selectAll(android.text.Spannable)
    {
        android.text.Spannable $r0;
        int $i0;

        $r0 := @parameter0: android.text.Spannable;

        $i0 = interfaceinvoke $r0.<android.text.Spannable: int length()>();

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int,int)>($r0, 0, $i0);

        return;
    }

    public static final void setSelection(android.text.Spannable, int)
    {
        android.text.Spannable $r0;
        int $i0;

        $r0 := @parameter0: android.text.Spannable;

        $i0 := @parameter1: int;

        staticinvoke <android.text.Selection: void setSelection(android.text.Spannable,int,int)>($r0, $i0, $i0);

        return;
    }

    public static void setSelection(android.text.Spannable, int, int)
    {
        android.text.Spannable $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r1;

        $r0 := @parameter0: android.text.Spannable;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = staticinvoke <android.text.Selection: int getSelectionStart(java.lang.CharSequence)>($r0);

        $i3 = staticinvoke <android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>($r0);

        if $i2 != $i0 goto label1;

        if $i3 == $i1 goto label2;

     label1:
        $r1 = <android.text.Selection: java.lang.Object SELECTION_START>;

        interfaceinvoke $r0.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r1, $i0, $i0, 546);

        $r1 = <android.text.Selection: java.lang.Object SELECTION_END>;

        interfaceinvoke $r0.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r1, $i1, $i1, 34);

        return;

     label2:
        return;
    }
}
