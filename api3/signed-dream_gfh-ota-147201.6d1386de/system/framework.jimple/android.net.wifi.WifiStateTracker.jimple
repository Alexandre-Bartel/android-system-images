public class android.net.wifi.WifiStateTracker extends android.net.NetworkStateTracker
{
    private static final int DEFAULT_MAX_DHCP_RETRIES;
    private static final int DISCONNECT_DELAY_MSECS;
    private static final int DRIVER_POWER_MODE_ACTIVE;
    private static final int DRIVER_POWER_MODE_AUTO;
    private static final int EVENTLOG_DRIVER_STATE_CHANGED;
    private static final int EVENTLOG_INTERFACE_CONFIGURATION_STATE_CHANGED;
    private static final int EVENTLOG_NETWORK_STATE_CHANGED;
    private static final int EVENTLOG_SUPPLICANT_CONNECTION_STATE_CHANGED;
    private static final int EVENTLOG_SUPPLICANT_STATE_CHANGED;
    private static final int EVENT_DEFERRED_DISCONNECT;
    private static final int EVENT_DEFERRED_RECONNECT;
    private static final int EVENT_DHCP_START;
    private static final int EVENT_DRIVER_STATE_CHANGED;
    private static final int EVENT_INTERFACE_CONFIGURATION_FAILED;
    private static final int EVENT_INTERFACE_CONFIGURATION_SUCCEEDED;
    private static final int EVENT_NETWORK_STATE_CHANGED;
    private static final int EVENT_PASSWORD_KEY_MAY_BE_INCORRECT;
    private static final int EVENT_POLL_INTERVAL;
    private static final int EVENT_SCAN_RESULTS_AVAILABLE;
    private static final int EVENT_SUPPLICANT_CONNECTION;
    private static final int EVENT_SUPPLICANT_DISCONNECT;
    private static final int EVENT_SUPPLICANT_STATE_CHANGED;
    private static final int ICON_NETWORKS_AVAILABLE;
    private static final boolean LOCAL_LOGD;
    private static java.lang.String LS;
    private static final int MAX_SUPPLICANT_LOOP_ITERATIONS;
    private static final int NUM_SCANS_BEFORE_ACTUALLY_SCANNING;
    private static final int POLL_STATUS_INTERVAL_MSECS;
    private static final int RECONNECT_DELAY_MSECS;
    private static final int RUN_STATE_RUNNING;
    private static final int RUN_STATE_STARTING;
    private static final int RUN_STATE_STOPPED;
    private static final int RUN_STATE_STOPPING;
    public static final int SUPPL_SCAN_HANDLING_LIST_ONLY;
    public static final int SUPPL_SCAN_HANDLING_NORMAL;
    private static final java.lang.String TAG;
    private static final java.lang.String[] mRunStateNames;
    private static java.lang.String[] sDnsPropNames;
    private final long NOTIFICATION_REPEAT_DELAY_MS;
    private final com.android.internal.app.IBatteryStats mBatteryStats;
    private android.bluetooth.BluetoothA2dp mBluetoothA2dp;
    private android.net.DhcpInfo mDhcpInfo;
    private android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget;
    private boolean mDisconnectExpected;
    private boolean mDisconnectPending;
    private boolean mHaveIPAddress;
    private java.lang.String mInterfaceName;
    private boolean mIsScanModeActive;
    private boolean mIsScanModeSetDueToAHiddenNetwork;
    private boolean mIsScanOnly;
    private java.lang.String mLastBssid;
    private int mLastNetworkId;
    private int mLastSignalLevel;
    private java.lang.String mLastSsid;
    private android.app.Notification mNotification;
    private boolean mNotificationEnabled;
    private android.net.wifi.WifiStateTracker$NotificationEnabledSettingObserver mNotificationEnabledSettingObserver;
    private long mNotificationRepeatTime;
    private boolean mNotificationShown;
    private int mNumScansSinceNetworkStateChange;
    private int mNumSupplicantLoopIterations;
    private boolean mObtainingIPAddress;
    private boolean mPasswordKeyMayBeIncorrect;
    private int mReconnectCount;
    private java.lang.Runnable mReleaseWakeLockCallback;
    private int mRunState;
    private java.util.List mScanResults;
    private android.net.wifi.WifiStateTracker$SettingsObserver mSettingsObserver;
    private android.net.wifi.SupplicantState mSupplicantLoopState;
    private boolean mTornDownByConnMgr;
    private boolean mUseStaticIp;
    private android.net.wifi.WifiManager mWM;
    private android.net.wifi.WifiInfo mWifiInfo;
    private android.net.wifi.WifiMonitor mWifiMonitor;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.String[] $r1;

        <android.net.wifi.WifiStateTracker: java.lang.String TAG> = "WifiStateTracker";

        <android.net.wifi.WifiStateTracker: int SUPPL_SCAN_HANDLING_NORMAL> = 1;

        <android.net.wifi.WifiStateTracker: int SUPPL_SCAN_HANDLING_LIST_ONLY> = 2;

        <android.net.wifi.WifiStateTracker: int RUN_STATE_STOPPING> = 3;

        <android.net.wifi.WifiStateTracker: int RUN_STATE_STOPPED> = 4;

        <android.net.wifi.WifiStateTracker: int RUN_STATE_STARTING> = 1;

        <android.net.wifi.WifiStateTracker: int RUN_STATE_RUNNING> = 2;

        <android.net.wifi.WifiStateTracker: int RECONNECT_DELAY_MSECS> = 2000;

        <android.net.wifi.WifiStateTracker: int POLL_STATUS_INTERVAL_MSECS> = 3000;

        <android.net.wifi.WifiStateTracker: int NUM_SCANS_BEFORE_ACTUALLY_SCANNING> = 3;

        <android.net.wifi.WifiStateTracker: int MAX_SUPPLICANT_LOOP_ITERATIONS> = 4;

        <android.net.wifi.WifiStateTracker: boolean LOCAL_LOGD> = 1;

        <android.net.wifi.WifiStateTracker: int ICON_NETWORKS_AVAILABLE> = 17302027;

        <android.net.wifi.WifiStateTracker: int EVENT_SUPPLICANT_STATE_CHANGED> = 3;

        <android.net.wifi.WifiStateTracker: int EVENT_SUPPLICANT_DISCONNECT> = 2;

        <android.net.wifi.WifiStateTracker: int EVENT_SUPPLICANT_CONNECTION> = 1;

        <android.net.wifi.WifiStateTracker: int EVENT_SCAN_RESULTS_AVAILABLE> = 5;

        <android.net.wifi.WifiStateTracker: int EVENT_POLL_INTERVAL> = 8;

        <android.net.wifi.WifiStateTracker: int EVENT_PASSWORD_KEY_MAY_BE_INCORRECT> = 13;

        <android.net.wifi.WifiStateTracker: int EVENT_NETWORK_STATE_CHANGED> = 4;

        <android.net.wifi.WifiStateTracker: int EVENT_INTERFACE_CONFIGURATION_SUCCEEDED> = 6;

        <android.net.wifi.WifiStateTracker: int EVENT_INTERFACE_CONFIGURATION_FAILED> = 7;

        <android.net.wifi.WifiStateTracker: int EVENT_DRIVER_STATE_CHANGED> = 12;

        <android.net.wifi.WifiStateTracker: int EVENT_DHCP_START> = 9;

        <android.net.wifi.WifiStateTracker: int EVENT_DEFERRED_RECONNECT> = 11;

        <android.net.wifi.WifiStateTracker: int EVENT_DEFERRED_DISCONNECT> = 10;

        <android.net.wifi.WifiStateTracker: int EVENTLOG_SUPPLICANT_STATE_CHANGED> = 50022;

        <android.net.wifi.WifiStateTracker: int EVENTLOG_SUPPLICANT_CONNECTION_STATE_CHANGED> = 50025;

        <android.net.wifi.WifiStateTracker: int EVENTLOG_NETWORK_STATE_CHANGED> = 50021;

        <android.net.wifi.WifiStateTracker: int EVENTLOG_INTERFACE_CONFIGURATION_STATE_CHANGED> = 50024;

        <android.net.wifi.WifiStateTracker: int EVENTLOG_DRIVER_STATE_CHANGED> = 50023;

        <android.net.wifi.WifiStateTracker: int DRIVER_POWER_MODE_AUTO> = 0;

        <android.net.wifi.WifiStateTracker: int DRIVER_POWER_MODE_ACTIVE> = 1;

        <android.net.wifi.WifiStateTracker: int DISCONNECT_DELAY_MSECS> = 5000;

        <android.net.wifi.WifiStateTracker: int DEFAULT_MAX_DHCP_RETRIES> = 2;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "Starting";

        $r1[1] = "Running";

        $r1[2] = "Stopping";

        $r1[3] = "Stopped";

        <android.net.wifi.WifiStateTracker: java.lang.String[] mRunStateNames> = $r1;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <android.net.wifi.WifiStateTracker: java.lang.String LS> = $r0;

        return;
    }

    public void <init>(android.content.Context, android.os.Handler)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.content.Context $r1;
        android.os.Handler $r2;
        android.net.wifi.SupplicantState $r3;
        android.net.wifi.WifiInfo $r4;
        android.net.wifi.WifiMonitor $r5;
        java.util.ArrayList $r6;
        android.net.DhcpInfo $r7;
        android.content.ContentResolver $r8;
        int $i0;
        long $l1;
        android.net.wifi.WifiStateTracker$NotificationEnabledSettingObserver $r9;
        android.net.wifi.WifiStateTracker$SettingsObserver $r10;
        java.lang.String $r11;
        java.lang.String[] $r12;
        java.lang.StringBuilder $r13;
        android.os.IBinder $r14;
        com.android.internal.app.IBatteryStats $r15;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.os.Handler;

        specialinvoke $r0.<android.net.NetworkStateTracker: void <init>(android.content.Context,android.os.Handler,int,int,java.lang.String,java.lang.String)>($r1, $r2, 1, 0, "WIFI", "");

        $r3 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState DISCONNECTED>;

        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.SupplicantState mSupplicantLoopState> = $r3;

        $r0.<android.net.wifi.WifiStateTracker: int mNumSupplicantLoopIterations> = 0;

        $r0.<android.net.wifi.WifiStateTracker: boolean mPasswordKeyMayBeIncorrect> = 0;

        $r0.<android.net.wifi.WifiStateTracker: int mLastSignalLevel> = -1;

        $r0.<android.net.wifi.WifiStateTracker: int mLastNetworkId> = -1;

        $r0.<android.net.wifi.WifiStateTracker: boolean mUseStaticIp> = 0;

        $r4 = new android.net.wifi.WifiInfo;

        specialinvoke $r4.<android.net.wifi.WifiInfo: void <init>()>();

        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo> = $r4;

        $r5 = new android.net.wifi.WifiMonitor;

        specialinvoke $r5.<android.net.wifi.WifiMonitor: void <init>(android.net.wifi.WifiStateTracker)>($r0);

        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiMonitor mWifiMonitor> = $r5;

        $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress> = 0;

        $r0.<android.net.wifi.WifiStateTracker: boolean mObtainingIPAddress> = 0;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void setTornDownByConnMgr(boolean)>(0);

        $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectPending> = 0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r0.<android.net.wifi.WifiStateTracker: java.util.List mScanResults> = $r6;

        $r7 = new android.net.DhcpInfo;

        specialinvoke $r7.<android.net.DhcpInfo: void <init>()>();

        $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo> = $r7;

        $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanModeSetDueToAHiddenNetwork> = 0;

        $r0.<android.net.wifi.WifiStateTracker: int mRunState> = 1;

        $r8 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r8, "wifi_networks_available_repeat_delay", 900);

        $l1 = (long) $i0;

        $l1 = $l1 * 1000L;

        $r0.<android.net.wifi.WifiStateTracker: long NOTIFICATION_REPEAT_DELAY_MS> = $l1;

        $r9 = new android.net.wifi.WifiStateTracker$NotificationEnabledSettingObserver;

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>()>();

        specialinvoke $r9.<android.net.wifi.WifiStateTracker$NotificationEnabledSettingObserver: void <init>(android.net.wifi.WifiStateTracker,android.os.Handler)>($r0, $r2);

        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$NotificationEnabledSettingObserver mNotificationEnabledSettingObserver> = $r9;

        $r9 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$NotificationEnabledSettingObserver mNotificationEnabledSettingObserver>;

        virtualinvoke $r9.<android.net.wifi.WifiStateTracker$NotificationEnabledSettingObserver: void register()>();

        $r10 = new android.net.wifi.WifiStateTracker$SettingsObserver;

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>()>();

        specialinvoke $r10.<android.net.wifi.WifiStateTracker$SettingsObserver: void <init>(android.net.wifi.WifiStateTracker,android.os.Handler)>($r0, $r2);

        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$SettingsObserver mSettingsObserver> = $r10;

        $r11 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("wifi.interface", "tiwlan0");

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName> = $r11;

        $r12 = newarray (java.lang.String)[2];

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dhcp.");

        $r11 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName>;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dns1");

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12[0] = $r11;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dhcp.");

        $r11 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName>;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dns2");

        $r11 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12[1] = $r11;

        <android.net.wifi.WifiStateTracker: java.lang.String[] sDnsPropNames> = $r12;

        $r14 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("batteryinfo");

        $r15 = staticinvoke <com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>($r14);

        $r0.<android.net.wifi.WifiStateTracker: com.android.internal.app.IBatteryStats mBatteryStats> = $r15;

        return;
    }

    static android.content.Context access$000(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        return r1;
    }

    static java.lang.String access$100(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.String r1;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName>;

        return r1;
    }

    static boolean access$1000(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean z0;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mNotificationEnabled>;

        return z0;
    }

    static boolean access$1002(android.net.wifi.WifiStateTracker, boolean)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        $z0 := @parameter1: boolean;

        $r0.<android.net.wifi.WifiStateTracker: boolean mNotificationEnabled> = $z0;

        return $z0;
    }

    static void access$1100(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void resetNotificationTimer()>();

        return;
    }

    static android.content.Context access$1200(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        return r1;
    }

    static android.net.DhcpInfo access$200(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.DhcpInfo r1;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        return r1;
    }

    static android.content.Context access$300(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        return r1;
    }

    static boolean access$400(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean z0;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mUseStaticIp>;

        return z0;
    }

    static void access$500(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void checkUseStaticIp()>();

        return;
    }

    static android.net.wifi.WifiInfo access$600(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.WifiInfo r1;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        return r1;
    }

    static void access$700(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void configureInterface()>();

        return;
    }

    static android.os.Handler access$800(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.os.Handler r1;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.NetworkStateTracker: android.os.Handler mTarget>;

        return r1;
    }

    static android.content.Context access$900(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.content.Context r1;

        $r0 := @parameter0: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        return r1;
    }

    private void cancelDisconnect()
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectPending> = 0;

        virtualinvoke $r0.<android.os.Handler: void removeMessages(int)>(10);

        return;
    }

    private void checkIsBluetoothPlaying()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0, $z1;
        android.bluetooth.BluetoothA2dp $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.String $r5;
        int $i0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 = 0;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.bluetooth.BluetoothA2dp mBluetoothA2dp>;

        $r2 = virtualinvoke $r1.<android.bluetooth.BluetoothA2dp: java.util.List listConnectedSinks()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.String) $r4;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.bluetooth.BluetoothA2dp mBluetoothA2dp>;

        $i0 = virtualinvoke $r1.<android.bluetooth.BluetoothA2dp: int getSinkState(java.lang.String)>($r5);

        if $i0 != 4 goto label1;

        $z0 = 1;

     label2:
        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void setBluetoothScanMode(boolean)>($z0);

        return;
    }

    private void checkUseStaticIp()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;
        android.provider.Settings$SettingNotFoundException $r3;
        java.lang.String $r4;
        android.net.DhcpInfo $r5;
        java.net.UnknownHostException $r6;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r0.<android.net.wifi.WifiStateTracker: boolean mUseStaticIp> = 0;

        $r1 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

     label01:
        $i0 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String)>($r2, "wifi_use_static_ip");

     label02:
        if $i0 != 0 goto label04;

        return;

     label03:
        $r3 := @caughtexception;

        return;

     label04:
        $r4 = staticinvoke <android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "wifi_static_ip");

     label05:
        if $r4 == null goto label19;

     label06:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $i0 = staticinvoke <android.net.wifi.WifiStateTracker: int stringToIpAddr(java.lang.String)>($r4);

        $r5.<android.net.DhcpInfo: int ipAddress> = $i0;

        $r4 = staticinvoke <android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "wifi_static_gateway");

     label07:
        if $r4 == null goto label20;

     label08:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $i0 = staticinvoke <android.net.wifi.WifiStateTracker: int stringToIpAddr(java.lang.String)>($r4);

        $r5.<android.net.DhcpInfo: int gateway> = $i0;

        $r4 = staticinvoke <android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "wifi_static_netmask");

     label09:
        if $r4 == null goto label21;

     label10:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $i0 = staticinvoke <android.net.wifi.WifiStateTracker: int stringToIpAddr(java.lang.String)>($r4);

        $r5.<android.net.DhcpInfo: int netmask> = $i0;

        $r4 = staticinvoke <android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "wifi_static_dns1");

     label11:
        if $r4 == null goto label22;

     label12:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $i0 = staticinvoke <android.net.wifi.WifiStateTracker: int stringToIpAddr(java.lang.String)>($r4);

        $r5.<android.net.DhcpInfo: int dns1> = $i0;

        $r4 = staticinvoke <android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r2, "wifi_static_dns2");

     label13:
        if $r4 == null goto label17;

     label14:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $i0 = staticinvoke <android.net.wifi.WifiStateTracker: int stringToIpAddr(java.lang.String)>($r4);

     label15:
        $r5.<android.net.DhcpInfo: int dns2> = $i0;

     label16:
        $r0.<android.net.wifi.WifiStateTracker: boolean mUseStaticIp> = 1;

        return;

     label17:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $r5.<android.net.DhcpInfo: int dns2> = 0;

        goto label16;

     label18:
        $r6 := @caughtexception;

        return;

     label19:
        return;

     label20:
        return;

     label21:
        return;

     label22:
        return;

        catch android.provider.Settings$SettingNotFoundException from label01 to label02 with label03;
        catch java.net.UnknownHostException from label04 to label05 with label18;
        catch java.net.UnknownHostException from label06 to label07 with label18;
        catch java.net.UnknownHostException from label08 to label09 with label18;
        catch java.net.UnknownHostException from label10 to label11 with label18;
        catch java.net.UnknownHostException from label12 to label13 with label18;
        catch java.net.UnknownHostException from label14 to label15 with label18;
    }

    private void configureInterface()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;
        android.net.wifi.WifiStateTracker$DhcpHandler $r1;
        java.lang.String $r2;
        android.net.DhcpInfo $r3;
        byte $b0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void setPollTimer()>();

        $r0.<android.net.wifi.WifiStateTracker: int mLastSignalLevel> = -1;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mUseStaticIp>;

        if $z0 != 0 goto label1;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress>;

        if $z0 != 0 goto label4;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mObtainingIPAddress>;

        if $z0 != 0 goto label5;

        $r0.<android.net.wifi.WifiStateTracker: boolean mObtainingIPAddress> = 1;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget>;

        virtualinvoke $r1.<android.os.Handler: boolean sendEmptyMessage(int)>(9);

        return;

     label1:
        $r2 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName>;

        $r3 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $z0 = staticinvoke <android.net.NetworkUtils: boolean configureInterface(java.lang.String,android.net.DhcpInfo)>($r2, $r3);

        if $z0 == 0 goto label3;

        $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress> = 1;

        $b0 = 6;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", "Static IP configuration succeeded");

     label2:
        virtualinvoke $r0.<android.os.Handler: boolean sendEmptyMessage(int)>($b0);

        return;

     label3:
        $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress> = 0;

        $b0 = 7;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", "Static IP configuration failed");

        goto label2;

     label4:
        return;

     label5:
        return;
    }

    private int getMaxDhcpRetries()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "wifi_max_dhcp_retry_count", 2);

        return $i0;
    }

    private void handleDisconnectedState(android.net.NetworkInfo$DetailedState)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.NetworkInfo$DetailedState $r1;
        boolean $z0;
        java.lang.String $r2;
        android.net.wifi.WifiInfo $r3;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiStateTracker", "Deconfiguring interface and stopping DHCP");

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectPending>;

        if $z0 == 0 goto label1;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void cancelDisconnect()>();

     label1:
        $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectExpected> = 0;

        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void resetInterface()>();

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r1);

        $r2 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastBssid>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void sendNetworkStateChangeBroadcast(java.lang.String)>($r2);

        $r3 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r3.<android.net.wifi.WifiInfo: void setBSSID(java.lang.String)>(null);

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastBssid> = null;

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastSsid> = null;

        $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectPending> = 0;

        return;
    }

    private boolean isDriverStopped()
    {
        android.net.wifi.WifiStateTracker $r0;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        entermonitor $r0;

     label1:
        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 == 4 goto label3;

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

     label2:
        if $i0 != 3 goto label5;

     label3:
        $z0 = 1;

     label4:
        exitmonitor $r0;

        return $z0;

     label5:
        $z0 = 0;

        goto label4;

     label6:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label6;
    }

    private boolean isSupplicantLooping(android.net.wifi.SupplicantState)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.SupplicantState $r1, $r2;
        int $i0, $i1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: android.net.wifi.SupplicantState;

        $r2 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState ASSOCIATING>;

        $i0 = virtualinvoke $r2.<java.lang.Enum: int ordinal()>();

        $i1 = virtualinvoke $r1.<java.lang.Enum: int ordinal()>();

        if $i0 > $i1 goto label3;

        $i0 = virtualinvoke $r1.<java.lang.Enum: int ordinal()>();

        $r2 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState COMPLETED>;

        $i1 = virtualinvoke $r2.<java.lang.Enum: int ordinal()>();

        if $i0 >= $i1 goto label3;

        $r2 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.SupplicantState mSupplicantLoopState>;

        if $r2 == $r1 goto label2;

        $i0 = virtualinvoke $r1.<java.lang.Enum: int ordinal()>();

        $r2 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.SupplicantState mSupplicantLoopState>;

        $i1 = virtualinvoke $r2.<java.lang.Enum: int ordinal()>();

        if $i0 >= $i1 goto label1;

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mNumSupplicantLoopIterations>;

        $i0 = $i0 + 1;

        $r0.<android.net.wifi.WifiStateTracker: int mNumSupplicantLoopIterations> = $i0;

     label1:
        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.SupplicantState mSupplicantLoopState> = $r1;

     label2:
        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mNumSupplicantLoopIterations>;

        if $i0 < 4 goto label4;

        return 1;

     label3:
        $r2 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState COMPLETED>;

        if $r1 != $r2 goto label2;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void resetSupplicantLoopState()>();

        goto label2;

     label4:
        return 0;
    }

    private void noteRunState()
    {
        android.net.wifi.WifiStateTracker $r0;
        int $i0;
        com.android.internal.app.IBatteryStats $r1;
        android.os.RemoteException $r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 != 2 goto label3;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: com.android.internal.app.IBatteryStats mBatteryStats>;

     label1:
        interfaceinvoke $r1.<com.android.internal.app.IBatteryStats: void noteWifiRunning()>();

     label2:
        return;

     label3:
        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 != 4 goto label7;

     label4:
        $r1 = $r0.<android.net.wifi.WifiStateTracker: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r1.<com.android.internal.app.IBatteryStats: void noteWifiStopped()>();

     label5:
        return;

     label6:
        $r2 := @caughtexception;

        return;

     label7:
        return;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    private void requestConnectionStatus(android.net.wifi.WifiInfo)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.WifiInfo $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2, $r3, $r5, $r6, $r7;
        java.lang.Throwable $r4;
        java.lang.String[] $r8, $r9;
        boolean $z0;
        android.net.wifi.SupplicantState $r10, $r11;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: android.net.wifi.WifiInfo;

        entermonitor $r0;

     label01:
        $r2 = staticinvoke <android.net.wifi.WifiNative: java.lang.String statusCommand()>();

        exitmonitor $r0;

     label02:
        if $r2 != null goto label05;

        return;

     label03:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label04:
        throw $r4;

     label05:
        $r5 = null;

        $r6 = null;

        $r7 = null;

        $i1 = -1;

        $r8 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n");

        $i0 = lengthof $r8;

        $i2 = 0;

     label06:
        if $i2 >= $i0 goto label12;

        $r2 = $r8[$i2];

        $r9 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(" *= *");

        $i3 = lengthof $r9;

        if $i3 >= 2 goto label08;

     label07:
        $i2 = $i2 + 1;

        goto label06;

     label08:
        $r2 = $r9[0];

        $r3 = $r9[1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("id");

        if $z0 == 0 goto label09;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        goto label07;

     label09:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ssid");

        if $z0 == 0 goto label10;

        $r5 = $r3;

        goto label07;

     label10:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("bssid");

        if $z0 == 0 goto label11;

        $r6 = $r3;

        goto label07;

     label11:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("wpa_state");

        if $z0 == 0 goto label07;

        $r7 = $r3;

        goto label07;

     label12:
        virtualinvoke $r1.<android.net.wifi.WifiInfo: void setNetworkId(int)>($i1);

        virtualinvoke $r1.<android.net.wifi.WifiInfo: void setSSID(java.lang.String)>($r5);

        virtualinvoke $r1.<android.net.wifi.WifiInfo: void setBSSID(java.lang.String)>($r6);

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r10 = virtualinvoke $r1.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r11 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState UNINITIALIZED>;

        if $r10 != $r11 goto label13;

        if $r7 == null goto label14;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void setSupplicantState(java.lang.String)>($r7);

        return;

     label13:
        return;

     label14:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    private void requestPolledInfo(android.net.wifi.WifiInfo)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.WifiInfo $r1;
        int $i0, $i1, $i2;
        java.lang.Throwable $r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: android.net.wifi.WifiInfo;

        entermonitor $r0;

     label1:
        $i0 = staticinvoke <android.net.wifi.WifiNative: int getRssiCommand()>();

        if $i0 == -1 goto label5;

        if -200 >= $i0 goto label5;

        if $i0 >= 100 goto label5;

        virtualinvoke $r1.<android.net.wifi.WifiInfo: void setRssi(int)>($i0);

        $i1 = staticinvoke <android.net.wifi.WifiManager: int calculateSignalLevel(int,int)>($i0, 4);

        $i2 = $r0.<android.net.wifi.WifiStateTracker: int mLastSignalLevel>;

        if $i1 == $i2 goto label2;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void sendRssiChangeBroadcast(int)>($i0);

     label2:
        $r0.<android.net.wifi.WifiStateTracker: int mLastSignalLevel> = $i1;

     label3:
        $i0 = staticinvoke <android.net.wifi.WifiNative: int getLinkSpeedCommand()>();

        if $i0 == -1 goto label4;

        virtualinvoke $r1.<android.net.wifi.WifiInfo: void setLinkSpeed(int)>($i0);

     label4:
        exitmonitor $r0;

        return;

     label5:
        virtualinvoke $r1.<android.net.wifi.WifiInfo: void setRssi(int)>(-200);

     label6:
        goto label3;

     label7:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void resetNotificationTimer()
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r0.<android.net.wifi.WifiStateTracker: long mNotificationRepeatTime> = 0L;

        $r0.<android.net.wifi.WifiStateTracker: int mNumScansSinceNetworkStateChange> = 0;

        return;
    }

    private void resetSupplicantLoopState()
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r0.<android.net.wifi.WifiStateTracker: int mNumSupplicantLoopIterations> = 0;

        return;
    }

    private void scheduleDisconnect()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectPending> = 1;

        $z0 = virtualinvoke $r0.<android.os.Handler: boolean hasMessages(int)>(10);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(10, 5000L);

        return;

     label1:
        return;
    }

    private void sendNetworkStateChangeBroadcast(java.lang.String)
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.String $r1;
        android.content.Intent $r2;
        android.net.NetworkInfo $r3;
        android.content.Context $r4;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: java.lang.String;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.STATE_CHANGE");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(536870912);

        $r3 = $r0.<android.net.NetworkStateTracker: android.net.NetworkInfo mNetworkInfo>;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", $r3);

        if $r1 == null goto label1;

        virtualinvoke $r2.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("bssid", $r1);

     label1:
        $r4 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void sendStickyBroadcast(android.content.Intent)>($r2);

        return;
    }

    private void sendRssiChangeBroadcast(int)
    {
        android.net.wifi.WifiStateTracker $r0;
        int $i0;
        android.content.Intent $r1;
        boolean $z0;
        android.content.Context $r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $i0 := @parameter0: int;

        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label1;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.RSSI_CHANGED");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("newRssi", $i0);

        $r2 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void sendBroadcast(android.content.Intent)>($r1);

        return;

     label1:
        return;
    }

    private void setPollTimer()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        entermonitor $r0;

     label1:
        $z0 = virtualinvoke $r0.<android.os.Handler: boolean hasMessages(int)>(8);

        if $z0 != 0 goto label2;

        virtualinvoke $r0.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(8, 3000L);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void setSupplicantState(android.net.wifi.SupplicantState)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.SupplicantState $r1;
        android.net.wifi.WifiInfo $r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: android.net.wifi.SupplicantState;

        $r2 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r2.<android.net.wifi.WifiInfo: void setSupplicantState(android.net.wifi.SupplicantState)>($r1);

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void updateNetworkInfo()>();

        return;
    }

    private void setSupplicantState(java.lang.String)
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.String $r1;
        android.net.wifi.WifiInfo $r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r2.<android.net.wifi.WifiInfo: void setSupplicantState(java.lang.String)>($r1);

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void updateNetworkInfo()>();

        return;
    }

    private void setTornDownByConnMgr(boolean)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 := @parameter0: boolean;

        $r0.<android.net.wifi.WifiStateTracker: boolean mTornDownByConnMgr> = $z0;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void updateNetworkInfo()>();

        return;
    }

    private static int stringToIpAddr(java.lang.String) throws java.net.UnknownHostException
    {
        java.lang.String $r0, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.String[] $r1;
        java.net.UnknownHostException $r2;
        java.lang.NumberFormatException $r3;

        $r0 := @parameter0: java.lang.String;

     label01:
        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

     label02:
        $i3 = lengthof $r1;

        if $i3 == 4 goto label06;

     label03:
        $r2 = new java.net.UnknownHostException;

        specialinvoke $r2.<java.net.UnknownHostException: void <init>(java.lang.String)>($r0);

     label04:
        throw $r2;

     label05:
        $r3 := @caughtexception;

        $r2 = new java.net.UnknownHostException;

        specialinvoke $r2.<java.net.UnknownHostException: void <init>(java.lang.String)>($r0);

        throw $r2;

     label06:
        $r4 = $r1[0];

     label07:
        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

        $r4 = $r1[1];

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label08:
        $i0 = $i0 << 8;

     label09:
        $r4 = $r1[2];

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label10:
        $i1 = $i1 << 16;

     label11:
        $r4 = $r1[3];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label12:
        $i2 = $i2 << 24;

        $i3 = $i3 | $i0;

        $i3 = $i3 | $i1;

        $i3 = $i3 | $i2;

        return $i3;

        catch java.lang.NumberFormatException from label01 to label02 with label05;
        catch java.lang.NumberFormatException from label03 to label04 with label05;
        catch java.lang.NumberFormatException from label07 to label08 with label05;
        catch java.lang.NumberFormatException from label09 to label10 with label05;
        catch java.lang.NumberFormatException from label11 to label12 with label05;
    }

    private void updateNetworkInfo()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.NetworkInfo $r1;
        boolean $z0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = $r0.<android.net.NetworkStateTracker: android.net.NetworkInfo mNetworkInfo>;

        $z0 = virtualinvoke $r0.<android.net.wifi.WifiStateTracker: boolean isAvailable()>();

        virtualinvoke $r1.<android.net.NetworkInfo: void setIsAvailable(boolean)>($z0);

        return;
    }

    private boolean wifiManagerDisableNetwork(int)
    {
        android.net.wifi.WifiStateTracker $r0;
        int $i0;
        boolean $z0, $z1;
        android.net.wifi.WifiManager $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $i0 := @parameter0: int;

        $z0 = 0;

        if $i0 < 0 goto label1;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWM>;

        $z1 = virtualinvoke $r1.<android.net.wifi.WifiManager: boolean disableNetwork(int)>($i0);

        $z0 = $z1;

        if $z1 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Disabled network: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", $r3);

     label1:
        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to disable network: invalid network id: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiStateTracker", $r3);

        return $z0;

     label2:
        return $z0;
    }

    public boolean addToBlacklist(java.lang.String)
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        $z0 = staticinvoke <android.net.wifi.WifiNative: boolean addToBlacklistCommand(java.lang.String)>($r1);

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean clearBlacklist()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        entermonitor $r0;

     label1:
        $z0 = staticinvoke <android.net.wifi.WifiNative: boolean clearBlacklistCommand()>();

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean disconnectAndStop()
    {
        android.net.wifi.WifiStateTracker $r0;
        int $i0;
        android.net.wifi.WifiInfo $r1;
        android.net.wifi.SupplicantState $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        entermonitor $r0;

     label1:
        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 == 3 goto label4;

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 == 4 goto label4;

        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void setNotificationVisible(boolean,int,boolean,int)>(0, 0, 0, 0);

        $r0.<android.net.wifi.WifiStateTracker: int mRunState> = 3;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r3 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState DORMANT>;

        if $r2 != $r3 goto label3;

        $z0 = staticinvoke <android.net.wifi.WifiNative: boolean stopDriverCommand()>();

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $z0 = staticinvoke <android.net.wifi.WifiNative: boolean disconnectCommand()>();

        goto label2;

     label4:
        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void releaseWakeLock()>();

     label5:
        $z0 = 1;

        goto label2;

     label6:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
    }

    public android.net.DhcpInfo getDhcpInfo()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.DhcpInfo r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        return r1;
    }

    public java.lang.String[] getNameServers()
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.String[] $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = <android.net.wifi.WifiStateTracker: java.lang.String[] sDnsPropNames>;

        $r1 = staticinvoke <android.net.wifi.WifiStateTracker: java.lang.String[] getNameServerList(java.lang.String[])>($r1);

        return $r1;
    }

    public int getNetworkSubtype()
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        return 0;
    }

    public java.util.List getScanResultsList()
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.Throwable $r1;
        java.util.List r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.net.wifi.WifiStateTracker: java.util.List mScanResults>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.net.wifi.SupplicantState getSupplicantState()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.SupplicantState $r1;
        android.net.wifi.WifiInfo $r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r2 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r1 = virtualinvoke $r2.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        return $r1;
    }

    public java.lang.String getTcpBufferSizesPropName()
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        return "net.tcp.buffersize.wifi";
    }

    public void handleMessage(android.os.Message)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.os.Message $r1;
        android.os.HandlerThread $r2;
        int $i0, $i2;
        android.net.wifi.WifiStateTracker$DhcpHandler $r3;
        android.os.Looper $r4;
        android.net.wifi.WifiInfo $r5;
        android.net.wifi.SupplicantState $r6, $r9, $r20;
        java.lang.String $r7, $r25;
        java.lang.StringBuilder $r8;
        boolean $z0, $z1, $z2;
        android.content.Intent $r10;
        android.content.Context $r11;
        android.net.NetworkInfo$DetailedState $r12, $r24;
        android.bluetooth.BluetoothA2dp $r13;
        java.lang.Throwable $r14, $r15, $r17, $r21, $r22, $r27, $r30, $r31;
        android.net.wifi.WifiManager $r16;
        byte $b1;
        java.lang.Object $r18;
        android.net.wifi.WifiStateTracker$SupplicantStateChangeResult $r19;
        android.net.wifi.WifiStateTracker$NetworkStateChangeResult $r23;
        android.net.NetworkInfo $r26;
        android.net.DhcpInfo $r28;
        android.os.Handler $r29;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: android.os.Message;

        $i0 = $r1.<android.os.Message: int what>;

        lookupswitch($i0)
        {
            case 1: goto label002;
            case 2: goto label019;
            case 3: goto label034;
            case 4: goto label059;
            case 5: goto label069;
            case 6: goto label079;
            case 7: goto label082;
            case 8: goto label071;
            case 9: goto label001;
            case 10: goto label072;
            case 11: goto label073;
            case 12: goto label087;
            case 13: goto label098;
            default: goto label001;
        };

     label001:
        return;

     label002:
        $r0.<android.net.wifi.WifiStateTracker: int mRunState> = 2;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void noteRunState()>();

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void checkUseStaticIp()>();

        $r2 = new android.os.HandlerThread;

        specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String)>("DHCP Handler Thread");

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        $r3 = new android.net.wifi.WifiStateTracker$DhcpHandler;

        $r4 = virtualinvoke $r2.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r3.<android.net.wifi.WifiStateTracker$DhcpHandler: void <init>(android.net.wifi.WifiStateTracker,android.os.Looper,android.os.Handler)>($r0, $r4, $r0);

        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget> = $r3;

        $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanModeActive> = 1;

        $r0.<android.net.wifi.WifiStateTracker: boolean mTornDownByConnMgr> = 0;

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastBssid> = null;

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastSsid> = null;

        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo requestConnectionInfo()>();

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        entermonitor $r0;

     label003:
        $r7 = staticinvoke <android.net.wifi.WifiNative: java.lang.String getMacAddressCommand()>();

        exitmonitor $r0;

     label004:
        if $r7 == null goto label005;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r5.<android.net.wifi.WifiInfo: void setMacAddress(java.lang.String)>($r7);

     label005:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection to supplicant established, state=");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", $r7);

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50025, 1);

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState COMPLETED>;

        if $r6 != $r9 goto label006;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r7 = virtualinvoke $r5.<android.net.wifi.WifiInfo: java.lang.String getBSSID()>();

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastBssid> = $r7;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r7 = virtualinvoke $r5.<android.net.wifi.WifiInfo: java.lang.String getSSID()>();

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastSsid> = $r7;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void configureInterface()>();

     label006:
        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label007;

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.supplicant.CONNECTION_CHANGE");

        virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("connected", 1);

        $r11 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void sendBroadcast(android.content.Intent)>($r10);

     label007:
        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState COMPLETED>;

        if $r6 != $r9 goto label015;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress>;

        if $z0 == 0 goto label015;

        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r12);

     label008:
        $r13 = $r0.<android.net.wifi.WifiStateTracker: android.bluetooth.BluetoothA2dp mBluetoothA2dp>;

        if $r13 != null goto label009;

        $r13 = new android.bluetooth.BluetoothA2dp;

        $r11 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        specialinvoke $r13.<android.bluetooth.BluetoothA2dp: void <init>(android.content.Context)>($r11);

        $r0.<android.net.wifi.WifiStateTracker: android.bluetooth.BluetoothA2dp mBluetoothA2dp> = $r13;

     label009:
        entermonitor $r0;

     label010:
        staticinvoke <android.net.wifi.WifiNative: boolean startPacketFiltering()>();

        exitmonitor $r0;

     label011:
        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void checkIsBluetoothPlaying()>();

        return;

     label012:
        $r14 := @caughtexception;

     label013:
        exitmonitor $r0;

     label014:
        throw $r14;

     label015:
        $r12 = staticinvoke <android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>($r6);

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r12);

        goto label008;

     label016:
        $r15 := @caughtexception;

     label017:
        exitmonitor $r0;

     label018:
        throw $r15;

     label019:
        $r0.<android.net.wifi.WifiStateTracker: int mRunState> = 4;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void noteRunState()>();

        $r16 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWM>;

        $i0 = virtualinvoke $r16.<android.net.wifi.WifiManager: int getWifiState()>();

        if $i0 == 1 goto label028;

        if $i0 == 0 goto label028;

        $z0 = 1;

     label020:
        if $z0 == 0 goto label029;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", "Supplicant died unexpectedly");

     label021:
        if $z0 == 0 goto label030;

        $b1 = 2;

     label022:
        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50025, $b1);

        entermonitor $r0;

     label023:
        staticinvoke <android.net.wifi.WifiNative: void closeSupplicantConnection()>();

        exitmonitor $r0;

     label024:
        if $z0 == 0 goto label025;

        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void resetInterface()>();

     label025:
        $r3 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget>;

        if $r3 == null goto label026;

        $r3 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Looper getLooper()>();

        virtualinvoke $r4.<android.os.Looper: void quit()>();

        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget> = null;

     label026:
        $r11 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.STATE_CHANGE");

        virtualinvoke $r11.<android.content.Context: void removeStickyBroadcast(android.content.Intent)>($r10);

        $z1 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z1 == 0 goto label027;

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.supplicant.CONNECTION_CHANGE");

        virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("connected", 0);

        $r11 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void sendBroadcast(android.content.Intent)>($r10);

     label027:
        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r12);

        $r6 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState UNINITIALIZED>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void setSupplicantState(android.net.wifi.SupplicantState)>($r6);

        $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress> = 0;

        $r0.<android.net.wifi.WifiStateTracker: boolean mObtainingIPAddress> = 0;

        if $z0 == 0 goto label099;

        $r16 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWM>;

        virtualinvoke $r16.<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>(0);

        return;

     label028:
        $z0 = 0;

        goto label020;

     label029:
        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", "Connection to supplicant lost");

        goto label021;

     label030:
        $b1 = 0;

        goto label022;

     label031:
        $r17 := @caughtexception;

     label032:
        exitmonitor $r0;

     label033:
        throw $r17;

     label034:
        $r18 = $r1.<android.os.Message: java.lang.Object obj>;

        $r19 = (android.net.wifi.WifiStateTracker$SupplicantStateChangeResult) $r18;

        $r6 = $r19.<android.net.wifi.WifiStateTracker$SupplicantStateChangeResult: android.net.wifi.SupplicantState state>;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r9 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $i0 = virtualinvoke $r6.<java.lang.Enum: int ordinal()>();

        $i0 = $i0 & 63;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50022, $i0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Changing supplicant state: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ==> ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", $r7);

        $i0 = $r19.<android.net.wifi.WifiStateTracker$SupplicantStateChangeResult: int networkId>;

        $z0 = 0;

        $r20 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState DISCONNECTED>;

        if $r6 != $r20 goto label035;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mPasswordKeyMayBeIncorrect>;

     label035:
        $r0.<android.net.wifi.WifiStateTracker: boolean mPasswordKeyMayBeIncorrect> = 0;

        $z1 = 0;

        $z2 = specialinvoke $r0.<android.net.wifi.WifiStateTracker: boolean isSupplicantLooping(android.net.wifi.SupplicantState)>($r6);

        if $z2 == 0 goto label036;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", "Stop WPA supplicant loop and disable network");

        $z1 = specialinvoke $r0.<android.net.wifi.WifiStateTracker: boolean wifiManagerDisableNetwork(int)>($i0);

     label036:
        if $z1 == 0 goto label037;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void resetSupplicantLoopState()>();

        return;

     label037:
        if $r6 != $r9 goto label038;

        $r20 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState DISCONNECTED>;

        if $r6 != $r20 goto label100;

        $z1 = specialinvoke $r0.<android.net.wifi.WifiStateTracker: boolean isDriverStopped()>();

        if $z1 == 0 goto label101;

     label038:
        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void setSupplicantState(android.net.wifi.SupplicantState)>($r6);

        $r20 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState DORMANT>;

        if $r6 != $r20 goto label054;

        $z1 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanOnly>;

        if $z1 != 0 goto label039;

        $i2 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i2 != 3 goto label043;

     label039:
        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState IDLE>;

     label040:
        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void handleDisconnectedState(android.net.NetworkInfo$DetailedState)>($r12);

        $i2 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i2 != 2 goto label044;

        $z1 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanOnly>;

        if $z1 != 0 goto label044;

        if $i0 == -1 goto label044;

        virtualinvoke $r0.<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>(11, 2000L);

     label041:
        $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectExpected> = 0;

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.supplicant.STATE_CHANGE");

        virtualinvoke $r10.<android.content.Intent: android.content.Intent addFlags(int)>(536870912);

        virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("newState", $r6);

        if $z0 == 0 goto label042;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to authenticate, disabling network ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiStateTracker", $r7);

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: boolean wifiManagerDisableNetwork(int)>($i0);

        virtualinvoke $r10.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("supplicantError", 1);

     label042:
        $r11 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void sendStickyBroadcast(android.content.Intent)>($r10);

        return;

     label043:
        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState FAILED>;

        goto label040;

     label044:
        $i2 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i2 != 3 goto label049;

        entermonitor $r0;

     label045:
        staticinvoke <android.net.wifi.WifiNative: boolean stopDriverCommand()>();

        exitmonitor $r0;

     label046:
        goto label041;

     label047:
        $r21 := @caughtexception;

        exitmonitor $r0;

     label048:
        throw $r21;

     label049:
        $i2 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i2 != 1 goto label041;

        $z1 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanOnly>;

        if $z1 != 0 goto label041;

        entermonitor $r0;

     label050:
        staticinvoke <android.net.wifi.WifiNative: boolean reconnectCommand()>();

        exitmonitor $r0;

     label051:
        goto label041;

     label052:
        $r22 := @caughtexception;

        exitmonitor $r0;

     label053:
        throw $r22;

     label054:
        $r20 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState DISCONNECTED>;

        if $r6 != $r20 goto label057;

        $z1 = specialinvoke $r0.<android.net.wifi.WifiStateTracker: boolean isDriverStopped()>();

        if $z1 != 0 goto label055;

        $z1 = $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectExpected>;

        if $z1 == 0 goto label056;

     label055:
        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void handleDisconnectedState(android.net.NetworkInfo$DetailedState)>($r12);

        goto label041;

     label056:
        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void scheduleDisconnect()>();

        goto label041;

     label057:
        $r20 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState COMPLETED>;

        if $r6 == $r20 goto label041;

        $z1 = $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectPending>;

        if $z1 != 0 goto label041;

        $r20 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState COMPLETED>;

        if $r9 != $r20 goto label058;

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState ASSOCIATING>;

        if $r6 == $r9 goto label041;

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState ASSOCIATED>;

        if $r6 == $r9 goto label041;

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState FOUR_WAY_HANDSHAKE>;

        if $r6 == $r9 goto label041;

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState GROUP_HANDSHAKE>;

        if $r6 == $r9 goto label041;

     label058:
        $r12 = staticinvoke <android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>($r6);

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r12);

        goto label041;

     label059:
        $r18 = $r1.<android.os.Message: java.lang.Object obj>;

        $r23 = (android.net.wifi.WifiStateTracker$NetworkStateChangeResult) $r18;

        $r12 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: android.net.NetworkInfo$DetailedState state>;

        $i0 = virtualinvoke $r12.<java.lang.Enum: int ordinal()>();

        $i0 = $i0 & 63;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50021, $i0);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New network state is ");

        $r12 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: android.net.NetworkInfo$DetailedState state>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", $r7);

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanOnly>;

        if $z0 == 0 goto label060;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", "Dropping event in scan-only mode");

        return;

     label060:
        $r12 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: android.net.NetworkInfo$DetailedState state>;

        $r24 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState SCANNING>;

        if $r12 == $r24 goto label061;

        $r0.<android.net.wifi.WifiStateTracker: int mNumScansSinceNetworkStateChange> = 0;

     label061:
        $r12 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: android.net.NetworkInfo$DetailedState state>;

        $r24 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        if $r12 != $r24 goto label062;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState DORMANT>;

        if $r6 == $r9 goto label102;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void scheduleDisconnect()>();

        return;

     label062:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void requestConnectionStatus(android.net.wifi.WifiInfo)>($r5);

        $r12 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: android.net.NetworkInfo$DetailedState state>;

        $r24 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if $r12 != $r24 goto label063;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress>;

        if $z0 == 0 goto label064;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectPending>;

        if $z0 != 0 goto label064;

     label063:
        $r12 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: android.net.NetworkInfo$DetailedState state>;

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r12);

     label064:
        $r12 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: android.net.NetworkInfo$DetailedState state>;

        $r24 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if $r12 != $r24 goto label067;

        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void setNotificationVisible(boolean,int,boolean,int)>(0, 0, 0, 0);

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectPending>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void cancelDisconnect()>();

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r7 = virtualinvoke $r5.<android.net.wifi.WifiInfo: java.lang.String getSSID()>();

        $r25 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastSsid>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, $r25);

        if $z1 != 0 goto label066;

        if $z0 == 0 goto label065;

        $r26 = virtualinvoke $r0.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r12 = virtualinvoke $r26.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r24 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void handleDisconnectedState(android.net.NetworkInfo$DetailedState)>($r24);

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedStateInternal(android.net.NetworkInfo$DetailedState)>($r12);

     label065:
        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void configureInterface()>();

     label066:
        $r7 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: java.lang.String BSSID>;

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastBssid> = $r7;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r7 = virtualinvoke $r5.<android.net.wifi.WifiInfo: java.lang.String getSSID()>();

        $r0.<android.net.wifi.WifiStateTracker: java.lang.String mLastSsid> = $r7;

        $i0 = $r23.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: int networkId>;

        $r0.<android.net.wifi.WifiStateTracker: int mLastNetworkId> = $i0;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress>;

        if $z0 == 0 goto label068;

        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r12);

     label067:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r7 = virtualinvoke $r5.<android.net.wifi.WifiInfo: java.lang.String getBSSID()>();

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void sendNetworkStateChangeBroadcast(java.lang.String)>($r7);

        return;

     label068:
        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState OBTAINING_IPADDR>;

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r12);

        goto label067;

     label069:
        $z0 = staticinvoke <android.app.ActivityManagerNative: boolean isSystemReady()>();

        if $z0 == 0 goto label070;

        $r11 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r10 = new android.content.Intent;

        specialinvoke $r10.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.SCAN_RESULTS");

        virtualinvoke $r11.<android.content.Context: void sendBroadcast(android.content.Intent)>($r10);

     label070:
        virtualinvoke $r0.<android.net.NetworkStateTracker: void sendScanResultsAvailable()>();

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanModeSetDueToAHiddenNetwork>;

        if $z0 != 0 goto label103;

        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void setScanMode(boolean,boolean)>(0, 0);

        return;

     label071:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState UNINITIALIZED>;

        if $r6 == $r9 goto label104;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void requestPolledInfo(android.net.wifi.WifiInfo)>($r5);

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState COMPLETED>;

        if $r6 != $r9 goto label105;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void setPollTimer()>();

        return;

     label072:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState UNINITIALIZED>;

        if $r6 == $r9 goto label106;

        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void handleDisconnectedState(android.net.NetworkInfo$DetailedState)>($r12);

        return;

     label073:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState UNINITIALIZED>;

        if $r6 == $r9 goto label107;

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mReconnectCount>;

        $i0 = $i0 + 1;

        $r0.<android.net.wifi.WifiStateTracker: int mReconnectCount> = $i0;

        $i2 = specialinvoke $r0.<android.net.wifi.WifiStateTracker: int getMaxDhcpRetries()>();

        if $i0 <= $i2 goto label074;

        $r16 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWM>;

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mLastNetworkId>;

        virtualinvoke $r16.<android.net.wifi.WifiManager: boolean disableNetwork(int)>($i0);

     label074:
        entermonitor $r0;

     label075:
        staticinvoke <android.net.wifi.WifiNative: boolean reconnectCommand()>();

        exitmonitor $r0;

     label076:
        return;

     label077:
        $r27 := @caughtexception;

        exitmonitor $r0;

     label078:
        throw $r27;

     label079:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState UNINITIALIZED>;

        if $r6 == $r9 goto label108;

        $r0.<android.net.wifi.WifiStateTracker: int mReconnectCount> = 0;

        $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress> = 1;

        $r0.<android.net.wifi.WifiStateTracker: boolean mObtainingIPAddress> = 0;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r28 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $i0 = $r28.<android.net.DhcpInfo: int ipAddress>;

        virtualinvoke $r5.<android.net.wifi.WifiInfo: void setIpAddress(int)>($i0);

        $r0.<android.net.wifi.WifiStateTracker: int mLastSignalLevel> = -1;

        $r26 = $r0.<android.net.NetworkStateTracker: android.net.NetworkInfo mNetworkInfo>;

        $r12 = virtualinvoke $r26.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r24 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if $r12 == $r24 goto label081;

        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        virtualinvoke $r0.<android.net.NetworkStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState)>($r12);

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r7 = virtualinvoke $r5.<android.net.wifi.WifiInfo: java.lang.String getBSSID()>();

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void sendNetworkStateChangeBroadcast(java.lang.String)>($r7);

     label080:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IP configuration: ");

        $r28 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r7 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", $r7);

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50024, 1);

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void resetNotificationTimer()>();

        return;

     label081:
        $r29 = $r0.<android.net.NetworkStateTracker: android.os.Handler mTarget>;

        virtualinvoke $r29.<android.os.Handler: boolean sendEmptyMessage(int)>(4);

        goto label080;

     label082:
        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r6 = virtualinvoke $r5.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r9 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState UNINITIALIZED>;

        if $r6 == $r9 goto label109;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50024, 0);

        $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress> = 0;

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r5.<android.net.wifi.WifiInfo: void setIpAddress(int)>(0);

        $r0.<android.net.wifi.WifiStateTracker: boolean mObtainingIPAddress> = 0;

        entermonitor $r0;

     label083:
        staticinvoke <android.net.wifi.WifiNative: boolean disconnectCommand()>();

        exitmonitor $r0;

     label084:
        return;

     label085:
        $r30 := @caughtexception;

        exitmonitor $r0;

     label086:
        throw $r30;

     label087:
        $i0 = $r1.<android.os.Message: int arg1>;

        if $i0 == 0 goto label093;

        $z0 = 1;

     label088:
        if $z0 == 0 goto label094;

        $b1 = 1;

     label089:
        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50023, $b1);

        if $z0 == 0 goto label092;

        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: boolean setNumAllowedChannels()>();

        entermonitor $r0;

     label090:
        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 != 1 goto label091;

        $r0.<android.net.wifi.WifiStateTracker: int mRunState> = 2;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanOnly>;

        if $z0 != 0 goto label095;

        staticinvoke <android.net.wifi.WifiNative: boolean reconnectCommand()>();

     label091:
        exitmonitor $r0;

     label092:
        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void noteRunState()>();

        return;

     label093:
        $z0 = 0;

        goto label088;

     label094:
        $b1 = 0;

        goto label089;

     label095:
        staticinvoke <android.net.wifi.WifiNative: boolean scanCommand()>();

        goto label091;

     label096:
        $r31 := @caughtexception;

        exitmonitor $r0;

     label097:
        throw $r31;

     label098:
        $r0.<android.net.wifi.WifiStateTracker: boolean mPasswordKeyMayBeIncorrect> = 1;

        return;

     label099:
        return;

     label100:
        return;

     label101:
        return;

     label102:
        return;

     label103:
        return;

     label104:
        return;

     label105:
        return;

     label106:
        return;

     label107:
        return;

     label108:
        return;

     label109:
        return;

        catch java.lang.Throwable from label003 to label004 with label012;
        catch java.lang.Throwable from label010 to label011 with label016;
        catch java.lang.Throwable from label013 to label014 with label012;
        catch java.lang.Throwable from label017 to label018 with label016;
        catch java.lang.Throwable from label023 to label024 with label031;
        catch java.lang.Throwable from label032 to label033 with label031;
        catch java.lang.Throwable from label045 to label046 with label047;
        catch java.lang.Throwable from label047 to label048 with label047;
        catch java.lang.Throwable from label050 to label051 with label052;
        catch java.lang.Throwable from label052 to label053 with label052;
        catch java.lang.Throwable from label075 to label076 with label077;
        catch java.lang.Throwable from label077 to label078 with label077;
        catch java.lang.Throwable from label083 to label084 with label085;
        catch java.lang.Throwable from label085 to label086 with label085;
        catch java.lang.Throwable from label090 to label092 with label096;
        catch java.lang.Throwable from label095 to label097 with label096;
    }

    public void interpretScanResultsAvailable()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;
        android.net.NetworkInfo $r1;
        android.net.NetworkInfo$State $r2, $r3;
        java.util.List $r4;
        int $i0, $i1;
        java.lang.Object $r5;
        android.net.wifi.ScanResult $r6;
        java.lang.String $r7;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mNotificationEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke $r0.<android.net.NetworkStateTracker: android.net.NetworkInfo getNetworkInfo()>();

        $r2 = virtualinvoke $r1.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        $r3 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State DISCONNECTED>;

        if $r2 == $r3 goto label2;

        $r3 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State UNKNOWN>;

        if $r2 != $r3 goto label6;

     label2:
        $r4 = virtualinvoke $r0.<android.net.wifi.WifiStateTracker: java.util.List getScanResultsList()>();

        if $r4 == null goto label6;

        $i0 = 0;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i1 - 1;

     label3:
        if $i1 < 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i1);

        $r6 = (android.net.wifi.ScanResult) $r5;

        $r7 = $r6.<android.net.wifi.ScanResult: java.lang.String capabilities>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7);

        if $z0 == 0 goto label4;

        $i0 = $i0 + 1;

     label4:
        $i1 = $i1 + -1;

        goto label3;

     label5:
        if $i0 <= 0 goto label6;

        $i1 = $r0.<android.net.wifi.WifiStateTracker: int mNumScansSinceNetworkStateChange>;

        $i1 = $i1 + 1;

        $r0.<android.net.wifi.WifiStateTracker: int mNumScansSinceNetworkStateChange> = $i1;

        if $i1 < 3 goto label7;

        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void setNotificationVisible(boolean,int,boolean,int)>(1, $i0, 0, 0);

        return;

     label6:
        virtualinvoke $r0.<android.net.wifi.WifiStateTracker: void setNotificationVisible(boolean,int,boolean,int)>(0, 0, 0, 0);

        return;

     label7:
        return;
    }

    public boolean isAvailable()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.WifiInfo $r1;
        android.net.wifi.SupplicantState $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        entermonitor $r0;

     label1:
        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r2 = virtualinvoke $r1.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r3 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState UNINITIALIZED>;

        if $r2 == $r3 goto label5;

        $r3 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState INACTIVE>;

        if $r2 == $r3 goto label5;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mTornDownByConnMgr>;

        if $z0 != 0 goto label3;

        $z0 = specialinvoke $r0.<android.net.wifi.WifiStateTracker: boolean isDriverStopped()>();

     label2:
        if $z0 != 0 goto label5;

     label3:
        $z0 = 1;

     label4:
        exitmonitor $r0;

        return $z0;

     label5:
        $z0 = 0;

        goto label4;

     label6:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label6;
    }

    public boolean isConnectionCompleted()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.SupplicantState $r1, $r2;
        android.net.wifi.WifiInfo $r3;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r3 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r2 = virtualinvoke $r3.<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>();

        $r1 = <android.net.wifi.SupplicantState: android.net.wifi.SupplicantState COMPLETED>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    void notifyDriverStarted()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.os.Message $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>($r0, 12, 1, 0);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    void notifyDriverStopped()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.os.Message $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r0.<android.net.wifi.WifiStateTracker: int mRunState> = 4;

        $r1 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>($r0, 12, 0, 0);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    void notifyPasswordKeyMayBeIncorrect()
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        virtualinvoke $r0.<android.os.Handler: boolean sendEmptyMessage(int)>(13);

        return;
    }

    void notifyScanResultsAvailable()
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        entermonitor $r0;

     label1:
        staticinvoke <android.net.wifi.WifiNative: boolean setScanResultHandlingCommand(int)>(1);

        exitmonitor $r0;

     label2:
        virtualinvoke $r0.<android.os.Handler: boolean sendEmptyMessage(int)>(5);

        return;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor $r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void notifyStateChange(int, android.net.wifi.SupplicantState)
    {
        android.net.wifi.WifiStateTracker $r0;
        int $i0;
        android.net.wifi.SupplicantState $r1;
        android.net.wifi.WifiStateTracker$SupplicantStateChangeResult $r2;
        android.os.Message $r3;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.net.wifi.SupplicantState;

        $r2 = new android.net.wifi.WifiStateTracker$SupplicantStateChangeResult;

        specialinvoke $r2.<android.net.wifi.WifiStateTracker$SupplicantStateChangeResult: void <init>(int,android.net.wifi.SupplicantState)>($i0, $r1);

        $r3 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r0, 3, $r2);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    void notifyStateChange(android.net.NetworkInfo$DetailedState, java.lang.String, int)
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.NetworkInfo$DetailedState $r1;
        java.lang.String $r2;
        int $i0;
        android.net.wifi.WifiStateTracker$NetworkStateChangeResult $r3;
        android.os.Message $r4;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 = new android.net.wifi.WifiStateTracker$NetworkStateChangeResult;

        specialinvoke $r3.<android.net.wifi.WifiStateTracker$NetworkStateChangeResult: void <init>(android.net.NetworkInfo$DetailedState,java.lang.String,int)>($r1, $r2, $i0);

        $r4 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>($r0, 4, $r3);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

        return;
    }

    void notifySupplicantConnection()
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        virtualinvoke $r0.<android.os.Handler: boolean sendEmptyMessage(int)>(1);

        return;
    }

    void notifySupplicantLost()
    {
        android.net.wifi.WifiStateTracker $r0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        virtualinvoke $r0.<android.os.Handler: boolean sendEmptyMessage(int)>(2);

        return;
    }

    public boolean reconnect()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mTornDownByConnMgr>;

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<android.net.wifi.WifiStateTracker: boolean restart()>();

        if $z0 == 0 goto label1;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void setTornDownByConnMgr(boolean)>(0);

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }

    public void releaseWakeLock()
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.Runnable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: java.lang.Runnable mReleaseWakeLockCallback>;

        if $r1 == null goto label1;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: java.lang.Runnable mReleaseWakeLockCallback>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        return;

     label1:
        return;
    }

    public boolean removeNetwork(int)
    {
        android.net.wifi.WifiStateTracker $r0;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $z0 = staticinvoke <android.net.wifi.WifiNative: boolean removeNetworkCommand(int)>($i0);

        $r0.<android.net.wifi.WifiStateTracker: boolean mDisconnectExpected> = $z0;

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.net.wifi.WifiInfo requestConnectionInfo()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.WifiInfo $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void requestConnectionStatus(android.net.wifi.WifiInfo)>($r1);

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void requestPolledInfo(android.net.wifi.WifiInfo)>($r1);

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        return $r1;
    }

    public void resetInterface()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;
        android.net.wifi.WifiInfo $r1;
        java.lang.String $r2;
        android.net.wifi.WifiStateTracker$DhcpHandler $r3;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress> = 0;

        $r0.<android.net.wifi.WifiStateTracker: boolean mObtainingIPAddress> = 0;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        virtualinvoke $r1.<android.net.wifi.WifiInfo: void setIpAddress(int)>(0);

        $r2 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName>;

        staticinvoke <android.net.NetworkUtils: int resetConnections(java.lang.String)>($r2);

        $r3 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget>;

        if $r3 == null goto label1;

        $r3 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget>;

        virtualinvoke $r3.<android.net.wifi.WifiStateTracker$DhcpHandler: void setCancelCallback(boolean)>(1);

        $r3 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiStateTracker$DhcpHandler mDhcpTarget>;

        virtualinvoke $r3.<android.os.Handler: void removeMessages(int)>(9);

     label1:
        $r2 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName>;

        $z0 = staticinvoke <android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>($r2);

        if $z0 != 0 goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WifiStateTracker", "Could not stop DHCP");

     label2:
        $r2 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName>;

        staticinvoke <android.net.NetworkUtils: int disableInterface(java.lang.String)>($r2);

        return;
    }

    public boolean restart()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;
        int $i0;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        entermonitor $r0;

     label1:
        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 != 4 goto label3;

        $r0.<android.net.wifi.WifiStateTracker: int mRunState> = 1;

        $z0 = staticinvoke <android.net.wifi.WifiNative: boolean startDriverCommand()>();

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 != 3 goto label4;

        $r0.<android.net.wifi.WifiStateTracker: int mRunState> = 1;

     label4:
        $z0 = 1;

        goto label2;

     label5:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void setBluetoothScanMode(boolean)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        staticinvoke <android.net.wifi.WifiNative: boolean setBluetoothCoexistenceScanModeCommand(boolean)>($z0);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setNotificationVisible(boolean, int, boolean, int)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        long $l2, $l3;
        byte $b4;
        android.app.Notification $r1, $r8;
        android.content.Context $r2;
        android.content.Intent $r3;
        android.app.PendingIntent $r4;
        android.content.res.Resources $r5;
        java.lang.CharSequence $r6, $r7;
        android.os.Handler $r9;
        android.os.Message $r10;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $z1 := @parameter2: boolean;

        $i1 := @parameter3: int;

        if $z0 != 0 goto label1;

        $z2 = $r0.<android.net.wifi.WifiStateTracker: boolean mNotificationShown>;

        if $z2 != 0 goto label1;

        if $z1 != 0 goto label1;

        return;

     label1:
        if $z0 == 0 goto label4;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $r0.<android.net.wifi.WifiStateTracker: long mNotificationRepeatTime>;

        $b4 = $l2 cmp $l3;

        if $b4 < 0 goto label5;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        if $r1 != null goto label2;

        $r1 = new android.app.Notification;

        specialinvoke $r1.<android.app.Notification: void <init>()>();

        $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification> = $r1;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        $r1.<android.app.Notification: long when> = 0L;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        $r1.<android.app.Notification: int icon> = 17302027;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        $r1.<android.app.Notification: int flags> = 16;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        $r2 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.net.wifi.PICK_WIFI_NETWORK");

        $r4 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)>($r2, 0, $r3, 0);

        $r1.<android.app.Notification: android.app.PendingIntent contentIntent> = $r4;

     label2:
        $r2 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r5 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r6 = virtualinvoke $r5.<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>(17760272, $i0);

        $r2 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r5 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r5.<android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)>(17760273, $i0);

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        $r1.<android.app.Notification: java.lang.CharSequence tickerText> = $r6;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        $r2 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r8 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        $r4 = $r8.<android.app.Notification: android.app.PendingIntent contentIntent>;

        virtualinvoke $r1.<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>($r2, $r6, $r7, $r4);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $r0.<android.net.wifi.WifiStateTracker: long NOTIFICATION_REPEAT_DELAY_MS>;

        $l2 = $l2 + $l3;

        $r0.<android.net.wifi.WifiStateTracker: long mNotificationRepeatTime> = $l2;

        $r9 = $r0.<android.net.NetworkStateTracker: android.os.Handler mTarget>;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        $r10 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(3, 1, 17302027, $r1);

     label3:
        $r9 = $r0.<android.net.NetworkStateTracker: android.os.Handler mTarget>;

        $l2 = (long) $i1;

        virtualinvoke $r9.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r10, $l2);

        $r0.<android.net.wifi.WifiStateTracker: boolean mNotificationShown> = $z0;

        return;

     label4:
        $r9 = $r0.<android.net.NetworkStateTracker: android.os.Handler mTarget>;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.app.Notification mNotification>;

        virtualinvoke $r9.<android.os.Handler: void removeMessages(int,java.lang.Object)>(3, $r1);

        $r9 = $r0.<android.net.NetworkStateTracker: android.os.Handler mTarget>;

        $r10 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int,int,int)>(3, 0, 17302027);

        goto label3;

     label5:
        return;
    }

    public boolean setNumAllowedChannels()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        int $i0;
        boolean $z0;
        android.provider.Settings$SettingNotFoundException $r3;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

     label1:
        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String)>($r2, "wifi_num_allowed_channels");

        $z0 = virtualinvoke $r0.<android.net.wifi.WifiStateTracker: boolean setNumAllowedChannels(int)>($i0);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        return 1;

        catch android.provider.Settings$SettingNotFoundException from label1 to label2 with label3;
    }

    public boolean setNumAllowedChannels(int)
    {
        android.net.wifi.WifiStateTracker $r0;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $z0 = staticinvoke <android.net.wifi.WifiNative: boolean setNumAllowedChannelsCommand(int)>($i0);

     label2:
        exitmonitor $r0;

        return $z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean setRadio(boolean)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;
        android.net.wifi.WifiManager $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWM>;

        $z0 = virtualinvoke $r1.<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>($z0);

        return $z0;
    }

    public void setReleaseWakeLockCallback(java.lang.Runnable)
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.Runnable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: java.lang.Runnable;

        $r0.<android.net.wifi.WifiStateTracker: java.lang.Runnable mReleaseWakeLockCallback> = $r1;

        return;
    }

    public void setScanMode(boolean, boolean)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 := @parameter0: boolean;

        $z1 := @parameter1: boolean;

        entermonitor $r0;

     label1:
        $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanModeSetDueToAHiddenNetwork> = $z1;

        $z1 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanModeActive>;

        if $z1 == $z0 goto label2;

        $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanModeActive> = $z0;

        staticinvoke <android.net.wifi.WifiNative: boolean setScanModeCommand(boolean)>($z0);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setScanOnlyMode(boolean)
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0, $z1;
        byte $b0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanOnly>;

        if $z1 == $z0 goto label3;

        if $z0 == 0 goto label4;

        $b0 = 2;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Scan-only mode changing to ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scanType=");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WifiStateTracker", $r2);

        $z1 = staticinvoke <android.net.wifi.WifiNative: boolean setScanResultHandlingCommand(int)>($b0);

        if $z1 == 0 goto label3;

        $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanOnly> = $z0;

        $z1 = specialinvoke $r0.<android.net.wifi.WifiStateTracker: boolean isDriverStopped()>();

        if $z1 != 0 goto label3;

        if $z0 == 0 goto label5;

        staticinvoke <android.net.wifi.WifiNative: boolean disconnectCommand()>();

     label3:
        exitmonitor $r0;

        return;

     label4:
        $b0 = 1;

        goto label2;

     label5:
        staticinvoke <android.net.wifi.WifiNative: boolean reconnectCommand()>();

     label6:
        goto label3;

     label7:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public void setScanResultsList(java.util.List)
    {
        android.net.wifi.WifiStateTracker $r0;
        java.util.List $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: java.util.List;

        entermonitor $r0;

     label1:
        $r0.<android.net.wifi.WifiStateTracker: java.util.List mScanResults> = $r1;

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void startEventLoop()
    {
        android.net.wifi.WifiStateTracker $r0;
        android.net.wifi.WifiMonitor $r1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiMonitor mWifiMonitor>;

        virtualinvoke $r1.<android.net.wifi.WifiMonitor: void startMonitoring()>();

        return;
    }

    public void startMonitoring()
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.Object $r1;
        android.content.Context $r2;
        android.net.wifi.WifiManager $r3;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r2 = $r0.<android.net.NetworkStateTracker: android.content.Context mContext>;

        $r1 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("wifi");

        $r3 = (android.net.wifi.WifiManager) $r1;

        $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiManager mWM> = $r3;

        return;
    }

    public int startUsingNetworkFeature(java.lang.String, int, int)
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.String $r1;
        int $i0, $i1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        return -1;
    }

    public int stopUsingNetworkFeature(java.lang.String, int, int)
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.String $r1;
        int $i0, $i1;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        return -1;
    }

    public boolean teardown()
    {
        android.net.wifi.WifiStateTracker $r0;
        boolean $z0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mTornDownByConnMgr>;

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r0.<android.net.wifi.WifiStateTracker: boolean disconnectAndStop()>();

        if $z0 == 0 goto label1;

        specialinvoke $r0.<android.net.wifi.WifiStateTracker: void setTornDownByConnMgr(boolean)>(1);

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.lang.String toString()
    {
        android.net.wifi.WifiStateTracker $r0;
        java.lang.StringBuffer $r1, $r2;
        java.lang.String $r3;
        int $i0, $i1;
        java.lang.String[] $r4;
        android.net.wifi.WifiInfo $r5;
        android.net.DhcpInfo $r6;
        boolean $z0;

        $r0 := @this: android.net.wifi.WifiStateTracker;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("interface ");

        $r3 = $r0.<android.net.wifi.WifiStateTracker: java.lang.String mInterfaceName>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" runState=");

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        if $i0 < 1 goto label2;

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        $r4 = <android.net.wifi.WifiStateTracker: java.lang.String[] mRunStateNames>;

        $i1 = lengthof $r4;

        if $i0 > $i1 goto label2;

        $r4 = <android.net.wifi.WifiStateTracker: java.lang.String[] mRunStateNames>;

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        $i0 = $i0 - 1;

        $r3 = $r4[$i0];

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label1:
        $r3 = <android.net.wifi.WifiStateTracker: java.lang.String LS>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = $r0.<android.net.wifi.WifiStateTracker: android.net.wifi.WifiInfo mWifiInfo>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r3 = <android.net.wifi.WifiStateTracker: java.lang.String LS>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = $r0.<android.net.wifi.WifiStateTracker: android.net.DhcpInfo mDhcpInfo>;

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r3 = <android.net.wifi.WifiStateTracker: java.lang.String LS>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("haveIpAddress=");

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mHaveIPAddress>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", obtainingIpAddress=");

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mObtainingIPAddress>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", scanModeActive=");

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mIsScanModeActive>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r3 = <android.net.wifi.WifiStateTracker: java.lang.String LS>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lastSignalLevel=");

        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mLastSignalLevel>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", explicitlyDisabled=");

        $z0 = $r0.<android.net.wifi.WifiStateTracker: boolean mTornDownByConnMgr>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label2:
        $i0 = $r0.<android.net.wifi.WifiStateTracker: int mRunState>;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        goto label1;
    }
}
