class org.bouncycastle.crypto.generators.DHKeyGeneratorHelper extends java.lang.Object
{
    static final org.bouncycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE;
    private static final int MAX_ITERATIONS;
    private static java.math.BigInteger TWO;
    private static java.math.BigInteger ZERO;

    static void <clinit>()
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper $r0;
        java.math.BigInteger $r1;

        <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: int MAX_ITERATIONS> = 1000;

        $r0 = new org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        specialinvoke $r0.<org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: void <init>()>();

        <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE> = $r0;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger ZERO> = $r1;

        $r1 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO> = $r1;

        return;
    }

    private void <init>()
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper $r0;

        $r0 := @this: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private java.math.BigInteger createInRange(java.math.BigInteger, java.security.SecureRandom)
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper $r0;
        java.math.BigInteger $r1, $r3, $r4;
        java.security.SecureRandom $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.security.SecureRandom;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i1 = 0;

     label1:
        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r2);

        $i1 = $i1 + 1;

        $r4 = <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r3.<java.math.BigInteger: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $i2 = virtualinvoke $r3.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i2 <= 0 goto label3;

     label2:
        if $i1 != 1000 goto label1;

     label3:
        if $i1 != 1000 goto label4;

        $r1 = new java.math.BigInteger;

        $i0 = $i0 - 1;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r2);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger setBit(int)>(0);

        return $r1;

     label4:
        return $r3;
    }

    java.math.BigInteger calculatePrivate(java.math.BigInteger, java.security.SecureRandom, int)
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper $r0;
        java.math.BigInteger $r1, $r3;
        java.security.SecureRandom $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.security.SecureRandom;

        $i0 := @parameter2: int;

        $r3 = <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger TWO>;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r3);

        if $i0 != 0 goto label1;

        $r1 = specialinvoke $r0.<org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger createInRange(java.math.BigInteger,java.security.SecureRandom)>($r1, $r2);

        return $r1;

     label1:
        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r2);

        $r3 = <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger ZERO>;

        $z0 = virtualinvoke $r1.<java.math.BigInteger: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        return $r1;
    }

    java.math.BigInteger calculatePublic(java.math.BigInteger, java.math.BigInteger, java.math.BigInteger)
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper $r0;
        java.math.BigInteger $r1, $r2, $r3;

        $r0 := @this: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper;

        $r1 := @parameter0: java.math.BigInteger;

        $r2 := @parameter1: java.math.BigInteger;

        $r3 := @parameter2: java.math.BigInteger;

        $r1 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r3, $r1);

        return $r1;
    }
}
