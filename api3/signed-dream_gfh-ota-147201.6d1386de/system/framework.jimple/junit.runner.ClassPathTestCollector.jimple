public abstract class junit.runner.ClassPathTestCollector extends java.lang.Object implements junit.runner.TestCollector
{
    static final int SUFFIX_LENGTH;

    static void <clinit>()
    {
        int $i0;
        java.lang.String $r0;

        $r0 = ".class";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        <junit.runner.ClassPathTestCollector: int SUFFIX_LENGTH> = $i0;

        return;
    }

    public void <init>()
    {
        junit.runner.ClassPathTestCollector $r0;

        $r0 := @this: junit.runner.ClassPathTestCollector;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected java.lang.String classNameFromFile(java.lang.String)
    {
        junit.runner.ClassPathTestCollector $r0;
        java.lang.String $r1;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @this: junit.runner.ClassPathTestCollector;

        $r1 := @parameter0: java.lang.String;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = <junit.runner.ClassPathTestCollector: int SUFFIX_LENGTH>;

        $i0 = $i1 - $i0;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $c2 = <java.io.File: char separatorChar>;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>($c2, 46);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        return $r1;

     label1:
        return $r1;
    }

    public java.util.Hashtable collectFilesInPath(java.lang.String)
    {
        junit.runner.ClassPathTestCollector $r0;
        java.lang.String $r1;
        java.util.Vector $r2;
        java.util.Hashtable $r3;

        $r0 := @this: junit.runner.ClassPathTestCollector;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<junit.runner.ClassPathTestCollector: java.util.Vector splitClassPath(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<junit.runner.ClassPathTestCollector: java.util.Hashtable collectFilesInRoots(java.util.Vector)>($r2);

        return $r3;
    }

    java.util.Hashtable collectFilesInRoots(java.util.Vector)
    {
        junit.runner.ClassPathTestCollector $r0;
        java.util.Vector $r1;
        java.util.Hashtable $r2;
        java.io.File $r3;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r6;

        $r0 := @this: junit.runner.ClassPathTestCollector;

        $r1 := @parameter0: java.util.Vector;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>(int)>(100);

        $r4 = virtualinvoke $r1.<java.util.Vector: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r3 = new java.io.File;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (java.lang.String) $r5;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>($r6);

        virtualinvoke $r0.<junit.runner.ClassPathTestCollector: void gatherFiles(java.io.File,java.lang.String,java.util.Hashtable)>($r3, "", $r2);

        goto label1;

     label2:
        return $r2;
    }

    public java.util.Enumeration collectTests()
    {
        junit.runner.ClassPathTestCollector $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        java.util.Enumeration $r3;

        $r0 := @this: junit.runner.ClassPathTestCollector;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.class.path");

        $r2 = virtualinvoke $r0.<junit.runner.ClassPathTestCollector: java.util.Hashtable collectFilesInPath(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

        return $r3;
    }

    void gatherFiles(java.io.File, java.lang.String, java.util.Hashtable)
    {
        junit.runner.ClassPathTestCollector $r0;
        java.io.File $r1, $r4;
        java.lang.String $r2, $r7;
        java.util.Hashtable $r3;
        boolean $z0;
        java.lang.String[] $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r6;
        char $c2;

        $r0 := @this: junit.runner.ClassPathTestCollector;

        $r1 := @parameter0: java.io.File;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.util.Hashtable;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, $r2);

        $z0 = virtualinvoke $r4.<java.io.File: boolean isFile()>();

        if $z0 == 0 goto label1;

        $z0 = virtualinvoke $r0.<junit.runner.ClassPathTestCollector: boolean isTestClass(java.lang.String)>($r2);

        if $z0 == 0 goto label3;

        $r2 = virtualinvoke $r0.<junit.runner.ClassPathTestCollector: java.lang.String classNameFromFile(java.lang.String)>($r2);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r2);

        return;

     label1:
        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String[] list()>();

        if $r5 == null goto label4;

        $i0 = 0;

     label2:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $c2 = <java.io.File: char separatorChar>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r7 = $r5[$i0];

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<junit.runner.ClassPathTestCollector: void gatherFiles(java.io.File,java.lang.String,java.util.Hashtable)>($r1, $r7, $r3);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return;

     label4:
        return;

     label5:
        return;
    }

    protected boolean isTestClass(java.lang.String)
    {
        junit.runner.ClassPathTestCollector $r0;
        java.lang.String $r1;
        boolean $z0;
        int $i0;

        $r0 := @this: junit.runner.ClassPathTestCollector;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(36);

        if $i0 >= 0 goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("Test");

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    java.util.Vector splitClassPath(java.lang.String)
    {
        junit.runner.ClassPathTestCollector $r0;
        java.lang.String $r1, $r4;
        java.util.Vector $r2;
        java.util.StringTokenizer $r3;
        boolean $z0;

        $r0 := @this: junit.runner.ClassPathTestCollector;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r4 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("path.separator");

        $r3 = new java.util.StringTokenizer;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, $r4);

     label1:
        $z0 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r1);

        goto label1;

     label2:
        return $r2;
    }
}
