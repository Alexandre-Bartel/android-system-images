public class com.android.internal.http.multipart.MultipartTest extends junit.framework.TestCase
{

    public void <init>()
    {
        com.android.internal.http.multipart.MultipartTest $r0;

        $r0 := @this: com.android.internal.http.multipart.MultipartTest;

        specialinvoke $r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testParts() throws java.lang.Exception
    {
        com.android.internal.http.multipart.MultipartTest $r0;
        java.lang.StringBuffer $r1, r16;
        com.android.internal.http.multipart.MultipartEntity $r2, r21;
        java.io.ByteArrayOutputStream $r3, r22;
        java.io.BufferedWriter $r4, r18;
        java.lang.Object[] $r6;
        java.io.File $r7;
        java.lang.String $r8, $r13, $r14;
        org.apache.http.Header $r11;
        byte[] $r12;
        java.lang.Throwable $r15;
        java.io.FileWriter r17;
        com.android.internal.http.multipart.StringPart r19;
        com.android.internal.http.multipart.FilePart r20;
        com.android.internal.http.multipart.Part[] r23;

        $r0 := @this: com.android.internal.http.multipart.MultipartTest;

        r16 = new java.lang.StringBuffer;

        $r1 = r16;

        specialinvoke r16.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("this is file part");

        $r7 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("Multipart", "test");

        r17 = new java.io.FileWriter;

        specialinvoke r17.<java.io.FileWriter: void <init>(java.io.File)>($r7);

        r18 = new java.io.BufferedWriter;

        $r4 = r18;

        specialinvoke r18.<java.io.BufferedWriter: void <init>(java.io.Writer)>(r17);

     label1:
        $r8 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.BufferedWriter: void write(java.lang.String)>($r8);

        virtualinvoke $r4.<java.io.BufferedWriter: void flush()>();

     label2:
        virtualinvoke $r4.<java.io.BufferedWriter: void close()>();

        $r6 = newarray (com.android.internal.http.multipart.Part)[3];

        r19 = new com.android.internal.http.multipart.StringPart;

        specialinvoke r19.<com.android.internal.http.multipart.StringPart: void <init>(java.lang.String,java.lang.String)>("stringpart", "PART1!!");

        $r6[0] = r19;

        r20 = new com.android.internal.http.multipart.FilePart;

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        specialinvoke r20.<com.android.internal.http.multipart.FilePart: void <init>(java.lang.String,java.io.File)>($r8, $r7);

        $r6[1] = r20;

        r19 = new com.android.internal.http.multipart.StringPart;

        specialinvoke r19.<com.android.internal.http.multipart.StringPart: void <init>(java.lang.String,java.lang.String)>("stringpart", "PART2!!");

        $r6[2] = r19;

        r21 = new com.android.internal.http.multipart.MultipartEntity;

        $r2 = r21;

        r23 = (com.android.internal.http.multipart.Part[]) $r6;

        specialinvoke r21.<com.android.internal.http.multipart.MultipartEntity: void <init>(com.android.internal.http.multipart.Part[])>(r23);

        r22 = new java.io.ByteArrayOutputStream;

        $r3 = r22;

        specialinvoke r22.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke $r2.<com.android.internal.http.multipart.MultipartEntity: void writeTo(java.io.OutputStream)>($r3);

        $r11 = virtualinvoke $r2.<com.android.internal.http.multipart.MultipartEntity: org.apache.http.Header getContentType()>();

        $r12 = virtualinvoke $r2.<com.android.internal.http.multipart.MultipartEntity: byte[] getMultipartBoundary()>();

        $r8 = staticinvoke <org.apache.http.util.EncodingUtils: java.lang.String getAsciiString(byte[])>($r12);

        r16 = new java.lang.StringBuffer;

        $r1 = r16;

        specialinvoke r16.<java.lang.StringBuffer: void <init>(java.lang.String)>("multipart/form-data");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; boundary=");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r13 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r14 = interfaceinvoke $r11.<org.apache.http.Header: java.lang.String getValue()>();

        staticinvoke <com.android.internal.http.multipart.MultipartTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Multipart content type error", $r13, $r14);

        r16 = new java.lang.StringBuffer;

        $r1 = r16;

        specialinvoke r16.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Disposition: form-data; name=\"stringpart\"");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Type: text/plain; charset=US-ASCII");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Transfer-Encoding: 8bit");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PART1!!");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Disposition: form-data; name=\"");

        $r13 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"; filename=\"");

        $r13 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Type: application/octet-stream; charset=ISO-8859-1");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Transfer-Encoding: binary");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("this is file part");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Disposition: form-data; name=\"stringpart\"");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Type: text/plain; charset=US-ASCII");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content-Transfer-Encoding: 8bit");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PART2!!");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("--");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\r\n");

        $r8 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        $r13 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: java.lang.String toString()>();

        staticinvoke <com.android.internal.http.multipart.MultipartTest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Multipart content error", $r8, $r13);

        return;

     label3:
        $r15 := @caughtexception;

        virtualinvoke $r4.<java.io.BufferedWriter: void close()>();

        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
