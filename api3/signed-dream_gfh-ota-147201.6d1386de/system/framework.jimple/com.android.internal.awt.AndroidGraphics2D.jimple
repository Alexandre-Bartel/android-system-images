public class com.android.internal.awt.AndroidGraphics2D extends java.awt.Graphics2D
{
    public static final double RAD_360;
    private static com.android.internal.awt.AndroidGraphics2D mAg;
    private static java.awt.Color mBc;
    private static android.graphics.Canvas mC;
    private static java.awt.FontMetrics mFm;
    private static java.awt.Font mFnt;
    public static android.graphics.Matrix mM;
    public static android.graphics.Paint mP;
    private static java.awt.RenderingHints mRh;
    private com.android.internal.awt.AndroidJavaBlitter blitter;
    protected org.apache.harmony.awt.gl.MultiRectArea clip;
    private java.awt.image.DirectColorModel cm;
    protected java.awt.Composite composite;
    private int displayHeight;
    private int displayWidth;
    protected org.apache.harmony.awt.gl.Surface dstSurf;
    private java.awt.geom.Area mCurrClip;
    private java.awt.image.SinglePixelPackedSampleModel sm;
    protected java.awt.geom.AffineTransform transform;
    private java.awt.image.WritableRaster wr;

    private void <init>(android.content.Context, android.graphics.Canvas, android.graphics.Paint)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        android.content.Context $r1;
        android.graphics.Canvas $r2, $r8;
        android.graphics.Paint $r3;
        int[] $r4;
        java.awt.AlphaComposite $r5;
        java.awt.geom.AffineTransform $r6;
        android.graphics.Matrix $r7;
        android.graphics.Rect $r9;
        int $i0, $i1;
        java.awt.geom.Area $r10;
        java.awt.Shape $r11;
        java.lang.Object $r12;
        android.view.WindowManager $r13;
        android.view.Display $r14;
        com.android.internal.awt.AndroidJavaBlitter $r15;
        java.awt.image.DirectColorModel $r16;
        java.awt.image.SinglePixelPackedSampleModel $r17;
        java.awt.image.WritableRaster $r18;
        org.apache.harmony.awt.gl.ImageSurface $r19;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: android.graphics.Canvas;

        $r3 := @parameter2: android.graphics.Paint;

        specialinvoke $r0.<java.awt.Graphics2D: void <init>()>();

        $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf> = null;

        $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip> = null;

        $r5 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite> = $r5;

        $r6 = new java.awt.geom.AffineTransform;

        specialinvoke $r6.<java.awt.geom.AffineTransform: void <init>()>();

        $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform> = $r6;

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC> = $r2;

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r3;

        $r7 = new android.graphics.Matrix;

        specialinvoke $r7.<android.graphics.Matrix: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM> = $r7;

        $r7 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r7.<android.graphics.Matrix: void reset()>();

        $r8 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r7 = virtualinvoke $r8.<android.graphics.Canvas: android.graphics.Matrix getMatrix()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM> = $r7;

        $r8 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r9 = virtualinvoke $r8.<android.graphics.Canvas: android.graphics.Rect getClipBounds()>();

        $r4 = newarray (int)[12];

        $r4[0] = -1;

        $i0 = $r9.<android.graphics.Rect: int top>;

        $r4[1] = $i0;

        $i0 = $r9.<android.graphics.Rect: int left>;

        $r4[2] = $i0;

        $r4[3] = -2;

        $i0 = $r9.<android.graphics.Rect: int top>;

        $r4[4] = $i0;

        $i0 = $r9.<android.graphics.Rect: int right>;

        $r4[5] = $i0;

        $r4[6] = -2;

        $i0 = $r9.<android.graphics.Rect: int bottom>;

        $r4[7] = $i0;

        $i0 = $r9.<android.graphics.Rect: int right>;

        $r4[8] = $i0;

        $r4[9] = -2;

        $i0 = $r9.<android.graphics.Rect: int bottom>;

        $r4[10] = $i0;

        $i0 = $r9.<android.graphics.Rect: int left>;

        $r4[11] = $i0;

        $r10 = new java.awt.geom.Area;

        $r11 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Shape createShape(int[])>($r4);

        specialinvoke $r10.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r11);

        $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.Area mCurrClip> = $r10;

        if $r1 == null goto label1;

        $r12 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r13 = (android.view.WindowManager) $r12;

        $r14 = interfaceinvoke $r13.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $i0 = virtualinvoke $r14.<android.view.Display: int getWidth()>();

        $r0.<com.android.internal.awt.AndroidGraphics2D: int displayWidth> = $i0;

        $i0 = virtualinvoke $r14.<android.view.Display: int getHeight()>();

        $r0.<com.android.internal.awt.AndroidGraphics2D: int displayHeight> = $i0;

     label1:
        $r15 = new com.android.internal.awt.AndroidJavaBlitter;

        specialinvoke $r15.<com.android.internal.awt.AndroidJavaBlitter: void <init>(android.graphics.Canvas)>($r2);

        $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter> = $r15;

        $r16 = new java.awt.image.DirectColorModel;

        specialinvoke $r16.<java.awt.image.DirectColorModel: void <init>(int,int,int,int,int)>(32, 16711680, 65280, 255, -16777216);

        $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.image.DirectColorModel cm> = $r16;

        $r17 = new java.awt.image.SinglePixelPackedSampleModel;

        $i0 = $r0.<com.android.internal.awt.AndroidGraphics2D: int displayWidth>;

        $i1 = $r0.<com.android.internal.awt.AndroidGraphics2D: int displayHeight>;

        $r16 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.image.DirectColorModel cm>;

        $r4 = virtualinvoke $r16.<java.awt.image.PackedColorModel: int[] getMasks()>();

        specialinvoke $r17.<java.awt.image.SinglePixelPackedSampleModel: void <init>(int,int,int,int[])>(3, $i0, $i1, $r4);

        $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.image.SinglePixelPackedSampleModel sm> = $r17;

        $r17 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.image.SinglePixelPackedSampleModel sm>;

        $r18 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r17, null);

        $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.image.WritableRaster wr> = $r18;

        $r19 = new org.apache.harmony.awt.gl.ImageSurface;

        $r16 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.image.DirectColorModel cm>;

        $r18 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.image.WritableRaster wr>;

        specialinvoke $r19.<org.apache.harmony.awt.gl.ImageSurface: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster)>($r16, $r18);

        $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf> = $r19;

        return;
    }

    private void applyHints()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.RenderingHints $r1;
        java.awt.RenderingHints$Key $r2;
        java.lang.Object $r3, $r4;
        boolean $z0;
        android.graphics.Paint $r5;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>;

        $r3 = virtualinvoke $r1.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 == null goto label1;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_DEFAULT>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label2;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r5.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

     label1:
        $r1 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r3 = virtualinvoke $r1.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 == null goto label6;

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_DEFAULT>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label4;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r5.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

        return;

     label2:
        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_OFF>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label3;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r5.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

        goto label1;

     label3:
        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r5.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        goto label1;

     label4:
        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_OFF>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label5;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r5.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

        return;

     label5:
        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label7;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r5.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        return;

     label6:
        return;

     label7:
        return;
    }

    private float[] createAWTMatrix(float[])
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        float[] $r1, $r2;
        float $f0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: float[];

        $r2 = newarray (float)[9];

        $f0 = $r1[0];

        $r2[0] = $f0;

        $f0 = $r1[3];

        $r2[1] = $f0;

        $f0 = $r1[1];

        $r2[2] = $f0;

        $f0 = $r1[4];

        $r2[3] = $f0;

        $f0 = $r1[2];

        $r2[4] = $f0;

        $f0 = $r1[5];

        $r2[5] = $f0;

        $f0 = 0.0F;

        $r2[6] = $f0;

        $f0 = 0.0F;

        $r2[7] = $f0;

        $f0 = 1.06535322E9F;

        $r2[8] = $f0;

        return $r2;
    }

    public static float[] createMatrix(java.awt.geom.AffineTransform)
    {
        java.awt.geom.AffineTransform $r0;
        double[] $r1;
        float[] $r2;
        int $i0;
        double $d0;
        float $f0;

        $r0 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = newarray (double)[9];

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void getMatrix(double[])>($r1);

        $i0 = lengthof $r1;

        $r2 = newarray (float)[$i0];

        $d0 = $r1[0];

        $f0 = (float) $d0;

        $r2[0] = $f0;

        $d0 = $r1[2];

        $f0 = (float) $d0;

        $r2[1] = $f0;

        $d0 = $r1[4];

        $f0 = (float) $d0;

        $r2[2] = $f0;

        $d0 = $r1[1];

        $f0 = (float) $d0;

        $r2[3] = $f0;

        $d0 = $r1[3];

        $f0 = (float) $d0;

        $r2[4] = $f0;

        $d0 = $r1[5];

        $f0 = (float) $d0;

        $r2[5] = $f0;

        $f0 = 0.0F;

        $r2[6] = $f0;

        $f0 = 0.0F;

        $r2[7] = $f0;

        $f0 = 1.06535322E9F;

        $r2[8] = $f0;

        return $r2;
    }

    public static android.graphics.Matrix createMatrixObj(java.awt.geom.AffineTransform)
    {
        java.awt.geom.AffineTransform $r0;
        android.graphics.Matrix $r1;
        float[] $r2;

        $r0 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = new android.graphics.Matrix;

        specialinvoke $r1.<android.graphics.Matrix: void <init>()>();

        virtualinvoke $r1.<android.graphics.Matrix: void reset()>();

        $r2 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: float[] createMatrix(java.awt.geom.AffineTransform)>($r0);

        virtualinvoke $r1.<android.graphics.Matrix: void setValues(float[])>($r2);

        return $r1;
    }

    private java.awt.Shape createShape(int[])
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int[] $r1;
        java.awt.geom.GeneralPath $r2, $r3;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: int[];

        $r2 = new java.awt.geom.GeneralPath;

        specialinvoke $r2.<java.awt.geom.GeneralPath: void <init>()>();

        $i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label7;

        $i0 = $r1[$i1];

        lookupswitch($i0)
        {
            case -5: goto label7;
            case -4: goto label6;
            case -3: goto label5;
            case -2: goto label4;
            case -1: goto label3;
            default: goto label2;
        };

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $r3 = (java.awt.geom.GeneralPath) $r2;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f0 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f1 = (float) $i0;

        virtualinvoke $r3.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f0, $f1);

        goto label2;

     label4:
        $r3 = (java.awt.geom.GeneralPath) $r2;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f0 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f1 = (float) $i0;

        virtualinvoke $r3.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f0, $f1);

        goto label2;

     label5:
        $r3 = (java.awt.geom.GeneralPath) $r2;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f0 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f1 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f2 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f3 = (float) $i0;

        virtualinvoke $r3.<java.awt.geom.GeneralPath: void quadTo(float,float,float,float)>($f0, $f1, $f2, $f3);

        goto label2;

     label6:
        $r3 = (java.awt.geom.GeneralPath) $r2;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f0 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f1 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f2 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f3 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f4 = (float) $i0;

        $i1 = $i1 + 1;

        $i0 = $r1[$i1];

        $f5 = (float) $i0;

        virtualinvoke $r3.<java.awt.geom.GeneralPath: void curveTo(float,float,float,float,float,float)>($f0, $f1, $f2, $f3, $f4, $f5);

        goto label2;

     label7:
        return $r2;
    }

    public static android.graphics.Canvas getAndroidCanvas()
    {
        android.graphics.Canvas r0;

        r0 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        return r0;
    }

    public static android.graphics.Paint getAndroidPaint()
    {
        android.graphics.Paint r0;

        r0 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        return r0;
    }

    private void getCurrentSegment(java.awt.geom.PathIterator, android.graphics.Path)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.geom.PathIterator $r1;
        android.graphics.Path $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        float[] $r3;
        int $i0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.geom.PathIterator;

        $r2 := @parameter1: android.graphics.Path;

        $r3 = newarray (float)[6];

        $i0 = interfaceinvoke $r1.<java.awt.geom.PathIterator: int currentSegment(float[])>($r3);

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            default: goto label1;
        };

     label1:
        return;

     label2:
        $f0 = $r3[0];

        $f1 = $r3[1];

        virtualinvoke $r2.<android.graphics.Path: void moveTo(float,float)>($f0, $f1);

        return;

     label3:
        $f0 = $r3[0];

        $f1 = $r3[1];

        virtualinvoke $r2.<android.graphics.Path: void lineTo(float,float)>($f0, $f1);

        return;

     label4:
        $f0 = $r3[0];

        $f1 = $r3[1];

        $f2 = $r3[2];

        $f3 = $r3[3];

        virtualinvoke $r2.<android.graphics.Path: void quadTo(float,float,float,float)>($f0, $f1, $f2, $f3);

        return;

     label5:
        $f2 = $r3[0];

        $f3 = $r3[1];

        $f4 = $r3[2];

        $f5 = $r3[3];

        $f0 = $r3[4];

        $f1 = $r3[5];

        virtualinvoke $r2.<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>($f2, $f3, $f4, $f5, $f0, $f1);

        return;

     label6:
        virtualinvoke $r2.<android.graphics.Path: void close()>();

        return;
    }

    public static float getDegree(float)
    {
        float $f0;
        double $d0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = 57.29577951308232 * $d0;

        $f0 = (float) $d0;

        return $f0;
    }

    public static float getEllipsisX(float, float)
    {
        float $f0, $f1;
        double $d0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        $f0 = (float) $d0;

        $f0 = $f0 * $f1;

        return $f0;
    }

    public static float getEllipsisY(float, float)
    {
        float $f0, $f1;
        double $d0;

        $f0 := @parameter0: float;

        $f1 := @parameter1: float;

        $d0 = (double) $f0;

        $d0 = staticinvoke <java.lang.Math: double sin(double)>($d0);

        $f0 = (float) $d0;

        $f0 = $f0 * $f1;

        return $f0;
    }

    public static com.android.internal.awt.AndroidGraphics2D getInstance()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.lang.RuntimeException $r1;

        $r0 = <com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidGraphics2D mAg>;

        if $r0 != null goto label1;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("AndroidGraphics2D not instantiated!");

        throw $r1;

     label1:
        $r0 = <com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidGraphics2D mAg>;

        return $r0;
    }

    public static com.android.internal.awt.AndroidGraphics2D getInstance(android.content.Context, android.graphics.Canvas, android.graphics.Paint)
    {
        android.content.Context $r0;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;
        java.lang.RuntimeException $r3;
        com.android.internal.awt.AndroidGraphics2D $r4;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: android.graphics.Canvas;

        $r2 := @parameter2: android.graphics.Paint;

        if $r1 == null goto label1;

        if $r0 != null goto label2;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Illegal argument, Canvas cannot be null!");

        throw $r3;

     label2:
        $r4 = new com.android.internal.awt.AndroidGraphics2D;

        specialinvoke $r4.<com.android.internal.awt.AndroidGraphics2D: void <init>(android.content.Context,android.graphics.Canvas,android.graphics.Paint)>($r0, $r1, $r2);

        <com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidGraphics2D mAg> = $r4;

        $r4 = <com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidGraphics2D mAg>;

        return $r4;
    }

    private android.graphics.Path getPath(java.awt.Shape)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Shape $r1;
        android.graphics.Path $r2;
        java.awt.geom.PathIterator $r3;
        boolean $z0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Shape;

        $r2 = new android.graphics.Path;

        specialinvoke $r2.<android.graphics.Path: void <init>()>();

        $r3 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.PathIterator getPathIterator(java.awt.geom.AffineTransform)>(null);

     label1:
        $z0 = interfaceinvoke $r3.<java.awt.geom.PathIterator: boolean isDone()>();

        if $z0 != 0 goto label2;

        specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void getCurrentSegment(java.awt.geom.PathIterator,android.graphics.Path)>($r3, $r2);

        interfaceinvoke $r3.<java.awt.geom.PathIterator: void next()>();

        goto label1;

     label2:
        return $r2;
    }

    public static float getRadian(float)
    {
        float $f0;
        double $d0;

        $f0 := @parameter0: float;

        $d0 = (double) $f0;

        $d0 = 0.017453292519943295 * $d0;

        $f0 = (float) $d0;

        return $f0;
    }

    private java.awt.Shape getShape()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        return null;
    }

    public void addRenderingHints(java.util.Map)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.util.Map $r1;
        java.awt.RenderingHints $r2, $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.util.Map;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        if $r2 != null goto label1;

        $r2 = (java.awt.RenderingHints) $r1;

        <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh> = $r2;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        $r3 = (java.awt.RenderingHints) $r1;

        virtualinvoke $r2.<java.awt.RenderingHints: void add(java.awt.RenderingHints)>($r3);

        return;
    }

    public void clearRect(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.Canvas $r1;
        java.awt.Color $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $i2 = $i0 + $i2;

        $i3 = $i1 + $i3;

        virtualinvoke $r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: java.awt.Color mBc>;

        if $r2 == null goto label1;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: java.awt.Color mBc>;

        $i0 = virtualinvoke $r2.<java.awt.Color: int getAlpha()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: java.awt.Color mBc>;

        $i1 = virtualinvoke $r2.<java.awt.Color: int getBlue()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: java.awt.Color mBc>;

        $i2 = virtualinvoke $r2.<java.awt.Color: int getGreen()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: java.awt.Color mBc>;

        $i3 = virtualinvoke $r2.<java.awt.Color: int getRed()>();

        virtualinvoke $r1.<android.graphics.Canvas: void drawARGB(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;

     label1:
        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        virtualinvoke $r1.<android.graphics.Canvas: void drawARGB(int,int,int,int)>(255, 255, 255, 255);

        return;
    }

    public void clip(java.awt.Shape)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Shape $r1;
        android.graphics.Canvas $r2;
        android.graphics.Path $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Shape;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r3 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: android.graphics.Path getPath(java.awt.Shape)>($r1);

        virtualinvoke $r2.<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>($r3);

        return;
    }

    public void clipRect(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r1;
        java.awt.Shape $r2;
        java.awt.geom.Area $r3, $r4;
        android.graphics.Canvas $r5;
        android.graphics.Rect $r6;
        android.graphics.Region$Op $r7;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = newarray (int)[12];

        $r1[0] = -1;

        $r1[1] = $i0;

        $r1[2] = $i1;

        $r1[3] = -2;

        $r1[4] = $i0;

        $i4 = $i1 + $i2;

        $r1[5] = $i4;

        $r1[6] = -2;

        $i4 = $i0 + $i3;

        $r1[7] = $i4;

        $i4 = $i1 + $i2;

        $r1[8] = $i4;

        $r1[9] = -2;

        $i4 = $i0 + $i3;

        $r1[10] = $i4;

        $r1[11] = $i1;

        $r2 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Shape createShape(int[])>($r1);

        $r3 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.Area mCurrClip>;

        $r4 = new java.awt.geom.Area;

        specialinvoke $r4.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r2);

        virtualinvoke $r3.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>($r4);

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r6 = new android.graphics.Rect;

        $i2 = $i0 + $i2;

        $i3 = $i1 + $i3;

        specialinvoke $r6.<android.graphics.Rect: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r7 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke $r5.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>($r6, $r7);

        return;
    }

    public void copyArea(int, int, int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Canvas $r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $i2 = $i2 + $i4;

        $i3 = $i3 + $i5;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void copyArea(android.graphics.Canvas,int,int,int,int,int,int)>($r1, $i0, $i1, $i2, $i3, $i4, $i5);

        return;
    }

    public void copyArea(android.graphics.Canvas, int, int, int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        android.graphics.Canvas $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        double $d0, $d1;
        java.awt.geom.AffineTransform $r2;
        android.graphics.Rect $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: android.graphics.Canvas;

        $i4 := @parameter1: int;

        $i5 := @parameter2: int;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $d0 = (double) $i4;

        $r2 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform getTransform()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d0 = $d0 + $d1;

        $i4 = (int) $d0;

        $d0 = (double) $i5;

        $r2 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform getTransform()>();

        $d1 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d0 = $d0 + $d1;

        $i5 = (int) $d0;

        $r3 = new android.graphics.Rect;

        $i0 = $i4 + $i0;

        $i1 = $i5 + $i1;

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>($i4, $i5, $i0, $i1);

        staticinvoke <com.android.internal.graphics.NativeUtils: boolean nativeScrollRect(android.graphics.Canvas,android.graphics.Rect,int,int)>($r1, $r3, $i2, $i3);

        return;
    }

    public java.awt.Graphics create()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        return $r0;
    }

    public void dispose()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC> = null;

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = null;

        return;
    }

    public void draw(android.graphics.Path)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        android.graphics.Path $r1;
        android.graphics.Paint$Style $r2, $r4;
        android.graphics.Paint $r3;
        android.graphics.Matrix $r5;
        android.graphics.Canvas $r6;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: android.graphics.Path;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r3 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r3;

     label1:
        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r2 = virtualinvoke $r3.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r1.<android.graphics.Path: void transform(android.graphics.Matrix)>($r5);

        $r6 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r6.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r1, $r3);

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r2);

        return;
    }

    public void draw(java.awt.Shape)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Shape $r1;
        android.graphics.Paint $r2;
        android.graphics.Paint$Style $r3, $r4;
        android.graphics.Canvas $r5;
        android.graphics.Path $r6;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Shape;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r3 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r6 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: android.graphics.Path getPath(java.awt.Shape)>($r1);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r5.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r6, $r2);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        return;
    }

    public void draw3DRect(int, int, int, int, boolean)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.awt.Color $r1, $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $r1 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Color getColor()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<java.awt.Color: java.awt.Color brighter()>();

        $r1 = virtualinvoke $r1.<java.awt.Color: java.awt.Color darker()>();

     label1:
        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void setColor(java.awt.Color)>($r2);

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i0, $i1, $i2, 1);

        $i4 = $i1 + 1;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i0, $i4, 1, $i3);

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void setColor(java.awt.Color)>($r1);

        $i4 = $i0 + $i2;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i4, $i1, 1, $i3);

        $i0 = $i0 + 1;

        $i1 = $i1 + $i3;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i0, $i1, $i2, 1);

        return;

     label2:
        $r2 = virtualinvoke $r1.<java.awt.Color: java.awt.Color darker()>();

        $r1 = virtualinvoke $r1.<java.awt.Color: java.awt.Color brighter()>();

        goto label1;
    }

    public void drawArc(int, int, int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Paint $r1;
        android.graphics.Canvas $r2;
        android.graphics.RectF $r3;
        float $f0, $f1, $f2, $f3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r1 != null goto label1;

        $r1 = new android.graphics.Paint;

        specialinvoke $r1.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r1;

     label1:
        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r1.<android.graphics.Paint: void setStrokeWidth(float)>(0.0F);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r3 = new android.graphics.RectF;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $i0 = $i0 + $i2;

        $f2 = (float) $i0;

        $i0 = $i1 + $i3;

        $f3 = (float) $i0;

        specialinvoke $r3.<android.graphics.RectF: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        $i0 = $i5 + $i4;

        $i0 = 360 - $i0;

        $f0 = (float) $i0;

        $f1 = (float) $i5;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>($r3, $f0, $f1, 1, $r1);

        return;
    }

    public void drawBitmap(android.graphics.Bitmap, float, float, android.graphics.Paint)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        android.graphics.Bitmap $r1;
        float $f0, $f1;
        android.graphics.Paint $r2;
        android.graphics.Canvas $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: android.graphics.Bitmap;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $r2 := @parameter3: android.graphics.Paint;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        virtualinvoke $r3.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r1, $f0, $f1, null);

        return;
    }

    public void drawBytes(byte[], int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int)>($r1, $i0, $i1);

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void drawString(java.lang.String,int,int)>($r2, $i2, $i3);

        return;
    }

    public void drawChars(char[], int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        char[] $r1;
        int $i0, $i1, $i2, $i3;
        android.graphics.Canvas $r2;
        float $f0, $f1;
        android.graphics.Paint $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $f0 = (float) $i2;

        $f1 = (float) $i3;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>($r1, $i0, $i1, $f0, $f1, $r3);

        return;
    }

    public void drawGlyphVector(java.awt.font.GlyphVector, float, float)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        float $f0, $f1;
        int $i0;
        android.graphics.Path $r1;
        char[] $r2;
        java.awt.font.GlyphVector $r3;
        org.apache.harmony.awt.gl.font.AndroidGlyphVector $r4;
        android.graphics.Paint $r5;
        android.graphics.Canvas $r6;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r3 := @parameter0: java.awt.font.GlyphVector;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $r1 = new android.graphics.Path;

        specialinvoke $r1.<android.graphics.Path: void <init>()>();

        $r4 = (org.apache.harmony.awt.gl.font.AndroidGlyphVector) $r3;

        $r2 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.AndroidGlyphVector: char[] getGlyphs()>();

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $i0 = lengthof $r2;

        virtualinvoke $r5.<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>($r2, 0, $i0, $f0, $f1, $r1);

        $r6 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r6.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r1, $r5);

        return;
    }

    public void drawImage(java.awt.image.BufferedImage, java.awt.image.BufferedImageOp, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.image.BufferedImageOp $r1;
        int $i0, $i1, $i2, $i3;
        java.awt.image.BufferedImage $r2;
        boolean $z0;
        java.awt.image.AffineTransformOp $r3;
        java.awt.geom.AffineTransform $r4, $r8;
        org.apache.harmony.awt.gl.Surface $r5, $r7;
        com.android.internal.awt.AndroidJavaBlitter $r6;
        java.lang.Object $r9;
        java.awt.Composite $r10;
        org.apache.harmony.awt.gl.MultiRectArea $r11;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r2 := @parameter0: java.awt.image.BufferedImage;

        $r1 := @parameter1: java.awt.image.BufferedImageOp;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        if $r2 != null goto label1;

        return;

     label1:
        if $r1 != null goto label2;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r2, $i0, $i1, null);

        return;

     label2:
        $z0 = $r1 instanceof java.awt.image.AffineTransformOp;

        if $z0 == 0 goto label3;

        $r3 = (java.awt.image.AffineTransformOp) $r1;

        $r4 = virtualinvoke $r3.<java.awt.image.AffineTransformOp: java.awt.geom.AffineTransform getTransform()>();

        $r5 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r2);

        $i2 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i3 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r6 = $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter>;

        $r7 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r8 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform>;

        $r9 = virtualinvoke $r8.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r8 = (java.awt.geom.AffineTransform) $r9;

        $r10 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite>;

        $r11 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r6.<com.android.internal.awt.AndroidJavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r5, $i0, $i1, $r7, $i2, $i3, $r8, $r4, $r10, null, $r11);

        return;

     label3:
        $r2 = interfaceinvoke $r1.<java.awt.image.BufferedImageOp: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>($r2, null);

        $r5 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r2);

        $i2 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i3 = virtualinvoke $r5.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r6 = $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter>;

        $r7 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r4 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform>;

        $r9 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r4 = (java.awt.geom.AffineTransform) $r9;

        $r10 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite>;

        $r11 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r6.<com.android.internal.awt.AndroidJavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r5, $i0, $i1, $r7, $i2, $i3, $r4, $r10, null, $r11);

        return;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.awt.Color $r2;
        java.awt.image.ImageObserver $r3;
        boolean $z0, $z1;
        org.apache.harmony.awt.gl.image.OffscreenImage $r4;
        org.apache.harmony.awt.gl.Surface $r6, $r8;
        com.android.internal.awt.AndroidJavaBlitter $r7;
        java.awt.geom.AffineTransform $r9, $r13;
        java.lang.Object $r10;
        java.awt.Composite $r11;
        org.apache.harmony.awt.gl.MultiRectArea $r12;
        float $f0, $f1;
        double $d0, $d1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 := @parameter7: int;

        $i7 := @parameter8: int;

        $r2 := @parameter9: java.awt.Color;

        $r3 := @parameter10: java.awt.image.ImageObserver;

        if $r1 != null goto label01;

        return 1;

     label01:
        if $i0 == $i2 goto label02;

        if $i1 == $i3 goto label02;

        if $i4 == $i6 goto label02;

        if $i5 != $i7 goto label03;

     label02:
        return 1;

     label03:
        $z0 = 0;

        $z1 = $r1 instanceof org.apache.harmony.awt.gl.image.OffscreenImage;

        if $z1 == 0 goto label10;

        $r4 = (org.apache.harmony.awt.gl.image.OffscreenImage) $r1;

        $i8 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i8 = $i8 & 64;

        if $i8 == 0 goto label04;

        return 0;

     label04:
        $z1 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: boolean prepareImage(java.awt.image.ImageObserver)>($r3);

        $i8 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i8 = $i8 & 8;

        if $i8 == 0 goto label09;

        $z0 = 1;

     label05:
        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: org.apache.harmony.awt.gl.ImageSurface getImageSurface()>();

     label06:
        if $z1 != 0 goto label07;

        if $z0 == 0 goto label08;

     label07:
        $i2 = $i2 - $i0;

        $i3 = $i3 - $i1;

        $i6 = $i6 - $i4;

        $i7 = $i7 - $i5;

        if $i6 != $i2 goto label11;

        if $i7 != $i3 goto label11;

        $r7 = $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter>;

        $r8 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r9 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r9 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r7.<com.android.internal.awt.AndroidJavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i4, $i5, $r6, $i0, $i1, $r8, $i6, $i7, $r9, $r11, $r2, $r12);

     label08:
        return $z1;

     label09:
        $z0 = 0;

        goto label05;

     label10:
        $z1 = 1;

        $r6 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r1);

        goto label06;

     label11:
        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();

        $f0 = (float) $i2;

        $f1 = (float) $i6;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $f0 = (float) $i3;

        $f1 = (float) $i7;

        $f0 = $f0 / $f1;

        $d1 = (double) $f0;

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void setToScale(double,double)>($d0, $d1);

        $r7 = $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter>;

        $r8 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r13 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r13 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r7.<com.android.internal.awt.AndroidJavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>($i4, $i5, $r6, $i0, $i1, $r8, $i6, $i7, $r13, $r9, $r11, $r2, $r12);

        goto label08;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, int, int, int, int, java.awt.image.ImageObserver)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.awt.image.ImageObserver $r2;
        boolean $z0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $i4 := @parameter5: int;

        $i5 := @parameter6: int;

        $i6 := @parameter7: int;

        $i7 := @parameter8: int;

        $r2 := @parameter9: java.awt.image.ImageObserver;

        $z0 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: boolean drawImage(java.awt.Image,int,int,int,int,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)>($r1, $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, null, $r2);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.awt.Color $r2;
        java.awt.image.ImageObserver $r3;
        boolean $z0, $z1;
        org.apache.harmony.awt.gl.image.OffscreenImage $r4;
        org.apache.harmony.awt.gl.Surface $r6, $r8;
        com.android.internal.awt.AndroidJavaBlitter $r7;
        java.awt.geom.AffineTransform $r9, $r13;
        java.lang.Object $r10;
        java.awt.Composite $r11;
        org.apache.harmony.awt.gl.MultiRectArea $r12;
        float $f0, $f1;
        double $d0, $d1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 := @parameter5: java.awt.Color;

        $r3 := @parameter6: java.awt.image.ImageObserver;

        if $r1 != null goto label01;

        return 1;

     label01:
        if $i2 == 0 goto label02;

        if $i3 != 0 goto label03;

     label02:
        return 1;

     label03:
        $z0 = 0;

        $z1 = $r1 instanceof org.apache.harmony.awt.gl.image.OffscreenImage;

        if $z1 == 0 goto label10;

        $r4 = (org.apache.harmony.awt.gl.image.OffscreenImage) $r1;

        $i4 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i4 = $i4 & 64;

        if $i4 == 0 goto label04;

        return 0;

     label04:
        $z1 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: boolean prepareImage(java.awt.image.ImageObserver)>($r3);

        $i4 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i4 = $i4 & 8;

        if $i4 == 0 goto label09;

        $z0 = 1;

     label05:
        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: org.apache.harmony.awt.gl.ImageSurface getImageSurface()>();

     label06:
        if $z1 != 0 goto label07;

        if $z0 == 0 goto label08;

     label07:
        $i4 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i5 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        if $i4 != $i2 goto label11;

        if $i5 != $i3 goto label11;

        $r7 = $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter>;

        $r8 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r9 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r9 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r7.<com.android.internal.awt.AndroidJavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r6, $i0, $i1, $r8, $i4, $i5, $r9, $r11, $r2, $r12);

     label08:
        return $z1;

     label09:
        $z0 = 0;

        goto label05;

     label10:
        $z1 = 1;

        $r6 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r1);

        goto label06;

     label11:
        $r9 = new java.awt.geom.AffineTransform;

        specialinvoke $r9.<java.awt.geom.AffineTransform: void <init>()>();

        $f0 = (float) $i2;

        $f1 = (float) $i4;

        $f0 = $f0 / $f1;

        $d0 = (double) $f0;

        $f0 = (float) $i3;

        $f1 = (float) $i5;

        $f0 = $f0 / $f1;

        $d1 = (double) $f0;

        virtualinvoke $r9.<java.awt.geom.AffineTransform: void setToScale(double,double)>($d0, $d1);

        $r7 = $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter>;

        $r8 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r13 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r13.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r13 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r7.<com.android.internal.awt.AndroidJavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r6, $i0, $i1, $r8, $i4, $i5, $r13, $r9, $r11, $r2, $r12);

        goto label08;
    }

    public boolean drawImage(java.awt.Image, int, int, int, int, java.awt.image.ImageObserver)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3;
        java.awt.image.ImageObserver $r2;
        boolean $z0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r2 := @parameter5: java.awt.image.ImageObserver;

        $z0 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: boolean drawImage(java.awt.Image,int,int,int,int,java.awt.Color,java.awt.image.ImageObserver)>($r1, $i0, $i1, $i2, $i3, null, $r2);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.Color, java.awt.image.ImageObserver)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1, $i2, $i3;
        java.awt.Color $r2;
        java.awt.image.ImageObserver $r3;
        boolean $z0, $z1;
        org.apache.harmony.awt.gl.image.OffscreenImage $r4;
        org.apache.harmony.awt.gl.Surface $r6, $r8;
        com.android.internal.awt.AndroidJavaBlitter $r7;
        java.awt.geom.AffineTransform $r9;
        java.lang.Object $r10;
        java.awt.Composite $r11;
        org.apache.harmony.awt.gl.MultiRectArea $r12;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.awt.Color;

        $r3 := @parameter4: java.awt.image.ImageObserver;

        if $r1 != null goto label1;

        return 1;

     label1:
        $z0 = 0;

        $z1 = $r1 instanceof org.apache.harmony.awt.gl.image.OffscreenImage;

        if $z1 == 0 goto label8;

        $r4 = (org.apache.harmony.awt.gl.image.OffscreenImage) $r1;

        $i2 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i2 = $i2 & 64;

        if $i2 == 0 goto label2;

        return 0;

     label2:
        $z1 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: boolean prepareImage(java.awt.image.ImageObserver)>($r3);

        $i2 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i2 = $i2 & 8;

        if $i2 == 0 goto label7;

        $z0 = 1;

     label3:
        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: org.apache.harmony.awt.gl.ImageSurface getImageSurface()>();

     label4:
        if $z1 != 0 goto label5;

        if $z0 == 0 goto label6;

     label5:
        $i2 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i3 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r7 = $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter>;

        $r8 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r9 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform>;

        $r10 = virtualinvoke $r9.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r9 = (java.awt.geom.AffineTransform) $r10;

        $r11 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r7.<com.android.internal.awt.AndroidJavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r6, $i0, $i1, $r8, $i2, $i3, $r9, $r11, $r2, $r12);

     label6:
        return $z1;

     label7:
        $z0 = 0;

        goto label3;

     label8:
        $z1 = 1;

        $r6 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r1);

        goto label4;
    }

    public boolean drawImage(java.awt.Image, int, int, java.awt.image.ImageObserver)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Image $r1;
        int $i0, $i1;
        java.awt.image.ImageObserver $r2;
        boolean $z0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.awt.image.ImageObserver;

        $z0 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.Color,java.awt.image.ImageObserver)>($r1, $i0, $i1, null, $r2);

        return $z0;
    }

    public boolean drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Image $r1;
        java.awt.geom.AffineTransform $r2, $r7;
        java.awt.image.ImageObserver $r3;
        boolean $z0, $z1;
        org.apache.harmony.awt.gl.image.OffscreenImage $r4;
        int $i0, $i1;
        org.apache.harmony.awt.gl.Surface $r6, $r10;
        java.lang.Object $r8;
        com.android.internal.awt.AndroidJavaBlitter $r9;
        java.awt.Composite $r11;
        org.apache.harmony.awt.gl.MultiRectArea $r12;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Image;

        $r2 := @parameter1: java.awt.geom.AffineTransform;

        $r3 := @parameter2: java.awt.image.ImageObserver;

        if $r1 != null goto label01;

        return 1;

     label01:
        if $r2 == null goto label02;

        $z0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: boolean isIdentity()>();

        if $z0 == 0 goto label03;

     label02:
        $z0 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r1, 0, 0, $r3);

        return $z0;

     label03:
        $z0 = 0;

        $z1 = $r1 instanceof org.apache.harmony.awt.gl.image.OffscreenImage;

        if $z1 == 0 goto label10;

        $r4 = (org.apache.harmony.awt.gl.image.OffscreenImage) $r1;

        $i0 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i0 = $i0 & 64;

        if $i0 == 0 goto label04;

        return 0;

     label04:
        $z1 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: boolean prepareImage(java.awt.image.ImageObserver)>($r3);

        $i0 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: int getState()>();

        $i0 = $i0 & 8;

        if $i0 == 0 goto label09;

        $z0 = 1;

     label05:
        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.image.OffscreenImage: org.apache.harmony.awt.gl.ImageSurface getImageSurface()>();

     label06:
        if $z1 != 0 goto label07;

        if $z0 == 0 goto label08;

     label07:
        $i0 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getWidth()>();

        $i1 = virtualinvoke $r6.<org.apache.harmony.awt.gl.Surface: int getHeight()>();

        $r7 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform transform>;

        $r8 = virtualinvoke $r7.<java.awt.geom.AffineTransform: java.lang.Object clone()>();

        $r7 = (java.awt.geom.AffineTransform) $r8;

        virtualinvoke $r7.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r2);

        $r9 = $r0.<com.android.internal.awt.AndroidGraphics2D: com.android.internal.awt.AndroidJavaBlitter blitter>;

        $r10 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.Surface dstSurf>;

        $r11 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Composite composite>;

        $r12 = $r0.<com.android.internal.awt.AndroidGraphics2D: org.apache.harmony.awt.gl.MultiRectArea clip>;

        virtualinvoke $r9.<com.android.internal.awt.AndroidJavaBlitter: void blit(int,int,org.apache.harmony.awt.gl.Surface,int,int,org.apache.harmony.awt.gl.Surface,int,int,java.awt.geom.AffineTransform,java.awt.Composite,java.awt.Color,org.apache.harmony.awt.gl.MultiRectArea)>(0, 0, $r6, 0, 0, $r10, $i0, $i1, $r7, $r11, null, $r12);

     label08:
        return $z1;

     label09:
        $z0 = 0;

        goto label05;

     label10:
        $z1 = 1;

        $r6 = staticinvoke <org.apache.harmony.awt.gl.Surface: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r1);

        goto label06;
    }

    public void drawLine(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r1;
        android.graphics.Canvas $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r1 != null goto label1;

        $r1 = new android.graphics.Paint;

        specialinvoke $r1.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r1;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $f2 = (float) $i2;

        $f3 = (float) $i3;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r1);

        return;
    }

    public void drawOval(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r1;
        android.graphics.Paint$Style $r2;
        android.graphics.Canvas $r3;
        android.graphics.RectF $r4;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r1 != null goto label1;

        $r1 = new android.graphics.Paint;

        specialinvoke $r1.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r1;

     label1:
        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r2 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r1.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r2);

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r4 = new android.graphics.RectF;

        $f1 = (float) $i0;

        $f0 = (float) $i1;

        $i0 = $i0 + $i2;

        $f2 = (float) $i0;

        $i0 = $i1 + $i3;

        $f3 = (float) $i0;

        specialinvoke $r4.<android.graphics.RectF: void <init>(float,float,float,float)>($f1, $f0, $f2, $f3);

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r3.<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>($r4, $r1);

        return;
    }

    public void drawPolygon(java.awt.Polygon)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Polygon $r1;
        int[] $r2, $r3;
        int $i0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Polygon;

        $r2 = $r1.<java.awt.Polygon: int[] xpoints>;

        $r3 = $r1.<java.awt.Polygon: int[] ypoints>;

        $i0 = $r1.<java.awt.Polygon: int npoints>;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void drawPolygon(int[],int[],int)>($r2, $r3, $i0);

        return;
    }

    public void drawPolygon(int[], int[], int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        android.graphics.Paint $r3;
        android.graphics.Canvas $r4;
        float $f0, $f1, $f2, $f3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r3 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r3;

     label1:
        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $i1 = $i0 - 1;

        $i1 = $r1[$i1];

        $f0 = (float) $i1;

        $i1 = $i0 - 1;

        $i1 = $r2[$i1];

        $f1 = (float) $i1;

        $i1 = $r1[0];

        $f2 = (float) $i1;

        $i1 = $r2[0];

        $f3 = (float) $i1;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r4.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r3);

        $i1 = 0;

     label2:
        $i2 = $i0 - 1;

        if $i1 >= $i2 goto label3;

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $i2 = $r1[$i1];

        $f0 = (float) $i2;

        $i2 = $r2[$i1];

        $f1 = (float) $i2;

        $i2 = $i1 + 1;

        $i2 = $r1[$i2];

        $f2 = (float) $i2;

        $i2 = $i1 + 1;

        $i2 = $r2[$i2];

        $f3 = (float) $i2;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r4.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r3);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void drawPolyline(int[], int[], int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $i2 = 0;

     label1:
        $i1 = $i0 - 1;

        if $i2 >= $i1 goto label2;

        $i3 = $r1[$i2];

        $i1 = $r2[$i2];

        $i4 = $i2 + 1;

        $i4 = $r1[$i4];

        $i5 = $i2 + 1;

        $i5 = $r2[$i5];

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void drawLine(int,int,int,int)>($i3, $i1, $i4, $i5);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void drawRect(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r1, $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r1 = newarray (int)[4];

        $r1[0] = $i0;

        $r1[1] = $i0;

        $i4 = $i0 + $i2;

        $r1[2] = $i4;

        $i0 = $i0 + $i2;

        $r1[3] = $i0;

        $r2 = newarray (int)[4];

        $r2[0] = $i1;

        $i0 = $i1 + $i3;

        $r2[1] = $i0;

        $i0 = $i1 + $i3;

        $r2[2] = $i0;

        $r2[3] = $i1;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void drawPolygon(int[],int[],int)>($r1, $r2, 4);

        return;
    }

    public void drawRenderableImage(java.awt.image.renderable.RenderableImage, java.awt.geom.AffineTransform)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.image.renderable.RenderableImage $r1;
        java.awt.geom.AffineTransform $r2;
        java.lang.RuntimeException $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.image.renderable.RenderableImage;

        $r2 := @parameter1: java.awt.geom.AffineTransform;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented!");

        throw $r3;
    }

    public void drawRenderedImage(java.awt.image.RenderedImage, java.awt.geom.AffineTransform)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.image.RenderedImage $r1;
        java.awt.geom.AffineTransform $r2;
        java.lang.RuntimeException $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.image.RenderedImage;

        $r2 := @parameter1: java.awt.geom.AffineTransform;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented!");

        throw $r3;
    }

    public void drawRoundRect(int, int, int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.RectF $r1;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r2;
        android.graphics.Canvas $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r1 = new android.graphics.RectF;

        $f1 = (float) $i0;

        $f2 = (float) $i1;

        $f3 = (float) $i2;

        $f0 = (float) $i3;

        specialinvoke $r1.<android.graphics.RectF: void <init>(float,float,float,float)>($f1, $f2, $f3, $f0);

        $f0 = (float) $i4;

        $f1 = (float) $i5;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r3.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r1, $f0, $f1, $r2);

        return;
    }

    public void drawString(java.lang.String, float, float)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.lang.String $r1;
        float $f0, $f1;
        android.graphics.Path $r2;
        android.graphics.Paint $r3;
        android.graphics.Paint$Style $r4, $r5;
        int $i0;
        android.graphics.Canvas $r6;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r3 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r3;

     label1:
        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r4 = virtualinvoke $r3.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r5 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r5);

        $r2 = new android.graphics.Path;

        specialinvoke $r2.<android.graphics.Path: void <init>()>();

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        virtualinvoke $r3.<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>($r1, 0, $i0, $f0, $f1, $r2);

        $r6 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r6.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r2, $r3);

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        return;
    }

    public void drawString(java.lang.String, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        float $f0, $f1;
        android.graphics.Paint $r2;
        android.graphics.Paint$Style $r3;
        android.graphics.Canvas $r4;
        char[] $r5, $r6;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r3 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeWidth(float)>(0.0F);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r5 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $r6 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $i2 = lengthof $r6;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r4.<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>($r5, 0, $i2, $f0, $f1, $r2);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        return;
    }

    public void drawString(java.text.AttributedCharacterIterator, float, float)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.text.AttributedCharacterIterator $r1;
        float $f0, $f1;
        java.lang.RuntimeException $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.text.AttributedCharacterIterator;

        $f0 := @parameter1: float;

        $f1 := @parameter2: float;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("AttributedCharacterIterator not supported!");

        throw $r2;
    }

    public void drawString(java.text.AttributedCharacterIterator, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.text.AttributedCharacterIterator $r1;
        int $i0, $i1;
        java.lang.RuntimeException $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.text.AttributedCharacterIterator;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("AttributedCharacterIterator not supported!");

        throw $r2;
    }

    public void fill(java.awt.Shape)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Shape $r1;
        android.graphics.Paint $r2;
        android.graphics.Paint$Style $r3, $r4;
        android.graphics.Canvas $r5;
        android.graphics.Path $r6;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Shape;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r3 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r6 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: android.graphics.Path getPath(java.awt.Shape)>($r1);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r5.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r6, $r2);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        return;
    }

    public void fill3DRect(int, int, int, int, boolean)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        java.awt.Color $r1, $r2, $r3, $r4;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i4 := @parameter2: int;

        $i5 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $r1 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Color getColor()>();

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke $r1.<java.awt.Color: java.awt.Color brighter()>();

        $r4 = virtualinvoke $r1.<java.awt.Color: java.awt.Color darker()>();

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void setColor(java.awt.Color)>($r1);

     label1:
        $i4 = $i4 + -1;

        $i5 = $i5 + -1;

        $i6 = $i0 + 1;

        $i7 = $i1 + 1;

        $i2 = $i4 - 1;

        $i3 = $i5 - 1;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i6, $i7, $i2, $i3);

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void setColor(java.awt.Color)>($r2);

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i0, $i1, $i4, 1);

        $i2 = $i1 + 1;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i0, $i2, 1, $i5);

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void setColor(java.awt.Color)>($r4);

        $i2 = $i0 + $i4;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i2, $i1, 1, $i5);

        $i0 = $i0 + 1;

        $i1 = $i1 + $i5;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillRect(int,int,int,int)>($i0, $i1, $i4, 1);

        return;

     label2:
        $r3 = virtualinvoke $r1.<java.awt.Color: java.awt.Color darker()>();

        $r2 = $r3;

        $r4 = virtualinvoke $r1.<java.awt.Color: java.awt.Color brighter()>();

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void setColor(java.awt.Color)>($r3);

        goto label1;
    }

    public void fillArc(int, int, int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Paint$Style $r1, $r3;
        android.graphics.Paint $r2;
        android.graphics.Canvas $r4;
        android.graphics.RectF $r5;
        float $f0, $f1, $f2, $f3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r1 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL_AND_STROKE>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r5 = new android.graphics.RectF;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $i0 = $i0 + $i2;

        $f2 = (float) $i0;

        $i0 = $i1 + $i3;

        $f3 = (float) $i0;

        specialinvoke $r5.<android.graphics.RectF: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        $i0 = $i4 + $i5;

        $i0 = 360 - $i0;

        $f0 = (float) $i0;

        $f1 = (float) $i5;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r4.<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>($r5, $f0, $f1, 1, $r2);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r1);

        return;
    }

    public void fillOval(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint$Style $r1, $r3;
        android.graphics.Paint $r2;
        android.graphics.Canvas $r4;
        android.graphics.RectF $r5;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r1 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r5 = new android.graphics.RectF;

        $f1 = (float) $i0;

        $f0 = (float) $i1;

        $i0 = $i0 + $i2;

        $f2 = (float) $i0;

        $i0 = $i1 + $i3;

        $f3 = (float) $i0;

        specialinvoke $r5.<android.graphics.RectF: void <init>(float,float,float,float)>($f1, $f0, $f2, $f3);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r4.<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>($r5, $r2);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r1);

        return;
    }

    public void fillPolygon(java.awt.Polygon)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Polygon $r1;
        int[] $r2, $r3;
        int $i0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Polygon;

        $r2 = $r1.<java.awt.Polygon: int[] xpoints>;

        $r3 = $r1.<java.awt.Polygon: int[] ypoints>;

        $i0 = $r1.<java.awt.Polygon: int npoints>;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void fillPolygon(int[],int[],int)>($r2, $r3, $i0);

        return;
    }

    public void fillPolygon(int[], int[], int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int[] $r1, $r2;
        int $i0, $i1;
        java.awt.geom.GeneralPath $r3;
        android.graphics.Paint $r4;
        android.graphics.Paint$Style $r5, $r7;
        android.graphics.Canvas $r6;
        float $f0, $f1;
        android.graphics.Path $r8;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: int[];

        $i0 := @parameter2: int;

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r4 != null goto label1;

        $r4 = new android.graphics.Paint;

        specialinvoke $r4.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r4;

     label1:
        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r5 = virtualinvoke $r4.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r6 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        virtualinvoke $r6.<android.graphics.Canvas: int save(int)>(2);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r7 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r4.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r7);

        $r3 = new java.awt.geom.GeneralPath;

        specialinvoke $r3.<java.awt.geom.GeneralPath: void <init>(int,int)>(0, $i0);

        $i0 = $r1[0];

        $f0 = (float) $i0;

        $i0 = $r2[0];

        $f1 = (float) $i0;

        virtualinvoke $r3.<java.awt.geom.GeneralPath: void moveTo(float,float)>($f0, $f1);

        $i0 = 1;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $i1 = $r1[$i0];

        $f0 = (float) $i1;

        $i1 = $r2[$i0];

        $f1 = (float) $i1;

        virtualinvoke $r3.<java.awt.geom.GeneralPath: void lineTo(float,float)>($f0, $f1);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        virtualinvoke $r3.<java.awt.geom.GeneralPath: void closePath()>();

        $r8 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: android.graphics.Path getPath(java.awt.Shape)>($r3);

        $r6 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        virtualinvoke $r6.<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>($r8);

        $r6 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r6.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>($r8, $r4);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r4.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r5);

        $r6 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        virtualinvoke $r6.<android.graphics.Canvas: void restore()>();

        return;
    }

    public void fillRect(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.Paint$Style $r1, $r3;
        android.graphics.Paint $r2;
        android.graphics.Canvas $r4;
        android.graphics.Rect $r5;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r1 = virtualinvoke $r2.<android.graphics.Paint: android.graphics.Paint$Style getStyle()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r5 = new android.graphics.Rect;

        $i2 = $i0 + $i2;

        $i3 = $i1 + $i3;

        specialinvoke $r5.<android.graphics.Rect: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r4.<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>($r5, $r2);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r1);

        return;
    }

    public void fillRoundRect(int, int, int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Paint $r1;
        android.graphics.Paint$Style $r2;
        android.graphics.Canvas $r3;
        android.graphics.RectF $r4;
        float $f0, $f1, $f2, $f3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        $i5 := @parameter5: int;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r1 != null goto label1;

        $r1 = new android.graphics.Paint;

        specialinvoke $r1.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r1;

     label1:
        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r2 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke $r1.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r2);

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r4 = new android.graphics.RectF;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $i0 = $i0 + $i2;

        $f2 = (float) $i0;

        $i0 = $i1 + $i3;

        $f3 = (float) $i0;

        specialinvoke $r4.<android.graphics.RectF: void <init>(float,float,float,float)>($f0, $f1, $f2, $f3);

        $f0 = (float) $i4;

        $f1 = (float) $i5;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r3.<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>($r4, $f0, $f1, $r1);

        return;
    }

    public java.awt.Color getBackground()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Color r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        r1 = <com.android.internal.awt.AndroidGraphics2D: java.awt.Color mBc>;

        return r1;
    }

    public java.awt.Shape getClip()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.geom.Area r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        r1 = $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.Area mCurrClip>;

        return r1;
    }

    public java.awt.Rectangle getClipBounds()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        android.graphics.Canvas $r1;
        android.graphics.Rect $r2;
        java.awt.Rectangle $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r2 = virtualinvoke $r1.<android.graphics.Canvas: android.graphics.Rect getClipBounds()>();

        $r3 = new java.awt.Rectangle;

        $i0 = $r2.<android.graphics.Rect: int left>;

        $i1 = $r2.<android.graphics.Rect: int top>;

        $i2 = virtualinvoke $r2.<android.graphics.Rect: int width()>();

        $i3 = virtualinvoke $r2.<android.graphics.Rect: int height()>();

        specialinvoke $r3.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r3;
    }

    public java.awt.Rectangle getClipBounds(java.awt.Rectangle)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Rectangle $r1, $r3;
        java.awt.Shape $r2;
        int $i0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Rectangle;

        $r2 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Shape getClip()>();

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i0 = $r3.<java.awt.Rectangle: int x>;

        $r1.<java.awt.Rectangle: int x> = $i0;

        $i0 = $r3.<java.awt.Rectangle: int y>;

        $r1.<java.awt.Rectangle: int y> = $i0;

        $i0 = $r3.<java.awt.Rectangle: int width>;

        $r1.<java.awt.Rectangle: int width> = $i0;

        $i0 = $r3.<java.awt.Rectangle: int height>;

        $r1.<java.awt.Rectangle: int height> = $i0;

        return $r1;

     label1:
        return $r1;
    }

    public java.awt.Color getColor()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0;
        android.graphics.Paint $r1;
        java.awt.Color $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r1 == null goto label1;

        $r2 = new java.awt.Color;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $i0 = virtualinvoke $r1.<android.graphics.Paint: int getColor()>();

        specialinvoke $r2.<java.awt.Color: void <init>(int)>($i0);

        return $r2;

     label1:
        return null;
    }

    public java.awt.Composite getComposite()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.lang.RuntimeException $r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Composite not implemented!");

        throw $r1;
    }

    public java.awt.GraphicsConfiguration getDeviceConfiguration()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        com.android.internal.awt.AndroidGraphicsConfiguration $r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = new com.android.internal.awt.AndroidGraphicsConfiguration;

        specialinvoke $r1.<com.android.internal.awt.AndroidGraphicsConfiguration: void <init>()>();

        return $r1;
    }

    public java.awt.Font getFont()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Font r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        r1 = <com.android.internal.awt.AndroidGraphics2D: java.awt.Font mFnt>;

        return r1;
    }

    public java.awt.FontMetrics getFontMetrics(java.awt.Font)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Font $r1;
        org.apache.harmony.awt.gl.font.FontMetricsImpl $r2;
        java.awt.FontMetrics r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Font;

        $r2 = new org.apache.harmony.awt.gl.font.FontMetricsImpl;

        specialinvoke $r2.<org.apache.harmony.awt.gl.font.FontMetricsImpl: void <init>(java.awt.Font)>($r1);

        <com.android.internal.awt.AndroidGraphics2D: java.awt.FontMetrics mFm> = $r2;

        r3 = <com.android.internal.awt.AndroidGraphics2D: java.awt.FontMetrics mFm>;

        return r3;
    }

    public java.awt.font.FontRenderContext getFontRenderContext()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.font.FontRenderContext $r1;
        java.awt.geom.AffineTransform $r2;
        android.graphics.Paint $r3;
        boolean $z0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = new java.awt.font.FontRenderContext;

        $r2 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $z0 = virtualinvoke $r3.<android.graphics.Paint: boolean isAntiAlias()>();

        specialinvoke $r1.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>($r2, $z0, 1);

        return $r1;
    }

    public float[] getInverseMatrix()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.geom.AffineTransform $r1;
        float[] $r2;
        java.awt.geom.NoninvertibleTransformException $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = new java.awt.geom.AffineTransform;

        $r2 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: float[] getMatrix()>();

        $r2 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: float[] createAWTMatrix(float[])>($r2);

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float[])>($r2);

     label1:
        $r1 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>();

     label2:
        $r2 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: float[] createMatrix(java.awt.geom.AffineTransform)>($r1);

        return $r2;

     label3:
        $r3 := @caughtexception;

        goto label2;

        catch java.awt.geom.NoninvertibleTransformException from label1 to label2 with label3;
    }

    public float[] getMatrix()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        float[] $r1;
        android.graphics.Matrix $r2;
        android.graphics.Canvas $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = newarray (float)[9];

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r2 = virtualinvoke $r3.<android.graphics.Canvas: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r2.<android.graphics.Matrix: void getValues(float[])>($r1);

        return $r1;
    }

    public java.awt.Paint getPaint()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.lang.RuntimeException $r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("AWT Paint not implemented in Android!");

        throw $r1;
    }

    public java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.RenderingHints$Key $r1;
        java.lang.Object $r2;
        java.awt.RenderingHints $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.RenderingHints$Key;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r3 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        $r2 = virtualinvoke $r3.<java.awt.RenderingHints: java.lang.Object get(java.lang.Object)>($r1);

        return $r2;
    }

    public java.awt.RenderingHints getRenderingHints()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.RenderingHints r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        r1 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        return r1;
    }

    public java.awt.Stroke getStroke()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        android.graphics.Paint $r1;
        java.awt.BasicStroke $r2;
        float $f0;
        android.graphics.Paint$Cap $r3;
        int $i0, $i1;
        android.graphics.Paint$Join $r4;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r1 == null goto label1;

        $r2 = new java.awt.BasicStroke;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $f0 = virtualinvoke $r1.<android.graphics.Paint: float getStrokeWidth()>();

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r3 = virtualinvoke $r1.<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>();

        $i0 = virtualinvoke $r3.<java.lang.Enum: int ordinal()>();

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r4 = virtualinvoke $r1.<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>();

        $i1 = virtualinvoke $r4.<java.lang.Enum: int ordinal()>();

        specialinvoke $r2.<java.awt.BasicStroke: void <init>(float,int,int)>($f0, $i0, $i1);

        return $r2;

     label1:
        return null;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.geom.AffineTransform $r1;
        float[] $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = new java.awt.geom.AffineTransform;

        $r2 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: float[] getMatrix()>();

        $r2 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: float[] createAWTMatrix(float[])>($r2);

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float[])>($r2);

        return $r1;
    }

    public boolean hit(java.awt.Rectangle, java.awt.Shape, boolean)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Rectangle $r1;
        java.awt.Shape $r2;
        boolean $z0;
        double $d0, $d1, $d2, $d3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Rectangle;

        $r2 := @parameter1: java.awt.Shape;

        $z0 := @parameter2: boolean;

        $d0 = virtualinvoke $r1.<java.awt.Rectangle: double getX()>();

        $d1 = virtualinvoke $r1.<java.awt.Rectangle: double getY()>();

        $d2 = virtualinvoke $r1.<java.awt.Rectangle: double getWidth()>();

        $d3 = virtualinvoke $r1.<java.awt.Rectangle: double getHeight()>();

        $z0 = interfaceinvoke $r2.<java.awt.Shape: boolean intersects(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $z0;
    }

    public boolean hitClip(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3;
        java.awt.Rectangle $r1, $r2;
        boolean $z0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r2 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Rectangle getClipBounds()>();

        $r1 = new java.awt.Rectangle;

        specialinvoke $r1.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        $z0 = virtualinvoke $r2.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r1);

        return $z0;
    }

    public void rotate(double)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        double $d0;
        float $f0;
        android.graphics.Matrix $r1;
        android.graphics.Canvas $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $d0 := @parameter0: double;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        $d0 = 6.283185307179586 - $d0;

        $f0 = (float) $d0;

        $f0 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: float getDegree(float)>($f0);

        virtualinvoke $r1.<android.graphics.Matrix: boolean preRotate(float)>($f0);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r2.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r1);

        return;
    }

    public void rotate(double, double, double)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        double $d0, $d1, $d2;
        float $f0, $f1, $f2;
        android.graphics.Matrix $r1;
        android.graphics.Canvas $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $d2 := @parameter2: double;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        $f0 = (float) $d0;

        $f2 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: float getDegree(float)>($f0);

        $f0 = (float) $d1;

        $f1 = (float) $d2;

        virtualinvoke $r1.<android.graphics.Matrix: boolean preRotate(float,float,float)>($f2, $f0, $f1);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r2.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r1);

        return;
    }

    public void scale(double, double)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        double $d0, $d1;
        float $f0, $f1;
        android.graphics.Matrix $r1;
        android.graphics.Canvas $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        $f1 = (float) $d0;

        $f0 = (float) $d1;

        virtualinvoke $r1.<android.graphics.Matrix: void setScale(float,float)>($f1, $f0);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r2.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r1);

        return;
    }

    public void setBackground(java.awt.Color)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Color $r1;
        android.graphics.Canvas $r2, $r4;
        android.graphics.Rect $r3;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Color;

        <com.android.internal.awt.AndroidGraphics2D: java.awt.Color mBc> = $r1;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r3 = new android.graphics.Rect;

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $i0 = virtualinvoke $r4.<android.graphics.Canvas: int getWidth()>();

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $i1 = virtualinvoke $r4.<android.graphics.Canvas: int getHeight()>();

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke $r2.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>($r3);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $i0 = virtualinvoke $r1.<java.awt.Color: int getAlpha()>();

        $i1 = virtualinvoke $r1.<java.awt.Color: int getRed()>();

        $i2 = virtualinvoke $r1.<java.awt.Color: int getGreen()>();

        $i3 = virtualinvoke $r1.<java.awt.Color: int getBlue()>();

        virtualinvoke $r2.<android.graphics.Canvas: void drawARGB(int,int,int,int)>($i0, $i1, $i2, $i3);

        return;
    }

    public void setCanvas(android.graphics.Canvas)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        android.graphics.Canvas $r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: android.graphics.Canvas;

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC> = $r1;

        return;
    }

    public void setClip(int, int, int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Region$Op $r1;
        int[] $r2;
        java.awt.Shape $r3;
        java.awt.geom.Area $r4;
        android.graphics.Canvas $r5;
        float $f0, $f1, $f2, $f3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $r2 = newarray (int)[12];

        $r2[0] = -1;

        $r2[1] = $i0;

        $r2[2] = $i1;

        $r2[3] = -2;

        $r2[4] = $i0;

        $i4 = $i1 + $i2;

        $r2[5] = $i4;

        $r2[6] = -2;

        $i4 = $i0 + $i3;

        $r2[7] = $i4;

        $i4 = $i1 + $i2;

        $r2[8] = $i4;

        $r2[9] = -2;

        $i4 = $i0 + $i3;

        $r2[10] = $i4;

        $r2[11] = $i1;

        $r4 = new java.awt.geom.Area;

        $r3 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.Shape createShape(int[])>($r2);

        specialinvoke $r4.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r3);

        $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.Area mCurrClip> = $r4;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $i0 = $i0 + $i2;

        $f2 = (float) $i0;

        $i0 = $i1 + $i3;

        $f3 = (float) $i0;

        $r1 = <android.graphics.Region$Op: android.graphics.Region$Op REPLACE>;

        virtualinvoke $r5.<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>($f0, $f1, $f2, $f3, $r1);

        return;
    }

    public void setClip(java.awt.Shape)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Shape $r1;
        android.graphics.Region$Op $r2;
        android.graphics.Path $r3;
        java.awt.geom.Area $r4;
        android.graphics.Canvas $r5;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Shape;

        $r4 = new java.awt.geom.Area;

        specialinvoke $r4.<java.awt.geom.Area: void <init>(java.awt.Shape)>($r1);

        $r0.<com.android.internal.awt.AndroidGraphics2D: java.awt.geom.Area mCurrClip> = $r4;

        $r5 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r3 = specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: android.graphics.Path getPath(java.awt.Shape)>($r1);

        $r2 = <android.graphics.Region$Op: android.graphics.Region$Op REPLACE>;

        virtualinvoke $r5.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>($r3, $r2);

        return;
    }

    public void setColor(java.awt.Color)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Color $r1;
        int $i0;
        android.graphics.Paint $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Color;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $i0 = virtualinvoke $r1.<java.awt.Color: int getRGB()>();

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        return;
    }

    public void setComposite(java.awt.Composite)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Composite $r1;
        java.lang.RuntimeException $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Composite;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Composite not implemented!");

        throw $r2;
    }

    public void setFont(java.awt.Font)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Font $r1;
        android.graphics.Paint $r2;
        int $i0;
        java.lang.String $r3, $r4;
        boolean $z0;
        android.graphics.Typeface $r5;
        float $f0;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Font;

        if $r1 != null goto label01;

        return;

     label01:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label02;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label02:
        <com.android.internal.awt.AndroidGraphics2D: java.awt.Font mFnt> = $r1;

        $i0 = virtualinvoke $r1.<java.awt.Font: int getStyle()>();

        $r3 = virtualinvoke $r1.<java.awt.Font: java.lang.String getName()>();

        $r4 = "";

        if $r3 == null goto label04;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Serif");

        if $z0 != 0 goto label03;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TimesRoman");

        if $z0 == 0 goto label07;

     label03:
        $r4 = "serif";

     label04:
        lookupswitch($i0)
        {
            case 0: goto label11;
            case 1: goto label12;
            case 2: goto label13;
            case 3: goto label14;
            default: goto label05;
        };

     label05:
        $r5 = <android.graphics.Typeface: android.graphics.Typeface DEFAULT>;

     label06:
        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $i0 = virtualinvoke $r1.<java.awt.Font: int getSize()>();

        $f0 = (float) $i0;

        virtualinvoke $r2.<android.graphics.Paint: void setTextSize(float)>($f0);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r2.<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>($r5);

        return;

     label07:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("SansSerif");

        if $z0 != 0 goto label08;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Helvetica");

        if $z0 == 0 goto label09;

     label08:
        $r4 = "sans-serif";

        goto label04;

     label09:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Monospaced");

        if $z0 != 0 goto label10;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Courier");

        if $z0 == 0 goto label04;

     label10:
        $r4 = "monospace";

        goto label04;

     label11:
        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>($r4, 0);

        goto label06;

     label12:
        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>($r4, 1);

        goto label06;

     label13:
        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>($r4, 2);

        goto label06;

     label14:
        $r5 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>($r4, 3);

        goto label06;
    }

    public void setPaint(java.awt.Paint)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Paint $r1;
        java.awt.Color $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Paint;

        $r2 = (java.awt.Color) $r1;

        virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void setColor(java.awt.Color)>($r2);

        return;
    }

    public void setPaintMode()
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        android.graphics.Paint $r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r1 != null goto label1;

        $r1 = new android.graphics.Paint;

        specialinvoke $r1.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r1;

     label1:
        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        virtualinvoke $r1.<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>(null);

        return;
    }

    public void setRenderingHint(java.awt.RenderingHints$Key, java.lang.Object)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.RenderingHints$Key $r1;
        java.lang.Object $r2;
        java.awt.RenderingHints $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.RenderingHints$Key;

        $r2 := @parameter1: java.lang.Object;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        if $r3 != null goto label2;

        $r3 = new java.awt.RenderingHints;

        specialinvoke $r3.<java.awt.RenderingHints: void <init>(java.awt.RenderingHints$Key,java.lang.Object)>($r1, $r2);

        <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh> = $r3;

     label1:
        specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void applyHints()>();

        return;

     label2:
        $r3 = <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh>;

        virtualinvoke $r3.<java.awt.RenderingHints: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        goto label1;
    }

    public void setRenderingHints(java.util.Map)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.util.Map $r1;
        java.awt.RenderingHints $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.util.Map;

        $r2 = (java.awt.RenderingHints) $r1;

        <com.android.internal.awt.AndroidGraphics2D: java.awt.RenderingHints mRh> = $r2;

        specialinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: void applyHints()>();

        return;
    }

    public void setSpaint(android.graphics.Paint)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        android.graphics.Paint $r1;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: android.graphics.Paint;

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r1;

        return;
    }

    public void setStroke(java.awt.Stroke)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Stroke $r1;
        android.graphics.Paint $r2;
        java.awt.BasicStroke $r3;
        android.graphics.Paint$Style $r4;
        float $f0;
        int $i0;
        android.graphics.Paint$Cap $r5;
        android.graphics.Paint$Join $r6;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Stroke;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r2 != null goto label1;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r2;

     label1:
        $r3 = (java.awt.BasicStroke) $r1;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $f0 = virtualinvoke $r3.<java.awt.BasicStroke: float getLineWidth()>();

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeWidth(float)>($f0);

        $i0 = virtualinvoke $r3.<java.awt.BasicStroke: int getEndCap()>();

        if $i0 != 0 goto label3;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r5 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap BUTT>;

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r5);

     label2:
        $i0 = virtualinvoke $r3.<java.awt.BasicStroke: int getLineJoin()>();

        if $i0 != 0 goto label5;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r6 = <android.graphics.Paint$Join: android.graphics.Paint$Join MITER>;

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>($r6);

        return;

     label3:
        if $i0 != 1 goto label4;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r5 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r5);

        goto label2;

     label4:
        if $i0 != 2 goto label2;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r5 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap SQUARE>;

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r5);

        goto label2;

     label5:
        if $i0 != 1 goto label6;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r6 = <android.graphics.Paint$Join: android.graphics.Paint$Join ROUND>;

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>($r6);

        return;

     label6:
        if $i0 != 2 goto label7;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r6 = <android.graphics.Paint$Join: android.graphics.Paint$Join BEVEL>;

        virtualinvoke $r2.<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>($r6);

        return;

     label7:
        return;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.geom.AffineTransform $r1;
        android.graphics.Matrix $r2;
        float[] $r3;
        android.graphics.Canvas $r4;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r2.<android.graphics.Matrix: void reset()>();

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        $r3 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: float[] createMatrix(java.awt.geom.AffineTransform)>($r1);

        virtualinvoke $r2.<android.graphics.Matrix: void setValues(float[])>($r3);

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        $r3 = virtualinvoke $r0.<com.android.internal.awt.AndroidGraphics2D: float[] getInverseMatrix()>();

        virtualinvoke $r2.<android.graphics.Matrix: void setValues(float[])>($r3);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        virtualinvoke $r4.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r2);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r4.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r2);

        return;
    }

    public void setXORMode(java.awt.Color)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.Color $r1;
        android.graphics.PixelXorXfermode $r2;
        int $i0;
        android.graphics.Paint $r3;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.Color;

        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        if $r3 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP> = $r3;

     label1:
        $r3 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Paint mP>;

        $r2 = new android.graphics.PixelXorXfermode;

        $i0 = virtualinvoke $r1.<java.awt.Color: int getRGB()>();

        specialinvoke $r2.<android.graphics.PixelXorXfermode: void <init>(int)>($i0);

        virtualinvoke $r3.<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>($r2);

        return;
    }

    public void shear(double, double)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        double $d0, $d1;
        float $f0, $f1;
        android.graphics.Matrix $r1;
        android.graphics.Canvas $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        $f1 = (float) $d0;

        $f0 = (float) $d1;

        virtualinvoke $r1.<android.graphics.Matrix: void setSkew(float,float)>($f1, $f0);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r2.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r1);

        return;
    }

    public void transform(java.awt.geom.AffineTransform)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        java.awt.geom.AffineTransform $r1;
        android.graphics.Matrix $r2;
        float[] $r3;
        android.graphics.Canvas $r4;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $r1 := @parameter0: java.awt.geom.AffineTransform;

        $r2 = new android.graphics.Matrix;

        specialinvoke $r2.<android.graphics.Matrix: void <init>()>();

        $r3 = staticinvoke <com.android.internal.awt.AndroidGraphics2D: float[] createMatrix(java.awt.geom.AffineTransform)>($r1);

        virtualinvoke $r2.<android.graphics.Matrix: void setValues(float[])>($r3);

        $r4 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        virtualinvoke $r4.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r2);

        return;
    }

    public void translate(double, double)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        double $d0, $d1;
        float $f0, $f1;
        android.graphics.Matrix $r1;
        android.graphics.Canvas $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $d0 := @parameter0: double;

        $d1 := @parameter1: double;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        $f1 = (float) $d0;

        $f0 = (float) $d1;

        virtualinvoke $r1.<android.graphics.Matrix: void setTranslate(float,float)>($f1, $f0);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r2.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r1);

        return;
    }

    public void translate(int, int)
    {
        com.android.internal.awt.AndroidGraphics2D $r0;
        int $i0, $i1;
        float $f0, $f1;
        android.graphics.Matrix $r1;
        android.graphics.Canvas $r2;

        $r0 := @this: com.android.internal.awt.AndroidGraphics2D;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        $f1 = (float) $i0;

        $f0 = (float) $i1;

        virtualinvoke $r1.<android.graphics.Matrix: void setTranslate(float,float)>($f1, $f0);

        $r2 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Canvas mC>;

        $r1 = <com.android.internal.awt.AndroidGraphics2D: android.graphics.Matrix mM>;

        virtualinvoke $r2.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.awt.AndroidGraphics2D: double RAD_360> = 6.283185307179586;

        return;
    }
}
