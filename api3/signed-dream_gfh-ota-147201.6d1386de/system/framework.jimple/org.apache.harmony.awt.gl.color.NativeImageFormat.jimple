class org.apache.harmony.awt.gl.color.NativeImageFormat extends java.lang.Object
{
    private static final int BYTE_GRAY_LCMS_FMT;
    private static final int FOUR_BYTE_ABGR_LCMS_FMT;
    private static final int INT_ARGB_LCMS_FMT;
    private static final int INT_BGR_LCMS_FMT;
    private static final int INT_RGB_LCMS_FMT;
    private static final int PT_ANY;
    private static final int PT_GRAY;
    private static final int PT_RGB;
    private static final int THREE_BYTE_BGR_LCMS_FMT;
    private static final int USHORT_GRAY_LCMS_FMT;
    private int alphaOffset;
    private int cmmFormat;
    private int cols;
    private int dataOffset;
    private java.lang.Object imageData;
    private int rows;
    private int scanlineStride;

    static void <clinit>()
    {
        int $i0, $i1;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int PT_RGB> = 4;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int PT_GRAY> = 3;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int PT_ANY> = 0;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int colorspaceSh(int)>(4);

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int extraSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>(3);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int doswapSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int swapfirstSh(int)>(1);

        $i0 = $i0 | $i1;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int INT_RGB_LCMS_FMT> = $i0;

        $i0 = <org.apache.harmony.awt.gl.color.NativeImageFormat: int INT_RGB_LCMS_FMT>;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int INT_ARGB_LCMS_FMT> = $i0;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int colorspaceSh(int)>(4);

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int extraSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>(3);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>(1);

        $i0 = $i0 | $i1;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int INT_BGR_LCMS_FMT> = $i0;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int colorspaceSh(int)>(4);

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>(3);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int doswapSh(int)>(1);

        $i0 = $i0 | $i1;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int THREE_BYTE_BGR_LCMS_FMT> = $i0;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int colorspaceSh(int)>(4);

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int extraSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>(3);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int doswapSh(int)>(1);

        $i0 = $i0 | $i1;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int FOUR_BYTE_ABGR_LCMS_FMT> = $i0;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int colorspaceSh(int)>(3);

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>(1);

        $i0 = $i0 | $i1;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int BYTE_GRAY_LCMS_FMT> = $i0;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int colorspaceSh(int)>(3);

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>(1);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>(2);

        $i0 = $i0 | $i1;

        <org.apache.harmony.awt.gl.color.NativeImageFormat: int USHORT_GRAY_LCMS_FMT> = $i0;

        staticinvoke <org.apache.harmony.awt.gl.color.NativeCMM: void loadCMM()>();

        staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: void initIDs()>();

        return;
    }

    public void <init>()
    {
        org.apache.harmony.awt.gl.color.NativeImageFormat $r0;

        $r0 := @this: org.apache.harmony.awt.gl.color.NativeImageFormat;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = 0;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int rows> = 0;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cols> = 0;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int scanlineStride> = -1;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int alphaOffset> = -1;

        return;
    }

    public void <init>(java.lang.Object, int, int, int)
    {
        org.apache.harmony.awt.gl.color.NativeImageFormat $r0;
        java.lang.Object $r1;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.harmony.awt.gl.color.NativeImageFormat;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = 0;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int rows> = 0;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cols> = 0;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int scanlineStride> = -1;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int alphaOffset> = -1;

        $z0 = $r1 instanceof short[];

        if $z0 == 0 goto label2;

        $i3 = $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat>;

        $i4 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>(2);

        $i3 = $i3 | $i4;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i3;

     label1:
        $i3 = $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat>;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>($i0);

        $i0 = $i3 | $i0;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int rows> = $i1;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cols> = $i2;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: java.lang.Object imageData> = $r1;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int dataOffset> = 0;

        return;

     label2:
        $z0 = $r1 instanceof byte[];

        if $z0 == 0 goto label3;

        $i3 = $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat>;

        $i4 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>(1);

        $i3 = $i3 | $i4;

        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i3;

        goto label1;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String)>("awt.47");

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    private static int bytesSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        return $i0;
    }

    private static int calculateAlphaOffset(java.awt.image.SampleModel, java.awt.image.Raster)
    {
        java.awt.image.SampleModel $r0;
        java.awt.image.Raster $r1;
        int $i0, $i1;
        boolean $z0;
        java.awt.image.ComponentSampleModel $r2;
        java.awt.image.DataBuffer $r3;
        int[] $r4, $r5;
        java.awt.image.SinglePixelPackedSampleModel $r6;

        $r0 := @parameter0: java.awt.image.SampleModel;

        $r1 := @parameter1: java.awt.image.Raster;

        $z0 = $r0 instanceof java.awt.image.ComponentSampleModel;

        if $z0 == 0 goto label1;

        $r2 = (java.awt.image.ComponentSampleModel) $r0;

        $r3 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i0 = virtualinvoke $r3.<java.awt.image.DataBuffer: int getDataType()>();

        $i0 = staticinvoke <java.awt.image.DataBuffer: int getDataTypeSize(int)>($i0);

        $i0 = $i0 / 8;

        $r4 = virtualinvoke $r2.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $r5 = virtualinvoke $r2.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $i1 = lengthof $r5;

        $i1 = $i1 - 1;

        $i1 = $r4[$i1];

        $i0 = $i1 * $i0;

        return $i0;

     label1:
        $z0 = $r0 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z0 == 0 goto label2;

        $r6 = (java.awt.image.SinglePixelPackedSampleModel) $r0;

        $r4 = virtualinvoke $r6.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitOffsets()>();

        $r5 = virtualinvoke $r6.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitOffsets()>();

        $i0 = lengthof $r5;

        $i0 = $i0 - 1;

        $i0 = $r4[$i0];

        $i0 = $i0 / 8;

        return $i0;

     label2:
        return -1;
    }

    private static int calculateScanlineStrideCSM(java.awt.image.ComponentSampleModel, java.awt.image.Raster)
    {
        java.awt.image.ComponentSampleModel $r0;
        java.awt.image.Raster $r1;
        int $i0, $i1, $i2;
        java.awt.image.DataBuffer $r2;

        $r0 := @parameter0: java.awt.image.ComponentSampleModel;

        $r1 := @parameter1: java.awt.image.Raster;

        $i0 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int getScanlineStride()>();

        $i1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int getPixelStride()>();

        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getWidth()>();

        $i1 = $i1 * $i2;

        if $i0 == $i1 goto label1;

        $r2 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i0 = virtualinvoke $r2.<java.awt.image.DataBuffer: int getDataType()>();

        $i0 = staticinvoke <java.awt.image.DataBuffer: int getDataTypeSize(int)>($i0);

        $i0 = $i0 / 8;

        $i1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int getScanlineStride()>();

        $i0 = $i1 * $i0;

        return $i0;

     label1:
        return -1;
    }

    private static int calculateScanlineStrideSPPSM(java.awt.image.SinglePixelPackedSampleModel, java.awt.image.Raster)
    {
        java.awt.image.SinglePixelPackedSampleModel $r0;
        java.awt.image.Raster $r1;
        int $i0, $i1;
        java.awt.image.DataBuffer $r2;

        $r0 := @parameter0: java.awt.image.SinglePixelPackedSampleModel;

        $r1 := @parameter1: java.awt.image.Raster;

        $i0 = virtualinvoke $r0.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $i1 = virtualinvoke $r0.<java.awt.image.SampleModel: int getWidth()>();

        if $i0 == $i1 goto label1;

        $r2 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i0 = virtualinvoke $r2.<java.awt.image.DataBuffer: int getDataType()>();

        $i0 = staticinvoke <java.awt.image.DataBuffer: int getDataTypeSize(int)>($i0);

        $i0 = $i0 / 8;

        $i1 = virtualinvoke $r0.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $i0 = $i1 * $i0;

        return $i0;

     label1:
        return -1;
    }

    private static int channelsSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 << 3;

        return $i0;
    }

    private static int colorspaceSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 << 16;

        return $i0;
    }

    public static org.apache.harmony.awt.gl.color.NativeImageFormat createNativeImageFormat(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage $r0;
        org.apache.harmony.awt.gl.color.NativeImageFormat $r1;
        int $i0;
        java.awt.image.ColorModel $r2;
        java.awt.image.SampleModel $r3;
        boolean $z0;
        java.awt.image.ComponentSampleModel $r4;
        java.awt.image.WritableRaster $r5;
        java.awt.image.SinglePixelPackedSampleModel $r6;
        java.awt.image.DataBuffer $r7;

        $r0 := @parameter0: java.awt.image.BufferedImage;

        $r1 = new org.apache.harmony.awt.gl.color.NativeImageFormat;

        specialinvoke $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: void <init>()>();

        $i0 = virtualinvoke $r0.<java.awt.image.BufferedImage: int getType()>();

        lookupswitch($i0)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label08;
            case 8: goto label11;
            case 9: goto label11;
            case 10: goto label09;
            case 11: goto label10;
            case 12: goto label11;
            case 13: goto label11;
            default: goto label01;
        };

     label01:
        $i0 = $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat>;

        if $i0 != 0 goto label03;

        $r2 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>();

        $r3 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.image.SampleModel getSampleModel()>();

        $z0 = $r3 instanceof java.awt.image.ComponentSampleModel;

        if $z0 == 0 goto label12;

        $r4 = (java.awt.image.ComponentSampleModel) $r3;

        $z0 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int getFormatFromComponentModel(java.awt.image.ComponentSampleModel,boolean)>($r4, $z0);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        $r5 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int calculateScanlineStrideCSM(java.awt.image.ComponentSampleModel,java.awt.image.Raster)>($r4, $r5);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int scanlineStride> = $i0;

     label02:
        $z0 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label03;

        $r5 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int calculateAlphaOffset(java.awt.image.SampleModel,java.awt.image.Raster)>($r3, $r5);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int alphaOffset> = $i0;

     label03:
        $i0 = $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat>;

        if $i0 != 0 goto label13;

        return null;

     label04:
        $i0 = <org.apache.harmony.awt.gl.color.NativeImageFormat: int INT_RGB_LCMS_FMT>;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        goto label01;

     label05:
        $i0 = <org.apache.harmony.awt.gl.color.NativeImageFormat: int INT_ARGB_LCMS_FMT>;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int alphaOffset> = 3;

        goto label01;

     label06:
        $i0 = <org.apache.harmony.awt.gl.color.NativeImageFormat: int INT_BGR_LCMS_FMT>;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        goto label01;

     label07:
        $i0 = <org.apache.harmony.awt.gl.color.NativeImageFormat: int THREE_BYTE_BGR_LCMS_FMT>;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        goto label01;

     label08:
        $i0 = <org.apache.harmony.awt.gl.color.NativeImageFormat: int FOUR_BYTE_ABGR_LCMS_FMT>;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int alphaOffset> = 0;

        goto label01;

     label09:
        $i0 = <org.apache.harmony.awt.gl.color.NativeImageFormat: int BYTE_GRAY_LCMS_FMT>;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        goto label01;

     label10:
        $i0 = <org.apache.harmony.awt.gl.color.NativeImageFormat: int USHORT_GRAY_LCMS_FMT>;

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        goto label01;

     label11:
        return null;

     label12:
        $z0 = $r3 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z0 == 0 goto label02;

        $r6 = (java.awt.image.SinglePixelPackedSampleModel) $r3;

        $z0 = virtualinvoke $r2.<java.awt.image.ColorModel: boolean hasAlpha()>();

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int getFormatFromSPPSampleModel(java.awt.image.SinglePixelPackedSampleModel,boolean)>($r6, $z0);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        $r5 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int calculateScanlineStrideSPPSM(java.awt.image.SinglePixelPackedSampleModel,java.awt.image.Raster)>($r6, $r5);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int scanlineStride> = $i0;

        goto label02;

     label13:
        $r5 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r7 = virtualinvoke $r5.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $z0 = specialinvoke $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: boolean setImageData(java.awt.image.DataBuffer)>($r7);

        if $z0 != 0 goto label14;

        return null;

     label14:
        $i0 = virtualinvoke $r0.<java.awt.image.BufferedImage: int getHeight()>();

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int rows> = $i0;

        $i0 = virtualinvoke $r0.<java.awt.image.BufferedImage: int getWidth()>();

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cols> = $i0;

        $r5 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r7 = virtualinvoke $r5.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i0 = virtualinvoke $r7.<java.awt.image.DataBuffer: int getOffset()>();

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int dataOffset> = $i0;

        return $r1;
    }

    public static org.apache.harmony.awt.gl.color.NativeImageFormat createNativeImageFormat(java.awt.image.Raster)
    {
        java.awt.image.Raster $r0;
        org.apache.harmony.awt.gl.color.NativeImageFormat $r1;
        java.awt.image.SampleModel $r2;
        boolean $z0;
        java.awt.image.ComponentSampleModel $r3;
        int $i0;
        java.awt.image.SinglePixelPackedSampleModel $r4;
        java.awt.image.DataBuffer $r5;

        $r0 := @parameter0: java.awt.image.Raster;

        $r1 = new org.apache.harmony.awt.gl.color.NativeImageFormat;

        specialinvoke $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: void <init>()>();

        $r2 = virtualinvoke $r0.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $z0 = $r2 instanceof java.awt.image.ComponentSampleModel;

        if $z0 == 0 goto label2;

        $r3 = (java.awt.image.ComponentSampleModel) $r2;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int getFormatFromComponentModel(java.awt.image.ComponentSampleModel,boolean)>($r3, 0);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int calculateScanlineStrideCSM(java.awt.image.ComponentSampleModel,java.awt.image.Raster)>($r3, $r0);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int scanlineStride> = $i0;

     label1:
        $i0 = $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat>;

        if $i0 != 0 goto label3;

        return null;

     label2:
        $z0 = $r2 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z0 == 0 goto label1;

        $r4 = (java.awt.image.SinglePixelPackedSampleModel) $r2;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int getFormatFromSPPSampleModel(java.awt.image.SinglePixelPackedSampleModel,boolean)>($r4, 0);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cmmFormat> = $i0;

        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int calculateScanlineStrideSPPSM(java.awt.image.SinglePixelPackedSampleModel,java.awt.image.Raster)>($r4, $r0);

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int scanlineStride> = $i0;

        goto label1;

     label3:
        $i0 = virtualinvoke $r0.<java.awt.image.Raster: int getWidth()>();

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cols> = $i0;

        $i0 = virtualinvoke $r0.<java.awt.image.Raster: int getHeight()>();

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int rows> = $i0;

        $r5 = virtualinvoke $r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $i0 = virtualinvoke $r5.<java.awt.image.DataBuffer: int getOffset()>();

        $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: int dataOffset> = $i0;

        $r5 = virtualinvoke $r0.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $z0 = specialinvoke $r1.<org.apache.harmony.awt.gl.color.NativeImageFormat: boolean setImageData(java.awt.image.DataBuffer)>($r5);

        if $z0 != 0 goto label4;

        return null;

     label4:
        return $r1;
    }

    private static int doswapSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 << 10;

        return $i0;
    }

    private static int endianSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 << 11;

        return $i0;
    }

    private static int extraSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 << 7;

        return $i0;
    }

    private static int flavorSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 << 13;

        return $i0;
    }

    private static int getFormatFromComponentModel(java.awt.image.ComponentSampleModel, boolean)
    {
        java.awt.image.ComponentSampleModel $r0;
        boolean $z0;
        int $i0, $i1, $i2, $i7;
        int[] $r1;
        byte $b3, $b4, $b5, $b6;

        $r0 := @parameter0: java.awt.image.ComponentSampleModel;

        $z0 := @parameter1: boolean;

        $r1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int[] getBankIndices()>();

        $i0 = $r1[0];

        $i1 = 1;

     label01:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i1 >= $i2 goto label03;

        $r1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int[] getBankIndices()>();

        $i2 = $r1[$i1];

        if $i2 == $i0 goto label02;

        return 0;

     label02:
        $i1 = $i1 + 1;

        goto label01;

     label03:
        if $z0 == 0 goto label07;

        $i0 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        $i0 = $i0 - 1;

     label04:
        if $z0 == 0 goto label08;

        $b3 = 1;

     label05:
        $i1 = virtualinvoke $r0.<java.awt.image.SampleModel: int getDataType()>();

        lookupswitch($i1)
        {
            case 0: goto label09;
            case 1: goto label25;
            case 2: goto label25;
            case 3: goto label26;
            case 4: goto label06;
            case 5: goto label27;
            default: goto label06;
        };

     label06:
        return 0;

     label07:
        $i0 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        goto label04;

     label08:
        $b3 = 0;

        goto label05;

     label09:
        $b4 = 1;

     label10:
        $b5 = 0;

        $b6 = 0;

        $z0 = 0;

        $i1 = 0;

     label11:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i1 >= $i2 goto label12;

        $r1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $i2 = $r1[$i1];

        if $i2 == $i1 goto label28;

     label12:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i1 != $i2 goto label13;

        $b5 = 0;

        $b6 = 0;

        $z0 = 1;

     label13:
        if $z0 != 0 goto label17;

        $i1 = 0;

     label14:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        $i2 = $i2 - 1;

        if $i1 >= $i2 goto label15;

        $r1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $i2 = $r1[$i1];

        $i7 = $i1 + 1;

        if $i2 == $i7 goto label29;

     label15:
        $r1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $i2 = $r1[$i1];

        if $i2 != 0 goto label16;

        $i1 = $i1 + 1;

     label16:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i1 != $i2 goto label17;

        $b5 = 0;

        $b6 = 1;

        $z0 = 1;

     label17:
        if $z0 != 0 goto label21;

        $i1 = 0;

     label18:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        $i2 = $i2 - 1;

        if $i1 >= $i2 goto label19;

        $r1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $i2 = $r1[$i1];

        $i7 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        $i7 = $i7 - 2;

        $i7 = $i7 - $i1;

        if $i2 == $i7 goto label30;

     label19:
        $r1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $i2 = $r1[$i1];

        $i7 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        $i7 = $i7 - 1;

        if $i2 != $i7 goto label20;

        $i1 = $i1 + 1;

     label20:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i1 != $i2 goto label21;

        $b5 = 1;

        $b6 = 1;

        $z0 = 1;

     label21:
        if $z0 != 0 goto label24;

        $i1 = 0;

     label22:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i1 >= $i2 goto label23;

        $r1 = virtualinvoke $r0.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $i2 = $r1[$i1];

        $i7 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        $i7 = $i7 - 1;

        $i7 = $i7 - $i1;

        if $i2 == $i7 goto label31;

     label23:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i1 != $i2 goto label24;

        $b5 = 1;

        $b6 = 0;

        $z0 = 1;

     label24:
        if $z0 != 0 goto label32;

        return 0;

     label25:
        $b4 = 2;

        goto label10;

     label26:
        $b4 = 4;

        goto label10;

     label27:
        $b4 = 0;

        goto label10;

     label28:
        $i1 = $i1 + 1;

        goto label11;

     label29:
        $i1 = $i1 + 1;

        goto label14;

     label30:
        $i1 = $i1 + 1;

        goto label18;

     label31:
        $i1 = $i1 + 1;

        goto label22;

     label32:
        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>($i0);

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>($b4);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int extraSh(int)>($b3);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int doswapSh(int)>($b5);

        $i0 = $i0 | $i1;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int swapfirstSh(int)>($b6);

        $i0 = $i0 | $i1;

        return $i0;
    }

    private static int getFormatFromSPPSampleModel(java.awt.image.SinglePixelPackedSampleModel, boolean)
    {
        java.awt.image.SinglePixelPackedSampleModel $r0;
        boolean $z0;
        int[] $r1;
        int $i0, $i1, $i2, $i3, $i7;
        byte $b4, $b5, $b6, $b8;
        java.util.ArrayList $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: java.awt.image.SinglePixelPackedSampleModel;

        $z0 := @parameter1: boolean;

        $r1 = virtualinvoke $r0.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitMasks()>();

        $i0 = $r1[0];

        $r1 = virtualinvoke $r0.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitOffsets()>();

        $i1 = $r1[0];

        $i0 = $i0 >>> $i1;

        if $i0 == 255 goto label01;

        if $i0 == 65535 goto label01;

        if $i0 == -1 goto label01;

        return 0;

     label01:
        $i1 = 1;

     label02:
        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i1 >= $i2 goto label04;

        $r1 = virtualinvoke $r0.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitMasks()>();

        $i2 = $r1[$i1];

        $r1 = virtualinvoke $r0.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitOffsets()>();

        $i3 = $r1[$i1];

        $i2 = $i2 >>> $i3;

        if $i2 == $i0 goto label03;

        return 0;

     label03:
        $i1 = $i1 + 1;

        goto label02;

     label04:
        $i1 = virtualinvoke $r0.<java.awt.image.SampleModel: int getDataType()>();

        if $i1 != 1 goto label07;

        $b4 = 2;

     label05:
        lookupswitch($i0)
        {
            case -1: goto label15;
            case 255: goto label09;
            case 65535: goto label14;
            default: goto label06;
        };

     label06:
        return 0;

     label07:
        $i1 = virtualinvoke $r0.<java.awt.image.SampleModel: int getDataType()>();

        if $i1 != 3 goto label08;

        $b4 = 4;

        goto label05;

     label08:
        return 0;

     label09:
        $b5 = 1;

     label10:
        if $z0 == 0 goto label16;

        $i0 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        $i0 = $i0 - 1;

     label11:
        if $z0 == 0 goto label17;

        $b6 = 1;

     label12:
        $i1 = $b4 / $b5;

        $i2 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        $i1 = $i1 - $i2;

        $i1 = $b6 + $i1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $i2 = 0;

     label13:
        $i3 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        if $i2 >= $i3 goto label18;

        $r3 = new java.lang.Integer;

        $r1 = virtualinvoke $r0.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitOffsets()>();

        $i3 = $r1[$i2];

        $i7 = $b5 * 8;

        $i3 = $i3 / $i7;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i3);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $i2 = $i2 + 1;

        goto label13;

     label14:
        $b5 = 2;

        goto label10;

     label15:
        $b5 = 4;

        goto label10;

     label16:
        $i0 = virtualinvoke $r0.<java.awt.image.SampleModel: int getNumBands()>();

        goto label11;

     label17:
        $b6 = 0;

        goto label12;

     label18:
        $i2 = 0;

     label19:
        $i3 = $b4 / $b5;

        if $i2 >= $i3 goto label21;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i2);

        $i3 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>($r3);

        if $i3 >= 0 goto label20;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label20:
        $i2 = $i2 + 1;

        goto label19;

     label21:
        $i2 = $b4 / $b5;

        $r1 = newarray (int)[$i2];

        $i2 = 0;

     label22:
        $i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i2 >= $i3 goto label23;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r3 = (java.lang.Integer) $r4;

        $i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r1[$i2] = $i3;

        $i2 = $i2 + 1;

        goto label22;

     label23:
        $b6 = 0;

        $b8 = 0;

        $z0 = 0;

        $i2 = 0;

     label24:
        if $i2 >= $b4 goto label25;

        $i3 = $r1[$i2];

        if $i3 == $i2 goto label38;

     label25:
        if $i2 != $b4 goto label26;

        $b6 = 0;

        $b8 = 0;

        $z0 = 1;

     label26:
        if $z0 != 0 goto label30;

        $i2 = 0;

     label27:
        $i3 = $b4 - 1;

        if $i2 >= $i3 goto label28;

        $i3 = $r1[$i2];

        $i7 = $i2 + 1;

        if $i3 == $i7 goto label39;

     label28:
        $i3 = $r1[$i2];

        if $i3 != 0 goto label29;

        $i2 = $i2 + 1;

     label29:
        if $i2 != $b4 goto label30;

        $b6 = 0;

        $b8 = 1;

        $z0 = 1;

     label30:
        if $z0 != 0 goto label34;

        $i2 = 0;

     label31:
        $i3 = $b4 - 1;

        if $i2 >= $i3 goto label32;

        $i3 = $r1[$i2];

        $i7 = $b4 - 2;

        $i7 = $i7 - $i2;

        if $i3 == $i7 goto label40;

     label32:
        $i3 = $r1[$i2];

        $i7 = $b4 - 1;

        if $i3 != $i7 goto label33;

        $i2 = $i2 + 1;

     label33:
        if $i2 != $b4 goto label34;

        $b6 = 1;

        $b8 = 1;

        $z0 = 1;

     label34:
        if $z0 != 0 goto label43;

        $i2 = 0;

     label35:
        if $i2 >= $b4 goto label36;

        $i3 = $r1[$i2];

        $i7 = $b4 - 1;

        $i7 = $i7 - $i2;

        if $i3 == $i7 goto label41;

     label36:
        if $i2 != $b4 goto label43;

        $b6 = 1;

        $b4 = 0;

        $z0 = 1;

     label37:
        if $z0 != 0 goto label42;

        return 0;

     label38:
        $i2 = $i2 + 1;

        goto label24;

     label39:
        $i2 = $i2 + 1;

        goto label27;

     label40:
        $i2 = $i2 + 1;

        goto label31;

     label41:
        $i2 = $i2 + 1;

        goto label35;

     label42:
        $i0 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int channelsSh(int)>($i0);

        $i2 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int bytesSh(int)>($b5);

        $i0 = $i2 | $i0;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int extraSh(int)>($i1);

        $i0 = $i1 | $i0;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int doswapSh(int)>($b6);

        $i0 = $i1 | $i0;

        $i1 = staticinvoke <org.apache.harmony.awt.gl.color.NativeImageFormat: int swapfirstSh(int)>($b4);

        $i0 = $i0 | $i1;

        return $i0;

     label43:
        $b4 = $b8;

        goto label37;
    }

    private static native void initIDs();

    private static int planarSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 << 12;

        return $i0;
    }

    private boolean setImageData(java.awt.image.DataBuffer)
    {
        org.apache.harmony.awt.gl.color.NativeImageFormat $r0;
        java.awt.image.DataBuffer $r1;
        org.apache.harmony.awt.gl.AwtImageBackdoorAccessor $r2;
        java.lang.Object $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: org.apache.harmony.awt.gl.color.NativeImageFormat;

        $r1 := @parameter0: java.awt.image.DataBuffer;

        $r2 = staticinvoke <org.apache.harmony.awt.gl.AwtImageBackdoorAccessor: org.apache.harmony.awt.gl.AwtImageBackdoorAccessor getInstance()>();

     label1:
        $r3 = virtualinvoke $r2.<org.apache.harmony.awt.gl.AwtImageBackdoorAccessor: java.lang.Object getData(java.awt.image.DataBuffer)>($r1);

     label2:
        $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: java.lang.Object imageData> = $r3;

        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static int swapfirstSh(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        $i0 = $i0 << 14;

        return $i0;
    }

    java.lang.Object getChannelData()
    {
        org.apache.harmony.awt.gl.color.NativeImageFormat $r0;
        java.lang.Object r1;

        $r0 := @this: org.apache.harmony.awt.gl.color.NativeImageFormat;

        r1 = $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: java.lang.Object imageData>;

        return r1;
    }

    int getNumCols()
    {
        org.apache.harmony.awt.gl.color.NativeImageFormat $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.color.NativeImageFormat;

        i0 = $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int cols>;

        return i0;
    }

    int getNumRows()
    {
        org.apache.harmony.awt.gl.color.NativeImageFormat $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.color.NativeImageFormat;

        i0 = $r0.<org.apache.harmony.awt.gl.color.NativeImageFormat: int rows>;

        return i0;
    }
}
