public class org.apache.harmony.awt.gl.image.PngDecoderJava extends java.lang.Object
{

    public void <init>()
    {
        org.apache.harmony.awt.gl.image.PngDecoderJava $r0;

        $r0 := @this: org.apache.harmony.awt.gl.image.PngDecoderJava;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.image.BufferedImage decode(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.io.DataInputStream $r1;
        int $i0;
        java.awt.image.BufferedImage $r2;
        org.apache.harmony.awt.gl.image.PNGData $r3;
        long $l1, $l2;
        byte $b3;
        java.io.IOException $r4;
        java.awt.image.ColorModel $r5;
        java.awt.image.WritableRaster $r6;

        $r0 := @parameter0: java.io.InputStream;

        $r1 = new java.io.DataInputStream;

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r0);

        staticinvoke <org.apache.harmony.awt.gl.image.PngDecoderJava: void readSignature(java.io.DataInputStream)>($r1);

        $r3 = staticinvoke <org.apache.harmony.awt.gl.image.PngDecoderJava: org.apache.harmony.awt.gl.image.PNGData readChunks(java.io.DataInputStream)>($r1);

        $l1 = virtualinvoke $r3.<org.apache.harmony.awt.gl.image.PNGData: long getWidth()>();

        $l2 = virtualinvoke $r3.<org.apache.harmony.awt.gl.image.PNGData: long getHeight()>();

        $b3 = $l1 cmp 2147483647L;

        if $b3 > 0 goto label1;

        $b3 = $l2 cmp 2147483647L;

        if $b3 <= 0 goto label2;

     label1:
        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("That image is too wide or tall.");

        throw $r4;

     label2:
        $i0 = (int) $l1;

        $i0 = (int) $l2;

        $r5 = virtualinvoke $r3.<org.apache.harmony.awt.gl.image.PNGData: java.awt.image.ColorModel getColorModel()>();

        $r6 = virtualinvoke $r3.<org.apache.harmony.awt.gl.image.PNGData: java.awt.image.WritableRaster getRaster()>();

        $r2 = new java.awt.image.BufferedImage;

        specialinvoke $r2.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r5, $r6, 0, null);

        return $r2;
    }

    protected static org.apache.harmony.awt.gl.image.PNGData readChunks(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream $r0;
        org.apache.harmony.awt.gl.image.PNGChunk $r1;
        org.apache.harmony.awt.gl.image.PNGData $r2;
        long $l0;
        byte[] $r3, $r4;
        boolean $z0, $z1;
        int $i1;
        java.io.IOException $r5;
        java.io.EOFException $r6;

        $r0 := @parameter0: java.io.DataInputStream;

        $r2 = new org.apache.harmony.awt.gl.image.PNGData;

        specialinvoke $r2.<org.apache.harmony.awt.gl.image.PNGData: void <init>()>();

        $z0 = 1;

     label01:
        if $z0 == 0 goto label13;

     label02:
        $i1 = virtualinvoke $r0.<java.io.DataInputStream: int readInt()>();

     label03:
        if $i1 >= 0 goto label06;

     label04:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Sorry, that file is too long.");

        throw $r5;

     label05:
        $r6 := @caughtexception;

        $z0 = 0;

        goto label01;

     label06:
        $r4 = newarray (byte)[4];

        virtualinvoke $r0.<java.io.DataInputStream: void readFully(byte[])>($r4);

        $r3 = newarray (byte)[$i1];

        virtualinvoke $r0.<java.io.DataInputStream: void readFully(byte[])>($r3);

        $i1 = virtualinvoke $r0.<java.io.DataInputStream: int readInt()>();

     label07:
        $l0 = (long) $i1;

     label08:
        $l0 = $l0 & 4294967295L;

        $z1 = staticinvoke <org.apache.harmony.awt.gl.image.PngDecoderJava: boolean verifyCRC(byte[],byte[],long)>($r4, $r3, $l0);

     label09:
        if $z1 != 0 goto label11;

     label10:
        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("That file appears to be corrupted.");

        throw $r5;

     label11:
        $r1 = new org.apache.harmony.awt.gl.image.PNGChunk;

        specialinvoke $r1.<org.apache.harmony.awt.gl.image.PNGChunk: void <init>(byte[],byte[])>($r4, $r3);

        virtualinvoke $r2.<org.apache.harmony.awt.gl.image.PNGData: void add(org.apache.harmony.awt.gl.image.PNGChunk)>($r1);

     label12:
        goto label01;

     label13:
        return $r2;

        catch java.io.EOFException from label02 to label03 with label05;
        catch java.io.EOFException from label04 to label05 with label05;
        catch java.io.EOFException from label06 to label07 with label05;
        catch java.io.EOFException from label08 to label09 with label05;
        catch java.io.EOFException from label10 to label12 with label05;
    }

    protected static void readSignature(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream $r0;
        long $l0;
        byte $b1;
        java.io.IOException $r1;

        $r0 := @parameter0: java.io.DataInputStream;

        $l0 = virtualinvoke $r0.<java.io.DataInputStream: long readLong()>();

        $b1 = $l0 cmp -8552249625308161526L;

        if $b1 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("PNG signature not found!");

        throw $r1;

     label1:
        return;
    }

    protected static boolean verifyCRC(byte[], byte[], long)
    {
        byte[] $r0, $r1;
        long $l0, $l1;
        java.util.zip.CRC32 $r2;
        byte $b2;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $l0 := @parameter2: long;

        $r2 = new java.util.zip.CRC32;

        specialinvoke $r2.<java.util.zip.CRC32: void <init>()>();

        virtualinvoke $r2.<java.util.zip.CRC32: void update(byte[])>($r0);

        virtualinvoke $r2.<java.util.zip.CRC32: void update(byte[])>($r1);

        $l1 = virtualinvoke $r2.<java.util.zip.CRC32: long getValue()>();

        $b2 = $l1 cmp $l0;

        if $b2 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
