public class org.apache.http.impl.client.DefaultUserTokenHandler extends java.lang.Object implements org.apache.http.client.UserTokenHandler
{

    public void <init>()
    {
        org.apache.http.impl.client.DefaultUserTokenHandler $r0;

        $r0 := @this: org.apache.http.impl.client.DefaultUserTokenHandler;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState)
    {
        org.apache.http.auth.AuthState $r0;
        org.apache.http.auth.AuthScheme $r1;
        boolean $z0;
        org.apache.http.auth.Credentials $r2;
        java.security.Principal $r3;

        $r0 := @parameter0: org.apache.http.auth.AuthState;

        $r1 = virtualinvoke $r0.<org.apache.http.auth.AuthState: org.apache.http.auth.AuthScheme getAuthScheme()>();

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.apache.http.auth.AuthScheme: boolean isComplete()>();

        if $z0 == 0 goto label1;

        $z0 = interfaceinvoke $r1.<org.apache.http.auth.AuthScheme: boolean isConnectionBased()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke $r0.<org.apache.http.auth.AuthState: org.apache.http.auth.Credentials getCredentials()>();

        if $r2 == null goto label1;

        $r3 = interfaceinvoke $r2.<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>();

        return $r3;

     label1:
        return null;
    }

    public java.lang.Object getUserToken(org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.client.DefaultUserTokenHandler $r0;
        org.apache.http.protocol.HttpContext $r1;
        java.security.Principal $r2, $r5;
        java.lang.Object $r3;
        org.apache.http.auth.AuthState $r4;
        org.apache.http.conn.ManagedClientConnection $r6;
        boolean $z0;
        javax.net.ssl.SSLSession $r7;

        $r0 := @this: org.apache.http.impl.client.DefaultUserTokenHandler;

        $r1 := @parameter0: org.apache.http.protocol.HttpContext;

        $r2 = null;

        $r3 = interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.target-scope");

        $r4 = (org.apache.http.auth.AuthState) $r3;

        if $r4 == null goto label1;

        $r5 = staticinvoke <org.apache.http.impl.client.DefaultUserTokenHandler: java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState)>($r4);

        $r2 = $r5;

        if $r5 != null goto label1;

        $r3 = interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.auth.proxy-scope");

        $r4 = (org.apache.http.auth.AuthState) $r3;

        $r2 = staticinvoke <org.apache.http.impl.client.DefaultUserTokenHandler: java.security.Principal getAuthPrincipal(org.apache.http.auth.AuthState)>($r4);

     label1:
        if $r2 != null goto label2;

        $r3 = interfaceinvoke $r1.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.connection");

        $r6 = (org.apache.http.conn.ManagedClientConnection) $r3;

        $z0 = interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: boolean isOpen()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.apache.http.conn.ManagedClientConnection: javax.net.ssl.SSLSession getSSLSession()>();

        if $r7 == null goto label4;

        $r2 = interfaceinvoke $r7.<javax.net.ssl.SSLSession: java.security.Principal getLocalPrincipal()>();

        return $r2;

     label2:
        return $r2;

     label3:
        return $r2;

     label4:
        return $r2;
    }
}
