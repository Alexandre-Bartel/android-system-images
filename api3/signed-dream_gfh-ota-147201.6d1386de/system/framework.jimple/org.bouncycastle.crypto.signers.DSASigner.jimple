public class org.bouncycastle.crypto.signers.DSASigner extends java.lang.Object implements org.bouncycastle.crypto.DSA
{
    org.bouncycastle.crypto.params.DSAKeyParameters key;
    java.security.SecureRandom random;

    public void <init>()
    {
        org.bouncycastle.crypto.signers.DSASigner $r0;

        $r0 := @this: org.bouncycastle.crypto.signers.DSASigner;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.math.BigInteger[] generateSignature(byte[])
    {
        byte[] $r0;
        java.math.BigInteger $r1, $r6, $r7, $r9;
        java.math.BigInteger[] $r2;
        org.bouncycastle.crypto.signers.DSASigner $r3;
        org.bouncycastle.crypto.params.DSAKeyParameters $r4;
        org.bouncycastle.crypto.params.DSAParameters $r5;
        int $i0, $i1;
        java.security.SecureRandom $r8;
        org.bouncycastle.crypto.params.DSAPrivateKeyParameters $r10;

        $r3 := @this: org.bouncycastle.crypto.signers.DSASigner;

        $r0 := @parameter0: byte[];

        $r1 = new java.math.BigInteger;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,byte[])>(1, $r0);

        $r4 = $r3.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.DSAKeyParameters: org.bouncycastle.crypto.params.DSAParameters getParameters()>();

        $r6 = virtualinvoke $r5.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

     label1:
        $r7 = new java.math.BigInteger;

        $r8 = $r3.<org.bouncycastle.crypto.signers.DSASigner: java.security.SecureRandom random>;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r8);

        $r6 = virtualinvoke $r5.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $i1 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r6);

        if $i1 >= 0 goto label1;

        $r6 = virtualinvoke $r5.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        $r9 = virtualinvoke $r5.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r9);

        $r9 = virtualinvoke $r5.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r6 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r9);

        $r9 = virtualinvoke $r5.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r7 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r9);

        $r4 = $r3.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key>;

        $r10 = (org.bouncycastle.crypto.params.DSAPrivateKeyParameters) $r4;

        $r9 = virtualinvoke $r10.<org.bouncycastle.crypto.params.DSAPrivateKeyParameters: java.math.BigInteger getX()>();

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r6);

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r9);

        $r1 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r1);

        $r7 = virtualinvoke $r5.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        $r2 = newarray (java.math.BigInteger)[2];

        $r2[0] = $r6;

        $r2[1] = $r1;

        return $r2;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.signers.DSASigner $r0;
        boolean $z0;
        org.bouncycastle.crypto.CipherParameters $r1;
        org.bouncycastle.crypto.params.ParametersWithRandom $r2;
        java.security.SecureRandom $r3;
        org.bouncycastle.crypto.params.DSAPrivateKeyParameters $r4;
        org.bouncycastle.crypto.params.DSAPublicKeyParameters $r5;

        $r0 := @this: org.bouncycastle.crypto.signers.DSASigner;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        if $z0 == 0 goto label2;

        $z0 = $r1 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z0 == 0 goto label1;

        $r2 = (org.bouncycastle.crypto.params.ParametersWithRandom) $r1;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        $r0.<org.bouncycastle.crypto.signers.DSASigner: java.security.SecureRandom random> = $r3;

        $r1 = virtualinvoke $r2.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r4 = (org.bouncycastle.crypto.params.DSAPrivateKeyParameters) $r1;

        $r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key> = $r4;

        return;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        $r0.<org.bouncycastle.crypto.signers.DSASigner: java.security.SecureRandom random> = $r3;

        $r4 = (org.bouncycastle.crypto.params.DSAPrivateKeyParameters) $r1;

        $r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key> = $r4;

        return;

     label2:
        $r5 = (org.bouncycastle.crypto.params.DSAPublicKeyParameters) $r1;

        $r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key> = $r5;

        return;
    }

    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        byte[] $r0;
        java.math.BigInteger $r1, $r2, $r3, $r7, $r8;
        org.bouncycastle.crypto.signers.DSASigner $r4;
        org.bouncycastle.crypto.params.DSAKeyParameters $r5;
        org.bouncycastle.crypto.params.DSAParameters $r6;
        int $i0;
        org.bouncycastle.crypto.params.DSAPublicKeyParameters $r9;
        boolean $z0;

        $r4 := @this: org.bouncycastle.crypto.signers.DSASigner;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: java.math.BigInteger;

        $r2 := @parameter2: java.math.BigInteger;

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r0);

        $r5 = $r4.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key>;

        $r6 = virtualinvoke $r5.<org.bouncycastle.crypto.params.DSAKeyParameters: org.bouncycastle.crypto.params.DSAParameters getParameters()>();

        $r7 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        $i0 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 >= 0 goto label1;

        $r8 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $i0 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r1);

        if $i0 > 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 >= 0 goto label3;

        $r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $i0 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r2);

        if $i0 > 0 goto label4;

     label3:
        return 0;

     label4:
        $r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r7 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r7);

        $r2 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r3 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r3 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r7);

        $r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r3 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r7);

        $r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        $r8 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r2 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r2, $r8);

        $r5 = $r4.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key>;

        $r9 = (org.bouncycastle.crypto.params.DSAPublicKeyParameters) $r5;

        $r7 = virtualinvoke $r9.<org.bouncycastle.crypto.params.DSAPublicKeyParameters: java.math.BigInteger getY()>();

        $r8 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r3 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r3, $r8);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r3);

        $r3 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r3 = virtualinvoke $r6.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $z0 = virtualinvoke $r2.<java.math.BigInteger: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }
}
