public class android.test.suitebuilder.TestSuiteBuilder extends java.lang.Object
{
    private android.content.Context context;
    private java.lang.String currentClassname;
    private final java.util.Set predicates;
    private junit.framework.TestSuite rootSuite;
    private junit.framework.TestSuite suiteForCurrentClass;
    private java.lang.String suiteName;
    private java.util.List testCases;
    private final android.test.suitebuilder.TestGrouping testGrouping;

    public void <init>(java.lang.Class)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.lang.ClassLoader $r3;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        specialinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.String,java.lang.ClassLoader)>($r2, $r3);

        return;
    }

    public void <init>(java.lang.String, java.lang.ClassLoader)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.String $r1;
        java.lang.ClassLoader $r2;
        com.android.internal.util.Predicate $r3;
        java.util.ArrayList $r4;
        android.test.suitebuilder.TestGrouping $r5;
        java.util.Comparator $r6;
        java.util.HashSet $r7;
        com.android.internal.util.Predicate[] $r8;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.ClassLoader;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r5 = new android.test.suitebuilder.TestGrouping;

        $r6 = <android.test.suitebuilder.TestGrouping: java.util.Comparator SORT_BY_FULLY_QUALIFIED_NAME>;

        specialinvoke $r5.<android.test.suitebuilder.TestGrouping: void <init>(java.util.Comparator)>($r6);

        $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestGrouping testGrouping> = $r5;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r0.<android.test.suitebuilder.TestSuiteBuilder: java.util.Set predicates> = $r7;

        $r0.<android.test.suitebuilder.TestSuiteBuilder: java.lang.String suiteName> = $r1;

        $r5 = $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestGrouping testGrouping>;

        virtualinvoke $r5.<android.test.suitebuilder.TestGrouping: void setClassLoader(java.lang.ClassLoader)>($r2);

        $r4 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r0.<android.test.suitebuilder.TestSuiteBuilder: java.util.List testCases> = $r4;

        $r8 = newarray (com.android.internal.util.Predicate)[1];

        $r3 = <android.test.suitebuilder.TestPredicates: com.android.internal.util.Predicate REJECT_SUPPRESSED>;

        $r8[0] = $r3;

        virtualinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>($r8);

        return;
    }

    private void addSuiteIfNecessary(java.lang.String)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.String $r1, $r3;
        junit.framework.TestSuite $r2, $r4;
        boolean $z0;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: java.lang.String;

        $r3 = $r0.<android.test.suitebuilder.TestSuiteBuilder: java.lang.String currentClassname>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r0.<android.test.suitebuilder.TestSuiteBuilder: java.lang.String currentClassname> = $r1;

        $r2 = new junit.framework.TestSuite;

        specialinvoke $r2.<junit.framework.TestSuite: void <init>(java.lang.String)>($r1);

        $r0.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite suiteForCurrentClass> = $r2;

        $r4 = $r0.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite rootSuite>;

        $r2 = $r0.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite suiteForCurrentClass>;

        virtualinvoke $r4.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r2);

        return;

     label1:
        return;
    }

    private void addTest(android.test.suitebuilder.TestMethod) throws java.lang.Exception
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        android.test.suitebuilder.TestMethod $r1;
        java.lang.String $r2;
        junit.framework.TestSuite $r3;
        junit.framework.TestCase $r4;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: android.test.suitebuilder.TestMethod;

        $r2 = virtualinvoke $r1.<android.test.suitebuilder.TestMethod: java.lang.String getEnclosingClassname()>();

        specialinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: void addSuiteIfNecessary(java.lang.String)>($r2);

        $r3 = $r0.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite suiteForCurrentClass>;

        $r4 = virtualinvoke $r1.<android.test.suitebuilder.TestMethod: junit.framework.TestCase createTest()>();

        virtualinvoke $r3.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r4);

        return;
    }

    private void addTest(junit.framework.Test)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        junit.framework.Test $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        junit.framework.TestSuite $r4;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: void addSuiteIfNecessary(java.lang.String)>($r3);

        $r4 = $r0.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite suiteForCurrentClass>;

        virtualinvoke $r4.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r1);

        return;
    }

    private static java.lang.String parsePackageNameFromClassName(java.lang.String)
    {
        java.lang.String $r0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int lastIndexOf(int)>(46);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        return $r0;
    }

    private boolean satisfiesAllPredicates(android.test.suitebuilder.TestMethod)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        android.test.suitebuilder.TestMethod $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        com.android.internal.util.Predicate $r5;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: android.test.suitebuilder.TestMethod;

        $r2 = $r0.<android.test.suitebuilder.TestSuiteBuilder: java.util.Set predicates>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.android.internal.util.Predicate) $r4;

        $z0 = interfaceinvoke $r5.<com.android.internal.util.Predicate: boolean apply(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 0;

     label2:
        return 1;
    }

    public android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.util.List $r1;
        java.util.Set $r2;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: java.util.List;

        $r2 = $r0.<android.test.suitebuilder.TestSuiteBuilder: java.util.Set predicates>;

        interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>($r1);

        return $r0;
    }

    public final transient android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        com.android.internal.util.Predicate[] $r1;
        java.util.ArrayList $r2;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: com.android.internal.util.Predicate[];

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r2, $r1);

        $r0 = virtualinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List)>($r2);

        return $r0;
    }

    public android.test.suitebuilder.TestSuiteBuilder addTestClassByName(java.lang.String, java.lang.String, android.content.Context)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.String $r1, $r2;
        android.content.Context $r3;
        android.test.AndroidTestRunner $r4;
        java.util.List $r5, $r6;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: android.content.Context;

        $r4 = new android.test.AndroidTestRunner;

        specialinvoke $r4.<android.test.AndroidTestRunner: void <init>()>();

        virtualinvoke $r4.<android.test.AndroidTestRunner: void setContext(android.content.Context)>($r3);

        virtualinvoke $r4.<android.test.AndroidTestRunner: void setTestClassName(java.lang.String,java.lang.String)>($r1, $r2);

        $r5 = $r0.<android.test.suitebuilder.TestSuiteBuilder: java.util.List testCases>;

        $r6 = virtualinvoke $r4.<android.test.AndroidTestRunner: java.util.List getTestCases()>();

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        return $r0;
    }

    public android.test.suitebuilder.TestSuiteBuilder addTestSuite(junit.framework.TestSuite)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        junit.framework.TestSuite $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        junit.framework.TestCase $r5;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: junit.framework.TestSuite;

        $r2 = staticinvoke <android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean)>($r1, 1);

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (junit.framework.TestCase) $r4;

        $r2 = $r0.<android.test.suitebuilder.TestSuiteBuilder: java.util.List testCases>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r5);

        goto label1;

     label2:
        return $r0;
    }

    public final junit.framework.TestSuite build()
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        junit.framework.TestSuite $r1;
        java.lang.String $r2;
        android.test.suitebuilder.TestGrouping $r3;
        java.util.List $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        android.test.suitebuilder.TestMethod $r7;
        java.lang.Exception $r8;
        android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests $r9;
        int $i0;
        junit.framework.TestCase $r10;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 = new junit.framework.TestSuite;

        $r2 = virtualinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: java.lang.String getSuiteName()>();

        specialinvoke $r1.<junit.framework.TestSuite: void <init>(java.lang.String)>($r2);

        $r0.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite rootSuite> = $r1;

        $r0.<android.test.suitebuilder.TestSuiteBuilder: java.lang.String currentClassname> = null;

     label1:
        $r3 = $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestGrouping testGrouping>;

        $r4 = virtualinvoke $r3.<android.test.suitebuilder.TestGrouping: java.util.List getTests()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.test.suitebuilder.TestMethod) $r6;

        $z0 = specialinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: boolean satisfiesAllPredicates(android.test.suitebuilder.TestMethod)>($r7);

        if $z0 == 0 goto label2;

        specialinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: void addTest(android.test.suitebuilder.TestMethod)>($r7);

     label3:
        goto label2;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("TestSuiteBuilder", "Failed to create test.", $r8);

        $r1 = new junit.framework.TestSuite;

        $r2 = virtualinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: java.lang.String getSuiteName()>();

        specialinvoke $r1.<junit.framework.TestSuite: void <init>(java.lang.String)>($r2);

        $r9 = new android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests;

        specialinvoke $r9.<android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests: void <init>(java.lang.Exception)>($r8);

        virtualinvoke $r1.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r9);

        return $r1;

     label5:
        $r4 = $r0.<android.test.suitebuilder.TestSuiteBuilder: java.util.List testCases>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 <= 0 goto label8;

        $r4 = $r0.<android.test.suitebuilder.TestSuiteBuilder: java.util.List testCases>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (junit.framework.TestCase) $r6;

        $r7 = new android.test.suitebuilder.TestMethod;

        specialinvoke $r7.<android.test.suitebuilder.TestMethod: void <init>(junit.framework.TestCase)>($r10);

        $z0 = specialinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: boolean satisfiesAllPredicates(android.test.suitebuilder.TestMethod)>($r7);

        if $z0 == 0 goto label6;

        specialinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: void addTest(junit.framework.Test)>($r10);

     label7:
        goto label6;

     label8:
        $r1 = $r0.<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite rootSuite>;

        return $r1;

        catch java.lang.Exception from label1 to label3 with label4;
        catch java.lang.Exception from label5 to label7 with label4;
    }

    public transient android.test.suitebuilder.TestSuiteBuilder excludePackages(java.lang.String[])
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.String[] $r1;
        android.test.suitebuilder.TestGrouping $r2;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 = $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestGrouping testGrouping>;

        virtualinvoke $r2.<android.test.suitebuilder.TestGrouping: android.test.suitebuilder.TestGrouping removePackagesRecursive(java.lang.String[])>($r1);

        return $r0;
    }

    protected java.lang.String getSuiteName()
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.String r1;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        r1 = $r0.<android.test.suitebuilder.TestSuiteBuilder: java.lang.String suiteName>;

        return r1;
    }

    protected android.test.suitebuilder.TestGrouping getTestGrouping()
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        android.test.suitebuilder.TestGrouping r1;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        r1 = $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestGrouping testGrouping>;

        return r1;
    }

    public final android.test.suitebuilder.TestSuiteBuilder includeAllPackagesUnderHere()
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.StackTraceElement $r1;
        java.lang.Thread $r2;
        java.lang.StackTraceElement[] $r3;
        java.lang.String $r4, $r6, $r7, $r8;
        java.lang.Class $r5;
        int $i0, $i1;
        boolean $z0;
        java.lang.String[] $r9;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r3 = virtualinvoke $r2.<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>();

        $r4 = null;

        $r5 = class "android/test/suitebuilder/TestSuiteBuilder";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label2;

        $r1 = $r3[$i0];

        $r7 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        $r7 = "includeAllPackagesUnderHere";

        $r8 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label3;

        $i0 = $i0 + 1;

        $r1 = $r3[$i0];

        $r4 = virtualinvoke $r1.<java.lang.StackTraceElement: java.lang.String getClassName()>();

     label2:
        $r4 = staticinvoke <android.test.suitebuilder.TestSuiteBuilder: java.lang.String parsePackageNameFromClassName(java.lang.String)>($r4);

        $r9 = newarray (java.lang.String)[1];

        $r9[0] = $r4;

        $r0 = virtualinvoke $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])>($r9);

        return $r0;

     label3:
        $i0 = $i0 + 1;

        goto label1;
    }

    public transient android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.String[] $r1;
        android.test.suitebuilder.TestGrouping $r2;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: java.lang.String[];

        $r2 = $r0.<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestGrouping testGrouping>;

        virtualinvoke $r2.<android.test.suitebuilder.TestGrouping: android.test.suitebuilder.TestGrouping addPackagesRecursive(java.lang.String[])>($r1);

        return $r0;
    }

    public android.test.suitebuilder.TestSuiteBuilder named(java.lang.String)
    {
        android.test.suitebuilder.TestSuiteBuilder $r0;
        java.lang.String $r1;

        $r0 := @this: android.test.suitebuilder.TestSuiteBuilder;

        $r1 := @parameter0: java.lang.String;

        $r0.<android.test.suitebuilder.TestSuiteBuilder: java.lang.String suiteName> = $r1;

        return $r0;
    }
}
