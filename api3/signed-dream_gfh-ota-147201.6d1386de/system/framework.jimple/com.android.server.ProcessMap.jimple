public class com.android.server.ProcessMap extends java.lang.Object
{
    final java.util.HashMap mMap;

    public void <init>()
    {
        com.android.server.ProcessMap $r0;
        java.util.HashMap $r1;

        $r0 := @this: com.android.server.ProcessMap;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.ProcessMap: java.util.HashMap mMap> = $r1;

        return;
    }

    public java.lang.Object get(java.lang.String, int)
    {
        com.android.server.ProcessMap $r0;
        java.lang.String $r1;
        int $i0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.util.SparseArray $r4;

        $r0 := @this: com.android.server.ProcessMap;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = $r0.<com.android.server.ProcessMap: java.util.HashMap mMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (android.util.SparseArray) $r3;

        if $r4 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>($i0);

        return $r3;
    }

    public java.util.HashMap getMap()
    {
        com.android.server.ProcessMap $r0;
        java.util.HashMap r1;

        $r0 := @this: com.android.server.ProcessMap;

        r1 = $r0.<com.android.server.ProcessMap: java.util.HashMap mMap>;

        return r1;
    }

    public java.lang.Object put(java.lang.String, int, java.lang.Object)
    {
        com.android.server.ProcessMap $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.Object $r2, $r3;
        java.util.HashMap $r4;
        android.util.SparseArray $r5;

        $r0 := @this: com.android.server.ProcessMap;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: java.lang.Object;

        $r4 = $r0.<com.android.server.ProcessMap: java.util.HashMap mMap>;

        $r3 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (android.util.SparseArray) $r3;

        if $r5 != null goto label1;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>(int)>(2);

        $r4 = $r0.<com.android.server.ProcessMap: java.util.HashMap mMap>;

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

     label1:
        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>($i0, $r2);

        return $r2;
    }

    public void remove(java.lang.String, int)
    {
        com.android.server.ProcessMap $r0;
        java.lang.String $r1;
        int $i0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.util.SparseArray $r4;

        $r0 := @this: com.android.server.ProcessMap;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = $r0.<com.android.server.ProcessMap: java.util.HashMap mMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (android.util.SparseArray) $r3;

        if $r4 == null goto label1;

        virtualinvoke $r4.<android.util.SparseArray: void remove(int)>($i0);

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if $i0 != 0 goto label2;

        $r2 = $r0.<com.android.server.ProcessMap: java.util.HashMap mMap>;

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        return;

     label1:
        return;

     label2:
        return;
    }
}
