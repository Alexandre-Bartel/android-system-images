public final class org.apache.http.util.CharArrayBuffer extends java.lang.Object
{
    private char[] buffer;
    private int len;

    public void <init>(int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;
        char[] $r2;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer capacity may not be negative");

        throw $r1;

     label1:
        $r2 = newarray (char)[$i0];

        $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer> = $r2;

        return;
    }

    private void expand(int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1;
        char[] $r1, $r2;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i1 = lengthof $r1;

        $i1 = $i1 << 1;

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        $r1 = newarray (char)[$i0];

        $r2 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer> = $r1;

        return;
    }

    public void append(char)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        char $c0;
        int $i1, $i2;
        char[] $r1;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $c0 := @parameter0: char;

        $i1 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i1 = $i1 + 1;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i2 = lengthof $r1;

        if $i1 <= $i2 goto label1;

        specialinvoke $r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>($i1);

     label1:
        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i2 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $r1[$i2] = $c0;

        $r0.<org.apache.http.util.CharArrayBuffer: int len> = $i1;

        return;
    }

    public void append(java.lang.Object)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        java.lang.Object $r1;
        java.lang.String $r2;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        virtualinvoke $r0.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r2);

        return;
    }

    public void append(java.lang.String)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1, $i2;
        char[] $r1;
        java.lang.String $r2;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r2 := @parameter0: java.lang.String;

        if $r2 != null goto label1;

        $r2 = "null";

     label1:
        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i0 = $i0 + $i2;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label2;

        specialinvoke $r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>($i0);

     label2:
        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i1 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        virtualinvoke $r2.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r1, $i1);

        $r0.<org.apache.http.util.CharArrayBuffer: int len> = $i0;

        return;
    }

    public void append(org.apache.http.util.ByteArrayBuffer, int, int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        org.apache.http.util.ByteArrayBuffer $r1;
        int $i0, $i1;
        byte[] $r2;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 := @parameter0: org.apache.http.util.ByteArrayBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        virtualinvoke $r0.<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>($r2, $i0, $i1);

        return;
    }

    public void append(org.apache.http.util.CharArrayBuffer)
    {
        org.apache.http.util.CharArrayBuffer $r0, $r1;
        char[] $r2;
        int $i0;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r1.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = $r1.<org.apache.http.util.CharArrayBuffer: int len>;

        virtualinvoke $r0.<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>($r2, 0, $i0);

        return;
    }

    public void append(org.apache.http.util.CharArrayBuffer, int, int)
    {
        org.apache.http.util.CharArrayBuffer $r0, $r1;
        int $i0, $i1;
        char[] $r2;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = $r1.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        virtualinvoke $r0.<org.apache.http.util.CharArrayBuffer: void append(char[],int,int)>($r2, $i0, $i1);

        return;
    }

    public void append(byte[], int, int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r2;
        char[] $r3;
        char $c4;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return;

     label1:
        if $i0 < 0 goto label2;

        $i2 = lengthof $r1;

        if $i0 > $i2 goto label2;

        if $i1 < 0 goto label2;

        $i2 = $i0 + $i1;

        if $i2 < 0 goto label2;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        if $i1 == 0 goto label7;

        $i2 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i1 = $i2 + $i1;

        $r3 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i3 = lengthof $r3;

        if $i1 <= $i3 goto label4;

        specialinvoke $r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>($i1);

     label4:
        if $i2 >= $i1 goto label6;

        $i3 = $r1[$i0];

        if $i3 >= 0 goto label5;

        $i3 = $i3 + 256;

     label5:
        $r3 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $c4 = (char) $i3;

        $r3[$i2] = $c4;

        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label4;

     label6:
        $r0.<org.apache.http.util.CharArrayBuffer: int len> = $i1;

        return;

     label7:
        return;
    }

    public void append(char[], int, int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        char[] $r1, $r3;
        int $i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r2;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return;

     label1:
        if $i0 < 0 goto label2;

        $i2 = lengthof $r1;

        if $i0 > $i2 goto label2;

        if $i1 < 0 goto label2;

        $i2 = $i0 + $i1;

        if $i2 < 0 goto label2;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label3;

     label2:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        if $i1 == 0 goto label5;

        $i2 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i2 = $i2 + $i1;

        $r3 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i3 = lengthof $r3;

        if $i2 <= $i3 goto label4;

        specialinvoke $r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>($i2);

     label4:
        $r3 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i3 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r3, $i3, $i1);

        $r0.<org.apache.http.util.CharArrayBuffer: int len> = $i2;

        return;

     label5:
        return;
    }

    public char[] buffer()
    {
        org.apache.http.util.CharArrayBuffer $r0;
        char[] r1;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        return r1;
    }

    public int capacity()
    {
        org.apache.http.util.CharArrayBuffer $r0;
        char[] $r1;
        int $i0;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public char charAt(int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0;
        char[] $r1;
        char $c1;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $c1 = $r1[$i0];

        return $c1;
    }

    public void clear()
    {
        org.apache.http.util.CharArrayBuffer $r0;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r0.<org.apache.http.util.CharArrayBuffer: int len> = 0;

        return;
    }

    public void ensureCapacity(int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1, $i2;
        char[] $r1;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i2 = lengthof $r1;

        $i1 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i1 = $i2 - $i1;

        if $i0 <= $i1 goto label1;

        $i1 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i0 = $i1 + $i0;

        specialinvoke $r0.<org.apache.http.util.CharArrayBuffer: void expand(int)>($i0);

        return;

     label1:
        return;
    }

    public int indexOf(int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter0: int;

        $i1 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $i0 = virtualinvoke $r0.<org.apache.http.util.CharArrayBuffer: int indexOf(int,int,int)>($i0, 0, $i1);

        return $i0;
    }

    public int indexOf(int, int, int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1, $i2, $i3;
        char[] $r1;
        char $c4;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        if $i1 >= 0 goto label1;

        $i1 = 0;

     label1:
        $i3 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if $i2 <= $i3 goto label2;

        $i2 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

     label2:
        if $i1 <= $i2 goto label3;

        return -1;

     label3:
        if $i1 >= $i2 goto label5;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $c4 = $r1[$i1];

        if $c4 != $i0 goto label4;

        return $i1;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return -1;
    }

    public boolean isEmpty()
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isFull()
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1;
        char[] $r1;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i1 = lengthof $r1;

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int length()
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int i0;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        return i0;
    }

    public void setLength(int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1;
        char[] $r1;
        java.lang.IndexOutOfBoundsException $r2;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $r0.<org.apache.http.util.CharArrayBuffer: int len> = $i0;

        return;
    }

    public java.lang.String substring(int, int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1, $i2;
        char[] $r1;
        java.lang.IndexOutOfBoundsException $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label1:
        $i2 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if $i1 <= $i2 goto label2;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        if $i0 <= $i1 goto label3;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label3:
        $r3 = new java.lang.String;

        $r1 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i1 = $i1 - $i0;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r1, $i0, $i1);

        return $r3;
    }

    public java.lang.String substringTrimmed(int, int)
    {
        org.apache.http.util.CharArrayBuffer $r0;
        int $i0, $i1, $i2;
        java.lang.IndexOutOfBoundsException $r1;
        char[] $r2;
        char $c3;
        boolean $z0;
        java.lang.String $r3;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if $i1 >= 0 goto label1;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label1:
        $i2 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if $i0 <= $i2 goto label2;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label2:
        if $i1 <= $i0 goto label3;

        $r1 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r1.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r1;

     label3:
        if $i1 >= $i0 goto label4;

        $r2 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $c3 = $r2[$i1];

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label4;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        if $i0 <= $i1 goto label5;

        $r2 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i2 = $i0 - 1;

        $c3 = $r2[$i2];

        $z0 = staticinvoke <org.apache.http.protocol.HTTP: boolean isWhitespace(char)>($c3);

        if $z0 == 0 goto label5;

        $i0 = $i0 + -1;

        goto label4;

     label5:
        $r3 = new java.lang.String;

        $r2 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = $i0 - $i1;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r2, $i1, $i0);

        return $r3;
    }

    public char[] toCharArray()
    {
        org.apache.http.util.CharArrayBuffer $r0;
        char[] $r1, $r2;
        int $i0;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        $r1 = newarray (char)[$i0];

        $i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        if $i0 <= 0 goto label1;

        $r2 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        return $r1;

     label1:
        return $r1;
    }

    public java.lang.String toString()
    {
        org.apache.http.util.CharArrayBuffer $r0;
        java.lang.String $r1;
        char[] $r2;
        int $i0;

        $r0 := @this: org.apache.http.util.CharArrayBuffer;

        $r1 = new java.lang.String;

        $r2 = $r0.<org.apache.http.util.CharArrayBuffer: char[] buffer>;

        $i0 = $r0.<org.apache.http.util.CharArrayBuffer: int len>;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        return $r1;
    }
}
