class android.test.InstrumentationTestRunner$WatcherResultPrinter extends java.lang.Object implements junit.framework.TestListener
{
    private final android.os.Bundle mResultTemplate;
    java.lang.String mTestClass;
    int mTestNum;
    android.os.Bundle mTestResult;
    int mTestResultCode;
    final android.test.InstrumentationTestRunner this$0;

    public void <init>(android.test.InstrumentationTestRunner, int)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter $r0;
        android.test.InstrumentationTestRunner $r1;
        int $i0;
        android.os.Bundle $r2;

        $r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        $r1 := @parameter0: android.test.InstrumentationTestRunner;

        $i0 := @parameter1: int;

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0> = $r1;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum> = 0;

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = 0;

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass> = null;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate> = $r2;

        $r2 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        virtualinvoke $r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("id", "InstrumentationTestRunner");

        $r2 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        virtualinvoke $r2.<android.os.Bundle: void putInt(java.lang.String,int)>("numtests", $i0);

        return;
    }

    public void addError(junit.framework.Test, java.lang.Throwable)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter $r0;
        java.lang.Throwable $r1;
        junit.framework.Test $r2;
        android.os.Bundle $r3;
        java.lang.String $r4;
        java.lang.Object[] $r5;
        junit.framework.TestCase $r6;

        $r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        $r2 := @parameter0: junit.framework.Test;

        $r1 := @parameter1: java.lang.Throwable;

        $r3 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>($r1);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stack", $r4);

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = -1;

        $r3 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (junit.framework.TestCase) $r2;

        $r4 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r5[0] = $r4;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>($r1);

        $r5[1] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nError in %s:\n%s", $r5);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r4);

        return;
    }

    public void addFailure(junit.framework.Test, junit.framework.AssertionFailedError)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter $r0;
        junit.framework.AssertionFailedError $r1;
        junit.framework.Test $r2;
        android.os.Bundle $r3;
        java.lang.String $r4;
        java.lang.Object[] $r5;
        junit.framework.TestCase $r6;

        $r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        $r2 := @parameter0: junit.framework.Test;

        $r1 := @parameter1: junit.framework.AssertionFailedError;

        $r3 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>($r1);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stack", $r4);

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = -2;

        $r3 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r5 = newarray (java.lang.Object)[2];

        $r6 = (junit.framework.TestCase) $r2;

        $r4 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        $r5[0] = $r4;

        $r4 = staticinvoke <junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>($r1);

        $r5[1] = $r4;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\nFailure in %s:\n%s", $r5);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r4);

        return;
    }

    public void endTest(junit.framework.Test)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter $r0;
        junit.framework.Test $r1;
        int $i0;
        android.os.Bundle $r2;
        android.test.InstrumentationTestRunner $r3;
        long $l1;
        java.lang.InterruptedException $r4;
        java.lang.IllegalStateException $r5;

        $r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        $r1 := @parameter0: junit.framework.Test;

        $i0 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode>;

        if $i0 != 0 goto label1;

        $r2 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", ".");

     label1:
        $r3 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $i0 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode>;

        $r2 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r3.<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)>($i0, $r2);

        $r3 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

     label2:
        $i0 = staticinvoke <android.test.InstrumentationTestRunner: int access$000(android.test.InstrumentationTestRunner)>($r3);

        $l1 = (long) $i0;

        staticinvoke <java.lang.Thread: void sleep(long)>($l1);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public void startTest(junit.framework.Test)
    {
        android.test.InstrumentationTestRunner$WatcherResultPrinter $r0;
        junit.framework.Test $r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r7;
        android.os.Bundle $r4, $r5;
        junit.framework.TestCase $r6;
        int $i0;
        boolean $z0;
        java.lang.Object[] $r8;
        android.test.InstrumentationTestRunner $r9;
        long $l1;
        java.lang.InterruptedException $r10;
        java.lang.IllegalStateException $r11;

        $r0 := @this: android.test.InstrumentationTestRunner$WatcherResultPrinter;

        $r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = new android.os.Bundle;

        $r5 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mResultTemplate>;

        specialinvoke $r4.<android.os.Bundle: void <init>(android.os.Bundle)>($r5);

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult> = $r4;

        $r4 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("class", $r3);

        $r4 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r6 = (junit.framework.TestCase) $r1;

        $r7 = virtualinvoke $r6.<junit.framework.TestCase: java.lang.String getName()>();

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("test", $r7);

        $r4 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $i0 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum>;

        $i0 = $i0 + 1;

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum> = $i0;

        virtualinvoke $r4.<android.os.Bundle: void putInt(java.lang.String,int)>("current", $i0);

        if $r3 == null goto label4;

        $r7 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass>;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label4;

        $r4 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r3;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\n%s:", $r8);

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", $r7);

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: java.lang.String mTestClass> = $r3;

     label1:
        $i0 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestNum>;

        if $i0 != 1 goto label3;

        $r9 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

     label2:
        $i0 = staticinvoke <android.test.InstrumentationTestRunner: int access$000(android.test.InstrumentationTestRunner)>($r9);

        $l1 = (long) $i0;

        staticinvoke <java.lang.Thread: void sleep(long)>($l1);

     label3:
        $r9 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.test.InstrumentationTestRunner this$0>;

        $r4 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r9.<android.app.Instrumentation: void sendStatus(int,android.os.Bundle)>(1, $r4);

        $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: int mTestResultCode> = 0;

        return;

     label4:
        $r4 = $r0.<android.test.InstrumentationTestRunner$WatcherResultPrinter: android.os.Bundle mTestResult>;

        virtualinvoke $r4.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("stream", "");

        goto label1;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw $r11;

        catch java.lang.InterruptedException from label2 to label3 with label5;
    }
}
