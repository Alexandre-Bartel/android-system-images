public abstract class org.apache.http.impl.io.AbstractSessionOutputBuffer extends java.lang.Object implements org.apache.http.io.SessionOutputBuffer
{
    private static final byte[] CRLF;
    private static final int MAX_CHUNK;
    private boolean ascii;
    private org.apache.http.util.ByteArrayBuffer buffer;
    private java.lang.String charset;
    private org.apache.http.impl.io.HttpTransportMetricsImpl metrics;
    private java.io.OutputStream outstream;

    static void <clinit>()
    {
        byte[] $r0;

        <org.apache.http.impl.io.AbstractSessionOutputBuffer: int MAX_CHUNK> = 256;

        $r0 = newarray (byte)[2];

        $r0[0] = 13;

        $r0[1] = 10;

        <org.apache.http.impl.io.AbstractSessionOutputBuffer: byte[] CRLF> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.lang.String charset> = "US-ASCII";

        $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: boolean ascii> = 1;

        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        java.io.OutputStream $r1;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>();

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.io.OutputStream outstream>;

        virtualinvoke $r1.<java.io.OutputStream: void flush()>();

        return;
    }

    protected void flushBuffer() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        org.apache.http.util.ByteArrayBuffer $r1;
        int $i0;
        java.io.OutputStream $r2;
        byte[] $r3;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r4;
        long $l1;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $i0 = virtualinvoke $r1.<org.apache.http.util.ByteArrayBuffer: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.io.OutputStream outstream>;

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $r3 = virtualinvoke $r1.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, $i0);

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        virtualinvoke $r1.<org.apache.http.util.ByteArrayBuffer: void clear()>();

        $r4 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        $l1 = (long) $i0;

        virtualinvoke $r4.<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>($l1);

        return;

     label1:
        return;
    }

    public org.apache.http.io.HttpTransportMetrics getMetrics()
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        org.apache.http.impl.io.HttpTransportMetricsImpl r1;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        r1 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        return r1;
    }

    protected void init(java.io.OutputStream, int, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        java.io.OutputStream $r1;
        int $i0;
        org.apache.http.params.HttpParams $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.util.ByteArrayBuffer $r4;
        java.lang.String $r5;
        boolean $z0;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r6;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        $r1 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.http.params.HttpParams;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r3;

     label1:
        if $i0 > 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size may not be negative or zero");

        throw $r3;

     label2:
        if $r2 != null goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r3;

     label3:
        $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.io.OutputStream outstream> = $r1;

        $r4 = new org.apache.http.util.ByteArrayBuffer;

        specialinvoke $r4.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>($i0);

        $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer> = $r4;

        $r5 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>($r2);

        $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.lang.String charset> = $r5;

        $r5 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.lang.String charset>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("US-ASCII");

        if $z0 != 0 goto label4;

        $r5 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.lang.String charset>;

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ASCII");

        if $z0 == 0 goto label6;

     label4:
        $z0 = 1;

     label5:
        $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: boolean ascii> = $z0;

        $r6 = new org.apache.http.impl.io.HttpTransportMetricsImpl;

        specialinvoke $r6.<org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>();

        $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics> = $r6;

        return;

     label6:
        $z0 = 0;

        goto label5;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        int $i0;
        boolean $z0;
        org.apache.http.util.ByteArrayBuffer $r1;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $z0 = virtualinvoke $r1.<org.apache.http.util.ByteArrayBuffer: boolean isFull()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>();

     label1:
        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        virtualinvoke $r1.<org.apache.http.util.ByteArrayBuffer: void append(int)>($i0);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label1;

        return;

     label1:
        $i0 = lengthof $r1;

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)>($r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i4;
        org.apache.http.util.ByteArrayBuffer $r2;
        java.io.OutputStream $r3;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r4;
        long $l3;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return;

     label1:
        if $i1 > 256 goto label2;

        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $i2 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: int capacity()>();

        if $i1 <= $i2 goto label3;

     label2:
        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>();

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.io.OutputStream outstream>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        $r4 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        $l3 = (long) $i1;

        virtualinvoke $r4.<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>($l3);

        return;

     label3:
        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $i2 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: int capacity()>();

        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $i4 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $i2 = $i2 - $i4;

        if $i1 <= $i2 goto label4;

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>();

     label4:
        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r1, $i0, $i1);

        return;
    }

    public void writeLine(java.lang.String) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        java.lang.String $r1, $r2;
        int $i0;
        byte[] $r3;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.lang.String charset>;

        $r3 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>($r2);

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>($r3);

     label2:
        $r3 = <org.apache.http.impl.io.AbstractSessionOutputBuffer: byte[] CRLF>;

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>($r3);

        return;
    }

    public void writeLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionOutputBuffer $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        org.apache.http.util.ByteArrayBuffer $r2;
        java.lang.String $r3, $r4;
        byte[] $r5;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionOutputBuffer;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        if $r1 != null goto label1;

        return;

     label1:
        $z0 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: boolean ascii>;

        if $z0 == 0 goto label5;

        $i0 = 0;

        $i1 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int length()>();

     label2:
        if $i1 <= 0 goto label6;

        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $i2 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: int capacity()>();

        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $i3 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $i2 = $i2 - $i3;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1);

        if $i2 <= 0 goto label3;

        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: void append(org.apache.http.util.CharArrayBuffer,int,int)>($r1, $i0, $i2);

     label3:
        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: org.apache.http.util.ByteArrayBuffer buffer>;

        $z0 = virtualinvoke $r2.<org.apache.http.util.ByteArrayBuffer: boolean isFull()>();

        if $z0 == 0 goto label4;

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void flushBuffer()>();

     label4:
        $i0 = $i0 + $i2;

        $i1 = $i1 - $i2;

        goto label2;

     label5:
        $r3 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        $r4 = $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: java.lang.String charset>;

        $r5 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>($r4);

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>($r5);

     label6:
        $r5 = <org.apache.http.impl.io.AbstractSessionOutputBuffer: byte[] CRLF>;

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])>($r5);

        return;
    }
}
