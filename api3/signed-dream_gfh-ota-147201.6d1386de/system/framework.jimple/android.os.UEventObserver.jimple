public abstract class android.os.UEventObserver extends java.lang.Object
{
    private static final java.lang.String TAG;
    private static android.os.UEventObserver$UEventThread sThread;
    private static boolean sThreadStarted;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Class $r1;

        $r1 = class "android/os/UEventObserver";

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <android.os.UEventObserver: java.lang.String TAG> = $r0;

        <android.os.UEventObserver: boolean sThreadStarted> = 0;

        return;
    }

    public void <init>()
    {
        android.os.UEventObserver $r0;

        $r0 := @this: android.os.UEventObserver;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000()
    {
        staticinvoke <android.os.UEventObserver: void native_setup()>();

        return;
    }

    static int access$100(byte[])
    {
        byte[] $r0;
        int $i0;

        $r0 := @parameter0: byte[];

        $i0 = staticinvoke <android.os.UEventObserver: int next_event(byte[])>($r0);

        return $i0;
    }

    private static final void ensureThreadStarted()
    {
        boolean $z0;
        android.os.UEventObserver$UEventThread $r0;
        java.lang.Throwable $r1;

        entermonitor class "android/os/UEventObserver";

     label1:
        $z0 = <android.os.UEventObserver: boolean sThreadStarted>;

        if $z0 != 0 goto label2;

        $r0 = new android.os.UEventObserver$UEventThread;

        specialinvoke $r0.<android.os.UEventObserver$UEventThread: void <init>()>();

        <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread> = $r0;

        $r0 = <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread>;

        virtualinvoke $r0.<java.lang.Thread: void start()>();

        <android.os.UEventObserver: boolean sThreadStarted> = 1;

     label2:
        exitmonitor class "android/os/UEventObserver";

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor class "android/os/UEventObserver";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static native void native_setup();

    private static native int next_event(byte[]);

    protected void finalize() throws java.lang.Throwable
    {
        android.os.UEventObserver $r0;
        java.lang.Throwable $r1;

        $r0 := @this: android.os.UEventObserver;

     label1:
        virtualinvoke $r0.<android.os.UEventObserver: void stopObserving()>();

     label2:
        specialinvoke $r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r1 := @caughtexception;

        specialinvoke $r0.<java.lang.Object: void finalize()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public abstract void onUEvent(android.os.UEventObserver$UEvent);

    public final void startObserving(java.lang.String)
    {
        android.os.UEventObserver $r0;
        java.lang.String $r1;
        android.os.UEventObserver$UEventThread $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.os.UEventObserver;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

     label1:
        staticinvoke <android.os.UEventObserver: void ensureThreadStarted()>();

        $r2 = <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread>;

        virtualinvoke $r2.<android.os.UEventObserver$UEventThread: void addObserver(java.lang.String,android.os.UEventObserver)>($r1, $r0);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final void stopObserving()
    {
        android.os.UEventObserver $r0;
        android.os.UEventObserver$UEventThread $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.os.UEventObserver;

        entermonitor $r0;

     label1:
        $r1 = <android.os.UEventObserver: android.os.UEventObserver$UEventThread sThread>;

        virtualinvoke $r1.<android.os.UEventObserver$UEventThread: void removeObserver(android.os.UEventObserver)>($r0);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
