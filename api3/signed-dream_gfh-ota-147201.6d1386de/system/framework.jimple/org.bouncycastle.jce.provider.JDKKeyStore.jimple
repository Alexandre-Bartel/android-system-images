public class org.bouncycastle.jce.provider.JDKKeyStore extends java.security.KeyStoreSpi implements org.bouncycastle.jce.interfaces.BCKeyStore
{
    static final int CERTIFICATE;
    static final int KEY;
    private static final java.lang.String KEY_CIPHER;
    static final int KEY_PRIVATE;
    static final int KEY_PUBLIC;
    private static final int KEY_SALT_SIZE;
    static final int KEY_SECRET;
    private static final int MIN_ITERATIONS;
    static final int NULL;
    static final int SEALED;
    static final int SECRET;
    private static final java.lang.String STORE_CIPHER;
    private static final int STORE_SALT_SIZE;
    private static final int STORE_VERSION;
    protected java.security.SecureRandom random;
    protected java.util.Hashtable table;

    public void <init>()
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.util.Hashtable $r1;
        java.security.SecureRandom $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        specialinvoke $r0.<java.security.KeyStoreSpi: void <init>()>();

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table> = $r1;

        $r2 = new java.security.SecureRandom;

        specialinvoke $r2.<java.security.SecureRandom: void <init>()>();

        $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random> = $r2;

        return;
    }

    static void access$000(org.bouncycastle.jce.provider.JDKKeyStore, java.security.Key, java.io.DataOutputStream) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.security.Key $r1;
        java.io.DataOutputStream $r2;

        $r0 := @parameter0: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.io.DataOutputStream;

        specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void encodeKey(java.security.Key,java.io.DataOutputStream)>($r1, $r2);

        return;
    }

    static java.security.Key access$100(org.bouncycastle.jce.provider.JDKKeyStore, java.io.DataInputStream) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.io.DataInputStream $r1;
        java.security.Key $r2;

        $r0 := @parameter0: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter1: java.io.DataInputStream;

        $r2 = specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.Key decodeKey(java.io.DataInputStream)>($r1);

        return $r2;
    }

    private java.security.cert.Certificate decodeCertificate(java.io.DataInputStream) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.io.DataInputStream $r1;
        java.io.ByteArrayInputStream $r2;
        byte[] $r3;
        java.lang.String $r4;
        int $i0;
        java.security.cert.CertificateFactory $r5;
        java.security.cert.Certificate $r6;
        java.security.NoSuchProviderException $r7;
        java.io.IOException $r8;
        java.security.cert.CertificateException $r9;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.io.DataInputStream;

        $r4 = virtualinvoke $r1.<java.io.DataInputStream: java.lang.String readUTF()>();

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        $r3 = newarray (byte)[$i0];

        virtualinvoke $r1.<java.io.DataInputStream: void readFully(byte[])>($r3);

     label1:
        $r5 = staticinvoke <java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)>($r4, "BC");

        $r2 = new java.io.ByteArrayInputStream;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3);

        $r6 = virtualinvoke $r5.<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)>($r2);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.io.IOException;

        $r4 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r8;

     label4:
        $r9 := @caughtexception;

        $r8 = new java.io.IOException;

        $r4 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r8;

        catch java.security.NoSuchProviderException from label1 to label2 with label3;
        catch java.security.cert.CertificateException from label1 to label2 with label4;
    }

    private java.security.Key decodeKey(java.io.DataInputStream) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.io.DataInputStream $r1;
        byte[] $r2;
        int $i0, $i1;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.security.spec.EncodedKeySpec $r5;
        java.io.IOException $r6, r17;
        java.lang.StringBuilder $r7, r16;
        java.lang.Exception $r8;
        java.security.KeyFactory $r10;
        java.security.PrivateKey $r11;
        java.security.PublicKey $r12;
        javax.crypto.SecretKeyFactory $r13;
        javax.crypto.SecretKey $r14;
        java.security.spec.PKCS8EncodedKeySpec r15;
        java.security.spec.X509EncodedKeySpec r18;
        javax.crypto.spec.SecretKeySpec r19;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.io.DataInputStream;

        $i0 = virtualinvoke $r1.<java.io.FilterInputStream: int read()>();

        $r3 = virtualinvoke $r1.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r4 = virtualinvoke $r1.<java.io.DataInputStream: java.lang.String readUTF()>();

        $i1 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

        $r2 = newarray (byte)[$i1];

        virtualinvoke $r1.<java.io.DataInputStream: void readFully(byte[])>($r2);

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("PKCS#8");

        if $z0 != 0 goto label01;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("PKCS8");

        if $z0 == 0 goto label06;

     label01:
        r15 = new java.security.spec.PKCS8EncodedKeySpec;

        $r5 = r15;

        specialinvoke r15.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r2);

     label02:
        lookupswitch($i0)
        {
            case 0: goto label10;
            case 1: goto label12;
            case 2: goto label14;
            default: goto label03;
        };

     label03:
        r17 = new java.io.IOException;

        $r6 = r17;

        r16 = new java.lang.StringBuilder;

        $r7 = r16;

     label04:
        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key type ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not recognised!");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r6;

     label05:
        $r8 := @caughtexception;

        r17 = new java.io.IOException;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception creating key: ");

        $r3 = virtualinvoke $r8.<java.lang.Throwable: java.lang.String toString()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw r17;

     label06:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("X.509");

        if $z0 != 0 goto label07;

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("X509");

        if $z0 == 0 goto label08;

     label07:
        r18 = new java.security.spec.X509EncodedKeySpec;

        $r5 = r18;

        specialinvoke r18.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r2);

        goto label02;

     label08:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("RAW");

        if $z0 == 0 goto label09;

        r19 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r19.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r2, $r4);

        return r19;

     label09:
        r17 = new java.io.IOException;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key format ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not recognised!");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r17.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw r17;

     label10:
        $r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r4, "BC");

        $r11 = virtualinvoke $r10.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>($r5);

     label11:
        return $r11;

     label12:
        $r10 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r4, "BC");

        $r12 = virtualinvoke $r10.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>($r5);

     label13:
        return $r12;

     label14:
        $r13 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r4, "BC");

        $r14 = virtualinvoke $r13.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5);

     label15:
        return $r14;

        catch java.lang.Exception from label04 to label05 with label05;
        catch java.lang.Exception from label10 to label11 with label05;
        catch java.lang.Exception from label12 to label13 with label05;
        catch java.lang.Exception from label14 to label15 with label05;
    }

    private void encodeCertificate(java.security.cert.Certificate, java.io.DataOutputStream) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.security.cert.Certificate $r1;
        java.io.DataOutputStream $r2;
        byte[] $r3;
        java.lang.String $r4;
        int $i0;
        java.security.cert.CertificateEncodingException $r5;
        java.io.IOException $r6;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.security.cert.Certificate;

        $r2 := @parameter1: java.io.DataOutputStream;

     label1:
        $r3 = virtualinvoke $r1.<java.security.cert.Certificate: byte[] getEncoded()>();

        $r4 = virtualinvoke $r1.<java.security.cert.Certificate: java.lang.String getType()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r4);

        $i0 = lengthof $r3;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke $r2.<java.io.FilterOutputStream: void write(byte[])>($r3);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.io.IOException;

        $r4 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r6;

        catch java.security.cert.CertificateEncodingException from label1 to label2 with label3;
    }

    private void encodeKey(java.security.Key, java.io.DataOutputStream) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.security.Key $r1;
        java.io.DataOutputStream $r2;
        byte[] $r3;
        boolean $z0;
        java.lang.String $r4;
        int $i0;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.io.DataOutputStream;

        $r3 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        $z0 = $r1 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<java.io.DataOutputStream: void write(int)>(0);

     label1:
        $r4 = interfaceinvoke $r1.<java.security.Key: java.lang.String getFormat()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r4);

        $r4 = interfaceinvoke $r1.<java.security.Key: java.lang.String getAlgorithm()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r4);

        $i0 = lengthof $r3;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke $r2.<java.io.FilterOutputStream: void write(byte[])>($r3);

        return;

     label2:
        $z0 = $r1 instanceof java.security.PublicKey;

        if $z0 == 0 goto label3;

        virtualinvoke $r2.<java.io.DataOutputStream: void write(int)>(1);

        goto label1;

     label3:
        virtualinvoke $r2.<java.io.DataOutputStream: void write(int)>(2);

        goto label1;
    }

    public java.util.Enumeration engineAliases()
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.util.Enumeration $r1;
        java.util.Hashtable $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r1 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration keys()>();

        return $r1;
    }

    public boolean engineContainsAlias(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.Hashtable $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r3 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r2 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public void engineDeleteEntry(java.lang.String) throws java.security.KeyStoreException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        java.security.KeyStoreException $r4;
        java.lang.StringBuilder $r5;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        if $r3 != null goto label1;

        $r4 = new java.security.KeyStoreException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no such entry as ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.security.KeyStoreException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label1:
        $r2 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }

    public java.security.cert.Certificate engineGetCertificate(java.lang.String)
    {
        java.lang.String $r0;
        org.bouncycastle.jce.provider.JDKKeyStore $r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r4;
        int $i0;
        java.security.cert.Certificate $r5;
        java.security.cert.Certificate[] $r6;

        $r1 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r0 := @parameter0: java.lang.String;

        $r2 = $r1.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        $r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if $r4 == null goto label2;

        $i0 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 != 1 goto label1;

        $r3 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r5 = (java.security.cert.Certificate) $r3;

        return $r5;

     label1:
        $r6 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.security.cert.Certificate[] getCertificateChain()>();

        if $r6 == null goto label2;

        $r5 = $r6[0];

        return $r5;

     label2:
        return null;
    }

    public java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.security.cert.Certificate $r1, $r6;
        java.util.Hashtable $r2;
        java.util.Enumeration $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r5;
        java.lang.String $r7;
        java.security.cert.Certificate[] $r8;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.security.cert.Certificate;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.util.Enumeration elements()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r5 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r4;

        $r4 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $z0 = $r4 instanceof java.security.cert.Certificate;

        if $z0 == 0 goto label2;

        $r4 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r6 = (java.security.cert.Certificate) $r4;

        $z0 = virtualinvoke $r6.<java.security.cert.Certificate: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.String getAlias()>();

        return $r7;

     label2:
        $r8 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.security.cert.Certificate[] getCertificateChain()>();

        if $r8 == null goto label1;

        $r6 = $r8[0];

        $z0 = virtualinvoke $r6.<java.security.cert.Certificate: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.String getAlias()>();

        return $r7;

     label3:
        return null;
    }

    public java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r4;
        java.security.cert.Certificate[] $r5;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.security.cert.Certificate[] getCertificateChain()>();

        return $r5;

     label1:
        return null;
    }

    public java.util.Date engineGetCreationDate(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r4;
        java.util.Date $r5;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if $r4 == null goto label1;

        $r5 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.util.Date getDate()>();

        return $r5;

     label1:
        return null;
    }

    public java.security.Key engineGetKey(java.lang.String, char[]) throws java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    {
        java.lang.String $r0;
        char[] $r1;
        org.bouncycastle.jce.provider.JDKKeyStore $r2;
        java.util.Hashtable $r3;
        java.lang.Object $r4;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r5;
        int $i0;
        java.security.Key $r6;

        $r2 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: char[];

        $r3 = $r2.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r0);

        $r5 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r4;

        if $r5 == null goto label1;

        $i0 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 != 1 goto label2;

     label1:
        return null;

     label2:
        $r4 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject(char[])>($r1);

        $r6 = (java.security.Key) $r4;

        return $r6;
    }

    public boolean engineIsCertificateEntry(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r4;
        int $i0;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if $r4 == null goto label1;

        $i0 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 != 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean engineIsKeyEntry(java.lang.String)
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r4;
        int $i0;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r3;

        if $r4 == null goto label1;

        $i0 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 == 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void engineLoad(java.io.InputStream, char[]) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.io.InputStream $r1;
        char[] $r2;
        java.io.DataInputStream $r3;
        org.bouncycastle.crypto.macs.HMac $r4;
        org.bouncycastle.crypto.io.MacInputStream $r5;
        byte[] $r6, $r7;
        org.bouncycastle.crypto.generators.PKCS12ParametersGenerator $r8;
        java.util.Hashtable $r9;
        int $i0, $i1;
        java.io.IOException $r10;
        org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest $r11;
        org.bouncycastle.crypto.CipherParameters $r12;
        byte $b2;
        boolean $z0;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: char[];

        $r9 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        virtualinvoke $r9.<java.util.Hashtable: void clear()>();

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = new java.io.DataInputStream;

        specialinvoke $r3.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        $i0 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        if $i0 == 1 goto label2;

        if $i0 == 0 goto label2;

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("Wrong version of key store.");

        throw $r10;

     label2:
        $i0 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        $r6 = newarray (byte)[$i0];

        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>($r6);

        $i0 = virtualinvoke $r3.<java.io.DataInputStream: int readInt()>();

        $r4 = new org.bouncycastle.crypto.macs.HMac;

        $r11 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest: org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest getInstance(java.lang.String)>("SHA-1");

        specialinvoke $r4.<org.bouncycastle.crypto.macs.HMac: void <init>(org.bouncycastle.crypto.Digest)>($r11);

        $r5 = new org.bouncycastle.crypto.io.MacInputStream;

        specialinvoke $r5.<org.bouncycastle.crypto.io.MacInputStream: void <init>(java.io.InputStream,org.bouncycastle.crypto.Mac)>($r3, $r4);

        $r8 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r11 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest: org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest getInstance(java.lang.String)>("SHA-1");

        specialinvoke $r8.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r11);

        $r7 = staticinvoke <org.bouncycastle.crypto.PBEParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>($r2);

        virtualinvoke $r8.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r7, $r6, $i0);

        $i0 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        $r12 = virtualinvoke $r8.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i0);

        virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: void init(org.bouncycastle.crypto.CipherParameters)>($r12);

        $i0 = 0;

     label3:
        $i1 = lengthof $r7;

        if $i0 == $i1 goto label4;

        $r7[$i0] = 0;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void loadStore(java.io.InputStream)>($r5);

        $i0 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        $r6 = newarray (byte)[$i0];

        $i0 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        $r7 = newarray (byte)[$i0];

        virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r6, 0);

        $i0 = 0;

     label5:
        $i1 = lengthof $r7;

        if $i0 == $i1 goto label6;

        $i1 = virtualinvoke $r3.<java.io.FilterInputStream: int read()>();

        $b2 = (byte) $i1;

        $r7[$i0] = $b2;

        $i0 = $i0 + 1;

        goto label5;

     label6:
        if $r2 == null goto label7;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label8;

        $z0 = virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: boolean isSameAs(byte[],byte[])>($r6, $r7);

        if $z0 != 0 goto label9;

        $r9 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        virtualinvoke $r9.<java.util.Hashtable: void clear()>();

        $r10 = new java.io.IOException;

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("KeyStore integrity check failed.");

        throw $r10;

     label7:
        return;

     label8:
        return;

     label9:
        return;
    }

    public void engineSetCertificateEntry(java.lang.String, java.security.cert.Certificate) throws java.security.KeyStoreException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        java.security.cert.Certificate $r2;
        java.util.Hashtable $r3;
        java.lang.Object $r4;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r5;
        int $i0;
        java.security.KeyStoreException $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.cert.Certificate;

        $r3 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r4;

        if $r5 == null goto label1;

        $i0 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 == 1 goto label1;

        $r6 = new java.security.KeyStoreException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key store already has an entry with alias ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label1:
        $r3 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r5 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r5.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.security.cert.Certificate)>($r0, $r1, $r2);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        return;
    }

    public void engineSetKeyEntry(java.lang.String, java.security.Key, char[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        java.security.Key $r2;
        char[] $r3;
        java.security.cert.Certificate[] $r4;
        java.util.Hashtable $r5;
        boolean $z0;
        java.security.KeyStoreException $r6;
        java.lang.Object $r7;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r8;
        int $i0;
        java.lang.StringBuilder $r9;
        java.lang.Exception $r10;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.security.Key;

        $r3 := @parameter2: char[];

        $r4 := @parameter3: java.security.cert.Certificate[];

        $z0 = $r2 instanceof java.security.PrivateKey;

        if $z0 == 0 goto label1;

        if $r4 != null goto label1;

        $r6 = new java.security.KeyStoreException;

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>("no certificate chain for private key");

        throw $r6;

     label1:
        $r5 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r7 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r7;

        if $r8 == null goto label2;

        $i0 = virtualinvoke $r8.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        if $i0 != 1 goto label2;

        $r6 = new java.security.KeyStoreException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key store already has an entry with alias ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label2:
        $r5 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r8 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r8.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>($r0, $r1, $r2, $r3, $r4);

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r8);

     label3:
        return;

     label4:
        $r10 := @caughtexception;

        $r6 = new java.security.KeyStoreException;

        $r1 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r6.<java.security.KeyStoreException: void <init>(java.lang.String)>($r1);

        throw $r6;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void engineSetKeyEntry(java.lang.String, byte[], java.security.cert.Certificate[]) throws java.security.KeyStoreException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        byte[] $r2;
        java.security.cert.Certificate[] $r3;
        java.util.Hashtable $r4;
        java.lang.Object $r5;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r6;
        java.security.KeyStoreException $r7;
        java.lang.StringBuilder $r8;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        $r3 := @parameter2: java.security.cert.Certificate[];

        $r4 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r6 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r5;

        if $r6 == null goto label1;

        $r7 = new java.security.KeyStoreException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key store already has an entry with alias ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.KeyStoreException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label1:
        $r4 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r6 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,byte[],java.security.cert.Certificate[])>($r0, $r1, $r2, $r3);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r6);

        return;
    }

    public int engineSize()
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        int $i0;
        java.util.Hashtable $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $i0 = virtualinvoke $r1.<java.util.Hashtable: int size()>();

        return $i0;
    }

    public void engineStore(java.io.OutputStream, char[]) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.io.OutputStream $r1;
        char[] $r2;
        java.io.DataOutputStream $r3;
        org.bouncycastle.crypto.macs.HMac $r4;
        int $i0, $i1;
        org.bouncycastle.crypto.io.MacOutputStream $r5;
        byte[] $r6, $r10;
        org.bouncycastle.crypto.generators.PKCS12ParametersGenerator $r7;
        java.security.SecureRandom $r8;
        org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest $r9;
        org.bouncycastle.crypto.CipherParameters $r11;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.io.OutputStream;

        $r2 := @parameter1: char[];

        $r3 = new java.io.DataOutputStream;

        specialinvoke $r3.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r6 = newarray (byte)[20];

        $r8 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random>;

        $i0 = virtualinvoke $r8.<java.util.Random: int nextInt()>();

        $i0 = $i0 & 1023;

        $i0 = $i0 + 1024;

        $r8 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random>;

        virtualinvoke $r8.<java.security.SecureRandom: void nextBytes(byte[])>($r6);

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>(1);

        $i1 = lengthof $r6;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>($i1);

        virtualinvoke $r3.<java.io.FilterOutputStream: void write(byte[])>($r6);

        virtualinvoke $r3.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $r4 = new org.bouncycastle.crypto.macs.HMac;

        $r9 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest: org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest getInstance(java.lang.String)>("SHA-1");

        specialinvoke $r4.<org.bouncycastle.crypto.macs.HMac: void <init>(org.bouncycastle.crypto.Digest)>($r9);

        $r5 = new org.bouncycastle.crypto.io.MacOutputStream;

        specialinvoke $r5.<org.bouncycastle.crypto.io.MacOutputStream: void <init>(java.io.OutputStream,org.bouncycastle.crypto.Mac)>($r3, $r4);

        $r7 = new org.bouncycastle.crypto.generators.PKCS12ParametersGenerator;

        $r9 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest: org.apache.harmony.xnet.provider.jsse.OpenSSLMessageDigest getInstance(java.lang.String)>("SHA-1");

        specialinvoke $r7.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: void <init>(org.bouncycastle.crypto.Digest)>($r9);

        $r10 = staticinvoke <org.bouncycastle.crypto.PBEParametersGenerator: byte[] PKCS12PasswordToBytes(char[])>($r2);

        virtualinvoke $r7.<org.bouncycastle.crypto.PBEParametersGenerator: void init(byte[],byte[],int)>($r10, $r6, $i0);

        $i0 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        $r11 = virtualinvoke $r7.<org.bouncycastle.crypto.generators.PKCS12ParametersGenerator: org.bouncycastle.crypto.CipherParameters generateDerivedMacParameters(int)>($i0);

        virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: void init(org.bouncycastle.crypto.CipherParameters)>($r11);

        $i0 = 0;

     label1:
        $i1 = lengthof $r10;

        if $i0 == $i1 goto label2;

        $r10[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void saveStore(java.io.OutputStream)>($r5);

        $i0 = virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int getMacSize()>();

        $r6 = newarray (byte)[$i0];

        virtualinvoke $r4.<org.bouncycastle.crypto.macs.HMac: int doFinal(byte[],int)>($r6, 0);

        virtualinvoke $r3.<java.io.FilterOutputStream: void write(byte[])>($r6);

        virtualinvoke $r3.<java.io.FilterOutputStream: void close()>();

        return;
    }

    protected boolean isSameAs(byte[], byte[])
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        byte $b2, $b3;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 = lengthof $r1;

        $i1 = lengthof $r2;

        if $i0 == $i1 goto label1;

        return 0;

     label1:
        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 == $i1 goto label4;

        $b2 = $r1[$i0];

        $b3 = $r2[$i0];

        if $b2 == $b3 goto label3;

        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 1;
    }

    protected void loadStore(java.io.InputStream) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.io.InputStream $r1;
        java.util.Date $r2;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r3;
        java.io.DataInputStream $r4;
        int $i0, $i2, $i3;
        java.lang.String $r5;
        long $l1;
        java.security.cert.Certificate[] $r6, $r7;
        java.security.cert.Certificate $r8;
        java.lang.RuntimeException $r9;
        java.util.Hashtable $r10;
        java.security.Key $r11;
        byte[] $r12;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.io.InputStream;

        $r4 = new java.io.DataInputStream;

        specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r1);

        $i0 = virtualinvoke $r4.<java.io.FilterInputStream: int read()>();

     label1:
        if $i0 <= 0 goto label9;

        $r5 = virtualinvoke $r4.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r2 = new java.util.Date;

        $l1 = virtualinvoke $r4.<java.io.DataInputStream: long readLong()>();

        specialinvoke $r2.<java.util.Date: void <init>(long)>($l1);

        $i2 = virtualinvoke $r4.<java.io.DataInputStream: int readInt()>();

        $r6 = null;

        if $i2 == 0 goto label3;

        $r7 = newarray (java.security.cert.Certificate)[$i2];

        $r6 = $r7;

        $i3 = 0;

     label2:
        if $i3 == $i2 goto label3;

        $r8 = specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.cert.Certificate decodeCertificate(java.io.DataInputStream)>($r4);

        $r7[$i3] = $r8;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        lookupswitch($i0)
        {
            case 1: goto label5;
            case 2: goto label7;
            case 3: goto label8;
            case 4: goto label8;
            default: goto label4;
        };

     label4:
        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown object type in store.");

        throw $r9;

     label5:
        $r8 = specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.cert.Certificate decodeCertificate(java.io.DataInputStream)>($r4);

        $r10 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r3.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.util.Date,int,java.lang.Object)>($r0, $r5, $r2, 1, $r8);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

     label6:
        $i0 = virtualinvoke $r4.<java.io.FilterInputStream: int read()>();

        goto label1;

     label7:
        $r11 = specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.Key decodeKey(java.io.DataInputStream)>($r4);

        $r10 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r3.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.util.Date,int,java.lang.Object,java.security.cert.Certificate[])>($r0, $r5, $r2, 2, $r11, $r6);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

        goto label6;

     label8:
        $i2 = virtualinvoke $r4.<java.io.DataInputStream: int readInt()>();

        $r12 = newarray (byte)[$i2];

        virtualinvoke $r4.<java.io.DataInputStream: void readFully(byte[])>($r12);

        $r10 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r3 = new org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry;

        specialinvoke $r3.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: void <init>(org.bouncycastle.jce.provider.JDKKeyStore,java.lang.String,java.util.Date,int,java.lang.Object,java.security.cert.Certificate[])>($r0, $r5, $r2, $i0, $r12, $r6);

        virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r3);

        goto label6;

     label9:
        return;
    }

    protected javax.crypto.Cipher makePBECipher(java.lang.String, int, char[], byte[], int) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.lang.String $r1;
        int $i0, $i1;
        char[] $r2;
        byte[] $r3;
        javax.crypto.spec.PBEParameterSpec $r4;
        javax.crypto.spec.PBEKeySpec $r5;
        javax.crypto.SecretKeyFactory $r6;
        javax.crypto.Cipher $r7;
        javax.crypto.SecretKey $r8;
        java.lang.Exception $r9;
        java.io.IOException $r10;
        java.lang.StringBuilder $r11;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: char[];

        $r3 := @parameter3: byte[];

        $i1 := @parameter4: int;

        $r5 = new javax.crypto.spec.PBEKeySpec;

     label1:
        specialinvoke $r5.<javax.crypto.spec.PBEKeySpec: void <init>(char[])>($r2);

        $r6 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)>($r1, "BC");

        $r4 = new javax.crypto.spec.PBEParameterSpec;

        specialinvoke $r4.<javax.crypto.spec.PBEParameterSpec: void <init>(byte[],int)>($r3, $i1);

        $r7 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)>($r1, "BC");

        $r8 = virtualinvoke $r6.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r5);

        virtualinvoke $r7.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>($i0, $r8, $r4);

     label2:
        return $r7;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.io.IOException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error initialising store of key store: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r10;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void saveStore(java.io.OutputStream) throws java.io.IOException
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.io.OutputStream $r1;
        java.io.DataOutputStream $r2;
        java.util.Hashtable $r3;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry $r6;
        int $i0, $i2;
        java.lang.String $r7;
        java.util.Date $r8;
        long $l1;
        java.security.cert.Certificate[] $r9;
        java.lang.RuntimeException $r10;
        java.security.cert.Certificate $r11;
        java.security.Key $r12;
        byte[] $r13;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.io.OutputStream;

        $r3 = $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.util.Hashtable table>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration elements()>();

        $r2 = new java.io.DataOutputStream;

        specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r1);

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label9;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry) $r5;

        $i0 = virtualinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void write(int)>($i0);

        $r7 = virtualinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.String getAlias()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>($r7);

        $r8 = virtualinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.util.Date getDate()>();

        $l1 = virtualinvoke $r8.<java.util.Date: long getTime()>();

        virtualinvoke $r2.<java.io.DataOutputStream: void writeLong(long)>($l1);

        $r9 = virtualinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.security.cert.Certificate[] getCertificateChain()>();

        if $r9 != null goto label4;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>(0);

     label2:
        $i0 = virtualinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: int getType()>();

        lookupswitch($i0)
        {
            case 1: goto label6;
            case 2: goto label7;
            case 3: goto label8;
            case 4: goto label8;
            default: goto label3;
        };

     label3:
        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown object type in store.");

        throw $r10;

     label4:
        $i0 = lengthof $r9;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i0 = 0;

     label5:
        $i2 = lengthof $r9;

        if $i0 == $i2 goto label2;

        $r11 = $r9[$i0];

        specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void encodeCertificate(java.security.cert.Certificate,java.io.DataOutputStream)>($r11, $r2);

        $i0 = $i0 + 1;

        goto label5;

     label6:
        $r5 = virtualinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r11 = (java.security.cert.Certificate) $r5;

        specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void encodeCertificate(java.security.cert.Certificate,java.io.DataOutputStream)>($r11, $r2);

        goto label1;

     label7:
        $r5 = virtualinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r12 = (java.security.Key) $r5;

        specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyStore: void encodeKey(java.security.Key,java.io.DataOutputStream)>($r12, $r2);

        goto label1;

     label8:
        $r5 = virtualinvoke $r6.<org.bouncycastle.jce.provider.JDKKeyStore$StoreEntry: java.lang.Object getObject()>();

        $r13 = (byte[]) $r5;

        $r13 = (byte[]) $r13;

        $i0 = lengthof $r13;

        virtualinvoke $r2.<java.io.DataOutputStream: void writeInt(int)>($i0);

        virtualinvoke $r2.<java.io.FilterOutputStream: void write(byte[])>($r13);

        goto label1;

     label9:
        virtualinvoke $r2.<java.io.DataOutputStream: void write(int)>(0);

        return;
    }

    public void setRandom(java.security.SecureRandom)
    {
        org.bouncycastle.jce.provider.JDKKeyStore $r0;
        java.security.SecureRandom $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyStore;

        $r1 := @parameter0: java.security.SecureRandom;

        $r0.<org.bouncycastle.jce.provider.JDKKeyStore: java.security.SecureRandom random> = $r1;

        return;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.jce.provider.JDKKeyStore: int STORE_VERSION> = 1;

        <org.bouncycastle.jce.provider.JDKKeyStore: int STORE_SALT_SIZE> = 20;

        <org.bouncycastle.jce.provider.JDKKeyStore: java.lang.String STORE_CIPHER> = "PBEWithSHAAndTwofish-CBC";

        <org.bouncycastle.jce.provider.JDKKeyStore: int SECRET> = 3;

        <org.bouncycastle.jce.provider.JDKKeyStore: int SEALED> = 4;

        <org.bouncycastle.jce.provider.JDKKeyStore: int NULL> = 0;

        <org.bouncycastle.jce.provider.JDKKeyStore: int MIN_ITERATIONS> = 1024;

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY_SECRET> = 2;

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY_SALT_SIZE> = 20;

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY_PUBLIC> = 1;

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY_PRIVATE> = 0;

        <org.bouncycastle.jce.provider.JDKKeyStore: java.lang.String KEY_CIPHER> = "PBEWithSHAAnd3-KeyTripleDES-CBC";

        <org.bouncycastle.jce.provider.JDKKeyStore: int KEY> = 2;

        <org.bouncycastle.jce.provider.JDKKeyStore: int CERTIFICATE> = 1;

        return;
    }
}
