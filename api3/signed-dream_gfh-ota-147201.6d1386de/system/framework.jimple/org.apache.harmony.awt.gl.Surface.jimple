public abstract class org.apache.harmony.awt.gl.Surface extends java.lang.Object implements java.awt.Transparency
{
    private static final int ALPHA_MASK;
    private static final int BLUE_555_MASK;
    private static final int BLUE_565_MASK;
    private static final int BLUE_BGR_MASK;
    private static final int BLUE_MASK;
    public static final int BSM;
    public static final int CCM;
    public static final int CSM;
    public static final int Custom_CS;
    public static final int DCM;
    private static final int GREEN_555_MASK;
    private static final int GREEN_565_MASK;
    private static final int GREEN_BGR_MASK;
    private static final int GREEN_MASK;
    public static final int ICM;
    public static final int Linear_Gray_CS;
    public static final int Linear_RGB_CS;
    public static final int MPPSM;
    public static final int PISM;
    private static final int RED_555_MASK;
    private static final int RED_565_MASK;
    private static final int RED_BGR_MASK;
    private static final int RED_MASK;
    public static final int SPPSM;
    public static final int sRGB_CS;
    protected int height;
    protected long surfaceDataPtr;
    protected int transparency;
    private final java.util.ArrayList validCaches;
    protected int width;

    static void <clinit>()
    {
        <org.apache.harmony.awt.gl.Surface: int sRGB_CS> = 1;

        <org.apache.harmony.awt.gl.Surface: int SPPSM> = 1;

        <org.apache.harmony.awt.gl.Surface: int RED_MASK> = 16711680;

        <org.apache.harmony.awt.gl.Surface: int RED_BGR_MASK> = 255;

        <org.apache.harmony.awt.gl.Surface: int RED_565_MASK> = 63488;

        <org.apache.harmony.awt.gl.Surface: int RED_555_MASK> = 31744;

        <org.apache.harmony.awt.gl.Surface: int PISM> = 4;

        <org.apache.harmony.awt.gl.Surface: int MPPSM> = 2;

        <org.apache.harmony.awt.gl.Surface: int Linear_RGB_CS> = 2;

        <org.apache.harmony.awt.gl.Surface: int Linear_Gray_CS> = 3;

        <org.apache.harmony.awt.gl.Surface: int ICM> = 2;

        <org.apache.harmony.awt.gl.Surface: int GREEN_MASK> = 65280;

        <org.apache.harmony.awt.gl.Surface: int GREEN_BGR_MASK> = 65280;

        <org.apache.harmony.awt.gl.Surface: int GREEN_565_MASK> = 2016;

        <org.apache.harmony.awt.gl.Surface: int GREEN_555_MASK> = 992;

        <org.apache.harmony.awt.gl.Surface: int DCM> = 1;

        <org.apache.harmony.awt.gl.Surface: int Custom_CS> = 0;

        <org.apache.harmony.awt.gl.Surface: int CSM> = 3;

        <org.apache.harmony.awt.gl.Surface: int CCM> = 3;

        <org.apache.harmony.awt.gl.Surface: int BSM> = 5;

        <org.apache.harmony.awt.gl.Surface: int BLUE_MASK> = 255;

        <org.apache.harmony.awt.gl.Surface: int BLUE_BGR_MASK> = 16711680;

        <org.apache.harmony.awt.gl.Surface: int BLUE_565_MASK> = 31;

        <org.apache.harmony.awt.gl.Surface: int BLUE_555_MASK> = 31;

        <org.apache.harmony.awt.gl.Surface: int ALPHA_MASK> = -16777216;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.awt.gl.Surface $r0;
        java.util.ArrayList $r1;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.Surface: int transparency> = 1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.Surface: java.util.ArrayList validCaches> = $r1;

        return;
    }

    public static org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)
    {
        java.awt.Image $r0;
        org.apache.harmony.awt.gl.AwtImageBackdoorAccessor $r1;
        org.apache.harmony.awt.gl.Surface $r2;

        $r0 := @parameter0: java.awt.Image;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.AwtImageBackdoorAccessor: org.apache.harmony.awt.gl.AwtImageBackdoorAccessor getInstance()>();

        $r2 = virtualinvoke $r1.<org.apache.harmony.awt.gl.AwtImageBackdoorAccessor: org.apache.harmony.awt.gl.Surface getImageSurface(java.awt.Image)>($r0);

        return $r2;
    }

    public static int getType(java.awt.image.ColorModel, java.awt.image.WritableRaster)
    {
        java.awt.image.ColorModel $r0;
        java.awt.image.WritableRaster $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        java.awt.color.ColorSpace $r2, $r10;
        java.awt.image.SampleModel $r3;
        java.awt.image.DirectColorModel $r4;
        java.awt.image.IndexColorModel $r5;
        java.awt.image.ComponentColorModel $r6;
        java.awt.image.ComponentSampleModel $r7;
        int[] $r8, $r9;

        $r0 := @parameter0: java.awt.image.ColorModel;

        $r1 := @parameter1: java.awt.image.WritableRaster;

        $i0 = virtualinvoke $r0.<java.awt.image.ColorModel: int getTransferType()>();

        $z0 = virtualinvoke $r0.<java.awt.image.ColorModel: boolean hasAlpha()>();

        $r2 = virtualinvoke $r0.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $i1 = virtualinvoke $r2.<java.awt.color.ColorSpace: int getType()>();

        $r3 = virtualinvoke $r1.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        if $i1 != 5 goto label22;

        $z1 = $r0 instanceof java.awt.image.DirectColorModel;

        if $z1 == 0 goto label10;

        $r4 = (java.awt.image.DirectColorModel) $r0;

        lookupswitch($i0)
        {
            case 1: goto label08;
            case 2: goto label01;
            case 3: goto label02;
            default: goto label01;
        };

     label01:
        return 0;

     label02:
        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getRedMask()>();

        if $i0 != 16711680 goto label06;

        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getGreenMask()>();

        if $i0 != 65280 goto label06;

        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getBlueMask()>();

        if $i0 != 255 goto label06;

        if $z0 != 0 goto label03;

        return 1;

     label03:
        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getAlphaMask()>();

        if $i0 != -16777216 goto label05;

        $z0 = virtualinvoke $r4.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z0 == 0 goto label04;

        return 3;

     label04:
        return 2;

     label05:
        return 0;

     label06:
        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getRedMask()>();

        if $i0 != 255 goto label07;

        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getGreenMask()>();

        if $i0 != 65280 goto label07;

        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getBlueMask()>();

        if $i0 != 16711680 goto label07;

        if $z0 != 0 goto label08;

        return 4;

     label07:
        return 0;

     label08:
        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getRedMask()>();

        if $i0 != 31744 goto label09;

        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getGreenMask()>();

        if $i0 != 992 goto label09;

        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getBlueMask()>();

        if $i0 != 31 goto label09;

        if $z0 != 0 goto label09;

        return 9;

     label09:
        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getRedMask()>();

        if $i0 != 63488 goto label01;

        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getGreenMask()>();

        if $i0 != 2016 goto label01;

        $i0 = virtualinvoke $r4.<java.awt.image.DirectColorModel: int getBlueMask()>();

        if $i0 != 31 goto label01;

        return 8;

     label10:
        $z1 = $r0 instanceof java.awt.image.IndexColorModel;

        if $z1 == 0 goto label13;

        $r5 = (java.awt.image.IndexColorModel) $r0;

        $i1 = virtualinvoke $r5.<java.awt.image.ColorModel: int getPixelSize()>();

        if $i0 != 0 goto label12;

        $z1 = $r3 instanceof java.awt.image.MultiPixelPackedSampleModel;

        if $z1 == 0 goto label11;

        if $z0 != 0 goto label11;

        if $i1 >= 5 goto label11;

        return 12;

     label11:
        if $i1 != 8 goto label12;

        return 13;

     label12:
        return 0;

     label13:
        $z0 = $r0 instanceof java.awt.image.ComponentColorModel;

        if $z0 == 0 goto label21;

        $r6 = (java.awt.image.ComponentColorModel) $r0;

        if $i0 != 0 goto label20;

        $z0 = $r3 instanceof java.awt.image.ComponentSampleModel;

        if $z0 == 0 goto label20;

        $r7 = (java.awt.image.ComponentSampleModel) $r3;

        $r8 = virtualinvoke $r7.<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>();

        $r9 = virtualinvoke $r6.<java.awt.image.ColorModel: int[] getComponentSize()>();

        $i0 = 0;

     label14:
        $i1 = lengthof $r9;

        if $i0 >= $i1 goto label27;

        $i1 = $r9[$i0];

        if $i1 != 8 goto label15;

        $i1 = $r8[$i0];

        $i2 = lengthof $r8;

        $i2 = $i2 - 1;

        $i2 = $i2 - $i0;

        if $i1 == $i2 goto label17;

     label15:
        $z0 = 1;

     label16:
        if $z0 != 0 goto label20;

        $z0 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 != 0 goto label18;

        return 5;

     label17:
        $i0 = $i0 + 1;

        goto label14;

     label18:
        $z0 = virtualinvoke $r6.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z0 == 0 goto label19;

        return 7;

     label19:
        return 6;

     label20:
        return 0;

     label21:
        return 0;

     label22:
        $r10 = <org.apache.harmony.awt.gl.color.LUTColorConverter: java.awt.color.ColorSpace LINEAR_GRAY_CS>;

        if $r2 != $r10 goto label26;

        $z0 = $r0 instanceof java.awt.image.ComponentColorModel;

        if $z0 == 0 goto label25;

        $i1 = virtualinvoke $r0.<java.awt.image.ColorModel: int getNumComponents()>();

        if $i1 != 1 goto label25;

        $r8 = virtualinvoke $r0.<java.awt.image.ColorModel: int[] getComponentSize()>();

        if $i0 != 0 goto label23;

        $i1 = $r8[0];

        if $i1 != 8 goto label23;

        return 10;

     label23:
        if $i0 != 1 goto label24;

        $i0 = $r8[0];

        if $i0 != 16 goto label24;

        return 11;

     label24:
        return 0;

     label25:
        return 0;

     label26:
        return 0;

     label27:
        $z0 = 0;

        goto label16;
    }

    public static boolean isGrayPallete(java.awt.image.IndexColorModel)
    {
        java.awt.image.IndexColorModel $r0;
        org.apache.harmony.awt.gl.AwtImageBackdoorAccessor $r1;
        boolean $z0;

        $r0 := @parameter0: java.awt.image.IndexColorModel;

        $r1 = staticinvoke <org.apache.harmony.awt.gl.AwtImageBackdoorAccessor: org.apache.harmony.awt.gl.AwtImageBackdoorAccessor getInstance()>();

        $z0 = virtualinvoke $r1.<org.apache.harmony.awt.gl.AwtImageBackdoorAccessor: boolean isGrayPallete(java.awt.image.IndexColorModel)>($r0);

        return $z0;
    }

    public final void addValidCache(java.lang.Object)
    {
        org.apache.harmony.awt.gl.Surface $r0;
        java.lang.Object $r1;
        java.util.ArrayList $r2;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        $r1 := @parameter0: java.lang.Object;

        $r2 = $r0.<org.apache.harmony.awt.gl.Surface: java.util.ArrayList validCaches>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        return;
    }

    protected final void clearValidCaches()
    {
        org.apache.harmony.awt.gl.Surface $r0;
        java.util.ArrayList $r1;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        $r1 = $r0.<org.apache.harmony.awt.gl.Surface: java.util.ArrayList validCaches>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        return;
    }

    public abstract void dispose();

    protected void finalize() throws java.lang.Throwable
    {
        org.apache.harmony.awt.gl.Surface $r0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.Surface: void dispose()>();

        return;
    }

    public abstract java.awt.image.ColorModel getColorModel();

    public java.lang.Object getData()
    {
        org.apache.harmony.awt.gl.Surface $r0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        return null;
    }

    public int getHeight()
    {
        org.apache.harmony.awt.gl.Surface $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        i0 = $r0.<org.apache.harmony.awt.gl.Surface: int height>;

        return i0;
    }

    public abstract org.apache.harmony.awt.gl.Surface getImageSurface();

    public abstract java.awt.image.WritableRaster getRaster();

    public long getSurfaceDataPtr()
    {
        org.apache.harmony.awt.gl.Surface $r0;
        long l0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        l0 = $r0.<org.apache.harmony.awt.gl.Surface: long surfaceDataPtr>;

        return l0;
    }

    public abstract int getSurfaceType();

    public int getTransparency()
    {
        org.apache.harmony.awt.gl.Surface $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        i0 = $r0.<org.apache.harmony.awt.gl.Surface: int transparency>;

        return i0;
    }

    public int getWidth()
    {
        org.apache.harmony.awt.gl.Surface $r0;
        int i0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        i0 = $r0.<org.apache.harmony.awt.gl.Surface: int width>;

        return i0;
    }

    public void invalidate()
    {
        org.apache.harmony.awt.gl.Surface $r0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        return;
    }

    public boolean invalidated()
    {
        org.apache.harmony.awt.gl.Surface $r0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        return 1;
    }

    public final boolean isCaheValid(java.lang.Object)
    {
        org.apache.harmony.awt.gl.Surface $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.ArrayList $r2;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        $r1 := @parameter0: java.lang.Object;

        $r2 = $r0.<org.apache.harmony.awt.gl.Surface: java.util.ArrayList validCaches>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean isNativeDrawable()
    {
        org.apache.harmony.awt.gl.Surface $r0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        return 1;
    }

    public abstract long lock();

    public abstract void unlock();

    public void validate()
    {
        org.apache.harmony.awt.gl.Surface $r0;

        $r0 := @this: org.apache.harmony.awt.gl.Surface;

        return;
    }
}
