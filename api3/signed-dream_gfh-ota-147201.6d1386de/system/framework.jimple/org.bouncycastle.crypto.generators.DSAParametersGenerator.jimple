public class org.bouncycastle.crypto.generators.DSAParametersGenerator extends java.lang.Object
{
    private static java.math.BigInteger ONE;
    private static java.math.BigInteger TWO;
    private int certainty;
    private java.security.SecureRandom random;
    private int size;

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(1L);

        <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE> = $r0;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(2L);

        <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO> = $r0;

        return;
    }

    public void <init>()
    {
        org.bouncycastle.crypto.generators.DSAParametersGenerator $r0;

        $r0 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void add(byte[], byte[], int)
    {
        org.bouncycastle.crypto.generators.DSAParametersGenerator $r0;
        byte[] $r1, $r2;
        int $i0, $i1;
        byte $b2;
        short $s3;

        $r0 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: byte[];

        $i0 := @parameter2: int;

        $i1 = lengthof $r2;

        $i1 = $i1 - 1;

        $b2 = $r2[$i1];

        $s3 = $b2 & 255;

        $i0 = $s3 + $i0;

        $i1 = lengthof $r2;

        $i1 = $i1 - 1;

        $b2 = (byte) $i0;

        $r1[$i1] = $b2;

        $i0 = $i0 >>> 8;

        $i1 = lengthof $r2;

        $i1 = $i1 - 2;

     label1:
        if $i1 < 0 goto label2;

        $b2 = $r2[$i1];

        $s3 = $b2 & 255;

        $i0 = $i0 + $s3;

        $b2 = (byte) $i0;

        $r1[$i1] = $b2;

        $i0 = $i0 >>> 8;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        return;
    }

    public org.bouncycastle.crypto.params.DSAParameters generateParameters()
    {
        org.bouncycastle.crypto.generators.DSAParametersGenerator $r0;
        java.math.BigInteger $r1, $r3, $r9, $r11, $r12;
        org.bouncycastle.crypto.digests.SHA1Digest $r2;
        byte[] $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i8;
        boolean $z0, $z1;
        java.security.SecureRandom $r10;
        byte $b3, $b4;
        org.bouncycastle.crypto.params.DSAParameters $r13;
        org.bouncycastle.crypto.params.DSAValidationParameters $r14;

        $r0 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        $r4 = newarray (byte)[20];

        $r5 = newarray (byte)[20];

        $r6 = newarray (byte)[20];

        $r7 = newarray (byte)[20];

        $r2 = new org.bouncycastle.crypto.digests.SHA1Digest;

        specialinvoke $r2.<org.bouncycastle.crypto.digests.SHA1Digest: void <init>()>();

        $i0 = $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int size>;

        $i0 = $i0 - 1;

        $i0 = $i0 / 160;

        $i1 = $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int size>;

        $i1 = $i1 / 8;

        $r8 = newarray (byte)[$i1];

        $r9 = null;

        $r3 = null;

        $i1 = 0;

        $z0 = 0;

     label01:
        if $z0 != 0 goto label09;

     label02:
        $r10 = $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        virtualinvoke $r10.<java.security.SecureRandom: void nextBytes(byte[])>($r4);

        $i1 = lengthof $r4;

        virtualinvoke $r2.<org.bouncycastle.crypto.digests.GeneralDigest: void update(byte[],int,int)>($r4, 0, $i1);

        virtualinvoke $r2.<org.bouncycastle.crypto.digests.SHA1Digest: int doFinal(byte[],int)>($r5, 0);

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r6, 0, $i1);

        specialinvoke $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: void add(byte[],byte[],int)>($r6, $r4, 1);

        $i1 = lengthof $r6;

        virtualinvoke $r2.<org.bouncycastle.crypto.digests.GeneralDigest: void update(byte[],int,int)>($r6, 0, $i1);

        virtualinvoke $r2.<org.bouncycastle.crypto.digests.SHA1Digest: int doFinal(byte[],int)>($r6, 0);

        $i1 = 0;

     label03:
        $i2 = lengthof $r7;

        if $i1 == $i2 goto label04;

        $b3 = $r5[$i1];

        $b4 = $r6[$i1];

        $b3 = $b3 ^ $b4;

        $b3 = (byte) $b3;

        $r7[$i1] = $b3;

        $i1 = $i1 + 1;

        goto label03;

     label04:
        $b3 = $r7[0];

        $b3 = $b3 | -128;

        $b3 = (byte) $b3;

        $r7[0] = $b3;

        $b3 = $r7[19];

        $b3 = $b3 | 1;

        $b3 = (byte) $b3;

        $r7[19] = $b3;

        $r9 = new java.math.BigInteger;

        specialinvoke $r9.<java.math.BigInteger: void <init>(int,byte[])>(1, $r7);

        $i1 = $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int certainty>;

        $z1 = virtualinvoke $r9.<java.math.BigInteger: boolean isProbablePrime(int)>($i1);

        if $z1 == 0 goto label02;

        $i1 = 0;

        $i2 = 2;

     label05:
        if $i1 >= 4096 goto label01;

        $i5 = 0;

     label06:
        if $i5 >= $i0 goto label07;

        $i6 = $i2 + $i5;

        specialinvoke $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: void add(byte[],byte[],int)>($r5, $r4, $i6);

        $i6 = lengthof $r5;

        virtualinvoke $r2.<org.bouncycastle.crypto.digests.GeneralDigest: void update(byte[],int,int)>($r5, 0, $i6);

        virtualinvoke $r2.<org.bouncycastle.crypto.digests.SHA1Digest: int doFinal(byte[],int)>($r5, 0);

        $i6 = lengthof $r8;

        $i7 = $i5 + 1;

        $i8 = lengthof $r5;

        $i7 = $i7 * $i8;

        $i6 = $i6 - $i7;

        $i7 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, $r8, $i6, $i7);

        $i5 = $i5 + 1;

        goto label06;

     label07:
        $i5 = $i2 + $i0;

        specialinvoke $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: void add(byte[],byte[],int)>($r5, $r4, $i5);

        $i5 = lengthof $r5;

        virtualinvoke $r2.<org.bouncycastle.crypto.digests.GeneralDigest: void update(byte[],int,int)>($r5, 0, $i5);

        virtualinvoke $r2.<org.bouncycastle.crypto.digests.SHA1Digest: int doFinal(byte[],int)>($r5, 0);

        $i5 = lengthof $r5;

        $i6 = lengthof $r8;

        $i7 = lengthof $r5;

        $i7 = $i7 * $i0;

        $i6 = $i6 - $i7;

        $i5 = $i5 - $i6;

        $i6 = lengthof $r8;

        $i7 = lengthof $r5;

        $i7 = $i7 * $i0;

        $i6 = $i6 - $i7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i5, $r8, 0, $i6);

        $b3 = $r8[0];

        $b3 = $b3 | -128;

        $b3 = (byte) $b3;

        $r8[0] = $b3;

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, $r8);

        $r11 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger TWO>;

        $r11 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11);

        $r11 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r11);

        $r1 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r11 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r1);

        $r11 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $r3 = $r11;

        $i5 = $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int size>;

        $i5 = $i5 - 1;

        $z1 = virtualinvoke $r11.<java.math.BigInteger: boolean testBit(int)>($i5);

        if $z1 == 0 goto label08;

        $i5 = $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int certainty>;

        $z1 = virtualinvoke $r11.<java.math.BigInteger: boolean isProbablePrime(int)>($i5);

        if $z1 == 0 goto label08;

        $z0 = 1;

        goto label01;

     label08:
        $i1 = $i1 + 1;

        $i5 = $i0 + 1;

        $i2 = $i2 + $i5;

        goto label05;

     label09:
        $r11 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r11 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r11);

        $r11 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r9);

     label10:
        $r1 = new java.math.BigInteger;

        $i0 = $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int size>;

        $r10 = $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random>;

        specialinvoke $r1.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r10);

        $r12 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i0 <= 0 goto label10;

        $r12 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $r12 = virtualinvoke $r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r12);

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i0 >= 0 goto label10;

        $r1 = virtualinvoke $r1.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r11, $r3);

        $r12 = <org.bouncycastle.crypto.generators.DSAParametersGenerator: java.math.BigInteger ONE>;

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r12);

        if $i0 <= 0 goto label10;

        $r13 = new org.bouncycastle.crypto.params.DSAParameters;

        $r14 = new org.bouncycastle.crypto.params.DSAValidationParameters;

        specialinvoke $r14.<org.bouncycastle.crypto.params.DSAValidationParameters: void <init>(byte[],int)>($r4, $i1);

        specialinvoke $r13.<org.bouncycastle.crypto.params.DSAParameters: void <init>(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.crypto.params.DSAValidationParameters)>($r3, $r9, $r1, $r14);

        return $r13;
    }

    public void init(int, int, java.security.SecureRandom)
    {
        org.bouncycastle.crypto.generators.DSAParametersGenerator $r0;
        int $i0, $i1;
        java.security.SecureRandom $r1;

        $r0 := @this: org.bouncycastle.crypto.generators.DSAParametersGenerator;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: java.security.SecureRandom;

        $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int size> = $i0;

        $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: int certainty> = $i1;

        $r0.<org.bouncycastle.crypto.generators.DSAParametersGenerator: java.security.SecureRandom random> = $r1;

        return;
    }
}
