public class org.apache.harmony.nio.internal.ServerSocketChannelImpl extends java.nio.channels.ServerSocketChannel implements org.apache.harmony.luni.platform.FileDescriptorHandler
{
    private static final int SERVER_STATUS_CLOSED;
    private static final int SERVER_STATUS_OPEN;
    private static final int SERVER_STATUS_UNINIT;
    private final java.lang.Object acceptLock;
    private final java.io.FileDescriptor fd;
    private final java.net.SocketImpl impl;
    boolean isBound;
    private final java.net.ServerSocket socket;
    int status;

    private void <init>() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r0;
        java.nio.channels.spi.SelectorProvider $r1;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$AcceptLock $r2;
        java.io.FileDescriptor $r3;
        java.net.SocketImpl $r4;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r5;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        $r1 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>();

        specialinvoke $r0.<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>($r1);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: int status> = -1;

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: boolean isBound> = 0;

        $r2 = new org.apache.harmony.nio.internal.ServerSocketChannelImpl$AcceptLock;

        specialinvoke $r2.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$AcceptLock: void <init>(org.apache.harmony.nio.internal.ServerSocketChannelImpl,org.apache.harmony.nio.internal.ServerSocketChannelImpl$1)>($r0, null);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.lang.Object acceptLock> = $r2;

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: int status> = 0;

        $r3 = new java.io.FileDescriptor;

        specialinvoke $r3.<java.io.FileDescriptor: void <init>()>();

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.io.FileDescriptor fd> = $r3;

        $r3 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.io.FileDescriptor fd>;

        $r4 = staticinvoke <org.apache.harmony.luni.net.SocketImplProvider: java.net.SocketImpl getServerSocketImpl(java.io.FileDescriptor)>($r3);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.SocketImpl impl> = $r4;

        $r5 = new org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r4 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.SocketImpl impl>;

        specialinvoke $r5.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: void <init>(org.apache.harmony.nio.internal.ServerSocketChannelImpl,java.net.SocketImpl,org.apache.harmony.nio.internal.ServerSocketChannelImpl)>($r0, $r4, $r0);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.ServerSocket socket> = $r5;

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: boolean isBound> = 0;

        return;
    }

    public void <init>(java.nio.channels.spi.SelectorProvider) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r0;
        java.nio.channels.spi.SelectorProvider $r1;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$AcceptLock $r2;
        java.io.FileDescriptor $r3;
        org.apache.harmony.luni.platform.INetworkSystem $r4;
        boolean $z0;
        java.net.SocketImpl $r5;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r6;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        $r1 := @parameter0: java.nio.channels.spi.SelectorProvider;

        specialinvoke $r0.<java.nio.channels.ServerSocketChannel: void <init>(java.nio.channels.spi.SelectorProvider)>($r1);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: int status> = -1;

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: boolean isBound> = 0;

        $r2 = new org.apache.harmony.nio.internal.ServerSocketChannelImpl$AcceptLock;

        specialinvoke $r2.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$AcceptLock: void <init>(org.apache.harmony.nio.internal.ServerSocketChannelImpl,org.apache.harmony.nio.internal.ServerSocketChannelImpl$1)>($r0, null);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.lang.Object acceptLock> = $r2;

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: int status> = 0;

        $r3 = new java.io.FileDescriptor;

        specialinvoke $r3.<java.io.FileDescriptor: void <init>()>();

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.io.FileDescriptor fd> = $r3;

        $r4 = staticinvoke <org.apache.harmony.luni.platform.Platform: org.apache.harmony.luni.platform.INetworkSystem getNetworkSystem()>();

        $r3 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.io.FileDescriptor fd>;

        $z0 = staticinvoke <org.apache.harmony.luni.net.NetUtil: boolean preferIPv4Stack()>();

        interfaceinvoke $r4.<org.apache.harmony.luni.platform.INetworkSystem: void createServerStreamSocket(java.io.FileDescriptor,boolean)>($r3, $z0);

        $r3 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.io.FileDescriptor fd>;

        $r5 = staticinvoke <org.apache.harmony.luni.net.SocketImplProvider: java.net.SocketImpl getServerSocketImpl(java.io.FileDescriptor)>($r3);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.SocketImpl impl> = $r5;

        $r6 = new org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter;

        $r5 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.SocketImpl impl>;

        specialinvoke $r6.<org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: void <init>(org.apache.harmony.nio.internal.ServerSocketChannelImpl,java.net.SocketImpl,org.apache.harmony.nio.internal.ServerSocketChannelImpl)>($r0, $r5, $r0);

        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.ServerSocket socket> = $r6;

        return;
    }

    public java.nio.channels.SocketChannel accept() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r0;
        java.lang.Object $r1, $r6;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r2;
        java.nio.channels.NotYetBoundException $r3;
        java.nio.channels.SocketChannel $r4;
        java.net.Socket $r5;
        org.apache.harmony.luni.platform.INetworkSystem $r7;
        java.io.FileDescriptor[] $r8, $r10;
        java.io.FileDescriptor $r9;
        int[] $r11;
        int $i0;
        java.net.ServerSocket $r12;
        org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter $r13;
        org.apache.harmony.nio.internal.SocketChannelImpl $r14;
        java.net.SocketTimeoutException $r15;
        java.lang.Throwable $r16, $r17, $r18;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        $z0 = virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>();

        if $z0 != 0 goto label01;

        $r2 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r2.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r2;

     label01:
        $z0 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: boolean isBound>;

        if $z0 != 0 goto label02;

        $r3 = new java.nio.channels.NotYetBoundException;

        specialinvoke $r3.<java.nio.channels.NotYetBoundException: void <init>()>();

        throw $r3;

     label02:
        $r4 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>();

        $r5 = virtualinvoke $r4.<java.nio.channels.SocketChannel: java.net.Socket socket()>();

     label03:
        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void begin()>();

        $r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.lang.Object acceptLock>;

        entermonitor $r1;

     label04:
        $r6 = virtualinvoke $r0.<java.nio.channels.spi.AbstractSelectableChannel: java.lang.Object blockingLock()>();

        entermonitor $r6;

     label05:
        $z0 = virtualinvoke $r0.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

        if $z0 != 0 goto label09;

        $r7 = staticinvoke <org.apache.harmony.luni.platform.Platform: org.apache.harmony.luni.platform.INetworkSystem getNetworkSystem()>();

        $r8 = newarray (java.io.FileDescriptor)[1];

        $r9 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.io.FileDescriptor fd>;

        $r8[0] = $r9;

        $r10 = newarray (java.io.FileDescriptor)[0];

        $r11 = interfaceinvoke $r7.<org.apache.harmony.luni.platform.INetworkSystem: int[] select(java.io.FileDescriptor[],java.io.FileDescriptor[],long)>($r8, $r10, 0L);

        $i0 = lengthof $r11;

        if $i0 == 0 goto label06;

        $i0 = $r11[0];

        if $i0 != 0 goto label09;

     label06:
        exitmonitor $r6;

     label07:
        exitmonitor $r1;

     label08:
        $z0 = virtualinvoke $r5.<java.net.Socket: boolean isConnected()>();

        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        return null;

     label09:
        $r12 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.ServerSocket socket>;

        $r13 = (org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter) $r12;

        $r14 = (org.apache.harmony.nio.internal.SocketChannelImpl) $r4;

     label10:
        staticinvoke <org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter: java.net.Socket access$100(org.apache.harmony.nio.internal.ServerSocketChannelImpl$ServerSocketAdapter,java.net.Socket,org.apache.harmony.nio.internal.SocketChannelImpl)>($r13, $r5, $r14);

     label11:
        exitmonitor $r6;

     label12:
        exitmonitor $r1;

     label13:
        $z0 = virtualinvoke $r5.<java.net.Socket: boolean isConnected()>();

        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        return $r4;

     label14:
        $r15 := @caughtexception;

        if $z0 != 0 goto label09;

        goto label11;

     label15:
        $r16 := @caughtexception;

     label16:
        exitmonitor $r6;

     label17:
        throw $r16;

     label18:
        $r17 := @caughtexception;

        exitmonitor $r1;

     label19:
        throw $r17;

     label20:
        $r18 := @caughtexception;

        $z0 = virtualinvoke $r5.<java.net.Socket: boolean isConnected()>();

        virtualinvoke $r0.<java.nio.channels.spi.AbstractInterruptibleChannel: void end(boolean)>($z0);

        throw $r18;

        catch java.lang.Throwable from label03 to label04 with label20;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label05 to label07 with label15;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.net.SocketTimeoutException from label10 to label11 with label14;
        catch java.lang.Throwable from label09 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label17 to label19 with label18;
        catch java.lang.Throwable from label19 to label20 with label20;
    }

    public java.io.FileDescriptor getFD()
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r0;
        java.io.FileDescriptor r1;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.io.FileDescriptor fd>;

        return r1;
    }

    protected void implCloseSelectableChannel() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r0;
        boolean $z0;
        java.net.ServerSocket $r1;
        java.lang.Throwable $r2;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        entermonitor $r0;

     label1:
        $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: int status> = 1;

        $r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.ServerSocket socket>;

        $z0 = virtualinvoke $r1.<java.net.ServerSocket: boolean isClosed()>();

        if $z0 != 0 goto label2;

        $r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.ServerSocket socket>;

        virtualinvoke $r1.<java.net.ServerSocket: void close()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void implConfigureBlocking(boolean) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        $z0 := @parameter0: boolean;

        return;
    }

    public java.net.ServerSocket socket()
    {
        org.apache.harmony.nio.internal.ServerSocketChannelImpl $r0;
        java.net.ServerSocket r1;

        $r0 := @this: org.apache.harmony.nio.internal.ServerSocketChannelImpl;

        r1 = $r0.<org.apache.harmony.nio.internal.ServerSocketChannelImpl: java.net.ServerSocket socket>;

        return r1;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.nio.internal.ServerSocketChannelImpl: int SERVER_STATUS_UNINIT> = -1;

        <org.apache.harmony.nio.internal.ServerSocketChannelImpl: int SERVER_STATUS_OPEN> = 0;

        <org.apache.harmony.nio.internal.ServerSocketChannelImpl: int SERVER_STATUS_CLOSED> = 1;

        return;
    }
}
