public class org.apache.commons.logging.impl.Jdk14Logger extends java.lang.Object implements java.io.Serializable, org.apache.commons.logging.Log
{
    protected static final java.util.logging.Level dummyLevel;
    protected transient java.util.logging.Logger logger;
    protected java.lang.String name;

    static void <clinit>()
    {
        java.util.logging.Level $r0;

        $r0 = <java.util.logging.Level: java.util.logging.Level FINE>;

        <org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Level dummyLevel> = $r0;

        return;
    }

    public void <init>(java.lang.String)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger logger> = null;

        $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.lang.String name> = null;

        $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.lang.String name> = $r1;

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>();

        $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger logger> = $r2;

        return;
    }

    private void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.util.logging.Level $r1;
        java.lang.String $r2, $r8, $r9;
        java.lang.Throwable $r3, $r5;
        java.lang.StackTraceElement $r4;
        java.util.logging.Logger $r6;
        boolean $z0;
        java.lang.StackTraceElement[] $r7;
        int $i0;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.util.logging.Level;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Throwable;

        $r6 = virtualinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>();

        $z0 = virtualinvoke $r6.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label3;

        $r5 = new java.lang.Throwable;

        specialinvoke $r5.<java.lang.Throwable: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $r8 = "unknown";

        $r9 = "unknown";

        if $r7 == null goto label1;

        $i0 = lengthof $r7;

        if $i0 <= 2 goto label1;

        $r4 = $r7[2];

        $r8 = virtualinvoke $r4.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r9 = virtualinvoke $r4.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

     label1:
        if $r3 != null goto label2;

        virtualinvoke $r6.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String)>($r1, $r8, $r9, $r2);

        return;

     label2:
        virtualinvoke $r6.<java.util.logging.Logger: void logp(java.util.logging.Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>($r1, $r8, $r9, $r2, $r3);

        return;

     label3:
        return;
    }

    public void debug(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.util.logging.Level $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void debug(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.util.logging.Level $r3;
        java.lang.String $r4;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r4, $r2);

        return;
    }

    public void error(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.util.logging.Level $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void error(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.util.logging.Level $r3;
        java.lang.String $r4;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r4, $r2);

        return;
    }

    public void fatal(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.util.logging.Level $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void fatal(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.util.logging.Level $r3;
        java.lang.String $r4;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r4, $r2);

        return;
    }

    public java.util.logging.Logger getLogger()
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.util.logging.Logger $r1;
        java.lang.String $r2;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 = $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger logger>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.lang.String name>;

        $r1 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger logger> = $r1;

     label1:
        $r1 = $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger logger>;

        return $r1;
    }

    public void info(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.util.logging.Level $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void info(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.util.logging.Level $r3;
        java.lang.String $r4;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r4, $r2);

        return;
    }

    public boolean isDebugEnabled()
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.util.logging.Level $r1;
        java.util.logging.Logger $r2;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>();

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isErrorEnabled()
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.util.logging.Level $r1;
        java.util.logging.Logger $r2;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>();

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isFatalEnabled()
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.util.logging.Level $r1;
        java.util.logging.Logger $r2;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>();

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isInfoEnabled()
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.util.logging.Level $r1;
        java.util.logging.Logger $r2;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>();

        $r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isTraceEnabled()
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.util.logging.Level $r1;
        java.util.logging.Logger $r2;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>();

        $r1 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isWarnEnabled()
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.util.logging.Level $r1;
        java.util.logging.Logger $r2;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r2 = virtualinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>();

        $r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public void trace(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.util.logging.Level $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void trace(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.util.logging.Level $r3;
        java.lang.String $r4;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r4, $r2);

        return;
    }

    public void warn(java.lang.Object)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.util.logging.Level $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, $r3, null);

        return;
    }

    public void warn(java.lang.Object, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.Jdk14Logger $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.util.logging.Level $r3;
        java.lang.String $r4;

        $r0 := @this: org.apache.commons.logging.impl.Jdk14Logger;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r0.<org.apache.commons.logging.impl.Jdk14Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r4, $r2);

        return;
    }
}
