public class org.bouncycastle.jce.provider.JCEIESCipher extends org.bouncycastle.jce.provider.WrapCipherSpi
{
    private java.lang.Class[] availableSpecs;
    private java.io.ByteArrayOutputStream buffer;
    private org.bouncycastle.crypto.engines.IESEngine cipher;
    private java.security.AlgorithmParameters engineParam;
    private org.bouncycastle.jce.spec.IESParameterSpec engineParams;
    private int state;

    public void <init>(org.bouncycastle.crypto.engines.IESEngine)
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        org.bouncycastle.crypto.engines.IESEngine $r1;
        java.io.ByteArrayOutputStream $r2;
        java.lang.Class[] $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 := @parameter0: org.bouncycastle.crypto.engines.IESEngine;

        specialinvoke $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void <init>()>();

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state> = -1;

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>();

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer> = $r2;

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam> = null;

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams> = null;

        $r3 = newarray (java.lang.Class)[1];

        $r3[0] = class "org/bouncycastle/jce/spec/IESParameterSpec";

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.lang.Class[] availableSpecs> = $r3;

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher> = $r1;

        return;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.io.ByteArrayOutputStream $r3;
        org.bouncycastle.crypto.engines.IESEngine $r4;
        org.bouncycastle.crypto.InvalidCipherTextException $r5;
        javax.crypto.BadPaddingException $r6;
        java.lang.String $r7;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        if $i1 == 0 goto label1;

        $r3 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

     label1:
        $r3 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

     label2:
        $r1 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r3 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void reset()>();

     label3:
        $r4 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher>;

     label4:
        $i0 = lengthof $r1;

        $r1 = virtualinvoke $r4.<org.bouncycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i2, $i0);

     label5:
        $i0 = lengthof $r1;

        return $i0;

     label6:
        $r5 := @caughtexception;

        $r6 = new javax.crypto.BadPaddingException;

        $r7 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch org.bouncycastle.crypto.InvalidCipherTextException from label2 to label3 with label6;
        catch org.bouncycastle.crypto.InvalidCipherTextException from label4 to label5 with label6;
    }

    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r2;
        org.bouncycastle.crypto.engines.IESEngine $r3;
        org.bouncycastle.crypto.InvalidCipherTextException $r4;
        javax.crypto.BadPaddingException $r5;
        java.lang.String $r6;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i1 == 0 goto label1;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

     label1:
        $r2 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

     label2:
        $r1 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void reset()>();

     label3:
        $r3 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher>;

     label4:
        $i0 = lengthof $r1;

        $r1 = virtualinvoke $r3.<org.bouncycastle.crypto.engines.IESEngine: byte[] processBlock(byte[],int,int)>($r1, 0, $i0);

     label5:
        return $r1;

     label6:
        $r4 := @caughtexception;

        $r5 = new javax.crypto.BadPaddingException;

        $r6 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<javax.crypto.BadPaddingException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch org.bouncycastle.crypto.InvalidCipherTextException from label2 to label3 with label6;
        catch org.bouncycastle.crypto.InvalidCipherTextException from label4 to label5 with label6;
    }

    protected int engineGetBlockSize()
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        return null;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        java.security.Key $r1;
        org.bouncycastle.jce.interfaces.IESKey $r2;
        java.security.PrivateKey $r3;
        boolean $z0;
        javax.crypto.interfaces.DHPrivateKey $r4;
        java.math.BigInteger $r5;
        int $i0;
        java.lang.IllegalArgumentException $r6;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 := @parameter0: java.security.Key;

        $r2 = (org.bouncycastle.jce.interfaces.IESKey) $r1;

        $r3 = interfaceinvoke $r2.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $z0 = $r3 instanceof javax.crypto.interfaces.DHPrivateKey;

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke $r2.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $r4 = (javax.crypto.interfaces.DHPrivateKey) $r3;

        $r5 = interfaceinvoke $r4.<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()>();

        $i0 = virtualinvoke $r5.<java.math.BigInteger: int bitLength()>();

        return $i0;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not an IE key!");

        throw $r6;
    }

    protected int engineGetOutputSize(int)
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r1;
        java.lang.IllegalStateException $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $i0 := @parameter0: int;

        $i1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state>;

        if $i1 == 1 goto label1;

        $i1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state>;

        if $i1 != 3 goto label2;

     label1:
        $r1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        $i1 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        $i0 = $i1 + $i0;

        $i0 = $i0 + 20;

        return $i0;

     label2:
        $i1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state>;

        if $i1 == 2 goto label3;

        $i1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state>;

        if $i1 != 4 goto label4;

     label3:
        $r1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        $i1 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>();

        $i0 = $i1 + $i0;

        $i0 = $i0 - 20;

        return $i0;

     label4:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("cipher not initialised");

        throw $r2;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        java.security.AlgorithmParameters $r1;
        org.bouncycastle.jce.spec.IESParameterSpec $r2;
        java.lang.Exception $r3;
        java.lang.RuntimeException $r4;
        java.lang.String $r5;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam>;

        if $r1 != null goto label2;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        if $r2 == null goto label2;

     label1:
        $r1 = staticinvoke <java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)>("IES", "BC");

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam> = $r1;

        $r1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam>;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        virtualinvoke $r1.<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)>($r2);

     label2:
        $r1 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam>;

        return $r1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        $r5 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r4;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        int $i0, $i1, $i2;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.security.spec.AlgorithmParameterSpec $r4;
        java.lang.Class[] $r5;
        java.lang.Class $r6;
        java.security.InvalidAlgorithmParameterException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        java.lang.Exception $r10;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        $r4 = null;

        if $r2 == null goto label5;

        $i1 = 0;

     label1:
        $r5 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.lang.Class[] availableSpecs>;

        $i2 = lengthof $r5;

        if $i1 == $i2 goto label3;

     label2:
        $r5 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.lang.Class[] availableSpecs>;

        $r6 = $r5[$i1];

        $r4 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r6);

     label3:
        if $r4 != null goto label5;

        $r7 = new java.security.InvalidAlgorithmParameterException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r9 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label4:
        $r10 := @caughtexception;

        $i1 = $i1 + 1;

        goto label1;

     label5:
        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.security.AlgorithmParameters engineParam> = $r2;

        virtualinvoke $r0.<org.bouncycastle.jce.provider.JCEIESCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, $r4, $r3);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.security.InvalidAlgorithmParameterException $r3;
        java.lang.IllegalArgumentException $r4;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

        if $i0 == 1 goto label1;

        if $i0 != 3 goto label4;

     label1:
        virtualinvoke $r0.<org.bouncycastle.jce.provider.JCEIESCipher: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("can\'t handle null parameter spec in IES");

        throw $r4;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        int $i0, $i1;
        java.security.Key $r1;
        byte[] $r2, $r3;
        org.bouncycastle.crypto.params.IESParameters $r4, r20;
        java.security.spec.AlgorithmParameterSpec $r5;
        java.security.SecureRandom $r6, r19;
        boolean $z0;
        org.bouncycastle.jce.interfaces.IESKey $r8;
        java.security.PublicKey $r9;
        org.bouncycastle.crypto.params.AsymmetricKeyParameter $r10, $r12;
        java.security.PrivateKey $r11;
        org.bouncycastle.jce.spec.IESParameterSpec $r13;
        java.io.ByteArrayOutputStream $r14;
        java.io.PrintStream $r15;
        org.bouncycastle.crypto.engines.IESEngine $r17;
        java.security.InvalidKeyException r18;
        java.security.InvalidAlgorithmParameterException r21;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r5 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r6 := @parameter3: java.security.SecureRandom;

        $z0 = $r1 instanceof org.bouncycastle.jce.interfaces.IESKey;

        if $z0 != 0 goto label1;

        r18 = new java.security.InvalidKeyException;

        specialinvoke r18.<java.security.InvalidKeyException: void <init>(java.lang.String)>("must be passed IE key");

        throw r18;

     label1:
        if $r5 != null goto label6;

        if $i0 == 1 goto label2;

        if $i0 != 3 goto label6;

     label2:
        $r2 = newarray (byte)[16];

        $r3 = newarray (byte)[16];

        if $r6 != null goto label3;

        r19 = new java.security.SecureRandom;

        $r6 = r19;

        specialinvoke r19.<java.security.SecureRandom: void <init>()>();

     label3:
        virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>($r2);

        virtualinvoke $r6.<java.security.SecureRandom: void nextBytes(byte[])>($r3);

        $r13 = new org.bouncycastle.jce.spec.IESParameterSpec;

        $r5 = $r13;

        specialinvoke $r13.<org.bouncycastle.jce.spec.IESParameterSpec: void <init>(byte[],byte[],int)>($r2, $r3, 128);

     label4:
        $r8 = (org.bouncycastle.jce.interfaces.IESKey) $r1;

        $r9 = interfaceinvoke $r8.<org.bouncycastle.jce.interfaces.IESKey: java.security.PublicKey getPublic()>();

        $r10 = staticinvoke <org.bouncycastle.jce.provider.DHUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePublicKeyParameter(java.security.PublicKey)>($r9);

        $r11 = interfaceinvoke $r8.<org.bouncycastle.jce.interfaces.IESKey: java.security.PrivateKey getPrivate()>();

        $r12 = staticinvoke <org.bouncycastle.jce.provider.DHUtil: org.bouncycastle.crypto.params.AsymmetricKeyParameter generatePrivateKeyParameter(java.security.PrivateKey)>($r11);

        $r13 = (org.bouncycastle.jce.spec.IESParameterSpec) $r5;

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams> = $r13;

        r20 = new org.bouncycastle.crypto.params.IESParameters;

        $r4 = r20;

        $r13 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        $r2 = virtualinvoke $r13.<org.bouncycastle.jce.spec.IESParameterSpec: byte[] getDerivationV()>();

        $r13 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        $r3 = virtualinvoke $r13.<org.bouncycastle.jce.spec.IESParameterSpec: byte[] getEncodingV()>();

        $r13 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.jce.spec.IESParameterSpec engineParams>;

        $i1 = virtualinvoke $r13.<org.bouncycastle.jce.spec.IESParameterSpec: int getMacKeySize()>();

        specialinvoke r20.<org.bouncycastle.crypto.params.IESParameters: void <init>(byte[],byte[],int)>($r2, $r3, $i1);

        $r0.<org.bouncycastle.jce.provider.JCEIESCipher: int state> = $i0;

        $r14 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r14.<java.io.ByteArrayOutputStream: void reset()>();

        lookupswitch($i0)
        {
            case 1: goto label7;
            case 2: goto label8;
            case 3: goto label7;
            case 4: goto label8;
            default: goto label5;
        };

     label5:
        $r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

        return;

     label6:
        $z0 = $r5 instanceof org.bouncycastle.jce.spec.IESParameterSpec;

        if $z0 != 0 goto label4;

        r21 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r21.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("must be passed IES parameters");

        throw r21;

     label7:
        $r17 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher>;

        virtualinvoke $r17.<org.bouncycastle.crypto.engines.IESEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)>(1, $r12, $r10, $r4);

        return;

     label8:
        $r17 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: org.bouncycastle.crypto.engines.IESEngine cipher>;

        virtualinvoke $r17.<org.bouncycastle.crypto.engines.IESEngine: void init(boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)>(0, $r12, $r10, $r4);

        return;
    }

    protected void engineSetMode(java.lang.String)
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        java.lang.String $r1;
        javax.crypto.NoSuchPaddingException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 := @parameter0: java.lang.String;

        $r2 = new javax.crypto.NoSuchPaddingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unavailable with RSA.");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    protected int engineUpdate(byte[], int, int, byte[], int)
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.io.ByteArrayOutputStream $r3;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return 0;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        org.bouncycastle.jce.provider.JCEIESCipher $r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.ByteArrayOutputStream $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEIESCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEIESCipher: java.io.ByteArrayOutputStream buffer>;

        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r1, $i0, $i1);

        return null;
    }
}
