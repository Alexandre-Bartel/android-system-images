public abstract class org.apache.harmony.xnet.provider.jsse.ConnectionState extends java.lang.Object
{
    protected javax.crypto.Cipher decCipher;
    protected javax.crypto.Cipher encCipher;
    protected int hash_size;
    protected boolean is_block_cipher;
    protected org.apache.harmony.xnet.provider.jsse.Logger$Stream logger;
    protected final byte[] read_seq_num;
    protected final byte[] write_seq_num;

    public void <init>()
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionState $r0;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r1;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionState;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] write_seq_num> = $r2;

        $r2 = newarray (byte)[8];

        $r2[0] = 0;

        $r2[1] = 0;

        $r2[2] = 0;

        $r2[3] = 0;

        $r2[4] = 0;

        $r2[5] = 0;

        $r2[6] = 0;

        $r2[7] = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] read_seq_num> = $r2;

        $r1 = staticinvoke <org.apache.harmony.xnet.provider.jsse.Logger: org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(java.lang.String)>("conn_state");

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger> = $r1;

        return;
    }

    protected static void incSequenceNumber(byte[])
    {
        byte[] $r0;
        int $i0, $i2;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 = 7;

     label1:
        if $i0 < 0 goto label2;

        $b1 = $r0[$i0];

        $i2 = $b1 + 1;

        $b1 = (byte) $i2;

        $r0[$i0] = $b1;

        $b1 = $r0[$i0];

        if $b1 != 0 goto label3;

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return;

     label3:
        return;
    }

    protected byte[] decrypt(byte, byte[])
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionState $r0;
        byte $b0;
        byte[] $r1;
        int $i1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionState;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 = lengthof $r1;

        $r1 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] decrypt(byte,byte[],int,int)>($b0, $r1, 0, $i1);

        return $r1;
    }

    protected abstract byte[] decrypt(byte, byte[], int, int);

    protected byte[] encrypt(byte, byte[])
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionState $r0;
        byte $b0;
        byte[] $r1;
        int $i1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionState;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 = lengthof $r1;

        $r1 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] encrypt(byte,byte[],int,int)>($b0, $r1, 0, $i1);

        return $r1;
    }

    protected abstract byte[] encrypt(byte, byte[], int, int);

    protected int getContentSize(int)
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionState $r0;
        int $i0, $i1;
        javax.crypto.Cipher $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionState;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher>;

        $i1 = virtualinvoke $r1.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i0 = $i1 - $i0;

        return $i0;
    }

    protected int getFragmentSize(int)
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionState $r0;
        int $i0, $i1;
        javax.crypto.Cipher $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionState;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i0 = $i1 + $i0;

        $i0 = virtualinvoke $r1.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        return $i0;
    }

    protected int getMinFragmentSize()
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionState $r0;
        int $i0;
        javax.crypto.Cipher $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionState;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i0 = $i0 + 1;

        $i0 = virtualinvoke $r1.<javax.crypto.Cipher: int getOutputSize(int)>($i0);

        return $i0;
    }

    protected void shutdown()
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionState $r0;
        int $i0, $i1;
        byte[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionState;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher> = null;

        $i0 = 0;

     label1:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] write_seq_num>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] write_seq_num>;

        $r1[$i0] = 0;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] read_seq_num>;

        $r1[$i0] = 0;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }
}
