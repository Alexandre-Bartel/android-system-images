public class org.apache.harmony.awt.gl.render.JavaTextRenderer extends org.apache.harmony.awt.gl.TextRenderer
{
    public static final org.apache.harmony.awt.gl.render.JavaTextRenderer inst;

    static void <clinit>()
    {
        org.apache.harmony.awt.gl.render.JavaTextRenderer $r0;

        $r0 = new org.apache.harmony.awt.gl.render.JavaTextRenderer;

        specialinvoke $r0.<org.apache.harmony.awt.gl.render.JavaTextRenderer: void <init>()>();

        <org.apache.harmony.awt.gl.render.JavaTextRenderer: org.apache.harmony.awt.gl.render.JavaTextRenderer inst> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.awt.gl.render.JavaTextRenderer $r0;

        $r0 := @this: org.apache.harmony.awt.gl.render.JavaTextRenderer;

        specialinvoke $r0.<org.apache.harmony.awt.gl.TextRenderer: void <init>()>();

        return;
    }

    public void drawClipGlyphVector(java.awt.image.WritableRaster, java.lang.Object, java.awt.font.GlyphVector, int, int, int, int, int, int)
    {
        org.apache.harmony.awt.gl.render.JavaTextRenderer $r0;
        java.awt.image.WritableRaster $r1;
        java.lang.Object $r2;
        java.awt.font.GlyphVector $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        byte $b6;
        org.apache.harmony.awt.gl.font.Glyph $r4;
        org.apache.harmony.awt.gl.font.CommonGlyphVector $r5;
        org.apache.harmony.awt.gl.font.Glyph[] $r6;
        byte[] $r7;
        java.awt.geom.Point2D $r8;
        double $d0;
        java.awt.font.GlyphMetrics $r9;
        float $f0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.render.JavaTextRenderer;

        $r1 := @parameter0: java.awt.image.WritableRaster;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.awt.font.GlyphVector;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $i4 := @parameter7: int;

        $i5 := @parameter8: int;

        $i8 = 0;

     label01:
        $i9 = virtualinvoke $r3.<java.awt.font.GlyphVector: int getNumGlyphs()>();

        if $i8 >= $i9 goto label14;

        $r5 = (org.apache.harmony.awt.gl.font.CommonGlyphVector) $r3;

        $r6 = $r5.<org.apache.harmony.awt.gl.font.CommonGlyphVector: org.apache.harmony.awt.gl.font.Glyph[] vector>;

        $r4 = $r6[$i8];

        $i9 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.Glyph: int getPointWidth()>();

        if $i9 != 0 goto label03;

     label02:
        $i8 = $i8 + 1;

        goto label01;

     label03:
        $r7 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.Glyph: byte[] getBitmap()>();

        if $r7 == null goto label02;

        $r8 = virtualinvoke $r3.<java.awt.font.GlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i8);

        $i9 = 0;

        $i10 = 0;

        $d0 = virtualinvoke $r8.<java.awt.geom.Point2D: double getX()>();

        $i11 = (int) $d0;

        $i11 = $i11 + $i0;

        $r9 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.Glyph: java.awt.font.GlyphMetrics getGlyphPointMetrics()>();

        $f0 = virtualinvoke $r9.<java.awt.font.GlyphMetrics: float getLSB()>();

        $i12 = (int) $f0;

        $i11 = $i11 + $i12;

        $i12 = $r4.<org.apache.harmony.awt.gl.font.Glyph: int bmp_top>;

        $i12 = $i1 - $i12;

        $d0 = virtualinvoke $r8.<java.awt.geom.Point2D: double getY()>();

        $i7 = (int) $d0;

        $i12 = $i12 + $i7;

        $i7 = $r4.<org.apache.harmony.awt.gl.font.Glyph: int bmp_width>;

        $i13 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.Glyph: int getPointHeight()>();

        if $i11 > $i4 goto label02;

        if $i12 > $i5 goto label02;

        $i14 = $i11 + $i7;

        if $i14 < $i2 goto label02;

        $i14 = $i12 + $i13;

        if $i14 < $i3 goto label02;

        if $i11 < $i2 goto label10;

        $i14 = $i4 - $i11;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i14);

     label04:
        if $i12 < $i3 goto label11;

        $i14 = $i5 - $i12;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i14);

     label05:
        $i14 = 0;

     label06:
        if $i14 >= $i13 goto label02;

        $i15 = 0;

     label07:
        if $i15 >= $i7 goto label13;

        $i16 = $i10 + $i14;

        $i17 = $r4.<org.apache.harmony.awt.gl.font.Glyph: int bmp_pitch>;

        $i16 = $i16 * $i17;

        $i17 = $i9 + $i15;

        $i17 = $i17 / 8;

        $i16 = $i16 + $i17;

        $b6 = $r7[$i16];

        $i16 = $i9 + $i15;

        $i16 = $i16 % 8;

        $i16 = 7 - $i16;

        $i16 = 1 << $i16;

        $i16 = $i16 & $b6;

        if $i16 == 0 goto label12;

        $z0 = 1;

     label08:
        if $z0 == 0 goto label09;

        $i16 = $i11 + $i15;

        $i17 = $i12 + $i14;

        virtualinvoke $r1.<java.awt.image.WritableRaster: void setDataElements(int,int,java.lang.Object)>($i16, $i17, $r2);

     label09:
        $i15 = $i15 + 1;

        goto label07;

     label10:
        $i9 = $i2 - $i11;

        $i9 = 0 + $i9;

        $i14 = $i4 - $i2;

        $i11 = $i2 - $i11;

        $i11 = $i7 - $i11;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i14, $i11);

        $i11 = $i2;

        goto label04;

     label11:
        $i10 = $i3 - $i12;

        $i10 = 0 + $i10;

        $i14 = $i5 - $i3;

        $i12 = $i3 - $i12;

        $i12 = $i13 - $i12;

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i14, $i12);

        $i12 = $i3;

        goto label05;

     label12:
        $z0 = 0;

        goto label08;

     label13:
        $i14 = $i14 + 1;

        goto label06;

     label14:
        return;
    }

    public void drawClipString(java.awt.image.WritableRaster, java.lang.Object, java.lang.String, org.apache.harmony.awt.gl.font.FontPeerImpl, int, int, int, int, int, int)
    {
        org.apache.harmony.awt.gl.render.JavaTextRenderer $r0;
        java.awt.image.WritableRaster $r1;
        java.lang.Object $r2;
        java.lang.String $r3;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        byte $b6;
        char $c7;
        char[] $r5;
        org.apache.harmony.awt.gl.font.Glyph $r6;
        java.awt.font.GlyphMetrics $r7, $r9;
        float $f0, $f1;
        byte[] $r8;
        boolean $z0;

        $r0 := @this: org.apache.harmony.awt.gl.render.JavaTextRenderer;

        $r1 := @parameter0: java.awt.image.WritableRaster;

        $r2 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: org.apache.harmony.awt.gl.font.FontPeerImpl;

        $i0 := @parameter4: int;

        $i1 := @parameter5: int;

        $i2 := @parameter6: int;

        $i3 := @parameter7: int;

        $i4 := @parameter8: int;

        $i5 := @parameter9: int;

        $r5 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        $i8 = $i0;

        $i0 = lengthof $r5;

        $i9 = 0;

     label01:
        if $i9 >= $i0 goto label17;

        $c7 = $r5[$i9];

        $r6 = virtualinvoke $r4.<org.apache.harmony.awt.gl.font.FontPeerImpl: org.apache.harmony.awt.gl.font.Glyph getGlyph(char)>($c7);

        $r7 = virtualinvoke $r6.<org.apache.harmony.awt.gl.font.Glyph: java.awt.font.GlyphMetrics getGlyphPointMetrics()>();

        $i10 = virtualinvoke $r6.<org.apache.harmony.awt.gl.font.Glyph: int getWidth()>();

        if $i10 != 0 goto label03;

        $f0 = (float) $i8;

        $f1 = virtualinvoke $r7.<java.awt.font.GlyphMetrics: float getAdvanceX()>();

        $f0 = $f0 + $f1;

        $i8 = (int) $f0;

     label02:
        $i9 = $i9 + 1;

        goto label01;

     label03:
        $r8 = virtualinvoke $r6.<org.apache.harmony.awt.gl.font.Glyph: byte[] getBitmap()>();

        if $r8 != null goto label04;

        $f0 = (float) $i8;

        $f1 = virtualinvoke $r7.<java.awt.font.GlyphMetrics: float getAdvanceX()>();

        $f0 = $f0 + $f1;

        $i8 = (int) $f0;

        goto label02;

     label04:
        $i10 = 0;

        $i11 = 0;

        $f0 = (float) $i8;

        $r9 = virtualinvoke $r6.<org.apache.harmony.awt.gl.font.Glyph: java.awt.font.GlyphMetrics getGlyphPointMetrics()>();

        $f1 = virtualinvoke $r9.<java.awt.font.GlyphMetrics: float getLSB()>();

        $f0 = $f0 + $f1;

        $i12 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $i13 = $i12;

        $i14 = $r6.<org.apache.harmony.awt.gl.font.Glyph: int bmp_top>;

        $i14 = $i1 - $i14;

        $i15 = $r6.<org.apache.harmony.awt.gl.font.Glyph: int bmp_width>;

        $i16 = virtualinvoke $r6.<org.apache.harmony.awt.gl.font.Glyph: int getPointHeight()>();

        if $i12 > $i4 goto label05;

        if $i14 > $i5 goto label05;

        $i17 = $i12 + $i15;

        if $i17 < $i2 goto label05;

        $i17 = $i14 + $i16;

        if $i17 >= $i3 goto label06;

     label05:
        $f0 = (float) $i8;

        $f1 = virtualinvoke $r7.<java.awt.font.GlyphMetrics: float getAdvanceX()>();

        $f0 = $f0 + $f1;

        $i8 = (int) $f0;

        goto label02;

     label06:
        if $i12 < $i2 goto label13;

        $i12 = $i4 - $i12;

        $i15 = staticinvoke <java.lang.Math: int min(int,int)>($i15, $i12);

     label07:
        if $i14 < $i3 goto label14;

        $i12 = $i5 - $i14;

        $i16 = staticinvoke <java.lang.Math: int min(int,int)>($i16, $i12);

     label08:
        $i12 = 0;

     label09:
        if $i12 >= $i16 goto label05;

        $i17 = 0;

     label10:
        if $i17 >= $i15 goto label16;

        $i18 = $i11 + $i12;

        $i19 = $r6.<org.apache.harmony.awt.gl.font.Glyph: int bmp_pitch>;

        $i18 = $i18 * $i19;

        $i19 = $i10 + $i17;

        $i19 = $i19 / 8;

        $i18 = $i18 + $i19;

        $b6 = $r8[$i18];

        $i18 = $i10 + $i17;

        $i18 = $i18 % 8;

        $i18 = 7 - $i18;

        $i18 = 1 << $i18;

        $i18 = $i18 & $b6;

        if $i18 == 0 goto label15;

        $z0 = 1;

     label11:
        if $z0 == 0 goto label12;

        $i18 = $i13 + $i17;

        $i19 = $i14 + $i12;

        virtualinvoke $r1.<java.awt.image.WritableRaster: void setDataElements(int,int,java.lang.Object)>($i18, $i19, $r2);

     label12:
        $i17 = $i17 + 1;

        goto label10;

     label13:
        $i10 = $i2 - $i12;

        $i10 = 0 + $i10;

        $i13 = $i4 - $i2;

        $i12 = $i2 - $i12;

        $i15 = $i15 - $i12;

        $i15 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i15);

        $i13 = $i2;

        goto label07;

     label14:
        $i11 = $i3 - $i14;

        $i11 = 0 + $i11;

        $i12 = $i5 - $i3;

        $i14 = $i3 - $i14;

        $i14 = $i16 - $i14;

        $i16 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i14);

        $i14 = $i3;

        goto label08;

     label15:
        $z0 = 0;

        goto label11;

     label16:
        $i12 = $i12 + 1;

        goto label09;

     label17:
        return;
    }

    public void drawGlyphVector(java.awt.Graphics2D, java.awt.font.GlyphVector, float, float)
    {
        org.apache.harmony.awt.gl.render.JavaTextRenderer $r0;
        java.awt.Graphics2D $r1;
        java.awt.font.GlyphVector $r2;
        float $f0, $f1;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7;
        java.awt.geom.AffineTransform $r3;
        java.awt.Rectangle $r4, $r8;
        double $d0, $d1;
        long $l1;
        org.apache.harmony.awt.gl.image.BufferedImageGraphics2D $r5;
        java.awt.image.WritableRaster $r6;
        java.awt.image.ColorModel $r7;
        java.awt.Color $r9;
        java.lang.Object $r10;

        $r0 := @this: org.apache.harmony.awt.gl.render.JavaTextRenderer;

        $r1 := @parameter0: java.awt.Graphics2D;

        $r2 := @parameter1: java.awt.font.GlyphVector;

        $f0 := @parameter2: float;

        $f1 := @parameter3: float;

        $r3 = virtualinvoke $r1.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r4 = virtualinvoke $r1.<java.awt.Graphics: java.awt.Rectangle getClipBounds()>();

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: int getType()>();

        if $i0 != 1 goto label1;

        $d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i0 = (int) $l1;

        $d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i2 = (int) $l1;

        virtualinvoke $r4.<java.awt.Rectangle: void translate(int,int)>($i0, $i2);

     label1:
        $r5 = (org.apache.harmony.awt.gl.image.BufferedImageGraphics2D) $r1;

        $r6 = virtualinvoke $r5.<org.apache.harmony.awt.gl.image.BufferedImageGraphics2D: java.awt.image.WritableRaster getWritableRaster()>();

        $r5 = (org.apache.harmony.awt.gl.image.BufferedImageGraphics2D) $r1;

        $r7 = virtualinvoke $r5.<org.apache.harmony.awt.gl.image.BufferedImageGraphics2D: java.awt.image.ColorModel getColorModel()>();

        $r8 = virtualinvoke $r6.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r9 = virtualinvoke $r1.<java.awt.Graphics: java.awt.Color getColor()>();

        $i0 = virtualinvoke $r9.<java.awt.Color: int getRGB()>();

        $r10 = virtualinvoke $r7.<java.awt.image.ColorModel: java.lang.Object getDataElements(int,java.lang.Object)>($i0, null);

        $d0 = (double) $f0;

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d0 = $d0 + $d1;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i0 = (int) $l1;

        $d0 = (double) $f1;

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d0 = $d0 + $d1;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i2 = (int) $l1;

        $i3 = $r4.<java.awt.Rectangle: int x>;

        $i4 = $r8.<java.awt.Rectangle: int x>;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);

        $i4 = $r4.<java.awt.Rectangle: int y>;

        $i5 = $r8.<java.awt.Rectangle: int y>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5);

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getMaxX()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i5 = (int) $l1;

        $d0 = virtualinvoke $r8.<java.awt.geom.RectangularShape: double getMaxX()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i6 = (int) $l1;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i6);

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getMaxY()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i6 = (int) $l1;

        $d0 = virtualinvoke $r8.<java.awt.geom.RectangularShape: double getMaxY()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i7 = (int) $l1;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.JavaTextRenderer: void drawClipGlyphVector(java.awt.image.WritableRaster,java.lang.Object,java.awt.font.GlyphVector,int,int,int,int,int,int)>($r6, $r10, $r2, $i0, $i2, $i3, $i4, $i5, $i6);

        return;
    }

    public void drawString(java.awt.Graphics2D, java.lang.String, float, float)
    {
        org.apache.harmony.awt.gl.render.JavaTextRenderer $r0;
        java.lang.String $r1;
        float $f0, $f1;
        java.awt.Graphics2D $r2;
        java.awt.geom.AffineTransform $r3;
        java.awt.Rectangle $r4, $r8;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7;
        double $d0, $d1;
        long $l1;
        org.apache.harmony.awt.gl.image.BufferedImageGraphics2D $r5;
        java.awt.image.WritableRaster $r6;
        java.awt.image.ColorModel $r7;
        java.awt.Color $r9;
        java.lang.Object $r10;
        java.awt.Font $r11;
        java.awt.peer.FontPeer $r12;
        org.apache.harmony.awt.gl.font.FontPeerImpl $r13;

        $r0 := @this: org.apache.harmony.awt.gl.render.JavaTextRenderer;

        $r2 := @parameter0: java.awt.Graphics2D;

        $r1 := @parameter1: java.lang.String;

        $f0 := @parameter2: float;

        $f1 := @parameter3: float;

        $r3 = virtualinvoke $r2.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r4 = virtualinvoke $r2.<java.awt.Graphics: java.awt.Rectangle getClipBounds()>();

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: int getType()>();

        if $i0 != 1 goto label1;

        $d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i0 = (int) $l1;

        $d0 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i2 = (int) $l1;

        virtualinvoke $r4.<java.awt.Rectangle: void translate(int,int)>($i0, $i2);

     label1:
        $r5 = (org.apache.harmony.awt.gl.image.BufferedImageGraphics2D) $r2;

        $r6 = virtualinvoke $r5.<org.apache.harmony.awt.gl.image.BufferedImageGraphics2D: java.awt.image.WritableRaster getWritableRaster()>();

        $r5 = (org.apache.harmony.awt.gl.image.BufferedImageGraphics2D) $r2;

        $r7 = virtualinvoke $r5.<org.apache.harmony.awt.gl.image.BufferedImageGraphics2D: java.awt.image.ColorModel getColorModel()>();

        $r8 = virtualinvoke $r6.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r9 = virtualinvoke $r2.<java.awt.Graphics: java.awt.Color getColor()>();

        $i0 = virtualinvoke $r9.<java.awt.Color: int getRGB()>();

        $r10 = virtualinvoke $r7.<java.awt.image.ColorModel: java.lang.Object getDataElements(int,java.lang.Object)>($i0, null);

        $r11 = virtualinvoke $r2.<java.awt.Graphics: java.awt.Font getFont()>();

        $r12 = virtualinvoke $r11.<java.awt.Font: java.awt.peer.FontPeer getPeer()>();

        $r13 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r12;

        $r13 = (org.apache.harmony.awt.gl.font.FontPeerImpl) $r13;

        $d0 = (double) $f0;

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d0 = $d0 + $d1;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i0 = (int) $l1;

        $d0 = (double) $f1;

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $d0 = $d0 + $d1;

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i2 = (int) $l1;

        $i3 = $r4.<java.awt.Rectangle: int x>;

        $i4 = $r8.<java.awt.Rectangle: int x>;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);

        $i4 = $r4.<java.awt.Rectangle: int y>;

        $i5 = $r8.<java.awt.Rectangle: int y>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5);

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getMaxX()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i5 = (int) $l1;

        $d0 = virtualinvoke $r8.<java.awt.geom.RectangularShape: double getMaxX()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i6 = (int) $l1;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i6);

        $d0 = virtualinvoke $r4.<java.awt.geom.RectangularShape: double getMaxY()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i6 = (int) $l1;

        $d0 = virtualinvoke $r8.<java.awt.geom.RectangularShape: double getMaxY()>();

        $l1 = staticinvoke <java.lang.Math: long round(double)>($d0);

        $i7 = (int) $l1;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        virtualinvoke $r0.<org.apache.harmony.awt.gl.render.JavaTextRenderer: void drawClipString(java.awt.image.WritableRaster,java.lang.Object,java.lang.String,org.apache.harmony.awt.gl.font.FontPeerImpl,int,int,int,int,int,int)>($r6, $r10, $r1, $r13, $i0, $i2, $i3, $i4, $i5, $i6);

        return;
    }
}
