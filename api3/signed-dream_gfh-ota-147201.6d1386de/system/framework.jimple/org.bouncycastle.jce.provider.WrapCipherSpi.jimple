public abstract class org.bouncycastle.jce.provider.WrapCipherSpi extends javax.crypto.CipherSpi implements org.bouncycastle.jce.provider.PBE
{
    private java.lang.Class[] availableSpecs;
    protected java.security.AlgorithmParameters engineParams;
    protected int pbeHash;
    protected int pbeIvSize;
    protected int pbeKeySize;
    protected int pbeType;
    protected org.bouncycastle.crypto.Wrapper wrapEngine;

    protected void <init>()
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        java.lang.Class[] $r1;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        specialinvoke $r0.<javax.crypto.CipherSpi: void <init>()>();

        $r1 = newarray (java.lang.Class)[4];

        $r1[0] = class "javax/crypto/spec/IvParameterSpec";

        $r1[1] = class "javax/crypto/spec/PBEParameterSpec";

        $r1[2] = class "javax/crypto/spec/RC2ParameterSpec";

        $r1[3] = class "javax/crypto/spec/RC5ParameterSpec";

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.lang.Class[] availableSpecs> = $r1;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int pbeType> = 2;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int pbeHash> = 1;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams> = null;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine> = null;

        return;
    }

    protected void <init>(org.bouncycastle.crypto.Wrapper)
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        org.bouncycastle.crypto.Wrapper $r1;
        java.lang.Class[] $r2;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: org.bouncycastle.crypto.Wrapper;

        specialinvoke $r0.<javax.crypto.CipherSpi: void <init>()>();

        $r2 = newarray (java.lang.Class)[4];

        $r2[0] = class "javax/crypto/spec/IvParameterSpec";

        $r2[1] = class "javax/crypto/spec/PBEParameterSpec";

        $r2[2] = class "javax/crypto/spec/RC2ParameterSpec";

        $r2[3] = class "javax/crypto/spec/RC5ParameterSpec";

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.lang.Class[] availableSpecs> = $r2;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int pbeType> = 2;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: int pbeHash> = 1;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams> = null;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine> = null;

        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine> = $r1;

        return;
    }

    protected int engineDoFinal(byte[], int, int, byte[], int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException, javax.crypto.ShortBufferException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        return 0;
    }

    protected byte[] engineDoFinal(byte[], int, int) throws javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        byte[] $r1;
        int $i0, $i1;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        return null;
    }

    protected int engineGetBlockSize()
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        return 0;
    }

    protected byte[] engineGetIV()
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        return null;
    }

    protected int engineGetKeySize(java.security.Key)
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        java.security.Key $r1;
        byte[] $r2;
        int $i0;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        $i0 = lengthof $r2;

        return $i0;
    }

    protected int engineGetOutputSize(int)
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        int $i0;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $i0 := @parameter0: int;

        return -1;
    }

    protected java.security.AlgorithmParameters engineGetParameters()
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        return null;
    }

    protected void engineInit(int, java.security.Key, java.security.AlgorithmParameters, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        int $i0, $i1, $i2;
        java.security.Key $r1;
        java.security.AlgorithmParameters $r2;
        java.security.SecureRandom $r3;
        java.security.spec.AlgorithmParameterSpec $r4;
        java.lang.Class[] $r5;
        java.lang.Class $r6;
        java.security.InvalidAlgorithmParameterException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        java.lang.Exception $r10;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.AlgorithmParameters;

        $r3 := @parameter3: java.security.SecureRandom;

        $r4 = null;

        if $r2 == null goto label5;

        $i1 = 0;

     label1:
        $r5 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.lang.Class[] availableSpecs>;

        $i2 = lengthof $r5;

        if $i1 == $i2 goto label3;

     label2:
        $r5 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.lang.Class[] availableSpecs>;

        $r6 = $r5[$i1];

        $r4 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>($r6);

     label3:
        if $r4 != null goto label5;

        $r7 = new java.security.InvalidAlgorithmParameterException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t handle parameter ");

        $r9 = virtualinvoke $r2.<java.security.AlgorithmParameters: java.lang.String toString()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>($r9);

        throw $r7;

     label4:
        $r10 := @caughtexception;

        $i1 = $i1 + 1;

        goto label1;

     label5:
        $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: java.security.AlgorithmParameters engineParams> = $r2;

        virtualinvoke $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, $r4, $r3);

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    protected void engineInit(int, java.security.Key, java.security.SecureRandom) throws java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        int $i0;
        java.security.Key $r1;
        java.security.SecureRandom $r2;
        java.lang.String $r3;
        java.security.InvalidAlgorithmParameterException $r4;
        java.lang.IllegalArgumentException $r5;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.SecureRandom;

     label1:
        virtualinvoke $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)>($i0, $r1, null, $r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        $r3 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r5;

        catch java.security.InvalidAlgorithmParameterException from label1 to label2 with label3;
    }

    protected void engineInit(int, java.security.Key, java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        int $i0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        java.security.SecureRandom $r3;
        boolean $z0;
        org.bouncycastle.jce.provider.JCEPBEKey $r5;
        org.bouncycastle.crypto.Wrapper $r6;
        java.lang.String $r7;
        org.bouncycastle.crypto.CipherParameters $r8;
        javax.crypto.spec.IvParameterSpec $r9;
        byte[] $r10;
        java.io.PrintStream $r11;
        org.bouncycastle.crypto.params.ParametersWithIV r14;
        java.security.InvalidAlgorithmParameterException r15;
        org.bouncycastle.crypto.params.KeyParameter r16;
        java.lang.IllegalArgumentException r17;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.Key;

        $r2 := @parameter2: java.security.spec.AlgorithmParameterSpec;

        $r3 := @parameter3: java.security.SecureRandom;

        $z0 = $r1 instanceof org.bouncycastle.jce.provider.JCEPBEKey;

        if $z0 == 0 goto label6;

        $r5 = (org.bouncycastle.jce.provider.JCEPBEKey) $r1;

        $z0 = $r2 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 == 0 goto label4;

        $r6 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        $r7 = interfaceinvoke $r6.<org.bouncycastle.crypto.Wrapper: java.lang.String getAlgorithmName()>();

        $r8 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec,java.lang.String)>($r5, $r2, $r7);

     label1:
        $z0 = $r2 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label2;

        $r9 = (javax.crypto.spec.IvParameterSpec) $r2;

        r14 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r10 = virtualinvoke $r9.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke r14.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>($r8, $r10);

        $r8 = r14;

     label2:
        lookupswitch($i0)
        {
            case 1: goto label9;
            case 2: goto label9;
            case 3: goto label7;
            case 4: goto label8;
            default: goto label3;
        };

     label3:
        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("eeek!");

        return;

     label4:
        $r8 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        if $r8 == null goto label5;

        $r8 = virtualinvoke $r5.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        goto label1;

     label5:
        r15 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r15.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw r15;

     label6:
        r16 = new org.bouncycastle.crypto.params.KeyParameter;

        $r8 = r16;

        $r10 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke r16.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r10);

        goto label1;

     label7:
        $r6 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.Wrapper: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r8);

        return;

     label8:
        $r6 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.Wrapper: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(0, $r8);

        return;

     label9:
        r17 = new java.lang.IllegalArgumentException;

        specialinvoke r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("engine only valid for wrapping");

        throw r17;
    }

    protected void engineSetMode(java.lang.String) throws java.security.NoSuchAlgorithmException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        java.lang.String $r1;
        java.security.NoSuchAlgorithmException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.security.NoSuchAlgorithmException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t support mode ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.security.NoSuchAlgorithmException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    protected void engineSetPadding(java.lang.String) throws javax.crypto.NoSuchPaddingException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        java.lang.String $r1;
        javax.crypto.NoSuchPaddingException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: java.lang.String;

        $r2 = new javax.crypto.NoSuchPaddingException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Padding ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown.");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<javax.crypto.NoSuchPaddingException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    protected java.security.Key engineUnwrap(byte[], java.lang.String, int) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        byte[] $r1;
        java.lang.String $r2;
        int $i0, $i1;
        org.bouncycastle.asn1.ASN1InputStream $r3, r27;
        org.bouncycastle.asn1.pkcs.PrivateKeyInfo $r4, r28;
        org.bouncycastle.crypto.Wrapper $r5;
        org.bouncycastle.crypto.InvalidCipherTextException $r7;
        javax.crypto.BadPaddingException $r9;
        javax.crypto.IllegalBlockSizeException $r10;
        boolean $z0;
        org.bouncycastle.asn1.DERObject $r11;
        org.bouncycastle.asn1.ASN1Sequence $r12;
        org.bouncycastle.asn1.x509.AlgorithmIdentifier $r13;
        org.bouncycastle.asn1.DERObjectIdentifier $r14, $r15;
        java.security.PrivateKey $r16;
        java.lang.Exception $r17;
        java.security.KeyFactory $r18;
        java.security.PublicKey $r20;
        java.security.NoSuchProviderException $r22;
        java.lang.StringBuilder $r23, r34;
        java.security.spec.InvalidKeySpecException $r24;
        javax.crypto.spec.SecretKeySpec r25;
        java.security.InvalidKeyException r26;
        org.bouncycastle.jce.provider.JDKDSAPrivateKey r29;
        org.bouncycastle.jce.provider.JCEDHPrivateKey r30;
        org.bouncycastle.jce.provider.JCERSAPrivateCrtKey r31;
        java.security.spec.X509EncodedKeySpec r32;
        java.security.spec.PKCS8EncodedKeySpec r33;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r5 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r5 != null goto label03;

        $i1 = lengthof $r1;

     label01:
        $r1 = virtualinvoke $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: byte[] engineDoFinal(byte[],int,int)>($r1, 0, $i1);

     label02:
        if $i0 != 3 goto label09;

        r25 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke r25.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, $r2);

        return r25;

     label03:
        $r5 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        $i1 = lengthof $r1;

     label04:
        $r1 = interfaceinvoke $r5.<org.bouncycastle.crypto.Wrapper: byte[] unwrap(byte[],int,int)>($r1, 0, $i1);

     label05:
        goto label02;

     label06:
        $r7 := @caughtexception;

        r26 = new java.security.InvalidKeyException;

        $r2 = virtualinvoke $r7.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw r26;

     label07:
        $r9 := @caughtexception;

        r26 = new java.security.InvalidKeyException;

        $r2 = virtualinvoke $r9.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw r26;

     label08:
        $r10 := @caughtexception;

        r26 = new java.security.InvalidKeyException;

        $r2 = virtualinvoke $r10.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw r26;

     label09:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label28;

        if $i0 != 2 goto label28;

        r27 = new org.bouncycastle.asn1.ASN1InputStream;

        $r3 = r27;

        specialinvoke r27.<org.bouncycastle.asn1.ASN1InputStream: void <init>(byte[])>($r1);

     label10:
        $r11 = virtualinvoke $r3.<org.bouncycastle.asn1.ASN1InputStream: org.bouncycastle.asn1.DERObject readObject()>();

        $r12 = (org.bouncycastle.asn1.ASN1Sequence) $r11;

     label11:
        r28 = new org.bouncycastle.asn1.pkcs.PrivateKeyInfo;

     label12:
        $r4 = r28;

        specialinvoke r28.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: void <init>(org.bouncycastle.asn1.ASN1Sequence)>($r12);

        $r13 = virtualinvoke $r4.<org.bouncycastle.asn1.pkcs.PrivateKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier getAlgorithmId()>();

        $r14 = virtualinvoke $r13.<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getObjectId()>();

        $r15 = <org.bouncycastle.asn1.x9.X9ObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier id_dsa>;

        $z0 = virtualinvoke $r14.<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)>($r15);

     label13:
        if $z0 == 0 goto label16;

        r29 = new org.bouncycastle.jce.provider.JDKDSAPrivateKey;

     label14:
        $r16 = r29;

        specialinvoke r29.<org.bouncycastle.jce.provider.JDKDSAPrivateKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r4);

     label15:
        return $r16;

     label16:
        $r15 = <org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier dhKeyAgreement>;

        $z0 = virtualinvoke $r14.<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)>($r15);

     label17:
        if $z0 == 0 goto label20;

        r30 = new org.bouncycastle.jce.provider.JCEDHPrivateKey;

     label18:
        $r16 = r30;

        specialinvoke r30.<org.bouncycastle.jce.provider.JCEDHPrivateKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r4);

     label19:
        goto label15;

     label20:
        $r15 = <org.bouncycastle.asn1.x9.X9ObjectIdentifiers: org.bouncycastle.asn1.DERObjectIdentifier dhpublicnumber>;

        $z0 = virtualinvoke $r14.<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)>($r15);

     label21:
        if $z0 == 0 goto label24;

        r30 = new org.bouncycastle.jce.provider.JCEDHPrivateKey;

     label22:
        $r16 = r30;

        specialinvoke r30.<org.bouncycastle.jce.provider.JCEDHPrivateKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r4);

     label23:
        goto label15;

     label24:
        r31 = new org.bouncycastle.jce.provider.JCERSAPrivateCrtKey;

     label25:
        $r16 = r31;

        specialinvoke r31.<org.bouncycastle.jce.provider.JCERSAPrivateCrtKey: void <init>(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)>($r4);

     label26:
        goto label15;

     label27:
        $r17 := @caughtexception;

        r26 = new java.security.InvalidKeyException;

        specialinvoke r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Invalid key encoding.");

        throw r26;

     label28:
        $r18 = staticinvoke <java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)>($r2, "BC");

     label29:
        if $i0 != 1 goto label32;

        r32 = new java.security.spec.X509EncodedKeySpec;

     label30:
        specialinvoke r32.<java.security.spec.X509EncodedKeySpec: void <init>(byte[])>($r1);

        $r20 = virtualinvoke $r18.<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)>(r32);

     label31:
        return $r20;

     label32:
        if $i0 != 2 goto label37;

        r33 = new java.security.spec.PKCS8EncodedKeySpec;

     label33:
        specialinvoke r33.<java.security.spec.PKCS8EncodedKeySpec: void <init>(byte[])>($r1);

        $r16 = virtualinvoke $r18.<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)>(r33);

     label34:
        return $r16;

     label35:
        $r22 := @caughtexception;

        r26 = new java.security.InvalidKeyException;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r2 = virtualinvoke $r22.<java.lang.Throwable: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw r26;

     label36:
        $r24 := @caughtexception;

        r26 = new java.security.InvalidKeyException;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r2 = virtualinvoke $r24.<java.lang.Throwable: java.lang.String getMessage()>();

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw r26;

     label37:
        r26 = new java.security.InvalidKeyException;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown key type ");

        $r23 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r26.<java.security.InvalidKeyException: void <init>(java.lang.String)>($r2);

        throw r26;

        catch org.bouncycastle.crypto.InvalidCipherTextException from label01 to label02 with label06;
        catch javax.crypto.BadPaddingException from label01 to label02 with label07;
        catch javax.crypto.IllegalBlockSizeException from label01 to label02 with label08;
        catch org.bouncycastle.crypto.InvalidCipherTextException from label04 to label05 with label06;
        catch javax.crypto.BadPaddingException from label04 to label05 with label07;
        catch javax.crypto.IllegalBlockSizeException from label04 to label05 with label08;
        catch java.lang.Exception from label10 to label11 with label27;
        catch java.lang.Exception from label12 to label13 with label27;
        catch java.lang.Exception from label14 to label15 with label27;
        catch java.lang.Exception from label16 to label17 with label27;
        catch java.lang.Exception from label18 to label19 with label27;
        catch java.lang.Exception from label20 to label21 with label27;
        catch java.lang.Exception from label22 to label23 with label27;
        catch java.lang.Exception from label25 to label26 with label27;
        catch java.security.NoSuchProviderException from label28 to label29 with label35;
        catch java.security.NoSuchProviderException from label30 to label31 with label35;
        catch java.security.NoSuchProviderException from label33 to label34 with label35;
        catch java.security.spec.InvalidKeySpecException from label28 to label29 with label36;
        catch java.security.spec.InvalidKeySpecException from label30 to label31 with label36;
        catch java.security.spec.InvalidKeySpecException from label33 to label34 with label36;
    }

    protected int engineUpdate(byte[], int, int, byte[], int) throws javax.crypto.ShortBufferException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2;
        java.lang.RuntimeException $r3;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("not supported for wrapping");

        throw $r3;
    }

    protected byte[] engineUpdate(byte[], int, int)
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        byte[] $r1;
        int $i0, $i1;
        java.lang.RuntimeException $r2;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("not supported for wrapping");

        throw $r2;
    }

    protected byte[] engineWrap(java.security.Key) throws javax.crypto.IllegalBlockSizeException, java.security.InvalidKeyException
    {
        org.bouncycastle.jce.provider.WrapCipherSpi $r0;
        java.security.Key $r1;
        int $i0;
        byte[] $r2;
        java.security.InvalidKeyException $r3;
        org.bouncycastle.crypto.Wrapper $r4;
        javax.crypto.BadPaddingException $r5;
        javax.crypto.IllegalBlockSizeException $r6;
        java.lang.String $r7;

        $r0 := @this: org.bouncycastle.jce.provider.WrapCipherSpi;

        $r1 := @parameter0: java.security.Key;

        $r2 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        if $r2 != null goto label1;

        $r3 = new java.security.InvalidKeyException;

        specialinvoke $r3.<java.security.InvalidKeyException: void <init>(java.lang.String)>("Cannot wrap key, null encoding.");

        throw $r3;

     label1:
        $r4 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

        if $r4 != null goto label4;

        $i0 = lengthof $r2;

     label2:
        $r2 = virtualinvoke $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: byte[] engineDoFinal(byte[],int,int)>($r2, 0, $i0);

     label3:
        return $r2;

     label4:
        $r4 = $r0.<org.bouncycastle.jce.provider.WrapCipherSpi: org.bouncycastle.crypto.Wrapper wrapEngine>;

     label5:
        $i0 = lengthof $r2;

        $r2 = interfaceinvoke $r4.<org.bouncycastle.crypto.Wrapper: byte[] wrap(byte[],int,int)>($r2, 0, $i0);

     label6:
        return $r2;

     label7:
        $r5 := @caughtexception;

        $r6 = new javax.crypto.IllegalBlockSizeException;

        $r7 = virtualinvoke $r5.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r6.<javax.crypto.IllegalBlockSizeException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch javax.crypto.BadPaddingException from label2 to label3 with label7;
        catch javax.crypto.BadPaddingException from label5 to label6 with label7;
    }
}
