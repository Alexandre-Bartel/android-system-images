public class org.apache.http.impl.client.BasicCredentialsProvider extends java.lang.Object implements org.apache.http.client.CredentialsProvider
{
    private final java.util.HashMap credMap;

    public void <init>()
    {
        org.apache.http.impl.client.BasicCredentialsProvider $r0;
        java.util.HashMap $r1;

        $r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        $r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap> = $r1;

        return;
    }

    private static org.apache.http.auth.Credentials matchCredentials(java.util.HashMap, org.apache.http.auth.AuthScope)
    {
        java.util.HashMap $r0;
        org.apache.http.auth.AuthScope $r1, $r4, $r7;
        java.lang.Object $r2;
        org.apache.http.auth.Credentials $r3;
        int $i0, $i1;
        java.util.Set $r5;
        java.util.Iterator $r6;
        boolean $z0;

        $r0 := @parameter0: java.util.HashMap;

        $r1 := @parameter1: org.apache.http.auth.AuthScope;

        $r2 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (org.apache.http.auth.Credentials) $r2;

        if $r3 != null goto label3;

        $i0 = -1;

        $r4 = null;

        $r5 = virtualinvoke $r0.<java.util.HashMap: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.http.auth.AuthScope) $r2;

        $i1 = virtualinvoke $r1.<org.apache.http.auth.AuthScope: int match(org.apache.http.auth.AuthScope)>($r7);

        if $i1 <= $i0 goto label1;

        $i0 = $i1;

        $r4 = $r7;

        goto label1;

     label2:
        if $r4 == null goto label4;

        $r2 = virtualinvoke $r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        $r3 = (org.apache.http.auth.Credentials) $r2;

        return $r3;

     label3:
        return $r3;

     label4:
        return $r3;
    }

    public void clear()
    {
        org.apache.http.impl.client.BasicCredentialsProvider $r0;
        java.util.HashMap $r1;
        java.lang.Throwable $r2;

        $r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        entermonitor $r0;

     label1:
        $r1 = $r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope)
    {
        org.apache.http.impl.client.BasicCredentialsProvider $r0;
        org.apache.http.auth.AuthScope $r1;
        org.apache.http.auth.Credentials $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Throwable $r4;
        java.util.HashMap $r5;

        $r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        $r1 := @parameter0: org.apache.http.auth.AuthScope;

        entermonitor $r0;

        if $r1 != null goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scope may not be null");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

     label3:
        $r5 = $r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap>;

        $r2 = staticinvoke <org.apache.http.impl.client.BasicCredentialsProvider: org.apache.http.auth.Credentials matchCredentials(java.util.HashMap,org.apache.http.auth.AuthScope)>($r5, $r1);

     label4:
        exitmonitor $r0;

        return $r2;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void setCredentials(org.apache.http.auth.AuthScope, org.apache.http.auth.Credentials)
    {
        org.apache.http.impl.client.BasicCredentialsProvider $r0;
        org.apache.http.auth.AuthScope $r1;
        org.apache.http.auth.Credentials $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.Throwable $r4;
        java.util.HashMap $r5;

        $r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        $r1 := @parameter0: org.apache.http.auth.AuthScope;

        $r2 := @parameter1: org.apache.http.auth.Credentials;

        entermonitor $r0;

        if $r1 != null goto label3;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication scope may not be null");

        throw $r3;

     label2:
        $r4 := @caughtexception;

        exitmonitor $r0;

        throw $r4;

     label3:
        $r5 = $r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

     label4:
        exitmonitor $r0;

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public java.lang.String toString()
    {
        org.apache.http.impl.client.BasicCredentialsProvider $r0;
        java.lang.String $r1;
        java.util.HashMap $r2;

        $r0 := @this: org.apache.http.impl.client.BasicCredentialsProvider;

        $r2 = $r0.<org.apache.http.impl.client.BasicCredentialsProvider: java.util.HashMap credMap>;

        $r1 = virtualinvoke $r2.<java.util.AbstractMap: java.lang.String toString()>();

        return $r1;
    }
}
