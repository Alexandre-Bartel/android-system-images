public class org.apache.harmony.security.utils.Array extends java.lang.Object
{

    private void <init>()
    {
        org.apache.harmony.security.utils.Array $r0;

        $r0 := @this: org.apache.harmony.security.utils.Array;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toString(byte[], java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.StringBuilder $r1, $r4;
        byte[] $r2;
        java.lang.String $r3, $r5, $r6;
        int $i0, $i1;
        byte $b2;
        short $s3;
        char $c4;
        boolean $z0;

        $r2 := @parameter0: byte[];

        $r3 := @parameter1: java.lang.String;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "";

        $r0[1] = "000";

        $r0[2] = "00";

        $r0[3] = "0";

        $r0[4] = "";

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $i0 = 0;

     label01:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label07;

        $i1 = $i0 % 16;

        if $i1 != 0 goto label02;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        $r6 = $r0[$i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i1 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i1);

     label02:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $b2 = $r2[$i0];

        $s3 = $b2 & 255;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($s3);

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 1 goto label03;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label03:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i1 = $s3 & 65535;

        $c4 = (char) $i1;

        $z0 = staticinvoke <java.lang.Character: boolean isISOControl(char)>($c4);

        if $z0 == 0 goto label04;

        $c4 = 46;

     label04:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        $i1 = $i0 + 1;

        $i1 = $i1 % 8;

        if $i1 != 0 goto label05;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label05:
        $i1 = $i0 + 1;

        $i1 = $i1 % 16;

        if $i1 != 0 goto label06;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label06:
        $i0 = $i0 + 1;

        goto label01;

     label07:
        $i1 = $i0 % 16;

        if $i1 == 0 goto label11;

        $i0 = $i0 % 16;

        $i0 = 16 - $i0;

        $i1 = 0;

     label08:
        if $i1 >= $i0 goto label09;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $i1 = $i1 + 1;

        goto label08;

     label09:
        if $i0 <= 8 goto label10;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label10:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

     label11:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
