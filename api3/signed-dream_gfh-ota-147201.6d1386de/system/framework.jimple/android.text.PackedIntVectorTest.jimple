public class android.text.PackedIntVectorTest extends junit.framework.TestCase
{

    public void <init>()
    {
        android.text.PackedIntVectorTest $r0;

        $r0 := @this: android.text.PackedIntVectorTest;

        specialinvoke $r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void testBasic() throws java.lang.Exception
    {
        android.text.PackedIntVectorTest $r0;
        int[] $r1;
        android.text.PackedIntVector $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        $r0 := @this: android.text.PackedIntVectorTest;

        $i0 = 0;

     label01:
        if $i0 >= 10 goto label49;

        $r2 = new android.text.PackedIntVector;

        specialinvoke $r2.<android.text.PackedIntVector: void <init>(int)>($i0);

        $r1 = newarray (int)[$i0];

        $i1 = $i0 * 2;

     label02:
        $i2 = $i0 * 4;

        if $i1 >= $i2 goto label48;

        $i2 = virtualinvoke $r2.<android.text.PackedIntVector: int width()>();

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i2, $i0);

        $i2 = 0;

     label03:
        if $i2 >= $i1 goto label14;

        $i3 = $i2 % 2;

        if $i3 != 0 goto label06;

        $i3 = $i2;

     label04:
        $i4 = 0;

     label05:
        if $i4 >= $i0 goto label07;

        $i5 = $i2 + $i4;

        $r1[$i4] = $i5;

        $i4 = $i4 + 1;

        goto label05;

     label06:
        $i3 = virtualinvoke $r2.<android.text.PackedIntVector: int size()>();

        $i3 = $i3 - $i2;

        goto label04;

     label07:
        $i4 = $i1 / 2;

        if $i2 != $i4 goto label11;

        virtualinvoke $r2.<android.text.PackedIntVector: void insertAt(int,int[])>($i3, null);

     label08:
        $i4 = virtualinvoke $r2.<android.text.PackedIntVector: int size()>();

        $i5 = $i2 + 1;

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i4, $i5);

        $i4 = 0;

     label09:
        if $i4 >= $i0 goto label13;

        $i5 = $i1 / 2;

        if $i2 != $i5 goto label12;

        $i5 = virtualinvoke $r2.<android.text.PackedIntVector: int getValue(int,int)>($i3, $i4);

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>(0, $i5);

     label10:
        $i4 = $i4 + 1;

        goto label09;

     label11:
        virtualinvoke $r2.<android.text.PackedIntVector: void insertAt(int,int[])>($i3, $r1);

        goto label08;

     label12:
        $i5 = virtualinvoke $r2.<android.text.PackedIntVector: int getValue(int,int)>($i3, $i4);

        $i6 = $i2 + $i4;

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i5, $i6);

        goto label10;

     label13:
        $i2 = $i2 + 1;

        goto label03;

     label14:
        $i2 = 0;

     label15:
        if $i2 >= $i1 goto label18;

        $i3 = 0;

     label16:
        if $i3 >= $i0 goto label17;

        $i4 = $i2 * $i3;

        virtualinvoke $r2.<android.text.PackedIntVector: void setValue(int,int,int)>($i2, $i3, $i4);

        $i4 = virtualinvoke $r2.<android.text.PackedIntVector: int getValue(int,int)>($i2, $i3);

        $i5 = $i2 * $i3;

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i4, $i5);

        $i3 = $i3 + 1;

        goto label16;

     label17:
        $i2 = $i2 + 1;

        goto label15;

     label18:
        $i2 = 0;

     label19:
        if $i2 >= $i0 goto label20;

        $i3 = $i2 * 2;

        $i4 = $i2 + 27;

        virtualinvoke $r2.<android.text.PackedIntVector: void adjustValuesBelow(int,int,int)>($i3, $i2, $i4);

        $i2 = $i2 + 1;

        goto label19;

     label20:
        $i2 = 0;

     label21:
        if $i2 >= $i1 goto label25;

        $i3 = 0;

     label22:
        if $i3 >= $i0 goto label24;

        $i4 = $i2 * $i3;

        $i5 = $i3 * 2;

        if $i2 < $i5 goto label23;

        $i5 = $i3 + 27;

        $i4 = $i4 + $i5;

     label23:
        $i5 = virtualinvoke $r2.<android.text.PackedIntVector: int getValue(int,int)>($i2, $i3);

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i5, $i4);

        $i3 = $i3 + 1;

        goto label22;

     label24:
        $i2 = $i2 + 1;

        goto label21;

     label25:
        $i2 = 0;

     label26:
        if $i2 >= $i0 goto label27;

        $i3 = $i2 * $i2;

        $i3 = $i3 + 14;

        virtualinvoke $r2.<android.text.PackedIntVector: void adjustValuesBelow(int,int,int)>($i2, $i2, $i3);

        $i2 = $i2 + 1;

        goto label26;

     label27:
        $i2 = 0;

     label28:
        if $i2 >= $i1 goto label33;

        $i3 = 0;

     label29:
        if $i3 >= $i0 goto label32;

        $i4 = $i2 * $i3;

        $i5 = $i3 * 2;

        if $i2 < $i5 goto label30;

        $i5 = $i3 + 27;

        $i4 = $i4 + $i5;

     label30:
        if $i2 < $i3 goto label31;

        $i5 = $i3 * $i3;

        $i5 = $i5 + 14;

        $i4 = $i4 + $i5;

     label31:
        $i5 = virtualinvoke $r2.<android.text.PackedIntVector: int getValue(int,int)>($i2, $i3);

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i5, $i4);

        $i3 = $i3 + 1;

        goto label29;

     label32:
        $i2 = $i2 + 1;

        goto label28;

     label33:
        $i2 = 0;

     label34:
        if $i2 >= $i0 goto label35;

        $i3 = $i2 * 2;

        $i4 = $i2 + 27;

        $i4 = neg $i4;

        virtualinvoke $r2.<android.text.PackedIntVector: void adjustValuesBelow(int,int,int)>($i3, $i2, $i4);

        $i3 = $i2 * $i2;

        $i3 = $i3 + 14;

        $i3 = neg $i3;

        virtualinvoke $r2.<android.text.PackedIntVector: void adjustValuesBelow(int,int,int)>($i2, $i2, $i3);

        $i2 = $i2 + 1;

        goto label34;

     label35:
        $i2 = 0;

     label36:
        if $i2 >= $i1 goto label39;

        $i3 = 0;

     label37:
        if $i3 >= $i0 goto label38;

        $i4 = virtualinvoke $r2.<android.text.PackedIntVector: int getValue(int,int)>($i2, $i3);

        $i5 = $i2 * $i3;

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i4, $i5);

        $i3 = $i3 + 1;

        goto label37;

     label38:
        $i2 = $i2 + 1;

        goto label36;

     label39:
        $i2 = virtualinvoke $r2.<android.text.PackedIntVector: int size()>();

        if $i2 <= 0 goto label47;

        $i3 = virtualinvoke $r2.<android.text.PackedIntVector: int size()>();

        $i4 = $i3 / 3;

        if $i4 != 0 goto label40;

        $i4 = 1;

     label40:
        $i2 = $i3 - $i4;

        $i2 = $i2 / 2;

        virtualinvoke $r2.<android.text.PackedIntVector: void deleteAt(int,int)>($i2, $i4);

        $i5 = virtualinvoke $r2.<android.text.PackedIntVector: int size()>();

        $i3 = $i3 - $i4;

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i5, $i3);

        $i3 = 0;

     label41:
        if $i3 >= $i2 goto label44;

        $i4 = 0;

     label42:
        if $i4 >= $i0 goto label43;

        $i5 = virtualinvoke $r2.<android.text.PackedIntVector: int getValue(int,int)>($i3, $i4);

        $i6 = $i3 * $i4;

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i5, $i6);

        $i4 = $i4 + 1;

        goto label42;

     label43:
        $i3 = $i3 + 1;

        goto label41;

     label44:
        $i3 = virtualinvoke $r2.<android.text.PackedIntVector: int size()>();

        if $i2 >= $i3 goto label39;

        $i3 = 0;

     label45:
        if $i3 >= $i0 goto label46;

        $i4 = virtualinvoke $r2.<android.text.PackedIntVector: int getValue(int,int)>($i2, $i3);

        $i5 = $i2 + $i1;

        $i6 = virtualinvoke $r2.<android.text.PackedIntVector: int size()>();

        $i5 = $i5 - $i6;

        $i5 = $i5 * $i3;

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>($i4, $i5);

        $i3 = $i3 + 1;

        goto label45;

     label46:
        $i2 = $i2 + 1;

        goto label44;

     label47:
        $i2 = virtualinvoke $r2.<android.text.PackedIntVector: int size()>();

        staticinvoke <android.text.PackedIntVectorTest: void assertEquals(int,int)>(0, $i2);

        $i1 = $i1 + 1;

        goto label02;

     label48:
        $i0 = $i0 + 1;

        goto label01;

     label49:
        return;
    }
}
