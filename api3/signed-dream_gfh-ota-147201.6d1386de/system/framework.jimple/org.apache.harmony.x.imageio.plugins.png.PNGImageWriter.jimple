public class org.apache.harmony.x.imageio.plugins.png.PNGImageWriter extends javax.imageio.ImageWriter
{
    private static int[][] BAND_OFFSETS;
    private static final boolean DEBUG;
    private static final int PNG_COLOR_TYPE_GRAY;
    private static final int PNG_COLOR_TYPE_GRAY_ALPHA;
    private static final int PNG_COLOR_TYPE_PLTE;
    private static final int PNG_COLOR_TYPE_RGB;
    private static final int PNG_COLOR_TYPE_RGBA;
    private static android.graphics.Bitmap bm;

    static void <clinit>()
    {
        int[][] $r0;
        int[] $r1;

        <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: int PNG_COLOR_TYPE_RGBA> = 6;

        <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: int PNG_COLOR_TYPE_RGB> = 2;

        <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: int PNG_COLOR_TYPE_PLTE> = 3;

        <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: int PNG_COLOR_TYPE_GRAY_ALPHA> = 4;

        <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: int PNG_COLOR_TYPE_GRAY> = 0;

        <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: boolean DEBUG> = 0;

        $r0 = newarray (int[])[5];

        $r1 = newarray (int)[0];

        $r0[0] = $r1;

        $r1 = newarray (int)[1];

        $r1[0] = 0;

        $r0[1] = $r1;

        $r1 = newarray (int)[2];

        $r1[0] = 0;

        $r1[1] = 1;

        $r0[2] = $r1;

        $r1 = newarray (int)[3];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 2;

        $r0[3] = $r1;

        $r1 = newarray (int)[4];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 2;

        $r1[3] = 3;

        $r0[4] = $r1;

        <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: int[][] BAND_OFFSETS> = $r0;

        return;
    }

    protected void <init>(javax.imageio.spi.ImageWriterSpi)
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriter $r0;
        javax.imageio.spi.ImageWriterSpi $r1;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageWriter;

        $r1 := @parameter0: javax.imageio.spi.ImageWriterSpi;

        specialinvoke $r0.<javax.imageio.ImageWriter: void <init>(javax.imageio.spi.ImageWriterSpi)>($r1);

        return;
    }

    public static android.graphics.Bitmap getBitmap()
    {
        android.graphics.Bitmap r0;

        r0 = <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: android.graphics.Bitmap bm>;

        return r0;
    }

    public javax.imageio.metadata.IIOMetadata convertImageMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam)
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriter $r0;
        javax.imageio.metadata.IIOMetadata $r1;
        javax.imageio.ImageTypeSpecifier $r2;
        javax.imageio.ImageWriteParam $r3;
        org.apache.harmony.luni.util.NotImplementedException r5;
        java.lang.Throwable r6;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageWriter;

        $r1 := @parameter0: javax.imageio.metadata.IIOMetadata;

        $r2 := @parameter1: javax.imageio.ImageTypeSpecifier;

        $r3 := @parameter2: javax.imageio.ImageWriteParam;

        r5 = new org.apache.harmony.luni.util.NotImplementedException;

        specialinvoke r5.<org.apache.harmony.luni.util.NotImplementedException: void <init>()>();

        r6 = (java.lang.Throwable) r5;

        throw r6;
    }

    public javax.imageio.metadata.IIOMetadata convertStreamMetadata(javax.imageio.metadata.IIOMetadata, javax.imageio.ImageWriteParam)
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriter $r0;
        javax.imageio.metadata.IIOMetadata $r1;
        javax.imageio.ImageWriteParam $r2;
        org.apache.harmony.luni.util.NotImplementedException r4;
        java.lang.Throwable r5;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageWriter;

        $r1 := @parameter0: javax.imageio.metadata.IIOMetadata;

        $r2 := @parameter1: javax.imageio.ImageWriteParam;

        r4 = new org.apache.harmony.luni.util.NotImplementedException;

        specialinvoke r4.<org.apache.harmony.luni.util.NotImplementedException: void <init>()>();

        r5 = (java.lang.Throwable) r4;

        throw r5;
    }

    public javax.imageio.metadata.IIOMetadata getDefaultImageMetadata(javax.imageio.ImageTypeSpecifier, javax.imageio.ImageWriteParam)
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriter $r0;
        javax.imageio.ImageTypeSpecifier $r1;
        javax.imageio.ImageWriteParam $r2;
        org.apache.harmony.luni.util.NotImplementedException r4;
        java.lang.Throwable r5;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageWriter;

        $r1 := @parameter0: javax.imageio.ImageTypeSpecifier;

        $r2 := @parameter1: javax.imageio.ImageWriteParam;

        r4 = new org.apache.harmony.luni.util.NotImplementedException;

        specialinvoke r4.<org.apache.harmony.luni.util.NotImplementedException: void <init>()>();

        r5 = (java.lang.Throwable) r4;

        throw r5;
    }

    public javax.imageio.metadata.IIOMetadata getDefaultStreamMetadata(javax.imageio.ImageWriteParam)
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriter $r0;
        javax.imageio.ImageWriteParam $r1;
        org.apache.harmony.luni.util.NotImplementedException r3;
        java.lang.Throwable r4;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageWriter;

        $r1 := @parameter0: javax.imageio.ImageWriteParam;

        r3 = new org.apache.harmony.luni.util.NotImplementedException;

        specialinvoke r3.<org.apache.harmony.luni.util.NotImplementedException: void <init>()>();

        r4 = (java.lang.Throwable) r3;

        throw r4;
    }

    public javax.imageio.ImageWriteParam getDefaultWriteParam()
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriter $r0;
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriterParam $r1;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageWriter;

        $r1 = new org.apache.harmony.x.imageio.plugins.png.PNGImageWriterParam;

        specialinvoke $r1.<org.apache.harmony.x.imageio.plugins.png.PNGImageWriterParam: void <init>()>();

        return $r1;
    }

    public void write(javax.imageio.metadata.IIOMetadata, javax.imageio.IIOImage, javax.imageio.ImageWriteParam) throws java.io.IOException
    {
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriter $r0;
        javax.imageio.metadata.IIOMetadata $r1;
        javax.imageio.IIOImage $r2;
        int $i0, $i1, $i2, $i3;
        com.android.internal.awt.ImageOutputStreamWrapper $r3;
        javax.imageio.ImageWriteParam $r4;
        java.lang.Object $r5;
        java.lang.IllegalStateException $r6;
        java.lang.IllegalArgumentException $r7;
        java.awt.image.RenderedImage $r8, $r9;
        boolean $z0;
        java.awt.image.BufferedImage $r10;
        java.awt.image.Raster $r12;
        java.awt.image.SampleModel $r13;
        java.awt.image.ColorModel $r14;
        org.apache.harmony.x.imageio.plugins.png.PNGImageWriterParam $r15;
        java.lang.String $r16;
        java.awt.image.IndexColorModel $r17;
        int[] $r18;
        java.awt.image.DataBuffer $r19;
        java.awt.image.DataBufferInt $r20;
        android.graphics.Bitmap$Config $r21;
        android.graphics.Bitmap $r22;
        javax.imageio.stream.ImageOutputStream $r23;
        android.graphics.Bitmap$CompressFormat $r24;
        java.lang.RuntimeException $r25;

        $r0 := @this: org.apache.harmony.x.imageio.plugins.png.PNGImageWriter;

        $r1 := @parameter0: javax.imageio.metadata.IIOMetadata;

        $r2 := @parameter1: javax.imageio.IIOImage;

        $r4 := @parameter2: javax.imageio.ImageWriteParam;

        $r5 = $r0.<javax.imageio.ImageWriter: java.lang.Object output>;

        if $r5 != null goto label01;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Output not been set");

        throw $r6;

     label01:
        if $r2 != null goto label02;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Image equals null");

        throw $r7;

     label02:
        $r8 = null;

        $z0 = virtualinvoke $r2.<javax.imageio.IIOImage: boolean hasRaster()>();

        if $z0 != 0 goto label07;

        $r9 = virtualinvoke $r2.<javax.imageio.IIOImage: java.awt.image.RenderedImage getRenderedImage()>();

        $r8 = $r9;

        $z0 = $r9 instanceof java.awt.image.BufferedImage;

        if $z0 == 0 goto label06;

        $r10 = (java.awt.image.BufferedImage) $r9;

        $r12 = virtualinvoke $r10.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

     label03:
        $r13 = virtualinvoke $r12.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $i1 = virtualinvoke $r12.<java.awt.image.Raster: int getWidth()>();

        $i2 = virtualinvoke $r12.<java.awt.image.Raster: int getHeight()>();

        $i3 = virtualinvoke $r13.<java.awt.image.SampleModel: int getNumBands()>();

        $r14 = interfaceinvoke $r8.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $i0 = virtualinvoke $r14.<java.awt.image.ColorModel: int getPixelSize()>();

        $i0 = $i0 / $i3;

        if $i0 <= 8 goto label08;

     label04:
        $z0 = $r4 instanceof org.apache.harmony.x.imageio.plugins.png.PNGImageWriterParam;

        if $z0 == 0 goto label05;

        $r15 = (org.apache.harmony.x.imageio.plugins.png.PNGImageWriterParam) $r4;

        virtualinvoke $r15.<org.apache.harmony.x.imageio.plugins.png.PNGImageWriterParam: boolean getInterlace()>();

     label05:
        $z0 = $r14 instanceof java.awt.image.IndexColorModel;

        if $z0 == 0 goto label12;

        if $i0 == 1 goto label09;

        if $i0 == 2 goto label09;

        if $i0 == 4 goto label09;

        if $i0 == 8 goto label09;

        $r7 = new java.lang.IllegalArgumentException;

        $r16 = staticinvoke <org.apache.harmony.x.imageio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("imageio.1");

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label06:
        $r12 = interfaceinvoke $r9.<java.awt.image.RenderedImage: java.awt.image.Raster getData()>();

        goto label03;

     label07:
        $r12 = virtualinvoke $r2.<javax.imageio.IIOImage: java.awt.image.Raster getRaster()>();

        goto label03;

     label08:
        goto label04;

     label09:
        if $i3 == 1 goto label10;

        $r7 = new java.lang.IllegalArgumentException;

        $r16 = staticinvoke <org.apache.harmony.x.imageio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("imageio.1");

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label10:
        $r17 = (java.awt.image.IndexColorModel) $r14;

        $i3 = virtualinvoke $r17.<java.awt.image.IndexColorModel: int getMapSize()>();

        $r18 = newarray (int)[$i3];

        virtualinvoke $r17.<java.awt.image.IndexColorModel: void getRGBs(int[])>($r18);

     label11:
        $z0 = $r13 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z0 == 0 goto label20;

        $r19 = virtualinvoke $r12.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        $r20 = (java.awt.image.DataBufferInt) $r19;

        $r18 = virtualinvoke $r20.<java.awt.image.DataBufferInt: int[] getData()>();

        $r21 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r22 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>($r18, $i1, $i2, $r21);

        <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: android.graphics.Bitmap bm> = $r22;

        $r5 = virtualinvoke $r0.<javax.imageio.ImageWriter: java.lang.Object getOutput()>();

        $r23 = (javax.imageio.stream.ImageOutputStream) $r5;

        $r3 = new com.android.internal.awt.ImageOutputStreamWrapper;

        specialinvoke $r3.<com.android.internal.awt.ImageOutputStreamWrapper: void <init>(javax.imageio.stream.ImageOutputStream)>($r23);

        $r22 = <org.apache.harmony.x.imageio.plugins.png.PNGImageWriter: android.graphics.Bitmap bm>;

        $r24 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke $r22.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r24, 100, $r3);

        return;

     label12:
        if $i3 != 1 goto label14;

        if $i0 == 1 goto label13;

        if $i0 == 2 goto label13;

        if $i0 == 4 goto label13;

        if $i0 == 8 goto label13;

        if $i0 == 16 goto label13;

        $r7 = new java.lang.IllegalArgumentException;

        $r16 = staticinvoke <org.apache.harmony.x.imageio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("imageio.1");

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label13:
        goto label11;

     label14:
        if $i3 != 2 goto label16;

        if $i0 == 8 goto label15;

        if $i0 == 16 goto label15;

        $r7 = new java.lang.IllegalArgumentException;

        $r16 = staticinvoke <org.apache.harmony.x.imageio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("imageio.1");

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label15:
        goto label11;

     label16:
        if $i3 != 3 goto label18;

        if $i0 == 8 goto label17;

        if $i0 == 16 goto label17;

        $r7 = new java.lang.IllegalArgumentException;

        $r16 = staticinvoke <org.apache.harmony.x.imageio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("imageio.1");

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label17:
        goto label11;

     label18:
        if $i3 != 4 goto label11;

        if $i0 == 8 goto label19;

        if $i0 == 16 goto label19;

        $r7 = new java.lang.IllegalArgumentException;

        $r16 = staticinvoke <org.apache.harmony.x.imageio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("imageio.1");

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r7;

     label19:
        goto label11;

     label20:
        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>(java.lang.String)>("Color model not supported yet");

        throw $r25;
    }
}
