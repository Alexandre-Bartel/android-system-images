public class org.apache.harmony.xnet.provider.jsse.AlertProtocol extends java.lang.Object
{
    protected static final byte ACCESS_DENIED;
    protected static final byte BAD_CERTIFICATE;
    protected static final byte BAD_RECORD_MAC;
    protected static final byte CERTIFICATE_EXPIRED;
    protected static final byte CERTIFICATE_REVOKED;
    protected static final byte CERTIFICATE_UNKNOWN;
    protected static final byte CLOSE_NOTIFY;
    protected static final byte DECODE_ERROR;
    protected static final byte DECOMPRESSION_FAILURE;
    protected static final byte DECRYPTION_FAILED;
    protected static final byte DECRYPT_ERROR;
    protected static final byte EXPORT_RESTRICTION;
    protected static final byte FATAL;
    protected static final byte HANDSHAKE_FAILURE;
    protected static final byte ILLEGAL_PARAMETER;
    protected static final byte INSUFFICIENT_SECURITY;
    protected static final byte INTERNAL_ERROR;
    protected static final byte NO_RENEGOTIATION;
    protected static final byte PROTOCOL_VERSION;
    protected static final byte RECORD_OVERFLOW;
    protected static final byte UNEXPECTED_MESSAGE;
    protected static final byte UNKNOWN_CA;
    protected static final byte UNSUPPORTED_CERTIFICATE;
    protected static final byte USER_CANCELED;
    protected static final byte WARNING;
    private final byte[] alert;
    private org.apache.harmony.xnet.provider.jsse.Logger$Stream logger;
    private org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol;

    protected void <init>()
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r1;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[2];

        $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert> = $r2;

        $r1 = staticinvoke <org.apache.harmony.xnet.provider.jsse.Logger: org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(java.lang.String)>("alert");

        $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger> = $r1;

        return;
    }

    protected void alert(byte, byte)
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        byte $b0, $b1;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        byte[] $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $b0 := @parameter0: byte;

        $b1 := @parameter1: byte;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Alert.alert: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r3);

     label1:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $r4[0] = $b0;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $r4[1] = $b1;

        return;
    }

    protected java.lang.String getAlertDescription()
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        byte[] $r1;
        byte $b0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $b0 = $r1[1];

        lookupswitch($b0)
        {
            case 0: goto label02;
            case 10: goto label03;
            case 20: goto label04;
            case 21: goto label05;
            case 22: goto label06;
            case 30: goto label07;
            case 40: goto label08;
            case 42: goto label09;
            case 43: goto label10;
            case 44: goto label11;
            case 45: goto label12;
            case 46: goto label13;
            case 47: goto label14;
            case 48: goto label15;
            case 49: goto label16;
            case 50: goto label17;
            case 51: goto label18;
            case 60: goto label19;
            case 70: goto label20;
            case 71: goto label21;
            case 80: goto label22;
            case 90: goto label23;
            case 100: goto label24;
            default: goto label01;
        };

     label01:
        return null;

     label02:
        return "close_notify";

     label03:
        return "unexpected_message";

     label04:
        return "bad_record_mac";

     label05:
        return "decryption_failed";

     label06:
        return "record_overflow";

     label07:
        return "decompression_failure";

     label08:
        return "handshake_failure";

     label09:
        return "bad_certificate";

     label10:
        return "unsupported_certificate";

     label11:
        return "certificate_revoked";

     label12:
        return "certificate_expired";

     label13:
        return "certificate_unknown";

     label14:
        return "illegal_parameter";

     label15:
        return "unknown_ca";

     label16:
        return "access_denied";

     label17:
        return "decode_error";

     label18:
        return "decrypt_error";

     label19:
        return "export_restriction";

     label20:
        return "protocol_version";

     label21:
        return "insufficient_security";

     label22:
        return "internal_error";

     label23:
        return "user_canceled";

     label24:
        return "no_renegotiation";
    }

    protected byte getDescriptionCode()
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        byte[] $r1;
        byte $b0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $b0 = $r1[0];

        if $b0 == 0 goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $b0 = $r1[1];

        return $b0;

     label1:
        return -100;
    }

    protected boolean hasAlert()
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        byte[] $r1;
        byte $b0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $b0 = $r1[0];

        if $b0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected boolean isFatalAlert()
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        byte[] $r1;
        byte $b0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $b0 = $r1[0];

        if $b0 != 2 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void setProcessed()
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r1;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("Alert.setProcessed");

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $r2[0] = 0;

        return;
    }

    protected void setRecordProtocol(org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol)
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol;

        $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol> = $r1;

        return;
    }

    protected void shutdown()
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        byte[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $r1[0] = 0;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $r1[1] = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol> = null;

        return;
    }

    protected byte[] wrap()
    {
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r0;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r1;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] alert>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,byte[],int,int)>(21, $r2, 0, 2);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte WARNING> = 1;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte USER_CANCELED> = 90;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte UNSUPPORTED_CERTIFICATE> = 43;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte UNKNOWN_CA> = 48;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte UNEXPECTED_MESSAGE> = 10;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte RECORD_OVERFLOW> = 22;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte PROTOCOL_VERSION> = 70;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte NO_RENEGOTIATION> = 100;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte INTERNAL_ERROR> = 80;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte INSUFFICIENT_SECURITY> = 71;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte ILLEGAL_PARAMETER> = 47;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte HANDSHAKE_FAILURE> = 40;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte FATAL> = 2;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte EXPORT_RESTRICTION> = 60;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte DECRYPT_ERROR> = 51;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte DECRYPTION_FAILED> = 21;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte DECOMPRESSION_FAILURE> = 30;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte DECODE_ERROR> = 50;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte CLOSE_NOTIFY> = 0;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte CERTIFICATE_UNKNOWN> = 46;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte CERTIFICATE_REVOKED> = 44;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte CERTIFICATE_EXPIRED> = 45;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte BAD_RECORD_MAC> = 20;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte BAD_CERTIFICATE> = 42;

        <org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte ACCESS_DENIED> = 49;

        return;
    }
}
