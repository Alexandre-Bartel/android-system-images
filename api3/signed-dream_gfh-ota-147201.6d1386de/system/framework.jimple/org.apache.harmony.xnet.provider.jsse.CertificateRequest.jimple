public class org.apache.harmony.xnet.provider.jsse.CertificateRequest extends org.apache.harmony.xnet.provider.jsse.Message
{
    public static final byte DSS_FIXED_DH;
    public static final byte DSS_SIGN;
    public static final byte RSA_FIXED_DH;
    public static final byte RSA_SIGN;
    javax.security.auth.x500.X500Principal[] certificate_authorities;
    final byte[] certificate_types;
    private byte[][] encoded_principals;
    private java.lang.String[] types;

    public void <init>(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream, int) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.CertificateRequest $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        int $i0, $i1, $i2, $i3;
        java.util.Vector $r2;
        byte[] $r3;
        javax.security.auth.x500.X500Principal[] $r4;
        javax.security.auth.x500.X500Principal $r5;
        java.lang.Object $r6;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateRequest;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $i0 := @parameter1: int;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $i1 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint8()>();

        $r3 = newarray (byte)[$i1];

        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types> = $r3;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read(byte[],int,int)>($r3, 0, $i1);

        $i2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $r4 = newarray (javax.security.auth.x500.X500Principal)[$i2];

        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities> = $r4;

        $i1 = 0;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

     label1:
        if $i1 >= $i2 goto label2;

        $i3 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $r5 = new javax.security.auth.x500.X500Principal;

        specialinvoke $r5.<javax.security.auth.x500.X500Principal: void <init>(java.io.InputStream)>($r1);

        virtualinvoke $r2.<java.util.Vector: boolean add(java.lang.Object)>($r5);

        $i1 = $i1 + 2;

        $i1 = $i1 + $i3;

        goto label1;

     label2:
        $i2 = virtualinvoke $r2.<java.util.Vector: int size()>();

        $r4 = newarray (javax.security.auth.x500.X500Principal)[$i2];

        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities> = $r4;

        $i2 = 0;

     label3:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities>;

        $i3 = lengthof $r4;

        if $i2 >= $i3 goto label4;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities>;

        $r6 = virtualinvoke $r2.<java.util.Vector: java.lang.Object elementAt(int)>($i2);

        $r5 = (javax.security.auth.x500.X500Principal) $r6;

        $r4[$i2] = $r5;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types>;

        $i2 = lengthof $r3;

        $i2 = $i2 + 3;

        $i1 = $i2 + $i1;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i1;

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        if $i1 == $i0 goto label5;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect CertificateRequest");

        return;

     label5:
        return;
    }

    public void <init>(byte[], java.security.cert.X509Certificate[])
    {
        org.apache.harmony.xnet.provider.jsse.CertificateRequest $r0;
        byte[] $r1, $r7;
        java.security.cert.X509Certificate[] $r2;
        int $i0, $i1, $i2;
        javax.security.auth.x500.X500Principal[] $r3;
        byte[][] $r4;
        java.security.cert.X509Certificate $r5;
        javax.security.auth.x500.X500Principal $r6;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateRequest;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: java.security.cert.X509Certificate[];

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        if $r2 != null goto label1;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(80, "CertificateRequest: array of certificate authority certificates is null");

     label1:
        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types> = $r1;

        $i0 = 0;

        $i1 = lengthof $r2;

        $r3 = newarray (javax.security.auth.x500.X500Principal)[$i1];

        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities> = $r3;

        $i1 = lengthof $r2;

        $r4 = newarray (byte[])[$i1];

        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[][] encoded_principals> = $r4;

        $i1 = 0;

     label2:
        $i2 = lengthof $r2;

        if $i1 >= $i2 goto label3;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities>;

        $r5 = $r2[$i1];

        $r6 = virtualinvoke $r5.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()>();

        $r3[$i1] = $r6;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[][] encoded_principals>;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities>;

        $r6 = $r3[$i1];

        $r7 = virtualinvoke $r6.<javax.security.auth.x500.X500Principal: byte[] getEncoded()>();

        $r4[$i1] = $r7;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[][] encoded_principals>;

        $r7 = $r4[$i1];

        $i2 = lengthof $r7;

        $i2 = $i2 + 2;

        $i0 = $i0 + $i2;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $i1 = lengthof $r1;

        $i1 = $i1 + 3;

        $i0 = $i1 + $i0;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i0;

        return;
    }

    public int getType()
    {
        org.apache.harmony.xnet.provider.jsse.CertificateRequest $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateRequest;

        return 13;
    }

    public java.lang.String[] getTypesAsString()
    {
        org.apache.harmony.xnet.provider.jsse.CertificateRequest $r0;
        java.lang.String[] $r1;
        byte[] $r2;
        int $i0, $i1;
        byte $b2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateRequest;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] types>;

        if $r1 != null goto label8;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types>;

        $i0 = lengthof $r2;

        $r1 = newarray (java.lang.String)[$i0];

        $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] types> = $r1;

        $i0 = 0;

     label1:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] types>;

        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label8;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types>;

        $b2 = $r2[$i0];

        lookupswitch($b2)
        {
            case 1: goto label4;
            case 2: goto label5;
            case 3: goto label6;
            case 4: goto label7;
            default: goto label2;
        };

     label2:
        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect CertificateRequest");

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] types>;

        $r1[$i0] = "RSA";

        goto label3;

     label5:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] types>;

        $r1[$i0] = "DSA";

        goto label3;

     label6:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] types>;

        $r1[$i0] = "DH_RSA";

        goto label3;

     label7:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] types>;

        $r1[$i0] = "DH_DSA";

        goto label3;

     label8:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: java.lang.String[] types>;

        return $r1;
    }

    public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)
    {
        org.apache.harmony.xnet.provider.jsse.CertificateRequest $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        byte[] $r2;
        int $i0, $i2, $i4;
        long $l1;
        byte $b3;
        javax.security.auth.x500.X500Principal[] $r3;
        byte[][] $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.CertificateRequest;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint8(long)>($l1);

        $i0 = 0;

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types>;

        $i2 = lengthof $r2;

        if $i0 >= $i2 goto label2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[] certificate_types>;

        $b3 = $r2[$i0];

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte)>($b3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

        $i2 = 0;

     label3:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities>;

        $i4 = lengthof $r3;

        if $i2 >= $i4 goto label4;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[][] encoded_principals>;

        $r2 = $r4[$i2];

        $i4 = lengthof $r2;

        $i4 = $i4 + 2;

        $i0 = $i0 + $i4;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

        $i0 = 0;

     label5:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: javax.security.auth.x500.X500Principal[] certificate_authorities>;

        $i2 = lengthof $r3;

        if $i0 >= $i2 goto label6;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[][] encoded_principals>;

        $r2 = $r4[$i0];

        $i2 = lengthof $r2;

        $l1 = (long) $i2;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte[][] encoded_principals>;

        $r2 = $r4[$i0];

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        $i0 = $i0 + 1;

        goto label5;

     label6:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte RSA_SIGN> = 1;

        <org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte RSA_FIXED_DH> = 3;

        <org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte DSS_SIGN> = 2;

        <org.apache.harmony.xnet.provider.jsse.CertificateRequest: byte DSS_FIXED_DH> = 4;

        return;
    }
}
