public class junit.runner.LoadingTestCollector extends junit.runner.ClassPathTestCollector
{
    junit.runner.TestCaseClassLoader fLoader;

    public void <init>()
    {
        junit.runner.LoadingTestCollector $r0;
        junit.runner.TestCaseClassLoader $r1;

        $r0 := @this: junit.runner.LoadingTestCollector;

        specialinvoke $r0.<junit.runner.ClassPathTestCollector: void <init>()>();

        $r1 = new junit.runner.TestCaseClassLoader;

        specialinvoke $r1.<junit.runner.TestCaseClassLoader: void <init>()>();

        $r0.<junit.runner.LoadingTestCollector: junit.runner.TestCaseClassLoader fLoader> = $r1;

        return;
    }

    java.lang.Class classFromFile(java.lang.String) throws java.lang.ClassNotFoundException
    {
        junit.runner.LoadingTestCollector $r0;
        java.lang.String $r1;
        junit.runner.TestCaseClassLoader $r2;
        boolean $z0;
        java.lang.Class $r3;

        $r0 := @this: junit.runner.LoadingTestCollector;

        $r1 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r0.<junit.runner.ClassPathTestCollector: java.lang.String classNameFromFile(java.lang.String)>($r1);

        $r2 = $r0.<junit.runner.LoadingTestCollector: junit.runner.TestCaseClassLoader fLoader>;

        $z0 = virtualinvoke $r2.<junit.runner.TestCaseClassLoader: boolean isExcluded(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r2 = $r0.<junit.runner.LoadingTestCollector: junit.runner.TestCaseClassLoader fLoader>;

        $r3 = virtualinvoke $r2.<junit.runner.TestCaseClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>($r1, 0);

        return $r3;

     label1:
        return null;
    }

    boolean hasPublicConstructor(java.lang.Class)
    {
        junit.runner.LoadingTestCollector $r0;
        java.lang.Class $r1;
        java.lang.NoSuchMethodException $r2;

        $r0 := @this: junit.runner.LoadingTestCollector;

        $r1 := @parameter0: java.lang.Class;

     label1:
        staticinvoke <junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>($r1);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    boolean hasSuiteMethod(java.lang.Class)
    {
        junit.runner.LoadingTestCollector $r0;
        java.lang.Class $r1;
        java.lang.Class[] $r2;
        java.lang.Exception $r3;

        $r0 := @this: junit.runner.LoadingTestCollector;

        $r1 := @parameter0: java.lang.Class;

     label1:
        $r2 = newarray (java.lang.Class)[0];

        virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("suite", $r2);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    boolean isTestClass(java.lang.Class)
    {
        junit.runner.LoadingTestCollector $r0;
        java.lang.Class $r1, $r2;
        boolean $z0;
        int $i0;

        $r0 := @this: junit.runner.LoadingTestCollector;

        $r1 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke $r0.<junit.runner.LoadingTestCollector: boolean hasSuiteMethod(java.lang.Class)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = class "junit/framework/Test";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label2;

        $i0 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<junit.runner.LoadingTestCollector: boolean hasPublicConstructor(java.lang.Class)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    protected boolean isTestClass(java.lang.String)
    {
        junit.runner.LoadingTestCollector $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Class $r2;
        java.lang.NoClassDefFoundError $r3;
        java.lang.ClassNotFoundException $r4;

        $r0 := @this: junit.runner.LoadingTestCollector;

        $r1 := @parameter0: java.lang.String;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 == 0 goto label5;

        $r2 = virtualinvoke $r0.<junit.runner.LoadingTestCollector: java.lang.Class classFromFile(java.lang.String)>($r1);

        if $r2 == null goto label3;

        $z0 = virtualinvoke $r0.<junit.runner.LoadingTestCollector: boolean isTestClass(java.lang.Class)>($r2);

     label2:
        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        $r3 := @caughtexception;

     label5:
        return 0;

     label6:
        $r4 := @caughtexception;

        goto label5;

        catch java.lang.ClassNotFoundException from label1 to label2 with label6;
        catch java.lang.NoClassDefFoundError from label1 to label2 with label4;
    }
}
