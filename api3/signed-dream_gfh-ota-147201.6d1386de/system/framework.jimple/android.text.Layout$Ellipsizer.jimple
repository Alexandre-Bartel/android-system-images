class android.text.Layout$Ellipsizer extends java.lang.Object implements android.text.GetChars, java.lang.CharSequence
{
    android.text.Layout mLayout;
    android.text.TextUtils$TruncateAt mMethod;
    java.lang.CharSequence mText;
    int mWidth;

    public void <init>(java.lang.CharSequence)
    {
        android.text.Layout$Ellipsizer $r0;
        java.lang.CharSequence $r1;

        $r0 := @this: android.text.Layout$Ellipsizer;

        $r1 := @parameter0: java.lang.CharSequence;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.text.Layout$Ellipsizer: java.lang.CharSequence mText> = $r1;

        return;
    }

    public char charAt(int)
    {
        android.text.Layout$Ellipsizer $r0;
        int $i0, $i2;
        char $c1;
        char[] $r1;

        $r0 := @this: android.text.Layout$Ellipsizer;

        $i0 := @parameter0: int;

        $r1 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(1);

        $i2 = $i0 + 1;

        virtualinvoke $r0.<android.text.Layout$Ellipsizer: void getChars(int,int,char[],int)>($i0, $i2, $r1, 0);

        $c1 = $r1[0];

        staticinvoke <android.text.TextUtils: void recycle(char[])>($r1);

        return $c1;
    }

    public void getChars(int, int, char[], int)
    {
        android.text.Layout$Ellipsizer $r0;
        int $i0, $i1, $i2, $i3, $i4;
        char[] $r1;
        android.text.Layout $r2;
        java.lang.CharSequence $r3;

        $r0 := @this: android.text.Layout$Ellipsizer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 := @parameter2: char[];

        $i2 := @parameter3: int;

        $r2 = $r0.<android.text.Layout$Ellipsizer: android.text.Layout mLayout>;

        $i3 = virtualinvoke $r2.<android.text.Layout: int getLineForOffset(int)>($i0);

        $r2 = $r0.<android.text.Layout$Ellipsizer: android.text.Layout mLayout>;

        $i4 = virtualinvoke $r2.<android.text.Layout: int getLineForOffset(int)>($i1);

        $r3 = $r0.<android.text.Layout$Ellipsizer: java.lang.CharSequence mText>;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r3, $i0, $i1, $r1, $i2);

     label1:
        if $i3 > $i4 goto label2;

        $r2 = $r0.<android.text.Layout$Ellipsizer: android.text.Layout mLayout>;

        staticinvoke <android.text.Layout: void access$100(android.text.Layout,int,int,int,char[],int)>($r2, $i0, $i1, $i3, $r1, $i2);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        return;
    }

    public int length()
    {
        android.text.Layout$Ellipsizer $r0;
        int $i0;
        java.lang.CharSequence $r1;

        $r0 := @this: android.text.Layout$Ellipsizer;

        $r1 = $r0.<android.text.Layout$Ellipsizer: java.lang.CharSequence mText>;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        return $i0;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        android.text.Layout$Ellipsizer $r0;
        int $i0, $i1, $i2;
        char[] $r1;
        java.lang.String $r2;

        $r0 := @this: android.text.Layout$Ellipsizer;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 = $i1 - $i0;

        $r1 = newarray (char)[$i2];

        virtualinvoke $r0.<android.text.Layout$Ellipsizer: void getChars(int,int,char[],int)>($i0, $i1, $r1, 0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1);

        return $r2;
    }

    public java.lang.String toString()
    {
        android.text.Layout$Ellipsizer $r0;
        char[] $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @this: android.text.Layout$Ellipsizer;

        $i0 = virtualinvoke $r0.<android.text.Layout$Ellipsizer: int length()>();

        $r1 = newarray (char)[$i0];

        $i0 = virtualinvoke $r0.<android.text.Layout$Ellipsizer: int length()>();

        virtualinvoke $r0.<android.text.Layout$Ellipsizer: void getChars(int,int,char[],int)>(0, $i0, $r1, 0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r1);

        return $r2;
    }
}
