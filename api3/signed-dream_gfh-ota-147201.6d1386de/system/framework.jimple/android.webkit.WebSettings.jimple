public class android.webkit.WebSettings extends java.lang.Object
{
    private static final java.lang.String DESKTOP_USERAGENT;
    private static final java.lang.String IPHONE_USERAGENT;
    public static final int LOAD_CACHE_ELSE_NETWORK;
    public static final int LOAD_CACHE_ONLY;
    public static final int LOAD_DEFAULT;
    public static final int LOAD_NORMAL;
    public static final int LOAD_NO_CACHE;
    private static java.util.Locale sLocale;
    private static java.lang.Object sLockForLocaleSettings;
    private java.lang.String mAcceptLanguage;
    private boolean mAllowFileAccess;
    private boolean mBlockNetworkImage;
    private boolean mBlockNetworkLoads;
    private android.webkit.BrowserFrame mBrowserFrame;
    private boolean mBuiltInZoomControls;
    private android.content.Context mContext;
    private java.lang.String mCursiveFontFamily;
    private int mDefaultFixedFontSize;
    private int mDefaultFontSize;
    private java.lang.String mDefaultTextEncoding;
    private final android.webkit.WebSettings$EventHandler mEventHandler;
    private java.lang.String mFantasyFontFamily;
    private java.lang.String mFixedFontFamily;
    private boolean mJavaScriptCanOpenWindowsAutomatically;
    private boolean mJavaScriptEnabled;
    private android.webkit.WebSettings$LayoutAlgorithm mLayoutAlgorithm;
    private boolean mLightTouchEnabled;
    private boolean mLoadsImagesAutomatically;
    private int mMinimumFontSize;
    private int mMinimumLogicalFontSize;
    private boolean mNavDump;
    private boolean mNeedInitialFocus;
    private int mOverrideCacheMode;
    private boolean mPluginsEnabled;
    private java.lang.String mPluginsPath;
    private android.webkit.WebSettings$RenderPriority mRenderPriority;
    private java.lang.String mSansSerifFontFamily;
    private boolean mSaveFormData;
    private boolean mSavePassword;
    private java.lang.String mSerifFontFamily;
    private boolean mShrinksStandaloneImagesToFit;
    private java.lang.String mStandardFontFamily;
    private boolean mSupportMultipleWindows;
    private boolean mSupportZoom;
    private boolean mSyncPending;
    private android.webkit.WebSettings$TextSize mTextSize;
    private boolean mUseDefaultUserAgent;
    private boolean mUseDoubleTree;
    private boolean mUseWideViewport;
    private java.lang.String mUserAgent;

    void <init>(android.content.Context)
    {
        android.webkit.WebSettings $r0;
        android.content.Context $r1;
        android.webkit.WebSettings$LayoutAlgorithm $r2;
        android.webkit.WebSettings$TextSize $r3;
        android.webkit.WebSettings$RenderPriority $r4;
        android.webkit.WebSettings$EventHandler $r5;
        java.lang.Object $r6;
        java.util.Locale $r7;
        java.lang.String $r8;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.webkit.WebSettings: boolean mSyncPending> = 0;

        $r2 = <android.webkit.WebSettings$LayoutAlgorithm: android.webkit.WebSettings$LayoutAlgorithm NARROW_COLUMNS>;

        $r0.<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm mLayoutAlgorithm> = $r2;

        $r3 = <android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize NORMAL>;

        $r0.<android.webkit.WebSettings: android.webkit.WebSettings$TextSize mTextSize> = $r3;

        $r0.<android.webkit.WebSettings: java.lang.String mStandardFontFamily> = "sans-serif";

        $r0.<android.webkit.WebSettings: java.lang.String mFixedFontFamily> = "monospace";

        $r0.<android.webkit.WebSettings: java.lang.String mSansSerifFontFamily> = "sans-serif";

        $r0.<android.webkit.WebSettings: java.lang.String mSerifFontFamily> = "serif";

        $r0.<android.webkit.WebSettings: java.lang.String mCursiveFontFamily> = "cursive";

        $r0.<android.webkit.WebSettings: java.lang.String mFantasyFontFamily> = "fantasy";

        $r0.<android.webkit.WebSettings: java.lang.String mDefaultTextEncoding> = "Latin-1";

        $r0.<android.webkit.WebSettings: java.lang.String mPluginsPath> = "";

        $r0.<android.webkit.WebSettings: int mMinimumFontSize> = 8;

        $r0.<android.webkit.WebSettings: int mMinimumLogicalFontSize> = 8;

        $r0.<android.webkit.WebSettings: int mDefaultFontSize> = 16;

        $r0.<android.webkit.WebSettings: int mDefaultFixedFontSize> = 13;

        $r0.<android.webkit.WebSettings: boolean mLoadsImagesAutomatically> = 1;

        $r0.<android.webkit.WebSettings: boolean mBlockNetworkImage> = 0;

        $r0.<android.webkit.WebSettings: boolean mJavaScriptEnabled> = 0;

        $r0.<android.webkit.WebSettings: boolean mPluginsEnabled> = 0;

        $r0.<android.webkit.WebSettings: boolean mJavaScriptCanOpenWindowsAutomatically> = 0;

        $r0.<android.webkit.WebSettings: boolean mUseDoubleTree> = 0;

        $r0.<android.webkit.WebSettings: boolean mUseWideViewport> = 0;

        $r0.<android.webkit.WebSettings: boolean mSupportMultipleWindows> = 0;

        $r0.<android.webkit.WebSettings: boolean mShrinksStandaloneImagesToFit> = 0;

        $r4 = <android.webkit.WebSettings$RenderPriority: android.webkit.WebSettings$RenderPriority NORMAL>;

        $r0.<android.webkit.WebSettings: android.webkit.WebSettings$RenderPriority mRenderPriority> = $r4;

        $r0.<android.webkit.WebSettings: int mOverrideCacheMode> = -1;

        $r0.<android.webkit.WebSettings: boolean mSaveFormData> = 1;

        $r0.<android.webkit.WebSettings: boolean mSavePassword> = 1;

        $r0.<android.webkit.WebSettings: boolean mLightTouchEnabled> = 0;

        $r0.<android.webkit.WebSettings: boolean mNeedInitialFocus> = 1;

        $r0.<android.webkit.WebSettings: boolean mNavDump> = 0;

        $r0.<android.webkit.WebSettings: boolean mSupportZoom> = 1;

        $r0.<android.webkit.WebSettings: boolean mBuiltInZoomControls> = 0;

        $r0.<android.webkit.WebSettings: boolean mAllowFileAccess> = 1;

        $r5 = new android.webkit.WebSettings$EventHandler;

        specialinvoke $r5.<android.webkit.WebSettings$EventHandler: void <init>(android.webkit.WebSettings,android.webkit.WebSettings$1)>($r0, null);

        $r0.<android.webkit.WebSettings: android.webkit.WebSettings$EventHandler mEventHandler> = $r5;

        $r0.<android.webkit.WebSettings: android.content.Context mContext> = $r1;

        $r6 = <android.webkit.WebSettings: java.lang.Object sLockForLocaleSettings>;

        if $r6 != null goto label1;

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        <android.webkit.WebSettings: java.lang.Object sLockForLocaleSettings> = $r6;

        $r7 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        <android.webkit.WebSettings: java.util.Locale sLocale> = $r7;

     label1:
        $r8 = specialinvoke $r0.<android.webkit.WebSettings: java.lang.String getCurrentAcceptLanguage()>();

        $r0.<android.webkit.WebSettings: java.lang.String mAcceptLanguage> = $r8;

        $r8 = specialinvoke $r0.<android.webkit.WebSettings: java.lang.String getCurrentUserAgent()>();

        $r0.<android.webkit.WebSettings: java.lang.String mUserAgent> = $r8;

        $r0.<android.webkit.WebSettings: boolean mUseDefaultUserAgent> = 1;

        $r1 = $r0.<android.webkit.WebSettings: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $i0 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INTERNET", $i0, $i1);

        if $i0 == 0 goto label3;

        $z0 = 1;

     label2:
        $r0.<android.webkit.WebSettings: boolean mBlockNetworkLoads> = $z0;

        return;

     label3:
        $z0 = 0;

        goto label2;
    }

    static android.webkit.BrowserFrame access$000(android.webkit.WebSettings)
    {
        android.webkit.WebSettings $r0;
        android.webkit.BrowserFrame r1;

        $r0 := @parameter0: android.webkit.WebSettings;

        r1 = $r0.<android.webkit.WebSettings: android.webkit.BrowserFrame mBrowserFrame>;

        return r1;
    }

    static void access$100(android.webkit.WebSettings, int)
    {
        android.webkit.WebSettings $r0;
        int $i0;

        $r0 := @parameter0: android.webkit.WebSettings;

        $i0 := @parameter1: int;

        specialinvoke $r0.<android.webkit.WebSettings: void nativeSync(int)>($i0);

        return;
    }

    static boolean access$202(android.webkit.WebSettings, boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0;

        $r0 := @parameter0: android.webkit.WebSettings;

        $z0 := @parameter1: boolean;

        $r0.<android.webkit.WebSettings: boolean mSyncPending> = $z0;

        return $z0;
    }

    static android.webkit.WebSettings$RenderPriority access$400(android.webkit.WebSettings)
    {
        android.webkit.WebSettings $r0;
        android.webkit.WebSettings$RenderPriority r1;

        $r0 := @parameter0: android.webkit.WebSettings;

        r1 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$RenderPriority mRenderPriority>;

        return r1;
    }

    private java.lang.String getCurrentAcceptLanguage()
    {
        android.webkit.WebSettings $r0;
        java.lang.StringBuffer $r1;
        java.util.Locale $r2, $r5;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;
        java.lang.Throwable $r6;

        $r0 := @this: android.webkit.WebSettings;

        $r3 = <android.webkit.WebSettings: java.lang.Object sLockForLocaleSettings>;

        entermonitor $r3;

     label1:
        $r2 = <android.webkit.WebSettings: java.util.Locale sLocale>;

        exitmonitor $r3;

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.util.Locale: java.lang.String getLanguage()>();

        if $r4 == null goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.util.Locale: java.lang.String getCountry()>();

        if $r4 == null goto label3;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label3:
        $r5 = <java.util.Locale: java.util.Locale US>;

        $z0 = virtualinvoke $r2.<java.util.Locale: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r2 = <java.util.Locale: java.util.Locale US>;

        $r4 = virtualinvoke $r2.<java.util.Locale: java.lang.String getLanguage()>();

        if $r4 == null goto label4;

        $r4 = virtualinvoke $r2.<java.util.Locale: java.lang.String getLanguage()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r2.<java.util.Locale: java.lang.String getCountry()>();

        if $r4 == null goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label4:
        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;

     label5:
        $r6 := @caughtexception;

     label6:
        exitmonitor $r3;

     label7:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private java.lang.String getCurrentUserAgent()
    {
        android.webkit.WebSettings $r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2;
        java.util.Locale $r3;
        java.lang.Object $r4;
        int $i0;
        android.content.Context $r5;
        android.content.res.Resources $r6;
        java.lang.CharSequence $r7;
        java.lang.Object[] $r8;
        java.lang.Throwable $r9, $r10;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label01:
        $r4 = <android.webkit.WebSettings: java.lang.Object sLockForLocaleSettings>;

        entermonitor $r4;

     label02:
        $r3 = <android.webkit.WebSettings: java.util.Locale sLocale>;

        exitmonitor $r4;

     label03:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = <android.os.Build$VERSION: java.lang.String RELEASE>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label13;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label04:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; ");

        $r2 = virtualinvoke $r3.<java.util.Locale: java.lang.String getLanguage()>();

        if $r2 == null goto label14;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r3.<java.util.Locale: java.lang.String getCountry()>();

        if $r2 == null goto label05;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label05:
        $r2 = <android.os.Build: java.lang.String MODEL>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label06;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; ");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label06:
        $r2 = <android.os.Build: java.lang.String ID>;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label07;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Build/");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

     label07:
        $r5 = $r0.<android.webkit.WebSettings: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: java.lang.CharSequence getText(int)>(17039753);

        $r2 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = $r1;

        $r2 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r2, $r8);

     label08:
        exitmonitor $r0;

        return $r2;

     label09:
        $r9 := @caughtexception;

     label10:
        exitmonitor $r4;

     label11:
        throw $r9;

     label12:
        $r10 := @caughtexception;

        exitmonitor $r0;

        throw $r10;

     label13:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("1.0");

        goto label04;

     label14:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("en");

     label15:
        goto label05;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label08 with label12;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label11 to label12 with label12;
        catch java.lang.Throwable from label13 to label15 with label12;
    }

    private native void nativeSync(int);

    private int pin(int)
    {
        android.webkit.WebSettings $r0;
        int $i0;

        $r0 := @this: android.webkit.WebSettings;

        $i0 := @parameter0: int;

        if $i0 >= 1 goto label1;

        return 1;

     label1:
        if $i0 <= 72 goto label2;

        return 72;

     label2:
        return $i0;
    }

    private void postSync()
    {
        android.webkit.WebSettings $r0;
        boolean $z0;
        android.webkit.WebSettings$EventHandler $r1;
        android.os.Message $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        $z0 = $r0.<android.webkit.WebSettings: boolean mSyncPending>;

        if $z0 != 0 goto label2;

        $r1 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$EventHandler mEventHandler>;

        $r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(null, 0);

        $z0 = staticinvoke <android.webkit.WebSettings$EventHandler: boolean access$600(android.webkit.WebSettings$EventHandler,android.os.Message)>($r1, $r2);

        $r0.<android.webkit.WebSettings: boolean mSyncPending> = $z0;

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void verifyNetworkAccess()
    {
        android.webkit.WebSettings $r0;
        boolean $z0;
        android.content.Context $r1;
        int $i0, $i1;
        java.lang.SecurityException $r2;

        $r0 := @this: android.webkit.WebSettings;

        $z0 = $r0.<android.webkit.WebSettings: boolean mBlockNetworkLoads>;

        if $z0 != 0 goto label1;

        $r1 = $r0.<android.webkit.WebSettings: android.content.Context mContext>;

        $i0 = staticinvoke <android.os.Process: int myPid()>();

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $i0 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INTERNET", $i0, $i1);

        if $i0 == 0 goto label2;

        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Permission denied - application missing INTERNET permission");

        throw $r2;

     label1:
        return;

     label2:
        return;
    }

    java.lang.String getAcceptLanguage()
    {
        android.webkit.WebSettings $r0;
        java.lang.Object $r1;
        java.util.Locale $r2, $r3;
        boolean $z0;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r6;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        $r1 = <android.webkit.WebSettings: java.lang.Object sLockForLocaleSettings>;

        entermonitor $r1;

     label2:
        $r2 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r3 = <android.webkit.WebSettings: java.util.Locale sLocale>;

        $z0 = virtualinvoke $r3.<java.util.Locale: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        <android.webkit.WebSettings: java.util.Locale sLocale> = $r2;

        $r4 = specialinvoke $r0.<android.webkit.WebSettings: java.lang.String getCurrentAcceptLanguage()>();

        $r0.<android.webkit.WebSettings: java.lang.String mAcceptLanguage> = $r4;

     label3:
        exitmonitor $r1;

     label4:
        $r4 = $r0.<android.webkit.WebSettings: java.lang.String mAcceptLanguage>;

     label5:
        exitmonitor $r0;

        return $r4;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor $r1;

     label8:
        throw $r5;

     label9:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label2 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label9;
        catch java.lang.Throwable from label7 to label8 with label6;
        catch java.lang.Throwable from label8 to label9 with label9;
    }

    public boolean getAllowFileAccess()
    {
        android.webkit.WebSettings $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        z0 = $r0.<android.webkit.WebSettings: boolean mAllowFileAccess>;

        return z0;
    }

    public boolean getBlockNetworkImage()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mBlockNetworkImage>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getBlockNetworkLoads()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mBlockNetworkLoads>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getBuiltInZoomControls()
    {
        android.webkit.WebSettings $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        z0 = $r0.<android.webkit.WebSettings: boolean mBuiltInZoomControls>;

        return z0;
    }

    public int getCacheMode()
    {
        android.webkit.WebSettings $r0;
        int i0;

        $r0 := @this: android.webkit.WebSettings;

        i0 = $r0.<android.webkit.WebSettings: int mOverrideCacheMode>;

        return i0;
    }

    public java.lang.String getCursiveFontFamily()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: java.lang.String mCursiveFontFamily>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getDefaultFixedFontSize()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        int i0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        i0 = $r0.<android.webkit.WebSettings: int mDefaultFixedFontSize>;

     label2:
        exitmonitor $r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getDefaultFontSize()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        int i0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        i0 = $r0.<android.webkit.WebSettings: int mDefaultFontSize>;

     label2:
        exitmonitor $r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getDefaultTextEncodingName()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: java.lang.String mDefaultTextEncoding>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getFantasyFontFamily()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: java.lang.String mFantasyFontFamily>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getFixedFontFamily()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: java.lang.String mFixedFontFamily>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getJavaScriptCanOpenWindowsAutomatically()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mJavaScriptCanOpenWindowsAutomatically>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getJavaScriptEnabled()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mJavaScriptEnabled>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        android.webkit.WebSettings$LayoutAlgorithm r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm mLayoutAlgorithm>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getLightTouchEnabled()
    {
        android.webkit.WebSettings $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        z0 = $r0.<android.webkit.WebSettings: boolean mLightTouchEnabled>;

        return z0;
    }

    public boolean getLoadsImagesAutomatically()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mLoadsImagesAutomatically>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getMinimumFontSize()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        int i0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        i0 = $r0.<android.webkit.WebSettings: int mMinimumFontSize>;

     label2:
        exitmonitor $r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getMinimumLogicalFontSize()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        int i0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        i0 = $r0.<android.webkit.WebSettings: int mMinimumLogicalFontSize>;

     label2:
        exitmonitor $r0;

        return i0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getNavDump()
    {
        android.webkit.WebSettings $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        z0 = $r0.<android.webkit.WebSettings: boolean mNavDump>;

        return z0;
    }

    boolean getNeedInitialFocus()
    {
        android.webkit.WebSettings $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        z0 = $r0.<android.webkit.WebSettings: boolean mNeedInitialFocus>;

        return z0;
    }

    public boolean getPluginsEnabled()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mPluginsEnabled>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getPluginsPath()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: java.lang.String mPluginsPath>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getSansSerifFontFamily()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: java.lang.String mSansSerifFontFamily>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getSaveFormData()
    {
        android.webkit.WebSettings $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        z0 = $r0.<android.webkit.WebSettings: boolean mSaveFormData>;

        return z0;
    }

    public boolean getSavePassword()
    {
        android.webkit.WebSettings $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        z0 = $r0.<android.webkit.WebSettings: boolean mSavePassword>;

        return z0;
    }

    public java.lang.String getSerifFontFamily()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: java.lang.String mSerifFontFamily>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.String getStandardFontFamily()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: java.lang.String mStandardFontFamily>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.webkit.WebSettings$TextSize getTextSize()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        android.webkit.WebSettings$TextSize r2;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        r2 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$TextSize mTextSize>;

     label2:
        exitmonitor $r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getUseDoubleTree()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mUseDoubleTree>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean getUseWideViewPort()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mUseWideViewport>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getUserAgent()
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        byte $b0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        $r1 = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1";

        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

     label2:
        if $z0 == 0 goto label4;

        $b0 = 1;

     label3:
        exitmonitor $r0;

        return $b0;

     label4:
        $r1 = "Mozilla/5.0 (iPhone; U; CPU iPhone 2_1 like Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Mobile/5F136 Safari/525.20.1";

        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label5;

        $b0 = 2;

        goto label3;

     label5:
        $z0 = $r0.<android.webkit.WebSettings: boolean mUseDefaultUserAgent>;

     label6:
        if $z0 == 0 goto label7;

        $b0 = 0;

        goto label3;

     label7:
        $b0 = -1;

        goto label3;

     label8:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label4 to label6 with label8;
    }

    public java.lang.String getUserAgentString()
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.util.Locale $r4, $r5;
        java.lang.Throwable $r6, $r7;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label01:
        $r1 = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1";

        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label02;

        $r1 = "Mozilla/5.0 (iPhone; U; CPU iPhone 2_1 like Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Mobile/5F136 Safari/525.20.1";

        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label02;

        $z0 = $r0.<android.webkit.WebSettings: boolean mUseDefaultUserAgent>;

        if $z0 != 0 goto label04;

     label02:
        $r1 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

     label03:
        exitmonitor $r0;

        return $r1;

     label04:
        $z0 = 0;

     label05:
        $r3 = <android.webkit.WebSettings: java.lang.Object sLockForLocaleSettings>;

        entermonitor $r3;

     label06:
        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r5 = <android.webkit.WebSettings: java.util.Locale sLocale>;

        $z1 = virtualinvoke $r5.<java.util.Locale: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label07;

        <android.webkit.WebSettings: java.util.Locale sLocale> = $r4;

        $r1 = specialinvoke $r0.<android.webkit.WebSettings: java.lang.String getCurrentUserAgent()>();

        $r0.<android.webkit.WebSettings: java.lang.String mUserAgent> = $r1;

        $r1 = specialinvoke $r0.<android.webkit.WebSettings: java.lang.String getCurrentAcceptLanguage()>();

        $r0.<android.webkit.WebSettings: java.lang.String mAcceptLanguage> = $r1;

        $z0 = 1;

     label07:
        exitmonitor $r3;

     label08:
        if $z0 == 0 goto label10;

     label09:
        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label10:
        $r1 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

     label11:
        goto label03;

     label12:
        $r6 := @caughtexception;

     label13:
        exitmonitor $r3;

     label14:
        throw $r6;

     label15:
        $r7 := @caughtexception;

        exitmonitor $r0;

        throw $r7;

        catch java.lang.Throwable from label01 to label03 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label08 with label12;
        catch java.lang.Throwable from label09 to label11 with label15;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    public void setAllowFileAccess(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebSettings: boolean mAllowFileAccess> = $z0;

        return;
    }

    public void setBlockNetworkImage(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mBlockNetworkImage>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mBlockNetworkImage> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setBlockNetworkLoads(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mBlockNetworkLoads>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mBlockNetworkLoads> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void verifyNetworkAccess()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setBuiltInZoomControls(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebSettings: boolean mBuiltInZoomControls> = $z0;

        return;
    }

    public void setCacheMode(int)
    {
        android.webkit.WebSettings $r0;
        int $i0, $i1;

        $r0 := @this: android.webkit.WebSettings;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.webkit.WebSettings: int mOverrideCacheMode>;

        if $i0 == $i1 goto label1;

        $r0.<android.webkit.WebSettings: int mOverrideCacheMode> = $i0;

        return;

     label1:
        return;
    }

    public void setCursiveFontFamily(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label2;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mCursiveFontFamily>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r0.<android.webkit.WebSettings: java.lang.String mCursiveFontFamily> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setDefaultFixedFontSize(int)
    {
        android.webkit.WebSettings $r0;
        int $i0, $i1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $i0 = specialinvoke $r0.<android.webkit.WebSettings: int pin(int)>($i0);

        $i1 = $r0.<android.webkit.WebSettings: int mDefaultFixedFontSize>;

        if $i1 == $i0 goto label2;

        $r0.<android.webkit.WebSettings: int mDefaultFixedFontSize> = $i0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setDefaultFontSize(int)
    {
        android.webkit.WebSettings $r0;
        int $i0, $i1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $i0 = specialinvoke $r0.<android.webkit.WebSettings: int pin(int)>($i0);

        $i1 = $r0.<android.webkit.WebSettings: int mDefaultFontSize>;

        if $i1 == $i0 goto label2;

        $r0.<android.webkit.WebSettings: int mDefaultFontSize> = $i0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setDefaultTextEncodingName(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label2;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mDefaultTextEncoding>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r0.<android.webkit.WebSettings: java.lang.String mDefaultTextEncoding> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setFantasyFontFamily(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label2;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mFantasyFontFamily>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r0.<android.webkit.WebSettings: java.lang.String mFantasyFontFamily> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setFixedFontFamily(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label2;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mFixedFontFamily>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r0.<android.webkit.WebSettings: java.lang.String mFixedFontFamily> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setJavaScriptCanOpenWindowsAutomatically(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mJavaScriptCanOpenWindowsAutomatically>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mJavaScriptCanOpenWindowsAutomatically> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setJavaScriptEnabled(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mJavaScriptEnabled>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mJavaScriptEnabled> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)
    {
        android.webkit.WebSettings $r0;
        android.webkit.WebSettings$LayoutAlgorithm $r1, $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: android.webkit.WebSettings$LayoutAlgorithm;

        entermonitor $r0;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm mLayoutAlgorithm>;

        if $r2 == $r1 goto label2;

        $r0.<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm mLayoutAlgorithm> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setLightTouchEnabled(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebSettings: boolean mLightTouchEnabled> = $z0;

        return;
    }

    public void setLoadsImagesAutomatically(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mLoadsImagesAutomatically>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mLoadsImagesAutomatically> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setMinimumFontSize(int)
    {
        android.webkit.WebSettings $r0;
        int $i0, $i1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $i0 = specialinvoke $r0.<android.webkit.WebSettings: int pin(int)>($i0);

        $i1 = $r0.<android.webkit.WebSettings: int mMinimumFontSize>;

        if $i1 == $i0 goto label2;

        $r0.<android.webkit.WebSettings: int mMinimumFontSize> = $i0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setMinimumLogicalFontSize(int)
    {
        android.webkit.WebSettings $r0;
        int $i0, $i1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $i0 = specialinvoke $r0.<android.webkit.WebSettings: int pin(int)>($i0);

        $i1 = $r0.<android.webkit.WebSettings: int mMinimumLogicalFontSize>;

        if $i1 == $i0 goto label2;

        $r0.<android.webkit.WebSettings: int mMinimumLogicalFontSize> = $i0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setNavDump(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebSettings: boolean mNavDump> = $z0;

        return;
    }

    public void setNeedInitialFocus(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $z1 = $r0.<android.webkit.WebSettings: boolean mNeedInitialFocus>;

        if $z1 == $z0 goto label1;

        $r0.<android.webkit.WebSettings: boolean mNeedInitialFocus> = $z0;

        return;

     label1:
        return;
    }

    public void setPluginsEnabled(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mPluginsEnabled>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mPluginsEnabled> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setPluginsPath(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label2;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mPluginsPath>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r0.<android.webkit.WebSettings: java.lang.String mPluginsPath> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setRenderPriority(android.webkit.WebSettings$RenderPriority)
    {
        android.webkit.WebSettings $r0;
        android.webkit.WebSettings$RenderPriority $r1, $r3;
        android.os.Message $r2;
        android.webkit.WebSettings$EventHandler $r4;
        java.lang.Throwable $r5;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: android.webkit.WebSettings$RenderPriority;

        entermonitor $r0;

     label1:
        $r3 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$RenderPriority mRenderPriority>;

        if $r3 == $r1 goto label2;

        $r0.<android.webkit.WebSettings: android.webkit.WebSettings$RenderPriority mRenderPriority> = $r1;

        $r4 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$EventHandler mEventHandler>;

        $r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>(null, 1);

        staticinvoke <android.webkit.WebSettings$EventHandler: boolean access$600(android.webkit.WebSettings$EventHandler,android.os.Message)>($r4, $r2);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r5 := @caughtexception;

        exitmonitor $r0;

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setSansSerifFontFamily(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label2;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mSansSerifFontFamily>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r0.<android.webkit.WebSettings: java.lang.String mSansSerifFontFamily> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setSaveFormData(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebSettings: boolean mSaveFormData> = $z0;

        return;
    }

    public void setSavePassword(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebSettings: boolean mSavePassword> = $z0;

        return;
    }

    public void setSerifFontFamily(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label2;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mSerifFontFamily>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r0.<android.webkit.WebSettings: java.lang.String mSerifFontFamily> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setShrinksStandaloneImagesToFit(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $z1 = $r0.<android.webkit.WebSettings: boolean mShrinksStandaloneImagesToFit>;

        if $z1 == $z0 goto label1;

        $r0.<android.webkit.WebSettings: boolean mShrinksStandaloneImagesToFit> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

        return;

     label1:
        return;
    }

    public void setStandardFontFamily(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label2;

     label1:
        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mStandardFontFamily>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $r0.<android.webkit.WebSettings: java.lang.String mStandardFontFamily> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setSupportMultipleWindows(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mSupportMultipleWindows>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mSupportMultipleWindows> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setSupportZoom(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        $r0.<android.webkit.WebSettings: boolean mSupportZoom> = $z0;

        return;
    }

    public void setTextSize(android.webkit.WebSettings$TextSize)
    {
        android.webkit.WebSettings $r0;
        android.webkit.WebSettings$TextSize $r1, $r4;
        android.provider.Checkin$Stats$Tag $r2;
        android.content.ContentResolver $r3;
        boolean $z0;
        android.content.Context $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: android.webkit.WebSettings$TextSize;

        entermonitor $r0;

     label1:
        $z0 = <android.webkit.WebView: boolean mLogEvent>;

        if $z0 == 0 goto label2;

        $r4 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$TextSize mTextSize>;

        if $r4 == $r1 goto label2;

        $r5 = $r0.<android.webkit.WebSettings: android.content.Context mContext>;

        $r3 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r2 = <android.provider.Checkin$Stats$Tag: android.provider.Checkin$Stats$Tag BROWSER_TEXT_SIZE_CHANGE>;

        staticinvoke <android.provider.Checkin: android.net.Uri updateStats(android.content.ContentResolver,android.provider.Checkin$Stats$Tag,int,double)>($r3, $r2, 1, 0.0);

     label2:
        $r0.<android.webkit.WebSettings: android.webkit.WebSettings$TextSize mTextSize> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label3:
        exitmonitor $r0;

        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public void setUseDoubleTree(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mUseDoubleTree>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mUseDoubleTree> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setUseWideViewPort(boolean)
    {
        android.webkit.WebSettings $r0;
        boolean $z0, $z1;
        java.lang.Throwable $r1;

        $r0 := @this: android.webkit.WebSettings;

        $z0 := @parameter0: boolean;

        entermonitor $r0;

     label1:
        $z1 = $r0.<android.webkit.WebSettings: boolean mUseWideViewport>;

        if $z1 == $z0 goto label2;

        $r0.<android.webkit.WebSettings: boolean mUseWideViewport> = $z0;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void setUserAgent(int)
    {
        android.webkit.WebSettings $r0;
        int $i0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $i0 := @parameter0: int;

        entermonitor $r0;

        $r1 = null;

        if $i0 != 1 goto label08;

     label01:
        $r1 = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1";

        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

     label02:
        if $z0 == 0 goto label04;

     label03:
        exitmonitor $r0;

        return;

     label04:
        $r1 = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1";

     label05:
        virtualinvoke $r0.<android.webkit.WebSettings: void setUserAgentString(java.lang.String)>($r1);

     label06:
        goto label03;

     label07:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

     label08:
        if $i0 != 2 goto label11;

     label09:
        $r1 = "Mozilla/5.0 (iPhone; U; CPU iPhone 2_1 like Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Mobile/5F136 Safari/525.20.1";

        $r2 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label03;

        $r1 = "Mozilla/5.0 (iPhone; U; CPU iPhone 2_1 like Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Mobile/5F136 Safari/525.20.1";

     label10:
        goto label05;

     label11:
        if $i0 == 0 goto label05;

        goto label03;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label04 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }

    public void setUserAgentString(java.lang.String)
    {
        android.webkit.WebSettings $r0;
        java.lang.String $r1, $r5;
        int $i0;
        java.lang.Object $r2;
        java.util.Locale $r3, $r4;
        boolean $z0;
        java.lang.Throwable $r6, $r7;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: java.lang.String;

        entermonitor $r0;

        if $r1 == null goto label02;

     label01:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 != 0 goto label12;

     label02:
        $r2 = <android.webkit.WebSettings: java.lang.Object sLockForLocaleSettings>;

        entermonitor $r2;

     label03:
        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r4 = <android.webkit.WebSettings: java.util.Locale sLocale>;

        $z0 = virtualinvoke $r4.<java.util.Locale: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label04;

        <android.webkit.WebSettings: java.util.Locale sLocale> = $r3;

        $r1 = specialinvoke $r0.<android.webkit.WebSettings: java.lang.String getCurrentAcceptLanguage()>();

        $r0.<android.webkit.WebSettings: java.lang.String mAcceptLanguage> = $r1;

     label04:
        exitmonitor $r2;

     label05:
        $r1 = specialinvoke $r0.<android.webkit.WebSettings: java.lang.String getCurrentUserAgent()>();

        $r0.<android.webkit.WebSettings: boolean mUseDefaultUserAgent> = 1;

     label06:
        $r5 = $r0.<android.webkit.WebSettings: java.lang.String mUserAgent>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label07;

        $r0.<android.webkit.WebSettings: java.lang.String mUserAgent> = $r1;

        specialinvoke $r0.<android.webkit.WebSettings: void postSync()>();

     label07:
        exitmonitor $r0;

        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor $r2;

     label10:
        throw $r6;

     label11:
        $r7 := @caughtexception;

        exitmonitor $r0;

        throw $r7;

     label12:
        $r0.<android.webkit.WebSettings: boolean mUseDefaultUserAgent> = 0;

     label13:
        goto label06;

        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label05 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean supportMultipleWindows()
    {
        android.webkit.WebSettings $r0;
        java.lang.Throwable $r1;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        entermonitor $r0;

     label1:
        z0 = $r0.<android.webkit.WebSettings: boolean mSupportMultipleWindows>;

     label2:
        exitmonitor $r0;

        return z0;

     label3:
        $r1 := @caughtexception;

        exitmonitor $r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean supportZoom()
    {
        android.webkit.WebSettings $r0;
        boolean z0;

        $r0 := @this: android.webkit.WebSettings;

        z0 = $r0.<android.webkit.WebSettings: boolean mSupportZoom>;

        return z0;
    }

    void syncSettingsAndCreateHandler(android.webkit.BrowserFrame)
    {
        android.webkit.WebSettings $r0;
        android.webkit.BrowserFrame $r1;
        int $i0;
        android.webkit.WebSettings$EventHandler $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.webkit.WebSettings;

        $r1 := @parameter0: android.webkit.BrowserFrame;

        entermonitor $r0;

     label1:
        $r0.<android.webkit.WebSettings: android.webkit.BrowserFrame mBrowserFrame> = $r1;

        $i0 = $r1.<android.webkit.BrowserFrame: int mNativeFrame>;

        specialinvoke $r0.<android.webkit.WebSettings: void nativeSync(int)>($i0);

        $r0.<android.webkit.WebSettings: boolean mSyncPending> = 0;

        $r2 = $r0.<android.webkit.WebSettings: android.webkit.WebSettings$EventHandler mEventHandler>;

        staticinvoke <android.webkit.WebSettings$EventHandler: void access$700(android.webkit.WebSettings$EventHandler)>($r2);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.webkit.WebSettings: int LOAD_NO_CACHE> = 2;

        <android.webkit.WebSettings: int LOAD_NORMAL> = 0;

        <android.webkit.WebSettings: int LOAD_DEFAULT> = -1;

        <android.webkit.WebSettings: int LOAD_CACHE_ONLY> = 3;

        <android.webkit.WebSettings: int LOAD_CACHE_ELSE_NETWORK> = 1;

        <android.webkit.WebSettings: java.lang.String IPHONE_USERAGENT> = "Mozilla/5.0 (iPhone; U; CPU iPhone 2_1 like Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Mobile/5F136 Safari/525.20.1";

        <android.webkit.WebSettings: java.lang.String DESKTOP_USERAGENT> = "Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en) AppleWebKit/528.5+ (KHTML, like Gecko) Version/3.1.2 Safari/525.20.1";

        return;
    }
}
