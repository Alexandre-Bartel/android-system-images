public class SQLite.JDBC2y.JDBCDatabaseMetaData extends java.lang.Object implements java.sql.DatabaseMetaData
{
    private SQLite.JDBC2y.JDBCConnection conn;

    public void <init>(SQLite.JDBC2y.JDBCConnection)
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        SQLite.JDBC2y.JDBCConnection $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: SQLite.JDBC2y.JDBCConnection;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn> = $r1;

        return;
    }

    static int getD(java.lang.String, int)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String $r0;
        java.lang.NumberFormatException $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        lookupswitch($i0)
        {
            case 4: goto label02;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label01;
            case 8: goto label06;
            default: goto label01;
        };

     label01:
        $i0 = staticinvoke <SQLite.JDBC2y.JDBCDatabaseMetaData: int getM(java.lang.String,int)>($r0, $i0);

        return $i0;

     label02:
        $i1 = 10;

     label03:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(40);

        if $i2 <= 0 goto label10;

        $i2 = $i2 + 1;

        $i2 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(44, $i2);

        if $i2 >= 0 goto label07;

        $i0 = staticinvoke <SQLite.JDBC2y.JDBCDatabaseMetaData: int getM(java.lang.String,int)>($r0, $i0);

        return $i0;

     label04:
        $i1 = 5;

        goto label03;

     label05:
        $i1 = 24;

        goto label03;

     label06:
        $i1 = 53;

        goto label03;

     label07:
        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(41, $i2);

        $i3 = $i0 - $i2;

        if $i3 <= 0 goto label10;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i0);

     label08:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 10);

     label09:
        $i1 = $i0;

     label10:
        return $i1;

     label11:
        $r1 := @caughtexception;

        goto label10;

        catch java.lang.NumberFormatException from label08 to label09 with label11;
    }

    static int getM(java.lang.String, int)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.String $r0;
        java.lang.NumberFormatException $r1;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 = 10;

        $i2 = 65536;

        lookupswitch($i0)
        {
            case 4: goto label07;
            case 5: goto label08;
            case 6: goto label09;
            case 8: goto label10;
            case 91: goto label06;
            case 92: goto label12;
            case 93: goto label11;
            default: goto label01;
        };

     label01:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(40);

        if $i0 <= 0 goto label05;

        $i0 = $i0 + 1;

        $i3 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(44, $i0);

        $i1 = $i3;

        if $i3 >= 0 goto label02;

        $i1 = virtualinvoke $r0.<java.lang.String: int indexOf(int,int)>(41, $i0);

     label02:
        $i3 = $i1 - $i0;

        if $i3 <= 0 goto label05;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

     label03:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 10);

     label04:
        $i2 = $i0;

     label05:
        $i1 = $i2;

     label06:
        return $i1;

     label07:
        $i2 = 11;

        goto label01;

     label08:
        $i2 = 6;

        goto label01;

     label09:
        $i2 = 25;

        goto label01;

     label10:
        $i2 = 54;

        goto label01;

     label11:
        return 30;

     label12:
        return 8;

     label13:
        $r1 := @caughtexception;

        goto label05;

        catch java.lang.NumberFormatException from label03 to label04 with label13;
    }

    private void internalImportedKeys(java.lang.String, java.lang.String, SQLite.JDBC2y.JDBCResultSet, SQLite.JDBC2y.TableResultX)
    {
        java.lang.String $r0, $r1, $r4, $r6, $r7, $r9;
        SQLite.JDBC2y.JDBCResultSet $r2;
        SQLite.JDBC2y.TableResultX $r3;
        java.util.Hashtable $r5;
        java.lang.String[] $r8;
        SQLite.JDBC2y.JDBCDatabaseMetaData $r10;
        int $i0, $i1;
        SQLite.TableResult $r11;
        java.lang.Integer $r12;
        java.util.Vector $r13;
        java.lang.Object $r14;
        boolean $z0;
        java.lang.StringBuilder $r15;

        $r10 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: SQLite.JDBC2y.JDBCResultSet;

        $r3 := @parameter3: SQLite.JDBC2y.TableResultX;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        $i0 = 0;

     label1:
        $r11 = $r2.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r11.<SQLite.TableResult: int ncolumns>;

        if $i0 >= $i1 goto label2;

        $r11 = $r2.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r8 = $r11.<SQLite.TableResult: java.lang.String[] column>;

        $r9 = $r8[$i0];

        $r12 = new java.lang.Integer;

        specialinvoke $r12.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $i0 = 0;

     label3:
        $r11 = $r2.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r11.<SQLite.TableResult: int nrows>;

        if $i0 >= $i1 goto label8;

        $r11 = $r2.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r13 = $r11.<SQLite.TableResult: java.util.Vector rows>;

        $r14 = virtualinvoke $r13.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r8 = (java.lang.String[]) $r14;

        $r8 = (java.lang.String[]) $r8;

        $r14 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("table");

        $r12 = (java.lang.Integer) $r14;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r7 = $r8[$i1];

        if $r1 == null goto label5;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7);

        if $z0 != 0 goto label5;

     label4:
        $i0 = $i0 + 1;

        goto label3;

     label5:
        $r14 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("from");

        $r12 = (java.lang.Integer) $r14;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r6 = $r8[$i1];

        $r14 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("to");

        $r12 = (java.lang.Integer) $r14;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r4 = $r8[$i1];

        $r14 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("seq");

        $r12 = (java.lang.Integer) $r14;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        $r9 = $r8[$i1];

        $i1 = $r3.<SQLite.TableResult: int ncolumns>;

        $r8 = newarray (java.lang.String)[$i1];

        $r8[0] = "";

        $r8[1] = "";

        $r8[2] = $r7;

        $r8[3] = $r6;

        $r8[4] = "";

        $r8[5] = "";

        $r8[6] = $r0;

        if $r4 != null goto label7;

        $r4 = $r6;

     label6:
        $r8[7] = $r4;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        $i1 = $i1 + 1;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[8] = $r9;

        $r8[9] = "3";

        $r8[10] = "3";

        $r8[11] = null;

        $r8[12] = null;

        $r8[13] = "7";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r8);

        goto label4;

     label7:
        goto label6;

     label8:
        return;
    }

    static int mapSqlType(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label01;

        return 12;

     label01:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("inter");

        if $z0 == 0 goto label02;

        return 12;

     label02:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("numeric");

        if $z0 != 0 goto label03;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("int");

        if $z0 == 0 goto label04;

     label03:
        return 4;

     label04:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("tinyint");

        if $z0 != 0 goto label05;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("smallint");

        if $z0 == 0 goto label06;

     label05:
        return 5;

     label06:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("float");

        if $z0 == 0 goto label07;

        return 6;

     label07:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("double");

        if $z0 == 0 goto label08;

        return 8;

     label08:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("datetime");

        if $z0 != 0 goto label09;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("timestamp");

        if $z0 == 0 goto label10;

     label09:
        return 93;

     label10:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("date");

        if $z0 == 0 goto label11;

        return 91;

     label11:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("time");

        if $z0 == 0 goto label12;

        return 92;

     label12:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("blob");

        if $z0 == 0 goto label13;

        return -2;

     label13:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("binary");

        if $z0 == 0 goto label14;

        return -2;

     label14:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("varbinary");

        if $z0 == 0 goto label15;

        return -3;

     label15:
        return 12;
    }

    static java.lang.String mapTypeName(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case -3: goto label10;
            case -2: goto label09;
            case 4: goto label02;
            case 5: goto label03;
            case 6: goto label04;
            case 8: goto label05;
            case 91: goto label07;
            case 92: goto label08;
            case 93: goto label06;
            default: goto label01;
        };

     label01:
        return "varchar";

     label02:
        return "integer";

     label03:
        return "smallint";

     label04:
        return "float";

     label05:
        return "double";

     label06:
        return "timestamp";

     label07:
        return "date";

     label08:
        return "time";

     label09:
        return "binary";

     label10:
        return "varbinary";
    }

    public boolean allProceduresAreCallable() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean allTablesAreSelectable() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean dataDefinitionCausesTransactionCommit() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean dataDefinitionIgnoredInTransactions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean deletesAreDetected(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean doesMaxRowSizeIncludeBlobs() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public java.sql.ResultSet getAttributes(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        java.sql.SQLException $r5;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 = new java.sql.SQLException;

        specialinvoke $r5.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r5;
    }

    public java.sql.ResultSet getBestRowIdentifier(java.lang.String, java.lang.String, java.lang.String, int, boolean) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        int $i0, $i1, $i2, $i4, $i5;
        boolean $z0;
        java.util.Hashtable $r4, $r5, $r6;
        SQLite.JDBC2y.JDBCResultSet $r7, $r14, $r15, $r25, $r26;
        SQLite.JDBC2y.JDBCStatement $r8, $r9;
        SQLite.JDBC2y.TableResultX $r10;
        SQLite.JDBC2y.JDBCConnection $r11;
        java.lang.StringBuilder $r12;
        java.sql.ResultSet $r13;
        java.lang.String[] $r16, $r19;
        int[] $r17;
        SQLite.TableResult $r18;
        java.lang.Integer $r20;
        java.sql.SQLException $r21, $r27;
        java.lang.Throwable $r22, $r28;
        java.util.Vector $r23;
        java.lang.Object $r24;
        char $c3;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r3 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $r8 = new SQLite.JDBC2y.JDBCStatement;

        $r11 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r11);

        $r9 = new SQLite.JDBC2y.JDBCStatement;

        $r11 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r9.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r11);

     label01:
        $r12 = new java.lang.StringBuilder;

     label02:
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA index_list(");

        $r3 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r2);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r3);

     label03:
        $r14 = (SQLite.JDBC2y.JDBCResultSet) $r13;

        $r14 = (SQLite.JDBC2y.JDBCResultSet) $r14;

     label04:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA table_info(");

        $r3 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r2);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r9.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r3);

     label05:
        $r7 = (SQLite.JDBC2y.JDBCResultSet) $r13;

        $r15 = (SQLite.JDBC2y.JDBCResultSet) $r7;

     label06:
        virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void close()>();

        virtualinvoke $r9.<SQLite.JDBC2y.JDBCStatement: void close()>();

        $r16 = newarray (java.lang.String)[8];

        $r16[0] = "SCOPE";

        $r16[1] = "COLUMN_NAME";

        $r16[2] = "DATA_TYPE";

        $r16[3] = "TYPE_NAME";

        $r16[4] = "COLUMN_SIZE";

        $r16[5] = "BUFFER_LENGTH";

        $r16[6] = "DECIMAL_DIGITS";

        $r16[7] = "PSEUDO_COLUMN";

        $r17 = newarray (int)[8];

        $r17[0] = 5;

        $r17[1] = 12;

        $r17[2] = 5;

        $r17[3] = 12;

        $r17[4] = 4;

        $r17[5] = 4;

        $r17[6] = 5;

        $r17[7] = 5;

        $r10 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r10.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r10.<SQLite.TableResult: void columns(java.lang.String[])>($r16);

        virtualinvoke $r10.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r17);

        $r7 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r7.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r10, null);

        if $r14 == null goto label30;

        $r18 = $r14.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r18 == null goto label30;

        $r18 = $r14.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r18.<SQLite.TableResult: int nrows>;

        if $i1 <= 0 goto label30;

        if $r15 == null goto label30;

        $r18 = $r15.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r18 == null goto label30;

        $r18 = $r15.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r18.<SQLite.TableResult: int nrows>;

        if $i1 <= 0 goto label30;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        $i1 = 0;

     label07:
        $r18 = $r14.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i2 = $r18.<SQLite.TableResult: int ncolumns>;

        if $i1 >= $i2 goto label11;

        $r18 = $r14.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r19 = $r18.<SQLite.TableResult: java.lang.String[] column>;

        $r3 = $r19[$i1];

        $r20 = new java.lang.Integer;

        specialinvoke $r20.<java.lang.Integer: void <init>(int)>($i1);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r20);

        $i1 = $i1 + 1;

        goto label07;

     label08:
        $r21 := @caughtexception;

     label09:
        throw $r21;

     label10:
        $r22 := @caughtexception;

        virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void close()>();

        virtualinvoke $r9.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r22;

     label11:
        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>()>();

        $i1 = 0;

     label12:
        $r18 = $r15.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i2 = $r18.<SQLite.TableResult: int ncolumns>;

        if $i1 >= $i2 goto label13;

        $r18 = $r15.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r19 = $r18.<SQLite.TableResult: java.lang.String[] column>;

        $r3 = $r19[$i1];

        $r20 = new java.lang.Integer;

        specialinvoke $r20.<java.lang.Integer: void <init>(int)>($i1);

        virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r20);

        $i1 = $i1 + 1;

        goto label12;

     label13:
        $i1 = 0;

     label14:
        $r18 = $r14.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i2 = $r18.<SQLite.TableResult: int nrows>;

        if $i1 >= $i2 goto label30;

        $r18 = $r14.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r23 = $r18.<SQLite.TableResult: java.util.Vector rows>;

        $r24 = virtualinvoke $r23.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r19 = (java.lang.String[]) $r24;

        $r19 = (java.lang.String[]) $r19;

        $r24 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("unique");

        $r20 = (java.lang.Integer) $r24;

        $i2 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        $r1 = $r19[$i2];

        $r24 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r20 = (java.lang.Integer) $r24;

        $i2 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        $r3 = $r19[$i2];

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        if $c3 != 48 goto label16;

     label15:
        $i1 = $i1 + 1;

        goto label14;

     label16:
        $r8 = new SQLite.JDBC2y.JDBCStatement;

        $r11 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r11);

        $r25 = null;

     label17:
        $r12 = new java.lang.StringBuilder;

     label18:
        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA index_info(");

        $r3 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r3);

     label19:
        $r26 = (SQLite.JDBC2y.JDBCResultSet) $r13;

        $r25 = (SQLite.JDBC2y.JDBCResultSet) $r26;

     label20:
        virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void close()>();

     label21:
        if $r25 == null goto label15;

        $r18 = $r25.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r18 == null goto label15;

        $r18 = $r25.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i2 = $r18.<SQLite.TableResult: int nrows>;

        if $i2 <= 0 goto label15;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<java.util.Hashtable: void <init>()>();

        $i2 = 0;

     label22:
        $r18 = $r25.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i4 = $r18.<SQLite.TableResult: int ncolumns>;

        if $i2 >= $i4 goto label25;

        $r18 = $r25.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r19 = $r18.<SQLite.TableResult: java.lang.String[] column>;

        $r3 = $r19[$i2];

        $r20 = new java.lang.Integer;

        specialinvoke $r20.<java.lang.Integer: void <init>(int)>($i2);

        virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r20);

        $i2 = $i2 + 1;

        goto label22;

     label23:
        $r27 := @caughtexception;

        virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void close()>();

        goto label21;

     label24:
        $r28 := @caughtexception;

        virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r28;

     label25:
        $i2 = 0;

     label26:
        $r18 = $r25.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i4 = $r18.<SQLite.TableResult: int nrows>;

        if $i2 >= $i4 goto label15;

        $r18 = $r25.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r23 = $r18.<SQLite.TableResult: java.util.Vector rows>;

        $r24 = virtualinvoke $r23.<java.util.Vector: java.lang.Object elementAt(int)>($i2);

        $r19 = (java.lang.String[]) $r24;

        $r19 = (java.lang.String[]) $r19;

        $r24 = virtualinvoke $r6.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r20 = (java.lang.Integer) $r24;

        $i4 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        $r3 = $r19[$i4];

        $i4 = 0;

     label27:
        $r18 = $r15.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i5 = $r18.<SQLite.TableResult: int nrows>;

        if $i4 >= $i5 goto label29;

        $r18 = $r15.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r23 = $r18.<SQLite.TableResult: java.util.Vector rows>;

        $r24 = virtualinvoke $r23.<java.util.Vector: java.lang.Object elementAt(int)>($i4);

        $r19 = (java.lang.String[]) $r24;

        $r19 = (java.lang.String[]) $r19;

        $r24 = virtualinvoke $r5.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r20 = (java.lang.Integer) $r24;

        $i5 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        $r1 = $r19[$i5];

        $i5 = virtualinvoke $r3.<java.lang.String: int compareTo(java.lang.String)>($r1);

        if $i5 != 0 goto label28;

        $i5 = lengthof $r16;

        $r19 = newarray (java.lang.String)[$i5];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19[0] = $r1;

        $r19[1] = $r3;

        $r19[2] = "12";

        $r19[3] = "VARCHAR";

        $r19[4] = "65536";

        $r19[5] = "0";

        $r19[6] = "0";

        $r19[7] = "1";

        virtualinvoke $r10.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r19);

     label28:
        $i4 = $i4 + 1;

        goto label27;

     label29:
        $i2 = $i2 + 1;

        goto label26;

     label30:
        $i1 = $r10.<SQLite.TableResult: int nrows>;

        if $i1 > 0 goto label31;

        $i1 = lengthof $r16;

        $r16 = newarray (java.lang.String)[$i1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16[0] = $r3;

        $r16[1] = "_ROWID_";

        $r16[2] = "4";

        $r16[3] = "INTEGER";

        $r16[4] = "10";

        $r16[5] = "0";

        $r16[6] = "0";

        $r16[7] = "2";

        virtualinvoke $r10.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r16);

        return $r7;

     label31:
        return $r7;

        catch java.sql.SQLException from label02 to label03 with label08;
        catch java.sql.SQLException from label04 to label05 with label08;
        catch java.lang.Throwable from label01 to label06 with label10;
        catch java.lang.Throwable from label09 to label10 with label10;
        catch java.sql.SQLException from label18 to label19 with label23;
        catch java.lang.Throwable from label17 to label20 with label24;
    }

    public java.lang.String getCatalogSeparator() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.lang.String getCatalogTerm() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.sql.ResultSet getCatalogs() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String[] $r1;
        SQLite.JDBC2y.JDBCResultSet $r2;
        SQLite.TableResult $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "TABLE_CAT";

        $r3 = new SQLite.TableResult;

        specialinvoke $r3.<SQLite.TableResult: void <init>()>();

        virtualinvoke $r3.<SQLite.TableResult: void columns(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r2 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r2.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r3, null);

        return $r2;
    }

    public java.sql.ResultSet getColumnPrivileges(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        java.lang.String[] $r5;
        SQLite.JDBC2y.JDBCResultSet $r6;
        SQLite.JDBC2y.TableResultX $r7;
        int[] $r8;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        $r5 = newarray (java.lang.String)[8];

        $r5[0] = "TABLE_CAT";

        $r5[1] = "TABLE_SCHEM";

        $r5[2] = "TABLE_NAME";

        $r5[3] = "COLUMN_NAME";

        $r5[4] = "GRANTOR";

        $r5[5] = "GRANTEE";

        $r5[6] = "PRIVILEGE";

        $r5[7] = "IS_GRANTABLE";

        $r8 = newarray (int)[8];

        $r8[0] = 12;

        $r8[1] = 12;

        $r8[2] = 12;

        $r8[3] = 12;

        $r8[4] = 12;

        $r8[5] = 12;

        $r8[6] = 12;

        $r8[7] = 12;

        $r7 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r7.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r7.<SQLite.TableResult: void columns(java.lang.String[])>($r5);

        virtualinvoke $r7.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r8);

        $r6 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r6.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r7, null);

        return $r6;
    }

    public java.sql.ResultSet getColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        java.lang.String $r0, $r1, $r2, $r9;
        java.lang.Integer $r3;
        java.util.Hashtable $r4;
        SQLite.JDBC2y.JDBCResultSet $r5, $r13;
        SQLite.JDBC2y.JDBCStatement $r6;
        SQLite.JDBC2y.TableResultX $r7;
        SQLite.JDBC2y.JDBCDatabaseMetaData $r8;
        SQLite.JDBC2y.JDBCConnection $r10;
        java.lang.StringBuilder $r11;
        java.sql.ResultSet $r12;
        java.lang.String[] $r14, $r17, $r22;
        int[] $r15;
        SQLite.TableResult $r16;
        int $i0, $i1, $i3;
        java.sql.SQLException $r18;
        java.lang.Throwable $r19;
        char $c2;
        java.util.Vector $r20;
        java.lang.Object $r21;

        $r8 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r9 := @parameter3: java.lang.String;

        $r6 = new SQLite.JDBC2y.JDBCStatement;

        $r10 = $r8.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r6.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r10);

     label01:
        $r11 = new java.lang.StringBuilder;

     label02:
        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA table_info(");

        $r0 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r2);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r0 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke $r6.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r0);

     label03:
        $r5 = (SQLite.JDBC2y.JDBCResultSet) $r12;

     label04:
        $r13 = (SQLite.JDBC2y.JDBCResultSet) $r5;

        virtualinvoke $r6.<SQLite.JDBC2y.JDBCStatement: void close()>();

     label05:
        virtualinvoke $r6.<SQLite.JDBC2y.JDBCStatement: void close()>();

        $r14 = newarray (java.lang.String)[18];

        $r14[0] = "TABLE_CAT";

        $r14[1] = "TABLE_SCHEM";

        $r14[2] = "TABLE_NAME";

        $r14[3] = "COLUMN_NAME";

        $r14[4] = "DATA_TYPE";

        $r14[5] = "TYPE_NAME";

        $r14[6] = "COLUMN_SIZE";

        $r14[7] = "BUFFER_LENGTH";

        $r14[8] = "DECIMAL_POINTS";

        $r14[9] = "NUM_PREC_RADIX";

        $r14[10] = "NULLABLE";

        $r14[11] = "REMARKS";

        $r14[12] = "COLUMN_DEF";

        $r14[13] = "SQL_DATA_TYPE";

        $r14[14] = "SQL_DATETIME_SUB";

        $r14[15] = "CHAR_OCTET_LENGTH";

        $r14[16] = "ORDINAL_POSITION";

        $r14[17] = "IS_NULLABLE";

        $r15 = newarray (int)[18];

        $r15[0] = 12;

        $r15[1] = 12;

        $r15[2] = 12;

        $r15[3] = 12;

        $r15[4] = 5;

        $r15[5] = 12;

        $r15[6] = 4;

        $r15[7] = 4;

        $r15[8] = 4;

        $r15[9] = 4;

        $r15[10] = 4;

        $r15[11] = 12;

        $r15[12] = 12;

        $r15[13] = 4;

        $r15[14] = 4;

        $r15[15] = 4;

        $r15[16] = 4;

        $r15[17] = 12;

        $r7 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r7.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r7.<SQLite.TableResult: void columns(java.lang.String[])>($r14);

        virtualinvoke $r7.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r15);

        $r5 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r7, null);

        if $r13 == null goto label19;

        $r16 = $r13.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r16 == null goto label20;

        $r16 = $r13.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r16.<SQLite.TableResult: int nrows>;

        if $i0 <= 0 goto label21;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        $i0 = 0;

     label06:
        $r16 = $r13.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r16.<SQLite.TableResult: int ncolumns>;

        if $i0 >= $i1 goto label10;

        $r16 = $r13.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r17 = $r16.<SQLite.TableResult: java.lang.String[] column>;

        $r0 = $r17[$i0];

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r3);

        $i0 = $i0 + 1;

        goto label06;

     label07:
        $r18 := @caughtexception;

     label08:
        throw $r18;

     label09:
        $r19 := @caughtexception;

        virtualinvoke $r6.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r19;

     label10:
        if $r9 == null goto label11;

        $c2 = virtualinvoke $r9.<java.lang.String: char charAt(int)>(0);

        if $c2 != 37 goto label11;

        $r9 = null;

     label11:
        $i0 = 0;

     label12:
        $r16 = $r13.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r16.<SQLite.TableResult: int nrows>;

        if $i0 >= $i1 goto label22;

        $r16 = $r13.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r20 = $r16.<SQLite.TableResult: java.util.Vector rows>;

        $r21 = virtualinvoke $r20.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r17 = (java.lang.String[]) $r21;

        $r17 = (java.lang.String[]) $r17;

        $r21 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r3 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        if $r9 == null goto label14;

        $r0 = $r17[$i1];

        $i3 = virtualinvoke $r0.<java.lang.String: int compareTo(java.lang.String)>($r9);

        if $i3 == 0 goto label14;

     label13:
        $i0 = $i0 + 1;

        goto label12;

     label14:
        $i3 = lengthof $r14;

        $r22 = newarray (java.lang.String)[$i3];

        $r22[0] = "";

        $r22[1] = "";

        $r22[2] = $r2;

        $r0 = $r17[$i1];

        $r22[3] = $r0;

        $r21 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("type");

        $r3 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r0 = $r17[$i1];

        $i1 = staticinvoke <SQLite.JDBC2y.JDBCDatabaseMetaData: int mapSqlType(java.lang.String)>($r0);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[4] = $r1;

        $r1 = staticinvoke <SQLite.JDBC2y.JDBCDatabaseMetaData: java.lang.String mapTypeName(int)>($i1);

        $r22[5] = $r1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i3 = staticinvoke <SQLite.JDBC2y.JDBCDatabaseMetaData: int getD(java.lang.String,int)>($r0, $i1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[6] = $r1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i1 = staticinvoke <SQLite.JDBC2y.JDBCDatabaseMetaData: int getM(java.lang.String,int)>($r0, $i1);

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r0 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[7] = $r0;

        $r22[8] = "10";

        $r22[9] = "0";

        $r22[11] = null;

        $r21 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("dflt_value");

        $r3 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r0 = $r17[$i1];

        $r22[12] = $r0;

        $r22[13] = "0";

        $r22[14] = "0";

        $r22[15] = "65536";

        $r21 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("cid");

        $r3 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r3 = new java.lang.Integer;

        $r0 = $r17[$i1];

        specialinvoke $r3.<java.lang.Integer: void <init>(java.lang.String)>($r0);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $i1 = $i1 + 1;

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r0 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[16] = $r0;

        $r21 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("notnull");

        $r3 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        $r0 = $r17[$i1];

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c2 != 48 goto label17;

        $r0 = "YES";

     label15:
        $r22[17] = $r0;

        $r0 = $r17[$i1];

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c2 != 48 goto label18;

        $r0 = "1";

     label16:
        $r22[10] = $r0;

        virtualinvoke $r7.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r22);

        goto label13;

     label17:
        $r0 = "NO";

        goto label15;

     label18:
        $r0 = "0";

        goto label16;

     label19:
        return $r5;

     label20:
        return $r5;

     label21:
        return $r5;

     label22:
        return $r5;

        catch java.sql.SQLException from label02 to label03 with label07;
        catch java.sql.SQLException from label04 to label05 with label07;
        catch java.lang.Throwable from label01 to label05 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
    }

    public java.sql.Connection getConnection() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        SQLite.JDBC2y.JDBCConnection r1;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        r1 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        return r1;
    }

    public java.sql.ResultSet getCrossReference(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r11;
        java.lang.String[] $r6;
        SQLite.JDBC2y.JDBCResultSet $r7, $r12;
        SQLite.JDBC2y.JDBCStatement $r8;
        SQLite.JDBC2y.TableResultX $r9;
        int[] $r10;
        char $c0;
        SQLite.JDBC2y.JDBCConnection $r13;
        java.lang.StringBuilder $r14;
        java.sql.ResultSet $r15;
        SQLite.TableResult $r16;
        int $i1;
        java.sql.SQLException $r17;
        java.lang.Throwable $r18;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r11 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String;

        $r12 = null;

        if $r5 == null goto label05;

        $c0 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        if $c0 == 37 goto label05;

        $r8 = new SQLite.JDBC2y.JDBCStatement;

        $r13 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r13);

     label01:
        $r14 = new java.lang.StringBuilder;

     label02:
        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA foreign_key_list(");

        $r11 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r5);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r11);

     label03:
        $r7 = (SQLite.JDBC2y.JDBCResultSet) $r15;

        $r7 = (SQLite.JDBC2y.JDBCResultSet) $r7;

     label04:
        $r12 = $r7;

        virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void close()>();

     label05:
        $r6 = newarray (java.lang.String)[14];

        $r6[0] = "PKTABLE_CAT";

        $r6[1] = "PKTABLE_SCHEM";

        $r6[2] = "PKTABLE_NAME";

        $r6[3] = "PKCOLUMN_NAME";

        $r6[4] = "FKTABLE_CAT";

        $r6[5] = "FKTABLE_SCHEM";

        $r6[6] = "FKTABLE_NAME";

        $r6[7] = "FKCOLUMN_NAME";

        $r6[8] = "KEY_SEQ";

        $r6[9] = "UPDATE_RULE";

        $r6[10] = "DELETE_RULE";

        $r6[11] = "FK_NAME";

        $r6[12] = "PK_NAME";

        $r6[13] = "DEFERRABILITY";

        $r10 = newarray (int)[14];

        $r10[0] = 12;

        $r10[1] = 12;

        $r10[2] = 12;

        $r10[3] = 12;

        $r10[4] = 12;

        $r10[5] = 12;

        $r10[6] = 12;

        $r10[7] = 12;

        $r10[8] = 5;

        $r10[9] = 5;

        $r10[10] = 5;

        $r10[11] = 12;

        $r10[12] = 12;

        $r10[13] = 5;

        $r9 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r9.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r9.<SQLite.TableResult: void columns(java.lang.String[])>($r6);

        virtualinvoke $r9.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r10);

        $r7 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r7.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r9, null);

        if $r12 == null goto label10;

        $r16 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r16 == null goto label11;

        $r16 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r16.<SQLite.TableResult: int nrows>;

        if $i1 <= 0 goto label12;

        $r11 = null;

        if $r2 == null goto label06;

        $c0 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(0);

        if $c0 == 37 goto label06;

        $r11 = $r2;

     label06:
        specialinvoke $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: void internalImportedKeys(java.lang.String,java.lang.String,SQLite.JDBC2y.JDBCResultSet,SQLite.JDBC2y.TableResultX)>($r5, $r11, $r12, $r9);

        return $r7;

     label07:
        $r17 := @caughtexception;

     label08:
        throw $r17;

     label09:
        $r18 := @caughtexception;

        virtualinvoke $r8.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r18;

     label10:
        return $r7;

     label11:
        return $r7;

     label12:
        return $r7;

        catch java.sql.SQLException from label02 to label03 with label07;
        catch java.lang.Throwable from label01 to label04 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
    }

    public int getDatabaseMajorVersion()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public int getDatabaseMinorVersion()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 2;
    }

    public java.lang.String getDatabaseProductName() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "SQLite";
    }

    public java.lang.String getDatabaseProductVersion() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 = staticinvoke <SQLite.Database: java.lang.String version()>();

        return $r1;
    }

    public int getDefaultTransactionIsolation() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 8;
    }

    public int getDriverMajorVersion()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public int getDriverMinorVersion()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 2;
    }

    public java.lang.String getDriverName() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "SQLite/JDBC";
    }

    public java.lang.String getDriverVersion() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "1.2";
    }

    public java.sql.ResultSet getExportedKeys(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        java.lang.String[] $r4;
        SQLite.JDBC2y.JDBCResultSet $r5;
        SQLite.JDBC2y.TableResultX $r6;
        int[] $r7;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = newarray (java.lang.String)[14];

        $r4[0] = "PKTABLE_CAT";

        $r4[1] = "PKTABLE_SCHEM";

        $r4[2] = "PKTABLE_NAME";

        $r4[3] = "PKCOLUMN_NAME";

        $r4[4] = "FKTABLE_CAT";

        $r4[5] = "FKTABLE_SCHEM";

        $r4[6] = "FKTABLE_NAME";

        $r4[7] = "FKCOLUMN_NAME";

        $r4[8] = "KEY_SEQ";

        $r4[9] = "UPDATE_RULE";

        $r4[10] = "DELETE_RULE";

        $r4[11] = "FK_NAME";

        $r4[12] = "PK_NAME";

        $r4[13] = "DEFERRABILITY";

        $r7 = newarray (int)[14];

        $r7[0] = 12;

        $r7[1] = 12;

        $r7[2] = 12;

        $r7[3] = 12;

        $r7[4] = 12;

        $r7[5] = 12;

        $r7[6] = 12;

        $r7[7] = 12;

        $r7[8] = 5;

        $r7[9] = 5;

        $r7[10] = 5;

        $r7[11] = 12;

        $r7[12] = 12;

        $r7[13] = 5;

        $r6 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r6.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r6.<SQLite.TableResult: void columns(java.lang.String[])>($r4);

        virtualinvoke $r6.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r7);

        $r5 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r6, null);

        return $r5;
    }

    public java.lang.String getExtraNameCharacters() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.lang.String getIdentifierQuoteString() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "\"";
    }

    public java.sql.ResultSet getImportedKeys(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        java.lang.String[] $r4;
        SQLite.JDBC2y.JDBCResultSet $r5, $r12;
        SQLite.JDBC2y.JDBCStatement $r6;
        SQLite.JDBC2y.TableResultX $r7;
        int[] $r8;
        SQLite.JDBC2y.JDBCConnection $r9;
        java.lang.StringBuilder $r10;
        java.sql.ResultSet $r11;
        SQLite.TableResult $r13;
        int $i0;
        java.sql.SQLException $r14;
        java.lang.Throwable $r15;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r6 = new SQLite.JDBC2y.JDBCStatement;

        $r9 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r6.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r9);

     label01:
        $r10 = new java.lang.StringBuilder;

     label02:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA foreign_key_list(");

        $r1 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r3);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r6.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r1);

     label03:
        $r5 = (SQLite.JDBC2y.JDBCResultSet) $r11;

        $r12 = (SQLite.JDBC2y.JDBCResultSet) $r5;

     label04:
        virtualinvoke $r6.<SQLite.JDBC2y.JDBCStatement: void close()>();

        $r4 = newarray (java.lang.String)[14];

        $r4[0] = "PKTABLE_CAT";

        $r4[1] = "PKTABLE_SCHEM";

        $r4[2] = "PKTABLE_NAME";

        $r4[3] = "PKCOLUMN_NAME";

        $r4[4] = "FKTABLE_CAT";

        $r4[5] = "FKTABLE_SCHEM";

        $r4[6] = "FKTABLE_NAME";

        $r4[7] = "FKCOLUMN_NAME";

        $r4[8] = "KEY_SEQ";

        $r4[9] = "UPDATE_RULE";

        $r4[10] = "DELETE_RULE";

        $r4[11] = "FK_NAME";

        $r4[12] = "PK_NAME";

        $r4[13] = "DEFERRABILITY";

        $r8 = newarray (int)[14];

        $r8[0] = 12;

        $r8[1] = 12;

        $r8[2] = 12;

        $r8[3] = 12;

        $r8[4] = 12;

        $r8[5] = 12;

        $r8[6] = 12;

        $r8[7] = 12;

        $r8[8] = 5;

        $r8[9] = 5;

        $r8[10] = 5;

        $r8[11] = 12;

        $r8[12] = 12;

        $r8[13] = 5;

        $r7 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r7.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r7.<SQLite.TableResult: void columns(java.lang.String[])>($r4);

        virtualinvoke $r7.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r8);

        $r5 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r7, null);

        if $r12 == null goto label08;

        $r13 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r13 == null goto label09;

        $r13 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r13.<SQLite.TableResult: int nrows>;

        if $i0 <= 0 goto label10;

        specialinvoke $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: void internalImportedKeys(java.lang.String,java.lang.String,SQLite.JDBC2y.JDBCResultSet,SQLite.JDBC2y.TableResultX)>($r3, null, $r12, $r7);

        return $r5;

     label05:
        $r14 := @caughtexception;

     label06:
        throw $r14;

     label07:
        $r15 := @caughtexception;

        virtualinvoke $r6.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r15;

     label08:
        return $r5;

     label09:
        return $r5;

     label10:
        return $r5;

        catch java.sql.SQLException from label02 to label03 with label05;
        catch java.lang.Throwable from label01 to label04 with label07;
        catch java.lang.Throwable from label06 to label07 with label07;
    }

    public java.sql.ResultSet getIndexInfo(java.lang.String, java.lang.String, java.lang.String, boolean, boolean) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r5, $r23;
        boolean $z0, $z1;
        java.util.Hashtable $r3, $r4;
        SQLite.JDBC2y.JDBCResultSet $r6, $r12, $r22, $r24;
        SQLite.JDBC2y.JDBCStatement $r7;
        SQLite.JDBC2y.TableResultX $r8;
        SQLite.JDBC2y.JDBCConnection $r9;
        java.lang.StringBuilder $r10;
        java.sql.ResultSet $r11;
        java.lang.String[] $r13, $r16, $r27;
        int[] $r14;
        SQLite.TableResult $r15;
        int $i0, $i1, $i3;
        java.lang.Integer $r17;
        java.sql.SQLException $r18, $r25;
        java.lang.Throwable $r19, $r26;
        java.util.Vector $r20;
        java.lang.Object $r21;
        char $c2;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r5 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $z0 := @parameter3: boolean;

        $z1 := @parameter4: boolean;

        $r7 = new SQLite.JDBC2y.JDBCStatement;

        $r9 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r7.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r9);

     label01:
        $r10 = new java.lang.StringBuilder;

     label02:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA index_list(");

        $r5 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r2);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r7.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r5);

     label03:
        $r6 = (SQLite.JDBC2y.JDBCResultSet) $r11;

        $r12 = (SQLite.JDBC2y.JDBCResultSet) $r6;

     label04:
        virtualinvoke $r7.<SQLite.JDBC2y.JDBCStatement: void close()>();

        $r13 = newarray (java.lang.String)[13];

        $r13[0] = "TABLE_CAT";

        $r13[1] = "TABLE_SCHEM";

        $r13[2] = "TABLE_NAME";

        $r13[3] = "NON_UNIQUE";

        $r13[4] = "INDEX_QUALIFIER";

        $r13[5] = "INDEX_NAME";

        $r13[6] = "TYPE";

        $r13[7] = "ORDINAL_POSITION";

        $r13[8] = "COLUMN_NAME";

        $r13[9] = "ASC_OR_DESC";

        $r13[10] = "CARDINALITY";

        $r13[11] = "PAGES";

        $r13[12] = "FILTER_CONDITION";

        $r14 = newarray (int)[13];

        $r14[0] = 12;

        $r14[1] = 12;

        $r14[2] = 12;

        $r14[3] = -7;

        $r14[4] = 12;

        $r14[5] = 12;

        $r14[6] = 5;

        $r14[7] = 5;

        $r14[8] = 12;

        $r14[9] = 12;

        $r14[10] = 4;

        $r14[11] = 4;

        $r14[12] = 12;

        $r8 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r8.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r8.<SQLite.TableResult: void columns(java.lang.String[])>($r13);

        virtualinvoke $r8.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r14);

        $r6 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r6.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r8, null);

        if $r12 == null goto label26;

        $r15 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r15 == null goto label27;

        $r15 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r15.<SQLite.TableResult: int nrows>;

        if $i0 <= 0 goto label28;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        $i0 = 0;

     label05:
        $r15 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r15.<SQLite.TableResult: int ncolumns>;

        if $i0 >= $i1 goto label09;

        $r15 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r16 = $r15.<SQLite.TableResult: java.lang.String[] column>;

        $r5 = $r16[$i0];

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r17);

        $i0 = $i0 + 1;

        goto label05;

     label06:
        $r18 := @caughtexception;

     label07:
        throw $r18;

     label08:
        $r19 := @caughtexception;

        virtualinvoke $r7.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r19;

     label09:
        $i0 = 0;

     label10:
        $r15 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r15.<SQLite.TableResult: int nrows>;

        if $i0 >= $i1 goto label29;

        $r15 = $r12.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r20 = $r15.<SQLite.TableResult: java.util.Vector rows>;

        $r21 = virtualinvoke $r20.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r16 = (java.lang.String[]) $r21;

        $r16 = (java.lang.String[]) $r16;

        $r21 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("unique");

        $r17 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r1 = $r16[$i1];

        $r21 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r17 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r5 = $r16[$i1];

        if $z0 == 0 goto label12;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        if $c2 != 48 goto label12;

     label11:
        $i0 = $i0 + 1;

        goto label10;

     label12:
        $r7 = new SQLite.JDBC2y.JDBCStatement;

        $r9 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r7.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r9);

        $r22 = null;

     label13:
        $r10 = new java.lang.StringBuilder;

     label14:
        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA index_info(");

        $r23 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r5);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r23 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = virtualinvoke $r7.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r23);

     label15:
        $r24 = (SQLite.JDBC2y.JDBCResultSet) $r11;

        $r22 = (SQLite.JDBC2y.JDBCResultSet) $r24;

     label16:
        virtualinvoke $r7.<SQLite.JDBC2y.JDBCStatement: void close()>();

     label17:
        if $r22 == null goto label11;

        $r15 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r15 == null goto label11;

        $r15 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r15.<SQLite.TableResult: int nrows>;

        if $i1 <= 0 goto label11;

        $r4 = new java.util.Hashtable;

        specialinvoke $r4.<java.util.Hashtable: void <init>()>();

        $i1 = 0;

     label18:
        $r15 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i3 = $r15.<SQLite.TableResult: int ncolumns>;

        if $i1 >= $i3 goto label21;

        $r15 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r16 = $r15.<SQLite.TableResult: java.lang.String[] column>;

        $r23 = $r16[$i1];

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i1);

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r17);

        $i1 = $i1 + 1;

        goto label18;

     label19:
        $r25 := @caughtexception;

        virtualinvoke $r7.<SQLite.JDBC2y.JDBCStatement: void close()>();

        goto label17;

     label20:
        $r26 := @caughtexception;

        virtualinvoke $r7.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r26;

     label21:
        $i1 = 0;

     label22:
        $r15 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i3 = $r15.<SQLite.TableResult: int nrows>;

        if $i1 >= $i3 goto label11;

        $r15 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r20 = $r15.<SQLite.TableResult: java.util.Vector rows>;

        $r21 = virtualinvoke $r20.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r16 = (java.lang.String[]) $r21;

        $r16 = (java.lang.String[]) $r16;

        $i3 = lengthof $r13;

        $r27 = newarray (java.lang.String)[$i3];

        $r27[0] = "";

        $r27[1] = "";

        $r27[2] = $r2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        if $c2 != 48 goto label23;

        $c2 = virtualinvoke $r5.<java.lang.String: char charAt(int)>(0);

        if $c2 != 40 goto label25;

        $i3 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(" autoindex ");

        if $i3 <= 0 goto label25;

     label23:
        $r23 = "0";

     label24:
        $r27[3] = $r23;

        $r27[4] = "";

        $r27[5] = $r5;

        $r27[6] = "3";

        $r21 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("seqno");

        $r17 = (java.lang.Integer) $r21;

        $i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r23 = $r16[$i3];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r23);

        $i3 = $i3 + 1;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r23 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27[7] = $r23;

        $r21 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r17 = (java.lang.Integer) $r21;

        $i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r23 = $r16[$i3];

        $r27[8] = $r23;

        $r27[9] = "A";

        $r27[10] = "0";

        $r27[11] = "0";

        $r27[12] = null;

        virtualinvoke $r8.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r27);

        $i1 = $i1 + 1;

        goto label22;

     label25:
        $r23 = "1";

        goto label24;

     label26:
        return $r6;

     label27:
        return $r6;

     label28:
        return $r6;

     label29:
        return $r6;

        catch java.sql.SQLException from label02 to label03 with label06;
        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.sql.SQLException from label14 to label15 with label19;
        catch java.lang.Throwable from label13 to label16 with label20;
    }

    public int getJDBCMajorVersion()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public int getJDBCMinorVersion()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxBinaryLiteralLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxCatalogNameLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxCharLiteralLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxColumnNameLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxColumnsInGroupBy() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxColumnsInIndex() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxColumnsInOrderBy() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxColumnsInSelect() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxColumnsInTable() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxConnections() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxCursorNameLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 8;
    }

    public int getMaxIndexLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxProcedureNameLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxRowSize() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxSchemaNameLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxStatementLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxStatements() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxTableNameLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxTablesInSelect() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public int getMaxUserNameLength() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public java.lang.String getNumericFunctions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.sql.ResultSet getPrimaryKeys(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        java.lang.String $r0, $r1, $r3;
        java.util.Hashtable $r2, $r15;
        SQLite.JDBC2y.JDBCResultSet $r4, $r11, $r22, $r23;
        SQLite.JDBC2y.JDBCStatement $r5;
        SQLite.JDBC2y.TableResultX $r6;
        SQLite.JDBC2y.JDBCDatabaseMetaData $r7;
        SQLite.JDBC2y.JDBCConnection $r8;
        java.lang.StringBuilder $r9;
        java.sql.ResultSet $r10;
        java.lang.String[] $r12, $r16, $r26;
        int[] $r13;
        SQLite.TableResult $r14;
        int $i0, $i1, $i3;
        java.lang.Integer $r17;
        java.sql.SQLException $r18, $r24, $r27;
        java.lang.Throwable $r19, $r25, $r28;
        java.util.Vector $r20;
        java.lang.Object $r21;
        char $c2;
        boolean $z0;

        $r7 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r3 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r5 = new SQLite.JDBC2y.JDBCStatement;

        $r8 = $r7.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r8);

     label01:
        $r9 = new java.lang.StringBuilder;

     label02:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA index_list(");

        $r3 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r3);

     label03:
        $r4 = (SQLite.JDBC2y.JDBCResultSet) $r10;

        $r11 = (SQLite.JDBC2y.JDBCResultSet) $r4;

     label04:
        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

        $r12 = newarray (java.lang.String)[6];

        $r12[0] = "TABLE_CAT";

        $r12[1] = "TABLE_SCHEM";

        $r12[2] = "TABLE_NAME";

        $r12[3] = "COLUMN_NAME";

        $r12[4] = "KEY_SEQ";

        $r12[5] = "PK_NAME";

        $r13 = newarray (int)[6];

        $r13[0] = 12;

        $r13[1] = 12;

        $r13[2] = 12;

        $r13[3] = 12;

        $r13[4] = 5;

        $r13[5] = 12;

        $r6 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r6.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r6.<SQLite.TableResult: void columns(java.lang.String[])>($r12);

        virtualinvoke $r6.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r13);

        $r4 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r4.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r6, null);

        if $r11 == null goto label23;

        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r14 == null goto label23;

        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r14.<SQLite.TableResult: int nrows>;

        if $i0 <= 0 goto label23;

        $r15 = new java.util.Hashtable;

        specialinvoke $r15.<java.util.Hashtable: void <init>()>();

        $i0 = 0;

     label05:
        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r14.<SQLite.TableResult: int ncolumns>;

        if $i0 >= $i1 goto label09;

        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r16 = $r14.<SQLite.TableResult: java.lang.String[] column>;

        $r3 = $r16[$i0];

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r17);

        $i0 = $i0 + 1;

        goto label05;

     label06:
        $r18 := @caughtexception;

     label07:
        throw $r18;

     label08:
        $r19 := @caughtexception;

        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r19;

     label09:
        $i0 = 0;

     label10:
        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r14.<SQLite.TableResult: int nrows>;

        if $i0 >= $i1 goto label23;

        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r20 = $r14.<SQLite.TableResult: java.util.Vector rows>;

        $r21 = virtualinvoke $r20.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r16 = (java.lang.String[]) $r21;

        $r16 = (java.lang.String[]) $r16;

        $r21 = virtualinvoke $r15.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("unique");

        $r17 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r0 = $r16[$i1];

        $r21 = virtualinvoke $r15.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r17 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r3 = $r16[$i1];

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c2 != 48 goto label12;

     label11:
        $i0 = $i0 + 1;

        goto label10;

     label12:
        $r5 = new SQLite.JDBC2y.JDBCStatement;

        $r8 = $r7.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r8);

        $r22 = null;

     label13:
        $r9 = new java.lang.StringBuilder;

     label14:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA index_info(");

        $r0 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r0 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r0);

     label15:
        $r23 = (SQLite.JDBC2y.JDBCResultSet) $r10;

        $r22 = (SQLite.JDBC2y.JDBCResultSet) $r23;

     label16:
        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

     label17:
        if $r22 == null goto label11;

        $r14 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r14 == null goto label11;

        $r14 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r14.<SQLite.TableResult: int nrows>;

        if $i1 <= 0 goto label11;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        $i1 = 0;

     label18:
        $r14 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i3 = $r14.<SQLite.TableResult: int ncolumns>;

        if $i1 >= $i3 goto label21;

        $r14 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r16 = $r14.<SQLite.TableResult: java.lang.String[] column>;

        $r0 = $r16[$i1];

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i1);

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r17);

        $i1 = $i1 + 1;

        goto label18;

     label19:
        $r24 := @caughtexception;

        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

        goto label17;

     label20:
        $r25 := @caughtexception;

        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r25;

     label21:
        $i1 = 0;

     label22:
        $r14 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i3 = $r14.<SQLite.TableResult: int nrows>;

        if $i1 >= $i3 goto label11;

        $r14 = $r22.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r20 = $r14.<SQLite.TableResult: java.util.Vector rows>;

        $r21 = virtualinvoke $r20.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r16 = (java.lang.String[]) $r21;

        $r16 = (java.lang.String[]) $r16;

        $i3 = lengthof $r12;

        $r26 = newarray (java.lang.String)[$i3];

        $r26[0] = "";

        $r26[1] = "";

        $r26[2] = $r1;

        $r21 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r17 = (java.lang.Integer) $r21;

        $i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r0 = $r16[$i3];

        $r26[3] = $r0;

        $r21 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("seqno");

        $r17 = (java.lang.Integer) $r21;

        $i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r0 = $r16[$i3];

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r0);

        $i3 = $i3 + 1;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r0 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26[4] = $r0;

        $r26[5] = $r3;

        virtualinvoke $r6.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r26);

        $i1 = $i1 + 1;

        goto label22;

     label23:
        $r5 = new SQLite.JDBC2y.JDBCStatement;

        $r8 = $r7.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r8);

     label24:
        $r9 = new java.lang.StringBuilder;

     label25:
        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRAGMA table_info(");

        $r3 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r3);

     label26:
        $r11 = (SQLite.JDBC2y.JDBCResultSet) $r10;

        $r11 = (SQLite.JDBC2y.JDBCResultSet) $r11;

     label27:
        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

        if $r11 == null goto label36;

        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r14 == null goto label37;

        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r14.<SQLite.TableResult: int nrows>;

        if $i0 <= 0 goto label38;

        $r2 = new java.util.Hashtable;

        specialinvoke $r2.<java.util.Hashtable: void <init>()>();

        $i0 = 0;

     label28:
        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r14.<SQLite.TableResult: int ncolumns>;

        if $i0 >= $i1 goto label32;

        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r16 = $r14.<SQLite.TableResult: java.lang.String[] column>;

        $r3 = $r16[$i0];

        $r17 = new java.lang.Integer;

        specialinvoke $r17.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r17);

        $i0 = $i0 + 1;

        goto label28;

     label29:
        $r27 := @caughtexception;

     label30:
        throw $r27;

     label31:
        $r28 := @caughtexception;

        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r28;

     label32:
        $i0 = 0;

     label33:
        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r14.<SQLite.TableResult: int nrows>;

        if $i0 >= $i1 goto label39;

        $r14 = $r11.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r20 = $r14.<SQLite.TableResult: java.util.Vector rows>;

        $r21 = virtualinvoke $r20.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r16 = (java.lang.String[]) $r21;

        $r16 = (java.lang.String[]) $r16;

        $r21 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("type");

        $r17 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r3 = $r16[$i1];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("integer");

        if $z0 != 0 goto label35;

     label34:
        $i0 = $i0 + 1;

        goto label33;

     label35:
        $r21 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("pk");

        $r17 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r3 = $r16[$i1];

        $c2 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        if $c2 == 48 goto label34;

        $i1 = lengthof $r12;

        $r26 = newarray (java.lang.String)[$i1];

        $r26[0] = "";

        $r26[1] = "";

        $r26[2] = $r1;

        $r21 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("name");

        $r17 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r3 = $r16[$i1];

        $r26[3] = $r3;

        $r21 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>("cid");

        $r17 = (java.lang.Integer) $r21;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r3 = $r16[$i1];

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $i1 = $i1 + 1;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26[4] = $r3;

        $r26[5] = "";

        virtualinvoke $r6.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r26);

        goto label34;

     label36:
        return $r4;

     label37:
        return $r4;

     label38:
        return $r4;

     label39:
        return $r4;

        catch java.sql.SQLException from label02 to label03 with label06;
        catch java.lang.Throwable from label01 to label04 with label08;
        catch java.lang.Throwable from label07 to label08 with label08;
        catch java.sql.SQLException from label14 to label15 with label19;
        catch java.lang.Throwable from label13 to label16 with label20;
        catch java.sql.SQLException from label25 to label26 with label29;
        catch java.lang.Throwable from label24 to label27 with label31;
        catch java.lang.Throwable from label30 to label31 with label31;
    }

    public java.sql.ResultSet getProcedureColumns(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3, $r4;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String;

        return null;
    }

    public java.lang.String getProcedureTerm() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.sql.ResultSet getProcedures(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        return null;
    }

    public int getResultSetHoldability() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public java.lang.String getSQLKeywords() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "SELECT,UPDATE,CREATE,TABLE,VIEW,DELETE,FROM,WHERE,COMMIT,ROLLBACK,TRIGGER";
    }

    public int getSQLStateType() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public java.lang.String getSchemaTerm() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.sql.ResultSet getSchemas() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String[] $r1;
        SQLite.JDBC2y.JDBCResultSet $r2;
        SQLite.TableResult $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "TABLE_SCHEM";

        $r3 = new SQLite.TableResult;

        specialinvoke $r3.<SQLite.TableResult: void <init>()>();

        virtualinvoke $r3.<SQLite.TableResult: void columns(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r2 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r2.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r3, null);

        return $r2;
    }

    public java.lang.String getSearchStringEscape() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "\\";
    }

    public java.lang.String getStringFunctions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.sql.ResultSet getSuperTables(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        java.sql.SQLException $r4;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = new java.sql.SQLException;

        specialinvoke $r4.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r4;
    }

    public java.sql.ResultSet getSuperTypes(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        java.sql.SQLException $r4;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = new java.sql.SQLException;

        specialinvoke $r4.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r4;
    }

    public java.lang.String getSystemFunctions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.sql.ResultSet getTablePrivileges(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        java.lang.String[] $r4;
        SQLite.JDBC2y.JDBCResultSet $r5;
        SQLite.JDBC2y.TableResultX $r6;
        int[] $r7;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = newarray (java.lang.String)[8];

        $r4[0] = "TABLE_CAT";

        $r4[1] = "TABLE_SCHEM";

        $r4[2] = "TABLE_NAME";

        $r4[3] = "COLUMN_NAME";

        $r4[4] = "GRANTOR";

        $r4[5] = "GRANTEE";

        $r4[6] = "PRIVILEGE";

        $r4[7] = "IS_GRANTABLE";

        $r7 = newarray (int)[8];

        $r7[0] = 12;

        $r7[1] = 12;

        $r7[2] = 12;

        $r7[3] = 12;

        $r7[4] = 12;

        $r7[5] = 12;

        $r7[6] = 12;

        $r7[7] = 12;

        $r6 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r6.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r6.<SQLite.TableResult: void columns(java.lang.String[])>($r4);

        virtualinvoke $r6.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r7);

        $r5 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r6, null);

        return $r5;
    }

    public java.sql.ResultSet getTableTypes() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String[] $r1;
        SQLite.JDBC2y.JDBCResultSet $r2;
        SQLite.TableResult $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "TABLE_TYPE";

        $r3 = new SQLite.TableResult;

        specialinvoke $r3.<SQLite.TableResult: void <init>()>();

        virtualinvoke $r3.<SQLite.TableResult: void columns(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "TABLE";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "VIEW";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r2 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r2.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r3, null);

        return $r2;
    }

    public java.sql.ResultSet getTables(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        java.lang.String[] $r4;
        SQLite.JDBC2y.JDBCStatement $r5;
        java.lang.StringBuffer $r6;
        SQLite.JDBC2y.JDBCConnection $r7;
        int $i0, $i1;
        java.sql.ResultSet $r8;
        java.sql.SQLException $r9;
        java.lang.Throwable $r10;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $r5 = new SQLite.JDBC2y.JDBCStatement;

        $r7 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void <init>(SQLite.JDBC2y.JDBCConnection)>($r7);

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("SELECT \'\' AS \'TABLE_CAT\', \'\' AS \'TABLE_SCHEM\', tbl_name AS \'TABLE_NAME\', upper(type) AS \'TABLE_TYPE\', \'\' AS REMARKS FROM sqlite_master WHERE tbl_name like ");

        if $r3 == null goto label05;

        $r1 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r3);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

     label01:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" AND ");

        if $r4 == null goto label02;

        $i0 = lengthof $r4;

        if $i0 != 0 goto label06;

     label02:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(type = \'table\' or type = \'view\')");

     label03:
        $r1 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: java.sql.ResultSet executeQuery(java.lang.String)>($r1);

        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

     label04:
        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

        return $r8;

     label05:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'%\'");

        goto label01;

     label06:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r1 = "";

        $i0 = 0;

     label07:
        $i1 = lengthof $r4;

        if $i0 >= $i1 goto label08;

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("type = ");

        $r1 = $r4[$i0];

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r1 = staticinvoke <SQLite.Shell: java.lang.String sql_quote(java.lang.String)>($r1);

        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = " or ";

        $i0 = $i0 + 1;

        goto label07;

     label08:
        virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        goto label03;

     label09:
        $r9 := @caughtexception;

     label10:
        throw $r9;

     label11:
        $r10 := @caughtexception;

        virtualinvoke $r5.<SQLite.JDBC2y.JDBCStatement: void close()>();

        throw $r10;

        catch java.sql.SQLException from label03 to label04 with label09;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    public java.lang.String getTimeDateFunctions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.sql.ResultSet getTypeInfo() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String[] $r1;
        SQLite.JDBC2y.JDBCResultSet $r2;
        SQLite.JDBC2y.TableResultX $r3;
        int[] $r4;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "TYPE_NAME";

        $r1[1] = "DATA_TYPE";

        $r1[2] = "PRECISION";

        $r1[3] = "LITERAL_PREFIX";

        $r1[4] = "LITERAL_SUFFIX";

        $r1[5] = "CREATE_PARAMS";

        $r1[6] = "NULLABLE";

        $r1[7] = "CASE_SENSITIVE";

        $r1[8] = "SEARCHABLE";

        $r1[9] = "UNSIGNED_ATTRIBUTE";

        $r1[10] = "FIXED_PREC_SCALE";

        $r1[11] = "AUTO_INCREMENT";

        $r1[12] = "LOCAL_TYPE_NAME";

        $r1[13] = "MINIMUM_SCALE";

        $r1[14] = "MAXIMUM_SCALE";

        $r1[15] = "SQL_DATA_TYPE";

        $r1[16] = "SQL_DATETIME_SUB";

        $r1[17] = "NUM_PREC_RADIX";

        $r4 = newarray (int)[18];

        $r4[0] = 12;

        $r4[1] = 5;

        $r4[2] = 4;

        $r4[3] = 12;

        $r4[4] = 12;

        $r4[5] = 12;

        $r4[6] = 5;

        $r4[7] = -7;

        $r4[8] = 5;

        $r4[9] = -7;

        $r4[10] = -7;

        $r4[11] = -7;

        $r4[12] = 12;

        $r4[13] = 5;

        $r4[14] = 5;

        $r4[15] = 4;

        $r4[16] = 4;

        $r4[17] = 4;

        $r3 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r3.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r3.<SQLite.TableResult: void columns(java.lang.String[])>($r1);

        virtualinvoke $r3.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r4);

        $r2 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r2.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r3, null);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "VARCHAR";

        $r1[1] = "12";

        $r1[2] = "65536";

        $r1[3] = "\'";

        $r1[4] = "\'";

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "1";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "0";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "0";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "INTEGER";

        $r1[1] = "4";

        $r1[2] = "32";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "2";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "DOUBLE";

        $r1[1] = "8";

        $r1[2] = "16";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "10";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "FLOAT";

        $r1[1] = "6";

        $r1[2] = "7";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "10";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "SMALLINT";

        $r1[1] = "5";

        $r1[2] = "16";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "2";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "BIT";

        $r1[1] = "-7";

        $r1[2] = "1";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "2";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "TIMESTAMP";

        $r1[1] = "93";

        $r1[2] = "30";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "0";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "DATE";

        $r1[1] = "91";

        $r1[2] = "10";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "0";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "TIME";

        $r1[1] = "92";

        $r1[2] = "8";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "0";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "BINARY";

        $r1[1] = "-2";

        $r1[2] = "65536";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "0";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        $r1 = newarray (java.lang.String)[18];

        $r1[0] = "VARBINARY";

        $r1[1] = "-3";

        $r1[2] = "65536";

        $r1[3] = null;

        $r1[4] = null;

        $r1[5] = null;

        $r1[6] = "1";

        $r1[7] = "0";

        $r1[8] = "3";

        $r1[9] = "0";

        $r1[10] = "0";

        $r1[11] = "1";

        $r1[12] = null;

        $r1[13] = "0";

        $r1[14] = "0";

        $r1[15] = "0";

        $r1[16] = "0";

        $r1[17] = "0";

        virtualinvoke $r3.<SQLite.TableResult: boolean newrow(java.lang.String[])>($r1);

        return $r2;
    }

    public java.sql.ResultSet getUDTs(java.lang.String, java.lang.String, java.lang.String, int[]) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        int[] $r4;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: int[];

        return null;
    }

    public java.lang.String getURL() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        SQLite.JDBC2y.JDBCConnection $r1;
        java.lang.String r2;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 = $r0.<SQLite.JDBC2y.JDBCDatabaseMetaData: SQLite.JDBC2y.JDBCConnection conn>;

        r2 = $r1.<SQLite.JDBC2y.JDBCConnection: java.lang.String url>;

        return r2;
    }

    public java.lang.String getUserName() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return "";
    }

    public java.sql.ResultSet getVersionColumns(java.lang.String, java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.lang.String $r1, $r2, $r3;
        java.lang.String[] $r4;
        SQLite.JDBC2y.JDBCResultSet $r5;
        SQLite.JDBC2y.TableResultX $r6;
        int[] $r7;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = newarray (java.lang.String)[8];

        $r4[0] = "SCOPE";

        $r4[1] = "COLUMN_NAME";

        $r4[2] = "DATA_TYPE";

        $r4[3] = "TYPE_NAME";

        $r4[4] = "COLUMN_SIZE";

        $r4[5] = "BUFFER_LENGTH";

        $r4[6] = "DECIMAL_DIGITS";

        $r4[7] = "PSEUDO_COLUMN";

        $r7 = newarray (int)[8];

        $r7[0] = 5;

        $r7[1] = 12;

        $r7[2] = 5;

        $r7[3] = 12;

        $r7[4] = 4;

        $r7[5] = 4;

        $r7[6] = 5;

        $r7[7] = 5;

        $r6 = new SQLite.JDBC2y.TableResultX;

        specialinvoke $r6.<SQLite.JDBC2y.TableResultX: void <init>()>();

        virtualinvoke $r6.<SQLite.TableResult: void columns(java.lang.String[])>($r4);

        virtualinvoke $r6.<SQLite.JDBC2y.TableResultX: void sql_types(int[])>($r7);

        $r5 = new SQLite.JDBC2y.JDBCResultSet;

        specialinvoke $r5.<SQLite.JDBC2y.JDBCResultSet: void <init>(SQLite.TableResult,SQLite.JDBC2y.JDBCStatement)>($r6, null);

        return $r5;
    }

    public boolean insertsAreDetected(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean isCatalogAtStart() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean isReadOnly() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean locatorsUpdateCopy() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public boolean nullPlusNonNullIsNull() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean nullsAreSortedAtEnd() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean nullsAreSortedAtStart() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean nullsAreSortedHigh() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean nullsAreSortedLow() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean othersDeletesAreVisible(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean othersInsertsAreVisible(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean othersUpdatesAreVisible(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean ownDeletesAreVisible(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean ownInsertsAreVisible(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean ownUpdatesAreVisible(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean storesLowerCaseIdentifiers() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean storesLowerCaseQuotedIdentifiers() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean storesMixedCaseIdentifiers() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean storesMixedCaseQuotedIdentifiers() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean storesUpperCaseIdentifiers() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean storesUpperCaseQuotedIdentifiers() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsANSI92EntryLevelSQL() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsANSI92FullSQL() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsANSI92IntermediateSQL() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsAlterTableWithAddColumn() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsAlterTableWithDropColumn() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsBatchUpdates() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsCatalogsInDataManipulation() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsCatalogsInIndexDefinitions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsCatalogsInPrivilegeDefinitions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsCatalogsInProcedureCalls() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsCatalogsInTableDefinitions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsColumnAliasing() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsConvert() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsConvert(int, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0, $i1;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        return 0;
    }

    public boolean supportsCoreSQLGrammar() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsCorrelatedSubqueries() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsDataDefinitionAndDataManipulationTransactions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsDataManipulationTransactionsOnly() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsDifferentTableCorrelationNames() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsExpressionsInOrderBy() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsExtendedSQLGrammar() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsFullOuterJoins() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsGetGeneratedKeys()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsGroupBy() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsGroupByBeyondSelect() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsGroupByUnrelated() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsIntegrityEnhancementFacility() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsLikeEscapeClause() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsLimitedOuterJoins() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsMinimumSQLGrammar() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsMixedCaseIdentifiers() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsMixedCaseQuotedIdentifiers() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsMultipleOpenResults()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsMultipleResultSets() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsMultipleTransactions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsNamedParameters()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsNonNullableColumns() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsOpenCursorsAcrossCommit() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsOpenCursorsAcrossRollback() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsOpenStatementsAcrossCommit() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsOpenStatementsAcrossRollback() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsOrderByUnrelated() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsOuterJoins() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsPositionedDelete() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsPositionedUpdate() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsResultSetConcurrency(int, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0, $i1;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        return 0;
    }

    public boolean supportsResultSetHoldability(int)
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean supportsResultSetType(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        if $i0 != 1007 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean supportsSavepoints()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsSchemasInDataManipulation() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsSchemasInIndexDefinitions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsSchemasInPrivilegeDefinitions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsSchemasInProcedureCalls() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsSchemasInTableDefinitions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsSelectForUpdate() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsStatementPooling()
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsStoredProcedures() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsSubqueriesInComparisons() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsSubqueriesInExists() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsSubqueriesInIns() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsSubqueriesInQuantifieds() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsTableCorrelationNames() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsTransactionIsolationLevel(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        if $i0 != 8 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean supportsTransactions() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }

    public boolean supportsUnion() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean supportsUnionAll() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean updatesAreDetected(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        $i0 := @parameter0: int;

        return 0;
    }

    public boolean usesLocalFilePerTable() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 0;
    }

    public boolean usesLocalFiles() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCDatabaseMetaData $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCDatabaseMetaData;

        return 1;
    }
}
