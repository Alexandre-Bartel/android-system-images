public class org.apache.http.impl.io.HttpRequestParser extends org.apache.http.impl.io.AbstractMessageParser
{
    private final org.apache.http.util.CharArrayBuffer lineBuf;
    private final org.apache.http.HttpRequestFactory requestFactory;

    public void <init>(org.apache.http.io.SessionInputBuffer, org.apache.http.message.LineParser, org.apache.http.HttpRequestFactory, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.HttpRequestParser $r0;
        org.apache.http.io.SessionInputBuffer $r1;
        org.apache.http.message.LineParser $r2;
        org.apache.http.HttpRequestFactory $r3;
        org.apache.http.params.HttpParams $r4;
        java.lang.IllegalArgumentException $r5;
        org.apache.http.util.CharArrayBuffer $r6;

        $r0 := @this: org.apache.http.impl.io.HttpRequestParser;

        $r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        $r2 := @parameter1: org.apache.http.message.LineParser;

        $r3 := @parameter2: org.apache.http.HttpRequestFactory;

        $r4 := @parameter3: org.apache.http.params.HttpParams;

        specialinvoke $r0.<org.apache.http.impl.io.AbstractMessageParser: void <init>(org.apache.http.io.SessionInputBuffer,org.apache.http.message.LineParser,org.apache.http.params.HttpParams)>($r1, $r2, $r4);

        if $r3 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Request factory may not be null");

        throw $r5;

     label1:
        $r0.<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpRequestFactory requestFactory> = $r3;

        $r6 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r6.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(128);

        $r0.<org.apache.http.impl.io.HttpRequestParser: org.apache.http.util.CharArrayBuffer lineBuf> = $r6;

        return;
    }

    protected org.apache.http.HttpMessage parseHead(org.apache.http.io.SessionInputBuffer) throws java.io.IOException, org.apache.http.HttpException, org.apache.http.ParseException
    {
        org.apache.http.impl.io.HttpRequestParser $r0;
        org.apache.http.io.SessionInputBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.util.CharArrayBuffer $r3;
        int $i0;
        org.apache.http.ConnectionClosedException $r4;
        org.apache.http.message.LineParser $r5;
        org.apache.http.RequestLine $r6;
        org.apache.http.HttpRequestFactory $r7;
        org.apache.http.HttpRequest $r8;

        $r0 := @this: org.apache.http.impl.io.HttpRequestParser;

        $r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        $r3 = $r0.<org.apache.http.impl.io.HttpRequestParser: org.apache.http.util.CharArrayBuffer lineBuf>;

        virtualinvoke $r3.<org.apache.http.util.CharArrayBuffer: void clear()>();

        $r3 = $r0.<org.apache.http.impl.io.HttpRequestParser: org.apache.http.util.CharArrayBuffer lineBuf>;

        $i0 = interfaceinvoke $r1.<org.apache.http.io.SessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>($r3);

        if $i0 != -1 goto label1;

        $r4 = new org.apache.http.ConnectionClosedException;

        specialinvoke $r4.<org.apache.http.ConnectionClosedException: void <init>(java.lang.String)>("Client closed connection");

        throw $r4;

     label1:
        $r2 = new org.apache.http.message.ParserCursor;

        $r3 = $r0.<org.apache.http.impl.io.HttpRequestParser: org.apache.http.util.CharArrayBuffer lineBuf>;

        $i0 = virtualinvoke $r3.<org.apache.http.util.CharArrayBuffer: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r5 = $r0.<org.apache.http.impl.io.AbstractMessageParser: org.apache.http.message.LineParser lineParser>;

        $r3 = $r0.<org.apache.http.impl.io.HttpRequestParser: org.apache.http.util.CharArrayBuffer lineBuf>;

        $r6 = interfaceinvoke $r5.<org.apache.http.message.LineParser: org.apache.http.RequestLine parseRequestLine(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r3, $r2);

        $r7 = $r0.<org.apache.http.impl.io.HttpRequestParser: org.apache.http.HttpRequestFactory requestFactory>;

        $r8 = interfaceinvoke $r7.<org.apache.http.HttpRequestFactory: org.apache.http.HttpRequest newHttpRequest(org.apache.http.RequestLine)>($r6);

        return $r8;
    }
}
