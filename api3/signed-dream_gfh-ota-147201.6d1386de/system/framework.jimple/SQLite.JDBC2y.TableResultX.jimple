public class SQLite.JDBC2y.TableResultX extends SQLite.TableResult
{
    public int[] sql_type;

    public void <init>()
    {
        SQLite.JDBC2y.TableResultX $r0;
        int $i0, $i1;
        int[] $r1;

        $r0 := @this: SQLite.JDBC2y.TableResultX;

        specialinvoke $r0.<SQLite.TableResult: void <init>()>();

        $i0 = $r0.<SQLite.TableResult: int ncolumns>;

        $r1 = newarray (int)[$i0];

        $r0.<SQLite.JDBC2y.TableResultX: int[] sql_type> = $r1;

        $i0 = 0;

     label1:
        $i1 = $r0.<SQLite.TableResult: int ncolumns>;

        if $i0 >= $i1 goto label2;

        $r1 = $r0.<SQLite.JDBC2y.TableResultX: int[] sql_type>;

        $r1[$i0] = 12;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(SQLite.TableResult)
    {
        SQLite.JDBC2y.TableResultX $r0;
        SQLite.TableResult $r1;
        int $i0, $i1;
        java.lang.String[] $r2;
        java.util.Vector $r3;
        int[] $r4;
        java.lang.String $r5;

        $r0 := @this: SQLite.JDBC2y.TableResultX;

        $r1 := @parameter0: SQLite.TableResult;

        specialinvoke $r0.<SQLite.TableResult: void <init>()>();

        $r2 = $r1.<SQLite.TableResult: java.lang.String[] column>;

        $r0.<SQLite.TableResult: java.lang.String[] column> = $r2;

        $r3 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $r0.<SQLite.TableResult: java.util.Vector rows> = $r3;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        $r0.<SQLite.TableResult: int ncolumns> = $i1;

        $i1 = $r1.<SQLite.TableResult: int nrows>;

        $r0.<SQLite.TableResult: int nrows> = $i1;

        $r2 = $r1.<SQLite.TableResult: java.lang.String[] types>;

        $r0.<SQLite.TableResult: java.lang.String[] types> = $r2;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        $r4 = newarray (int)[$i1];

        $r0.<SQLite.JDBC2y.TableResultX: int[] sql_type> = $r4;

        $i1 = 0;

     label1:
        $i0 = $r0.<SQLite.TableResult: int ncolumns>;

        if $i1 >= $i0 goto label2;

        $r4 = $r0.<SQLite.JDBC2y.TableResultX: int[] sql_type>;

        $r4[$i1] = 12;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r2 = $r1.<SQLite.TableResult: java.lang.String[] types>;

        if $r2 == null goto label4;

        $i1 = 0;

     label3:
        $r2 = $r1.<SQLite.TableResult: java.lang.String[] types>;

        $i0 = lengthof $r2;

        if $i1 >= $i0 goto label5;

        $r4 = $r0.<SQLite.JDBC2y.TableResultX: int[] sql_type>;

        $r2 = $r1.<SQLite.TableResult: java.lang.String[] types>;

        $r5 = $r2[$i1];

        $i0 = staticinvoke <SQLite.JDBC2y.JDBCDatabaseMetaData: int mapSqlType(java.lang.String)>($r5);

        $r4[$i1] = $i0;

        $i1 = $i1 + 1;

        goto label3;

     label4:
        return;

     label5:
        return;
    }

    void sql_types(int[])
    {
        SQLite.JDBC2y.TableResultX $r0;
        int[] $r1;

        $r0 := @this: SQLite.JDBC2y.TableResultX;

        $r1 := @parameter0: int[];

        $r0.<SQLite.JDBC2y.TableResultX: int[] sql_type> = $r1;

        return;
    }
}
