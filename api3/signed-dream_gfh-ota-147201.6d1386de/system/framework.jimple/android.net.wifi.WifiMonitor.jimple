public class android.net.wifi.WifiMonitor extends java.lang.Object
{
    private static final int CONNECTED;
    private static final int DISCONNECTED;
    private static final int DRIVER_STATE;
    private static final int LINK_SPEED;
    private static final int SCAN_RESULTS;
    private static final int STATE_CHANGE;
    private static final java.lang.String TAG;
    private static final int TERMINATING;
    private static final int UNKNOWN;
    private static final java.lang.String connectedEvent;
    private static final java.lang.String disconnectedEvent;
    private static final java.lang.String driverStateEvent;
    private static final java.lang.String eventPrefix;
    private static final int eventPrefixLen;
    private static final java.lang.String linkSpeedEvent;
    private static java.util.regex.Pattern mConnectedEventPattern;
    private static final java.lang.String passwordKeyMayBeIncorrectEvent;
    private static final java.lang.String scanResultsEvent;
    private static final java.lang.String stateChangeEvent;
    private static final java.lang.String terminatingEvent;
    private static final java.lang.String wpaEventPrefix;
    private final android.net.wifi.WifiStateTracker mWifiStateTracker;

    static void <clinit>()
    {
        java.lang.String $r0;
        int $i0;
        java.util.regex.Pattern $r1;

        <android.net.wifi.WifiMonitor: java.lang.String wpaEventPrefix> = "WPA:";

        <android.net.wifi.WifiMonitor: java.lang.String terminatingEvent> = "TERMINATING";

        <android.net.wifi.WifiMonitor: java.lang.String stateChangeEvent> = "STATE-CHANGE";

        <android.net.wifi.WifiMonitor: java.lang.String scanResultsEvent> = "SCAN-RESULTS";

        <android.net.wifi.WifiMonitor: java.lang.String passwordKeyMayBeIncorrectEvent> = "pre-shared key may be incorrect";

        <android.net.wifi.WifiMonitor: java.lang.String linkSpeedEvent> = "LINK-SPEED";

        <android.net.wifi.WifiMonitor: java.lang.String eventPrefix> = "CTRL-EVENT-";

        <android.net.wifi.WifiMonitor: java.lang.String driverStateEvent> = "DRIVER-STATE";

        <android.net.wifi.WifiMonitor: java.lang.String disconnectedEvent> = "DISCONNECTED";

        <android.net.wifi.WifiMonitor: java.lang.String connectedEvent> = "CONNECTED";

        <android.net.wifi.WifiMonitor: int UNKNOWN> = 8;

        <android.net.wifi.WifiMonitor: int TERMINATING> = 6;

        <android.net.wifi.WifiMonitor: java.lang.String TAG> = "WifiMonitor";

        <android.net.wifi.WifiMonitor: int STATE_CHANGE> = 3;

        <android.net.wifi.WifiMonitor: int SCAN_RESULTS> = 4;

        <android.net.wifi.WifiMonitor: int LINK_SPEED> = 5;

        <android.net.wifi.WifiMonitor: int DRIVER_STATE> = 7;

        <android.net.wifi.WifiMonitor: int DISCONNECTED> = 2;

        <android.net.wifi.WifiMonitor: int CONNECTED> = 1;

        $r0 = "CTRL-EVENT-";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        <android.net.wifi.WifiMonitor: int eventPrefixLen> = $i0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("((?:[0-9a-f]{2}:){5}[0-9a-f]{2}) .* \\[id=([0-9]+) ");

        <android.net.wifi.WifiMonitor: java.util.regex.Pattern mConnectedEventPattern> = $r1;

        return;
    }

    public void <init>(android.net.wifi.WifiStateTracker)
    {
        android.net.wifi.WifiMonitor $r0;
        android.net.wifi.WifiStateTracker $r1;

        $r0 := @this: android.net.wifi.WifiMonitor;

        $r1 := @parameter0: android.net.wifi.WifiStateTracker;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.net.wifi.WifiMonitor: android.net.wifi.WifiStateTracker mWifiStateTracker> = $r1;

        return;
    }

    static android.net.wifi.WifiStateTracker access$000(android.net.wifi.WifiMonitor)
    {
        android.net.wifi.WifiMonitor $r0;
        android.net.wifi.WifiStateTracker r1;

        $r0 := @parameter0: android.net.wifi.WifiMonitor;

        r1 = $r0.<android.net.wifi.WifiMonitor: android.net.wifi.WifiStateTracker mWifiStateTracker>;

        return r1;
    }

    static int access$100()
    {
        int i0;

        i0 = <android.net.wifi.WifiMonitor: int eventPrefixLen>;

        return i0;
    }

    static void access$200(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        staticinvoke <android.net.wifi.WifiMonitor: void nap(int)>($i0);

        return;
    }

    static void access$300(android.net.wifi.WifiMonitor, android.net.NetworkInfo$DetailedState, java.lang.String)
    {
        android.net.wifi.WifiMonitor $r0;
        android.net.NetworkInfo$DetailedState $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.net.wifi.WifiMonitor;

        $r1 := @parameter1: android.net.NetworkInfo$DetailedState;

        $r2 := @parameter2: java.lang.String;

        specialinvoke $r0.<android.net.wifi.WifiMonitor: void handleNetworkStateChange(android.net.NetworkInfo$DetailedState,java.lang.String)>($r1, $r2);

        return;
    }

    private void handleNetworkStateChange(android.net.NetworkInfo$DetailedState, java.lang.String)
    {
        android.net.wifi.WifiMonitor $r0;
        android.net.NetworkInfo$DetailedState $r1, $r4;
        java.lang.String $r2, $r3;
        int $i0;
        java.util.regex.Pattern $r5;
        java.util.regex.Matcher $r6;
        boolean $z0;
        android.net.wifi.WifiStateTracker $r7;
        java.lang.NumberFormatException $r8;

        $r0 := @this: android.net.wifi.WifiMonitor;

        $r1 := @parameter0: android.net.NetworkInfo$DetailedState;

        $r2 := @parameter1: java.lang.String;

        $r3 = null;

        $i0 = -1;

        $r4 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if $r1 != $r4 goto label1;

        $r5 = <android.net.wifi.WifiMonitor: java.util.regex.Pattern mConnectedEventPattern>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r2);

        $z0 = virtualinvoke $r6.<java.util.regex.Matcher: boolean find()>();

        if $z0 != 0 goto label2;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("WifiMonitor", "Could not find BSSID in CONNECTED event string");

     label1:
        $r7 = $r0.<android.net.wifi.WifiMonitor: android.net.wifi.WifiStateTracker mWifiStateTracker>;

        virtualinvoke $r7.<android.net.wifi.WifiStateTracker: void notifyStateChange(android.net.NetworkInfo$DetailedState,java.lang.String,int)>($r1, $r3, $i0);

        return;

     label2:
        $r3 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(1);

     label3:
        $r2 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label4:
        goto label1;

     label5:
        $r8 := @caughtexception;

        $i0 = -1;

        goto label1;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    private static void nap(int)
    {
        int $i0;
        long $l1;
        java.lang.InterruptedException $r0;

        $i0 := @parameter0: int;

        $i0 = $i0 * 1000;

        $l1 = (long) $i0;

     label1:
        staticinvoke <java.lang.Thread: void sleep(long)>($l1);

     label2:
        return;

     label3:
        $r0 := @caughtexception;

        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public android.net.NetworkStateTracker getNetworkStateTracker()
    {
        android.net.wifi.WifiMonitor $r0;
        android.net.wifi.WifiStateTracker r1;

        $r0 := @this: android.net.wifi.WifiMonitor;

        r1 = $r0.<android.net.wifi.WifiMonitor: android.net.wifi.WifiStateTracker mWifiStateTracker>;

        return r1;
    }

    public void startMonitoring()
    {
        android.net.wifi.WifiMonitor $r0;
        android.net.wifi.WifiMonitor$MonitorThread $r1;

        $r0 := @this: android.net.wifi.WifiMonitor;

        $r1 = new android.net.wifi.WifiMonitor$MonitorThread;

        specialinvoke $r1.<android.net.wifi.WifiMonitor$MonitorThread: void <init>(android.net.wifi.WifiMonitor)>($r0);

        virtualinvoke $r1.<java.lang.Thread: void start()>();

        return;
    }
}
