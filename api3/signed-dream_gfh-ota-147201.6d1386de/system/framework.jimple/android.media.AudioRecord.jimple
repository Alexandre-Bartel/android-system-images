public class android.media.AudioRecord extends java.lang.Object
{
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDCHANNELCOUNT;
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDFORMAT;
    private static final int AUDIORECORD_ERROR_SETUP_INVALIDSTREAMTYPE;
    private static final int AUDIORECORD_ERROR_SETUP_NATIVEINITFAILED;
    private static final int AUDIORECORD_ERROR_SETUP_ZEROFRAMECOUNT;
    public static final int ERROR;
    public static final int ERROR_BAD_VALUE;
    public static final int ERROR_INVALID_OPERATION;
    private static final int NATIVE_EVENT_MARKER;
    private static final int NATIVE_EVENT_NEW_POS;
    public static final int RECORDSTATE_RECORDING;
    public static final int RECORDSTATE_STOPPED;
    private static final int SOURCE_DEFAULT;
    private static final int SOURCE_MIC;
    public static final int STATE_INITIALIZED;
    public static final int STATE_UNINITIALIZED;
    public static final int SUCCESS;
    private static final java.lang.String TAG;
    private int mAudioFormat;
    private int mChannelConfiguration;
    private int mChannelCount;
    private android.media.AudioRecord$NativeEventHandler mEventHandler;
    private android.os.Looper mInitializationLooper;
    private int mNativeBufferSizeInBytes;
    private int mNativeCallbackCookie;
    private int mNativeRecorderInJavaObj;
    private android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener;
    private final java.lang.Object mPositionListenerLock;
    private int mRecordSource;
    private int mRecordingState;
    private java.lang.Object mRecordingStateLock;
    private int mSampleRate;
    private int mState;

    public void <init>(int, int, int, int, int) throws java.lang.IllegalArgumentException
    {
        android.media.AudioRecord $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1;
        android.os.Looper $r2;
        java.lang.ref.WeakReference $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: android.media.AudioRecord;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i4 := @parameter4: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.media.AudioRecord: int mSampleRate> = 22050;

        $r0.<android.media.AudioRecord: int mChannelCount> = 1;

        $r0.<android.media.AudioRecord: int mChannelConfiguration> = 2;

        $r0.<android.media.AudioRecord: int mAudioFormat> = 2;

        $r0.<android.media.AudioRecord: int mRecordSource> = 0;

        $r0.<android.media.AudioRecord: int mState> = 0;

        $r0.<android.media.AudioRecord: int mRecordingState> = 1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock> = $r1;

        $r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener> = null;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock> = $r1;

        $r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = null;

        $r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = null;

        $r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes> = 0;

        $r0.<android.media.AudioRecord: int mState> = 0;

        $r0.<android.media.AudioRecord: int mRecordingState> = 1;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = $r2;

        if $r2 != null goto label1;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper> = $r2;

     label1:
        specialinvoke $r0.<android.media.AudioRecord: void audioParamCheck(int,int,int,int)>($i0, $i1, $i2, $i3);

        specialinvoke $r0.<android.media.AudioRecord: void audioBuffSizeCheck(int)>($i4);

        $r3 = new java.lang.ref.WeakReference;

        specialinvoke $r3.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r0);

        $i3 = $r0.<android.media.AudioRecord: int mRecordSource>;

        $i4 = $r0.<android.media.AudioRecord: int mSampleRate>;

        $i0 = $r0.<android.media.AudioRecord: int mChannelCount>;

        $i1 = $r0.<android.media.AudioRecord: int mAudioFormat>;

        $i2 = $r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes>;

        $i0 = specialinvoke $r0.<android.media.AudioRecord: int native_setup(java.lang.Object,int,int,int,int,int)>($r3, $i3, $i4, $i0, $i1, $i2);

        if $i0 == 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error code ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" when initializing native AudioRecord object.");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>($r5);

        return;

     label2:
        $r0.<android.media.AudioRecord: int mState> = 1;

        return;
    }

    static java.lang.Object access$000(android.media.AudioRecord)
    {
        android.media.AudioRecord $r0;
        java.lang.Object r1;

        $r0 := @parameter0: android.media.AudioRecord;

        r1 = $r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock>;

        return r1;
    }

    static android.media.AudioRecord$OnRecordPositionUpdateListener access$100(android.media.AudioRecord)
    {
        android.media.AudioRecord $r0;
        android.media.AudioRecord$OnRecordPositionUpdateListener r1;

        $r0 := @parameter0: android.media.AudioRecord;

        r1 = $r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener>;

        return r1;
    }

    private void audioBuffSizeCheck(int)
    {
        android.media.AudioRecord $r0;
        int $i0, $i1, $i2;
        byte $b3;
        java.lang.IllegalArgumentException $r1;

        $r0 := @this: android.media.AudioRecord;

        $i0 := @parameter0: int;

        $i1 = $r0.<android.media.AudioRecord: int mChannelCount>;

        $i2 = $r0.<android.media.AudioRecord: int mAudioFormat>;

        if $i2 != 3 goto label3;

        $b3 = 1;

     label1:
        $i1 = $i1 * $b3;

        $i1 = $i0 % $i1;

        if $i1 != 0 goto label2;

        if $i0 >= 1 goto label4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid audio buffer size.");

        throw $r1;

     label3:
        $b3 = 2;

        goto label1;

     label4:
        $r0.<android.media.AudioRecord: int mNativeBufferSizeInBytes> = $i0;

        return;
    }

    private void audioParamCheck(int, int, int, int)
    {
        android.media.AudioRecord $r0;
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalArgumentException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: android.media.AudioRecord;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        if $i0 == 0 goto label01;

        if $i0 == 1 goto label01;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid audio source.");

        throw $r1;

     label01:
        $r0.<android.media.AudioRecord: int mRecordSource> = $i0;

        if $i1 < 4000 goto label02;

        if $i1 <= 48000 goto label03;

     label02:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hz is not a supported sample rate.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label03:
        $r0.<android.media.AudioRecord: int mSampleRate> = $i1;

        lookupswitch($i2)
        {
            case 1: goto label05;
            case 2: goto label05;
            case 3: goto label08;
            default: goto label04;
        };

     label04:
        $r0.<android.media.AudioRecord: int mChannelCount> = 0;

        $r0.<android.media.AudioRecord: int mChannelConfiguration> = 0;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported channel configuration.");

        throw $r1;

     label05:
        $r0.<android.media.AudioRecord: int mChannelCount> = 1;

        $r0.<android.media.AudioRecord: int mChannelConfiguration> = 2;

     label06:
        lookupswitch($i3)
        {
            case 1: goto label09;
            case 2: goto label10;
            case 3: goto label10;
            default: goto label07;
        };

     label07:
        $r0.<android.media.AudioRecord: int mAudioFormat> = 0;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported sample encoding. Should be ENCODING_PCM_8BIT or ENCODING_PCM_16BIT.");

        throw $r1;

     label08:
        $r0.<android.media.AudioRecord: int mChannelCount> = 2;

        $r0.<android.media.AudioRecord: int mChannelConfiguration> = 3;

        goto label06;

     label09:
        $r0.<android.media.AudioRecord: int mAudioFormat> = 2;

        return;

     label10:
        $r0.<android.media.AudioRecord: int mAudioFormat> = $i3;

        return;
    }

    public static int getMinBufferSize(int, int, int)
    {
        int $i0, $i1, $i2;
        byte $b3;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        lookupswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label4;
            default: goto label1;
        };

     label1:
        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>("getMinBufferSize(): Invalid channel configuration.");

        return -2;

     label2:
        $b3 = 1;

     label3:
        if $i2 == 2 goto label5;

        staticinvoke <android.media.AudioRecord: void loge(java.lang.String)>("getMinBufferSize(): Invalid audio format.");

        return -2;

     label4:
        $b3 = 2;

        goto label3;

     label5:
        $i0 = staticinvoke <android.media.AudioRecord: int native_get_min_buff_size(int,int,int)>($i0, $b3, $i2);

        if $i0 != 0 goto label6;

        return -2;

     label6:
        if $i0 != -1 goto label7;

        return -1;

     label7:
        return $i0;
    }

    private static void logd(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ android.media.AudioRecord ] ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("AudioRecord-Java", $r0);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ android.media.AudioRecord ] ");

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AudioRecord-Java", $r0);

        return;
    }

    private final native void native_finalize();

    private final native int native_get_marker_pos();

    private static final native int native_get_min_buff_size(int, int, int);

    private final native int native_get_pos_update_period();

    private final native int native_read_in_byte_array(byte[], int, int);

    private final native int native_read_in_direct_buffer(java.lang.Object, int);

    private final native int native_read_in_short_array(short[], int, int);

    private final native void native_release();

    private final native int native_set_marker_pos(int);

    private final native int native_set_pos_update_period(int);

    private final native int native_setup(java.lang.Object, int, int, int, int, int);

    private final native void native_start();

    private final native void native_stop();

    private static void postEventFromNative(java.lang.Object, int, int, int, java.lang.Object)
    {
        int $i0, $i1, $i2;
        java.lang.Object $r0, $r1;
        java.lang.ref.WeakReference $r2;
        android.media.AudioRecord $r3;
        android.media.AudioRecord$NativeEventHandler $r4;
        android.os.Message $r5;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r0 := @parameter4: java.lang.Object;

        $r2 = (java.lang.ref.WeakReference) $r1;

        $r1 = virtualinvoke $r2.<java.lang.ref.Reference: java.lang.Object get()>();

        $r3 = (android.media.AudioRecord) $r1;

        if $r3 != null goto label1;

        return;

     label1:
        $r4 = $r3.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler>;

        if $r4 == null goto label2;

        $r4 = $r3.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>($i0, $i1, $i2, $r0);

        $r4 = $r3.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler>;

        virtualinvoke $r4.<android.os.Handler: boolean sendMessage(android.os.Message)>($r5);

        return;

     label2:
        return;
    }

    protected void finalize()
    {
        android.media.AudioRecord $r0;

        $r0 := @this: android.media.AudioRecord;

        specialinvoke $r0.<android.media.AudioRecord: void native_finalize()>();

        return;
    }

    public int getAudioFormat()
    {
        android.media.AudioRecord $r0;
        int i0;

        $r0 := @this: android.media.AudioRecord;

        i0 = $r0.<android.media.AudioRecord: int mAudioFormat>;

        return i0;
    }

    public int getAudioSource()
    {
        android.media.AudioRecord $r0;
        int i0;

        $r0 := @this: android.media.AudioRecord;

        i0 = $r0.<android.media.AudioRecord: int mRecordSource>;

        return i0;
    }

    public int getChannelConfiguration()
    {
        android.media.AudioRecord $r0;
        int i0;

        $r0 := @this: android.media.AudioRecord;

        i0 = $r0.<android.media.AudioRecord: int mChannelConfiguration>;

        return i0;
    }

    public int getChannelCount()
    {
        android.media.AudioRecord $r0;
        int i0;

        $r0 := @this: android.media.AudioRecord;

        i0 = $r0.<android.media.AudioRecord: int mChannelCount>;

        return i0;
    }

    public int getNotificationMarkerPosition()
    {
        android.media.AudioRecord $r0;
        int $i0;

        $r0 := @this: android.media.AudioRecord;

        $i0 = specialinvoke $r0.<android.media.AudioRecord: int native_get_marker_pos()>();

        return $i0;
    }

    public int getPositionNotificationPeriod()
    {
        android.media.AudioRecord $r0;
        int $i0;

        $r0 := @this: android.media.AudioRecord;

        $i0 = specialinvoke $r0.<android.media.AudioRecord: int native_get_pos_update_period()>();

        return $i0;
    }

    public int getRecordingState()
    {
        android.media.AudioRecord $r0;
        int i0;

        $r0 := @this: android.media.AudioRecord;

        i0 = $r0.<android.media.AudioRecord: int mRecordingState>;

        return i0;
    }

    public int getSampleRate()
    {
        android.media.AudioRecord $r0;
        int i0;

        $r0 := @this: android.media.AudioRecord;

        i0 = $r0.<android.media.AudioRecord: int mSampleRate>;

        return i0;
    }

    public int getState()
    {
        android.media.AudioRecord $r0;
        int i0;

        $r0 := @this: android.media.AudioRecord;

        i0 = $r0.<android.media.AudioRecord: int mState>;

        return i0;
    }

    public int read(java.nio.ByteBuffer, int)
    {
        android.media.AudioRecord $r0;
        java.nio.ByteBuffer $r1;
        int $i0, $i1;

        $r0 := @this: android.media.AudioRecord;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $i0 := @parameter1: int;

        $i1 = $r0.<android.media.AudioRecord: int mState>;

        if $i1 == 1 goto label1;

        return -3;

     label1:
        if $r1 == null goto label2;

        if $i0 >= 0 goto label3;

     label2:
        return -2;

     label3:
        $i0 = specialinvoke $r0.<android.media.AudioRecord: int native_read_in_direct_buffer(java.lang.Object,int)>($r1, $i0);

        return $i0;
    }

    public int read(byte[], int, int)
    {
        android.media.AudioRecord $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.media.AudioRecord;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<android.media.AudioRecord: int mState>;

        if $i2 == 1 goto label1;

        return -3;

     label1:
        if $r1 == null goto label2;

        if $i0 < 0 goto label2;

        if $i1 < 0 goto label2;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label3;

     label2:
        return -2;

     label3:
        $i0 = specialinvoke $r0.<android.media.AudioRecord: int native_read_in_byte_array(byte[],int,int)>($r1, $i0, $i1);

        return $i0;
    }

    public int read(short[], int, int)
    {
        android.media.AudioRecord $r0;
        short[] $r1;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.media.AudioRecord;

        $r1 := @parameter0: short[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r0.<android.media.AudioRecord: int mState>;

        if $i2 == 1 goto label1;

        return -3;

     label1:
        if $r1 == null goto label2;

        if $i0 < 0 goto label2;

        if $i1 < 0 goto label2;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label3;

     label2:
        return -2;

     label3:
        $i0 = specialinvoke $r0.<android.media.AudioRecord: int native_read_in_short_array(short[],int,int)>($r1, $i0, $i1);

        return $i0;
    }

    public void release()
    {
        android.media.AudioRecord $r0;
        java.lang.IllegalStateException $r1;

        $r0 := @this: android.media.AudioRecord;

     label1:
        virtualinvoke $r0.<android.media.AudioRecord: void stop()>();

     label2:
        specialinvoke $r0.<android.media.AudioRecord: void native_release()>();

        $r0.<android.media.AudioRecord: int mState> = 0;

        return;

     label3:
        $r1 := @caughtexception;

        goto label2;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public int setNotificationMarkerPosition(int)
    {
        android.media.AudioRecord $r0;
        int $i0;

        $r0 := @this: android.media.AudioRecord;

        $i0 := @parameter0: int;

        $i0 = specialinvoke $r0.<android.media.AudioRecord: int native_set_marker_pos(int)>($i0);

        return $i0;
    }

    public int setPositionNotificationPeriod(int)
    {
        android.media.AudioRecord $r0;
        int $i0;

        $r0 := @this: android.media.AudioRecord;

        $i0 := @parameter0: int;

        $i0 = specialinvoke $r0.<android.media.AudioRecord: int native_set_pos_update_period(int)>($i0);

        return $i0;
    }

    public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)
    {
        android.media.AudioRecord $r0;
        android.media.AudioRecord$OnRecordPositionUpdateListener $r1;

        $r0 := @this: android.media.AudioRecord;

        $r1 := @parameter0: android.media.AudioRecord$OnRecordPositionUpdateListener;

        virtualinvoke $r0.<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)>($r1, null);

        return;
    }

    public void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener, android.os.Handler)
    {
        android.media.AudioRecord $r0;
        android.media.AudioRecord$OnRecordPositionUpdateListener $r1;
        android.os.Handler $r2;
        java.lang.Object $r3;
        android.os.Looper $r4;
        android.media.AudioRecord$NativeEventHandler $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.media.AudioRecord;

        $r1 := @parameter0: android.media.AudioRecord$OnRecordPositionUpdateListener;

        $r2 := @parameter1: android.os.Handler;

        $r3 = $r0.<android.media.AudioRecord: java.lang.Object mPositionListenerLock>;

        entermonitor $r3;

     label1:
        $r0.<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener mPositionListener> = $r1;

        if $r1 == null goto label7;

        if $r2 == null goto label4;

        $r5 = new android.media.AudioRecord$NativeEventHandler;

        $r4 = virtualinvoke $r2.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r5.<android.media.AudioRecord$NativeEventHandler: void <init>(android.media.AudioRecord,android.media.AudioRecord,android.os.Looper)>($r0, $r0, $r4);

        $r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = $r5;

     label2:
        exitmonitor $r3;

     label3:
        return;

     label4:
        $r5 = new android.media.AudioRecord$NativeEventHandler;

        $r4 = $r0.<android.media.AudioRecord: android.os.Looper mInitializationLooper>;

        specialinvoke $r5.<android.media.AudioRecord$NativeEventHandler: void <init>(android.media.AudioRecord,android.media.AudioRecord,android.os.Looper)>($r0, $r0, $r4);

        $r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = $r5;

        goto label2;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r6;

     label7:
        $r0.<android.media.AudioRecord: android.media.AudioRecord$NativeEventHandler mEventHandler> = null;

     label8:
        goto label2;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
        catch java.lang.Throwable from label7 to label8 with label5;
    }

    public void startRecording() throws java.lang.IllegalStateException
    {
        android.media.AudioRecord $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.media.AudioRecord;

        $i0 = $r0.<android.media.AudioRecord: int mState>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("startRecording() called on an uninitialized AudioRecord.");

        throw $r1;

     label1:
        $r2 = $r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<android.media.AudioRecord: void native_start()>();

        $r0.<android.media.AudioRecord: int mRecordingState> = 3;

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void stop() throws java.lang.IllegalStateException
    {
        android.media.AudioRecord $r0;
        int $i0;
        java.lang.IllegalStateException $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.media.AudioRecord;

        $i0 = $r0.<android.media.AudioRecord: int mState>;

        if $i0 == 1 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("stop() called on an uninitialized AudioRecord.");

        throw $r1;

     label1:
        $r2 = $r0.<android.media.AudioRecord: java.lang.Object mRecordingStateLock>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<android.media.AudioRecord: void native_stop()>();

        $r0.<android.media.AudioRecord: int mRecordingState> = 1;

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void <clinit>()
    {
        <android.media.AudioRecord: java.lang.String TAG> = "AudioRecord-Java";

        <android.media.AudioRecord: int SUCCESS> = 0;

        <android.media.AudioRecord: int STATE_UNINITIALIZED> = 0;

        <android.media.AudioRecord: int STATE_INITIALIZED> = 1;

        <android.media.AudioRecord: int SOURCE_MIC> = 1;

        <android.media.AudioRecord: int SOURCE_DEFAULT> = 0;

        <android.media.AudioRecord: int RECORDSTATE_STOPPED> = 1;

        <android.media.AudioRecord: int RECORDSTATE_RECORDING> = 3;

        <android.media.AudioRecord: int NATIVE_EVENT_NEW_POS> = 3;

        <android.media.AudioRecord: int NATIVE_EVENT_MARKER> = 2;

        <android.media.AudioRecord: int ERROR_INVALID_OPERATION> = -3;

        <android.media.AudioRecord: int ERROR_BAD_VALUE> = -2;

        <android.media.AudioRecord: int ERROR> = -1;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_ZEROFRAMECOUNT> = -16;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_NATIVEINITFAILED> = -20;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDSTREAMTYPE> = -19;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDFORMAT> = -18;

        <android.media.AudioRecord: int AUDIORECORD_ERROR_SETUP_INVALIDCHANNELCOUNT> = -17;

        return;
    }
}
