public class android.graphics.Paint extends java.lang.Object
{
    public static final int ANTI_ALIAS_FLAG;
    private static final int DEFAULT_PAINT_FLAGS;
    public static final int DEV_KERN_TEXT_FLAG;
    public static final int DITHER_FLAG;
    public static final int FAKE_BOLD_TEXT_FLAG;
    public static final int FILTER_BITMAP_FLAG;
    public static final int LINEAR_TEXT_FLAG;
    public static final int STRIKE_THRU_TEXT_FLAG;
    public static final int SUBPIXEL_TEXT_FLAG;
    public static final int UNDERLINE_TEXT_FLAG;
    private static final android.graphics.Paint$Align[] sAlignArray;
    private static final android.graphics.Paint$Cap[] sCapArray;
    private static final android.graphics.Paint$Join[] sJoinArray;
    private static final android.graphics.Paint$Style[] sStyleArray;
    private android.graphics.ColorFilter mColorFilter;
    private android.graphics.MaskFilter mMaskFilter;
    int mNativePaint;
    private android.graphics.PathEffect mPathEffect;
    private android.graphics.Rasterizer mRasterizer;
    private android.graphics.Shader mShader;
    private android.graphics.Typeface mTypeface;
    private android.graphics.Xfermode mXfermode;

    static void <clinit>()
    {
        android.graphics.Paint$Style[] $r0;
        android.graphics.Paint$Style $r1;
        android.graphics.Paint$Cap[] $r2;
        android.graphics.Paint$Cap $r3;
        android.graphics.Paint$Join[] $r4;
        android.graphics.Paint$Join $r5;
        android.graphics.Paint$Align[] $r6;
        android.graphics.Paint$Align $r7;

        <android.graphics.Paint: int UNDERLINE_TEXT_FLAG> = 8;

        <android.graphics.Paint: int SUBPIXEL_TEXT_FLAG> = 128;

        <android.graphics.Paint: int STRIKE_THRU_TEXT_FLAG> = 16;

        <android.graphics.Paint: int LINEAR_TEXT_FLAG> = 64;

        <android.graphics.Paint: int FILTER_BITMAP_FLAG> = 2;

        <android.graphics.Paint: int FAKE_BOLD_TEXT_FLAG> = 32;

        <android.graphics.Paint: int DITHER_FLAG> = 4;

        <android.graphics.Paint: int DEV_KERN_TEXT_FLAG> = 256;

        <android.graphics.Paint: int DEFAULT_PAINT_FLAGS> = 256;

        <android.graphics.Paint: int ANTI_ALIAS_FLAG> = 1;

        $r0 = newarray (android.graphics.Paint$Style)[3];

        $r1 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        $r0[0] = $r1;

        $r1 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        $r0[1] = $r1;

        $r1 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL_AND_STROKE>;

        $r0[2] = $r1;

        <android.graphics.Paint: android.graphics.Paint$Style[] sStyleArray> = $r0;

        $r2 = newarray (android.graphics.Paint$Cap)[3];

        $r3 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap BUTT>;

        $r2[0] = $r3;

        $r3 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        $r2[1] = $r3;

        $r3 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap SQUARE>;

        $r2[2] = $r3;

        <android.graphics.Paint: android.graphics.Paint$Cap[] sCapArray> = $r2;

        $r4 = newarray (android.graphics.Paint$Join)[3];

        $r5 = <android.graphics.Paint$Join: android.graphics.Paint$Join MITER>;

        $r4[0] = $r5;

        $r5 = <android.graphics.Paint$Join: android.graphics.Paint$Join ROUND>;

        $r4[1] = $r5;

        $r5 = <android.graphics.Paint$Join: android.graphics.Paint$Join BEVEL>;

        $r4[2] = $r5;

        <android.graphics.Paint: android.graphics.Paint$Join[] sJoinArray> = $r4;

        $r6 = newarray (android.graphics.Paint$Align)[3];

        $r7 = <android.graphics.Paint$Align: android.graphics.Paint$Align LEFT>;

        $r6[0] = $r7;

        $r7 = <android.graphics.Paint$Align: android.graphics.Paint$Align CENTER>;

        $r6[1] = $r7;

        $r7 = <android.graphics.Paint$Align: android.graphics.Paint$Align RIGHT>;

        $r6[2] = $r7;

        <android.graphics.Paint: android.graphics.Paint$Align[] sAlignArray> = $r6;

        return;
    }

    public void <init>()
    {
        android.graphics.Paint $r0;

        $r0 := @this: android.graphics.Paint;

        specialinvoke $r0.<android.graphics.Paint: void <init>(int)>(0);

        return;
    }

    public void <init>(int)
    {
        android.graphics.Paint $r0;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $i0 := @parameter0: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $i1 = staticinvoke <android.graphics.Paint: int native_init()>();

        $r0.<android.graphics.Paint: int mNativePaint> = $i1;

        $i0 = $i0 | 256;

        virtualinvoke $r0.<android.graphics.Paint: void setFlags(int)>($i0);

        return;
    }

    public void <init>(android.graphics.Paint)
    {
        android.graphics.Paint $r0, $r1;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Paint;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $i0 = $r1.<android.graphics.Paint: int mNativePaint>;

        $i0 = staticinvoke <android.graphics.Paint: int native_initWithPaint(int)>($i0);

        $r0.<android.graphics.Paint: int mNativePaint> = $i0;

        return;
    }

    private static native void finalizer(int);

    private static native void nativeGetCharArrayBounds(int, char[], int, int, android.graphics.Rect);

    private static native void nativeGetStringBounds(int, java.lang.String, int, int, android.graphics.Rect);

    private static native boolean native_getFillPath(int, int, int);

    private static native float native_getFontMetrics(int, android.graphics.Paint$FontMetrics);

    private static native int native_getStrokeCap(int);

    private static native int native_getStrokeJoin(int);

    private static native int native_getStyle(int);

    private static native int native_getTextAlign(int);

    private static native void native_getTextPath(int, java.lang.String, int, int, float, float, int);

    private static native void native_getTextPath(int, char[], int, int, float, float, int);

    private static native int native_getTextWidths(int, java.lang.String, int, int, float[]);

    private static native int native_getTextWidths(int, char[], int, int, float[]);

    private static native int native_init();

    private static native int native_initWithPaint(int);

    private static native void native_reset(int);

    private static native void native_set(int, int);

    private static native int native_setColorFilter(int, int);

    private static native int native_setMaskFilter(int, int);

    private static native int native_setPathEffect(int, int);

    private static native int native_setRasterizer(int, int);

    private static native int native_setShader(int, int);

    private static native void native_setStrokeCap(int, int);

    private static native void native_setStrokeJoin(int, int);

    private static native void native_setStyle(int, int);

    private static native void native_setTextAlign(int, int);

    private static native int native_setTypeface(int, int);

    private static native int native_setXfermode(int, int);

    public native float ascent();

    public int breakText(java.lang.CharSequence, int, int, boolean, float, float[])
    {
        android.graphics.Paint $r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        float $f0;
        float[] $r1;
        java.lang.CharSequence $r2;
        java.lang.String $r3;
        char[] $r4;

        $r0 := @this: android.graphics.Paint;

        $r2 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $f0 := @parameter4: float;

        $r1 := @parameter5: float[];

        if $i0 != 0 goto label1;

        $z1 = $r2 instanceof java.lang.String;

        if $z1 == 0 goto label1;

        $i2 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        if $i1 != $i2 goto label1;

        $r3 = (java.lang.String) $r2;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>($r3, $z0, $f0, $r1);

        return $i0;

     label1:
        $i2 = $i1 - $i0;

        $r4 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i2);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r2, $i0, $i1, $r4, 0);

        if $z0 == 0 goto label3;

        $i0 = $i1 - $i0;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int breakText(char[],int,int,float,float[])>($r4, 0, $i0, $f0, $r1);

     label2:
        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>($r4);

        return $i0;

     label3:
        $i0 = $i1 - $i0;

        $i0 = neg $i0;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int breakText(char[],int,int,float,float[])>($r4, 0, $i0, $f0, $r1);

        goto label2;
    }

    public native int breakText(java.lang.String, boolean, float, float[]);

    public native int breakText(char[], int, int, float, float[]);

    public void clearShadowLayer()
    {
        android.graphics.Paint $r0;

        $r0 := @this: android.graphics.Paint;

        virtualinvoke $r0.<android.graphics.Paint: void setShadowLayer(float,float,float,int)>(0.0F, 0.0F, 0.0F, 0);

        return;
    }

    public native float descent();

    protected void finalize() throws java.lang.Throwable
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: void finalizer(int)>($i0);

        return;
    }

    public native int getAlpha();

    public native int getColor();

    public android.graphics.ColorFilter getColorFilter()
    {
        android.graphics.Paint $r0;
        android.graphics.ColorFilter r1;

        $r0 := @this: android.graphics.Paint;

        r1 = $r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter>;

        return r1;
    }

    public boolean getFillPath(android.graphics.Path, android.graphics.Path)
    {
        android.graphics.Paint $r0;
        android.graphics.Path $r1, $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Path;

        $r2 := @parameter1: android.graphics.Path;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i1 = virtualinvoke $r1.<android.graphics.Path: int ni()>();

        $i2 = virtualinvoke $r2.<android.graphics.Path: int ni()>();

        $z0 = staticinvoke <android.graphics.Paint: boolean native_getFillPath(int,int,int)>($i0, $i1, $i2);

        return $z0;
    }

    public native int getFlags();

    public native float getFontMetrics(android.graphics.Paint$FontMetrics);

    public android.graphics.Paint$FontMetrics getFontMetrics()
    {
        android.graphics.Paint $r0;
        android.graphics.Paint$FontMetrics $r1;

        $r0 := @this: android.graphics.Paint;

        $r1 = new android.graphics.Paint$FontMetrics;

        specialinvoke $r1.<android.graphics.Paint$FontMetrics: void <init>()>();

        virtualinvoke $r0.<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>($r1);

        return $r1;
    }

    public native int getFontMetricsInt(android.graphics.Paint$FontMetricsInt);

    public android.graphics.Paint$FontMetricsInt getFontMetricsInt()
    {
        android.graphics.Paint $r0;
        android.graphics.Paint$FontMetricsInt $r1;

        $r0 := @this: android.graphics.Paint;

        $r1 = new android.graphics.Paint$FontMetricsInt;

        specialinvoke $r1.<android.graphics.Paint$FontMetricsInt: void <init>()>();

        virtualinvoke $r0.<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>($r1);

        return $r1;
    }

    public float getFontSpacing()
    {
        android.graphics.Paint $r0;
        float $f0;

        $r0 := @this: android.graphics.Paint;

        $f0 = virtualinvoke $r0.<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>(null);

        return $f0;
    }

    public android.graphics.MaskFilter getMaskFilter()
    {
        android.graphics.Paint $r0;
        android.graphics.MaskFilter r1;

        $r0 := @this: android.graphics.Paint;

        r1 = $r0.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter>;

        return r1;
    }

    public android.graphics.PathEffect getPathEffect()
    {
        android.graphics.Paint $r0;
        android.graphics.PathEffect r1;

        $r0 := @this: android.graphics.Paint;

        r1 = $r0.<android.graphics.Paint: android.graphics.PathEffect mPathEffect>;

        return r1;
    }

    public android.graphics.Rasterizer getRasterizer()
    {
        android.graphics.Paint $r0;
        android.graphics.Rasterizer r1;

        $r0 := @this: android.graphics.Paint;

        r1 = $r0.<android.graphics.Paint: android.graphics.Rasterizer mRasterizer>;

        return r1;
    }

    public android.graphics.Shader getShader()
    {
        android.graphics.Paint $r0;
        android.graphics.Shader r1;

        $r0 := @this: android.graphics.Paint;

        r1 = $r0.<android.graphics.Paint: android.graphics.Shader mShader>;

        return r1;
    }

    public android.graphics.Paint$Cap getStrokeCap()
    {
        android.graphics.Paint $r0;
        int $i0;
        android.graphics.Paint$Cap[] $r1;
        android.graphics.Paint$Cap $r2;

        $r0 := @this: android.graphics.Paint;

        $r1 = <android.graphics.Paint: android.graphics.Paint$Cap[] sCapArray>;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i0 = staticinvoke <android.graphics.Paint: int native_getStrokeCap(int)>($i0);

        $r2 = $r1[$i0];

        return $r2;
    }

    public android.graphics.Paint$Join getStrokeJoin()
    {
        android.graphics.Paint $r0;
        int $i0;
        android.graphics.Paint$Join[] $r1;
        android.graphics.Paint$Join $r2;

        $r0 := @this: android.graphics.Paint;

        $r1 = <android.graphics.Paint: android.graphics.Paint$Join[] sJoinArray>;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i0 = staticinvoke <android.graphics.Paint: int native_getStrokeJoin(int)>($i0);

        $r2 = $r1[$i0];

        return $r2;
    }

    public native float getStrokeMiter();

    public native float getStrokeWidth();

    public android.graphics.Paint$Style getStyle()
    {
        android.graphics.Paint $r0;
        int $i0;
        android.graphics.Paint$Style[] $r1;
        android.graphics.Paint$Style $r2;

        $r0 := @this: android.graphics.Paint;

        $r1 = <android.graphics.Paint: android.graphics.Paint$Style[] sStyleArray>;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i0 = staticinvoke <android.graphics.Paint: int native_getStyle(int)>($i0);

        $r2 = $r1[$i0];

        return $r2;
    }

    public android.graphics.Paint$Align getTextAlign()
    {
        android.graphics.Paint $r0;
        int $i0;
        android.graphics.Paint$Align[] $r1;
        android.graphics.Paint$Align $r2;

        $r0 := @this: android.graphics.Paint;

        $r1 = <android.graphics.Paint: android.graphics.Paint$Align[] sAlignArray>;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i0 = staticinvoke <android.graphics.Paint: int native_getTextAlign(int)>($i0);

        $r2 = $r1[$i0];

        return $r2;
    }

    public void getTextBounds(java.lang.String, int, int, android.graphics.Rect)
    {
        android.graphics.Paint $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        android.graphics.Rect $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.NullPointerException $r4;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: android.graphics.Rect;

        $i3 = $i0 | $i1;

        $i2 = $i1 - $i0;

        $i3 = $i3 | $i2;

        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i2 - $i1;

        $i3 = $i3 | $i2;

        if $i3 >= 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("need bounds Rect");

        throw $r4;

     label2:
        $i3 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: void nativeGetStringBounds(int,java.lang.String,int,int,android.graphics.Rect)>($i3, $r1, $i0, $i1, $r2);

        return;
    }

    public void getTextBounds(char[], int, int, android.graphics.Rect)
    {
        android.graphics.Paint $r0;
        char[] $r1;
        int $i0, $i1, $i2, $i3;
        android.graphics.Rect $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        java.lang.NullPointerException $r4;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: android.graphics.Rect;

        $i2 = $i0 | $i1;

        if $i2 < 0 goto label1;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

     label1:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        if $r2 != null goto label3;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("need bounds Rect");

        throw $r4;

     label3:
        $i2 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: void nativeGetCharArrayBounds(int,char[],int,int,android.graphics.Rect)>($i2, $r1, $i0, $i1, $r2);

        return;
    }

    public void getTextPath(java.lang.String, int, int, float, float, android.graphics.Path)
    {
        android.graphics.Paint $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        android.graphics.Path $r2;
        java.lang.IndexOutOfBoundsException $r3;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $f0 := @parameter3: float;

        $f1 := @parameter4: float;

        $r2 := @parameter5: android.graphics.Path;

        $i2 = $i0 | $i1;

        $i3 = $i1 - $i0;

        $i2 = $i2 | $i3;

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = $i3 - $i1;

        $i2 = $i2 | $i3;

        if $i2 >= 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $i2 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i3 = virtualinvoke $r2.<android.graphics.Path: int ni()>();

        staticinvoke <android.graphics.Paint: void native_getTextPath(int,java.lang.String,int,int,float,float,int)>($i2, $r1, $i0, $i1, $f0, $f1, $i3);

        return;
    }

    public void getTextPath(char[], int, int, float, float, android.graphics.Path)
    {
        android.graphics.Paint $r0;
        char[] $r1;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;
        android.graphics.Path $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $f0 := @parameter3: float;

        $f1 := @parameter4: float;

        $r2 := @parameter5: android.graphics.Path;

        $i2 = $i0 | $i1;

        if $i2 < 0 goto label1;

        $i2 = $i0 + $i1;

        $i3 = lengthof $r1;

        if $i2 <= $i3 goto label2;

     label1:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        $i3 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i2 = virtualinvoke $r2.<android.graphics.Path: int ni()>();

        staticinvoke <android.graphics.Paint: void native_getTextPath(int,char[],int,int,float,float,int)>($i3, $r1, $i0, $i1, $f0, $f1, $i2);

        return;
    }

    public native float getTextScaleX();

    public native float getTextSize();

    public native float getTextSkewX();

    public int getTextWidths(java.lang.CharSequence, int, int, float[])
    {
        android.graphics.Paint $r0;
        int $i0, $i1, $i2;
        float[] $r1;
        java.lang.CharSequence $r2;
        boolean $z0;
        java.lang.String $r3;
        android.text.GraphicsOperations $r4;
        char[] $r5;

        $r0 := @this: android.graphics.Paint;

        $r2 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: float[];

        $z0 = $r2 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.String) $r2;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>($r3, $i0, $i1, $r1);

        return $i0;

     label1:
        $z0 = $r2 instanceof android.text.SpannedString;

        if $z0 != 0 goto label2;

        $z0 = $r2 instanceof android.text.SpannableString;

        if $z0 == 0 goto label3;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>($r3, $i0, $i1, $r1);

        return $i0;

     label3:
        $z0 = $r2 instanceof android.text.GraphicsOperations;

        if $z0 == 0 goto label4;

        $r4 = (android.text.GraphicsOperations) $r2;

        $i0 = interfaceinvoke $r4.<android.text.GraphicsOperations: int getTextWidths(int,int,float[],android.graphics.Paint)>($i0, $i1, $r1, $r0);

        return $i0;

     label4:
        $i2 = $i1 - $i0;

        $r5 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i2);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r2, $i0, $i1, $r5, 0);

        $i0 = $i1 - $i0;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>($r5, 0, $i0, $r1);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>($r5);

        return $i0;
    }

    public int getTextWidths(java.lang.String, int, int, float[])
    {
        android.graphics.Paint $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2, $i3;
        float[] $r2;
        java.lang.IndexOutOfBoundsException $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: float[];

        $i2 = $i0 | $i1;

        $i3 = $i1 - $i0;

        $i2 = $i2 | $i3;

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = $i3 - $i1;

        $i2 = $i2 | $i3;

        if $i2 >= 0 goto label1;

        $r3 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $i2 = $i1 - $i0;

        $i3 = lengthof $r2;

        if $i2 <= $i3 goto label2;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label2:
        $i2 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i0 = staticinvoke <android.graphics.Paint: int native_getTextWidths(int,java.lang.String,int,int,float[])>($i2, $r1, $i0, $i1, $r2);

        return $i0;
    }

    public int getTextWidths(java.lang.String, float[])
    {
        android.graphics.Paint $r0;
        java.lang.String $r1;
        float[] $r2;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: float[];

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>($r1, 0, $i0, $r2);

        return $i0;
    }

    public int getTextWidths(char[], int, int, float[])
    {
        android.graphics.Paint $r0;
        char[] $r1;
        int $i0, $i1, $i2, $i3;
        float[] $r2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: float[];

        $i2 = $i0 | $i1;

        if $i2 < 0 goto label1;

        $i3 = $i0 + $i1;

        $i2 = lengthof $r1;

        if $i3 > $i2 goto label1;

        $i2 = lengthof $r2;

        if $i1 <= $i2 goto label2;

     label1:
        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label2:
        $i2 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i0 = staticinvoke <android.graphics.Paint: int native_getTextWidths(int,char[],int,int,float[])>($i2, $r1, $i0, $i1, $r2);

        return $i0;
    }

    public android.graphics.Typeface getTypeface()
    {
        android.graphics.Paint $r0;
        android.graphics.Typeface r1;

        $r0 := @this: android.graphics.Paint;

        r1 = $r0.<android.graphics.Paint: android.graphics.Typeface mTypeface>;

        return r1;
    }

    public android.graphics.Xfermode getXfermode()
    {
        android.graphics.Paint $r0;
        android.graphics.Xfermode r1;

        $r0 := @this: android.graphics.Paint;

        r1 = $r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode>;

        return r1;
    }

    public final boolean isAntiAlias()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getFlags()>();

        $i0 = $i0 & 1;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isDither()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getFlags()>();

        $i0 = $i0 & 4;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isFakeBoldText()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getFlags()>();

        $i0 = $i0 & 32;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isFilterBitmap()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getFlags()>();

        $i0 = $i0 & 2;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isLinearText()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getFlags()>();

        $i0 = $i0 & 64;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isStrikeThruText()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getFlags()>();

        $i0 = $i0 & 16;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isSubpixelText()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getFlags()>();

        $i0 = $i0 & 128;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final boolean isUnderlineText()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = virtualinvoke $r0.<android.graphics.Paint: int getFlags()>();

        $i0 = $i0 & 8;

        if $i0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public float measureText(java.lang.CharSequence, int, int)
    {
        android.graphics.Paint $r0;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r1;
        boolean $z0;
        java.lang.String $r2;
        float $f0;
        android.text.GraphicsOperations $r3;
        char[] $r4;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) $r1;

        $f0 = virtualinvoke $r0.<android.graphics.Paint: float measureText(java.lang.String,int,int)>($r2, $i0, $i1);

        return $f0;

     label1:
        $z0 = $r1 instanceof android.text.SpannedString;

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof android.text.SpannableString;

        if $z0 == 0 goto label3;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $f0 = virtualinvoke $r0.<android.graphics.Paint: float measureText(java.lang.String,int,int)>($r2, $i0, $i1);

        return $f0;

     label3:
        $z0 = $r1 instanceof android.text.GraphicsOperations;

        if $z0 == 0 goto label4;

        $r3 = (android.text.GraphicsOperations) $r1;

        $f0 = interfaceinvoke $r3.<android.text.GraphicsOperations: float measureText(int,int,android.graphics.Paint)>($i0, $i1, $r0);

        return $f0;

     label4:
        $i2 = $i1 - $i0;

        $r4 = staticinvoke <android.graphics.TemporaryBuffer: char[] obtain(int)>($i2);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r1, $i0, $i1, $r4, 0);

        $i0 = $i1 - $i0;

        $f0 = virtualinvoke $r0.<android.graphics.Paint: float measureText(char[],int,int)>($r4, 0, $i0);

        staticinvoke <android.graphics.TemporaryBuffer: void recycle(char[])>($r4);

        return $f0;
    }

    public native float measureText(java.lang.String);

    public native float measureText(java.lang.String, int, int);

    public native float measureText(char[], int, int);

    public void reset()
    {
        android.graphics.Paint $r0;
        int $i0;

        $r0 := @this: android.graphics.Paint;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: void native_reset(int)>($i0);

        virtualinvoke $r0.<android.graphics.Paint: void setFlags(int)>(256);

        return;
    }

    public void set(android.graphics.Paint)
    {
        android.graphics.Paint $r0, $r1;
        int $i0, $i1;
        android.graphics.ColorFilter $r2;
        android.graphics.MaskFilter $r3;
        android.graphics.PathEffect $r4;
        android.graphics.Rasterizer $r5;
        android.graphics.Shader $r6;
        android.graphics.Typeface $r7;
        android.graphics.Xfermode $r8;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Paint;

        if $r0 == $r1 goto label1;

        $i1 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i0 = $r1.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: void native_set(int,int)>($i1, $i0);

        $r2 = $r1.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter>;

        $r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter> = $r2;

        $r3 = $r1.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter>;

        $r0.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter> = $r3;

        $r4 = $r1.<android.graphics.Paint: android.graphics.PathEffect mPathEffect>;

        $r0.<android.graphics.Paint: android.graphics.PathEffect mPathEffect> = $r4;

        $r5 = $r1.<android.graphics.Paint: android.graphics.Rasterizer mRasterizer>;

        $r0.<android.graphics.Paint: android.graphics.Rasterizer mRasterizer> = $r5;

        $r6 = $r1.<android.graphics.Paint: android.graphics.Shader mShader>;

        $r0.<android.graphics.Paint: android.graphics.Shader mShader> = $r6;

        $r7 = $r1.<android.graphics.Paint: android.graphics.Typeface mTypeface>;

        $r0.<android.graphics.Paint: android.graphics.Typeface mTypeface> = $r7;

        $r8 = $r1.<android.graphics.Paint: android.graphics.Xfermode mXfermode>;

        $r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode> = $r8;

        return;

     label1:
        return;
    }

    public void setARGB(int, int, int, int)
    {
        android.graphics.Paint $r0;
        int $i0, $i1, $i2, $i3;

        $r0 := @this: android.graphics.Paint;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $i2 := @parameter2: int;

        $i3 := @parameter3: int;

        $i0 = $i0 << 24;

        $i1 = $i1 << 16;

        $i0 = $i0 | $i1;

        $i1 = $i2 << 8;

        $i0 = $i0 | $i1;

        $i0 = $i0 | $i3;

        virtualinvoke $r0.<android.graphics.Paint: void setColor(int)>($i0);

        return;
    }

    public native void setAlpha(int);

    public native void setAntiAlias(boolean);

    public native void setColor(int);

    public android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)
    {
        android.graphics.Paint $r0;
        android.graphics.ColorFilter $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.ColorFilter;

        $i1 = 0;

        if $r1 == null goto label1;

        $i1 = $r1.<android.graphics.ColorFilter: int native_instance>;

     label1:
        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: int native_setColorFilter(int,int)>($i0, $i1);

        $r0.<android.graphics.Paint: android.graphics.ColorFilter mColorFilter> = $r1;

        return $r1;
    }

    public native void setDither(boolean);

    public native void setFakeBoldText(boolean);

    public native void setFilterBitmap(boolean);

    public native void setFlags(int);

    public native void setLinearText(boolean);

    public android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)
    {
        android.graphics.Paint $r0;
        android.graphics.MaskFilter $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.MaskFilter;

        $i1 = 0;

        if $r1 == null goto label1;

        $i1 = $r1.<android.graphics.MaskFilter: int native_instance>;

     label1:
        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: int native_setMaskFilter(int,int)>($i0, $i1);

        $r0.<android.graphics.Paint: android.graphics.MaskFilter mMaskFilter> = $r1;

        return $r1;
    }

    public android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)
    {
        android.graphics.Paint $r0;
        android.graphics.PathEffect $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.PathEffect;

        $i1 = 0;

        if $r1 == null goto label1;

        $i1 = $r1.<android.graphics.PathEffect: int native_instance>;

     label1:
        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: int native_setPathEffect(int,int)>($i0, $i1);

        $r0.<android.graphics.Paint: android.graphics.PathEffect mPathEffect> = $r1;

        return $r1;
    }

    public android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)
    {
        android.graphics.Paint $r0;
        android.graphics.Rasterizer $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Rasterizer;

        $i1 = 0;

        if $r1 == null goto label1;

        $i1 = $r1.<android.graphics.Rasterizer: int native_instance>;

     label1:
        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: int native_setRasterizer(int,int)>($i0, $i1);

        $r0.<android.graphics.Paint: android.graphics.Rasterizer mRasterizer> = $r1;

        return $r1;
    }

    public android.graphics.Shader setShader(android.graphics.Shader)
    {
        android.graphics.Paint $r0;
        android.graphics.Shader $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Shader;

        $i1 = 0;

        if $r1 == null goto label1;

        $i1 = $r1.<android.graphics.Shader: int native_instance>;

     label1:
        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: int native_setShader(int,int)>($i0, $i1);

        $r0.<android.graphics.Paint: android.graphics.Shader mShader> = $r1;

        return $r1;
    }

    public native void setShadowLayer(float, float, float, int);

    public native void setStrikeThruText(boolean);

    public void setStrokeCap(android.graphics.Paint$Cap)
    {
        android.graphics.Paint $r0;
        android.graphics.Paint$Cap $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Paint$Cap;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i1 = $r1.<android.graphics.Paint$Cap: int nativeInt>;

        staticinvoke <android.graphics.Paint: void native_setStrokeCap(int,int)>($i0, $i1);

        return;
    }

    public void setStrokeJoin(android.graphics.Paint$Join)
    {
        android.graphics.Paint $r0;
        android.graphics.Paint$Join $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Paint$Join;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i1 = $r1.<android.graphics.Paint$Join: int nativeInt>;

        staticinvoke <android.graphics.Paint: void native_setStrokeJoin(int,int)>($i0, $i1);

        return;
    }

    public native void setStrokeMiter(float);

    public native void setStrokeWidth(float);

    public void setStyle(android.graphics.Paint$Style)
    {
        android.graphics.Paint $r0;
        android.graphics.Paint$Style $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Paint$Style;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i1 = $r1.<android.graphics.Paint$Style: int nativeInt>;

        staticinvoke <android.graphics.Paint: void native_setStyle(int,int)>($i0, $i1);

        return;
    }

    public native void setSubpixelText(boolean);

    public void setTextAlign(android.graphics.Paint$Align)
    {
        android.graphics.Paint $r0;
        android.graphics.Paint$Align $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Paint$Align;

        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        $i1 = $r1.<android.graphics.Paint$Align: int nativeInt>;

        staticinvoke <android.graphics.Paint: void native_setTextAlign(int,int)>($i0, $i1);

        return;
    }

    public native void setTextScaleX(float);

    public native void setTextSize(float);

    public native void setTextSkewX(float);

    public android.graphics.Typeface setTypeface(android.graphics.Typeface)
    {
        android.graphics.Paint $r0;
        android.graphics.Typeface $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Typeface;

        $i1 = 0;

        if $r1 == null goto label1;

        $i1 = $r1.<android.graphics.Typeface: int native_instance>;

     label1:
        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: int native_setTypeface(int,int)>($i0, $i1);

        $r0.<android.graphics.Paint: android.graphics.Typeface mTypeface> = $r1;

        return $r1;
    }

    public native void setUnderlineText(boolean);

    public android.graphics.Xfermode setXfermode(android.graphics.Xfermode)
    {
        android.graphics.Paint $r0;
        android.graphics.Xfermode $r1;
        int $i0, $i1;

        $r0 := @this: android.graphics.Paint;

        $r1 := @parameter0: android.graphics.Xfermode;

        $i1 = 0;

        if $r1 == null goto label1;

        $i1 = $r1.<android.graphics.Xfermode: int native_instance>;

     label1:
        $i0 = $r0.<android.graphics.Paint: int mNativePaint>;

        staticinvoke <android.graphics.Paint: int native_setXfermode(int,int)>($i0, $i1);

        $r0.<android.graphics.Paint: android.graphics.Xfermode mXfermode> = $r1;

        return $r1;
    }
}
