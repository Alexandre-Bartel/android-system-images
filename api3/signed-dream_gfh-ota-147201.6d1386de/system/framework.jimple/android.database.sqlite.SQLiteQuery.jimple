public class android.database.sqlite.SQLiteQuery extends android.database.sqlite.SQLiteProgram
{
    private static final java.lang.String TAG;
    private java.lang.String[] mBindArgs;
    private boolean mClosed;
    private int mOffsetIndex;
    private java.lang.String mQuery;

    void <init>(android.database.sqlite.SQLiteDatabase, java.lang.String, int, java.lang.String[])
    {
        android.database.sqlite.SQLiteQuery $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String $r2;
        int $i0;
        java.lang.String[] $r3;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.String[];

        specialinvoke $r0.<android.database.sqlite.SQLiteProgram: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String)>($r1, $r2);

        $r0.<android.database.sqlite.SQLiteQuery: boolean mClosed> = 0;

        $r0.<android.database.sqlite.SQLiteQuery: int mOffsetIndex> = $i0;

        $r0.<android.database.sqlite.SQLiteQuery: java.lang.String mQuery> = $r2;

        $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs> = $r3;

        return;
    }

    private final native int native_column_count();

    private final native java.lang.String native_column_name(int);

    private final native int native_fill_window(android.database.CursorWindow, int, int, int, int);

    public void bindDouble(int, double)
    {
        android.database.sqlite.SQLiteQuery $r0;
        int $i0, $i1;
        double $d0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r2 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs>;

        $i1 = $i0 - 1;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

        $r2[$i1] = $r1;

        $z0 = $r0.<android.database.sqlite.SQLiteQuery: boolean mClosed>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>($i0, $d0);

        return;

     label1:
        return;
    }

    public void bindLong(int, long)
    {
        android.database.sqlite.SQLiteQuery $r0;
        int $i0, $i2;
        long $l1;
        java.lang.String $r1;
        java.lang.String[] $r2;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r2 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs>;

        $i2 = $i0 - 1;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l1);

        $r2[$i2] = $r1;

        $z0 = $r0.<android.database.sqlite.SQLiteQuery: boolean mClosed>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>($i0, $l1);

        return;

     label1:
        return;
    }

    public void bindNull(int)
    {
        android.database.sqlite.SQLiteQuery $r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs>;

        $i1 = $i0 - 1;

        $r1[$i1] = null;

        $z0 = $r0.<android.database.sqlite.SQLiteQuery: boolean mClosed>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindNull(int)>($i0);

        return;

     label1:
        return;
    }

    public void bindString(int, java.lang.String)
    {
        android.database.sqlite.SQLiteQuery $r0;
        int $i0, $i1;
        java.lang.String $r1;
        java.lang.String[] $r2;
        boolean $z0;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs>;

        $i1 = $i0 - 1;

        $r2[$i1] = $r1;

        $z0 = $r0.<android.database.sqlite.SQLiteQuery: boolean mClosed>;

        if $z0 != 0 goto label1;

        specialinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>($i0, $r1);

        return;

     label1:
        return;
    }

    public void close()
    {
        android.database.sqlite.SQLiteQuery $r0;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        specialinvoke $r0.<android.database.sqlite.SQLiteProgram: void close()>();

        $r0.<android.database.sqlite.SQLiteQuery: boolean mClosed> = 1;

        return;
    }

    int columnCountLocked()
    {
        android.database.sqlite.SQLiteQuery $r0;
        int $i0;
        java.lang.Throwable $r1;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void acquireReference()>();

     label1:
        $i0 = specialinvoke $r0.<android.database.sqlite.SQLiteQuery: int native_column_count()>();

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        return $i0;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    java.lang.String columnNameLocked(int)
    {
        android.database.sqlite.SQLiteQuery $r0;
        int $i0;
        java.lang.String $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $i0 := @parameter0: int;

        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void acquireReference()>();

     label1:
        $r1 = specialinvoke $r0.<android.database.sqlite.SQLiteQuery: java.lang.String native_column_name(int)>($i0);

     label2:
        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        return $r1;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int fillWindow(android.database.CursorWindow, int, int)
    {
        android.database.sqlite.SQLiteQuery $r0;
        android.database.CursorWindow $r1;
        int $i0, $i1, $i2, $i4;
        boolean $z0;
        android.database.sqlite.SQLiteDatabase $r2;
        long $l3, $l5;
        java.lang.IllegalStateException $r3;
        android.database.sqlite.SQLiteDatabaseCorruptException $r4;
        java.lang.Throwable $r5, $r6;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $r1 := @parameter0: android.database.CursorWindow;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void lock()>();

        $r2 = $r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        $z0 = $r2.<android.database.sqlite.SQLiteDatabase: boolean mLogStats>;

        if $z0 == 0 goto label07;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

     label01:
        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void acquireReference()>();

     label02:
        virtualinvoke $r1.<android.database.sqlite.SQLiteClosable: void acquireReference()>();

        $i4 = virtualinvoke $r1.<android.database.CursorWindow: int getStartPosition()>();

        $i2 = $r0.<android.database.sqlite.SQLiteQuery: int mOffsetIndex>;

        $i0 = specialinvoke $r0.<android.database.sqlite.SQLiteQuery: int native_fill_window(android.database.CursorWindow,int,int,int,int)>($r1, $i4, $i2, $i0, $i1);

     label03:
        if $z0 == 0 goto label05;

     label04:
        $r2 = $r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void logTimeStat(boolean,long,long)>(1, $l3, $l5);

     label05:
        virtualinvoke $r1.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

     label06:
        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        $r2 = $r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return $i0;

     label07:
        $l3 = 0L;

        goto label01;

     label08:
        $r3 := @caughtexception;

     label09:
        virtualinvoke $r1.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

     label10:
        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        $r2 = $r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        return 0;

     label11:
        $r4 := @caughtexception;

     label12:
        $r2 = $r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void onCorruption()>();

        throw $r4;

     label13:
        $r5 := @caughtexception;

     label14:
        virtualinvoke $r1.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        throw $r5;

     label15:
        $r6 := @caughtexception;

        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void releaseReference()>();

        $r2 = $r0.<android.database.sqlite.SQLiteProgram: android.database.sqlite.SQLiteDatabase mDatabase>;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.IllegalStateException from label02 to label03 with label08;
        catch java.lang.IllegalStateException from label04 to label05 with label08;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label02 to label03 with label11;
        catch android.database.sqlite.SQLiteDatabaseCorruptException from label04 to label05 with label11;
        catch java.lang.Throwable from label02 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label12 to label13 with label13;
        catch java.lang.Throwable from label14 to label15 with label15;
    }

    void requery()
    {
        android.database.sqlite.SQLiteQuery $r0;
        java.lang.StringBuilder $r1, $r6;
        java.lang.IllegalStateException $r2;
        int $i0, $i1, $i2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        android.database.sqlite.SQLiteMisuseException $r5;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $r3 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs>;

        if $r3 == null goto label7;

        $r3 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs>;

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label8;

        $i2 = $i1 + 1;

        $r3 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs>;

        $r4 = $r3[$i1];

     label2:
        specialinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>($i2, $r4);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r5 := @caughtexception;

        $r1 = new java.lang.StringBuilder;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mQuery ");

        $r4 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String mQuery>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $i1 = 0;

     label5:
        if $i1 >= $i0 goto label6;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r3 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String[] mBindArgs>;

        $r4 = $r3[$i1];

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $i1 = $i1 + 1;

        goto label5;

     label6:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r2 = new java.lang.IllegalStateException;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r4, $r5);

        throw $r2;

     label7:
        return;

     label8:
        return;

        catch android.database.sqlite.SQLiteMisuseException from label2 to label3 with label4;
    }

    public java.lang.String toString()
    {
        android.database.sqlite.SQLiteQuery $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @this: android.database.sqlite.SQLiteQuery;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQLiteQuery: ");

        $r2 = $r0.<android.database.sqlite.SQLiteQuery: java.lang.String mQuery>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static void <clinit>()
    {
        <android.database.sqlite.SQLiteQuery: java.lang.String TAG> = "Cursor";

        return;
    }
}
