public final class org.apache.harmony.nio.internal.WriteOnlyFileChannel extends org.apache.harmony.nio.internal.FileChannelImpl
{
    private boolean append;

    public void <init>(java.lang.Object, int)
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        java.lang.Object $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        specialinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: void <init>(java.lang.Object,int)>($r1, $i0);

        $r0.<org.apache.harmony.nio.internal.WriteOnlyFileChannel: boolean append> = 0;

        return;
    }

    public void <init>(java.lang.Object, int, boolean)
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        java.lang.Object $r1;
        int $i0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $r1 := @parameter0: java.lang.Object;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: void <init>(java.lang.Object,int)>($r1, $i0);

        $r0.<org.apache.harmony.nio.internal.WriteOnlyFileChannel: boolean append> = 0;

        $r0.<org.apache.harmony.nio.internal.WriteOnlyFileChannel: boolean append> = $z0;

        return;
    }

    protected final java.nio.channels.FileLock basicLock(long, long, boolean, boolean) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        long $l0, $l1;
        boolean $z0, $z1;
        java.nio.channels.FileLock $r1;
        java.nio.channels.NonReadableChannelException $r2;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        if $z0 == 0 goto label1;

        $r2 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r2.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r2;

     label1:
        $r1 = specialinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: java.nio.channels.FileLock basicLock(long,long,boolean,boolean)>($l0, $l1, $z0, $z1);

        return $r1;
    }

    public java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode, long, long) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        java.nio.channels.FileChannel$MapMode $r1;
        long $l0, $l1;
        java.lang.NullPointerException $r2;
        byte $b2;
        java.lang.IllegalArgumentException $r3;
        java.nio.channels.NonReadableChannelException $r4;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $r1 := @parameter0: java.nio.channels.FileChannel$MapMode;

        $l0 := @parameter1: long;

        $l1 := @parameter2: long;

        virtualinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: void openCheck()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $b2 = $l0 cmp 0L;

        if $b2 < 0 goto label2;

        $b2 = $l1 cmp 0L;

        if $b2 < 0 goto label2;

        $b2 = $l1 cmp 2147483647L;

        if $b2 <= 0 goto label3;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label3:
        $r4 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r4.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r4;
    }

    public long position() throws java.io.IOException
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        boolean $z0;
        long $l0;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $z0 = $r0.<org.apache.harmony.nio.internal.WriteOnlyFileChannel: boolean append>;

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: long size()>();

        return $l0;

     label1:
        $l0 = specialinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: long position()>();

        return $l0;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        java.nio.ByteBuffer $r1;
        java.nio.channels.NonReadableChannelException $r2;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $r1 := @parameter0: java.nio.ByteBuffer;

        virtualinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: void openCheck()>();

        $r2 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r2.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r2;
    }

    public int read(java.nio.ByteBuffer, long) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        java.nio.ByteBuffer $r1;
        long $l0;
        java.lang.NullPointerException $r2;
        byte $b1;
        java.lang.IllegalArgumentException $r3;
        java.nio.channels.NonReadableChannelException $r4;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $l0 := @parameter1: long;

        if $r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label2:
        $r4 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r4.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r4;
    }

    public long read(java.nio.ByteBuffer[], int, int) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0, $i1;
        java.lang.IndexOutOfBoundsException $r2;
        java.nio.channels.NonReadableChannelException $r3;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $i0 < 0 goto label1;

        if $i1 < 0 goto label1;

        $i1 = $i0 + $i1;

        $i0 = lengthof $r1;

        if $i1 <= $i0 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        virtualinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: void openCheck()>();

        $r3 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r3.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r3;
    }

    public long transferTo(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        long $l0, $l1;
        java.nio.channels.WritableByteChannel $r1;
        boolean $z0;
        java.nio.channels.ClosedChannelException $r2;
        java.nio.channels.NonReadableChannelException $r3;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: java.nio.channels.WritableByteChannel;

        virtualinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: void openCheck()>();

        $z0 = interfaceinvoke $r1.<java.nio.channels.WritableByteChannel: boolean isOpen()>();

        if $z0 != 0 goto label1;

        $r2 = new java.nio.channels.ClosedChannelException;

        specialinvoke $r2.<java.nio.channels.ClosedChannelException: void <init>()>();

        throw $r2;

     label1:
        $r3 = new java.nio.channels.NonReadableChannelException;

        specialinvoke $r3.<java.nio.channels.NonReadableChannelException: void <init>()>();

        throw $r3;
    }

    public int write(java.nio.ByteBuffer) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.WriteOnlyFileChannel $r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;
        long $l0;
        int $i1;

        $r0 := @this: org.apache.harmony.nio.internal.WriteOnlyFileChannel;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $z0 = $r0.<org.apache.harmony.nio.internal.WriteOnlyFileChannel: boolean append>;

        if $z0 == 0 goto label1;

        $l0 = virtualinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: long size()>();

        virtualinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: java.nio.channels.FileChannel position(long)>($l0);

     label1:
        $i1 = specialinvoke $r0.<org.apache.harmony.nio.internal.FileChannelImpl: int write(java.nio.ByteBuffer)>($r1);

        return $i1;
    }
}
