public class com.android.internal.net.DbSSLSessionCache extends java.lang.Object implements org.apache.harmony.xnet.provider.jsse.SSLClientSessionCache
{
    public static final java.lang.String DATABASE_NAME;
    public static final int DATABASE_VERSION;
    public static final int MAX_CACHE_SIZE;
    public static final java.lang.String[] PROJECTION;
    private static final java.lang.String SSL_CACHE_HOSTPORT;
    public static final int SSL_CACHE_HOSTPORT_COL;
    private static final java.lang.String SSL_CACHE_ID;
    public static final int SSL_CACHE_ID_COL;
    private static final java.lang.String SSL_CACHE_SESSION;
    public static final int SSL_CACHE_SESSION_COL;
    public static final java.lang.String SSL_CACHE_TABLE;
    private static final java.lang.String SSL_CACHE_TIME_SEC;
    public static final int SSL_CACHE_TIME_SEC_COL;
    private static final java.lang.String TAG;
    private static final java.util.Map sInstances;
    private com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper;
    private final java.util.Map mExternalCache;
    private boolean mNeedsCacheLoad;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.HashMap $r1;

        <com.android.internal.net.DbSSLSessionCache: java.lang.String TAG> = "DbSSLSessionCache";

        <com.android.internal.net.DbSSLSessionCache: int SSL_CACHE_TIME_SEC_COL> = 3;

        <com.android.internal.net.DbSSLSessionCache: java.lang.String SSL_CACHE_TIME_SEC> = "time_sec";

        <com.android.internal.net.DbSSLSessionCache: java.lang.String SSL_CACHE_TABLE> = "ssl_sessions";

        <com.android.internal.net.DbSSLSessionCache: int SSL_CACHE_SESSION_COL> = 2;

        <com.android.internal.net.DbSSLSessionCache: java.lang.String SSL_CACHE_SESSION> = "session";

        <com.android.internal.net.DbSSLSessionCache: int SSL_CACHE_ID_COL> = 0;

        <com.android.internal.net.DbSSLSessionCache: java.lang.String SSL_CACHE_ID> = "_id";

        <com.android.internal.net.DbSSLSessionCache: int SSL_CACHE_HOSTPORT_COL> = 1;

        <com.android.internal.net.DbSSLSessionCache: java.lang.String SSL_CACHE_HOSTPORT> = "hostport";

        <com.android.internal.net.DbSSLSessionCache: int MAX_CACHE_SIZE> = 256;

        <com.android.internal.net.DbSSLSessionCache: int DATABASE_VERSION> = 2;

        <com.android.internal.net.DbSSLSessionCache: java.lang.String DATABASE_NAME> = "ssl_sessions.db";

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "_id";

        $r0[1] = "hostport";

        $r0[2] = "session";

        $r0[3] = "time_sec";

        <com.android.internal.net.DbSSLSessionCache: java.lang.String[] PROJECTION> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.android.internal.net.DbSSLSessionCache: java.util.Map sInstances> = $r1;

        return;
    }

    private void <init>(android.content.Context)
    {
        com.android.internal.net.DbSSLSessionCache $r0;
        android.content.Context $r1;
        java.util.HashMap $r2;
        com.android.internal.net.DbSSLSessionCache$DatabaseHelper $r3;

        $r0 := @this: com.android.internal.net.DbSSLSessionCache;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r0.<com.android.internal.net.DbSSLSessionCache: java.util.Map mExternalCache> = $r2;

        $r0.<com.android.internal.net.DbSSLSessionCache: boolean mNeedsCacheLoad> = 1;

        $r1 = virtualinvoke $r1.<android.content.Context: android.content.Context getApplicationContext()>();

        $r3 = new com.android.internal.net.DbSSLSessionCache$DatabaseHelper;

        specialinvoke $r3.<com.android.internal.net.DbSSLSessionCache$DatabaseHelper: void <init>(android.content.Context)>($r1);

        $r0.<com.android.internal.net.DbSSLSessionCache: com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper> = $r3;

        return;
    }

    public void <init>(com.android.internal.net.DbSSLSessionCache$DatabaseHelper)
    {
        com.android.internal.net.DbSSLSessionCache $r0;
        com.android.internal.net.DbSSLSessionCache$DatabaseHelper $r1;
        java.util.HashMap $r2;

        $r0 := @this: com.android.internal.net.DbSSLSessionCache;

        $r1 := @parameter0: com.android.internal.net.DbSSLSessionCache$DatabaseHelper;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r0.<com.android.internal.net.DbSSLSessionCache: java.util.Map mExternalCache> = $r2;

        $r0.<com.android.internal.net.DbSSLSessionCache: boolean mNeedsCacheLoad> = 1;

        $r0.<com.android.internal.net.DbSSLSessionCache: com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper> = $r1;

        return;
    }

    public static com.android.internal.net.DbSSLSessionCache getInstanceForPackage(android.content.Context)
    {
        com.android.internal.net.DbSSLSessionCache $r0;
        android.content.Context $r1;
        java.lang.String $r2;
        java.util.Map $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Throwable $r5;

        $r1 := @parameter0: android.content.Context;

        entermonitor class "com/android/internal/net/DbSSLSessionCache";

     label1:
        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $r3 = <com.android.internal.net.DbSSLSessionCache: java.util.Map sInstances>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r3 = <com.android.internal.net.DbSSLSessionCache: java.util.Map sInstances>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r0 = (com.android.internal.net.DbSSLSessionCache) $r4;

     label2:
        exitmonitor class "com/android/internal/net/DbSSLSessionCache";

        return $r0;

     label3:
        $r0 = new com.android.internal.net.DbSSLSessionCache;

        specialinvoke $r0.<com.android.internal.net.DbSSLSessionCache: void <init>(android.content.Context)>($r1);

        $r3 = <com.android.internal.net.DbSSLSessionCache: java.util.Map sInstances>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r0);

     label4:
        goto label2;

     label5:
        $r5 := @caughtexception;

        exitmonitor class "com/android/internal/net/DbSSLSessionCache";

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public void clear()
    {
        com.android.internal.net.DbSSLSessionCache $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.util.Map $r2;
        com.android.internal.net.DbSSLSessionCache$DatabaseHelper $r3;
        android.database.SQLException $r4;
        java.lang.Throwable $r5;

        $r0 := @this: com.android.internal.net.DbSSLSessionCache;

        entermonitor $r0;

     label1:
        $r2 = $r0.<com.android.internal.net.DbSSLSessionCache: java.util.Map mExternalCache>;

     label2:
        interfaceinvoke $r2.<java.util.Map: void clear()>();

     label3:
        $r0.<com.android.internal.net.DbSSLSessionCache: boolean mNeedsCacheLoad> = 1;

     label4:
        $r3 = $r0.<com.android.internal.net.DbSSLSessionCache: com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper>;

        $r1 = virtualinvoke $r3.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("ssl_sessions", null, null);

     label5:
        exitmonitor $r0;

     label6:
        return;

     label7:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("DbSSLSessionCache", "Error removing SSL cached entries ", $r4);

        goto label5;

     label8:
        $r5 := @caughtexception;

        exitmonitor $r0;

     label9:
        throw $r5;

        catch android.database.SQLException from label2 to label3 with label7;
        catch android.database.SQLException from label4 to label5 with label7;
        catch java.lang.Throwable from label1 to label5 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label7 to label9 with label8;
    }

    public byte[] getSessionData(java.lang.String, int)
    {
        java.lang.String $r0, $r8, $r9;
        int $i0;
        com.android.internal.net.DbSSLSessionCache $r1;
        com.android.internal.net.DbSSLSessionCache$DatabaseHelper $r2;
        java.lang.Class $r3;
        boolean $z0;
        long $l1, $l2;
        android.database.Cursor $r4, $r7;
        android.database.sqlite.SQLiteDatabase $r5;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r10;
        java.util.Map $r11;
        java.lang.Object $r12;
        byte[] $r13;
        android.database.SQLException $r14;
        java.lang.Throwable $r15, $r16;

        $r1 := @this: com.android.internal.net.DbSSLSessionCache;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = $r1.<com.android.internal.net.DbSSLSessionCache: com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper>;

        if $r2 != null goto label01;

        return null;

     label01:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        entermonitor $r3;

     label02:
        $z0 = $r1.<com.android.internal.net.DbSSLSessionCache: boolean mNeedsCacheLoad>;

        if $z0 == 0 goto label12;

        $r1.<com.android.internal.net.DbSSLSessionCache: boolean mNeedsCacheLoad> = 0;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label03:
        $r4 = null;

     label04:
        $r2 = $r1.<com.android.internal.net.DbSSLSessionCache: com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper>;

     label05:
        $r5 = virtualinvoke $r2.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r6 = <com.android.internal.net.DbSSLSessionCache: java.lang.String[] PROJECTION>;

        $r7 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("ssl_sessions", $r6, null, null, null, null, null);

        $r4 = $r7;

        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label09;

     label06:
        $r8 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r9 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>(2);

        if $r8 == null goto label07;

        if $r9 != null goto label14;

     label07:
        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToNext()>();

     label08:
        if $z0 != 0 goto label06;

     label09:
        if $r7 == null goto label11;

     label10:
        interfaceinvoke $r7.<android.database.Cursor: void close()>();

     label11:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DbSSLSessionCache", 3);

        if $z0 == 0 goto label12;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LOADED CACHED SSL ");

        $l1 = $l2 - $l1;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("DbSSLSessionCache", $r8);

     label12:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r0 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = $r1.<com.android.internal.net.DbSSLSessionCache: java.util.Map mExternalCache>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r13 = (byte[]) $r12;

        exitmonitor $r3;

     label13:
        return $r13;

     label14:
        $r13 = virtualinvoke $r9.<java.lang.String: byte[] getBytes()>();

        $r13 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(byte[])>($r13);

        $r11 = $r1.<com.android.internal.net.DbSSLSessionCache: java.util.Map mExternalCache>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r13);

     label15:
        goto label07;

     label16:
        $r14 := @caughtexception;

     label17:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("DbSSLSessionCache", "Error loading SSL cached entries ", $r14);

     label18:
        if $r4 == null goto label20;

     label19:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

     label20:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DbSSLSessionCache", 3);

        if $z0 == 0 goto label12;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LOADED CACHED SSL ");

        $l1 = $l2 - $l1;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("DbSSLSessionCache", $r8);

        goto label12;

     label21:
        $r15 := @caughtexception;

        exitmonitor $r3;

     label22:
        throw $r15;

     label23:
        $r16 := @caughtexception;

        if $r4 == null goto label25;

     label24:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

     label25:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DbSSLSessionCache", 3);

        if $z0 == 0 goto label26;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LOADED CACHED SSL ");

        $l1 = $l2 - $l1;

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r0 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("DbSSLSessionCache", $r0);

     label26:
        throw $r16;

     label27:
        nop;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch android.database.SQLException from label05 to label08 with label16;
        catch java.lang.Throwable from label04 to label08 with label23;
        catch java.lang.Throwable from label10 to label13 with label21;
        catch android.database.SQLException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label23;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.lang.Throwable from label19 to label22 with label21;
        catch java.lang.Throwable from label24 to label27 with label21;
    }

    public byte[] getSessionData(byte[])
    {
        com.android.internal.net.DbSSLSessionCache $r0;
        byte[] $r1;

        $r0 := @this: com.android.internal.net.DbSSLSessionCache;

        $r1 := @parameter0: byte[];

        return null;
    }

    public void putSessionData(javax.net.ssl.SSLSession, byte[])
    {
        com.android.internal.net.DbSSLSessionCache $r0;
        javax.net.ssl.SSLSession $r1;
        byte[] $r2, $r12;
        java.lang.String $r3, $r14;
        android.content.ContentValues $r4;
        com.android.internal.net.DbSSLSessionCache$DatabaseHelper $r5;
        java.lang.Class $r6;
        android.database.sqlite.SQLiteDatabase $r7, $r9;
        java.util.Map $r8;
        int $i0;
        java.lang.String[] $r10;
        android.database.Cursor $r11;
        boolean $z0;
        long $l1, $l2;
        java.lang.StringBuilder $r13;
        java.lang.Long $r15;
        java.lang.Throwable $r16;
        android.database.SQLException $r17;

        $r0 := @this: com.android.internal.net.DbSSLSessionCache;

        $r1 := @parameter0: javax.net.ssl.SSLSession;

        $r2 := @parameter1: byte[];

        $r5 = $r0.<com.android.internal.net.DbSSLSessionCache: com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper>;

        if $r5 != null goto label01;

        return;

     label01:
        $r6 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        entermonitor $r6;

     label02:
        $r5 = $r0.<com.android.internal.net.DbSSLSessionCache: com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper>;

        $r7 = virtualinvoke $r5.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r8 = $r0.<com.android.internal.net.DbSSLSessionCache: java.util.Map mExternalCache>;

        $i0 = interfaceinvoke $r8.<java.util.Map: int size()>();

        if $i0 != 256 goto label03;

        $r5 = $r0.<com.android.internal.net.DbSSLSessionCache: com.android.internal.net.DbSSLSessionCache$DatabaseHelper mDatabaseHelper>;

        $r9 = virtualinvoke $r5.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r10 = <com.android.internal.net.DbSSLSessionCache: java.lang.String[] PROJECTION>;

        $r11 = virtualinvoke $r9.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("ssl_sessions", $r10, null, null, null, null, "time_sec");

        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label10;

        $r3 = interfaceinvoke $r11.<android.database.Cursor: java.lang.String getString(int)>(1);

        $r10 = newarray (java.lang.String)[1];

        $r10[0] = $r3;

        virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("ssl_sessions", "hostport= ?", $r10);

        $r8 = $r0.<com.android.internal.net.DbSSLSessionCache: java.util.Map mExternalCache>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label03:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r3 = new java.lang.String;

        $r12 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r2);

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = interfaceinvoke $r1.<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $i0 = interfaceinvoke $r1.<javax.net.ssl.SSLSession: int getPeerPort()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("hostport", $r14);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("session", $r3);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l2 / 1000L;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("time_sec", $r15);

        $r8 = $r0.<com.android.internal.net.DbSSLSessionCache: java.util.Map mExternalCache>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r2);

     label04:
        virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("ssl_sessions", null, $r4);

     label05:
        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("DbSSLSessionCache", 3);

        if $z0 == 0 goto label06;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("New SSL session ");

        $r3 = interfaceinvoke $r1.<javax.net.ssl.SSLSession: java.lang.String getPeerHost()>();

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DER len: ");

        $i0 = lengthof $r2;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $l1 = $l2 - $l1;

        $r13 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("DbSSLSessionCache", $r3);

     label06:
        exitmonitor $r6;

     label07:
        return;

     label08:
        $r16 := @caughtexception;

        exitmonitor $r6;

     label09:
        throw $r16;

     label10:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("DbSSLSessionCache", "No rows found");

        virtualinvoke $r0.<com.android.internal.net.DbSSLSessionCache: void clear()>();

        goto label03;

     label11:
        $r17 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DbSSLSessionCache", "Ignoring SQL exception when caching session", $r17);

     label12:
        goto label05;

        catch java.lang.Throwable from label02 to label04 with label08;
        catch android.database.SQLException from label04 to label05 with label11;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label10 to label12 with label08;
    }
}
