public class android.test.AndroidTestRunner extends junit.runner.BaseTestRunner
{
    private android.content.Context mContext;
    private android.app.Instrumentation mInstrumentation;
    private boolean mSkipExecution;
    private java.util.List mTestCases;
    private java.lang.String mTestClassName;
    private java.util.List mTestListeners;
    private junit.framework.TestResult mTestResult;

    public void <init>()
    {
        android.test.AndroidTestRunner $r0;
        java.util.ArrayList $r1;

        $r0 := @this: android.test.AndroidTestRunner;

        specialinvoke $r0.<junit.runner.BaseTestRunner: void <init>()>();

        $r0.<android.test.AndroidTestRunner: boolean mSkipExecution> = 0;

        $r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r0.<android.test.AndroidTestRunner: java.util.List mTestListeners> = $r1;

        return;
    }

    private junit.framework.TestCase buildSingleTestMethod(java.lang.Class, java.lang.String)
    {
        android.test.AndroidTestRunner $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        java.lang.Object $r3;
        junit.framework.TestCase $r4;
        java.lang.IllegalAccessException $r5;
        java.lang.StringBuilder $r6;
        java.lang.InstantiationException $r7;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.Class;

        $r2 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (junit.framework.TestCase) $r3;

        virtualinvoke $r4.<junit.framework.TestCase: void setName(java.lang.String)>($r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not access test class. Class: ");

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r2);

     label4:
        return null;

     label5:
        $r7 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate test class. Class: ");

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r2);

        goto label4;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label5;
    }

    private junit.framework.Test getTest(java.lang.Class)
    {
        android.test.AndroidTestRunner $r0;
        java.lang.Class $r1, $r2;
        boolean $z0;
        java.lang.Class[] $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        android.test.TestSuiteProvider $r7;
        junit.framework.TestSuite $r8;
        java.lang.InstantiationException $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;
        junit.framework.Test $r12;
        java.lang.IllegalAccessException $r13;
        java.lang.reflect.InvocationTargetException $r14;
        java.lang.NoSuchMethodException $r15;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.Class;

        $r2 = class "android/test/TestSuiteProvider";

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label4;

        $r3 = newarray (java.lang.Class)[0];

     label1:
        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3);

        $r5 = newarray (java.lang.Object)[0];

        $r6 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

        $r7 = (android.test.TestSuiteProvider) $r6;

        $r8 = interfaceinvoke $r7.<android.test.TestSuiteProvider: junit.framework.TestSuite getTestSuite()>();

     label2:
        return $r8;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate test suite provider. Class: ");

        $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r11);

     label4:
        $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r0.<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>($r11);

        return $r12;

     label5:
        $r13 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal access of test suite provider. Class: ");

        $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r11);

        goto label4;

     label6:
        $r14 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invocation exception test suite provider. Class: ");

        $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r11);

        goto label4;

     label7:
        $r15 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such method on test suite provider. Class: ");

        $r11 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r11);

        goto label4;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label6;
        catch java.lang.NoSuchMethodException from label1 to label2 with label7;
    }

    private java.lang.Class loadTestClass(java.lang.String)
    {
        android.test.AndroidTestRunner $r0;
        java.lang.String $r1;
        android.content.Context $r2;
        java.lang.ClassLoader $r3;
        java.lang.Class $r4;
        java.lang.ClassNotFoundException $r5;
        java.lang.StringBuilder $r6;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.test.AndroidTestRunner: android.content.Context mContext>;

     label1:
        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r1);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find test class. Class: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<android.test.AndroidTestRunner: void runFailed(java.lang.String)>($r1);

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private void setContextIfAndroidTestCase(junit.framework.Test, android.content.Context)
    {
        android.test.AndroidTestRunner $r0;
        android.content.Context $r1;
        junit.framework.Test $r2;
        java.lang.Class $r3, $r4;
        boolean $z0;
        android.test.AndroidTestCase $r5;

        $r0 := @this: android.test.AndroidTestRunner;

        $r2 := @parameter0: junit.framework.Test;

        $r1 := @parameter1: android.content.Context;

        $r3 = class "android/test/AndroidTestCase";

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label1;

        $r5 = (android.test.AndroidTestCase) $r2;

        virtualinvoke $r5.<android.test.AndroidTestCase: void setContext(android.content.Context)>($r1);

        return;

     label1:
        return;
    }

    private void setInstrumentationIfInstrumentationTestCase(junit.framework.Test, android.app.Instrumentation)
    {
        android.test.AndroidTestRunner $r0;
        android.app.Instrumentation $r1;
        junit.framework.Test $r2;
        java.lang.Class $r3, $r4;
        boolean $z0;
        android.test.InstrumentationTestCase $r5;

        $r0 := @this: android.test.AndroidTestRunner;

        $r2 := @parameter0: junit.framework.Test;

        $r1 := @parameter1: android.app.Instrumentation;

        $r3 = class "android/test/InstrumentationTestCase";

        $r4 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 == 0 goto label1;

        $r5 = (android.test.InstrumentationTestCase) $r2;

        virtualinvoke $r5.<android.test.InstrumentationTestCase: void injectInsrumentation(android.app.Instrumentation)>($r1);

        return;

     label1:
        return;
    }

    private void setTest(junit.framework.Test, java.lang.Class)
    {
        android.test.AndroidTestRunner $r0;
        junit.framework.Test $r1;
        java.lang.Class $r2, $r4;
        java.util.List $r3;
        boolean $z0;
        java.lang.String $r5;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: junit.framework.Test;

        $r2 := @parameter1: java.lang.Class;

        $r3 = staticinvoke <android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean)>($r1, 1);

        $r0.<android.test.AndroidTestRunner: java.util.List mTestCases> = $r3;

        $r4 = class "junit/framework/TestSuite";

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <android.test.TestCaseUtil: java.lang.String getTestName(junit.framework.Test)>($r1);

        $r0.<android.test.AndroidTestRunner: java.lang.String mTestClassName> = $r5;

        return;

     label1:
        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r0.<android.test.AndroidTestRunner: java.lang.String mTestClassName> = $r5;

        return;
    }

    private boolean shouldRunSingleTestMethod(java.lang.String, java.lang.Class)
    {
        android.test.AndroidTestRunner $r0;
        java.lang.String $r1;
        java.lang.Class $r2, $r3;
        boolean $z0;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Class;

        if $r1 == null goto label1;

        $r3 = class "junit/framework/TestCase";

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void addTestListener(junit.framework.TestListener)
    {
        android.test.AndroidTestRunner $r0;
        junit.framework.TestListener $r1;
        java.util.List $r2;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: junit.framework.TestListener;

        if $r1 == null goto label1;

        $r2 = $r0.<android.test.AndroidTestRunner: java.util.List mTestListeners>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;

     label1:
        return;
    }

    public void clearTestListeners()
    {
        android.test.AndroidTestRunner $r0;
        java.util.List $r1;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 = $r0.<android.test.AndroidTestRunner: java.util.List mTestListeners>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return;
    }

    protected junit.framework.TestResult createTestResult()
    {
        android.test.AndroidTestRunner $r0;
        boolean $z0;
        android.test.NoExecTestResult r2;
        junit.framework.TestResult r3;

        $r0 := @this: android.test.AndroidTestRunner;

        $z0 = $r0.<android.test.AndroidTestRunner: boolean mSkipExecution>;

        if $z0 == 0 goto label1;

        r2 = new android.test.NoExecTestResult;

        specialinvoke r2.<android.test.NoExecTestResult: void <init>()>();

        return r2;

     label1:
        r3 = new junit.framework.TestResult;

        specialinvoke r3.<junit.framework.TestResult: void <init>()>();

        return r3;
    }

    public java.util.List getTestCases()
    {
        android.test.AndroidTestRunner $r0;
        java.util.List r1;

        $r0 := @this: android.test.AndroidTestRunner;

        r1 = $r0.<android.test.AndroidTestRunner: java.util.List mTestCases>;

        return r1;
    }

    public java.lang.String getTestClassName()
    {
        android.test.AndroidTestRunner $r0;
        java.lang.String r1;

        $r0 := @this: android.test.AndroidTestRunner;

        r1 = $r0.<android.test.AndroidTestRunner: java.lang.String mTestClassName>;

        return r1;
    }

    public junit.framework.TestResult getTestResult()
    {
        android.test.AndroidTestRunner $r0;
        junit.framework.TestResult r1;

        $r0 := @this: android.test.AndroidTestRunner;

        r1 = $r0.<android.test.AndroidTestRunner: junit.framework.TestResult mTestResult>;

        return r1;
    }

    protected java.lang.Class loadSuiteClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        android.test.AndroidTestRunner $r0;
        java.lang.String $r1;
        android.content.Context $r2;
        java.lang.ClassLoader $r3;
        java.lang.Class $r4;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<android.test.AndroidTestRunner: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        $r4 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r1);

        return $r4;
    }

    protected void runFailed(java.lang.String)
    {
        android.test.AndroidTestRunner $r0;
        java.lang.String $r1;
        java.lang.RuntimeException $r2;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r2;
    }

    public void runTest()
    {
        android.test.AndroidTestRunner $r0;
        junit.framework.TestResult $r1;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 = virtualinvoke $r0.<android.test.AndroidTestRunner: junit.framework.TestResult createTestResult()>();

        virtualinvoke $r0.<android.test.AndroidTestRunner: void runTest(junit.framework.TestResult)>($r1);

        return;
    }

    public void runTest(junit.framework.TestResult)
    {
        android.test.AndroidTestRunner $r0;
        junit.framework.TestResult $r1;
        java.util.List $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        junit.framework.TestListener $r5;
        junit.framework.TestCase $r6;
        android.content.Context $r7;
        android.app.Instrumentation $r8;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: junit.framework.TestResult;

        $r0.<android.test.AndroidTestRunner: junit.framework.TestResult mTestResult> = $r1;

        $r2 = $r0.<android.test.AndroidTestRunner: java.util.List mTestListeners>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (junit.framework.TestListener) $r4;

        $r1 = $r0.<android.test.AndroidTestRunner: junit.framework.TestResult mTestResult>;

        virtualinvoke $r1.<junit.framework.TestResult: void addListener(junit.framework.TestListener)>($r5);

        goto label1;

     label2:
        $r2 = $r0.<android.test.AndroidTestRunner: java.util.List mTestCases>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (junit.framework.TestCase) $r4;

        $r7 = $r0.<android.test.AndroidTestRunner: android.content.Context mContext>;

        specialinvoke $r0.<android.test.AndroidTestRunner: void setContextIfAndroidTestCase(junit.framework.Test,android.content.Context)>($r6, $r7);

        $r8 = $r0.<android.test.AndroidTestRunner: android.app.Instrumentation mInstrumentation>;

        specialinvoke $r0.<android.test.AndroidTestRunner: void setInstrumentationIfInstrumentationTestCase(junit.framework.Test,android.app.Instrumentation)>($r6, $r8);

        $r1 = $r0.<android.test.AndroidTestRunner: junit.framework.TestResult mTestResult>;

        virtualinvoke $r6.<junit.framework.TestCase: void run(junit.framework.TestResult)>($r1);

        goto label3;

     label4:
        return;
    }

    public void setContext(android.content.Context)
    {
        android.test.AndroidTestRunner $r0;
        android.content.Context $r1;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: android.content.Context;

        $r0.<android.test.AndroidTestRunner: android.content.Context mContext> = $r1;

        return;
    }

    public void setInstrumentaiton(android.app.Instrumentation)
    {
        android.test.AndroidTestRunner $r0;
        android.app.Instrumentation $r1;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: android.app.Instrumentation;

        $r0.<android.test.AndroidTestRunner: android.app.Instrumentation mInstrumentation> = $r1;

        return;
    }

    void setSkipExecution(boolean)
    {
        android.test.AndroidTestRunner $r0;
        boolean $z0;

        $r0 := @this: android.test.AndroidTestRunner;

        $z0 := @parameter0: boolean;

        $r0.<android.test.AndroidTestRunner: boolean mSkipExecution> = $z0;

        return;
    }

    public void setTest(junit.framework.Test)
    {
        android.test.AndroidTestRunner $r0;
        junit.framework.Test $r1;
        java.lang.Class $r2;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: junit.framework.Test;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        specialinvoke $r0.<android.test.AndroidTestRunner: void setTest(junit.framework.Test,java.lang.Class)>($r1, $r2);

        return;
    }

    public void setTestClassName(java.lang.String, java.lang.String)
    {
        android.test.AndroidTestRunner $r0;
        java.lang.String $r1, $r2;
        java.lang.Class $r3;
        boolean $z0;
        junit.framework.TestCase $r4;
        junit.framework.TestCase[] $r5;
        java.util.ArrayList $r6;
        junit.framework.Test $r7;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke $r0.<android.test.AndroidTestRunner: java.lang.Class loadTestClass(java.lang.String)>($r1);

        $z0 = specialinvoke $r0.<android.test.AndroidTestRunner: boolean shouldRunSingleTestMethod(java.lang.String,java.lang.Class)>($r2, $r3);

        if $z0 == 0 goto label1;

        $r4 = specialinvoke $r0.<android.test.AndroidTestRunner: junit.framework.TestCase buildSingleTestMethod(java.lang.Class,java.lang.String)>($r3, $r2);

        $r5 = newarray (junit.framework.TestCase)[1];

        $r5[0] = $r4;

        $r6 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r5);

        $r0.<android.test.AndroidTestRunner: java.util.List mTestCases> = $r6;

        $r1 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r0.<android.test.AndroidTestRunner: java.lang.String mTestClassName> = $r1;

        return;

     label1:
        $r7 = specialinvoke $r0.<android.test.AndroidTestRunner: junit.framework.Test getTest(java.lang.Class)>($r3);

        specialinvoke $r0.<android.test.AndroidTestRunner: void setTest(junit.framework.Test,java.lang.Class)>($r7, $r3);

        return;
    }

    public void testEnded(java.lang.String)
    {
        android.test.AndroidTestRunner $r0;
        java.lang.String $r1;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.String;

        return;
    }

    public void testFailed(int, junit.framework.Test, java.lang.Throwable)
    {
        android.test.AndroidTestRunner $r0;
        int $i0;
        junit.framework.Test $r1;
        java.lang.Throwable $r2;

        $r0 := @this: android.test.AndroidTestRunner;

        $i0 := @parameter0: int;

        $r1 := @parameter1: junit.framework.Test;

        $r2 := @parameter2: java.lang.Throwable;

        return;
    }

    public void testStarted(java.lang.String)
    {
        android.test.AndroidTestRunner $r0;
        java.lang.String $r1;

        $r0 := @this: android.test.AndroidTestRunner;

        $r1 := @parameter0: java.lang.String;

        return;
    }
}
