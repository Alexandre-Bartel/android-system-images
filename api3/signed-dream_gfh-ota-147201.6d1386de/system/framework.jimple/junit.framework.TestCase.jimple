public abstract class junit.framework.TestCase extends junit.framework.Assert implements junit.framework.Test
{
    private java.lang.String fName;

    public void <init>()
    {
        junit.framework.TestCase $r0;

        $r0 := @this: junit.framework.TestCase;

        specialinvoke $r0.<junit.framework.Assert: void <init>()>();

        $r0.<junit.framework.TestCase: java.lang.String fName> = null;

        return;
    }

    public void <init>(java.lang.String)
    {
        junit.framework.TestCase $r0;
        java.lang.String $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<junit.framework.Assert: void <init>()>();

        $r0.<junit.framework.TestCase: java.lang.String fName> = $r1;

        return;
    }

    public int countTestCases()
    {
        junit.framework.TestCase $r0;

        $r0 := @this: junit.framework.TestCase;

        return 1;
    }

    protected junit.framework.TestResult createResult()
    {
        junit.framework.TestCase $r0;
        junit.framework.TestResult $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 = new junit.framework.TestResult;

        specialinvoke $r1.<junit.framework.TestResult: void <init>()>();

        return $r1;
    }

    public java.lang.String getName()
    {
        junit.framework.TestCase $r0;
        java.lang.String r1;

        $r0 := @this: junit.framework.TestCase;

        r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        return r1;
    }

    public junit.framework.TestResult run()
    {
        junit.framework.TestCase $r0;
        junit.framework.TestResult $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 = virtualinvoke $r0.<junit.framework.TestCase: junit.framework.TestResult createResult()>();

        virtualinvoke $r0.<junit.framework.TestCase: void run(junit.framework.TestResult)>($r1);

        return $r1;
    }

    public void run(junit.framework.TestResult)
    {
        junit.framework.TestCase $r0;
        junit.framework.TestResult $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 := @parameter0: junit.framework.TestResult;

        virtualinvoke $r1.<junit.framework.TestResult: void run(junit.framework.TestCase)>($r0);

        return;
    }

    public void runBare() throws java.lang.Throwable
    {
        junit.framework.TestCase $r0;
        java.lang.Throwable $r1;

        $r0 := @this: junit.framework.TestCase;

        virtualinvoke $r0.<junit.framework.TestCase: void setUp()>();

     label1:
        virtualinvoke $r0.<junit.framework.TestCase: void runTest()>();

     label2:
        virtualinvoke $r0.<junit.framework.TestCase: void tearDown()>();

        return;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r0.<junit.framework.TestCase: void tearDown()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void runTest() throws java.lang.Throwable
    {
        junit.framework.TestCase $r0;
        java.lang.String $r1;
        java.lang.reflect.Method $r2;
        java.lang.Class $r3;
        int $i0;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.NoSuchMethodException $r5;
        java.lang.reflect.InvocationTargetException $r6;
        java.lang.Throwable $r7;
        java.lang.IllegalAccessException $r8;

        $r0 := @this: junit.framework.TestCase;

        $r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.Object)>($r1);

        $r2 = null;

     label1:
        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r1, null);

     label2:
        $i0 = virtualinvoke $r2.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 != 0 goto label3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        $r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" should be public");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>($r1);

     label3:
        virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r0, null);

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Method \"");

        $r1 = $r0.<junit.framework.TestCase: java.lang.String fName>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" not found");

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.TestCase: void fail(java.lang.String)>($r1);

        goto label2;

     label6:
        $r6 := @caughtexception;

        virtualinvoke $r6.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        $r7 = virtualinvoke $r6.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r7;

     label7:
        $r8 := @caughtexception;

        virtualinvoke $r8.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        throw $r8;

        catch java.lang.NoSuchMethodException from label1 to label2 with label5;
        catch java.lang.reflect.InvocationTargetException from label3 to label4 with label6;
        catch java.lang.IllegalAccessException from label3 to label4 with label7;
    }

    public void setName(java.lang.String)
    {
        junit.framework.TestCase $r0;
        java.lang.String $r1;

        $r0 := @this: junit.framework.TestCase;

        $r1 := @parameter0: java.lang.String;

        $r0.<junit.framework.TestCase: java.lang.String fName> = $r1;

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        junit.framework.TestCase $r0;

        $r0 := @this: junit.framework.TestCase;

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        junit.framework.TestCase $r0;

        $r0 := @this: junit.framework.TestCase;

        return;
    }

    public java.lang.String toString()
    {
        junit.framework.TestCase $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        java.lang.Class $r3;

        $r0 := @this: junit.framework.TestCase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<junit.framework.TestCase: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
