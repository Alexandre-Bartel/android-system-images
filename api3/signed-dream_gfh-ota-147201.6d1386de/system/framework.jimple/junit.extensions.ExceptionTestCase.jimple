public class junit.extensions.ExceptionTestCase extends junit.framework.TestCase
{
    java.lang.Class fExpected;

    public void <init>(java.lang.String, java.lang.Class)
    {
        junit.extensions.ExceptionTestCase $r0;
        java.lang.String $r1;
        java.lang.Class $r2;

        $r0 := @this: junit.extensions.ExceptionTestCase;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Class;

        specialinvoke $r0.<junit.framework.TestCase: void <init>(java.lang.String)>($r1);

        $r0.<junit.extensions.ExceptionTestCase: java.lang.Class fExpected> = $r2;

        return;
    }

    protected void runTest() throws java.lang.Throwable
    {
        junit.extensions.ExceptionTestCase $r0;
        java.lang.Exception $r1;
        java.lang.StringBuilder $r2;
        java.lang.Class $r3, $r5;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @this: junit.extensions.ExceptionTestCase;

     label1:
        specialinvoke $r0.<junit.framework.TestCase: void runTest()>();

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected exception ");

        $r3 = $r0.<junit.extensions.ExceptionTestCase: java.lang.Class fExpected>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.extensions.ExceptionTestCase: void fail(java.lang.String)>($r4);

        return;

     label3:
        $r1 := @caughtexception;

        $r3 = $r0.<junit.extensions.ExceptionTestCase: java.lang.Class fExpected>;

        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z0 != 0 goto label4;

        throw $r1;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
