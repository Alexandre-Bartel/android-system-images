public class org.apache.http.impl.io.ContentLengthInputStream extends java.io.InputStream
{
    private static final int BUFFER_SIZE;
    private boolean closed;
    private long contentLength;
    private org.apache.http.io.SessionInputBuffer in;
    private long pos;

    public void <init>(org.apache.http.io.SessionInputBuffer, long)
    {
        org.apache.http.impl.io.ContentLengthInputStream $r0;
        org.apache.http.io.SessionInputBuffer $r1;
        long $l0;
        java.lang.IllegalArgumentException $r2;
        byte $b1;

        $r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $r1 := @parameter0: org.apache.http.io.SessionInputBuffer;

        $l0 := @parameter1: long;

        specialinvoke $r0.<java.io.InputStream: void <init>()>();

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = 0L;

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 0;

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in> = null;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r2;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Content length may not be negative");

        throw $r2;

     label2:
        $r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in> = $r1;

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength> = $l0;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream $r0;
        byte[] $r1;
        int $i0;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $z0 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 != 0 goto label5;

     label1:
        $r1 = newarray (byte)[2048];

     label2:
        $i0 = virtualinvoke $r0.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[])>($r1);

     label3:
        if $i0 >= 0 goto label2;

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 1;

        return;

     label4:
        $r2 := @caughtexception;

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed> = 1;

        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public int read() throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream $r0;
        int $i0;
        boolean $z0;
        java.io.IOException $r1;
        long $l1, $l2;
        byte $b3;
        org.apache.http.io.SessionInputBuffer $r2;

        $r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $z0 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r1;

     label1:
        $l1 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l2 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label2;

        return -1;

     label2:
        $l1 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l1 = $l1 + 1L;

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = $l1;

        $r2 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i0 = interfaceinvoke $r2.<org.apache.http.io.SessionInputBuffer: int read()>();

        return $i0;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r0.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream $r0;
        byte[] $r1;
        int $i0, $i1;
        boolean $z0;
        java.io.IOException $r2;
        long $l2, $l3;
        byte $b4;
        org.apache.http.io.SessionInputBuffer $r3;

        $r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Attempted read from closed stream.");

        throw $r2;

     label1:
        $l2 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l3 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b4 = $l2 cmp $l3;

        if $b4 < 0 goto label2;

        return -1;

     label2:
        $l2 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l3 = (long) $i1;

        $l2 = $l2 + $l3;

        $l3 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $b4 = $l2 cmp $l3;

        if $b4 <= 0 goto label3;

        $l2 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $l3 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l2 = $l2 - $l3;

        $i1 = (int) $l2;

     label3:
        $r3 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: org.apache.http.io.SessionInputBuffer in>;

        $i0 = interfaceinvoke $r3.<org.apache.http.io.SessionInputBuffer: int read(byte[],int,int)>($r1, $i0, $i1);

        $l2 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l3 = (long) $i0;

        $l2 = $l2 + $l3;

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = $l2;

        return $i0;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthInputStream $r0;
        long $l0, $l1, $l3;
        byte[] $r1;
        byte $b2;
        int $i4;

        $r0 := @this: org.apache.http.impl.io.ContentLengthInputStream;

        $l0 := @parameter0: long;

        $b2 = $l0 cmp 0L;

        if $b2 > 0 goto label1;

        return 0L;

     label1:
        $r1 = newarray (byte)[2048];

        $l3 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long contentLength>;

        $l1 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l1 = $l3 - $l1;

        $l1 = staticinvoke <java.lang.Math: long min(long,long)>($l0, $l1);

        $l0 = 0L;

     label2:
        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label3;

        $l3 = staticinvoke <java.lang.Math: long min(long,long)>(2048L, $l1);

        $i4 = (int) $l3;

        $i4 = virtualinvoke $r0.<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>($r1, 0, $i4);

        if $i4 != -1 goto label4;

     label3:
        $l1 = $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos>;

        $l1 = $l1 + $l0;

        $r0.<org.apache.http.impl.io.ContentLengthInputStream: long pos> = $l1;

        return $l0;

     label4:
        $l3 = (long) $i4;

        $l0 = $l0 + $l3;

        $l3 = (long) $i4;

        $l1 = $l1 - $l3;

        goto label2;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.io.ContentLengthInputStream: int BUFFER_SIZE> = 2048;

        return;
    }
}
