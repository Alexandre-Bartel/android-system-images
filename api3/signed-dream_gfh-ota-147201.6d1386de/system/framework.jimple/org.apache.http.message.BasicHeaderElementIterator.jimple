public class org.apache.http.message.BasicHeaderElementIterator extends java.lang.Object implements org.apache.http.HeaderElementIterator
{
    private org.apache.http.util.CharArrayBuffer buffer;
    private org.apache.http.HeaderElement currentElement;
    private org.apache.http.message.ParserCursor cursor;
    private final org.apache.http.HeaderIterator headerIt;
    private final org.apache.http.message.HeaderValueParser parser;

    public void <init>(org.apache.http.HeaderIterator)
    {
        org.apache.http.message.BasicHeaderElementIterator $r0;
        org.apache.http.HeaderIterator $r1;
        org.apache.http.message.BasicHeaderValueParser $r2;

        $r0 := @this: org.apache.http.message.BasicHeaderElementIterator;

        $r1 := @parameter0: org.apache.http.HeaderIterator;

        $r2 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

        specialinvoke $r0.<org.apache.http.message.BasicHeaderElementIterator: void <init>(org.apache.http.HeaderIterator,org.apache.http.message.HeaderValueParser)>($r1, $r2);

        return;
    }

    public void <init>(org.apache.http.HeaderIterator, org.apache.http.message.HeaderValueParser)
    {
        org.apache.http.message.BasicHeaderElementIterator $r0;
        org.apache.http.HeaderIterator $r1;
        org.apache.http.message.HeaderValueParser $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: org.apache.http.message.BasicHeaderElementIterator;

        $r1 := @parameter0: org.apache.http.HeaderIterator;

        $r2 := @parameter1: org.apache.http.message.HeaderValueParser;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement currentElement> = null;

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer> = null;

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor> = null;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header iterator may not be null");

        throw $r3;

     label1:
        if $r2 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parser may not be null");

        throw $r3;

     label2:
        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderIterator headerIt> = $r1;

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.HeaderValueParser parser> = $r2;

        return;
    }

    private void bufferHeaderValue()
    {
        org.apache.http.message.BasicHeaderElementIterator $r0;
        org.apache.http.HeaderIterator $r1;
        boolean $z0;
        org.apache.http.Header $r2;
        org.apache.http.FormattedHeader $r3;
        org.apache.http.util.CharArrayBuffer $r4;
        org.apache.http.message.ParserCursor $r5;
        int $i0;
        java.lang.String $r6;

        $r0 := @this: org.apache.http.message.BasicHeaderElementIterator;

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor> = null;

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer> = null;

     label1:
        $r1 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderIterator headerIt>;

        $z0 = interfaceinvoke $r1.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderIterator headerIt>;

        $r2 = interfaceinvoke $r1.<org.apache.http.HeaderIterator: org.apache.http.Header nextHeader()>();

        $z0 = $r2 instanceof org.apache.http.FormattedHeader;

        if $z0 == 0 goto label2;

        $r3 = (org.apache.http.FormattedHeader) $r2;

        $r4 = interfaceinvoke $r3.<org.apache.http.FormattedHeader: org.apache.http.util.CharArrayBuffer getBuffer()>();

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer> = $r4;

        $r5 = new org.apache.http.message.ParserCursor;

        $r4 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer>;

        $i0 = virtualinvoke $r4.<org.apache.http.util.CharArrayBuffer: int length()>();

        specialinvoke $r5.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor> = $r5;

        $r5 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor>;

        $r3 = (org.apache.http.FormattedHeader) $r2;

        $i0 = interfaceinvoke $r3.<org.apache.http.FormattedHeader: int getValuePos()>();

        virtualinvoke $r5.<org.apache.http.message.ParserCursor: void updatePos(int)>($i0);

        return;

     label2:
        $r6 = interfaceinvoke $r2.<org.apache.http.Header: java.lang.String getValue()>();

        if $r6 == null goto label1;

        $r4 = new org.apache.http.util.CharArrayBuffer;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        specialinvoke $r4.<org.apache.http.util.CharArrayBuffer: void <init>(int)>($i0);

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer> = $r4;

        $r4 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer>;

        virtualinvoke $r4.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r6);

        $r5 = new org.apache.http.message.ParserCursor;

        $r4 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer>;

        $i0 = virtualinvoke $r4.<org.apache.http.util.CharArrayBuffer: int length()>();

        specialinvoke $r5.<org.apache.http.message.ParserCursor: void <init>(int,int)>(0, $i0);

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor> = $r5;

        return;

     label3:
        return;
    }

    private void parseNextElement()
    {
        org.apache.http.message.BasicHeaderElementIterator $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.HeaderIterator $r3;
        boolean $z0;
        org.apache.http.message.HeaderValueParser $r4;
        org.apache.http.HeaderElement $r5;
        java.lang.String $r6;
        int $i0;

        $r0 := @this: org.apache.http.message.BasicHeaderElementIterator;

     label1:
        $r3 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderIterator headerIt>;

        $z0 = interfaceinvoke $r3.<org.apache.http.HeaderIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r2 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor>;

        if $r2 == null goto label8;

     label2:
        $r2 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor>;

        if $r2 == null goto label3;

        $r2 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor>;

        $z0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label4;

     label3:
        specialinvoke $r0.<org.apache.http.message.BasicHeaderElementIterator: void bufferHeaderValue()>();

     label4:
        $r2 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor>;

        if $r2 == null goto label1;

     label5:
        $r2 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor>;

        $z0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label7;

        $r4 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.HeaderValueParser parser>;

        $r1 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer>;

        $r2 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor>;

        $r5 = interfaceinvoke $r4.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement parseHeaderElement(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        $r6 = interfaceinvoke $r5.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i0 != 0 goto label6;

        $r6 = interfaceinvoke $r5.<org.apache.http.HeaderElement: java.lang.String getValue()>();

        if $r6 == null goto label5;

     label6:
        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement currentElement> = $r5;

        return;

     label7:
        $r2 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor>;

        $z0 = virtualinvoke $r2.<org.apache.http.message.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.message.ParserCursor cursor> = null;

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.util.CharArrayBuffer buffer> = null;

        goto label1;

     label8:
        return;
    }

    public boolean hasNext()
    {
        org.apache.http.message.BasicHeaderElementIterator $r0;
        org.apache.http.HeaderElement $r1;

        $r0 := @this: org.apache.http.message.BasicHeaderElementIterator;

        $r1 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement currentElement>;

        if $r1 != null goto label1;

        specialinvoke $r0.<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()>();

     label1:
        $r1 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement currentElement>;

        if $r1 == null goto label2;

        return 1;

     label2:
        return 0;
    }

    public final java.lang.Object next() throws java.util.NoSuchElementException
    {
        org.apache.http.message.BasicHeaderElementIterator $r0;
        org.apache.http.HeaderElement $r1;

        $r0 := @this: org.apache.http.message.BasicHeaderElementIterator;

        $r1 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement nextElement()>();

        return $r1;
    }

    public org.apache.http.HeaderElement nextElement() throws java.util.NoSuchElementException
    {
        org.apache.http.message.BasicHeaderElementIterator $r0;
        org.apache.http.HeaderElement $r1;
        java.util.NoSuchElementException $r2;

        $r0 := @this: org.apache.http.message.BasicHeaderElementIterator;

        $r1 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement currentElement>;

        if $r1 != null goto label1;

        specialinvoke $r0.<org.apache.http.message.BasicHeaderElementIterator: void parseNextElement()>();

     label1:
        $r1 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement currentElement>;

        if $r1 != null goto label2;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("No more header elements available");

        throw $r2;

     label2:
        $r1 = $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement currentElement>;

        $r0.<org.apache.http.message.BasicHeaderElementIterator: org.apache.http.HeaderElement currentElement> = null;

        return $r1;
    }

    public void remove() throws java.lang.UnsupportedOperationException
    {
        org.apache.http.message.BasicHeaderElementIterator $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: org.apache.http.message.BasicHeaderElementIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Remove not supported");

        throw $r1;
    }
}
