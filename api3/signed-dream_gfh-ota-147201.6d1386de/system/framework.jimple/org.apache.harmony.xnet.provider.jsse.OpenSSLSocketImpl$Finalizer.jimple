class org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer extends java.lang.Thread
{
    final org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl this$0;

    private void <init>(org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer $r0;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl this$0> = $r1;

        specialinvoke $r0.<java.lang.Thread: void <init>()>();

        return;
    }

    void <init>(org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl, org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$1)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer $r0;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl $r1;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$1 $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl;

        $r2 := @parameter1: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$1;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer: void <init>(org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl)>($r1);

        return;
    }

    public void run()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer $r0;
        java.util.logging.Level $r1;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl $r2;
        java.net.Socket $r3;
        java.io.IOException $r4;
        java.util.logging.Logger $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl this$0>;

        $r3 = staticinvoke <org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: java.net.Socket access$800(org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl)>($r2);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl this$0>;

     label1:
        virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void close()>();

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <java.lang.Thread: boolean interrupted()>();

        $r5 = <java.util.logging.Logger: java.util.logging.Logger global>;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trouble finalizing SSL socket (");

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl$Finalizer: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl this$0>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r1, $r7, $r4);

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }
}
