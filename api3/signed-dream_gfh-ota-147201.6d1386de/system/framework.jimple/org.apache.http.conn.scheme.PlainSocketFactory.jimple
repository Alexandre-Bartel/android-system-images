public final class org.apache.http.conn.scheme.PlainSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.SocketFactory
{
    private static final org.apache.http.conn.scheme.PlainSocketFactory DEFAULT_FACTORY;
    private final org.apache.http.conn.scheme.HostNameResolver nameResolver;

    static void <clinit>()
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;

        $r0 = new org.apache.http.conn.scheme.PlainSocketFactory;

        specialinvoke $r0.<org.apache.http.conn.scheme.PlainSocketFactory: void <init>()>();

        <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory DEFAULT_FACTORY> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;

        $r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        specialinvoke $r0.<org.apache.http.conn.scheme.PlainSocketFactory: void <init>(org.apache.http.conn.scheme.HostNameResolver)>(null);

        return;
    }

    public void <init>(org.apache.http.conn.scheme.HostNameResolver)
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;
        org.apache.http.conn.scheme.HostNameResolver $r1;

        $r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r1 := @parameter0: org.apache.http.conn.scheme.HostNameResolver;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = $r1;

        return;
    }

    public static org.apache.http.conn.scheme.PlainSocketFactory getSocketFactory()
    {
        org.apache.http.conn.scheme.PlainSocketFactory r0;

        r0 = <org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.PlainSocketFactory DEFAULT_FACTORY>;

        return r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;
        java.lang.String $r1;
        int $i0, $i1;
        java.net.InetAddress $r2;
        org.apache.http.params.HttpParams $r3;
        java.net.InetSocketAddress $r4;
        java.net.Socket $r5;
        java.lang.IllegalArgumentException $r6;
        org.apache.http.conn.scheme.HostNameResolver $r7;

        $r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r5 := @parameter0: java.net.Socket;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.net.InetAddress;

        $i1 := @parameter4: int;

        $r3 := @parameter5: org.apache.http.params.HttpParams;

        if $r1 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r6;

     label1:
        if $r3 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r6;

     label2:
        if $r5 != null goto label3;

        $r5 = virtualinvoke $r0.<org.apache.http.conn.scheme.PlainSocketFactory: java.net.Socket createSocket()>();

     label3:
        if $r2 != null goto label4;

        if $i1 <= 0 goto label6;

     label4:
        if $i1 >= 0 goto label5;

        $i1 = 0;

     label5:
        $r4 = new java.net.InetSocketAddress;

        specialinvoke $r4.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i1);

        virtualinvoke $r5.<java.net.Socket: void bind(java.net.SocketAddress)>($r4);

     label6:
        $i1 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>($r3);

        $r7 = $r0.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        if $r7 == null goto label8;

        $r4 = new java.net.InetSocketAddress;

        $r7 = $r0.<org.apache.http.conn.scheme.PlainSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        $r2 = interfaceinvoke $r7.<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>($r1);

        specialinvoke $r4.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r2, $i0);

     label7:
        virtualinvoke $r5.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r4, $i1);

        return $r5;

     label8:
        $r4 = new java.net.InetSocketAddress;

        specialinvoke $r4.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r1, $i0);

        goto label7;
    }

    public java.net.Socket createSocket()
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r1 = new java.net.Socket;

        specialinvoke $r1.<java.net.Socket: void <init>()>();

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;
        java.lang.Object $r1;

        $r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r1 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;
        int $i0;
        java.lang.Class $r1;

        $r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r1 = class "org/apache/http/conn/scheme/PlainSocketFactory";

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    public final boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.scheme.PlainSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.IllegalArgumentException $r2;
        java.lang.Class $r3;
        boolean $z0;

        $r0 := @this: org.apache.http.conn.scheme.PlainSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r2;

     label1:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r3 == class "java/net/Socket" goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r2;

     label3:
        return 0;
    }
}
