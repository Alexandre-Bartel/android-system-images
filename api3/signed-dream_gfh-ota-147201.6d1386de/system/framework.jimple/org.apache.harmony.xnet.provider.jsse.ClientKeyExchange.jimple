public class org.apache.harmony.xnet.provider.jsse.ClientKeyExchange extends org.apache.harmony.xnet.provider.jsse.Message
{
    final byte[] exchange_keys;
    final boolean isRSA;
    boolean isTLS;

    public void <init>()
    {
        org.apache.harmony.xnet.provider.jsse.ClientKeyExchange $r0;
        byte[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientKeyExchange;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $r1 = newarray (byte)[0];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys> = $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: boolean isRSA> = 0;

        return;
    }

    public void <init>(java.math.BigInteger)
    {
        org.apache.harmony.xnet.provider.jsse.ClientKeyExchange $r0;
        java.math.BigInteger $r1;
        byte[] $r2, $r3, $r4;
        byte $b0;
        int $i1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientKeyExchange;

        $r1 := @parameter0: java.math.BigInteger;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $r2 = virtualinvoke $r1.<java.math.BigInteger: byte[] toByteArray()>();

        $b0 = $r2[0];

        if $b0 != 0 goto label2;

        $i1 = lengthof $r2;

        $i1 = $i1 - 1;

        $r3 = newarray (byte)[$i1];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys> = $r3;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        $i1 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 1, $r3, 0, $i1);

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        $i1 = lengthof $r2;

        $i1 = $i1 + 2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i1;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: boolean isRSA> = 0;

        return;

     label2:
        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys> = $r2;

        goto label1;
    }

    public void <init>(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream, int, boolean, boolean) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.ClientKeyExchange $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientKeyExchange;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $z1 := @parameter3: boolean;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: boolean isTLS> = $z0;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: boolean isRSA> = $z1;

        if $i0 != 0 goto label1;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = 0;

        $r2 = newarray (byte)[0];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys> = $r2;

        return;

     label1:
        if $z1 == 0 goto label3;

        if $z0 != 0 goto label3;

        $i2 = $i0;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i0;

     label2:
        $r2 = newarray (byte)[$i2];

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: int read(byte[],int,int)>($r2, 0, $i2);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        if $i2 == $i0 goto label4;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void fatalAlert(byte,java.lang.String)>(50, "DECODE ERROR: incorrect ClientKeyExchange");

        return;

     label3:
        $i1 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLInputStream: int readUint16()>();

        $i2 = $i1;

        $i1 = $i1 + 2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i1;

        goto label2;

     label4:
        return;
    }

    public void <init>(byte[], boolean)
    {
        org.apache.harmony.xnet.provider.jsse.ClientKeyExchange $r0;
        byte[] $r1;
        boolean $z0;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientKeyExchange;

        $r1 := @parameter0: byte[];

        $z0 := @parameter1: boolean;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.Message: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys> = $r1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        $i0 = lengthof $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i0;

        if $z0 == 0 goto label1;

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length>;

        $i0 = $i0 + 2;

        $r0.<org.apache.harmony.xnet.provider.jsse.Message: int length> = $i0;

     label1:
        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: boolean isTLS> = $z0;

        $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: boolean isRSA> = 1;

        return;
    }

    public int getType()
    {
        org.apache.harmony.xnet.provider.jsse.ClientKeyExchange $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientKeyExchange;

        return 16;
    }

    public boolean isEmpty()
    {
        org.apache.harmony.xnet.provider.jsse.ClientKeyExchange $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientKeyExchange;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void send(org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream)
    {
        org.apache.harmony.xnet.provider.jsse.ClientKeyExchange $r0;
        org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream $r1;
        byte[] $r2;
        int $i0;
        boolean $z0;
        long $l1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ClientKeyExchange;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        $i0 = lengthof $r2;

        if $i0 == 0 goto label3;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: boolean isRSA>;

        if $z0 == 0 goto label1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: boolean isTLS>;

        if $z0 == 0 goto label2;

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        $i0 = lengthof $r2;

        $l1 = (long) $i0;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void writeUint16(long)>($l1);

     label2:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ClientKeyExchange: byte[] exchange_keys>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.HandshakeIODataStream: void write(byte[])>($r2);

        return;

     label3:
        return;
    }
}
