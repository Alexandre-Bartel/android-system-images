public class org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper extends org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl
{
    private java.net.Socket socket;

    protected void <init>(java.net.Socket, java.lang.String, int, boolean, org.apache.harmony.xnet.provider.jsse.SSLParameters) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r3;
        java.net.SocketException $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 := @parameter4: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void <init>(java.net.Socket,java.lang.String,int,boolean,org.apache.harmony.xnet.provider.jsse.SSLParameters)>($r1, $r2, $i0, $z0, $r3);

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isConnected()>();

        if $z0 != 0 goto label1;

        $r4 = new java.net.SocketException;

        specialinvoke $r4.<java.net.SocketException: void <init>(java.lang.String)>("Socket is not connected.");

        throw $r4;

     label1:
        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket> = $r1;

        return;
    }

    public void bind(java.net.SocketAddress) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.net.SocketAddress $r1;
        java.io.IOException $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 := @parameter0: java.net.SocketAddress;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Underlying socket is already connected.");

        throw $r2;
    }

    public void connect(java.net.SocketAddress) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.net.SocketAddress $r1;
        java.io.IOException $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 := @parameter0: java.net.SocketAddress;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Underlying socket is already connected.");

        throw $r2;
    }

    public void connect(java.net.SocketAddress, int) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.net.SocketAddress $r1;
        int $i0;
        java.io.IOException $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 := @parameter0: java.net.SocketAddress;

        $i0 := @parameter1: int;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Underlying socket is already connected.");

        throw $r2;
    }

    public java.net.InetAddress getInetAddress()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.net.InetAddress $r1;
        java.net.Socket $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $r1 = virtualinvoke $r2.<java.net.Socket: java.net.InetAddress getInetAddress()>();

        return $r1;
    }

    public boolean getKeepAlive() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean getKeepAlive()>();

        return $z0;
    }

    public java.net.InetAddress getLocalAddress()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.net.InetAddress $r1;
        java.net.Socket $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $r1 = virtualinvoke $r2.<java.net.Socket: java.net.InetAddress getLocalAddress()>();

        return $r1;
    }

    public int getLocalPort()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getLocalPort()>();

        return $i0;
    }

    public java.net.SocketAddress getLocalSocketAddress()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.net.SocketAddress $r1;
        java.net.Socket $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $r1 = virtualinvoke $r2.<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()>();

        return $r1;
    }

    public boolean getOOBInline() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean getOOBInline()>();

        return $z0;
    }

    public int getPort()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getPort()>();

        return $i0;
    }

    public int getReceiveBufferSize() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getReceiveBufferSize()>();

        return $i0;
    }

    public java.net.SocketAddress getRemoteSocketAddress()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.net.SocketAddress $r1;
        java.net.Socket $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $r1 = virtualinvoke $r2.<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>();

        return $r1;
    }

    public boolean getReuseAddress() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean getReuseAddress()>();

        return $z0;
    }

    public int getSendBufferSize() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSendBufferSize()>();

        return $i0;
    }

    public int getSoLinger() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSoLinger()>();

        return $i0;
    }

    public int getSoTimeout() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getSoTimeout()>();

        return $i0;
    }

    public boolean getTcpNoDelay() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean getTcpNoDelay()>();

        return $z0;
    }

    public int getTrafficClass() throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getTrafficClass()>();

        return $i0;
    }

    public boolean isBound()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isBound()>();

        return $z0;
    }

    public boolean isClosed()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        return $z0;
    }

    public boolean isConnected()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isConnected()>();

        return $z0;
    }

    public boolean isInputShutdown()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isInputShutdown()>();

        return $z0;
    }

    public boolean isOutputShutdown()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isOutputShutdown()>();

        return $z0;
    }

    public void setKeepAlive(boolean) throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setKeepAlive(boolean)>($z0);

        return;
    }

    public void setReceiveBufferSize(int) throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setReceiveBufferSize(int)>($i0);

        return;
    }

    public void setReuseAddress(boolean) throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setReuseAddress(boolean)>($z0);

        return;
    }

    public void setSendBufferSize(int) throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSendBufferSize(int)>($i0);

        return;
    }

    public void setSoLinger(boolean, int) throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoLinger(boolean,int)>($z0, $i0);

        return;
    }

    public void setSoTimeout(int) throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i0);

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl: void setSoTimeout(int)>($i0);

        return;
    }

    public void setTcpNoDelay(boolean) throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        boolean $z0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setTcpNoDelay(boolean)>($z0);

        return;
    }

    public void setTrafficClass(int) throws java.net.SocketException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        int $i0;
        java.net.Socket $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setTrafficClass(int)>($i0);

        return;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper $r0;
        java.lang.StringBuilder $r1;
        java.net.Socket $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSL socket over ");

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImplWrapper: java.net.Socket socket>;

        $r3 = virtualinvoke $r2.<java.net.Socket: java.lang.String toString()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }
}
