public abstract class android.database.sqlite.SQLiteClosable extends java.lang.Object
{
    private java.lang.Object mLock;
    private int mReferenceCount;

    public void <init>()
    {
        android.database.sqlite.SQLiteClosable $r0;
        java.lang.Object $r1;

        $r0 := @this: android.database.sqlite.SQLiteClosable;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount> = 1;

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0.<android.database.sqlite.SQLiteClosable: java.lang.Object mLock> = $r1;

        return;
    }

    public void acquireReference()
    {
        android.database.sqlite.SQLiteClosable $r0;
        java.lang.Object $r1;
        int $i0;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;

        $r0 := @this: android.database.sqlite.SQLiteClosable;

        $r1 = $r0.<android.database.sqlite.SQLiteClosable: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $i0 = $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount>;

        if $i0 > 0 goto label4;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("attempt to acquire a reference on a close SQLiteClosable");

        throw $r2;

     label2:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label3:
        throw $r3;

     label4:
        $i0 = $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount>;

        $i0 = $i0 + 1;

        $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount> = $i0;

        exitmonitor $r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    protected abstract void onAllReferencesReleased();

    protected void onAllReferencesReleasedFromContainer()
    {
        android.database.sqlite.SQLiteClosable $r0;

        $r0 := @this: android.database.sqlite.SQLiteClosable;

        return;
    }

    public void releaseReference()
    {
        android.database.sqlite.SQLiteClosable $r0;
        java.lang.Object $r1;
        int $i0;
        java.lang.Throwable $r2;

        $r0 := @this: android.database.sqlite.SQLiteClosable;

        $r1 = $r0.<android.database.sqlite.SQLiteClosable: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $i0 = $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount>;

        $i0 = $i0 - 1;

        $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount> = $i0;

        $i0 = $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount>;

        if $i0 != 0 goto label2;

        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void onAllReferencesReleased()>();

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void releaseReferenceFromContainer()
    {
        android.database.sqlite.SQLiteClosable $r0;
        java.lang.Object $r1;
        int $i0;
        java.lang.Throwable $r2;

        $r0 := @this: android.database.sqlite.SQLiteClosable;

        $r1 = $r0.<android.database.sqlite.SQLiteClosable: java.lang.Object mLock>;

        entermonitor $r1;

     label1:
        $i0 = $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount>;

        $i0 = $i0 - 1;

        $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount> = $i0;

        $i0 = $r0.<android.database.sqlite.SQLiteClosable: int mReferenceCount>;

        if $i0 != 0 goto label2;

        virtualinvoke $r0.<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>();

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
