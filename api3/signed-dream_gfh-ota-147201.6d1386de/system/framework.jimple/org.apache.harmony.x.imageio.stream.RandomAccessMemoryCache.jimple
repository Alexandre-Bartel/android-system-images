public final class org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache extends java.lang.Object
{
    private static final int BLOCK_MASK;
    private static final int BLOCK_SHIFT;
    private static final int BLOCK_SIZE;
    private java.util.ArrayList blocks;
    private int firstUndisposed;
    private long length;

    public void <init>()
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        java.util.ArrayList $r1;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: int firstUndisposed> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks> = $r1;

        return;
    }

    private void grow(long)
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        long $l0, $l2;
        int $i1, $i3;
        java.util.ArrayList $r1;
        byte[] $r2;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $l0 := @parameter0: long;

        $l2 = $l0 >> 9;

        $i3 = (int) $l2;

        $r1 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i3 - $i1;

        $i1 = $i1 + 1;

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label2;

        $r1 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        $r2 = newarray (byte)[512];

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $l0 = 1L + $l0;

        $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length> = $l0;

        return;
    }

    public int appendData(java.io.InputStream, int) throws java.io.IOException
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        java.io.InputStream $r1;
        long $l0, $l2, $l3;
        int $i1, $i4, $i5, $i6, $i7;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        byte[] $r4;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $r1 := @parameter0: java.io.InputStream;

        $i1 := @parameter1: int;

        if $i1 > 0 goto label1;

        return 0;

     label1:
        $l2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $l0 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $l3 = (long) $i1;

        $l0 = $l0 + $l3;

        $l0 = $l0 - 1L;

        specialinvoke $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: void grow(long)>($l0);

        $l0 = $l2 >> 9;

        $i4 = (int) $l0;

        $l2 = 511L & $l2;

        $i5 = (int) $l2;

     label2:
        if $i1 <= 0 goto label6;

        $r2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r4 = (byte[]) $r3;

        $i6 = 512 - $i5;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i1);

        $i6 = $i7;

        $i1 = $i1 - $i7;

     label3:
        if $i6 <= 0 goto label5;

        $i7 = virtualinvoke $r1.<java.io.InputStream: int read(byte[],int,int)>($r4, $i5, $i6);

        if $i7 >= 0 goto label4;

        $l2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $i1 = $i1 - 0;

        $l0 = (long) $i1;

        $l2 = $l2 - $l0;

        $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length> = $l2;

        return 0;

     label4:
        $i6 = $i6 - $i7;

        $i5 = $i5 + $i7;

        goto label3;

     label5:
        $i4 = $i4 + 1;

        $i5 = 0;

        goto label2;

     label6:
        return $i1;
    }

    public void close()
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        java.util.ArrayList $r1;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $r1 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length> = 0L;

        return;
    }

    public void freeBefore(long)
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        long $l0;
        int $i1, $i2;
        java.util.ArrayList $r1;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $l0 := @parameter0: long;

        $l0 = $l0 >> 9;

        $i1 = (int) $l0;

        $i2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: int firstUndisposed>;

        if $i1 > $i2 goto label1;

        return;

     label1:
        $i2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: int firstUndisposed>;

     label2:
        if $i2 >= $i1 goto label3;

        $r1 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        virtualinvoke $r1.<java.util.ArrayList: java.lang.Object set(int,java.lang.Object)>($i2, null);

        $i2 = $i2 + 1;

        goto label2;

     label3:
        $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: int firstUndisposed> = $i1;

        return;
    }

    public int getData(long)
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        long $l0, $l1;
        java.lang.Object $r1;
        byte $b2;
        short $s3;
        java.util.ArrayList $r2;
        int $i4;
        byte[] $r3;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $l0 := @parameter0: long;

        $l1 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        return -1;

     label1:
        $r2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        $l1 = $l0 >> 9;

        $i4 = (int) $l1;

        $r1 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r3 = (byte[]) $r1;

        $l0 = 511L & $l0;

        $i4 = (int) $l0;

        $b2 = $r3[$i4];

        $s3 = $b2 & 255;

        return $s3;
    }

    public int getData(byte[], int, int, long)
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        byte[] $r1, $r5;
        int $i0, $i3, $i4;
        long $l1, $l2, $l6;
        java.lang.IndexOutOfBoundsException $r2;
        byte $b5;
        java.util.ArrayList $r3;
        java.lang.Object $r4;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i3 := @parameter2: int;

        $l1 := @parameter3: long;

        $i4 = lengthof $r1;

        $i4 = $i4 - $i0;

        if $i3 > $i4 goto label1;

        if $i3 < 0 goto label1;

        if $i0 >= 0 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        if $i3 != 0 goto label3;

        return 0;

     label3:
        $l2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $b5 = $l1 cmp $l2;

        if $b5 < 0 goto label4;

        return -1;

     label4:
        $l2 = (long) $i3;

        $l6 = $l2 + $l1;

        $l2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $b5 = $l6 cmp $l2;

        if $b5 <= 0 goto label5;

        $l2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $l2 = $l2 - $l1;

        $i3 = (int) $l2;

     label5:
        $r3 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        $l2 = $l1 >> 9;

        $i4 = (int) $l2;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r5 = (byte[]) $r4;

        $l2 = $l1 & 511L;

        $i4 = (int) $l2;

        $i4 = 512 - $i4;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        $l1 = $l1 & 511L;

        $i4 = (int) $l1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i4, $r1, $i0, $i3);

        return $i3;
    }

    public void getData(java.io.OutputStream, int, long) throws java.io.IOException
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        java.io.OutputStream $r1;
        long $l0, $l1, $l3;
        int $i2, $i5, $i6, $i7;
        byte $b4;
        java.lang.IndexOutOfBoundsException $r2;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        byte[] $r5;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $r1 := @parameter0: java.io.OutputStream;

        $i2 := @parameter1: int;

        $l0 := @parameter2: long;

        $l1 = (long) $i2;

        $l3 = $l1 + $l0;

        $l1 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $b4 = $l3 cmp $l1;

        if $b4 <= 0 goto label1;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Argument out of cache");

        throw $r2;

     label1:
        $l1 = $l0 >> 9;

        $i5 = (int) $l1;

        $l0 = 511L & $l0;

        $i6 = (int) $l0;

        $i7 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: int firstUndisposed>;

        if $i5 >= $i7 goto label2;

        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("The requested data are already disposed");

        throw $r2;

     label2:
        if $i2 <= 0 goto label3;

        $r3 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r5 = (byte[]) $r4;

        $i7 = 512 - $i6;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i2);

        virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r5, $i6, $i7);

        $i5 = $i5 + 1;

        $i6 = 0;

        $i2 = $i2 - $i7;

        goto label2;

     label3:
        return;
    }

    public long length()
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        long l0;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        l0 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        return l0;
    }

    public void putData(int, long)
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        int $i0, $i4;
        long $l1, $l2;
        java.lang.Object $r1;
        byte $b3;
        java.util.ArrayList $r2;
        byte[] $r3;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $l2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $b3 = $l1 cmp $l2;

        if $b3 < 0 goto label1;

        specialinvoke $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: void grow(long)>($l1);

     label1:
        $r2 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        $l2 = $l1 >> 9;

        $i4 = (int) $l2;

        $r1 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r3 = (byte[]) $r1;

        $l1 = 511L & $l1;

        $i4 = (int) $l1;

        $b3 = (byte) $i0;

        $r3[$i4] = $b3;

        return;
    }

    public void putData(byte[], int, int, long)
    {
        org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache $r0;
        byte[] $r1, $r5;
        int $i0, $i2, $i3, $i7;
        long $l1, $l4, $l5;
        java.lang.IndexOutOfBoundsException $r2;
        byte $b6;
        java.util.ArrayList $r3;
        java.lang.Object $r4;

        $r0 := @this: org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        $l4 := @parameter3: long;

        $i0 = lengthof $r1;

        $i0 = $i0 - $i2;

        if $i3 > $i0 goto label1;

        if $i3 < 0 goto label1;

        if $i2 >= 0 goto label2;

     label1:
        $r2 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        if $i3 != 0 goto label3;

        return;

     label3:
        $l1 = (long) $i3;

        $l1 = $l1 + $l4;

        $l1 = $l1 - 1L;

        $l5 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: long length>;

        $b6 = $l1 cmp $l5;

        if $b6 < 0 goto label4;

        specialinvoke $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: void grow(long)>($l1);

     label4:
        if $i3 <= 0 goto label5;

        $r3 = $r0.<org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: java.util.ArrayList blocks>;

        $l1 = $l4 >> 9;

        $i0 = (int) $l1;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (byte[]) $r4;

        $l1 = 511L & $l4;

        $i0 = (int) $l1;

        $i7 = 512 - $i0;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r5, $i0, $i7);

        $l1 = (long) $i7;

        $l4 = $l4 + $l1;

        $i3 = $i3 - $i7;

        $i2 = $i2 + $i7;

        goto label4;

     label5:
        return;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: int BLOCK_SIZE> = 512;

        <org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: int BLOCK_SHIFT> = 9;

        <org.apache.harmony.x.imageio.stream.RandomAccessMemoryCache: int BLOCK_MASK> = 511;

        return;
    }
}
