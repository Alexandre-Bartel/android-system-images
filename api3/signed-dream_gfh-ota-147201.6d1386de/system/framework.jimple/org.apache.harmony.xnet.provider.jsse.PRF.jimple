public class org.apache.harmony.xnet.provider.jsse.PRF extends java.lang.Object
{
    private static org.apache.harmony.xnet.provider.jsse.Logger$Stream logger;
    protected static java.security.MessageDigest md5;
    private static javax.crypto.Mac md5_mac;
    private static int md5_mac_length;
    protected static java.security.MessageDigest sha;
    private static javax.crypto.Mac sha_mac;
    private static int sha_mac_length;

    static void <clinit>()
    {
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r0;

        $r0 = staticinvoke <org.apache.harmony.xnet.provider.jsse.Logger: org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(java.lang.String)>("prf");

        <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.xnet.provider.jsse.PRF $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.PRF;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void computePRF(byte[], byte[], byte[], byte[]) throws java.security.GeneralSecurityException
    {
        byte[] $r0, $r1, $r2, $r3, $r10;
        javax.crypto.Mac $r4;
        int $i0, $i1, $i2;
        javax.crypto.spec.SecretKeySpec $r5, $r6;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        boolean $z0, $z1;
        byte $b3, $b4;
        java.lang.Throwable $r11;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        $r3 := @parameter3: byte[];

        entermonitor class "org/apache/harmony/xnet/provider/jsse/PRF";

     label01:
        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        if $r4 != null goto label02;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void init()>();

     label02:
        if $r1 == null goto label03;

        $i0 = lengthof $r1;

        if $i0 != 0 goto label07;

     label03:
        $r1 = newarray (byte)[8];

        $r5 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "HmacMD5");

        $r6 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r1, "HmacSHA1");

     label04:
        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r7 == null goto label05;

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("secret[");

        $i0 = lengthof $r1;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r9);

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[])>(16, "", " ", $r1);

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label[");

        $i0 = lengthof $r2;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r9);

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[])>(16, "", " ", $r2);

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("seed[");

        $i0 = lengthof $r3;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r9);

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[])>(16, "", " ", $r3);

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("MD5 key:");

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r1 = virtualinvoke $r5.<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>();

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[])>(16, "", " ", $r1);

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("SHA1 key:");

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r1 = virtualinvoke $r6.<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()>();

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[])>(16, "", " ", $r1);

     label05:
        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>($r5);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void init(java.security.Key)>($r6);

        $i0 = 0;

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r2);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        $r1 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r3);

     label06:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label09;

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r1);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r2);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r3);

        $i1 = <org.apache.harmony.xnet.provider.jsse.PRF: int md5_mac_length>;

        $i1 = $i1 + $i0;

        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label08;

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void doFinal(byte[],int)>($r0, $i0);

        $i1 = <org.apache.harmony.xnet.provider.jsse.PRF: int md5_mac_length>;

        $i0 = $i0 + $i1;

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        $r1 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1);

        goto label06;

     label07:
        $i0 = lengthof $r1;

        $i0 = $i0 >> 1;

        $i1 = lengthof $r1;

        $i1 = $i1 & 1;

        $r5 = new javax.crypto.spec.SecretKeySpec;

        $i2 = $i0 + $i1;

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r1, 0, $i2, "HmacMD5");

        $r6 = new javax.crypto.spec.SecretKeySpec;

        $i1 = $i1 + $i0;

        specialinvoke $r6.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r1, $i0, $i1, "HmacSHA1");

        goto label04;

     label08:
        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        $r1 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal()>();

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r0, $i0, $i1);

     label09:
        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r7 == null goto label10;

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("P_MD5:");

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $i0 = <org.apache.harmony.xnet.provider.jsse.PRF: int md5_mac_length>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[])>($i0, "", " ", $r0);

     label10:
        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r2);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        $r1 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r3);

        $i1 = 0;

     label11:
        $i0 = lengthof $r0;

        if $i1 >= $i0 goto label18;

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r1);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r2);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        $r10 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r3);

        $i0 = 0;

     label12:
        $i2 = <org.apache.harmony.xnet.provider.jsse.PRF: int sha_mac_length>;

        if $i0 >= $i2 goto label15;

        $z0 = 1;

     label13:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label16;

        $z1 = 1;

     label14:
        $z0 = $z0 & $z1;

        if $z0 == 0 goto label17;

        $b3 = $r0[$i1];

        $b4 = $r10[$i0];

        $b3 = $b3 ^ $b4;

        $b3 = (byte) $b3;

        $r0[$i1] = $b3;

        $i0 = $i0 + 1;

        $i1 = $i1 + 1;

        goto label12;

     label15:
        $z0 = 0;

        goto label13;

     label16:
        $z1 = 0;

        goto label14;

     label17:
        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        $r1 = virtualinvoke $r4.<javax.crypto.Mac: byte[] doFinal(byte[])>($r1);

        goto label11;

     label18:
        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r7 == null goto label19;

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("PRF:");

        $r7 = <org.apache.harmony.xnet.provider.jsse.PRF: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $i0 = <org.apache.harmony.xnet.provider.jsse.PRF: int sha_mac_length>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void printAsHex(int,java.lang.String,java.lang.String,byte[])>($i0, "", " ", $r0);

     label19:
        exitmonitor class "org/apache/harmony/xnet/provider/jsse/PRF";

        return;

     label20:
        $r11 := @caughtexception;

        exitmonitor class "org/apache/harmony/xnet/provider/jsse/PRF";

        throw $r11;

        catch java.lang.Throwable from label01 to label19 with label20;
    }

    static void computePRF_SSLv3(byte[], byte[], byte[])
    {
        byte[] $r0, $r1, $r2, $r3;
        java.security.MessageDigest $r4, $r5;
        int $i0, $i1, $i2, $i4;
        byte $b3;
        java.lang.Throwable $r6;

        $r0 := @parameter0: byte[];

        $r1 := @parameter1: byte[];

        $r2 := @parameter2: byte[];

        entermonitor class "org/apache/harmony/xnet/provider/jsse/PRF";

     label1:
        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest sha>;

        if $r4 != null goto label2;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void init()>();

     label2:
        $i0 = 0;

        $i1 = 1;

     label3:
        $i2 = lengthof $r0;

        if $i0 >= $i2 goto label7;

        $r3 = newarray (byte)[$i1];

        $i2 = $i1 + 1;

        $i1 = $i1 + 64;

        $b3 = (byte) $i1;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r3, $b3);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest sha>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest sha>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r1);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest sha>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r2);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest md5>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r1);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest md5>;

        $r5 = <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest sha>;

        $r3 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest()>();

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

        $r4 = <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest md5>;

        $r3 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        $i1 = $i0 + 16;

        $i4 = lengthof $r0;

        if $i1 <= $i4 goto label5;

        $i1 = lengthof $r0;

        $i1 = $i1 - $i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r0, $i0, $i1);

        $i0 = lengthof $r0;

     label4:
        $i1 = $i2;

        goto label3;

     label5:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r0, $i0, 16);

     label6:
        $i0 = $i0 + 16;

        goto label4;

     label7:
        exitmonitor class "org/apache/harmony/xnet/provider/jsse/PRF";

        return;

     label8:
        $r6 := @caughtexception;

        exitmonitor class "org/apache/harmony/xnet/provider/jsse/PRF";

        throw $r6;

        catch java.lang.Throwable from label1 to label6 with label8;
    }

    private static void init()
    {
        javax.crypto.Mac $r0;
        int $i0;
        java.security.MessageDigest $r1;
        java.security.NoSuchAlgorithmException $r2;
        org.apache.harmony.xnet.provider.jsse.AlertException $r3;
        javax.net.ssl.SSLException $r4;
        java.lang.Exception $r5;

     label1:
        $r0 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacMD5");

        <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac> = $r0;

        $r0 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>("HmacSHA1");

     label2:
        <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac> = $r0;

        $r0 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac md5_mac>;

        $i0 = virtualinvoke $r0.<javax.crypto.Mac: int getMacLength()>();

        <org.apache.harmony.xnet.provider.jsse.PRF: int md5_mac_length> = $i0;

        $r0 = <org.apache.harmony.xnet.provider.jsse.PRF: javax.crypto.Mac sha_mac>;

        $i0 = virtualinvoke $r0.<javax.crypto.Mac: int getMacLength()>();

        <org.apache.harmony.xnet.provider.jsse.PRF: int sha_mac_length> = $i0;

     label3:
        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest md5> = $r1;

        $r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

     label4:
        <org.apache.harmony.xnet.provider.jsse.PRF: java.security.MessageDigest sha> = $r1;

        return;

     label5:
        $r2 := @caughtexception;

        $r3 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r4 = new javax.net.ssl.SSLException;

        specialinvoke $r4.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("There is no provider of HmacSHA1 or HmacMD5 algorithms installed in the system");

        specialinvoke $r3.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r4);

        throw $r3;

     label6:
        $r5 := @caughtexception;

        $r3 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r4 = new javax.net.ssl.SSLException;

        specialinvoke $r4.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Could not initialize the Digest Algorithms.");

        specialinvoke $r3.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r4);

        throw $r3;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label6;
    }
}
