public abstract class org.apache.http.impl.io.AbstractSessionInputBuffer extends java.lang.Object implements org.apache.http.io.SessionInputBuffer
{
    private boolean ascii;
    private byte[] buffer;
    private int bufferlen;
    private int bufferpos;
    private java.lang.String charset;
    private java.io.InputStream instream;
    private org.apache.http.util.ByteArrayBuffer linebuffer;
    private int maxLineLen;
    private org.apache.http.impl.io.HttpTransportMetricsImpl metrics;

    public void <init>()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer> = null;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset> = "US-ASCII";

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii> = 1;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen> = -1;

        return;
    }

    private int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        java.lang.String $r2, $r5;
        org.apache.http.util.ByteArrayBuffer $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        byte[] $r4;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i0 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $i1 = $i0;

        if $i0 <= 0 goto label2;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i2 = $i0 - 1;

        $i2 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>($i2);

        if $i2 != 10 goto label1;

        $i1 = $i0 + -1;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: void setLength(int)>($i1);

     label1:
        if $i1 <= 0 goto label2;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i0 = $i1 - 1;

        $i0 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: int byteAt(int)>($i0);

        if $i0 != 13 goto label2;

        $i1 = $i1 + -1;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: void setLength(int)>($i1);

     label2:
        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i1 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $z0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii>;

        if $z0 == 0 goto label3;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(org.apache.http.util.ByteArrayBuffer,int,int)>($r3, 0, $i1);

        return $i1;

     label3:
        $r2 = new java.lang.String;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r4 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: byte[] buffer()>();

        $r5 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r4, 0, $i1, $r5);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r2);

        return $i1;
    }

    private int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer, int) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2, $r4;
        byte[] $r3;
        byte $b3;
        boolean $z0;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter1: int;

        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i2 = $i0 + 1;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i2;

        if $i0 <= 0 goto label1;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i2 = $i0 - 1;

        $b3 = $r3[$i2];

        if $b3 != 13 goto label1;

        $i0 = $i0 + -1;

     label1:
        $i0 = $i0 - $i1;

        $z0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii>;

        if $z0 == 0 goto label2;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>($r3, $i1, $i0);

        return $i0;

     label2:
        $r2 = new java.lang.String;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $r4 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r3, $i1, $i0, $r4);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r2);

        return $i0;
    }

    private int locateLF()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        int $i0, $i1;
        byte[] $r1;
        byte $b2;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

     label1:
        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        if $i0 >= $i1 goto label3;

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $b2 = $r1[$i0];

        if $b2 != 10 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    protected int fillBuffer() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        int $i0, $i1;
        byte[] $r1, $r2;
        java.io.InputStream $r3;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r4;
        long $l2;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        if $i0 <= 0 goto label2;

        $i0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i0 = $i0 - $i1;

        if $i0 <= 0 goto label1;

        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r1, 0, $i0);

     label1:
        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = 0;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = $i0;

     label2:
        $i0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i1 = lengthof $r1;

        $i1 = $i1 - $i0;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream>;

        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        if $i1 != -1 goto label3;

        return -1;

     label3:
        $i0 = $i0 + $i1;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = $i0;

        $r4 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        $l2 = (long) $i1;

        virtualinvoke $r4.<org.apache.http.impl.io.HttpTransportMetricsImpl: void incrementBytesTransferred(long)>($l2);

        return $i1;
    }

    public org.apache.http.io.HttpTransportMetrics getMetrics()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        org.apache.http.impl.io.HttpTransportMetricsImpl r1;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        r1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics>;

        return r1;
    }

    protected boolean hasBufferedData()
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        int $i0, $i1;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void init(java.io.InputStream, int, org.apache.http.params.HttpParams)
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        java.io.InputStream $r1;
        int $i0;
        org.apache.http.params.HttpParams $r2;
        java.lang.IllegalArgumentException $r3;
        byte[] $r4;
        org.apache.http.util.ByteArrayBuffer $r5;
        java.lang.String $r6;
        boolean $z0;
        org.apache.http.impl.io.HttpTransportMetricsImpl $r7;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 := @parameter0: java.io.InputStream;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.http.params.HttpParams;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Input stream may not be null");

        throw $r3;

     label1:
        if $i0 > 0 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Buffer size may not be negative or zero");

        throw $r3;

     label2:
        if $r2 != null goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r3;

     label3:
        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.io.InputStream instream> = $r1;

        $r4 = newarray (byte)[$i0];

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer> = $r4;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = 0;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen> = 0;

        $r5 = new org.apache.http.util.ByteArrayBuffer;

        specialinvoke $r5.<org.apache.http.util.ByteArrayBuffer: void <init>(int)>($i0);

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer> = $r5;

        $r6 = staticinvoke <org.apache.http.params.HttpProtocolParams: java.lang.String getHttpElementCharset(org.apache.http.params.HttpParams)>($r2);

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset> = $r6;

        $r6 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("US-ASCII");

        if $z0 != 0 goto label4;

        $r6 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: java.lang.String charset>;

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ASCII");

        if $z0 == 0 goto label6;

     label4:
        $z0 = 1;

     label5:
        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean ascii> = $z0;

        $i0 = interfaceinvoke $r2.<org.apache.http.params.HttpParams: int getIntParameter(java.lang.String,int)>("http.connection.max-line-length", -1);

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen> = $i0;

        $r7 = new org.apache.http.impl.io.HttpTransportMetricsImpl;

        specialinvoke $r7.<org.apache.http.impl.io.HttpTransportMetricsImpl: void <init>()>();

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.impl.io.HttpTransportMetricsImpl metrics> = $r7;

        return;

     label6:
        $z0 = 0;

        goto label5;
    }

    public int read() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        int $i0, $i2;
        boolean $z0;
        short $s1;
        byte[] $r1;
        byte $b3;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

     label1:
        $z0 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        if $i0 != -1 goto label1;

        return -1;

     label2:
        $r1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i2 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i0 = $i2 + 1;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i0;

        $b3 = $r1[$i2];

        $s1 = $b3 & 255;

        return $s1;
    }

    public int read(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 := @parameter0: byte[];

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = lengthof $r1;

        $i0 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int read(byte[],int,int)>($r1, 0, $i0);

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        if $r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z0 != 0 goto label2;

        $i2 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        if $i2 != -1 goto label1;

        return -1;

     label2:
        $i2 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i2 = $i2 - $i3;

        if $i2 <= $i1 goto label3;

        $i2 = $i1;

     label3:
        $r2 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i1, $r1, $i0, $i2);

        $i0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i0 = $i0 + $i2;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i0;

        return $i2;
    }

    public int readLine(org.apache.http.util.CharArrayBuffer) throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.util.ByteArrayBuffer $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;
        byte[] $r4;
        java.io.IOException $r5;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Char array buffer may not be null");

        throw $r2;

     label1:
        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: void clear()>();

        $i0 = 0;

        $z0 = 1;

     label2:
        if $z0 == 0 goto label7;

        $i1 = specialinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int locateLF()>();

        if $i1 == -1 goto label5;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $z0 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $i0 = specialinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromReadBuffer(org.apache.http.util.CharArrayBuffer,int)>($r1, $i1);

        return $i0;

     label3:
        $z0 = 0;

        $i2 = $i1 + 1;

        $i3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i2 = $i2 - $i3;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r4 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r4, $i3, $i2);

        $i1 = $i1 + 1;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i1;

     label4:
        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen>;

        if $i1 <= 0 goto label2;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $i1 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: int length()>();

        $i2 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int maxLineLen>;

        if $i1 < $i2 goto label2;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Maximum line length limit exceeded");

        throw $r5;

     label5:
        $z1 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z1 == 0 goto label6;

        $i0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        $i0 = $i0 - $i1;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $r4 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: byte[] buffer>;

        $i1 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos>;

        virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: void append(byte[],int,int)>($r4, $i1, $i0);

        $i0 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferlen>;

        $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int bufferpos> = $i0;

     label6:
        $i1 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        $i0 = $i1;

        if $i1 != -1 goto label4;

        $z0 = 0;

        goto label4;

     label7:
        if $i0 != -1 goto label8;

        $r3 = $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: org.apache.http.util.ByteArrayBuffer linebuffer>;

        $z0 = virtualinvoke $r3.<org.apache.http.util.ByteArrayBuffer: boolean isEmpty()>();

        if $z0 == 0 goto label8;

        return -1;

     label8:
        $i0 = specialinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int lineFromLineBuffer(org.apache.http.util.CharArrayBuffer)>($r1);

        return $i0;
    }

    public java.lang.String readLine() throws java.io.IOException
    {
        org.apache.http.impl.io.AbstractSessionInputBuffer $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0;
        java.lang.String $r2;

        $r0 := @this: org.apache.http.impl.io.AbstractSessionInputBuffer;

        $r1 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(64);

        $i0 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int readLine(org.apache.http.util.CharArrayBuffer)>($r1);

        if $i0 == -1 goto label1;

        $r2 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: java.lang.String toString()>();

        return $r2;

     label1:
        return null;
    }
}
