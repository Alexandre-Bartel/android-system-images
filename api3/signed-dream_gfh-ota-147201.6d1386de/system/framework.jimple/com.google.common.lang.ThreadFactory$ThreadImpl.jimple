class com.google.common.lang.ThreadFactory$ThreadImpl extends java.lang.Thread
{
    private java.lang.String name;
    private java.lang.Runnable runnable;
    final com.google.common.lang.ThreadFactory this$0;

    public void <init>(com.google.common.lang.ThreadFactory, java.lang.String, java.lang.Runnable)
    {
        com.google.common.lang.ThreadFactory$ThreadImpl $r0;
        com.google.common.lang.ThreadFactory $r1;
        java.lang.String $r2;
        java.lang.Runnable $r3;

        $r0 := @this: com.google.common.lang.ThreadFactory$ThreadImpl;

        $r1 := @parameter0: com.google.common.lang.ThreadFactory;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Runnable;

        $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: com.google.common.lang.ThreadFactory this$0> = $r1;

        specialinvoke $r0.<java.lang.Thread: void <init>()>();

        staticinvoke <com.google.common.lang.ThreadFactory: void access$000(com.google.common.lang.ThreadFactory)>($r1);

        $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: java.lang.String name> = $r2;

        $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: java.lang.Runnable runnable> = $r3;

        return;
    }

    public void run()
    {
        com.google.common.lang.ThreadFactory$ThreadImpl $r0;
        com.google.common.lang.ThreadFactory $r1;
        java.lang.Runnable $r2;
        java.lang.Throwable $r3, $r4;

        $r0 := @this: com.google.common.lang.ThreadFactory$ThreadImpl;

     label1:
        $r1 = $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: com.google.common.lang.ThreadFactory this$0>;

        staticinvoke <com.google.common.lang.ThreadFactory: void access$100(com.google.common.lang.ThreadFactory)>($r1);

        $r2 = $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: java.lang.Runnable runnable>;

        interfaceinvoke $r2.<java.lang.Runnable: void run()>();

     label2:
        $r1 = $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: com.google.common.lang.ThreadFactory this$0>;

        staticinvoke <com.google.common.lang.ThreadFactory: void access$200(com.google.common.lang.ThreadFactory)>($r1);

        return;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke $r3.<java.lang.Throwable: void printStackTrace()>();

     label5:
        $r1 = $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: com.google.common.lang.ThreadFactory this$0>;

        staticinvoke <com.google.common.lang.ThreadFactory: void access$200(com.google.common.lang.ThreadFactory)>($r1);

        return;

     label6:
        $r4 := @caughtexception;

        $r1 = $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: com.google.common.lang.ThreadFactory this$0>;

        staticinvoke <com.google.common.lang.ThreadFactory: void access$200(com.google.common.lang.ThreadFactory)>($r1);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public java.lang.String toString()
    {
        com.google.common.lang.ThreadFactory$ThreadImpl $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        int $i0;

        $r0 := @this: com.google.common.lang.ThreadFactory$ThreadImpl;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Thread[");

        $r2 = $r0.<com.google.common.lang.ThreadFactory$ThreadImpl: java.lang.String name>;

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $i0 = virtualinvoke $r0.<java.lang.Thread: int getPriority()>();

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
