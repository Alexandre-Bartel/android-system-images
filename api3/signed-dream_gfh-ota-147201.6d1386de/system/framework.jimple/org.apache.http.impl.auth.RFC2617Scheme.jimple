public abstract class org.apache.http.impl.auth.RFC2617Scheme extends org.apache.http.impl.auth.AuthSchemeBase
{
    private java.util.Map params;

    public void <init>()
    {
        org.apache.http.impl.auth.RFC2617Scheme $r0;

        $r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        specialinvoke $r0.<org.apache.http.impl.auth.AuthSchemeBase: void <init>()>();

        return;
    }

    public java.lang.String getParameter(java.lang.String)
    {
        java.lang.String $r0;
        org.apache.http.impl.auth.RFC2617Scheme $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Map $r3;
        java.util.Locale $r4;
        java.lang.Object $r5;

        $r1 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter name may not be null");

        throw $r2;

     label1:
        $r3 = $r1.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        if $r3 != null goto label2;

        return null;

     label2:
        $r3 = $r1.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        $r4 = <java.util.Locale: java.util.Locale ENGLISH>;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r0);

        $r0 = (java.lang.String) $r5;

        return $r0;
    }

    protected java.util.Map getParameters()
    {
        org.apache.http.impl.auth.RFC2617Scheme $r0;
        java.util.Map $r1;
        java.util.HashMap $r2;

        $r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        $r1 = $r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        if $r1 != null goto label1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params> = $r2;

     label1:
        $r1 = $r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        return $r1;
    }

    public java.lang.String getRealm()
    {
        org.apache.http.impl.auth.RFC2617Scheme $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        $r1 = virtualinvoke $r0.<org.apache.http.impl.auth.RFC2617Scheme: java.lang.String getParameter(java.lang.String)>("realm");

        return $r1;
    }

    protected void parseChallenge(org.apache.http.util.CharArrayBuffer, int, int) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.impl.auth.RFC2617Scheme $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        int $i0, $i1;
        org.apache.http.message.ParserCursor $r2;
        org.apache.http.HeaderElement $r3;
        org.apache.http.message.BasicHeaderValueParser $r4;
        org.apache.http.HeaderElement[] $r5;
        org.apache.http.auth.MalformedChallengeException $r6;
        java.util.HashMap $r7;
        java.util.Map $r8;
        java.lang.String $r9, $r10;

        $r0 := @this: org.apache.http.impl.auth.RFC2617Scheme;

        $r1 := @parameter0: org.apache.http.util.CharArrayBuffer;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r4 = <org.apache.http.message.BasicHeaderValueParser: org.apache.http.message.BasicHeaderValueParser DEFAULT>;

        $r2 = new org.apache.http.message.ParserCursor;

        $i1 = virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: int length()>();

        specialinvoke $r2.<org.apache.http.message.ParserCursor: void <init>(int,int)>($i0, $i1);

        $r5 = interfaceinvoke $r4.<org.apache.http.message.HeaderValueParser: org.apache.http.HeaderElement[] parseElements(org.apache.http.util.CharArrayBuffer,org.apache.http.message.ParserCursor)>($r1, $r2);

        $i0 = lengthof $r5;

        if $i0 != 0 goto label1;

        $r6 = new org.apache.http.auth.MalformedChallengeException;

        specialinvoke $r6.<org.apache.http.auth.MalformedChallengeException: void <init>(java.lang.String)>("Authentication challenge is empty");

        throw $r6;

     label1:
        $r7 = new java.util.HashMap;

        $i0 = lengthof $r5;

        specialinvoke $r7.<java.util.HashMap: void <init>(int)>($i0);

        $r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params> = $r7;

        $i0 = lengthof $r5;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r3 = $r5[$i1];

        $r8 = $r0.<org.apache.http.impl.auth.RFC2617Scheme: java.util.Map params>;

        $r9 = interfaceinvoke $r3.<org.apache.http.HeaderElement: java.lang.String getName()>();

        $r10 = interfaceinvoke $r3.<org.apache.http.HeaderElement: java.lang.String getValue()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return;
    }
}
