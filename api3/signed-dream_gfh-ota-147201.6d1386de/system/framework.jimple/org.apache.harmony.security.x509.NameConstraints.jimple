public class org.apache.harmony.security.x509.NameConstraints extends org.apache.harmony.security.x509.ExtensionValue
{
    public static final org.apache.harmony.security.asn1.ASN1Sequence ASN1;
    private byte[] encoding;
    private final org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees;
    private java.util.ArrayList[] excluded_names;
    private final org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees;
    private java.util.ArrayList[] permitted_names;

    static void <clinit>()
    {
        org.apache.harmony.security.x509.NameConstraints$1 $r0;
        org.apache.harmony.security.asn1.ASN1Type[] $r1;
        org.apache.harmony.security.asn1.ASN1Implicit $r2;
        org.apache.harmony.security.asn1.ASN1Type $r3;

        $r0 = new org.apache.harmony.security.x509.NameConstraints$1;

        $r1 = newarray (org.apache.harmony.security.asn1.ASN1Type)[2];

        $r2 = new org.apache.harmony.security.asn1.ASN1Implicit;

        $r3 = <org.apache.harmony.security.x509.GeneralSubtrees: org.apache.harmony.security.asn1.ASN1Type ASN1>;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Implicit: void <init>(int,org.apache.harmony.security.asn1.ASN1Type)>(0, $r3);

        $r1[0] = $r2;

        $r2 = new org.apache.harmony.security.asn1.ASN1Implicit;

        $r3 = <org.apache.harmony.security.x509.GeneralSubtrees: org.apache.harmony.security.asn1.ASN1Type ASN1>;

        specialinvoke $r2.<org.apache.harmony.security.asn1.ASN1Implicit: void <init>(int,org.apache.harmony.security.asn1.ASN1Type)>(1, $r3);

        $r1[1] = $r2;

        specialinvoke $r0.<org.apache.harmony.security.x509.NameConstraints$1: void <init>(org.apache.harmony.security.asn1.ASN1Type[])>($r1);

        <org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.asn1.ASN1Sequence ASN1> = $r0;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.security.x509.NameConstraints $r0;

        $r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        specialinvoke $r0.<org.apache.harmony.security.x509.NameConstraints: void <init>(org.apache.harmony.security.x509.GeneralSubtrees,org.apache.harmony.security.x509.GeneralSubtrees)>(null, null);

        return;
    }

    public void <init>(org.apache.harmony.security.x509.GeneralSubtrees, org.apache.harmony.security.x509.GeneralSubtrees)
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        org.apache.harmony.security.x509.GeneralSubtrees $r1, $r2;
        java.util.List $r3;
        int $i0;
        java.lang.IllegalArgumentException $r4;
        java.lang.String $r5;

        $r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r1 := @parameter0: org.apache.harmony.security.x509.GeneralSubtrees;

        $r2 := @parameter1: org.apache.harmony.security.x509.GeneralSubtrees;

        specialinvoke $r0.<org.apache.harmony.security.x509.ExtensionValue: void <init>()>();

        if $r1 == null goto label2;

        $r3 = virtualinvoke $r1.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        if $r3 == null goto label1;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.17D");

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        if $r2 == null goto label4;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        if $r3 == null goto label3;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label4;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = staticinvoke <org.apache.harmony.security.internal.nls.Messages: java.lang.String getString(java.lang.String)>("security.17E");

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label4:
        $r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees> = $r1;

        $r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees> = $r2;

        return;
    }

    private void <init>(org.apache.harmony.security.x509.GeneralSubtrees, org.apache.harmony.security.x509.GeneralSubtrees, byte[])
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        org.apache.harmony.security.x509.GeneralSubtrees $r1, $r2;
        byte[] $r3;

        $r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r1 := @parameter0: org.apache.harmony.security.x509.GeneralSubtrees;

        $r2 := @parameter1: org.apache.harmony.security.x509.GeneralSubtrees;

        $r3 := @parameter2: byte[];

        specialinvoke $r0.<org.apache.harmony.security.x509.NameConstraints: void <init>(org.apache.harmony.security.x509.GeneralSubtrees,org.apache.harmony.security.x509.GeneralSubtrees)>($r1, $r2);

        $r0.<org.apache.harmony.security.x509.NameConstraints: byte[] encoding> = $r3;

        return;
    }

    void <init>(org.apache.harmony.security.x509.GeneralSubtrees, org.apache.harmony.security.x509.GeneralSubtrees, byte[], org.apache.harmony.security.x509.NameConstraints$1)
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        org.apache.harmony.security.x509.GeneralSubtrees $r1, $r2;
        byte[] $r3;
        org.apache.harmony.security.x509.NameConstraints$1 $r4;

        $r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r1 := @parameter0: org.apache.harmony.security.x509.GeneralSubtrees;

        $r2 := @parameter1: org.apache.harmony.security.x509.GeneralSubtrees;

        $r3 := @parameter2: byte[];

        $r4 := @parameter3: org.apache.harmony.security.x509.NameConstraints$1;

        specialinvoke $r0.<org.apache.harmony.security.x509.NameConstraints: void <init>(org.apache.harmony.security.x509.GeneralSubtrees,org.apache.harmony.security.x509.GeneralSubtrees,byte[])>($r1, $r2, $r3);

        return;
    }

    static org.apache.harmony.security.x509.GeneralSubtrees access$100(org.apache.harmony.security.x509.NameConstraints)
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        org.apache.harmony.security.x509.GeneralSubtrees r1;

        $r0 := @parameter0: org.apache.harmony.security.x509.NameConstraints;

        r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        return r1;
    }

    static org.apache.harmony.security.x509.GeneralSubtrees access$200(org.apache.harmony.security.x509.NameConstraints)
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        org.apache.harmony.security.x509.GeneralSubtrees r1;

        $r0 := @parameter0: org.apache.harmony.security.x509.NameConstraints;

        r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        return r1;
    }

    public static org.apache.harmony.security.x509.NameConstraints decode(byte[]) throws java.io.IOException
    {
        org.apache.harmony.security.asn1.ASN1Sequence $r0;
        java.lang.Object $r1;
        byte[] $r2;
        org.apache.harmony.security.x509.NameConstraints $r3;

        $r2 := @parameter0: byte[];

        $r0 = <org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r1 = virtualinvoke $r0.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>($r2);

        $r3 = (org.apache.harmony.security.x509.NameConstraints) $r1;

        return $r3;
    }

    private byte[] getExtensionValue(java.security.cert.X509Certificate, java.lang.String)
    {
        java.security.cert.X509Certificate $r0;
        java.lang.String $r1;
        org.apache.harmony.security.x509.NameConstraints $r2;
        byte[] $r3;
        org.apache.harmony.security.asn1.ASN1OctetString $r4;
        java.lang.Object $r5;
        java.io.IOException $r6;

        $r2 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r0 := @parameter0: java.security.cert.X509Certificate;

        $r1 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke $r0.<java.security.cert.X509Certificate: byte[] getExtensionValue(java.lang.String)>($r1);

        if $r3 != null goto label3;

     label2:
        return null;

     label3:
        $r4 = staticinvoke <org.apache.harmony.security.asn1.ASN1OctetString: org.apache.harmony.security.asn1.ASN1OctetString getInstance()>();

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>($r3);

     label4:
        $r3 = (byte[]) $r5;

        $r3 = (byte[]) $r3;

        return $r3;

     label5:
        $r6 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private void prepareNames()
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        java.util.ArrayList[] $r1;
        org.apache.harmony.security.x509.GeneralSubtrees $r2;
        java.util.List $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5;
        org.apache.harmony.security.x509.GeneralSubtree $r6;
        org.apache.harmony.security.x509.GeneralName $r7;
        int $i0;
        java.util.ArrayList $r8;

        $r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r1 = newarray (java.util.ArrayList)[9];

        $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names> = $r1;

        $r2 = $r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        if $r2 == null goto label3;

        $r2 = $r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.harmony.security.x509.GeneralSubtree) $r5;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.GeneralSubtree: org.apache.harmony.security.x509.GeneralName getBase()>();

        $i0 = virtualinvoke $r7.<org.apache.harmony.security.x509.GeneralName: int getTag()>();

        $r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r8 = $r1[$i0];

        if $r8 != null goto label2;

        $r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r1[$i0] = $r8;

     label2:
        $r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r8 = $r1[$i0];

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label1;

     label3:
        $r1 = newarray (java.util.ArrayList)[9];

        $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names> = $r1;

        $r2 = $r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        if $r2 == null goto label6;

        $r2 = $r0.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.harmony.security.x509.GeneralSubtree) $r5;

        $r7 = virtualinvoke $r6.<org.apache.harmony.security.x509.GeneralSubtree: org.apache.harmony.security.x509.GeneralName getBase()>();

        $i0 = virtualinvoke $r7.<org.apache.harmony.security.x509.GeneralName: int getTag()>();

        $r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r8 = $r1[$i0];

        if $r8 != null goto label5;

        $r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r1[$i0] = $r8;

     label5:
        $r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r8 = $r1[$i0];

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label4;

     label6:
        return;

     label7:
        return;
    }

    public void dumpValue(java.lang.StringBuffer, java.lang.String)
    {
        java.lang.StringBuffer $r0, $r3;
        java.lang.String $r1, $r10;
        org.apache.harmony.security.x509.NameConstraints $r2;
        org.apache.harmony.security.x509.GeneralSubtrees $r4;
        java.util.List $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        org.apache.harmony.security.x509.GeneralSubtree $r8;
        java.lang.StringBuilder $r9;

        $r2 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r0 := @parameter0: java.lang.StringBuffer;

        $r1 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name Constraints: [\n");

        $r4 = $r2.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        if $r4 == null goto label3;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Permitted: [\n");

        $r4 = $r2.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees permittedSubtrees>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.harmony.security.x509.GeneralSubtree) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.harmony.security.x509.GeneralSubtree: void dumpValue(java.lang.StringBuffer,java.lang.String)>($r0, $r10);

        goto label1;

     label2:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ]\n");

     label3:
        $r4 = $r2.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        if $r4 == null goto label6;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Excluded: [\n");

        $r4 = $r2.<org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.x509.GeneralSubtrees excludedSubtrees>;

        $r5 = virtualinvoke $r4.<org.apache.harmony.security.x509.GeneralSubtrees: java.util.List getSubtrees()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.apache.harmony.security.x509.GeneralSubtree) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<org.apache.harmony.security.x509.GeneralSubtree: void dumpValue(java.lang.StringBuffer,java.lang.String)>($r0, $r10);

        goto label4;

     label5:
        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ]\n");

     label6:
        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        $r0 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]\n");

        return;
    }

    public byte[] getEncoded()
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        byte[] $r1;
        org.apache.harmony.security.asn1.ASN1Sequence $r2;

        $r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: byte[] encoding>;

        if $r1 != null goto label1;

        $r2 = <org.apache.harmony.security.x509.NameConstraints: org.apache.harmony.security.asn1.ASN1Sequence ASN1>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.security.asn1.ASN1Type: byte[] encode(java.lang.Object)>($r0);

        $r0.<org.apache.harmony.security.x509.NameConstraints: byte[] encoding> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.security.x509.NameConstraints: byte[] encoding>;

        return $r1;
    }

    public boolean isAcceptable(java.security.cert.X509Certificate)
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        java.security.cert.X509Certificate $r1;
        java.util.ArrayList[] $r2;
        byte[] $r3;
        java.util.ArrayList $r4;
        java.util.List $r5;
        org.apache.harmony.security.x509.GeneralName $r6;
        javax.security.auth.x500.X500Principal $r7;
        java.lang.String $r8;
        boolean $z0;
        org.apache.harmony.security.asn1.ASN1Type $r9;
        java.lang.Object $r10;
        org.apache.harmony.security.x509.GeneralNames $r11;
        java.io.IOException $r12, $r13;

        $r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r1 := @parameter0: java.security.cert.X509Certificate;

        $r2 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        if $r2 != null goto label01;

        specialinvoke $r0.<org.apache.harmony.security.x509.NameConstraints: void prepareNames()>();

     label01:
        $r3 = specialinvoke $r0.<org.apache.harmony.security.x509.NameConstraints: byte[] getExtensionValue(java.security.cert.X509Certificate,java.lang.String)>($r1, "2.5.29.17");

        if $r3 != null goto label08;

        $r4 = new java.util.ArrayList;

     label02:
        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(1);

     label03:
        $r5 = $r4;

     label04:
        $r2 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r4 = $r2[4];

        if $r4 != null goto label05;

        $r2 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r4 = $r2[4];

        if $r4 == null goto label07;

     label05:
        $r6 = new org.apache.harmony.security.x509.GeneralName;

     label06:
        $r7 = virtualinvoke $r1.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        $r8 = virtualinvoke $r7.<javax.security.auth.x500.X500Principal: java.lang.String getName()>();

        specialinvoke $r6.<org.apache.harmony.security.x509.GeneralName: void <init>(int,java.lang.String)>(4, $r8);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r6);

     label07:
        $z0 = virtualinvoke $r0.<org.apache.harmony.security.x509.NameConstraints: boolean isAcceptable(java.util.List)>($r5);

        return $z0;

     label08:
        $r9 = <org.apache.harmony.security.x509.GeneralNames: org.apache.harmony.security.asn1.ASN1Type ASN1>;

     label09:
        $r10 = virtualinvoke $r9.<org.apache.harmony.security.asn1.ASN1Type: java.lang.Object decode(byte[])>($r3);

        $r11 = (org.apache.harmony.security.x509.GeneralNames) $r10;

        $r5 = virtualinvoke $r11.<org.apache.harmony.security.x509.GeneralNames: java.util.List getNames()>();

     label10:
        goto label04;

     label11:
        $r12 := @caughtexception;

        virtualinvoke $r12.<java.lang.Throwable: void printStackTrace()>();

        return 0;

     label12:
        $r13 := @caughtexception;

        goto label07;

        catch java.io.IOException from label02 to label03 with label11;
        catch java.io.IOException from label06 to label07 with label12;
        catch java.io.IOException from label09 to label10 with label11;
    }

    public boolean isAcceptable(java.util.List)
    {
        org.apache.harmony.security.x509.NameConstraints $r0;
        java.util.List $r1;
        boolean[] $r2, $r3;
        java.util.ArrayList[] $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.harmony.security.x509.GeneralName $r7, $r9;
        int $i0, $i1, $i2;
        java.util.ArrayList $r8;

        $r0 := @this: org.apache.harmony.security.x509.NameConstraints;

        $r1 := @parameter0: java.util.List;

        $r4 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        if $r4 != null goto label01;

        specialinvoke $r0.<org.apache.harmony.security.x509.NameConstraints: void prepareNames()>();

     label01:
        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        $r3 = newarray (boolean)[9];

        $r2 = newarray (boolean)[9];

     label02:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label08;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.harmony.security.x509.GeneralName) $r6;

        $i0 = virtualinvoke $r7.<org.apache.harmony.security.x509.GeneralName: int getTag()>();

        $r4 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r8 = $r4[$i0];

        if $r8 == null goto label05;

        $i1 = 0;

     label03:
        $r4 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r8 = $r4[$i0];

        $i2 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i1 >= $i2 goto label05;

        $r4 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] excluded_names>;

        $r8 = $r4[$i0];

        $r6 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r9 = (org.apache.harmony.security.x509.GeneralName) $r6;

        $z0 = virtualinvoke $r9.<org.apache.harmony.security.x509.GeneralName: boolean isAcceptable(org.apache.harmony.security.x509.GeneralName)>($r7);

        if $z0 == 0 goto label04;

        return 0;

     label04:
        $i1 = $i1 + 1;

        goto label03;

     label05:
        $r4 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r8 = $r4[$i0];

        if $r8 == null goto label02;

        $z0 = $r2[$i0];

        if $z0 != 0 goto label02;

        $r3[$i0] = 1;

        $i1 = 0;

     label06:
        $r4 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r8 = $r4[$i0];

        $i2 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i1 >= $i2 goto label02;

        $r4 = $r0.<org.apache.harmony.security.x509.NameConstraints: java.util.ArrayList[] permitted_names>;

        $r8 = $r4[$i0];

        $r6 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r9 = (org.apache.harmony.security.x509.GeneralName) $r6;

        $z0 = virtualinvoke $r9.<org.apache.harmony.security.x509.GeneralName: boolean isAcceptable(org.apache.harmony.security.x509.GeneralName)>($r7);

        if $z0 == 0 goto label07;

        $r2[$i0] = 1;

     label07:
        $i1 = $i1 + 1;

        goto label06;

     label08:
        $i0 = 0;

     label09:
        if $i0 >= 9 goto label11;

        $z0 = $r3[$i0];

        if $z0 == 0 goto label10;

        $z0 = $r2[$i0];

        if $z0 != 0 goto label10;

        return 0;

     label10:
        $i0 = $i0 + 1;

        goto label09;

     label11:
        return 1;
    }
}
