public final class org.apache.harmony.nio.internal.IOUtil extends java.lang.Object
{
    private static final int DEFAULT_BUFFER_SIZE;

    private void <init>()
    {
        org.apache.harmony.nio.internal.IOUtil $r0;

        $r0 := @this: org.apache.harmony.nio.internal.IOUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void convert(java.lang.Object, java.nio.charset.CharsetEncoder, java.nio.ByteBuffer, java.nio.CharBuffer, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.Object $r0;
        java.nio.charset.CharsetEncoder $r1;
        java.nio.ByteBuffer $r2;
        java.nio.CharBuffer $r3;
        java.io.OutputStream $r4;
        java.io.IOException $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        java.nio.charset.CoderResult $r8;
        boolean $z0;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.nio.charset.CharsetEncoder;

        $r2 := @parameter2: java.nio.ByteBuffer;

        $r3 := @parameter3: java.nio.CharBuffer;

        $r4 := @parameter4: java.io.OutputStream;

        entermonitor $r0;

        if $r1 != null goto label4;

     label1:
        $r5 = new java.io.IOException;

        $r6 = staticinvoke <org.apache.harmony.nio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("nio.07");

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        $r7 := @caughtexception;

        exitmonitor $r0;

     label3:
        throw $r7;

     label4:
        $r8 = virtualinvoke $r1.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r3, $r2, 1);

     label5:
        $z0 = virtualinvoke $r8.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 == 0 goto label6;

        $r5 = new java.io.IOException;

        $r6 = virtualinvoke $r8.<java.nio.charset.CoderResult: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label6:
        $z0 = virtualinvoke $r8.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z0 == 0 goto label7;

        staticinvoke <org.apache.harmony.nio.internal.IOUtil: void flushOutputStreamWriter(java.io.OutputStream,java.nio.ByteBuffer,java.nio.charset.CharsetEncoder,java.lang.Object)>($r4, $r2, $r1, $r0);

        $r8 = virtualinvoke $r1.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r3, $r2, 1);

        goto label5;

     label7:
        exitmonitor $r0;

     label8:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label8 with label2;
    }

    private static void fillBuf(java.io.InputStream, java.nio.ByteBuffer, java.nio.CharBuffer, java.nio.charset.CharsetDecoder) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.nio.ByteBuffer $r1;
        java.nio.CharBuffer $r2;
        java.nio.charset.CharsetDecoder $r3;
        byte[] $r4;
        int $i0;
        java.io.IOException $r5;
        boolean $z0;
        java.nio.charset.CoderResult $r6;
        java.lang.String $r7;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.nio.ByteBuffer;

        $r2 := @parameter2: java.nio.CharBuffer;

        $r3 := @parameter3: java.nio.charset.CharsetDecoder;

        virtualinvoke $r2.<java.nio.Buffer: java.nio.Buffer clear()>();

     label1:
        $r4 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read(byte[])>($r4);

     label2:
        if $i0 != -1 goto label4;

        virtualinvoke $r2.<java.nio.Buffer: java.nio.Buffer limit(int)>(0);

        return;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r2.<java.nio.Buffer: java.nio.Buffer limit(int)>(0);

        throw $r5;

     label4:
        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer limit(int)>($i0);

        if $i0 >= 8192 goto label6;

        $z0 = 1;

     label5:
        $r6 = virtualinvoke $r3.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>($r1, $r2, $z0);

        $z0 = virtualinvoke $r6.<java.nio.charset.CoderResult: boolean isError()>();

        if $z0 == 0 goto label7;

        $r5 = new java.io.IOException;

        $r7 = virtualinvoke $r6.<java.nio.charset.CoderResult: java.lang.String toString()>();

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r5;

     label6:
        $z0 = 0;

        goto label5;

     label7:
        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer clear()>();

        virtualinvoke $r2.<java.nio.Buffer: java.nio.Buffer flip()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static void flushOutputStreamWriter(java.io.OutputStream, java.nio.ByteBuffer, java.nio.charset.CharsetEncoder, java.lang.Object) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        java.nio.ByteBuffer $r1;
        java.nio.charset.CharsetEncoder $r2;
        java.lang.Object $r3;
        java.io.IOException $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        int $i0;
        byte[] $r7;

        $r0 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: java.nio.ByteBuffer;

        $r2 := @parameter2: java.nio.charset.CharsetEncoder;

        $r3 := @parameter3: java.lang.Object;

        entermonitor $r3;

        if $r2 != null goto label4;

     label1:
        $r4 = new java.io.IOException;

        $r5 = staticinvoke <org.apache.harmony.nio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("nio.07");

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label3:
        throw $r6;

     label4:
        $i0 = virtualinvoke $r1.<java.nio.Buffer: int position()>();

        if $i0 <= 0 goto label5;

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer flip()>();

        $r7 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        virtualinvoke $r0.<java.io.OutputStream: void write(byte[],int,int)>($r7, 0, $i0);

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer clear()>();

     label5:
        virtualinvoke $r0.<java.io.OutputStream: void flush()>();

        exitmonitor $r3;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label6 with label2;
    }

    public static int readInputStreamReader(java.io.InputStream, java.nio.ByteBuffer, java.nio.CharBuffer, java.nio.charset.CharsetDecoder, java.lang.Object) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.nio.ByteBuffer $r1;
        java.nio.CharBuffer $r2;
        java.nio.charset.CharsetDecoder $r3;
        java.lang.Object $r4;
        int $i0, $i1;
        char $c2;
        java.lang.Throwable $r5;
        java.io.IOException $r6;
        java.lang.String $r7;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.nio.ByteBuffer;

        $r2 := @parameter2: java.nio.CharBuffer;

        $r3 := @parameter3: java.nio.charset.CharsetDecoder;

        $r4 := @parameter4: java.lang.Object;

        entermonitor $r4;

        if $r0 == null goto label8;

     label1:
        $i0 = virtualinvoke $r2.<java.nio.Buffer: int limit()>();

        $i1 = virtualinvoke $r2.<java.nio.Buffer: int position()>();

        if $i0 != $i1 goto label2;

        staticinvoke <org.apache.harmony.nio.internal.IOUtil: void fillBuf(java.io.InputStream,java.nio.ByteBuffer,java.nio.CharBuffer,java.nio.charset.CharsetDecoder)>($r0, $r1, $r2, $r3);

     label2:
        $i0 = virtualinvoke $r2.<java.nio.Buffer: int limit()>();

        if $i0 != 0 goto label4;

        exitmonitor $r4;

     label3:
        return -1;

     label4:
        $c2 = virtualinvoke $r2.<java.nio.CharBuffer: char get()>();

        exitmonitor $r4;

     label5:
        return $c2;

     label6:
        $r5 := @caughtexception;

        exitmonitor $r4;

     label7:
        throw $r5;

     label8:
        $r6 = new java.io.IOException;

        $r7 = staticinvoke <org.apache.harmony.nio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("nio.06");

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label9:
        nop;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
        catch java.lang.Throwable from label8 to label9 with label6;
    }

    public static int readInputStreamReader(char[], int, int, java.io.InputStream, java.nio.ByteBuffer, java.nio.CharBuffer, java.nio.charset.CharsetDecoder, java.lang.Object) throws java.io.IOException
    {
        char[] $r0, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.io.InputStream $r1;
        java.nio.ByteBuffer $r2;
        java.nio.CharBuffer $r3;
        java.nio.charset.CharsetDecoder $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r7;
        java.io.IOException $r8;
        java.lang.String $r9;

        $r0 := @parameter0: char[];

        $i1 := @parameter1: int;

        $i0 := @parameter2: int;

        $r1 := @parameter3: java.io.InputStream;

        $r2 := @parameter4: java.nio.ByteBuffer;

        $r3 := @parameter5: java.nio.CharBuffer;

        $r4 := @parameter6: java.nio.charset.CharsetDecoder;

        $r5 := @parameter7: java.lang.Object;

        entermonitor $r5;

        if $r1 == null goto label17;

        if $i0 != 0 goto label03;

     label01:
        exitmonitor $r5;

     label02:
        return 0;

     label03:
        staticinvoke <org.apache.harmony.nio.Util: void assertArrayIndex(char[],int,int)>($r0, $i1, $i0);

        $i2 = virtualinvoke $r3.<java.nio.Buffer: int limit()>();

        $i3 = virtualinvoke $r3.<java.nio.Buffer: int position()>();

        if $i2 != $i3 goto label04;

        staticinvoke <org.apache.harmony.nio.internal.IOUtil: void fillBuf(java.io.InputStream,java.nio.ByteBuffer,java.nio.CharBuffer,java.nio.charset.CharsetDecoder)>($r1, $r2, $r3, $r4);

     label04:
        $i2 = virtualinvoke $r3.<java.nio.Buffer: int position()>();

        $i3 = $i2;

        $i4 = virtualinvoke $r3.<java.nio.Buffer: int limit()>();

        $i4 = $i4 - $i2;

        $i2 = $i0;

     label05:
        if $i4 >= $i2 goto label15;

        $r6 = virtualinvoke $r3.<java.nio.CharBuffer: char[] array()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i3, $r0, $i1, $i4);

        $i3 = $i3 + $i4;

        virtualinvoke $r3.<java.nio.Buffer: java.nio.Buffer position(int)>($i3);

        $i2 = $i2 - $i4;

        $i1 = $i1 + $i4;

        $i3 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        if $i3 > 0 goto label11;

        if $i2 != $i0 goto label10;

        $i1 = -1;

     label06:
        exitmonitor $r5;

     label07:
        return $i1;

     label08:
        $r7 := @caughtexception;

        exitmonitor $r5;

     label09:
        throw $r7;

     label10:
        $i1 = $i0 - $i2;

        goto label06;

     label11:
        staticinvoke <org.apache.harmony.nio.internal.IOUtil: void fillBuf(java.io.InputStream,java.nio.ByteBuffer,java.nio.CharBuffer,java.nio.charset.CharsetDecoder)>($r1, $r2, $r3, $r4);

        $i3 = virtualinvoke $r3.<java.nio.Buffer: int position()>();

        $i5 = virtualinvoke $r3.<java.nio.Buffer: int limit()>();

        $i4 = $i5;

        if $i5 != 0 goto label05;

        if $i2 != $i0 goto label14;

        $i1 = -1;

     label12:
        exitmonitor $r5;

     label13:
        return $i1;

     label14:
        $i1 = $i0 - $i2;

        goto label12;

     label15:
        $r6 = virtualinvoke $r3.<java.nio.CharBuffer: char[] array()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, $i3, $r0, $i1, $i2);

        $i1 = virtualinvoke $r3.<java.nio.Buffer: int position()>();

        $i1 = $i1 + $i2;

        virtualinvoke $r3.<java.nio.Buffer: java.nio.Buffer position(int)>($i1);

        exitmonitor $r5;

     label16:
        return $i0;

     label17:
        $r8 = new java.io.IOException;

        $r9 = staticinvoke <org.apache.harmony.nio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("nio.06");

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label18:
        nop;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label11 to label13 with label08;
        catch java.lang.Throwable from label14 to label16 with label08;
        catch java.lang.Throwable from label17 to label18 with label08;
    }

    public static void writeOutputStreamWriter(int, java.io.OutputStream, java.nio.ByteBuffer, java.nio.charset.CharsetEncoder, java.lang.Object) throws java.io.IOException
    {
        int $i0;
        java.io.OutputStream $r0;
        java.nio.ByteBuffer $r1;
        java.nio.charset.CharsetEncoder $r2;
        java.lang.Object $r3;
        char $c1;
        java.io.IOException $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        char[] $r7;
        java.nio.CharBuffer $r8;

        $i0 := @parameter0: int;

        $r0 := @parameter1: java.io.OutputStream;

        $r1 := @parameter2: java.nio.ByteBuffer;

        $r2 := @parameter3: java.nio.charset.CharsetEncoder;

        $r3 := @parameter4: java.lang.Object;

        entermonitor $r3;

        if $r2 != null goto label4;

     label1:
        $r4 = new java.io.IOException;

        $r5 = staticinvoke <org.apache.harmony.nio.internal.nls.Messages: java.lang.String getString(java.lang.String)>("nio.07");

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label3:
        throw $r6;

     label4:
        $r7 = newarray (char)[1];

        $c1 = (char) $i0;

        $r7[0] = $c1;

        $r8 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>($r7);

        staticinvoke <org.apache.harmony.nio.internal.IOUtil: void convert(java.lang.Object,java.nio.charset.CharsetEncoder,java.nio.ByteBuffer,java.nio.CharBuffer,java.io.OutputStream)>($r3, $r2, $r1, $r8, $r0);

        exitmonitor $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    public static void writeOutputStreamWriter(java.lang.String, int, int, java.io.OutputStream, java.nio.ByteBuffer, java.nio.charset.CharsetEncoder, java.lang.Object) throws java.io.IOException
    {
        java.lang.String $r0;
        int $i0, $i1, $i2;
        java.io.OutputStream $r1;
        java.nio.ByteBuffer $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.lang.Object $r4;
        java.nio.CharBuffer $r5;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: java.io.OutputStream;

        $r2 := @parameter4: java.nio.ByteBuffer;

        $r3 := @parameter5: java.nio.charset.CharsetEncoder;

        $r4 := @parameter6: java.lang.Object;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        staticinvoke <org.apache.harmony.nio.Util: void assertArrayIndex(int,int,int)>($i2, $i0, $i1);

        $i1 = $i1 + $i0;

        $r5 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence,int,int)>($r0, $i0, $i1);

        staticinvoke <org.apache.harmony.nio.internal.IOUtil: void convert(java.lang.Object,java.nio.charset.CharsetEncoder,java.nio.ByteBuffer,java.nio.CharBuffer,java.io.OutputStream)>($r4, $r3, $r2, $r5, $r1);

        return;
    }

    public static void writeOutputStreamWriter(char[], int, int, java.io.OutputStream, java.nio.ByteBuffer, java.nio.charset.CharsetEncoder, java.lang.Object) throws java.io.IOException
    {
        char[] $r0;
        int $i0, $i1;
        java.io.OutputStream $r1;
        java.nio.ByteBuffer $r2;
        java.nio.charset.CharsetEncoder $r3;
        java.lang.Object $r4;
        java.nio.CharBuffer $r5;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: java.io.OutputStream;

        $r2 := @parameter4: java.nio.ByteBuffer;

        $r3 := @parameter5: java.nio.charset.CharsetEncoder;

        $r4 := @parameter6: java.lang.Object;

        staticinvoke <org.apache.harmony.nio.Util: void assertArrayIndex(char[],int,int)>($r0, $i0, $i1);

        $r5 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>($r0, $i0, $i1);

        staticinvoke <org.apache.harmony.nio.internal.IOUtil: void convert(java.lang.Object,java.nio.charset.CharsetEncoder,java.nio.ByteBuffer,java.nio.CharBuffer,java.io.OutputStream)>($r4, $r3, $r2, $r5, $r1);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.harmony.nio.internal.IOUtil: int DEFAULT_BUFFER_SIZE> = 8192;

        return;
    }
}
