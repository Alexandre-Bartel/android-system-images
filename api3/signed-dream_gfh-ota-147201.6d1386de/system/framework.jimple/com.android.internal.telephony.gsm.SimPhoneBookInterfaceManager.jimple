public class com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager extends com.android.internal.telephony.gsm.ISimPhoneBook$Stub
{
    private static final boolean ALLOW_SIM_OP_IN_UI_THREAD;
    static final boolean DBG;
    private static final int EVENT_GET_SIZE_DONE;
    private static final int EVENT_LOAD_DONE;
    private static final int EVENT_UPDATE_DONE;
    static final java.lang.String LOG_TAG;
    private com.android.internal.telephony.gsm.AdnRecordCache adnCache;
    android.os.Handler mHandler;
    private final java.lang.Object mLock;
    private com.android.internal.telephony.gsm.GSMPhone phone;
    private int[] recordSize;
    private java.util.List records;
    private boolean success;

    public void <init>(com.android.internal.telephony.gsm.GSMPhone)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        com.android.internal.telephony.gsm.GSMPhone $r1;
        com.android.internal.telephony.gsm.AdnRecordCache $r2;
        java.lang.Object $r3;
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager$1 $r4;
        com.android.internal.telephony.gsm.SIMRecords $r5;

        $r0 := @this: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $r1 := @parameter0: com.android.internal.telephony.gsm.GSMPhone;

        specialinvoke $r0.<com.android.internal.telephony.gsm.ISimPhoneBook$Stub: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock> = $r3;

        $r4 = new com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager$1;

        specialinvoke $r4.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager$1: void <init>(com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager)>($r0);

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: android.os.Handler mHandler> = $r4;

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.GSMPhone phone> = $r1;

        $r5 = $r1.<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.gsm.SIMRecords mSIMRecords>;

        $r2 = virtualinvoke $r5.<com.android.internal.telephony.gsm.SIMRecords: com.android.internal.telephony.gsm.AdnRecordCache getAdnCache()>();

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.AdnRecordCache adnCache> = $r2;

        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void publish()>();

        return;
    }

    static java.lang.Object access$000(com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        java.lang.Object r1;

        $r0 := @parameter0: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        r1 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

        return r1;
    }

    static int[] access$100(com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        int[] r1;

        $r0 := @parameter0: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        r1 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] recordSize>;

        return r1;
    }

    static int[] access$102(com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager, int[])
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        int[] $r1;

        $r0 := @parameter0: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $r1 := @parameter1: int[];

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] recordSize> = $r1;

        return $r1;
    }

    static void access$200(com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager, java.lang.String)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        java.lang.String $r1;

        $r0 := @parameter0: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void log(java.lang.String)>($r1);

        return;
    }

    static boolean access$302(com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager, boolean)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $z0 := @parameter1: boolean;

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean success> = $z0;

        return $z0;
    }

    static java.util.List access$400(com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        java.util.List r1;

        $r0 := @parameter0: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        r1 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List records>;

        return r1;
    }

    static java.util.List access$402(com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager, java.util.List)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        java.util.List $r1;

        $r0 := @parameter0: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $r1 := @parameter1: java.util.List;

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List records> = $r1;

        return $r1;
    }

    private void checkThread()
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        android.os.Handler $r1;
        android.os.Looper $r2, $r3;
        boolean $z0;
        java.lang.IllegalStateException $r4;

        $r0 := @this: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $r1 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Looper getLooper()>();

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("GSM", "query() called on the main UI thread!");

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You cannot call query on this provder from the main UI thread.");

        throw $r4;

     label1:
        return;
    }

    private void log(java.lang.String)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        java.lang.String $r1;
        java.lang.StringBuilder $r2;

        $r0 := @this: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[SpbInterfaceManager] ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("GSM", $r1);

        return;
    }

    private void publish()
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;

        $r0 := @this: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        staticinvoke <android.os.ServiceManager: void addService(java.lang.String,android.os.IBinder)>("simphonebook", $r0);

        return;
    }

    public java.util.List getAdnRecordsInEf(int)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        int $i0, $i1;
        com.android.internal.telephony.gsm.GSMPhone $r1;
        android.content.Context $r2;
        java.lang.SecurityException $r3;
        java.lang.Object $r4, $r8;
        android.os.Handler $r5;
        android.os.Message $r6;
        com.android.internal.telephony.gsm.AdnRecordCache $r7;
        java.lang.InterruptedException $r9;
        java.lang.Throwable $r10;
        java.util.List r11;

        $r0 := @this: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.GSMPhone phone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $i1 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.READ_CONTACTS");

        if $i1 == 0 goto label01;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires android.permission.READ_CONTACTS permission");

        throw $r3;

     label01:
        $r4 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

        entermonitor $r4;

     label02:
        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void checkThread()>();

        $r5 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: android.os.Handler mHandler>;

        $r6 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        $r7 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.AdnRecordCache adnCache>;

        virtualinvoke $r7.<com.android.internal.telephony.gsm.AdnRecordCache: void requestLoadAllAdnLike(int,android.os.Message)>($i0, $r6);

     label03:
        $r8 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

     label04:
        virtualinvoke $r8.<java.lang.Object: void wait()>();

     label05:
        exitmonitor $r4;

     label06:
        r11 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.util.List records>;

        return r11;

     label07:
        $r9 := @caughtexception;

     label08:
        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void log(java.lang.String)>("interrupted while trying to load from the SIM");

        goto label05;

     label09:
        $r10 := @caughtexception;

        exitmonitor $r4;

     label10:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.InterruptedException from label04 to label05 with label07;
        catch java.lang.Throwable from label03 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public int[] getAdnRecordsSize(int)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        int $i0;
        android.os.Message $r1;
        java.lang.Object $r2, $r7;
        int[] $r3;
        android.os.Handler $r4;
        com.android.internal.telephony.gsm.GSMPhone $r5;
        com.android.internal.telephony.gsm.SIMFileHandler $r6;
        java.lang.InterruptedException $r8;
        java.lang.Throwable $r9;

        $r0 := @this: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $i0 := @parameter0: int;

        $r2 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

        entermonitor $r2;

     label1:
        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void checkThread()>();

        $r3 = newarray (int)[3];

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] recordSize> = $r3;

        $r4 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: android.os.Handler mHandler>;

        $r1 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        $r5 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.GSMPhone phone>;

        $r6 = $r5.<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.gsm.SIMFileHandler mSIMFileHandler>;

        virtualinvoke $r6.<com.android.internal.telephony.gsm.SIMFileHandler: void getEFLinearRecordSize(int,android.os.Message)>($i0, $r1);

     label2:
        $r7 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

     label3:
        virtualinvoke $r7.<java.lang.Object: void wait()>();

     label4:
        exitmonitor $r2;

     label5:
        $r3 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int[] recordSize>;

        return $r3;

     label6:
        $r8 := @caughtexception;

     label7:
        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void log(java.lang.String)>("interrupted while trying to load from the SIM");

        goto label4;

     label8:
        $r9 := @caughtexception;

        exitmonitor $r2;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.InterruptedException from label3 to label4 with label6;
        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label7 to label9 with label8;
    }

    public boolean updateAdnRecordsInEfByIndex(int, java.lang.String, java.lang.String, int, java.lang.String)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        int $i0, $i1, $i2;
        java.lang.String $r1, $r2, $r3;
        com.android.internal.telephony.gsm.AdnRecord $r4;
        java.lang.Object $r5, $r12;
        com.android.internal.telephony.gsm.GSMPhone $r6;
        android.content.Context $r7;
        java.lang.SecurityException $r8;
        android.os.Handler $r9;
        android.os.Message $r10;
        com.android.internal.telephony.gsm.AdnRecordCache $r11;
        java.lang.InterruptedException $r13;
        java.lang.Throwable $r14;
        boolean z0;

        $r0 := @this: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r3 := @parameter4: java.lang.String;

        $r6 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.GSMPhone phone>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $i2 = virtualinvoke $r7.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_CONTACTS");

        if $i2 == 0 goto label01;

        $r8 = new java.lang.SecurityException;

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires android.permission.WRITE_CONTACTS permission");

        throw $r8;

     label01:
        $r5 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

        entermonitor $r5;

     label02:
        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void checkThread()>();

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean success> = 0;

        $r9 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: android.os.Handler mHandler>;

        $r10 = virtualinvoke $r9.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        $r4 = new com.android.internal.telephony.gsm.AdnRecord;

        specialinvoke $r4.<com.android.internal.telephony.gsm.AdnRecord: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r11 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.AdnRecordCache adnCache>;

        virtualinvoke $r11.<com.android.internal.telephony.gsm.AdnRecordCache: void updateAdnByIndex(int,com.android.internal.telephony.gsm.AdnRecord,int,java.lang.String,android.os.Message)>($i0, $r4, $i1, $r3, $r10);

     label03:
        $r12 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

     label04:
        virtualinvoke $r12.<java.lang.Object: void wait()>();

     label05:
        exitmonitor $r5;

     label06:
        z0 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean success>;

        return z0;

     label07:
        $r13 := @caughtexception;

     label08:
        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void log(java.lang.String)>("interrupted while trying to update by index");

        goto label05;

     label09:
        $r14 := @caughtexception;

        exitmonitor $r5;

     label10:
        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.InterruptedException from label04 to label05 with label07;
        catch java.lang.Throwable from label03 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public boolean updateAdnRecordsInEfBySearch(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager $r0;
        int $i0, $i1;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        com.android.internal.telephony.gsm.AdnRecord $r6, $r7;
        java.lang.Object $r8, $r15;
        com.android.internal.telephony.gsm.GSMPhone $r9;
        android.content.Context $r10;
        java.lang.SecurityException $r11;
        android.os.Handler $r12;
        android.os.Message $r13;
        com.android.internal.telephony.gsm.AdnRecordCache $r14;
        java.lang.InterruptedException $r16;
        java.lang.Throwable $r17;
        boolean z0;

        $r0 := @this: com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        $r5 := @parameter5: java.lang.String;

        $r9 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.GSMPhone phone>;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>();

        $i1 = virtualinvoke $r10.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.WRITE_CONTACTS");

        if $i1 == 0 goto label01;

        $r11 = new java.lang.SecurityException;

        specialinvoke $r11.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires android.permission.WRITE_CONTACTS permission");

        throw $r11;

     label01:
        $r8 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

        entermonitor $r8;

     label02:
        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void checkThread()>();

        $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean success> = 0;

        $r12 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: android.os.Handler mHandler>;

        $r13 = virtualinvoke $r12.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        $r6 = new com.android.internal.telephony.gsm.AdnRecord;

        specialinvoke $r6.<com.android.internal.telephony.gsm.AdnRecord: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        $r7 = new com.android.internal.telephony.gsm.AdnRecord;

        specialinvoke $r7.<com.android.internal.telephony.gsm.AdnRecord: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        $r14 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: com.android.internal.telephony.gsm.AdnRecordCache adnCache>;

        virtualinvoke $r14.<com.android.internal.telephony.gsm.AdnRecordCache: void updateAdnBySearch(int,com.android.internal.telephony.gsm.AdnRecord,com.android.internal.telephony.gsm.AdnRecord,java.lang.String,android.os.Message)>($i0, $r6, $r7, $r5, $r13);

     label03:
        $r15 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.Object mLock>;

     label04:
        virtualinvoke $r15.<java.lang.Object: void wait()>();

     label05:
        exitmonitor $r8;

     label06:
        z0 = $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean success>;

        return z0;

     label07:
        $r16 := @caughtexception;

     label08:
        specialinvoke $r0.<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void log(java.lang.String)>("interrupted while trying to update by search");

        goto label05;

     label09:
        $r17 := @caughtexception;

        exitmonitor $r8;

     label10:
        throw $r17;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.InterruptedException from label04 to label05 with label07;
        catch java.lang.Throwable from label03 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: java.lang.String LOG_TAG> = "GSM";

        <com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int EVENT_UPDATE_DONE> = 3;

        <com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int EVENT_LOAD_DONE> = 2;

        <com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: int EVENT_GET_SIZE_DONE> = 1;

        <com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean DBG> = 0;

        <com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: boolean ALLOW_SIM_OP_IN_UI_THREAD> = 0;

        return;
    }
}
