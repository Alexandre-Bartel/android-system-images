class org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter extends java.net.DatagramSocket
{
    private org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl;

    void <init>(java.net.DatagramSocketImpl, org.apache.harmony.nio.internal.DatagramChannelImpl)
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        java.net.DatagramSocketImpl $r1;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r2;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 := @parameter0: java.net.DatagramSocketImpl;

        $r2 := @parameter1: org.apache.harmony.nio.internal.DatagramChannelImpl;

        specialinvoke $r0.<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)>($r1);

        $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl> = $r2;

        return;
    }

    public void bind(java.net.SocketAddress) throws java.net.SocketException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        java.net.SocketAddress $r1;
        boolean $z0;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r2;
        java.nio.channels.AlreadyConnectedException $r3;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 := @parameter0: java.net.SocketAddress;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        if $z0 == 0 goto label1;

        $r3 = new java.nio.channels.AlreadyConnectedException;

        specialinvoke $r3.<java.nio.channels.AlreadyConnectedException: void <init>()>();

        throw $r3;

     label1:
        specialinvoke $r0.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>($r1);

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $r2.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isBound> = 1;

        return;
    }

    public void close()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r3;
        java.io.IOException $r4;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()>();

     label2:
        if $z0 == 0 goto label5;

     label3:
        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

     label4:
        virtualinvoke $r2.<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>();

     label5:
        specialinvoke $r0.<java.net.DatagramSocket: void close()>();

        exitmonitor $r1;

     label6:
        return;

     label7:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label8:
        throw $r3;

     label9:
        $r4 := @caughtexception;

        goto label5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.io.IOException from label4 to label5 with label9;
        catch java.lang.Throwable from label3 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    public void disconnect()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r1;
        java.io.IOException $r2;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

     label1:
        virtualinvoke $r1.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.nio.channels.DatagramChannel disconnect()>();

     label2:
        specialinvoke $r0.<java.net.DatagramSocket: void disconnect()>();

        return;

     label3:
        $r2 := @caughtexception;

        goto label2;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.nio.channels.DatagramChannel getChannel()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        org.apache.harmony.nio.internal.DatagramChannelImpl r1;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        return r1;
    }

    public java.net.InetAddress getInetAddress()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        java.net.InetAddress $r1;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r2;
        java.net.InetSocketAddress $r3;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $r3 = $r2.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        if $r3 != null goto label1;

        return null;

     label1:
        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $r3 = $r2.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $r1 = virtualinvoke $r3.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>();

        return $r1;
    }

    public java.net.InetAddress getLocalAddress()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        java.net.InetAddress $r1;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r2;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetAddress getLocalAddress()>();

        return $r1;
    }

    public int getPort()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        int $i0;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r1;
        java.net.InetSocketAddress $r2;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $r2 = $r1.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        if $r2 != null goto label1;

        return -1;

     label1:
        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $r2 = $r1.<org.apache.harmony.nio.internal.DatagramChannelImpl: java.net.InetSocketAddress connectAddress>;

        $i0 = virtualinvoke $r2.<java.net.InetSocketAddress: int getPort()>();

        return $i0;
    }

    public boolean isBound()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r1;
        boolean z0;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        z0 = $r1.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isBound>;

        return z0;
    }

    public boolean isConnected()
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        boolean $z0;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r1;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.nio.internal.DatagramChannelImpl: boolean isConnected()>();

        return $z0;
    }

    public void receive(java.net.DatagramPacket) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        java.net.DatagramPacket $r1;
        boolean $z0;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r2;
        java.nio.channels.IllegalBlockingModeException $r3;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 := @parameter0: java.net.DatagramPacket;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r3 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r3.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r3;

     label1:
        specialinvoke $r0.<java.net.DatagramSocket: void receive(java.net.DatagramPacket)>($r1);

        return;
    }

    public void send(java.net.DatagramPacket) throws java.io.IOException
    {
        org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter $r0;
        java.net.DatagramPacket $r1;
        boolean $z0;
        org.apache.harmony.nio.internal.DatagramChannelImpl $r2;
        java.nio.channels.IllegalBlockingModeException $r3;

        $r0 := @this: org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter;

        $r1 := @parameter0: java.net.DatagramPacket;

        $r2 = $r0.<org.apache.harmony.nio.internal.DatagramChannelImpl$DatagramSocketAdapter: org.apache.harmony.nio.internal.DatagramChannelImpl channelImpl>;

        $z0 = virtualinvoke $r2.<java.nio.channels.spi.AbstractSelectableChannel: boolean isBlocking()>();

        if $z0 != 0 goto label1;

        $r3 = new java.nio.channels.IllegalBlockingModeException;

        specialinvoke $r3.<java.nio.channels.IllegalBlockingModeException: void <init>()>();

        throw $r3;

     label1:
        specialinvoke $r0.<java.net.DatagramSocket: void send(java.net.DatagramPacket)>($r1);

        return;
    }
}
