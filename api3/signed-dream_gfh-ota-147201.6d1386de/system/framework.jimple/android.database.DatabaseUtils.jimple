public class android.database.DatabaseUtils extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final boolean LOCAL_LOGV;
    private static final java.lang.String TAG;
    private static final java.lang.String[] countProjection;
    private static java.text.Collator mColl;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <android.database.DatabaseUtils: java.lang.String TAG> = "DatabaseUtils";

        <android.database.DatabaseUtils: boolean LOCAL_LOGV> = 0;

        <android.database.DatabaseUtils: boolean DEBUG> = 0;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "count(*)";

        <android.database.DatabaseUtils: java.lang.String[] countProjection> = $r0;

        <android.database.DatabaseUtils: java.text.Collator mColl> = null;

        return;
    }

    public void <init>()
    {
        android.database.DatabaseUtils $r0;

        $r0 := @this: android.database.DatabaseUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void appendEscapedSQLString(java.lang.StringBuilder, java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.String;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(39);

        if $i0 == -1 goto label3;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 39 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39);

        return;
    }

    public static final void appendValueToSql(java.lang.StringBuilder, java.lang.Object)
    {
        java.lang.StringBuilder $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Boolean $r2;
        java.lang.String $r3;

        $r0 := @parameter0: java.lang.StringBuilder;

        $r1 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NULL");

        return;

     label1:
        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 == 0 goto label3;

        $r2 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(49);

        return;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        return;

     label3:
        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        staticinvoke <android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>($r0, $r3);

        return;
    }

    public static void bindObjectToProgram(android.database.sqlite.SQLiteProgram, int, java.lang.Object)
    {
        android.database.sqlite.SQLiteProgram $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.Number $r2;
        double $d0;
        long $l1;
        java.lang.Boolean $r3;
        byte[] $r4;
        java.lang.String $r5;

        $r0 := @parameter0: android.database.sqlite.SQLiteProgram;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.Object;

        if $r1 != null goto label1;

        virtualinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindNull(int)>($i0);

        return;

     label1:
        $z0 = $r1 instanceof java.lang.Double;

        if $z0 != 0 goto label2;

        $z0 = $r1 instanceof java.lang.Float;

        if $z0 == 0 goto label3;

     label2:
        $r2 = (java.lang.Number) $r1;

        $d0 = virtualinvoke $r2.<java.lang.Number: double doubleValue()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>($i0, $d0);

        return;

     label3:
        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label4;

        $r2 = (java.lang.Number) $r1;

        $l1 = virtualinvoke $r2.<java.lang.Number: long longValue()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>($i0, $l1);

        return;

     label4:
        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 == 0 goto label6;

        $r3 = (java.lang.Boolean) $r1;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>($i0, 1L);

        return;

     label5:
        virtualinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>($i0, 0L);

        return;

     label6:
        $z0 = $r1 instanceof byte[];

        if $z0 == 0 goto label7;

        $r4 = (byte[]) $r1;

        $r4 = (byte[]) $r4;

        virtualinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>($i0, $r4);

        return;

     label7:
        $r5 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r0.<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>($i0, $r5);

        return;
    }

    public static java.lang.String concatenateWhere(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r0);

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label2;

        return $r0;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") AND (");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static void createDbFromSqlStatements(android.content.Context, java.lang.String, int, java.lang.String)
    {
        android.content.Context $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.String[] $r4;
        boolean $z0;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r2 := @parameter3: java.lang.String;

        $r3 = virtualinvoke $r0.<android.content.Context: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>($r1, 0, null);

        $r4 = staticinvoke <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)>($r2, ";\n");

        $i1 = lengthof $r4;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label4;

        $r1 = $r4[$i2];

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1);

        if $z0 == 0 goto label3;

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r1);

        goto label2;

     label4:
        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void setVersion(int)>($i0);

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void close()>();

        return;
    }

    public static void cursorDoubleToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String)
    {
        java.lang.String $r0, $r2;
        android.content.ContentValues $r1;
        android.database.Cursor $r3;
        int $i0;
        boolean $z0;
        double $d0;
        java.lang.Double $r4;

        $r3 := @parameter0: android.database.Cursor;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: android.content.ContentValues;

        $r2 := @parameter3: java.lang.String;

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getColumnIndex(java.lang.String)>($r0);

        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean isNull(int)>($i0);

        if $z0 != 0 goto label1;

        $d0 = interfaceinvoke $r3.<android.database.Cursor: double getDouble(int)>($i0);

        $r4 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>($r2, $r4);

        return;

     label1:
        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>($r2, null);

        return;
    }

    public static void cursorDoubleToCursorValues(android.database.Cursor, java.lang.String, android.content.ContentValues)
    {
        android.database.Cursor $r0;
        java.lang.String $r1;
        android.content.ContentValues $r2;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.content.ContentValues;

        staticinvoke <android.database.DatabaseUtils: void cursorDoubleToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>($r0, $r1, $r2, $r1);

        return;
    }

    public static void cursorIntToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues)
    {
        android.database.Cursor $r0;
        java.lang.String $r1;
        android.content.ContentValues $r2;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.content.ContentValues;

        staticinvoke <android.database.DatabaseUtils: void cursorIntToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>($r0, $r1, $r2, $r1);

        return;
    }

    public static void cursorIntToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String)
    {
        java.lang.String $r0, $r2;
        android.content.ContentValues $r1;
        android.database.Cursor $r3;
        int $i0;
        boolean $z0;
        java.lang.Integer $r4;

        $r3 := @parameter0: android.database.Cursor;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: android.content.ContentValues;

        $r2 := @parameter3: java.lang.String;

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getColumnIndex(java.lang.String)>($r0);

        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean isNull(int)>($i0);

        if $z0 != 0 goto label1;

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getInt(int)>($i0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>($r2, $r4);

        return;

     label1:
        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>($r2, null);

        return;
    }

    public static void cursorLongToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues)
    {
        android.database.Cursor $r0;
        java.lang.String $r1;
        android.content.ContentValues $r2;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.content.ContentValues;

        staticinvoke <android.database.DatabaseUtils: void cursorLongToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>($r0, $r1, $r2, $r1);

        return;
    }

    public static void cursorLongToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String)
    {
        java.lang.String $r0, $r2;
        android.content.ContentValues $r1;
        android.database.Cursor $r3;
        int $i0;
        boolean $z0;
        long $l1;
        java.lang.Long $r4;

        $r3 := @parameter0: android.database.Cursor;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: android.content.ContentValues;

        $r2 := @parameter3: java.lang.String;

        $i0 = interfaceinvoke $r3.<android.database.Cursor: int getColumnIndex(java.lang.String)>($r0);

        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean isNull(int)>($i0);

        if $z0 != 0 goto label1;

        $l1 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>($i0);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>($r2, $r4);

        return;

     label1:
        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>($r2, null);

        return;
    }

    public static void cursorRowToContentValues(android.database.Cursor, android.content.ContentValues)
    {
        android.database.Cursor $r0;
        android.content.ContentValues $r1;
        int $i0, $i1;
        boolean $z0;
        android.database.AbstractWindowedCursor $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, $r6;
        byte[] $r5;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: android.content.ContentValues;

        $z0 = $r0 instanceof android.database.AbstractWindowedCursor;

        if $z0 == 0 goto label4;

        $r2 = (android.database.AbstractWindowedCursor) $r0;

     label1:
        $r3 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        $i0 = lengthof $r3;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label6;

        if $r2 == null goto label5;

        $z0 = virtualinvoke $r2.<android.database.AbstractWindowedCursor: boolean isBlob(int)>($i1);

        if $z0 == 0 goto label5;

        $r4 = $r3[$i1];

        $r5 = interfaceinvoke $r0.<android.database.Cursor: byte[] getBlob(int)>($i1);

        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,byte[])>($r4, $r5);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $r2 = null;

        goto label1;

     label5:
        $r4 = $r3[$i1];

        $r6 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>($i1);

        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r4, $r6);

        goto label3;

     label6:
        return;
    }

    public static void cursorStringToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues)
    {
        android.database.Cursor $r0;
        java.lang.String $r1;
        android.content.ContentValues $r2;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.content.ContentValues;

        staticinvoke <android.database.DatabaseUtils: void cursorStringToContentValues(android.database.Cursor,java.lang.String,android.content.ContentValues,java.lang.String)>($r0, $r1, $r2, $r1);

        return;
    }

    public static void cursorStringToContentValues(android.database.Cursor, java.lang.String, android.content.ContentValues, java.lang.String)
    {
        android.database.Cursor $r0;
        java.lang.String $r1, $r3;
        android.content.ContentValues $r2;
        int $i0;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.content.ContentValues;

        $r3 := @parameter3: java.lang.String;

        $i0 = interfaceinvoke $r0.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>($r1);

        $r1 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>($i0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>($r3, $r1);

        return;
    }

    public static void cursorStringToInsertHelper(android.database.Cursor, java.lang.String, android.database.DatabaseUtils$InsertHelper, int)
    {
        android.database.Cursor $r0;
        java.lang.String $r1;
        android.database.DatabaseUtils$InsertHelper $r2;
        int $i0, $i1;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: android.database.DatabaseUtils$InsertHelper;

        $i0 := @parameter3: int;

        $i1 = interfaceinvoke $r0.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>($r1);

        $r1 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>($i1);

        virtualinvoke $r2.<android.database.DatabaseUtils$InsertHelper: void bind(int,java.lang.String)>($i0, $r1);

        return;
    }

    public static void dumpCurrentRow(android.database.Cursor)
    {
        android.database.Cursor $r0;
        java.io.PrintStream $r1;

        $r0 := @parameter0: android.database.Cursor;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)>($r0, $r1);

        return;
    }

    public static void dumpCurrentRow(android.database.Cursor, java.io.PrintStream)
    {
        android.database.Cursor $r0;
        java.io.PrintStream $r1;
        android.database.sqlite.SQLiteException $r2;
        int $i0, $i1;
        java.lang.String[] $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r6;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.io.PrintStream;

        $r3 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i0 = interfaceinvoke $r0.<android.database.Cursor: int getPosition()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

     label2:
        $r5 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>($i1);

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r6 = $r3[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r2 := @caughtexception;

        $r5 = "<unprintable>";

        goto label3;

     label5:
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("}");

        return;

        catch android.database.sqlite.SQLiteException from label2 to label3 with label4;
    }

    public static void dumpCurrentRow(android.database.Cursor, java.lang.StringBuilder)
    {
        android.database.Cursor $r0;
        java.lang.StringBuilder $r1, $r4;
        android.database.sqlite.SQLiteException $r2;
        int $i0, $i1;
        java.lang.String[] $r3;
        java.lang.String $r5, $r6;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.lang.StringBuilder;

        $r3 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String[] getColumnNames()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $i0 = interfaceinvoke $r0.<android.database.Cursor: int getPosition()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i0 = lengthof $r3;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label5;

     label2:
        $r5 = interfaceinvoke $r0.<android.database.Cursor: java.lang.String getString(int)>($i1);

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   ");

        $r6 = $r3[$i1];

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $i1 = $i1 + 1;

        goto label1;

     label4:
        $r2 := @caughtexception;

        $r5 = "<unprintable>";

        goto label3;

     label5:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}\n");

        return;

        catch android.database.sqlite.SQLiteException from label2 to label3 with label4;
    }

    public static java.lang.String dumpCurrentRowToString(android.database.Cursor)
    {
        android.database.Cursor $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.database.Cursor;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.lang.StringBuilder)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static void dumpCursor(android.database.Cursor)
    {
        android.database.Cursor $r0;
        java.io.PrintStream $r1;

        $r0 := @parameter0: android.database.Cursor;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.io.PrintStream)>($r0, $r1);

        return;
    }

    public static void dumpCursor(android.database.Cursor, java.io.PrintStream)
    {
        android.database.Cursor $r0;
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.io.PrintStream;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>>>> Dumping cursor ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r3);

        if $r0 == null goto label3;

        $i0 = interfaceinvoke $r0.<android.database.Cursor: int getPosition()>();

        interfaceinvoke $r0.<android.database.Cursor: boolean moveToPosition(int)>(-1);

     label1:
        $z0 = interfaceinvoke $r0.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        staticinvoke <android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.io.PrintStream)>($r0, $r1);

        goto label1;

     label2:
        interfaceinvoke $r0.<android.database.Cursor: boolean moveToPosition(int)>($i0);

     label3:
        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("<<<<<");

        return;
    }

    public static void dumpCursor(android.database.Cursor, java.lang.StringBuilder)
    {
        android.database.Cursor $r0;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r3;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: android.database.Cursor;

        $r1 := @parameter1: java.lang.StringBuilder;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">>>>> Dumping cursor ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        if $r0 == null goto label3;

        $i0 = interfaceinvoke $r0.<android.database.Cursor: int getPosition()>();

        interfaceinvoke $r0.<android.database.Cursor: boolean moveToPosition(int)>(-1);

     label1:
        $z0 = interfaceinvoke $r0.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        staticinvoke <android.database.DatabaseUtils: void dumpCurrentRow(android.database.Cursor,java.lang.StringBuilder)>($r0, $r1);

        goto label1;

     label2:
        interfaceinvoke $r0.<android.database.Cursor: boolean moveToPosition(int)>($i0);

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<<<<<\n");

        return;
    }

    public static java.lang.String dumpCursorToString(android.database.Cursor)
    {
        android.database.Cursor $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        $r0 := @parameter0: android.database.Cursor;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.lang.StringBuilder)>($r0, $r1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String getCollationKey(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        int $i0;
        java.lang.Exception $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.database.DatabaseUtils: byte[] getCollationKeyInBytes(java.lang.String)>($r0);

        $r0 = new java.lang.String;

     label1:
        $i0 = staticinvoke <android.database.DatabaseUtils: int getKeyLen(byte[])>($r1);

        specialinvoke $r0.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r1, 0, $i0, "ISO8859_1");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        return "";

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static byte[] getCollationKeyInBytes(java.lang.String)
    {
        java.lang.String $r0;
        java.text.Collator $r1;
        java.text.CollationKey $r2;
        byte[] $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 = <android.database.DatabaseUtils: java.text.Collator mColl>;

        if $r1 != null goto label1;

        $r1 = staticinvoke <java.text.Collator: java.text.Collator getInstance()>();

        <android.database.DatabaseUtils: java.text.Collator mColl> = $r1;

        $r1 = <android.database.DatabaseUtils: java.text.Collator mColl>;

        virtualinvoke $r1.<java.text.Collator: void setStrength(int)>(0);

     label1:
        $r1 = <android.database.DatabaseUtils: java.text.Collator mColl>;

        $r2 = virtualinvoke $r1.<java.text.Collator: java.text.CollationKey getCollationKey(java.lang.String)>($r0);

        $r3 = virtualinvoke $r2.<java.text.CollationKey: byte[] toByteArray()>();

        return $r3;
    }

    public static java.lang.String getHexCollationKey(java.lang.String)
    {
        java.lang.String $r0;
        byte[] $r1;
        char[] $r2;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.database.DatabaseUtils: byte[] getCollationKeyInBytes(java.lang.String)>($r0);

        $r2 = staticinvoke <org.apache.commons.codec.binary.Hex: char[] encodeHex(byte[])>($r1);

        $r0 = new java.lang.String;

        $i0 = staticinvoke <android.database.DatabaseUtils: int getKeyLen(byte[])>($r1);

        $i0 = $i0 * 2;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i0);

        return $r0;
    }

    private static int getKeyLen(byte[])
    {
        byte[] $r0;
        int $i0;
        byte $b1;

        $r0 := @parameter0: byte[];

        $i0 = lengthof $r0;

        $i0 = $i0 - 1;

        $b1 = $r0[$i0];

        if $b1 == 0 goto label1;

        $i0 = lengthof $r0;

        return $i0;

     label1:
        $i0 = lengthof $r0;

        $i0 = $i0 - 1;

        return $i0;
    }

    public static long longForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        android.database.sqlite.SQLiteStatement $r3;
        long $l0;
        java.lang.Throwable $r4;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        $r3 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r1);

     label1:
        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>($r3, $r2);

     label2:
        virtualinvoke $r3.<android.database.sqlite.SQLiteProgram: void close()>();

        return $l0;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r3.<android.database.sqlite.SQLiteProgram: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static long longForQuery(android.database.sqlite.SQLiteStatement, java.lang.String[])
    {
        android.database.sqlite.SQLiteStatement $r0;
        java.lang.String[] $r1;
        int $i0, $i1, $i3;
        java.lang.String $r2;
        long $l2;

        $r0 := @parameter0: android.database.sqlite.SQLiteStatement;

        $r1 := @parameter1: java.lang.String[];

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        $i3 = 0;

     label1:
        if $i3 >= $i0 goto label2;

        $i1 = $i3 + 1;

        $r2 = $r1[$i3];

        staticinvoke <android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>($r0, $i1, $r2);

        $i3 = $i3 + 1;

        goto label1;

     label2:
        $l2 = virtualinvoke $r0.<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>();

        return $l2;
    }

    public static long queryNumEntries(android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        android.database.Cursor $r3;
        long $l0;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter1: java.lang.String;

        $r2 = <android.database.DatabaseUtils: java.lang.String[] countProjection>;

        $r3 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r1, $r2, null, null, null, null, null);

        interfaceinvoke $r3.<android.database.Cursor: boolean moveToFirst()>();

        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(0);

        interfaceinvoke $r3.<android.database.Cursor: void deactivate()>();

        return $l0;
    }

    public static final void readExceptionFromParcel(android.os.Parcel)
    {
        android.os.Parcel $r0;
        int $i0;
        java.lang.String $r1;

        $r0 := @parameter0: android.os.Parcel;

        $i0 = virtualinvoke $r0.<android.os.Parcel: int readInt()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke $r0.<android.os.Parcel: java.lang.String readString()>();

        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel,java.lang.String,int)>($r0, $r1, $i0);

        return;
    }

    private static final void readExceptionFromParcel(android.os.Parcel, java.lang.String, int)
    {
        android.os.Parcel $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.IllegalArgumentException $r2;
        java.lang.UnsupportedOperationException $r3;
        android.database.sqlite.SQLiteAbortException $r4;
        android.database.sqlite.SQLiteConstraintException $r5;
        android.database.sqlite.SQLiteDatabaseCorruptException $r6;
        android.database.sqlite.SQLiteFullException $r7;
        android.database.sqlite.SQLiteDiskIOException $r8;
        android.database.sqlite.SQLiteException $r9;

        $r0 := @parameter0: android.os.Parcel;

        $r1 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        lookupswitch($i0)
        {
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            case 8: goto label8;
            case 9: goto label9;
            default: goto label1;
        };

     label1:
        virtualinvoke $r0.<android.os.Parcel: void readException(int,java.lang.String)>($i0, $r1);

        return;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label3:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r1);

        throw $r3;

     label4:
        $r4 = new android.database.sqlite.SQLiteAbortException;

        specialinvoke $r4.<android.database.sqlite.SQLiteAbortException: void <init>(java.lang.String)>($r1);

        throw $r4;

     label5:
        $r5 = new android.database.sqlite.SQLiteConstraintException;

        specialinvoke $r5.<android.database.sqlite.SQLiteConstraintException: void <init>(java.lang.String)>($r1);

        throw $r5;

     label6:
        $r6 = new android.database.sqlite.SQLiteDatabaseCorruptException;

        specialinvoke $r6.<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>(java.lang.String)>($r1);

        throw $r6;

     label7:
        $r7 = new android.database.sqlite.SQLiteFullException;

        specialinvoke $r7.<android.database.sqlite.SQLiteFullException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label8:
        $r8 = new android.database.sqlite.SQLiteDiskIOException;

        specialinvoke $r8.<android.database.sqlite.SQLiteDiskIOException: void <init>(java.lang.String)>($r1);

        throw $r8;

     label9:
        $r9 = new android.database.sqlite.SQLiteException;

        specialinvoke $r9.<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>($r1);

        throw $r9;
    }

    public static void readExceptionWithFileNotFoundExceptionFromParcel(android.os.Parcel) throws java.io.FileNotFoundException
    {
        android.os.Parcel $r0;
        int $i0;
        java.lang.String $r1;
        java.io.FileNotFoundException $r2;

        $r0 := @parameter0: android.os.Parcel;

        $i0 = virtualinvoke $r0.<android.os.Parcel: int readInt()>();

        if $i0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke $r0.<android.os.Parcel: java.lang.String readString()>();

        if $i0 != 1 goto label2;

        $r2 = new java.io.FileNotFoundException;

        specialinvoke $r2.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label2:
        staticinvoke <android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel,java.lang.String,int)>($r0, $r1, $i0);

        return;
    }

    public static java.lang.String sqlEscapeString(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>($r1, $r0);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase, java.lang.String, java.lang.String[])
    {
        android.database.sqlite.SQLiteDatabase $r0;
        java.lang.String $r1;
        java.lang.String[] $r2;
        android.database.sqlite.SQLiteStatement $r3;
        java.lang.Throwable $r4;

        $r0 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String[];

        $r3 = virtualinvoke $r0.<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>($r1);

     label1:
        $r1 = staticinvoke <android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement,java.lang.String[])>($r3, $r2);

     label2:
        virtualinvoke $r3.<android.database.sqlite.SQLiteProgram: void close()>();

        return $r1;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r3.<android.database.sqlite.SQLiteProgram: void close()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.String stringForQuery(android.database.sqlite.SQLiteStatement, java.lang.String[])
    {
        android.database.sqlite.SQLiteStatement $r0;
        java.lang.String[] $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        $r0 := @parameter0: android.database.sqlite.SQLiteStatement;

        $r1 := @parameter1: java.lang.String[];

        if $r1 == null goto label2;

        $i0 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label2;

        $i1 = $i2 + 1;

        $r2 = $r1[$i2];

        staticinvoke <android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)>($r0, $i1, $r2);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()>();

        return $r2;
    }

    public static final void writeExceptionToParcel(android.os.Parcel, java.lang.Exception)
    {
        android.os.Parcel $r0;
        java.lang.Exception $r1;
        java.lang.String $r2;
        boolean $z0, $z1;
        byte $b0;

        $r0 := @parameter0: android.os.Parcel;

        $r1 := @parameter1: java.lang.Exception;

        $z0 = 1;

        $z1 = $r1 instanceof java.io.FileNotFoundException;

        if $z1 == 0 goto label02;

        $b0 = 1;

        $z0 = 0;

     label01:
        virtualinvoke $r0.<android.os.Parcel: void writeInt(int)>($b0);

        $r2 = virtualinvoke $r1.<java.lang.Throwable: java.lang.String getMessage()>();

        virtualinvoke $r0.<android.os.Parcel: void writeString(java.lang.String)>($r2);

        if $z0 == 0 goto label11;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DatabaseUtils", "Writing exception to parcel", $r1);

        return;

     label02:
        $z1 = $r1 instanceof java.lang.IllegalArgumentException;

        if $z1 == 0 goto label03;

        $b0 = 2;

        goto label01;

     label03:
        $z1 = $r1 instanceof java.lang.UnsupportedOperationException;

        if $z1 == 0 goto label04;

        $b0 = 3;

        goto label01;

     label04:
        $z1 = $r1 instanceof android.database.sqlite.SQLiteAbortException;

        if $z1 == 0 goto label05;

        $b0 = 4;

        goto label01;

     label05:
        $z1 = $r1 instanceof android.database.sqlite.SQLiteConstraintException;

        if $z1 == 0 goto label06;

        $b0 = 5;

        goto label01;

     label06:
        $z1 = $r1 instanceof android.database.sqlite.SQLiteDatabaseCorruptException;

        if $z1 == 0 goto label07;

        $b0 = 6;

        goto label01;

     label07:
        $z1 = $r1 instanceof android.database.sqlite.SQLiteFullException;

        if $z1 == 0 goto label08;

        $b0 = 7;

        goto label01;

     label08:
        $z1 = $r1 instanceof android.database.sqlite.SQLiteDiskIOException;

        if $z1 == 0 goto label09;

        $b0 = 8;

        goto label01;

     label09:
        $z1 = $r1 instanceof android.database.sqlite.SQLiteException;

        if $z1 == 0 goto label10;

        $b0 = 9;

        goto label01;

     label10:
        virtualinvoke $r0.<android.os.Parcel: void writeException(java.lang.Exception)>($r1);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("DatabaseUtils", "Writing exception to parcel", $r1);

        return;

     label11:
        return;
    }
}
