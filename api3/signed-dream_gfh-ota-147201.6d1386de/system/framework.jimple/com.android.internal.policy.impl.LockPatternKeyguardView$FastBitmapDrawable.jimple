class com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable extends android.graphics.drawable.Drawable
{
    private android.graphics.Bitmap mBitmap;

    private void <init>(android.graphics.Bitmap)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        android.graphics.Bitmap $r1;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke $r0.<android.graphics.drawable.Drawable: void <init>()>();

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: android.graphics.Bitmap mBitmap> = $r1;

        return;
    }

    void <init>(android.graphics.Bitmap, com.android.internal.policy.impl.LockPatternKeyguardView$1)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        android.graphics.Bitmap $r1;
        com.android.internal.policy.impl.LockPatternKeyguardView$1 $r2;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r1 := @parameter0: android.graphics.Bitmap;

        $r2 := @parameter1: com.android.internal.policy.impl.LockPatternKeyguardView$1;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: void <init>(android.graphics.Bitmap)>($r1);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        android.graphics.Canvas $r1;
        android.graphics.Bitmap $r2, $r4;
        android.graphics.Rect $r3;
        int $i0, $i1;
        float $f0, $f1;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $r3 = virtualinvoke $r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i0 = virtualinvoke $r3.<android.graphics.Rect: int width()>();

        $r4 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i1 = virtualinvoke $r4.<android.graphics.Bitmap: int getWidth()>();

        $i0 = $i0 - $i1;

        $i0 = $i0 / 2;

        $f0 = (float) $i0;

        $r3 = virtualinvoke $r0.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i0 = virtualinvoke $r3.<android.graphics.Rect: int height()>();

        $r4 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i1 = virtualinvoke $r4.<android.graphics.Bitmap: int getHeight()>();

        $i0 = $i0 - $i1;

        $i0 = $i0 / 2;

        $f1 = (float) $i0;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r2, $f0, $f1, null);

        return;
    }

    public int getIntrinsicHeight()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        int $i0;
        android.graphics.Bitmap $r1;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        return $i0;
    }

    public int getIntrinsicWidth()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        int $i0;
        android.graphics.Bitmap $r1;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        return $i0;
    }

    public int getMinimumHeight()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        int $i0;
        android.graphics.Bitmap $r1;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getHeight()>();

        return $i0;
    }

    public int getMinimumWidth()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        int $i0;
        android.graphics.Bitmap $r1;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        return $i0;
    }

    public int getOpacity()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        return -3;
    }

    public void setAlpha(int)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        int $i0;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $i0 := @parameter0: int;

        return;
    }

    public void setColorFilter(android.graphics.ColorFilter)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r0;
        android.graphics.ColorFilter $r1;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r1 := @parameter0: android.graphics.ColorFilter;

        return;
    }
}
