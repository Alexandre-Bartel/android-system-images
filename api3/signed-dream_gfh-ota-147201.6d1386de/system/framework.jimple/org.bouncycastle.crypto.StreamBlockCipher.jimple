public class org.bouncycastle.crypto.StreamBlockCipher extends java.lang.Object implements org.bouncycastle.crypto.StreamCipher
{
    private org.bouncycastle.crypto.BlockCipher cipher;
    private byte[] oneByte;

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        org.bouncycastle.crypto.StreamBlockCipher $r0;
        org.bouncycastle.crypto.BlockCipher $r1;
        int $i0;
        byte[] $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: org.bouncycastle.crypto.StreamBlockCipher;

        $r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = newarray (byte)[1];

        $r0.<org.bouncycastle.crypto.StreamBlockCipher: byte[] oneByte> = $r2;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        if $i0 == 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("block cipher block size != 1.");

        throw $r3;

     label1:
        $r0.<org.bouncycastle.crypto.StreamBlockCipher: org.bouncycastle.crypto.BlockCipher cipher> = $r1;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.StreamBlockCipher $r0;
        java.lang.String $r1;
        org.bouncycastle.crypto.BlockCipher $r2;

        $r0 := @this: org.bouncycastle.crypto.StreamBlockCipher;

        $r2 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r1 = interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        return $r1;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.StreamBlockCipher $r0;
        boolean $z0;
        org.bouncycastle.crypto.CipherParameters $r1;
        org.bouncycastle.crypto.BlockCipher $r2;

        $r0 := @this: org.bouncycastle.crypto.StreamBlockCipher;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $r2 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>($z0, $r1);

        return;
    }

    public void processBytes(byte[], int, int, byte[], int) throws org.bouncycastle.crypto.DataLengthException
    {
        org.bouncycastle.crypto.StreamBlockCipher $r0;
        byte[] $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.bouncycastle.crypto.DataLengthException $r3;
        org.bouncycastle.crypto.BlockCipher $r4;

        $r0 := @this: org.bouncycastle.crypto.StreamBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i2 := @parameter4: int;

        $i3 = $i2 + $i1;

        $i4 = lengthof $r2;

        if $i3 <= $i4 goto label1;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too small in processBytes()");

        throw $r3;

     label1:
        $i4 = 0;

     label2:
        if $i4 == $i1 goto label3;

        $r4 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $i5 = $i0 + $i4;

        $i3 = $i2 + $i4;

        interfaceinvoke $r4.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, $i5, $r2, $i3);

        $i4 = $i4 + 1;

        goto label2;

     label3:
        return;
    }

    public void reset()
    {
        org.bouncycastle.crypto.StreamBlockCipher $r0;
        org.bouncycastle.crypto.BlockCipher $r1;

        $r0 := @this: org.bouncycastle.crypto.StreamBlockCipher;

        $r1 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: void reset()>();

        return;
    }

    public byte returnByte(byte)
    {
        org.bouncycastle.crypto.StreamBlockCipher $r0;
        byte $b0;
        byte[] $r1, $r2;
        org.bouncycastle.crypto.BlockCipher $r3;

        $r0 := @this: org.bouncycastle.crypto.StreamBlockCipher;

        $b0 := @parameter0: byte;

        $r1 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: byte[] oneByte>;

        $r1[0] = $b0;

        $r3 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r1 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: byte[] oneByte>;

        $r2 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: byte[] oneByte>;

        interfaceinvoke $r3.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, 0, $r2, 0);

        $r1 = $r0.<org.bouncycastle.crypto.StreamBlockCipher: byte[] oneByte>;

        $b0 = $r1[0];

        return $b0;
    }
}
