public class android.speech.srec.WaveHeader extends java.lang.Object
{
    public static final short FORMAT_ALAW;
    public static final short FORMAT_PCM;
    public static final short FORMAT_ULAW;
    private static final int HEADER_LENGTH;
    private static final java.lang.String TAG;
    private short mBitsPerSample;
    private short mFormat;
    private int mNumBytes;
    private short mNumChannels;
    private int mSampleRate;

    public void <init>()
    {
        android.speech.srec.WaveHeader $r0;

        $r0 := @this: android.speech.srec.WaveHeader;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(short, short, int, short, int)
    {
        android.speech.srec.WaveHeader $r0;
        short $s0, $s1, $s3;
        int $i2, $i4;

        $r0 := @this: android.speech.srec.WaveHeader;

        $s0 := @parameter0: short;

        $s1 := @parameter1: short;

        $i2 := @parameter2: int;

        $s3 := @parameter3: short;

        $i4 := @parameter4: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.speech.srec.WaveHeader: short mFormat> = $s0;

        $r0.<android.speech.srec.WaveHeader: int mSampleRate> = $i2;

        $r0.<android.speech.srec.WaveHeader: short mNumChannels> = $s1;

        $r0.<android.speech.srec.WaveHeader: short mBitsPerSample> = $s3;

        $r0.<android.speech.srec.WaveHeader: int mNumBytes> = $i4;

        return;
    }

    private static void readId(java.io.InputStream, java.lang.String) throws java.io.IOException
    {
        java.io.InputStream $r0;
        java.lang.String $r1;
        int $i0, $i1;
        char $c2;
        java.io.IOException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @parameter0: java.io.InputStream;

        $r1 := @parameter1: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label3;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        if $c2 == $i1 goto label2;

        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tag not present");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;
    }

    private static int readInt(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = $i1 << 8;

        $i0 = $i0 | $i1;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = $i1 << 16;

        $i0 = $i0 | $i1;

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = $i1 << 24;

        $i0 = $i0 | $i1;

        return $i0;
    }

    private static short readShort(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream $r0;
        int $i0, $i1;
        short $s2;

        $r0 := @parameter0: java.io.InputStream;

        $i0 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = virtualinvoke $r0.<java.io.InputStream: int read()>();

        $i1 = $i1 << 8;

        $i0 = $i0 | $i1;

        $s2 = (short) $i0;

        return $s2;
    }

    private static void writeId(java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        java.lang.String $r1;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.io.OutputStream;

        $r1 := @parameter1: java.lang.String;

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label2;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i0);

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($c2);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    private static void writeInt(java.io.OutputStream, int) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        int $i0, $i1;

        $r0 := @parameter0: java.io.OutputStream;

        $i0 := @parameter1: int;

        $i1 = $i0 >> 0;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1);

        $i1 = $i0 >> 8;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1);

        $i1 = $i0 >> 16;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1);

        $i0 = $i0 >> 24;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i0);

        return;
    }

    private static void writeShort(java.io.OutputStream, short) throws java.io.IOException
    {
        java.io.OutputStream $r0;
        short $s0, $s1;

        $r0 := @parameter0: java.io.OutputStream;

        $s0 := @parameter1: short;

        $s1 = $s0 >> 0;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($s1);

        $s0 = $s0 >> 8;

        virtualinvoke $r0.<java.io.OutputStream: void write(int)>($s0);

        return;
    }

    public short getBitsPerSample()
    {
        android.speech.srec.WaveHeader $r0;
        short s0;

        $r0 := @this: android.speech.srec.WaveHeader;

        s0 = $r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        return s0;
    }

    public short getFormat()
    {
        android.speech.srec.WaveHeader $r0;
        short s0;

        $r0 := @this: android.speech.srec.WaveHeader;

        s0 = $r0.<android.speech.srec.WaveHeader: short mFormat>;

        return s0;
    }

    public int getNumBytes()
    {
        android.speech.srec.WaveHeader $r0;
        int i0;

        $r0 := @this: android.speech.srec.WaveHeader;

        i0 = $r0.<android.speech.srec.WaveHeader: int mNumBytes>;

        return i0;
    }

    public short getNumChannels()
    {
        android.speech.srec.WaveHeader $r0;
        short s0;

        $r0 := @this: android.speech.srec.WaveHeader;

        s0 = $r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        return s0;
    }

    public int getSampleRate()
    {
        android.speech.srec.WaveHeader $r0;
        int i0;

        $r0 := @this: android.speech.srec.WaveHeader;

        i0 = $r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        return i0;
    }

    public int read(java.io.InputStream) throws java.io.IOException
    {
        android.speech.srec.WaveHeader $r0;
        java.io.InputStream $r1;
        int $i0, $i3;
        java.io.IOException $r2;
        short $s1, $s2, $s4;

        $r0 := @this: android.speech.srec.WaveHeader;

        $r1 := @parameter0: java.io.InputStream;

        staticinvoke <android.speech.srec.WaveHeader: void readId(java.io.InputStream,java.lang.String)>($r1, "RIFF");

        staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>($r1);

        staticinvoke <android.speech.srec.WaveHeader: void readId(java.io.InputStream,java.lang.String)>($r1, "WAVE");

        staticinvoke <android.speech.srec.WaveHeader: void readId(java.io.InputStream,java.lang.String)>($r1, "fmt ");

        $i0 = staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>($r1);

        if 16 == $i0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("fmt chunk length not 16");

        throw $r2;

     label1:
        $s1 = staticinvoke <android.speech.srec.WaveHeader: short readShort(java.io.InputStream)>($r1);

        $r0.<android.speech.srec.WaveHeader: short mFormat> = $s1;

        $s1 = staticinvoke <android.speech.srec.WaveHeader: short readShort(java.io.InputStream)>($r1);

        $r0.<android.speech.srec.WaveHeader: short mNumChannels> = $s1;

        $i0 = staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>($r1);

        $r0.<android.speech.srec.WaveHeader: int mSampleRate> = $i0;

        $i0 = staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>($r1);

        $s1 = staticinvoke <android.speech.srec.WaveHeader: short readShort(java.io.InputStream)>($r1);

        $s2 = staticinvoke <android.speech.srec.WaveHeader: short readShort(java.io.InputStream)>($r1);

        $r0.<android.speech.srec.WaveHeader: short mBitsPerSample> = $s2;

        $s2 = $r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $i3 = $r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        $i3 = $s2 * $i3;

        $s2 = $r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $i3 = $i3 * $s2;

        $i3 = $i3 / 8;

        if $i0 == $i3 goto label2;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("fmt.ByteRate field inconsistent");

        throw $r2;

     label2:
        $s2 = $r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $s4 = $r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $i0 = $s2 * $s4;

        $i0 = $i0 / 8;

        if $s1 == $i0 goto label3;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("fmt.BlockAlign field inconsistent");

        throw $r2;

     label3:
        staticinvoke <android.speech.srec.WaveHeader: void readId(java.io.InputStream,java.lang.String)>($r1, "data");

        $i0 = staticinvoke <android.speech.srec.WaveHeader: int readInt(java.io.InputStream)>($r1);

        $r0.<android.speech.srec.WaveHeader: int mNumBytes> = $i0;

        return 44;
    }

    public android.speech.srec.WaveHeader setBitsPerSample(short)
    {
        android.speech.srec.WaveHeader $r0;
        short $s0;

        $r0 := @this: android.speech.srec.WaveHeader;

        $s0 := @parameter0: short;

        $r0.<android.speech.srec.WaveHeader: short mBitsPerSample> = $s0;

        return $r0;
    }

    public android.speech.srec.WaveHeader setFormat(short)
    {
        android.speech.srec.WaveHeader $r0;
        short $s0;

        $r0 := @this: android.speech.srec.WaveHeader;

        $s0 := @parameter0: short;

        $r0.<android.speech.srec.WaveHeader: short mFormat> = $s0;

        return $r0;
    }

    public android.speech.srec.WaveHeader setNumBytes(int)
    {
        android.speech.srec.WaveHeader $r0;
        int $i0;

        $r0 := @this: android.speech.srec.WaveHeader;

        $i0 := @parameter0: int;

        $r0.<android.speech.srec.WaveHeader: int mNumBytes> = $i0;

        return $r0;
    }

    public android.speech.srec.WaveHeader setNumChannels(short)
    {
        android.speech.srec.WaveHeader $r0;
        short $s0;

        $r0 := @this: android.speech.srec.WaveHeader;

        $s0 := @parameter0: short;

        $r0.<android.speech.srec.WaveHeader: short mNumChannels> = $s0;

        return $r0;
    }

    public android.speech.srec.WaveHeader setSampleRate(int)
    {
        android.speech.srec.WaveHeader $r0;
        int $i0;

        $r0 := @this: android.speech.srec.WaveHeader;

        $i0 := @parameter0: int;

        $r0.<android.speech.srec.WaveHeader: int mSampleRate> = $i0;

        return $r0;
    }

    public java.lang.String toString()
    {
        android.speech.srec.WaveHeader $r0;
        java.lang.Object[] $r1;
        short $s0;
        java.lang.Short $r2;
        int $i1;
        java.lang.Integer $r3;
        java.lang.String $r4;

        $r0 := @this: android.speech.srec.WaveHeader;

        $r1 = newarray (java.lang.Object)[5];

        $s0 = $r0.<android.speech.srec.WaveHeader: short mFormat>;

        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        $r1[0] = $r2;

        $s0 = $r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        $r1[1] = $r2;

        $i1 = $r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[2] = $r3;

        $s0 = $r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0);

        $r1[3] = $r2;

        $i1 = $r0.<android.speech.srec.WaveHeader: int mNumBytes>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[4] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("WaveHeader format=%d numChannels=%d sampleRate=%d bitsPerSample=%d numBytes=%d", $r1);

        return $r4;
    }

    public int write(java.io.OutputStream) throws java.io.IOException
    {
        android.speech.srec.WaveHeader $r0;
        java.io.OutputStream $r1;
        int $i0;
        short $s1, $s2;

        $r0 := @this: android.speech.srec.WaveHeader;

        $r1 := @parameter0: java.io.OutputStream;

        staticinvoke <android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)>($r1, "RIFF");

        $i0 = $r0.<android.speech.srec.WaveHeader: int mNumBytes>;

        $i0 = $i0 + 36;

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>($r1, $i0);

        staticinvoke <android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)>($r1, "WAVE");

        staticinvoke <android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)>($r1, "fmt ");

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>($r1, 16);

        $s1 = $r0.<android.speech.srec.WaveHeader: short mFormat>;

        staticinvoke <android.speech.srec.WaveHeader: void writeShort(java.io.OutputStream,short)>($r1, $s1);

        $s1 = $r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        staticinvoke <android.speech.srec.WaveHeader: void writeShort(java.io.OutputStream,short)>($r1, $s1);

        $i0 = $r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>($r1, $i0);

        $s1 = $r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $i0 = $r0.<android.speech.srec.WaveHeader: int mSampleRate>;

        $i0 = $s1 * $i0;

        $s1 = $r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $i0 = $i0 * $s1;

        $i0 = $i0 / 8;

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>($r1, $i0);

        $s1 = $r0.<android.speech.srec.WaveHeader: short mNumChannels>;

        $s2 = $r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        $i0 = $s1 * $s2;

        $i0 = $i0 / 8;

        $s1 = (short) $i0;

        staticinvoke <android.speech.srec.WaveHeader: void writeShort(java.io.OutputStream,short)>($r1, $s1);

        $s1 = $r0.<android.speech.srec.WaveHeader: short mBitsPerSample>;

        staticinvoke <android.speech.srec.WaveHeader: void writeShort(java.io.OutputStream,short)>($r1, $s1);

        staticinvoke <android.speech.srec.WaveHeader: void writeId(java.io.OutputStream,java.lang.String)>($r1, "data");

        $i0 = $r0.<android.speech.srec.WaveHeader: int mNumBytes>;

        staticinvoke <android.speech.srec.WaveHeader: void writeInt(java.io.OutputStream,int)>($r1, $i0);

        return 44;
    }

    public static void <clinit>()
    {
        <android.speech.srec.WaveHeader: java.lang.String TAG> = "WaveHeader";

        <android.speech.srec.WaveHeader: int HEADER_LENGTH> = 44;

        <android.speech.srec.WaveHeader: short FORMAT_ULAW> = 7;

        <android.speech.srec.WaveHeader: short FORMAT_PCM> = 1;

        <android.speech.srec.WaveHeader: short FORMAT_ALAW> = 6;

        return;
    }
}
