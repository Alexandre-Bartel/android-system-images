public class org.apache.http.impl.io.ContentLengthOutputStream extends java.io.OutputStream
{
    private boolean closed;
    private final long contentLength;
    private final org.apache.http.io.SessionOutputBuffer out;
    private long total;

    public void <init>(org.apache.http.io.SessionOutputBuffer, long)
    {
        org.apache.http.impl.io.ContentLengthOutputStream $r0;
        org.apache.http.io.SessionOutputBuffer $r1;
        long $l0;
        java.lang.IllegalArgumentException $r2;
        byte $b1;

        $r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        $r1 := @parameter0: org.apache.http.io.SessionOutputBuffer;

        $l0 := @parameter1: long;

        specialinvoke $r0.<java.io.OutputStream: void <init>()>();

        $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total> = 0L;

        $r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed> = 0;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Session output buffer may not be null");

        throw $r2;

     label1:
        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Content length may not be negative");

        throw $r2;

     label2:
        $r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out> = $r1;

        $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long contentLength> = $l0;

        return;
    }

    public void close() throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream $r0;
        boolean $z0;
        org.apache.http.io.SessionOutputBuffer $r1;

        $r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        $z0 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed>;

        if $z0 != 0 goto label1;

        $r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed> = 1;

        $r1 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out>;

        interfaceinvoke $r1.<org.apache.http.io.SessionOutputBuffer: void flush()>();

        return;

     label1:
        return;
    }

    public void flush() throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream $r0;
        org.apache.http.io.SessionOutputBuffer $r1;

        $r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        $r1 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out>;

        interfaceinvoke $r1.<org.apache.http.io.SessionOutputBuffer: void flush()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream $r0;
        int $i0;
        boolean $z0;
        java.io.IOException $r1;
        long $l1, $l2;
        byte $b3;
        org.apache.http.io.SessionOutputBuffer $r2;

        $r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        $i0 := @parameter0: int;

        $z0 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Attempted write to closed stream.");

        throw $r1;

     label1:
        $l1 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        $l2 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long contentLength>;

        $b3 = $l1 cmp $l2;

        if $b3 >= 0 goto label2;

        $r2 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out>;

        interfaceinvoke $r2.<org.apache.http.io.SessionOutputBuffer: void write(int)>($i0);

        $l1 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        $l1 = $l1 + 1L;

        $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total> = $l1;

        return;

     label2:
        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream $r0;
        byte[] $r1;
        int $i0;

        $r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        virtualinvoke $r0.<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        org.apache.http.impl.io.ContentLengthOutputStream $r0;
        byte[] $r1;
        int $i0, $i2;
        long $l1, $l3;
        boolean $z0;
        java.io.IOException $r2;
        byte $b4;
        org.apache.http.io.SessionOutputBuffer $r3;

        $r0 := @this: org.apache.http.impl.io.ContentLengthOutputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i2 := @parameter2: int;

        $z0 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Attempted write to closed stream.");

        throw $r2;

     label1:
        $l1 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        $l3 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long contentLength>;

        $b4 = $l1 cmp $l3;

        if $b4 >= 0 goto label3;

        $l1 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long contentLength>;

        $l3 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        $l1 = $l1 - $l3;

        $l3 = (long) $i2;

        $b4 = $l3 cmp $l1;

        if $b4 <= 0 goto label2;

        $i2 = (int) $l1;

     label2:
        $r3 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: org.apache.http.io.SessionOutputBuffer out>;

        interfaceinvoke $r3.<org.apache.http.io.SessionOutputBuffer: void write(byte[],int,int)>($r1, $i0, $i2);

        $l1 = $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total>;

        $l3 = (long) $i2;

        $l1 = $l1 + $l3;

        $r0.<org.apache.http.impl.io.ContentLengthOutputStream: long total> = $l1;

        return;

     label3:
        return;
    }
}
