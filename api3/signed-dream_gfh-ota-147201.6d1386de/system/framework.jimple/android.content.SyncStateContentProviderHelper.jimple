public class android.content.SyncStateContentProviderHelper extends java.lang.Object
{
    private static final java.lang.String[] ACCOUNT_PROJECTION;
    private static final java.lang.String ACCOUNT_WHERE;
    private static final android.net.Uri CONTENT_URI;
    private static long DB_VERSION;
    private static final int STATE;
    private static final java.lang.String SYNC_STATE_AUTHORITY;
    private static final java.lang.String SYNC_STATE_TABLE;
    private static final android.content.UriMatcher sURIMatcher;
    private final android.content.SyncStateContentProviderHelper$Provider mInternalProviderInterface;
    final android.database.sqlite.SQLiteOpenHelper mOpenHelper;

    static void <clinit>()
    {
        android.net.Uri $r0;
        android.content.UriMatcher $r1;
        java.lang.String[] $r2;

        <android.content.SyncStateContentProviderHelper: java.lang.String SYNC_STATE_TABLE> = "_sync_state";

        <android.content.SyncStateContentProviderHelper: java.lang.String SYNC_STATE_AUTHORITY> = "syncstate";

        <android.content.SyncStateContentProviderHelper: int STATE> = 0;

        <android.content.SyncStateContentProviderHelper: java.lang.String ACCOUNT_WHERE> = "_sync_account = ?";

        $r1 = new android.content.UriMatcher;

        specialinvoke $r1.<android.content.UriMatcher: void <init>(int)>(-1);

        <android.content.SyncStateContentProviderHelper: android.content.UriMatcher sURIMatcher> = $r1;

        $r0 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>("content://syncstate/state");

        <android.content.SyncStateContentProviderHelper: android.net.Uri CONTENT_URI> = $r0;

        <android.content.SyncStateContentProviderHelper: long DB_VERSION> = 2L;

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "_sync_account";

        <android.content.SyncStateContentProviderHelper: java.lang.String[] ACCOUNT_PROJECTION> = $r2;

        $r1 = <android.content.SyncStateContentProviderHelper: android.content.UriMatcher sURIMatcher>;

        virtualinvoke $r1.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("syncstate", "state", 0);

        return;
    }

    public void <init>(android.database.sqlite.SQLiteOpenHelper)
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.database.sqlite.SQLiteOpenHelper $r1;
        android.content.SyncStateContentProviderHelper$Provider $r2;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteOpenHelper;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.content.SyncStateContentProviderHelper: android.database.sqlite.SQLiteOpenHelper mOpenHelper> = $r1;

        $r2 = new android.content.SyncStateContentProviderHelper$Provider;

        specialinvoke $r2.<android.content.SyncStateContentProviderHelper$Provider: void <init>(android.content.SyncStateContentProviderHelper)>($r0);

        $r0.<android.content.SyncStateContentProviderHelper: android.content.SyncStateContentProviderHelper$Provider mInternalProviderInterface> = $r2;

        return;
    }

    static android.content.UriMatcher access$000()
    {
        android.content.UriMatcher r0;

        r0 = <android.content.SyncStateContentProviderHelper: android.content.UriMatcher sURIMatcher>;

        return r0;
    }

    static android.net.Uri access$100()
    {
        android.net.Uri r0;

        r0 = <android.content.SyncStateContentProviderHelper: android.net.Uri CONTENT_URI>;

        return r0;
    }

    public android.content.ContentProvider asContentProvider()
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.content.SyncStateContentProviderHelper$Provider r1;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        r1 = $r0.<android.content.SyncStateContentProviderHelper: android.content.SyncStateContentProviderHelper$Provider mInternalProviderInterface>;

        return r1;
    }

    public void copySyncState(android.database.sqlite.SQLiteDatabase, android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.database.sqlite.SQLiteDatabase $r1, $r2;
        java.lang.String $r3;
        java.lang.String[] $r4, $r5;
        android.content.ContentValues $r6;
        android.database.Cursor $r7;
        boolean $z0;
        byte[] $r8;
        java.lang.Throwable $r9;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: android.database.sqlite.SQLiteDatabase;

        $r3 := @parameter2: java.lang.String;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = $r3;

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "_sync_account";

        $r4[1] = "data";

        $r7 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("_sync_state", $r4, "_sync_account = ?", $r5, null, null, null);

     label1:
        $z0 = interfaceinvoke $r7.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label2;

        $r6 = new android.content.ContentValues;

        specialinvoke $r6.<android.content.ContentValues: void <init>()>();

        $r3 = interfaceinvoke $r7.<android.database.Cursor: java.lang.String getString(int)>(0);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("_sync_account", $r3);

        $r8 = interfaceinvoke $r7.<android.database.Cursor: byte[] getBlob(int)>(1);

        virtualinvoke $r6.<android.content.ContentValues: void put(java.lang.String,byte[])>("data", $r8);

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>("_sync_state", "_sync_account", $r6);

     label2:
        interfaceinvoke $r7.<android.database.Cursor: void close()>();

        return;

     label3:
        $r9 := @caughtexception;

        interfaceinvoke $r7.<android.database.Cursor: void close()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void createDatabase(android.database.sqlite.SQLiteDatabase)
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        android.content.ContentValues $r2;
        java.lang.Long $r3;
        long $l0;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS _sync_state");

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE _sync_state (_id INTEGER PRIMARY KEY,_sync_account TEXT,data TEXT,UNIQUE(_sync_account));");

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("DROP TABLE IF EXISTS _sync_state_metadata");

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("CREATE TABLE _sync_state_metadata (version INTEGER);");

        $r2 = new android.content.ContentValues;

        specialinvoke $r2.<android.content.ContentValues: void <init>()>();

        $l0 = <android.content.SyncStateContentProviderHelper: long DB_VERSION>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r2.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("version", $r3);

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("_sync_state_metadata", "version", $r2);

        return;
    }

    public void discardSyncData(android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: java.lang.String;

        if $r2 == null goto label1;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r2;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("_sync_state", "_sync_account = ?", $r3);

        return;

     label1:
        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("_sync_state", null, null);

        return;
    }

    public boolean matches(android.net.Uri)
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.net.Uri $r1;
        java.lang.String $r2, $r3;
        boolean $z0;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: android.net.Uri;

        $r2 = "syncstate";

        $r3 = virtualinvoke $r1.<android.net.Uri: java.lang.String getAuthority()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    public void onAccountsChanged(java.lang.String[])
    {
        android.content.SyncStateContentProviderHelper $r0;
        java.lang.String[] $r1, $r4;
        android.database.sqlite.SQLiteOpenHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r5;
        boolean $z0;
        java.lang.String $r6;
        java.lang.Throwable $r7;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: java.lang.String[];

        $r2 = $r0.<android.content.SyncStateContentProviderHelper: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = <android.content.SyncStateContentProviderHelper: java.lang.String[] ACCOUNT_PROJECTION>;

        $r5 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("_sync_state", $r4, null, null, null, null, null);

     label1:
        $z0 = interfaceinvoke $r5.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<android.database.Cursor: java.lang.String getString(int)>(0);

        $z0 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>($r1, $r6);

        if $z0 != 0 goto label1;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = $r6;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("_sync_state", "_sync_account = ?", $r4);

     label2:
        goto label1;

     label3:
        $r7 := @caughtexception;

        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        throw $r7;

     label4:
        interfaceinvoke $r5.<android.database.Cursor: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected void onDatabaseOpened(android.database.sqlite.SQLiteDatabase)
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        long $l0, $l1;
        byte $b2;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r1, "select version from _sync_state_metadata", null);

        $l1 = <android.content.SyncStateContentProviderHelper: long DB_VERSION>;

        $b2 = $l0 cmp $l1;

        if $b2 == 0 goto label1;

        virtualinvoke $r0.<android.content.SyncStateContentProviderHelper: void createDatabase(android.database.sqlite.SQLiteDatabase)>($r1);

        return;

     label1:
        return;
    }

    public byte[] readSyncDataBytes(android.database.sqlite.SQLiteDatabase, java.lang.String)
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        android.database.Cursor $r4;
        boolean $z0;
        int $i0;
        byte[] $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: java.lang.String;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = $r2;

        $r4 = virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("_sync_state", null, "_sync_account = ?", $r3, null, null, null);

     label1:
        $z0 = interfaceinvoke $r4.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label3;

        $i0 = interfaceinvoke $r4.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("data");

        $r5 = interfaceinvoke $r4.<android.database.Cursor: byte[] getBlob(int)>($i0);

     label2:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return $r5;

     label3:
        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        return null;

     label4:
        $r6 := @caughtexception;

        interfaceinvoke $r4.<android.database.Cursor: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void writeSyncDataBytes(android.database.sqlite.SQLiteDatabase, java.lang.String, byte[])
    {
        android.content.SyncStateContentProviderHelper $r0;
        android.database.sqlite.SQLiteDatabase $r1;
        java.lang.String $r2;
        byte[] $r3;
        android.content.ContentValues $r4;
        java.lang.String[] $r5;

        $r0 := @this: android.content.SyncStateContentProviderHelper;

        $r1 := @parameter0: android.database.sqlite.SQLiteDatabase;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: byte[];

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,byte[])>("data", $r3);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = $r2;

        virtualinvoke $r1.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("_sync_state", $r4, "_sync_account = ?", $r5);

        return;
    }
}
