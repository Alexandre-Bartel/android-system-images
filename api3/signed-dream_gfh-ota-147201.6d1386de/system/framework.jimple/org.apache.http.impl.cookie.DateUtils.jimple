public final class org.apache.http.impl.cookie.DateUtils extends java.lang.Object
{
    private static final java.lang.String[] DEFAULT_PATTERNS;
    private static final java.util.Date DEFAULT_TWO_DIGIT_YEAR_START;
    public static final java.util.TimeZone GMT;
    public static final java.lang.String PATTERN_ASCTIME;
    public static final java.lang.String PATTERN_RFC1036;
    public static final java.lang.String PATTERN_RFC1123;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.TimeZone $r1;
        java.util.Calendar $r2;
        java.util.Date $r3;

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_RFC1123> = "EEE, dd MMM yyyy HH:mm:ss zzz";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_RFC1036> = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String PATTERN_ASCTIME> = "EEE MMM d HH:mm:ss yyyy";

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        $r0[1] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r0[2] = "EEE MMM d HH:mm:ss yyyy";

        <org.apache.http.impl.cookie.DateUtils: java.lang.String[] DEFAULT_PATTERNS> = $r0;

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.apache.http.impl.cookie.DateUtils: java.util.TimeZone GMT> = $r1;

        $r2 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance()>();

        $r1 = <org.apache.http.impl.cookie.DateUtils: java.util.TimeZone GMT>;

        virtualinvoke $r2.<java.util.Calendar: void setTimeZone(java.util.TimeZone)>($r1);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int,int,int,int,int)>(2000, 0, 1, 0, 0, 0);

        virtualinvoke $r2.<java.util.Calendar: void set(int,int)>(14, 0);

        $r3 = virtualinvoke $r2.<java.util.Calendar: java.util.Date getTime()>();

        <org.apache.http.impl.cookie.DateUtils: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START> = $r3;

        return;
    }

    private void <init>()
    {
        org.apache.http.impl.cookie.DateUtils $r0;

        $r0 := @this: org.apache.http.impl.cookie.DateUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String formatDate(java.util.Date)
    {
        java.util.Date $r0;
        java.lang.String $r1;

        $r0 := @parameter0: java.util.Date;

        $r1 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.lang.String formatDate(java.util.Date,java.lang.String)>($r0, "EEE, dd MMM yyyy HH:mm:ss zzz");

        return $r1;
    }

    public static java.lang.String formatDate(java.util.Date, java.lang.String)
    {
        java.util.Date $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        java.text.SimpleDateFormat $r3;

        $r0 := @parameter0: java.util.Date;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("date is null");

        throw $r2;

     label1:
        if $r1 != null goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("pattern is null");

        throw $r2;

     label2:
        $r3 = staticinvoke <org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r0);

        return $r1;
    }

    public static java.util.Date parseDate(java.lang.String) throws org.apache.http.impl.cookie.DateParseException
    {
        java.lang.String $r0;
        java.util.Date $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date)>($r0, null, null);

        return $r1;
    }

    public static java.util.Date parseDate(java.lang.String, java.lang.String[]) throws org.apache.http.impl.cookie.DateParseException
    {
        java.lang.String $r0;
        java.lang.String[] $r1;
        java.util.Date $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String[];

        $r2 = staticinvoke <org.apache.http.impl.cookie.DateUtils: java.util.Date parseDate(java.lang.String,java.lang.String[],java.util.Date)>($r0, $r1, null);

        return $r2;
    }

    public static java.util.Date parseDate(java.lang.String, java.lang.String[], java.util.Date) throws org.apache.http.impl.cookie.DateParseException
    {
        java.lang.String[] $r0, $r3;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        java.util.Date $r4;
        java.lang.IllegalArgumentException $r5;
        boolean $z0;
        java.text.SimpleDateFormat $r6;
        java.text.ParseException $r7;
        org.apache.http.impl.cookie.DateParseException $r8;
        java.lang.StringBuilder $r9;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String[];

        $r4 := @parameter2: java.util.Date;

        if $r2 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dateValue is null");

        throw $r5;

     label1:
        if $r3 != null goto label2;

        $r3 = <org.apache.http.impl.cookie.DateUtils: java.lang.String[] DEFAULT_PATTERNS>;

     label2:
        if $r4 != null goto label3;

        $r4 = <org.apache.http.impl.cookie.DateUtils: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START>;

     label3:
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 1 goto label4;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i0 = $i0 - 1;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(1, $i0);

     label4:
        $r0 = $r3;

        $i0 = lengthof $r3;

        $i1 = 0;

     label5:
        if $i1 >= $i0 goto label9;

        $r1 = $r0[$i1];

        $r6 = staticinvoke <org.apache.http.impl.cookie.DateUtils$DateFormatHolder: java.text.SimpleDateFormat formatFor(java.lang.String)>($r1);

        virtualinvoke $r6.<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>($r4);

     label6:
        $r4 = virtualinvoke $r6.<java.text.DateFormat: java.util.Date parse(java.lang.String)>($r2);

     label7:
        return $r4;

     label8:
        $r7 := @caughtexception;

        $i1 = $i1 + 1;

        goto label5;

     label9:
        $r8 = new org.apache.http.impl.cookie.DateParseException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse the date ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<org.apache.http.impl.cookie.DateParseException: void <init>(java.lang.String)>($r2);

        throw $r8;

        catch java.text.ParseException from label6 to label7 with label8;
    }
}
