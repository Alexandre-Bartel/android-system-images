public class org.apache.harmony.xnet.provider.jsse.SSLSessionImpl extends java.lang.Object implements javax.net.ssl.SSLSession
{
    public static final org.apache.harmony.xnet.provider.jsse.SSLSessionImpl NULL_SESSION;
    org.apache.harmony.xnet.provider.jsse.CipherSuite cipherSuite;
    byte[] clientRandom;
    javax.net.ssl.SSLSessionContext context;
    private long creationTime;
    byte[] id;
    boolean isServer;
    private boolean isValid;
    long lastAccessedTime;
    java.security.cert.X509Certificate[] localCertificates;
    byte[] master_secret;
    java.security.cert.X509Certificate[] peerCertificates;
    java.lang.String peerHost;
    int peerPort;
    org.apache.harmony.xnet.provider.jsse.ProtocolVersion protocol;
    byte[] serverRandom;
    private org.apache.harmony.luni.util.TwoKeyHashMap values;

    static void <clinit>()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;

        $r0 = new org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void <init>(java.security.SecureRandom)>(null);

        <org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl NULL_SESSION> = $r0;

        return;
    }

    private void <init>()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        org.apache.harmony.luni.util.TwoKeyHashMap $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isValid> = 1;

        $r1 = new org.apache.harmony.luni.util.TwoKeyHashMap;

        specialinvoke $r1.<org.apache.harmony.luni.util.TwoKeyHashMap: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values> = $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int peerPort> = -1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isServer> = 0;

        return;
    }

    public void <init>(java.security.SecureRandom)
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.security.SecureRandom $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 := @parameter0: java.security.SecureRandom;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void <init>(org.apache.harmony.xnet.provider.jsse.CipherSuite,java.security.SecureRandom)>(null, $r1);

        return;
    }

    public void <init>(org.apache.harmony.xnet.provider.jsse.CipherSuite, java.security.SecureRandom)
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r1;
        java.security.SecureRandom $r2;
        long $l0, $l1;
        org.apache.harmony.luni.util.TwoKeyHashMap $r3;
        byte[] $r4;
        java.util.Date $r5;
        int $i2;
        byte $b3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.CipherSuite;

        $r2 := @parameter1: java.security.SecureRandom;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isValid> = 1;

        $r3 = new org.apache.harmony.luni.util.TwoKeyHashMap;

        specialinvoke $r3.<org.apache.harmony.luni.util.TwoKeyHashMap: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values> = $r3;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int peerPort> = -1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isServer> = 0;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long creationTime> = $l0;

        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long creationTime>;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long lastAccessedTime> = $l0;

        if $r1 != null goto label1;

        $r1 = <org.apache.harmony.xnet.provider.jsse.CipherSuite: org.apache.harmony.xnet.provider.jsse.CipherSuite TLS_NULL_WITH_NULL_NULL>;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite cipherSuite> = $r1;

        $r4 = newarray (byte)[0];

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id> = $r4;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isServer> = 0;

        return;

     label1:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite cipherSuite> = $r1;

        $r4 = newarray (byte)[32];

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id> = $r4;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id>;

        virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>($r4);

        $r5 = new java.util.Date;

        specialinvoke $r5.<java.util.Date: void <init>()>();

        $l0 = virtualinvoke $r5.<java.util.Date: long getTime()>();

        $l0 = $l0 / 1000L;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id>;

        $l1 = -16777216L & $l0;

        $l1 = $l1 >>> 24;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r4[28] = $b3;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id>;

        $l1 = 16711680L & $l0;

        $l1 = $l1 >>> 16;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r4[29] = $b3;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id>;

        $l1 = 65280L & $l0;

        $l1 = $l1 >>> 8;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r4[30] = $b3;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id>;

        $l0 = 255L & $l0;

        $i2 = (int) $l0;

        $b3 = (byte) $i2;

        $r4[31] = $b3;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isServer> = 1;

        return;
    }

    public java.lang.Object clone()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0, $r1;
        byte[] $r2;
        long $l0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r3;
        java.security.cert.X509Certificate[] $r4;
        java.lang.String $r5;
        int $i1;
        javax.net.ssl.SSLSessionContext $r6;
        org.apache.harmony.xnet.provider.jsse.ProtocolVersion $r7;
        org.apache.harmony.luni.util.TwoKeyHashMap $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 = new org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        specialinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void <init>()>();

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id> = $r2;

        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long creationTime>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long creationTime> = $l0;

        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long lastAccessedTime>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long lastAccessedTime> = $l0;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isValid>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isValid> = $z0;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite cipherSuite>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite cipherSuite> = $r3;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] localCertificates> = $r4;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates> = $r4;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] clientRandom>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] clientRandom> = $r2;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] serverRandom>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] serverRandom> = $r2;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String peerHost>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String peerHost> = $r5;

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int peerPort>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int peerPort> = $i1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isServer>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isServer> = $z0;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext context>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext context> = $r6;

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.ProtocolVersion protocol>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.ProtocolVersion protocol> = $r7;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values> = $r8;

        return $r1;
    }

    public int getApplicationBufferSize()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        i0 = <org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int MAX_DATA_LENGTH>;

        return i0;
    }

    public java.lang.String getCipherSuite()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.lang.String $r1;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite cipherSuite>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getName()>();

        return $r1;
    }

    public long getCreationTime()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        long l0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        l0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long creationTime>;

        return l0;
    }

    public byte[] getId()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        byte[] r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] id>;

        return r1;
    }

    public long getLastAccessedTime()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        long l0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        l0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long lastAccessedTime>;

        return l0;
    }

    public java.security.cert.Certificate[] getLocalCertificates()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.security.cert.X509Certificate[] r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        return r1;
    }

    public java.security.Principal getLocalPrincipal()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        java.security.cert.X509Certificate[] $r2;
        int $i0;
        java.security.cert.X509Certificate $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        if $r2 == null goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        $r3 = $r2[0];

        $r1 = virtualinvoke $r3.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r1;

     label1:
        return null;
    }

    public int getPacketBufferSize()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        i0 = <org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int MAX_SSL_PACKET_SIZE>;

        return i0;
    }

    public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        javax.security.cert.X509Certificate[] $r1;
        java.security.cert.X509Certificate[] $r2;
        javax.net.ssl.SSLPeerUnverifiedException $r3;
        int $i0, $i1;
        java.security.cert.X509Certificate $r4;
        byte[] $r5;
        javax.security.cert.X509Certificate $r6;
        java.security.cert.CertificateEncodingException $r7;
        javax.security.cert.CertificateException $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        if $r2 != null goto label1;

        $r3 = new javax.net.ssl.SSLPeerUnverifiedException;

        specialinvoke $r3.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("No peer certificate");

        throw $r3;

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $i0 = lengthof $r2;

        $r1 = newarray (javax.security.cert.X509Certificate)[$i0];

        $i0 = 0;

     label2:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label6;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $r4 = $r2[$i0];

     label3:
        $r5 = virtualinvoke $r4.<java.security.cert.Certificate: byte[] getEncoded()>();

        $r6 = staticinvoke <javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])>($r5);

     label4:
        $r1[$i0] = $r6;

     label5:
        $i0 = $i0 + 1;

        goto label2;

     label6:
        return $r1;

     label7:
        $r7 := @caughtexception;

        goto label5;

     label8:
        $r8 := @caughtexception;

        goto label5;

        catch javax.security.cert.CertificateException from label3 to label4 with label8;
        catch java.security.cert.CertificateEncodingException from label3 to label4 with label7;
    }

    public java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.security.cert.X509Certificate[] $r1;
        javax.net.ssl.SSLPeerUnverifiedException $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        if $r1 != null goto label1;

        $r2 = new javax.net.ssl.SSLPeerUnverifiedException;

        specialinvoke $r2.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("No peer certificate");

        throw $r2;

     label1:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        return $r1;
    }

    public java.lang.String getPeerHost()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String peerHost>;

        return r1;
    }

    public int getPeerPort()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        i0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int peerPort>;

        return i0;
    }

    public java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        java.security.cert.X509Certificate[] $r2;
        javax.net.ssl.SSLPeerUnverifiedException $r3;
        java.security.cert.X509Certificate $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        if $r2 != null goto label1;

        $r3 = new javax.net.ssl.SSLPeerUnverifiedException;

        specialinvoke $r3.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("No peer certificate");

        throw $r3;

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $r4 = $r2[0];

        $r1 = virtualinvoke $r4.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r1;
    }

    public java.lang.String getProtocol()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        org.apache.harmony.xnet.provider.jsse.ProtocolVersion $r1;
        java.lang.String r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.ProtocolVersion protocol>;

        r2 = $r1.<org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.lang.String name>;

        return r2;
    }

    public javax.net.ssl.SSLSessionContext getSessionContext()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.lang.SecurityManager $r1;
        javax.net.ssl.SSLPermission $r2;
        javax.net.ssl.SSLSessionContext r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r1 == null goto label1;

        $r2 = new javax.net.ssl.SSLPermission;

        specialinvoke $r2.<javax.net.ssl.SSLPermission: void <init>(java.lang.String)>("getSSLSessionContext");

        virtualinvoke $r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        r3 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext context>;

        return r3;
    }

    public java.lang.Object getValue(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.harmony.luni.util.TwoKeyHashMap $r3;
        java.security.AccessControlContext $r4;
        java.lang.Object $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter is null");

        throw $r2;

     label1:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r4 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

        $r5 = virtualinvoke $r3.<org.apache.harmony.luni.util.TwoKeyHashMap: java.lang.Object get(java.lang.Object,java.lang.Object)>($r1, $r4);

        return $r5;
    }

    public java.lang.String[] getValueNames()
    {
        java.util.Vector $r0;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r1;
        java.security.AccessControlContext $r2, $r8;
        org.apache.harmony.luni.util.TwoKeyHashMap $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r7;
        java.lang.String[] $r9;
        java.lang.Object[] $r10;

        $r1 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $r2 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

        $r3 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.luni.util.TwoKeyHashMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.harmony.luni.util.TwoKeyHashMap$Entry) $r6;

        $r6 = virtualinvoke $r7.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey2()>();

        $r8 = (java.security.AccessControlContext) $r6;

        if $r2 != null goto label2;

        if $r8 == null goto label3;

     label2:
        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.security.AccessControlContext: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

     label3:
        $r6 = virtualinvoke $r7.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey1()>();

        virtualinvoke $r0.<java.util.Vector: boolean add(java.lang.Object)>($r6);

        goto label1;

     label4:
        $r9 = newarray (java.lang.String)[0];

        $r10 = virtualinvoke $r0.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r9 = (java.lang.String[]) $r10;

        $r9 = (java.lang.String[]) $r9;

        return $r9;
    }

    public void invalidate()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isValid> = 0;

        return;
    }

    public boolean isValid()
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        boolean $z0;
        javax.net.ssl.SSLSessionContext $r1;
        int $i0;
        long $l1, $l2;
        byte $b3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isValid>;

        if $z0 == 0 goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext context>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext context>;

        $i0 = interfaceinvoke $r1.<javax.net.ssl.SSLSessionContext: int getSessionTimeout()>();

        if $i0 == 0 goto label1;

        $l1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: long lastAccessedTime>;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: javax.net.ssl.SSLSessionContext context>;

        $i0 = interfaceinvoke $r1.<javax.net.ssl.SSLSessionContext: int getSessionTimeout()>();

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b3 = $l1 cmp $l2;

        if $b3 <= 0 goto label1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isValid> = 0;

     label1:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isValid>;

        return $z0;
    }

    public void putValue(java.lang.String, java.lang.Object)
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.lang.String $r1;
        java.lang.Object $r2, $r6;
        java.lang.IllegalArgumentException $r3;
        org.apache.harmony.luni.util.TwoKeyHashMap $r4;
        java.security.AccessControlContext $r5;
        boolean $z0;
        javax.net.ssl.SSLSessionBindingListener $r7;
        javax.net.ssl.SSLSessionBindingEvent $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter is null");

        throw $r3;

     label2:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r5 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

        $r6 = virtualinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r5, $r2);

        $z0 = $r2 instanceof javax.net.ssl.SSLSessionBindingListener;

        if $z0 == 0 goto label3;

        $r7 = (javax.net.ssl.SSLSessionBindingListener) $r2;

        $r8 = new javax.net.ssl.SSLSessionBindingEvent;

        specialinvoke $r8.<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>($r0, $r1);

        interfaceinvoke $r7.<javax.net.ssl.SSLSessionBindingListener: void valueBound(javax.net.ssl.SSLSessionBindingEvent)>($r8);

     label3:
        if $r6 == null goto label4;

        $z0 = $r6 instanceof javax.net.ssl.SSLSessionBindingListener;

        if $z0 == 0 goto label5;

        $r7 = (javax.net.ssl.SSLSessionBindingListener) $r6;

        $r8 = new javax.net.ssl.SSLSessionBindingEvent;

        specialinvoke $r8.<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>($r0, $r1);

        interfaceinvoke $r7.<javax.net.ssl.SSLSessionBindingListener: void valueUnbound(javax.net.ssl.SSLSessionBindingEvent)>($r8);

        return;

     label4:
        return;

     label5:
        return;
    }

    public void removeValue(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.lang.String $r1;
        java.security.AccessControlContext $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.harmony.luni.util.TwoKeyHashMap $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter is null");

        throw $r3;

     label1:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r2 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

        virtualinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }

    void setPeer(java.lang.String, int)
    {
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String peerHost> = $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: int peerPort> = $i0;

        return;
    }
}
