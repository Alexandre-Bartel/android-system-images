public final class org.apache.harmony.luni.internal.util.ZoneInfoDB extends java.lang.Object
{
    private static final java.lang.String DEFAULT_VERSION;
    private static final java.lang.String INDEX_FILE_NAME;
    private static final int TZINT_LENGTH;
    private static final int TZNAME_LENGTH;
    private static final java.lang.String VERSION_FILE_NAME;
    private static final java.lang.String ZONE_DIRECTORY_NAME;
    private static final java.lang.String ZONE_FILE_NAME;
    private static java.util.TimeZone defaultZone;
    private static int[] lengths;
    private static java.lang.Object lock;
    private static java.lang.String[] names;
    private static int[] offsets;
    private static int[] starts;
    private static java.lang.String version;

    static void <clinit>()
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.io.IOException $r3, $r4;
        java.lang.String[] $r5;
        int[] $r6;

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: int TZNAME_LENGTH> = 40;

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: int TZINT_LENGTH> = 4;

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String DEFAULT_VERSION> = "2007h";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("ANDROID_ROOT");

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/usr/share/zoneinfo/");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String ZONE_DIRECTORY_NAME> = $r1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String ZONE_DIRECTORY_NAME>;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("zoneinfo.dat");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String ZONE_FILE_NAME> = $r1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String ZONE_DIRECTORY_NAME>;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("zoneinfo.idx");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String INDEX_FILE_NAME> = $r1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String ZONE_DIRECTORY_NAME>;

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("zoneinfo.version");

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String VERSION_FILE_NAME> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.Object lock> = $r2;

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.util.TimeZone defaultZone> = null;

     label1:
        staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: void readVersion()>();

     label2:
        staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: void readDatabase()>();

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String version> = "2007h";

        goto label2;

     label5:
        $r4 := @caughtexception;

        $r5 = newarray (java.lang.String)[0];

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String[] names> = $r5;

        $r6 = newarray (int)[0];

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] starts> = $r6;

        $r6 = newarray (int)[0];

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] lengths> = $r6;

        $r6 = newarray (int)[0];

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] offsets> = $r6;

        return;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.io.IOException from label2 to label3 with label5;
    }

    private void <init>()
    {
        org.apache.harmony.luni.internal.util.ZoneInfoDB $r0;

        $r0 := @this: org.apache.harmony.luni.internal.util.ZoneInfoDB;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.String[] _getAvailableIDs(int, boolean)
    {
        boolean $z0;
        java.lang.String[] $r0;
        int[] $r1;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;

        $i1 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] offsets>;

        $r0 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String[] names>;

        $i0 = lengthof $r1;

        $i2 = 0;

     label1:
        if $i2 >= $i0 goto label4;

        if $z0 == 0 goto label2;

        $i3 = $r1[$i2];

        if $i3 != $i1 goto label3;

     label2:
        $r3 = $r0[$i2];

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label3:
        $i2 = $i2 + 1;

        goto label1;

     label4:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r0 = newarray (java.lang.String)[$i1];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r0);

        $r0 = (java.lang.String[]) $r4;

        return $r0;
    }

    static java.util.TimeZone _getTimeZone(java.lang.String) throws java.io.IOException
    {
        byte[] $r0, $r1, $r11, $r13;
        java.lang.String $r2, $r6;
        java.io.FileInputStream $r3;
        java.io.File $r4;
        java.lang.StringBuilder $r5;
        boolean $z0;
        java.lang.String[] $r7;
        int $i0, $i1, $i3, $i5, $i6;
        int[] $r8, $r12;
        long $l2;
        java.io.IOException $r9;
        java.util.logging.Logger $r10;
        byte $b4;
        org.apache.harmony.luni.internal.util.ZoneInfo $r14;

        $r2 := @parameter0: java.lang.String;

        $r3 = null;

        $r4 = new java.io.File;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String ZONE_DIRECTORY_NAME>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r6);

        $z0 = virtualinvoke $r4.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label18;

        $r3 = new java.io.FileInputStream;

        $r6 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String ZONE_FILE_NAME>;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>($r6);

        $r7 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String[] names>;

        $i0 = staticinvoke <java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object)>($r7, $r2);

        if $i0 >= 0 goto label01;

        return null;

     label01:
        $r8 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] starts>;

        $i1 = $r8[$i0];

        $r8 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] lengths>;

        $i0 = $r8[$i0];

        $l2 = (long) $i1;

        virtualinvoke $r3.<java.io.FileInputStream: long skip(long)>($l2);

     label02:
        if $r3 != null goto label17;

        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>($r4);

        $l2 = virtualinvoke $r4.<java.io.File: long length()>();

        $i1 = (int) $l2;

     label03:
        $r1 = newarray (byte)[$i1];

        $i0 = 0;

     label04:
        if $i0 >= $i1 goto label05;

        $i3 = $i1 - $i0;

        $i3 = virtualinvoke $r3.<java.io.FileInputStream: int read(byte[],int,int)>($r1, $i0, $i3);

        if $i3 <= 0 goto label04;

        $i0 = $i0 + $i3;

        goto label04;

     label05:
        virtualinvoke $r3.<java.io.FileInputStream: void close()>();

     label06:
        $i1 = lengthof $r1;

        if $i1 >= 36 goto label08;

        return null;

     label07:
        $r9 := @caughtexception;

        $r10 = <java.util.logging.Logger: java.util.logging.Logger global>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IOException ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" retrieving time zone data");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void warning(java.lang.String)>($r6);

        virtualinvoke $r9.<java.lang.Throwable: void printStackTrace()>();

        goto label06;

     label08:
        $b4 = $r1[0];

        if $b4 != 84 goto label09;

        $b4 = $r1[1];

        if $b4 != 90 goto label09;

        $b4 = $r1[2];

        if $b4 != 105 goto label09;

        $b4 = $r1[3];

        if $b4 == 102 goto label10;

     label09:
        return null;

     label10:
        $i0 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: int read4(byte[],int)>($r1, 32);

        $i1 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: int read4(byte[],int)>($r1, 36);

        $r8 = newarray (int)[$i0];

        $i3 = 0;

     label11:
        if $i3 >= $i0 goto label12;

        $i5 = $i3 * 4;

        $i5 = $i5 + 44;

        $i5 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: int read4(byte[],int)>($r1, $i5);

        $r8[$i3] = $i5;

        $i3 = $i3 + 1;

        goto label11;

     label12:
        $i3 = $i0 * 4;

        $i3 = 44 + $i3;

        $r11 = newarray (byte)[$i0];

        $i5 = 0;

     label13:
        if $i5 >= $i0 goto label14;

        $i6 = $i3 + $i5;

        $b4 = $r1[$i6];

        $r11[$i5] = $b4;

        $i5 = $i5 + 1;

        goto label13;

     label14:
        $i0 = $i3 + $i0;

        $r12 = newarray (int)[$i1];

        $r13 = newarray (byte)[$i1];

        $r0 = newarray (byte)[$i1];

        $i3 = 0;

     label15:
        if $i3 >= $i1 goto label16;

        $i5 = $i3 * 6;

        $i5 = $i5 + $i0;

        $i5 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: int read4(byte[],int)>($r1, $i5);

        $r12[$i3] = $i5;

        $i5 = $i3 * 6;

        $i5 = $i5 + $i0;

        $i5 = $i5 + 4;

        $b4 = $r1[$i5];

        $r13[$i3] = $b4;

        $i5 = $i3 * 6;

        $i5 = $i5 + $i0;

        $i5 = $i5 + 5;

        $b4 = $r1[$i5];

        $r0[$i3] = $b4;

        $i3 = $i3 + 1;

        goto label15;

     label16:
        $i1 = $i1 * 6;

        $i1 = $i0 + $i1;

        $r14 = new org.apache.harmony.luni.internal.util.ZoneInfo;

        specialinvoke $r14.<org.apache.harmony.luni.internal.util.ZoneInfo: void <init>(java.lang.String,int[],byte[],int[],byte[],byte[],byte[],int)>($r2, $r8, $r11, $r12, $r13, $r0, $r1, $i1);

        return $r14;

     label17:
        $i1 = $i0;

        goto label03;

     label18:
        $i0 = 0;

        goto label02;

        catch java.io.IOException from label05 to label06 with label07;
    }

    public static java.lang.String[] getAvailableIDs()
    {
        java.lang.String[] $r0;

        $r0 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String[] _getAvailableIDs(int,boolean)>(0, 0);

        return $r0;
    }

    public static java.lang.String[] getAvailableIDs(int)
    {
        int $i0;
        java.lang.String[] $r0;

        $i0 := @parameter0: int;

        $r0 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String[] _getAvailableIDs(int,boolean)>($i0, 1);

        return $r0;
    }

    public static java.util.TimeZone getDefault()
    {
        java.lang.Object $r0;
        java.util.TimeZone $r1;
        java.lang.String $r2;
        org.apache.harmony.luni.internal.util.TimezoneGetter $r3;
        int $i0;
        java.lang.Throwable $r4;

        $r0 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.Object lock>;

        entermonitor $r0;

     label1:
        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.util.TimeZone defaultZone>;

        if $r1 == null goto label3;

        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.util.TimeZone defaultZone>;

        exitmonitor $r0;

     label2:
        return $r1;

     label3:
        $r2 = null;

        $r3 = staticinvoke <org.apache.harmony.luni.internal.util.TimezoneGetter: org.apache.harmony.luni.internal.util.TimezoneGetter getInstance()>();

        if $r3 == null goto label4;

        $r2 = virtualinvoke $r3.<org.apache.harmony.luni.internal.util.TimezoneGetter: java.lang.String getId()>();

     label4:
        if $r2 == null goto label7;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label7;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>($r2);

     label5:
        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.util.TimeZone defaultZone> = $r1;

        exitmonitor $r0;

     label6:
        return $r1;

     label7:
        $r1 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("localtime");

        goto label5;

     label8:
        $r4 := @caughtexception;

        exitmonitor $r0;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label6 with label8;
        catch java.lang.Throwable from label7 to label9 with label8;
    }

    public static java.util.TimeZone getTimeZone(java.lang.String)
    {
        java.lang.String $r0;
        boolean $z0;
        org.apache.harmony.luni.internal.util.ZoneInfoDB$MinimalTimeZone $r1;
        int $i0;
        java.util.TimeZone $r2;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label3;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("GMT");

        if $z0 != 0 goto label1;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC");

        if $z0 == 0 goto label2;

     label1:
        $r1 = new org.apache.harmony.luni.internal.util.ZoneInfoDB$MinimalTimeZone;

        specialinvoke $r1.<org.apache.harmony.luni.internal.util.ZoneInfoDB$MinimalTimeZone: void <init>(int)>(0);

        virtualinvoke $r1.<java.util.TimeZone: void setID(java.lang.String)>($r0);

        return $r1;

     label2:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("GMT");

        if $z0 == 0 goto label3;

        $r1 = new org.apache.harmony.luni.internal.util.ZoneInfoDB$MinimalTimeZone;

        $i0 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfoDB: int parseNumericZone(java.lang.String)>($r0);

        $i0 = $i0 * 1000;

        specialinvoke $r1.<org.apache.harmony.luni.internal.util.ZoneInfoDB$MinimalTimeZone: void <init>(int)>($i0);

        return $r1;

     label3:
        $r2 = staticinvoke <org.apache.harmony.luni.internal.util.ZoneInfo: java.util.TimeZone getTimeZone(java.lang.String)>($r0);

        if $r2 == null goto label4;

        return $r2;

     label4:
        $r1 = new org.apache.harmony.luni.internal.util.ZoneInfoDB$MinimalTimeZone;

        specialinvoke $r1.<org.apache.harmony.luni.internal.util.ZoneInfoDB$MinimalTimeZone: void <init>(int)>(0);

        virtualinvoke $r1.<java.util.TimeZone: void setID(java.lang.String)>("GMT");

        return $r1;
    }

    public static java.lang.String getVersion()
    {
        java.lang.String r0;

        r0 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String version>;

        return r0;
    }

    private static int parseNumericZone(java.lang.String)
    {
        java.lang.String $r0;
        int $i0, $i3, $i4, $i5;
        boolean $z0;
        char $c1;
        byte $b2;

        $r0 := @parameter0: java.lang.String;

        if $r0 != null goto label01;

        return 0;

     label01:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean startsWith(java.lang.String)>("GMT");

        if $z0 != 0 goto label02;

        return 0;

     label02:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 3 goto label03;

        return 0;

     label03:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3);

        if $c1 != 43 goto label08;

        $b2 = 1;

     label04:
        $i0 = 0;

        $z0 = 0;

        $i3 = 4;

     label05:
        $i4 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i3 >= $i4 goto label06;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c1 != 58 goto label10;

        $i3 = $i3 + 1;

        $z0 = 1;

     label06:
        $i4 = 0;

     label07:
        $i5 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i3 >= $i5 goto label13;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c1 < 48 goto label12;

        if $c1 > 57 goto label12;

        $i4 = $i4 * 10;

        $i4 = $i4 + $c1;

        $i4 = $i4 - 48;

        $i3 = $i3 + 1;

        goto label07;

     label08:
        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(3);

        if $c1 != 45 goto label09;

        $b2 = -1;

        goto label04;

     label09:
        return 0;

     label10:
        if $c1 < 48 goto label11;

        if $c1 > 57 goto label11;

        $i0 = $i0 * 10;

        $i0 = $i0 + $c1;

        $i0 = $i0 - 48;

        $i3 = $i3 + 1;

        goto label05;

     label11:
        return 0;

     label12:
        return 0;

     label13:
        if $z0 == 0 goto label14;

        $i0 = $i0 * 60;

        $i0 = $i0 + $i4;

        $i0 = $i0 * $b2;

        $i0 = $i0 * 60;

        return $i0;

     label14:
        if $i0 < 100 goto label15;

        $i3 = $i0 / 100;

        $i3 = $i3 * 60;

        $i0 = $i0 % 100;

        $i0 = $i3 + $i0;

        $i0 = $i0 * $b2;

        $i0 = $i0 * 60;

        return $i0;

     label15:
        $i0 = $i0 * 60;

        $i0 = $i0 * $b2;

        $i0 = $i0 * 60;

        return $i0;
    }

    private static int read4(byte[], int)
    {
        byte[] $r0;
        int $i0, $i3, $i4;
        byte $b1;
        short $s2;

        $r0 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        $i3 = $s2 << 24;

        $i4 = $i0 + 1;

        $b1 = $r0[$i4];

        $s2 = $b1 & 255;

        $i4 = $s2 << 16;

        $i3 = $i3 | $i4;

        $i4 = $i0 + 2;

        $b1 = $r0[$i4];

        $s2 = $b1 & 255;

        $i4 = $s2 << 8;

        $i3 = $i3 | $i4;

        $i0 = $i0 + 3;

        $b1 = $r0[$i0];

        $s2 = $b1 & 255;

        $i0 = $s2 << 0;

        $i0 = $i3 | $i0;

        return $i0;
    }

    private static void readDatabase() throws java.io.IOException
    {
        java.io.RandomAccessFile $r0;
        int $i0, $i1, $i3, $i4, $i5;
        java.lang.String $r1, $r7;
        char[] $r2;
        int[] $r3, $r5;
        byte[] $r4;
        long $l2;
        byte $b6;
        short $s8;
        char $c9;
        java.lang.String[] $r6;

        $r3 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] starts>;

        if $r3 == null goto label01;

        return;

     label01:
        $r0 = new java.io.RandomAccessFile;

        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String INDEX_FILE_NAME>;

        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r1, "r");

        $r4 = newarray (byte)[40];

        $l2 = virtualinvoke $r0.<java.io.RandomAccessFile: long length()>();

        $l2 = $l2 / 52L;

        $i1 = (int) $l2;

        $i3 = $i1 * 40;

        $r2 = newarray (char)[$i3];

        $r3 = newarray (int)[$i1];

        $i4 = 0;

        $r5 = newarray (int)[$i1];

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] starts> = $r5;

        $r5 = newarray (int)[$i1];

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] lengths> = $r5;

        $r5 = newarray (int)[$i1];

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] offsets> = $r5;

        $i3 = 0;

     label02:
        if $i3 >= $i1 goto label06;

        virtualinvoke $r0.<java.io.RandomAccessFile: void readFully(byte[])>($r4);

        $r5 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] starts>;

        $i0 = virtualinvoke $r0.<java.io.RandomAccessFile: int readInt()>();

        $r5[$i3] = $i0;

        $r5 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] lengths>;

        $i0 = virtualinvoke $r0.<java.io.RandomAccessFile: int readInt()>();

        $r5[$i3] = $i0;

        $r5 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: int[] offsets>;

        $i0 = virtualinvoke $r0.<java.io.RandomAccessFile: int readInt()>();

        $r5[$i3] = $i0;

        $i0 = lengthof $r4;

        $i5 = 0;

     label03:
        if $i5 >= $i0 goto label04;

        $b6 = $r4[$i5];

        if $b6 != 0 goto label05;

     label04:
        $r3[$i3] = $i4;

        $i3 = $i3 + 1;

        goto label02;

     label05:
        $b6 = $r4[$i5];

        $s8 = $b6 & 255;

        $c9 = (char) $s8;

        $r2[$i4] = $c9;

        $i5 = $i5 + 1;

        $i4 = $i4 + 1;

        goto label03;

     label06:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i4);

        $r6 = newarray (java.lang.String)[$i1];

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String[] names> = $r6;

        $i3 = 0;

     label07:
        if $i3 >= $i1 goto label10;

        $r6 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String[] names>;

        if $i3 != 0 goto label09;

        $i4 = 0;

     label08:
        $i0 = $r3[$i3];

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i4, $i0);

        $r6[$i3] = $r7;

        $i3 = $i3 + 1;

        goto label07;

     label09:
        $i4 = $i3 - 1;

        $i4 = $r3[$i4];

        goto label08;

     label10:
        virtualinvoke $r0.<java.io.RandomAccessFile: void close()>();

        return;
    }

    private static void readVersion() throws java.io.IOException
    {
        int $i0;
        byte[] $r0;
        java.io.RandomAccessFile $r1;
        java.lang.String $r2;
        long $l1;

        $r1 = new java.io.RandomAccessFile;

        $r2 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String VERSION_FILE_NAME>;

        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r2, "r");

        $l1 = virtualinvoke $r1.<java.io.RandomAccessFile: long length()>();

        $i0 = (int) $l1;

        $r0 = newarray (byte)[$i0];

        virtualinvoke $r1.<java.io.RandomAccessFile: void readFully(byte[])>($r0);

        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>($r0, 0, $i0, "ISO-8859-1");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.String version> = $r2;

        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

        return;
    }

    public static void setDefault(java.util.TimeZone)
    {
        java.util.TimeZone $r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: java.util.TimeZone;

        $r1 = <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.lang.Object lock>;

        entermonitor $r1;

     label1:
        <org.apache.harmony.luni.internal.util.ZoneInfoDB: java.util.TimeZone defaultZone> = null;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }
}
