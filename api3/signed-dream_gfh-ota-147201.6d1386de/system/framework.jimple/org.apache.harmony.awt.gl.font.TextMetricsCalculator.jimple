public class org.apache.harmony.awt.gl.font.TextMetricsCalculator extends java.lang.Object
{
    float advance;
    float ascent;
    int baselineIndex;
    private float[] baselineOffsets;
    org.apache.harmony.awt.gl.font.TextRunBreaker breaker;
    float descent;
    float leading;

    public void <init>(org.apache.harmony.awt.gl.font.TextRunBreaker)
    {
        org.apache.harmony.awt.gl.font.TextMetricsCalculator $r0;
        org.apache.harmony.awt.gl.font.TextRunBreaker $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextMetricsCalculator;

        $r1 := @parameter0: org.apache.harmony.awt.gl.font.TextRunBreaker;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float ascent> = 0.0F;

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float descent> = 0.0F;

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float leading> = 0.0F;

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float advance> = 0.0F;

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: org.apache.harmony.awt.gl.font.TextRunBreaker breaker> = $r1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: void checkBaselines()>();

        return;
    }

    public void checkBaselines()
    {
        org.apache.harmony.awt.gl.font.TextMetricsCalculator $r0;
        float $f0, $f1;
        java.util.HashMap $r1;
        org.apache.harmony.awt.gl.font.TextRunBreaker $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;
        boolean $z0;
        java.awt.Font $r5;
        char[] $r6;
        java.awt.font.FontRenderContext $r7;
        java.awt.font.LineMetrics $r8;
        float[] $r9;
        int $i0, $i2;
        byte $b1;
        java.awt.font.GraphicAttribute $r10;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextMetricsCalculator;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: org.apache.harmony.awt.gl.font.TextRunBreaker breaker>;

        $r1 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker: java.util.HashMap fonts>;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>(0);

        $r4 = virtualinvoke $r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $z0 = $r4 instanceof java.awt.Font;

        if $z0 == 0 goto label3;

        $r5 = (java.awt.Font) $r4;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: org.apache.harmony.awt.gl.font.TextRunBreaker breaker>;

        $r6 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker: char[] text>;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: org.apache.harmony.awt.gl.font.TextRunBreaker breaker>;

        $r7 = $r2.<org.apache.harmony.awt.gl.font.TextRunBreaker: java.awt.font.FontRenderContext frc>;

        $r8 = virtualinvoke $r5.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(char[],int,int,java.awt.font.FontRenderContext)>($r6, 0, 1, $r7);

        $r9 = virtualinvoke $r8.<java.awt.font.LineMetrics: float[] getBaselineOffsets()>();

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets> = $r9;

        $i0 = virtualinvoke $r8.<java.awt.font.LineMetrics: int getBaselineIndex()>();

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: int baselineIndex> = $i0;

     label1:
        $r9 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $i0 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: int baselineIndex>;

        $f0 = $r9[$i0];

        $b1 = $f0 cmpl 0.0F;

        if $b1 == 0 goto label8;

        $r9 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $i0 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: int baselineIndex>;

        $f0 = $r9[$i0];

        $i0 = 0;

     label2:
        $r9 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $i2 = lengthof $r9;

        if $i0 >= $i2 goto label9;

        $r9 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $f1 = $r9[$i0];

        $f1 = $f1 - $f0;

        $r9[$i0] = $f1;

        $i0 = $i0 + 1;

        goto label2;

     label3:
        $z0 = $r4 instanceof java.awt.font.GraphicAttribute;

        if $z0 == 0 goto label7;

        $r10 = (java.awt.font.GraphicAttribute) $r4;

        $i0 = virtualinvoke $r10.<java.awt.font.GraphicAttribute: int getAlignment()>();

        if $i0 == -1 goto label4;

        if $i0 != -2 goto label6;

     label4:
        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: int baselineIndex> = 0;

     label5:
        $r9 = newarray (float)[3];

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets> = $r9;

        $r9 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $r9[0] = 0.0F;

        $r9 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $f0 = virtualinvoke $r10.<java.awt.font.GraphicAttribute: float getDescent()>();

        $f1 = virtualinvoke $r10.<java.awt.font.GraphicAttribute: float getAscent()>();

        $f0 = $f0 - $f1;

        $f0 = $f0 / 2.0F;

        $r9[1] = $f0;

        $r9 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $f0 = virtualinvoke $r10.<java.awt.font.GraphicAttribute: float getAscent()>();

        $f0 = neg $f0;

        $r9[2] = $f0;

        goto label1;

     label6:
        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: int baselineIndex> = $i0;

        goto label5;

     label7:
        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: int baselineIndex> = 0;

        $r9 = newarray (float)[3];

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets> = $r9;

        goto label1;

     label8:
        return;

     label9:
        return;
    }

    void computeMetrics()
    {
        org.apache.harmony.awt.gl.font.TextMetricsCalculator $r0;
        int $i0, $i1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.harmony.awt.gl.font.BasicMetrics $r1;
        java.util.ArrayList $r2;
        org.apache.harmony.awt.gl.font.TextRunBreaker $r3;
        java.lang.Object $r4;
        org.apache.harmony.awt.gl.font.TextRunSegment $r5;
        float[] $r6;
        byte $b2;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextMetricsCalculator;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: org.apache.harmony.awt.gl.font.TextRunBreaker breaker>;

        $r2 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker: java.util.ArrayList runSegments>;

        $f2 = 0.0F;

        $f3 = 0.0F;

        $i1 = 0;

     label1:
        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 >= $i0 goto label4;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r5 = (org.apache.harmony.awt.gl.font.TextRunSegment) $r4;

        $r1 = $r5.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.BasicMetrics metrics>;

        $i0 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: int baseLineIndex>;

        if $i0 < 0 goto label3;

        $r6 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $i0 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: int baseLineIndex>;

        $f0 = $r6[$i0];

        $f1 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: float descent>;

        $f1 = $f1 + $f0;

        $f4 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float ascent>;

        $f5 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: float ascent>;

        $f0 = $f5 - $f0;

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f4, $f0);

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float ascent> = $f0;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float descent>;

        $f0 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float descent> = $f0;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float leading>;

        $f4 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: float leading>;

        $f1 = $f4 + $f1;

        $f1 = staticinvoke <java.lang.Math: float max(float,float)>($f0, $f1);

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float leading> = $f1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $f1 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: float ascent>;

        $f0 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: float descent>;

        $f1 = $f1 + $f0;

        $f2 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f1);

        $f0 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: float leading>;

        $f1 = $f0 + $f1;

        $f3 = staticinvoke <java.lang.Math: float max(float,float)>($f3, $f1);

        goto label2;

     label4:
        $b2 = $f3 cmpl 0.0F;

        if $b2 == 0 goto label5;

        $f1 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float descent>;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float ascent>;

        $f2 = $f2 - $f0;

        $f2 = staticinvoke <java.lang.Math: float max(float,float)>($f1, $f2);

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float descent> = $f2;

        $f2 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float leading>;

        $f1 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float ascent>;

        $f3 = $f3 - $f1;

        $f3 = staticinvoke <java.lang.Math: float max(float,float)>($f2, $f3);

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float leading> = $f3;

     label5:
        $f3 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float leading>;

        $f2 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float descent>;

        $f3 = $f3 - $f2;

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float leading> = $f3;

        $f3 = 0.0F;

        $i1 = 0;

     label6:
        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 >= $i0 goto label7;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: org.apache.harmony.awt.gl.font.TextRunBreaker breaker>;

        $i0 = virtualinvoke $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker: int getSegmentFromVisualOrder(int)>($i1);

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (org.apache.harmony.awt.gl.font.TextRunSegment) $r4;

        $r1 = $r5.<org.apache.harmony.awt.gl.font.TextRunSegment: org.apache.harmony.awt.gl.font.BasicMetrics metrics>;

        $i0 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: int baseLineIndex>;

        $f2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float getBaselineOffset(int)>($i0);

        $f1 = $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: float superScriptOffset>;

        $f2 = $f2 + $f1;

        $r5.<org.apache.harmony.awt.gl.font.TextRunSegment: float y> = $f2;

        $r5.<org.apache.harmony.awt.gl.font.TextRunSegment: float x> = $f3;

        $f2 = virtualinvoke $r5.<org.apache.harmony.awt.gl.font.TextRunSegment: float getAdvance()>();

        $f3 = $f3 + $f2;

        $i1 = $i1 + 1;

        goto label6;

     label7:
        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float advance> = $f3;

        return;
    }

    public void correctAdvance(org.apache.harmony.awt.gl.font.BasicMetrics)
    {
        org.apache.harmony.awt.gl.font.TextMetricsCalculator $r0;
        org.apache.harmony.awt.gl.font.BasicMetrics $r1;
        java.util.ArrayList $r2;
        org.apache.harmony.awt.gl.font.TextRunBreaker $r3;
        int $i0;
        java.lang.Object $r4;
        org.apache.harmony.awt.gl.font.TextRunSegment $r5;
        float $f0, $f1;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextMetricsCalculator;

        $r1 := @parameter0: org.apache.harmony.awt.gl.font.BasicMetrics;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: org.apache.harmony.awt.gl.font.TextRunBreaker breaker>;

        $r2 = $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker: java.util.ArrayList runSegments>;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: org.apache.harmony.awt.gl.font.TextRunBreaker breaker>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

        $i0 = virtualinvoke $r3.<org.apache.harmony.awt.gl.font.TextRunBreaker: int getSegmentFromVisualOrder(int)>($i0);

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (org.apache.harmony.awt.gl.font.TextRunSegment) $r4;

        $f0 = $r5.<org.apache.harmony.awt.gl.font.TextRunSegment: float x>;

        $f1 = virtualinvoke $r5.<org.apache.harmony.awt.gl.font.TextRunSegment: float getAdvance()>();

        $f0 = $f0 + $f1;

        $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float advance> = $f0;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float advance>;

        $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: float advance> = $f0;

        return;
    }

    public org.apache.harmony.awt.gl.font.BasicMetrics createMetrics()
    {
        org.apache.harmony.awt.gl.font.TextMetricsCalculator $r0;
        org.apache.harmony.awt.gl.font.BasicMetrics $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextMetricsCalculator;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: void computeMetrics()>();

        $r1 = new org.apache.harmony.awt.gl.font.BasicMetrics;

        specialinvoke $r1.<org.apache.harmony.awt.gl.font.BasicMetrics: void <init>(org.apache.harmony.awt.gl.font.TextMetricsCalculator)>($r0);

        return $r1;
    }

    float getBaselineOffset(int)
    {
        org.apache.harmony.awt.gl.font.TextMetricsCalculator $r0;
        int $i0;
        java.lang.String $r1;
        float[] $r2;
        float $f0;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextMetricsCalculator;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $f0 = $r2[$i0];

        return $f0;

     label1:
        if $i0 != -2 goto label2;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float descent>;

        return $f0;

     label2:
        if $i0 != -1 goto label3;

        $f0 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float ascent>;

        $f0 = neg $f0;

        return $f0;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        $r1 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String)>("awt.3F");

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r3;
    }

    public float[] getBaselineOffsets()
    {
        org.apache.harmony.awt.gl.font.TextMetricsCalculator $r0;
        float[] $r1, $r2, $r3;
        int $i0;

        $r0 := @this: org.apache.harmony.awt.gl.font.TextMetricsCalculator;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $i0 = lengthof $r1;

        $r1 = newarray (float)[$i0];

        $r2 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $r3 = $r0.<org.apache.harmony.awt.gl.font.TextMetricsCalculator: float[] baselineOffsets>;

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r1, 0, $i0);

        return $r1;
    }
}
