public class com.android.server.WindowManagerService extends android.view.IWindowManager$Stub implements com.android.server.Watchdog$Monitor
{
    static final boolean BLUR;
    private static final float CHEEK_THRESHOLD;
    static final boolean DEBUG;
    static final boolean DEBUG_ANIM;
    static final boolean DEBUG_APP_TRANSITIONS;
    static final boolean DEBUG_FOCUS;
    static final boolean DEBUG_INPUT;
    static final boolean DEBUG_INPUT_METHOD;
    static final boolean DEBUG_LAYERS;
    static final boolean DEBUG_ORIENTATION;
    static final boolean DEBUG_REORDER;
    static final boolean DEBUG_STARTING_WINDOW;
    static final boolean DEBUG_VISIBILITY;
    static final int DEFAULT_DIM_DURATION;
    static final int DIM_DURATION_MULTIPLIER;
    private static final int EVENT_CHEEK;
    private static final int EVENT_IGNORE_DURATION;
    private static final int EVENT_NONE;
    private static final int EVENT_UNKNOWN;
    static final int KEY_REPEAT_DELAY;
    static final int KEY_REPEAT_FIRST_DELAY;
    static final int LOG_WM_NO_SURFACE_MEMORY;
    static final int MAX_ANIMATION_DURATION;
    static final boolean PROFILE_ORIENTATION;
    static final boolean SHOW_TRANSACTIONS;
    private static final java.lang.String SYSTEM_SECURE;
    static final java.lang.String TAG;
    static final int TYPE_LAYER_MULTIPLIER;
    static final int TYPE_LAYER_OFFSET;
    static final int UPDATE_FOCUS_NORMAL;
    static final int UPDATE_FOCUS_PLACING_SURFACES;
    static final int UPDATE_FOCUS_WILL_ASSIGN_LAYERS;
    static final int UPDATE_FOCUS_WILL_PLACE_SURFACES;
    static final int WINDOW_LAYER_MULTIPLIER;
    static final boolean localLOGV;
    static final android.view.animation.Animation sDummyAnimation;
    final android.app.IActivityManager mActivityManager;
    boolean mAnimationPending;
    final java.util.ArrayList mAppTokens;
    boolean mAppTransitionReady;
    boolean mAppTransitionTimeout;
    int mAppsFreezingScreen;
    final com.android.internal.app.IBatteryStats mBatteryStats;
    boolean mBlurShown;
    android.view.Surface mBlurSurface;
    final java.util.ArrayList mClosingApps;
    final android.content.Context mContext;
    com.android.server.WindowManagerService$WindowState mCurrentFocus;
    final java.util.ArrayList mDestroySurface;
    float mDimCurrentAlpha;
    float mDimDeltaPerMs;
    boolean mDimShown;
    android.view.Surface mDimSurface;
    float mDimTargetAlpha;
    android.view.Display mDisplay;
    boolean mDisplayEnabled;
    boolean mDisplayFrozen;
    private float mEventSize;
    private int mEventState;
    final java.util.ArrayList mExitingAppTokens;
    final java.util.ArrayList mExitingTokens;
    boolean mFatTouch;
    final java.util.ArrayList mFinishedStarting;
    com.android.server.WindowManagerService$AppWindowToken mFocusedApp;
    java.util.ArrayList mForceRemoves;
    int mForcedAppOrientation;
    long mFreezeGcPending;
    android.view.SurfaceSession mFxSession;
    com.android.server.WindowManagerService$H mH;
    final boolean mHaveInputMethods;
    com.android.server.WindowManagerService$Session mHoldingScreenOn;
    private boolean mInLayout;
    boolean mInTouchMode;
    int mInputMethodAnimLayerAdjustment;
    final java.util.ArrayList mInputMethodDialogs;
    com.android.internal.view.IInputMethodManager mInputMethodManager;
    com.android.server.WindowManagerService$WindowState mInputMethodTarget;
    boolean mInputMethodTargetWaitingAnim;
    com.android.server.WindowManagerService$WindowState mInputMethodWindow;
    final com.android.server.WindowManagerService$InputDispatcherThread mInputThread;
    final com.android.server.WindowManagerService$KeyWaiter mKeyWaiter;
    final android.os.TokenWatcher mKeyguardDisabled;
    long mLastDimAnimTime;
    com.android.server.WindowManagerService$WindowState mLastFocus;
    int mLastRotationFlags;
    boolean mLayoutNeeded;
    final boolean mLimitedAlphaCompositing;
    java.util.ArrayList mLosingFocus;
    int mNextAppTransition;
    final java.util.ArrayList mOpeningApps;
    final java.util.ArrayList mPendingRemove;
    final android.view.WindowManagerPolicy mPolicy;
    com.android.server.PowerManagerService mPowerManager;
    final com.android.server.WindowManagerService$KeyQ mQueue;
    int mRequestedRotation;
    final java.util.ArrayList mResizingWindows;
    int mRotation;
    java.util.ArrayList mRotationWatchers;
    boolean mSafeMode;
    android.os.PowerManager$WakeLock mScreenFrozenLock;
    final java.util.HashSet mSessions;
    boolean mSkipAppTransitionAnimation;
    boolean mStartingIconInTransition;
    boolean mSystemBooted;
    final android.content.res.Configuration mTempConfiguration;
    final android.graphics.Rect mTempRect;
    final float[] mTmpFloats;
    final java.util.ArrayList mTokenList;
    final java.util.HashMap mTokenMap;
    int mTransactionSequence;
    float mTransitionAnimationScale;
    com.android.server.WindowManagerService$WindowState mUpcomingInputMethodTarget;
    private com.android.server.ViewServer mViewServer;
    private boolean mWaitingUntilKeyguardReenabled;
    float mWindowAnimationScale;
    final java.util.HashMap mWindowMap;
    final java.util.ArrayList mWindows;
    boolean mWindowsFreezingScreen;

    static void <clinit>()
    {
        com.android.server.WindowManagerService$DummyAnimation $r0;

        <com.android.server.WindowManagerService: int WINDOW_LAYER_MULTIPLIER> = 5;

        <com.android.server.WindowManagerService: int UPDATE_FOCUS_WILL_PLACE_SURFACES> = 3;

        <com.android.server.WindowManagerService: int UPDATE_FOCUS_WILL_ASSIGN_LAYERS> = 1;

        <com.android.server.WindowManagerService: int UPDATE_FOCUS_PLACING_SURFACES> = 2;

        <com.android.server.WindowManagerService: int UPDATE_FOCUS_NORMAL> = 0;

        <com.android.server.WindowManagerService: int TYPE_LAYER_OFFSET> = 1000;

        <com.android.server.WindowManagerService: int TYPE_LAYER_MULTIPLIER> = 10000;

        <com.android.server.WindowManagerService: java.lang.String TAG> = "WindowManager";

        <com.android.server.WindowManagerService: java.lang.String SYSTEM_SECURE> = "ro.secure";

        <com.android.server.WindowManagerService: boolean SHOW_TRANSACTIONS> = 0;

        <com.android.server.WindowManagerService: boolean PROFILE_ORIENTATION> = 0;

        <com.android.server.WindowManagerService: int MAX_ANIMATION_DURATION> = 10000;

        <com.android.server.WindowManagerService: int LOG_WM_NO_SURFACE_MEMORY> = 31000;

        <com.android.server.WindowManagerService: int KEY_REPEAT_FIRST_DELAY> = 750;

        <com.android.server.WindowManagerService: int KEY_REPEAT_DELAY> = 50;

        <com.android.server.WindowManagerService: int EVENT_UNKNOWN> = 0;

        <com.android.server.WindowManagerService: int EVENT_NONE> = 0;

        <com.android.server.WindowManagerService: int EVENT_IGNORE_DURATION> = 300;

        <com.android.server.WindowManagerService: int EVENT_CHEEK> = 0;

        <com.android.server.WindowManagerService: int DIM_DURATION_MULTIPLIER> = 6;

        <com.android.server.WindowManagerService: int DEFAULT_DIM_DURATION> = 200;

        <com.android.server.WindowManagerService: boolean DEBUG_VISIBILITY> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_STARTING_WINDOW> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_REORDER> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_ORIENTATION> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_LAYERS> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_INPUT_METHOD> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_INPUT> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_FOCUS> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_APP_TRANSITIONS> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG_ANIM> = 0;

        <com.android.server.WindowManagerService: boolean DEBUG> = 0;

        <com.android.server.WindowManagerService: float CHEEK_THRESHOLD> = 0.6F;

        <com.android.server.WindowManagerService: boolean BLUR> = 1;

        $r0 = new com.android.server.WindowManagerService$DummyAnimation;

        specialinvoke $r0.<com.android.server.WindowManagerService$DummyAnimation: void <init>()>();

        <com.android.server.WindowManagerService: android.view.animation.Animation sDummyAnimation> = $r0;

        return;
    }

    private void <init>(android.content.Context, com.android.server.PowerManagerService, boolean)
    {
        com.android.server.WindowManagerService $r0;
        android.content.Context $r1;
        com.android.server.PowerManagerService $r2, $r16;
        boolean $z0;
        com.android.server.WindowManagerService$PolicyThread $r3;
        com.android.server.WindowManagerService$1 $r4;
        android.os.Handler $r5;
        android.view.WindowManagerPolicy $r6;
        java.util.HashSet $r7;
        java.util.HashMap $r8;
        java.util.ArrayList $r9;
        float[] $r10;
        com.android.server.WindowManagerService$H $r11;
        com.android.server.WindowManagerService$KeyWaiter $r12;
        android.graphics.Rect $r13;
        android.content.res.Configuration $r14;
        android.content.res.Resources $r15;
        java.lang.Object $r17;
        android.os.PowerManager $r18;
        android.os.PowerManager$WakeLock $r19;
        android.app.IActivityManager $r20;
        com.android.internal.app.IBatteryStats $r21;
        android.content.ContentResolver $r22;
        float $f0;
        com.android.server.WindowManagerService$KeyQ $r23;
        com.android.server.WindowManagerService$InputDispatcherThread $r24;
        java.lang.InterruptedException $r25;
        com.android.server.Watchdog $r26;
        java.lang.Throwable $r27;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.android.server.PowerManagerService;

        $z0 := @parameter2: boolean;

        specialinvoke $r0.<android.view.IWindowManager$Stub: void <init>()>();

        $r0.<com.android.server.WindowManagerService: boolean mWaitingUntilKeyguardReenabled> = 0;

        $r4 = new com.android.server.WindowManagerService$1;

        $r5 = new android.os.Handler;

        specialinvoke $r5.<android.os.Handler: void <init>()>();

        specialinvoke $r4.<com.android.server.WindowManagerService$1: void <init>(com.android.server.WindowManagerService,android.os.Handler,java.lang.String)>($r0, $r5, "WindowManagerService.mKeyguardDisabled");

        $r0.<com.android.server.WindowManagerService: android.os.TokenWatcher mKeyguardDisabled> = $r4;

        $r6 = staticinvoke <com.android.internal.policy.PolicyManager: android.view.WindowManagerPolicy makeNewWindowManager()>();

        $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy> = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.HashSet mSessions> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap> = $r8;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap> = $r8;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mFinishedStarting> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mResizingWindows> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mPendingRemove> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mDestroySurface> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mLosingFocus> = $r9;

        $r0.<com.android.server.WindowManagerService: int mTransactionSequence> = 0;

        $r10 = newarray (float)[9];

        $r0.<com.android.server.WindowManagerService: float[] mTmpFloats> = $r10;

        $r0.<com.android.server.WindowManagerService: boolean mDisplayEnabled> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mSystemBooted> = 0;

        $r0.<com.android.server.WindowManagerService: int mRotation> = 0;

        $r0.<com.android.server.WindowManagerService: int mRequestedRotation> = 0;

        $r0.<com.android.server.WindowManagerService: int mForcedAppOrientation> = -1;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mRotationWatchers> = $r9;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        $r0.<com.android.server.WindowManagerService: boolean mAnimationPending> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mWindowsFreezingScreen> = 0;

        $r0.<com.android.server.WindowManagerService: long mFreezeGcPending> = 0L;

        $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen> = 0;

        $r0.<com.android.server.WindowManagerService: int mNextAppTransition> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mAppTransitionReady> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mAppTransitionTimeout> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mStartingIconInTransition> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mSkipAppTransitionAnimation> = 0;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps> = $r9;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps> = $r9;

        $r0.<com.android.server.WindowManagerService: boolean mFatTouch> = 0;

        $r11 = new com.android.server.WindowManagerService$H;

        specialinvoke $r11.<com.android.server.WindowManagerService$H: void <init>(com.android.server.WindowManagerService)>($r0);

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH> = $r11;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus> = null;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mLastFocus> = null;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget> = null;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mUpcomingInputMethodTarget> = null;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow> = null;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs> = $r9;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp> = null;

        $r0.<com.android.server.WindowManagerService: float mWindowAnimationScale> = 1.0F;

        $r0.<com.android.server.WindowManagerService: float mTransitionAnimationScale> = 1.0F;

        $r12 = new com.android.server.WindowManagerService$KeyWaiter;

        specialinvoke $r12.<com.android.server.WindowManagerService$KeyWaiter: void <init>(com.android.server.WindowManagerService)>($r0);

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter> = $r12;

        $r0.<com.android.server.WindowManagerService: boolean mInTouchMode> = 0;

        $r13 = new android.graphics.Rect;

        specialinvoke $r13.<android.graphics.Rect: void <init>()>();

        $r0.<com.android.server.WindowManagerService: android.graphics.Rect mTempRect> = $r13;

        $r14 = new android.content.res.Configuration;

        specialinvoke $r14.<android.content.res.Configuration: void <init>()>();

        $r0.<com.android.server.WindowManagerService: android.content.res.Configuration mTempConfiguration> = $r14;

        $r0.<com.android.server.WindowManagerService: int mEventState> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mInLayout> = 0;

        $r0.<com.android.server.WindowManagerService: android.content.Context mContext> = $r1;

        $r0.<com.android.server.WindowManagerService: boolean mHaveInputMethods> = $z0;

        $r15 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r15.<android.content.res.Resources: boolean getBoolean(int)>(17629184);

        $r0.<com.android.server.WindowManagerService: boolean mLimitedAlphaCompositing> = $z0;

        $r0.<com.android.server.WindowManagerService: com.android.server.PowerManagerService mPowerManager> = $r2;

        $r16 = $r0.<com.android.server.WindowManagerService: com.android.server.PowerManagerService mPowerManager>;

        $r6 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        virtualinvoke $r16.<com.android.server.PowerManagerService: void setPolicy(android.view.WindowManagerPolicy)>($r6);

        $r17 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r18 = (android.os.PowerManager) $r17;

        $r19 = virtualinvoke $r18.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "SCREEN_FROZEN");

        $r0.<com.android.server.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock> = $r19;

        $r19 = $r0.<com.android.server.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock>;

        virtualinvoke $r19.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r20 = staticinvoke <android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>();

        $r0.<com.android.server.WindowManagerService: android.app.IActivityManager mActivityManager> = $r20;

        $r21 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        $r0.<com.android.server.WindowManagerService: com.android.internal.app.IBatteryStats mBatteryStats> = $r21;

        $r22 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f0 = $r0.<com.android.server.WindowManagerService: float mWindowAnimationScale>;

        $f0 = staticinvoke <android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>($r22, "window_animation_scale", $f0);

        $r0.<com.android.server.WindowManagerService: float mWindowAnimationScale> = $f0;

        $r22 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $f0 = $r0.<com.android.server.WindowManagerService: float mTransitionAnimationScale>;

        $f0 = staticinvoke <android.provider.Settings$System: float getFloat(android.content.ContentResolver,java.lang.String,float)>($r22, "transition_animation_scale", $f0);

        $r0.<com.android.server.WindowManagerService: float mTransitionAnimationScale> = $f0;

        $r23 = new com.android.server.WindowManagerService$KeyQ;

        specialinvoke $r23.<com.android.server.WindowManagerService$KeyQ: void <init>(com.android.server.WindowManagerService)>($r0);

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue> = $r23;

        $r24 = new com.android.server.WindowManagerService$InputDispatcherThread;

        specialinvoke $r24.<com.android.server.WindowManagerService$InputDispatcherThread: void <init>(com.android.server.WindowManagerService)>($r0);

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$InputDispatcherThread mInputThread> = $r24;

        $r3 = new com.android.server.WindowManagerService$PolicyThread;

        $r6 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        specialinvoke $r3.<com.android.server.WindowManagerService$PolicyThread: void <init>(android.view.WindowManagerPolicy,com.android.server.WindowManagerService,android.content.Context,com.android.server.PowerManagerService)>($r6, $r0, $r1, $r2);

        virtualinvoke $r3.<java.lang.Thread: void start()>();

        entermonitor $r3;

     label01:
        $z0 = $r3.<com.android.server.WindowManagerService$PolicyThread: boolean mRunning>;

     label02:
        if $z0 != 0 goto label06;

     label03:
        virtualinvoke $r3.<java.lang.Object: void wait()>();

     label04:
        goto label01;

     label05:
        $r25 := @caughtexception;

        goto label01;

     label06:
        exitmonitor $r3;

     label07:
        $r24 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$InputDispatcherThread mInputThread>;

        virtualinvoke $r24.<java.lang.Thread: void start()>();

        $r26 = staticinvoke <com.android.server.Watchdog: com.android.server.Watchdog getInstance()>();

        virtualinvoke $r26.<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>($r0);

        return;

     label08:
        $r27 := @caughtexception;

     label09:
        exitmonitor $r3;

     label10:
        throw $r27;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void <init>(android.content.Context, com.android.server.PowerManagerService, boolean, com.android.server.WindowManagerService$1)
    {
        com.android.server.WindowManagerService $r0;
        android.content.Context $r1;
        com.android.server.PowerManagerService $r2;
        boolean $z0;
        com.android.server.WindowManagerService$1 $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.android.server.PowerManagerService;

        $z0 := @parameter2: boolean;

        $r3 := @parameter3: com.android.server.WindowManagerService$1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)>($r1, $r2, $z0);

        return;
    }

    static boolean access$002(com.android.server.WindowManagerService, boolean)
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $z0 := @parameter1: boolean;

        $r0.<com.android.server.WindowManagerService: boolean mWaitingUntilKeyguardReenabled> = $z0;

        return $z0;
    }

    static int access$1000(com.android.server.WindowManagerService, android.view.MotionEvent)
    {
        com.android.server.WindowManagerService $r0;
        android.view.MotionEvent $r1;
        int $i0;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 := @parameter1: android.view.MotionEvent;

        $i0 = specialinvoke $r0.<com.android.server.WindowManagerService: int eventType(android.view.MotionEvent)>($r1);

        return $i0;
    }

    static boolean access$1100(com.android.server.WindowManagerService, android.view.KeyEvent, int, int)
    {
        com.android.server.WindowManagerService $r0;
        android.view.KeyEvent $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 := @parameter1: android.view.KeyEvent;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean dispatchKey(android.view.KeyEvent,int,int)>($r1, $i0, $i1);

        return $z0;
    }

    static boolean access$1200(com.android.server.WindowManagerService, com.android.server.KeyInputQueue$QueuedEvent, android.view.MotionEvent, int, int)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.KeyInputQueue$QueuedEvent $r1;
        android.view.MotionEvent $r2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 := @parameter1: com.android.server.KeyInputQueue$QueuedEvent;

        $r2 := @parameter2: android.view.MotionEvent;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $z0 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)>($r1, $r2, $i0, $i1);

        return $z0;
    }

    static boolean access$1300(com.android.server.WindowManagerService, com.android.server.KeyInputQueue$QueuedEvent, android.view.MotionEvent, int, int)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.KeyInputQueue$QueuedEvent $r1;
        android.view.MotionEvent $r2;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 := @parameter1: com.android.server.KeyInputQueue$QueuedEvent;

        $r2 := @parameter2: android.view.MotionEvent;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $z0 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)>($r1, $r2, $i0, $i1);

        return $z0;
    }

    static void access$1400(com.android.server.WindowManagerService, com.android.server.WindowManagerService$Session, android.view.IWindow, android.graphics.Region)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        android.graphics.Region $r3;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 := @parameter1: com.android.server.WindowManagerService$Session;

        $r2 := @parameter2: android.view.IWindow;

        $r3 := @parameter3: android.graphics.Region;

        specialinvoke $r0.<com.android.server.WindowManagerService: void setTransparentRegionWindow(com.android.server.WindowManagerService$Session,android.view.IWindow,android.graphics.Region)>($r1, $r2, $r3);

        return;
    }

    static void access$1600(com.android.server.WindowManagerService, com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 := @parameter1: com.android.server.WindowManagerService$WindowState;

        specialinvoke $r0.<com.android.server.WindowManagerService: void applyEnterAnimationLocked(com.android.server.WindowManagerService$WindowState)>($r1);

        return;
    }

    static boolean access$1700(com.android.server.WindowManagerService, com.android.server.WindowManagerService$WindowState, int, boolean)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;
        int $i0;
        boolean $z0;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 := @parameter1: com.android.server.WindowManagerService$WindowState;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z0 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean applyAnimationLocked(com.android.server.WindowManagerService$WindowState,int,boolean)>($r1, $i0, $z0);

        return $z0;
    }

    static void access$1800(com.android.server.WindowManagerService)
    {
        com.android.server.WindowManagerService $r0;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        return;
    }

    static com.android.server.WindowManagerService$WindowState access$800(com.android.server.WindowManagerService)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 = specialinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState getFocusedWindowLocked()>();

        return $r1;
    }

    static void access$900(com.android.server.WindowManagerService, com.android.server.WindowManagerService$WindowState, int)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;
        int $i0;

        $r0 := @parameter0: com.android.server.WindowManagerService;

        $r1 := @parameter1: com.android.server.WindowManagerService$WindowState;

        $i0 := @parameter2: int;

        specialinvoke $r0.<com.android.server.WindowManagerService: void wakeupIfNeeded(com.android.server.WindowManagerService$WindowState,int)>($r1, $i0);

        return;
    }

    private void addWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState, boolean)
    {
        com.android.server.WindowManagerService$WindowState $r0, $r5, $r14, $r15;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.server.WindowManagerService $r1;
        android.view.IWindow $r2;
        com.android.server.WindowManagerService$WindowToken $r3, $r13;
        java.util.ArrayList $r4, $r6;
        com.android.server.WindowManagerService$AppWindowToken $r7;
        android.view.WindowManager$LayoutParams $r8;
        java.lang.Object $r9, $r10;
        java.util.HashMap $r11;
        android.os.IBinder $r12;

        $r1 := @this: com.android.server.WindowManagerService;

        $r0 := @parameter0: com.android.server.WindowManagerService$WindowState;

        $z0 := @parameter1: boolean;

        $r2 = $r0.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

        $r3 = $r0.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowToken mToken>;

        $r4 = $r1.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $r5 = $r0.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowState mAttachedWindow>;

        if $r5 != null goto label24;

        $r6 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $i3 = $i2;

        $r7 = $r3.<com.android.server.WindowManagerService$WindowToken: com.android.server.WindowManagerService$AppWindowToken appWindowToken>;

        if $r7 == null goto label19;

        $i0 = $i2 - 1;

        if $i0 < 0 goto label05;

        $r8 = $r0.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r8.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 1 goto label03;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r9 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(0);

        specialinvoke $r1.<com.android.server.WindowManagerService: void placeWindowBefore(java.lang.Object,com.android.server.WindowManagerService$WindowState)>($r9, $r0);

        $i3 = 0;

     label01:
        if $z0 == 0 goto label02;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i3, $r0);

     label02:
        $r7 = $r0.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r7 == null goto label41;

        if $z0 == 0 goto label42;

        $r7 = $r0.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r4 = $r7.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

        return;

     label03:
        $r7 = $r0.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r7 == null goto label04;

        $r6 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r9 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = $r7.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow>;

        if $r9 != $r5 goto label04;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r9 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        specialinvoke $r1.<com.android.server.WindowManagerService: void placeWindowBefore(java.lang.Object,com.android.server.WindowManagerService$WindowState)>($r9, $r0);

        $i3 = $i2 + -1;

        goto label01;

     label04:
        $i1 = specialinvoke $r1.<com.android.server.WindowManagerService: int findIdxBasedOnAppTokens(com.android.server.WindowManagerService$WindowState)>($r0);

        if $i1 == -1 goto label01;

        $i1 = $i1 + 1;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i1, $r0);

        goto label01;

     label05:
        $r6 = $r1.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

        $r9 = null;

     label06:
        if $i0 < 0 goto label07;

        $r6 = $r1.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r10 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r7 = (com.android.server.WindowManagerService$AppWindowToken) $r10;

        if $r7 != $r3 goto label09;

        $i0 = $i0 + -1;

     label07:
        if $r9 == null goto label12;

        $r11 = $r1.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r5 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r2 = $r5.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

        $r12 = interfaceinvoke $r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        $r13 = (com.android.server.WindowManagerService$WindowToken) $r10;

        if $r13 == null goto label39;

        $r4 = $r13.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label39;

        $r4 = $r13.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r10 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r10;

        $i1 = $r5.<com.android.server.WindowManagerService$WindowState: int mSubLayer>;

        if $i1 >= 0 goto label39;

        $r9 = $r5;

     label08:
        specialinvoke $r1.<com.android.server.WindowManagerService: void placeWindowBefore(java.lang.Object,com.android.server.WindowManagerService$WindowState)>($r9, $r0);

        goto label01;

     label09:
        $r6 = $r7.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label40;

        $r6 = $r7.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r9 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(0);

     label10:
        $i0 = $i0 + -1;

        goto label06;

     label11:
        $i0 = $i0 + -1;

     label12:
        if $i0 < 0 goto label13;

        $r6 = $r1.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r10 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r7 = (com.android.server.WindowManagerService$AppWindowToken) $r10;

        $r6 = $r7.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if $i2 <= 0 goto label11;

        $r6 = $r7.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i0 = $i2 - 1;

        $r9 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i0);

     label13:
        if $r9 == null goto label15;

        $r11 = $r1.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r5 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r2 = $r5.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

        $r12 = interfaceinvoke $r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r10 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r12);

        $r13 = (com.android.server.WindowManagerService$WindowToken) $r10;

        if $r13 == null goto label38;

        $r4 = $r13.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if $i1 <= 0 goto label38;

        $r4 = $r13.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i1 = $i1 - 1;

        $r10 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r10;

        $i1 = $r5.<com.android.server.WindowManagerService$WindowState: int mSubLayer>;

        if $i1 < 0 goto label38;

        $r9 = $r5;

     label14:
        specialinvoke $r1.<com.android.server.WindowManagerService: void placeWindowAfter(java.lang.Object,com.android.server.WindowManagerService$WindowState)>($r9, $r0);

        goto label01;

     label15:
        $i0 = $r0.<com.android.server.WindowManagerService$WindowState: int mBaseLayer>;

        $i2 = 0;

     label16:
        if $i2 >= $i1 goto label17;

        $r9 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r9;

        $i4 = $r5.<com.android.server.WindowManagerService$WindowState: int mBaseLayer>;

        if $i4 <= $i0 goto label18;

     label17:
        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, $r0);

        goto label01;

     label18:
        $i2 = $i2 + 1;

        goto label16;

     label19:
        $i0 = $r0.<com.android.server.WindowManagerService$WindowState: int mBaseLayer>;

        $i1 = $i1 - 1;

     label20:
        if $i1 < 0 goto label21;

        $r9 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r9;

        $i2 = $r5.<com.android.server.WindowManagerService$WindowState: int mBaseLayer>;

        if $i2 > $i0 goto label23;

        $i1 = $i1 + 1;

     label21:
        if $i1 >= 0 goto label22;

        $i1 = 0;

     label22:
        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i1, $r0);

        goto label01;

     label23:
        $i1 = $i1 + -1;

        goto label20;

     label24:
        $r4 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i3 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $i1 = $r0.<com.android.server.WindowManagerService$WindowState: int mSubLayer>;

        $i0 = -2147483648;

        $r14 = null;

        $i2 = 0;

     label25:
        if $i2 >= $i3 goto label29;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r9 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r15 = (com.android.server.WindowManagerService$WindowState) $r9;

        $i4 = $r15.<com.android.server.WindowManagerService$WindowState: int mSubLayer>;

        if $i4 < $i0 goto label26;

        $i0 = $i4;

        $r14 = $r15;

     label26:
        if $i1 >= 0 goto label32;

        if $i4 < $i1 goto label34;

        if $z0 == 0 goto label27;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, $r0);

     label27:
        if $i4 < 0 goto label31;

        $r15 = $r5;

     label28:
        specialinvoke $r1.<com.android.server.WindowManagerService: void placeWindowBefore(java.lang.Object,com.android.server.WindowManagerService$WindowState)>($r15, $r0);

     label29:
        if $i2 < $i3 goto label02;

        if $z0 == 0 goto label30;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r0);

     label30:
        if $i1 >= 0 goto label35;

        specialinvoke $r1.<com.android.server.WindowManagerService: void placeWindowBefore(java.lang.Object,com.android.server.WindowManagerService$WindowState)>($r5, $r0);

        goto label02;

     label31:
        goto label28;

     label32:
        if $i4 <= $i1 goto label34;

        if $z0 == 0 goto label33;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, $r0);

     label33:
        specialinvoke $r1.<com.android.server.WindowManagerService: void placeWindowBefore(java.lang.Object,com.android.server.WindowManagerService$WindowState)>($r15, $r0);

        goto label29;

     label34:
        $i2 = $i2 + 1;

        goto label25;

     label35:
        if $i0 < 0 goto label37;

        $r5 = $r14;

     label36:
        specialinvoke $r1.<com.android.server.WindowManagerService: void placeWindowAfter(java.lang.Object,com.android.server.WindowManagerService$WindowState)>($r5, $r0);

        goto label02;

     label37:
        goto label36;

     label38:
        goto label14;

     label39:
        goto label08;

     label40:
        goto label10;

     label41:
        return;

     label42:
        return;
    }

    private boolean applyAnimationLocked(com.android.server.WindowManagerService$AppWindowToken, android.view.WindowManager$LayoutParams, int, boolean)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$AppWindowToken $r1;
        android.view.WindowManager$LayoutParams $r2;
        int $i0;
        boolean $z0, $z1;
        android.view.animation.Animation $r3;
        byte $b1;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$AppWindowToken;

        $r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $z1 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z1 != 0 goto label21;

        $b1 = 0;

        lookupswitch($i0)
        {
            case 6: goto label03;
            case 7: goto label06;
            case 8: goto label09;
            case 9: goto label12;
            case 10: goto label15;
            case 11: goto label18;
            default: goto label01;
        };

     label01:
        $r3 = specialinvoke $r0.<com.android.server.WindowManagerService: android.view.animation.Animation loadAnimation(android.view.WindowManager$LayoutParams,int)>($r2, $b1);

        if $r3 == null goto label02;

        virtualinvoke $r1.<com.android.server.WindowManagerService$AppWindowToken: void setAnimation(android.view.animation.Animation)>($r3);

     label02:
        $r3 = $r1.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation>;

        if $r3 == null goto label22;

        return 1;

     label03:
        if $z0 == 0 goto label05;

        $b1 = 4;

     label04:
        goto label01;

     label05:
        $b1 = 5;

        goto label04;

     label06:
        if $z0 == 0 goto label08;

        $b1 = 6;

     label07:
        goto label01;

     label08:
        $b1 = 7;

        goto label07;

     label09:
        if $z0 == 0 goto label11;

        $b1 = 8;

     label10:
        goto label01;

     label11:
        $b1 = 9;

        goto label10;

     label12:
        if $z0 == 0 goto label14;

        $b1 = 10;

     label13:
        goto label01;

     label14:
        $b1 = 11;

        goto label13;

     label15:
        if $z0 == 0 goto label17;

        $b1 = 12;

     label16:
        goto label01;

     label17:
        $b1 = 13;

        goto label16;

     label18:
        if $z0 == 0 goto label20;

        $b1 = 14;

     label19:
        goto label01;

     label20:
        $b1 = 15;

        goto label19;

     label21:
        virtualinvoke $r1.<com.android.server.WindowManagerService$AppWindowToken: void clearAnimation()>();

        goto label02;

     label22:
        return 0;
    }

    private boolean applyAnimationLocked(com.android.server.WindowManagerService$WindowState, int, boolean)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;
        int $i0, $i1;
        boolean $z0, $z1;
        android.view.WindowManagerPolicy $r2;
        byte $b2;
        android.view.animation.Animation $r3;
        android.content.Context $r4;
        android.view.WindowManager$LayoutParams $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowState;

        $i0 := @parameter1: int;

        $z0 := @parameter2: boolean;

        $z1 = $r1.<com.android.server.WindowManagerService$WindowState: boolean mLocalAnimating>;

        if $z1 == 0 goto label01;

        $z1 = $r1.<com.android.server.WindowManagerService$WindowState: boolean mAnimationIsEntrance>;

        if $z1 != $z0 goto label01;

        return 1;

     label01:
        $z1 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z1 != 0 goto label10;

        $r2 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i1 = interfaceinvoke $r2.<android.view.WindowManagerPolicy: int selectAnimationLw(android.view.WindowManagerPolicy$WindowState,int)>($r1, $i0);

        $b2 = -1;

        $r3 = null;

        if $i1 == 0 goto label04;

        $r4 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r4, $i1);

     label02:
        if $r3 == null goto label03;

        virtualinvoke $r1.<com.android.server.WindowManagerService$WindowState: void setAnimation(android.view.animation.Animation)>($r3);

        $r1.<com.android.server.WindowManagerService$WindowState: boolean mAnimationIsEntrance> = $z0;

     label03:
        $r3 = $r1.<com.android.server.WindowManagerService$WindowState: android.view.animation.Animation mAnimation>;

        if $r3 == null goto label11;

        return 1;

     label04:
        lookupswitch($i0)
        {
            case 1: goto label06;
            case 2: goto label07;
            case 3: goto label08;
            case 4: goto label09;
            default: goto label05;
        };

     label05:
        if $b2 < 0 goto label02;

        $r5 = $r1.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r3 = specialinvoke $r0.<com.android.server.WindowManagerService: android.view.animation.Animation loadAnimation(android.view.WindowManager$LayoutParams,int)>($r5, $b2);

        goto label02;

     label06:
        $b2 = 0;

        goto label05;

     label07:
        $b2 = 1;

        goto label05;

     label08:
        $b2 = 2;

        goto label05;

     label09:
        $b2 = 3;

        goto label05;

     label10:
        virtualinvoke $r1.<com.android.server.WindowManagerService$WindowState: void clearAnimation()>();

        goto label03;

     label11:
        return 0;
    }

    private void applyEnterAnimationLocked(com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;
        byte $b0;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowState;

        $b0 = 3;

        $z0 = $r1.<com.android.server.WindowManagerService$WindowState: boolean mEnterAnimationPending>;

        if $z0 == 0 goto label1;

        $r1.<com.android.server.WindowManagerService$WindowState: boolean mEnterAnimationPending> = 0;

        $b0 = 1;

     label1:
        specialinvoke $r0.<com.android.server.WindowManagerService: boolean applyAnimationLocked(com.android.server.WindowManagerService$WindowState,int,boolean)>($r1, $b0, 1);

        return;
    }

    private final void assignLayersLocked()
    {
        com.android.server.WindowManagerService $r0;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r2;
        com.android.server.WindowManagerService$WindowState $r3;
        boolean $z0;
        com.android.server.WindowManagerService$AppWindowToken $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = 0;

        $i2 = 0;

        $i3 = 0;

     label1:
        if $i3 >= $i0 goto label9;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r3 = (com.android.server.WindowManagerService$WindowState) $r2;

        $i4 = $r3.<com.android.server.WindowManagerService$WindowState: int mBaseLayer>;

        if $i4 == $i1 goto label2;

        $z0 = $r3.<com.android.server.WindowManagerService$WindowState: boolean mIsImWindow>;

        if $z0 == 0 goto label6;

     label2:
        $i2 = $i2 + 5;

        $r3.<com.android.server.WindowManagerService$WindowState: int mLayer> = $i2;

     label3:
        $r4 = $r3.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mTargetAppToken>;

        if $r4 == null goto label7;

        $i4 = $r3.<com.android.server.WindowManagerService$WindowState: int mLayer>;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mTargetAppToken>;

        $i5 = $r4.<com.android.server.WindowManagerService$AppWindowToken: int animLayerAdjustment>;

        $i4 = $i4 + $i5;

        $r3.<com.android.server.WindowManagerService$WindowState: int mAnimLayer> = $i4;

     label4:
        $z0 = $r3.<com.android.server.WindowManagerService$WindowState: boolean mIsImWindow>;

        if $z0 == 0 goto label5;

        $i4 = $r3.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        $i5 = $r0.<com.android.server.WindowManagerService: int mInputMethodAnimLayerAdjustment>;

        $i4 = $i4 + $i5;

        $r3.<com.android.server.WindowManagerService$WindowState: int mAnimLayer> = $i4;

     label5:
        $i3 = $i3 + 1;

        goto label1;

     label6:
        $i2 = $r3.<com.android.server.WindowManagerService$WindowState: int mBaseLayer>;

        $i1 = $i2;

        $r3.<com.android.server.WindowManagerService$WindowState: int mLayer> = $i2;

        goto label3;

     label7:
        $r4 = $r3.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r4 == null goto label8;

        $i4 = $r3.<com.android.server.WindowManagerService$WindowState: int mLayer>;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $i5 = $r4.<com.android.server.WindowManagerService$AppWindowToken: int animLayerAdjustment>;

        $i4 = $i4 + $i5;

        $r3.<com.android.server.WindowManagerService$WindowState: int mAnimLayer> = $i4;

        goto label4;

     label8:
        $i4 = $r3.<com.android.server.WindowManagerService$WindowState: int mLayer>;

        $r3.<com.android.server.WindowManagerService$WindowState: int mAnimLayer> = $i4;

        goto label4;

     label9:
        return;
    }

    static boolean canBeImeTarget(com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService$WindowState $r0;
        int $i0;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r1;

        $r0 := @parameter0: com.android.server.WindowManagerService$WindowState;

        $r1 = $r0.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i0 = $i0 & 131080;

        if $i0 == 0 goto label1;

        if $i0 != 131080 goto label2;

     label1:
        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService$WindowState: boolean isVisibleOrAdding()>();

        return $z0;

     label2:
        return 0;
    }

    private com.android.server.WindowManagerService$WindowState computeFocusedWindowLocked()
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1, $i2;
        com.android.server.WindowManagerService$AppWindowToken $r1, $r8;
        com.android.server.WindowManagerService$WindowState $r2, $r6;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowToken $r5;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r2 = null;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = $i1 - 1;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i2 = $i2 - 1;

        if $i2 < 0 goto label2;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

     label1:
        if $i1 < 0 goto label8;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r6 = (com.android.server.WindowManagerService$WindowState) $r4;

        $r1 = $r6.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r1 == null goto label3;

        $z0 = $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean removed>;

        if $z0 == 0 goto label3;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        $r5 = null;

        goto label1;

     label3:
        if $r1 == null goto label7;

        if $r5 == null goto label7;

        if $r1 == $r5 goto label7;

        $r7 = $r6.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r7.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 3 goto label7;

        $i0 = $i2;

     label4:
        if $i2 <= 0 goto label6;

        $r8 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp>;

        if $r5 != $r8 goto label5;

        return null;

     label5:
        $i2 = $i2 + -1;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

        if $r5 != $r1 goto label4;

     label6:
        if $r1 == $r5 goto label7;

        $i2 = $i0;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

     label7:
        $z0 = virtualinvoke $r6.<com.android.server.WindowManagerService$WindowState: boolean canReceiveKeys()>();

        if $z0 == 0 goto label9;

        $r2 = $r6;

     label8:
        return $r2;

     label9:
        $i1 = $i1 + -1;

        goto label1;
    }

    private boolean dispatchKey(android.view.KeyEvent, int, int)
    {
        com.android.server.WindowManagerService $r0;
        android.view.KeyEvent $r1;
        int $i0, $i1, $i2;
        com.android.server.WindowManagerService$KeyWaiter $r2;
        java.lang.Object $r3, $r6;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        com.android.server.WindowManagerService$WindowState $r7;
        com.android.server.WindowManagerService$Session $r8;
        android.content.Context $r9;
        java.util.HashMap $r10;
        android.view.IWindow $r11;
        java.lang.Throwable $r12;
        android.os.RemoteException $r13;
        java.util.NoSuchElementException $r14;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.KeyEvent;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r3 = virtualinvoke $r2.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean)>($r1, null, null, 0, 0);

        if $r3 != null goto label01;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No focus window, dropping: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r5);

        return 0;

     label01:
        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r6 = $r2.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object CONSUMED_EVENT_TOKEN>;

        if $r3 != $r6 goto label02;

        return 1;

     label02:
        $r7 = (com.android.server.WindowManagerService$WindowState) $r3;

        if $i1 == 0 goto label03;

        $r8 = $r7.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i2 = $r8.<com.android.server.WindowManagerService$Session: int mUid>;

        if $i1 == $i2 goto label03;

        $r9 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r9.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INJECT_EVENTS", $i0, $i1);

        if $i2 == 0 goto label03;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission denied: injecting key event from pid ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to window ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" owned by uid ");

        $r8 = $r7.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i0 = $r8.<com.android.server.WindowManagerService$Session: int mUid>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r5);

        return 0;

     label03:
        $r10 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r10;

     label04:
        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r2.<com.android.server.WindowManagerService$KeyWaiter: void bindTargetWindowLocked(com.android.server.WindowManagerService$WindowState)>($r7);

        exitmonitor $r10;

     label05:
        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r2.<com.android.server.WindowManagerService$KeyWaiter: void recordDispatchState(android.view.KeyEvent,com.android.server.WindowManagerService$WindowState)>($r1, $r7);

        $r11 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

     label06:
        interfaceinvoke $r11.<android.view.IWindow: void dispatchKey(android.view.KeyEvent)>($r1);

     label07:
        return 1;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor $r10;

     label10:
        throw $r12;

     label11:
        $r13 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WINDOW DIED during key dispatch: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r5);

        $r8 = $r7.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $r11 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

     label12:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void removeWindow(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r8, $r11);

     label13:
        return 0;

     label14:
        $r14 := @caughtexception;

        goto label13;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch android.os.RemoteException from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.util.NoSuchElementException from label12 to label13 with label14;
    }

    private boolean dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent, android.view.MotionEvent, int, int)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.KeyInputQueue$QueuedEvent $r1;
        int $i0, $i1, $i2, $i3, $i5;
        android.view.MotionEvent $r2, $r19;
        com.android.server.WindowManagerService$KeyWaiter $r3;
        java.lang.Object $r4, $r9;
        com.android.server.PowerManagerService $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        com.android.server.WindowManagerService$KeyQ $r8;
        com.android.server.WindowManagerService$WindowState $r10, $r17, $r18;
        long $l4;
        com.android.server.WindowManagerService$Session $r11;
        android.content.Context $r12;
        android.view.WindowManager$LayoutParams $r13;
        android.view.WindowManagerPolicy $r14;
        boolean $z0, $z1, $z2;
        java.util.HashMap $r15;
        android.view.IWindow $r16;
        android.graphics.Rect $r20;
        float $f0, $f1;
        java.lang.Throwable $r21;
        android.os.RemoteException $r22, $r23;
        java.util.NoSuchElementException $r24;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.KeyInputQueue$QueuedEvent;

        $r2 := @parameter1: android.view.MotionEvent;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r4 = virtualinvoke $r3.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean)>(null, $r1, $r2, 1, 0);

        $i2 = virtualinvoke $r2.<android.view.MotionEvent: int getAction()>();

        $i3 = $i2;

        if $i2 != 1 goto label04;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r3.<com.android.server.WindowManagerService$KeyWaiter: com.android.server.WindowManagerService$WindowState mMotionTarget> = null;

        $r5 = $r0.<com.android.server.WindowManagerService: com.android.server.PowerManagerService mPowerManager>;

        virtualinvoke $r5.<com.android.server.PowerManagerService: void logPointerUpEvent()>();

     label01:
        if $r4 != null goto label05;

        $i0 = virtualinvoke $r2.<android.view.MotionEvent: int getAction()>();

        if $i0 == 2 goto label02;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No window to dispatch pointer action ");

        $i0 = virtualinvoke $r2.<android.view.MotionEvent: int getAction()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

     label02:
        if $r1 == null goto label03;

        $r8 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r8.<com.android.server.KeyInputQueue: void recycleEvent(com.android.server.KeyInputQueue$QueuedEvent)>($r1);

     label03:
        virtualinvoke $r2.<android.view.MotionEvent: void recycle()>();

        return 0;

     label04:
        if $i2 != 0 goto label01;

        $r5 = $r0.<com.android.server.WindowManagerService: com.android.server.PowerManagerService mPowerManager>;

        virtualinvoke $r5.<com.android.server.PowerManagerService: void logPointerDownEvent()>();

        goto label01;

     label05:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r9 = $r3.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object CONSUMED_EVENT_TOKEN>;

        if $r4 != $r9 goto label07;

        if $r1 == null goto label06;

        $r8 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r8.<com.android.server.KeyInputQueue: void recycleEvent(com.android.server.KeyInputQueue$QueuedEvent)>($r1);

     label06:
        virtualinvoke $r2.<android.view.MotionEvent: void recycle()>();

        return 1;

     label07:
        $r10 = (com.android.server.WindowManagerService$WindowState) $r4;

        $l4 = virtualinvoke $r2.<android.view.MotionEvent: long getEventTime()>();

        if $i1 == 0 goto label09;

        $r11 = $r10.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i5 = $r11.<com.android.server.WindowManagerService$Session: int mUid>;

        if $i1 == $i5 goto label09;

        $r12 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $i5 = virtualinvoke $r12.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INJECT_EVENTS", $i0, $i1);

        if $i5 == 0 goto label09;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission denied: injecting pointer event from pid ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to window ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" owned by uid ");

        $r11 = $r10.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i0 = $r11.<com.android.server.WindowManagerService$Session: int mUid>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        if $r1 == null goto label08;

        $r8 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r8.<com.android.server.KeyInputQueue: void recycleEvent(com.android.server.KeyInputQueue$QueuedEvent)>($r1);

     label08:
        virtualinvoke $r2.<android.view.MotionEvent: void recycle()>();

        return 0;

     label09:
        $r13 = $r10.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r13.<android.view.WindowManager$LayoutParams: int flags>;

        $i0 = $i0 & 32768;

        if $i0 == 0 goto label16;

        $r14 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r14.<android.view.WindowManagerPolicy: boolean isCheekPressedAgainstScreen(android.view.MotionEvent)>($r2);

        $z1 = 0;

        if $i2 != 0 goto label12;

        $r0.<com.android.server.WindowManagerService: boolean mFatTouch> = 0;

        if $z0 == 0 goto label10;

        $r0.<com.android.server.WindowManagerService: boolean mFatTouch> = 1;

        $z1 = 1;

     label10:
        if $z1 == 0 goto label16;

        if $r1 == null goto label11;

        $r8 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r8.<com.android.server.KeyInputQueue: void recycleEvent(com.android.server.KeyInputQueue$QueuedEvent)>($r1);

     label11:
        virtualinvoke $r2.<android.view.MotionEvent: void recycle()>();

        return 0;

     label12:
        if $i2 != 1 goto label14;

        $z2 = $r0.<com.android.server.WindowManagerService: boolean mFatTouch>;

        if $z2 == 0 goto label13;

        $r0.<com.android.server.WindowManagerService: boolean mFatTouch> = 0;

        $z1 = 1;

        goto label10;

     label13:
        if $z0 == 0 goto label10;

        virtualinvoke $r2.<android.view.MotionEvent: void setAction(int)>(3);

        $i3 = 3;

        goto label10;

     label14:
        if $i2 != 2 goto label10;

        $z2 = $r0.<com.android.server.WindowManagerService: boolean mFatTouch>;

        if $z2 == 0 goto label15;

        $z1 = 1;

        goto label10;

     label15:
        if $z0 == 0 goto label10;

        virtualinvoke $r2.<android.view.MotionEvent: void setAction(int)>(3);

        $i3 = 3;

        $r0.<com.android.server.WindowManagerService: boolean mFatTouch> = 1;

        goto label10;

     label16:
        $r15 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r15;

        if $r1 == null goto label22;

        if $i3 != 2 goto label22;

     label17:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r3.<com.android.server.WindowManagerService$KeyWaiter: void bindTargetWindowLocked(com.android.server.WindowManagerService$WindowState,int,com.android.server.KeyInputQueue$QueuedEvent)>($r10, 1, $r1);

        $r2 = null;

     label18:
        exitmonitor $r15;

     label19:
        $r16 = $r10.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

     label20:
        interfaceinvoke $r16.<android.view.IWindow: void dispatchPointer(android.view.MotionEvent,long)>($r2, $l4);

     label21:
        return 1;

     label22:
        if $i3 != 0 goto label28;

     label23:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r17 = $r3.<com.android.server.WindowManagerService$KeyWaiter: com.android.server.WindowManagerService$WindowState mOutsideTouchTargets>;

        $r18 = $r17;

        if $r17 == null goto label28;

        $r19 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>($r2);

        virtualinvoke $r19.<android.view.MotionEvent: void setAction(int)>(4);

     label24:
        $r20 = $r18.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mFrame>;

        $i0 = $r20.<android.graphics.Rect: int left>;

        $f0 = (float) $i0;

        $f0 = neg $f0;

        $i0 = $r20.<android.graphics.Rect: int top>;

        $f1 = (float) $i0;

        $f1 = neg $f1;

        virtualinvoke $r19.<android.view.MotionEvent: void offsetLocation(float,float)>($f0, $f1);

     label25:
        $r16 = $r18.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

     label26:
        interfaceinvoke $r16.<android.view.IWindow: void dispatchPointer(android.view.MotionEvent,long)>($r19, $l4);

     label27:
        $i0 = $r20.<android.graphics.Rect: int left>;

        $f0 = (float) $i0;

        $i0 = $r20.<android.graphics.Rect: int top>;

        $f1 = (float) $i0;

        virtualinvoke $r19.<android.view.MotionEvent: void offsetLocation(float,float)>($f0, $f1);

        $r17 = $r18.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowState mNextOutsideTouch>;

        $r18 = $r17;

        if $r17 != null goto label24;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r3.<com.android.server.WindowManagerService$KeyWaiter: com.android.server.WindowManagerService$WindowState mOutsideTouchTargets> = null;

     label28:
        $r20 = $r10.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mFrame>;

        $i0 = $r20.<android.graphics.Rect: int left>;

        $f0 = (float) $i0;

        $f0 = neg $f0;

        $i0 = $r20.<android.graphics.Rect: int top>;

        $f1 = (float) $i0;

        $f1 = neg $f1;

        virtualinvoke $r2.<android.view.MotionEvent: void offsetLocation(float,float)>($f0, $f1);

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r3.<com.android.server.WindowManagerService$KeyWaiter: void bindTargetWindowLocked(com.android.server.WindowManagerService$WindowState)>($r10);

        goto label18;

     label29:
        $r21 := @caughtexception;

        exitmonitor $r15;

     label30:
        throw $r21;

     label31:
        $r22 := @caughtexception;

     label32:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WINDOW DIED during outside motion dispatch: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r7);

     label33:
        goto label27;

     label34:
        $r23 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WINDOW DIED during motion dispatch: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r7);

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r3.<com.android.server.WindowManagerService$KeyWaiter: com.android.server.WindowManagerService$WindowState mMotionTarget> = null;

        $r11 = $r10.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $r16 = $r10.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

     label35:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void removeWindow(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r11, $r16);

     label36:
        return 0;

     label37:
        $r24 := @caughtexception;

        goto label36;

        catch java.lang.Throwable from label17 to label19 with label29;
        catch android.os.RemoteException from label20 to label21 with label34;
        catch java.lang.Throwable from label23 to label25 with label29;
        catch android.os.RemoteException from label26 to label27 with label31;
        catch java.lang.Throwable from label25 to label27 with label29;
        catch java.lang.Throwable from label27 to label30 with label29;
        catch java.lang.Throwable from label32 to label33 with label29;
        catch java.util.NoSuchElementException from label35 to label36 with label37;
    }

    private boolean dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent, android.view.MotionEvent, int, int)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.KeyInputQueue$QueuedEvent $r1;
        int $i0, $i1, $i2;
        android.view.MotionEvent $r2;
        com.android.server.WindowManagerService$KeyWaiter $r3;
        java.lang.Object $r4, $r8;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        com.android.server.WindowManagerService$KeyQ $r7;
        com.android.server.WindowManagerService$WindowState $r9;
        com.android.server.WindowManagerService$Session $r10;
        android.content.Context $r11;
        long $l3;
        java.util.HashMap $r12;
        android.view.IWindow $r13;
        java.lang.Throwable $r14;
        android.os.RemoteException $r15;
        java.util.NoSuchElementException $r16;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.KeyInputQueue$QueuedEvent;

        $r2 := @parameter1: android.view.MotionEvent;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r4 = virtualinvoke $r3.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean)>(null, $r1, $r2, 0, 0);

        if $r4 != null goto label02;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No focus window, dropping trackball: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r6);

        if $r1 == null goto label01;

        $r7 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r7.<com.android.server.KeyInputQueue: void recycleEvent(com.android.server.KeyInputQueue$QueuedEvent)>($r1);

     label01:
        virtualinvoke $r2.<android.view.MotionEvent: void recycle()>();

        return 0;

     label02:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r8 = $r3.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object CONSUMED_EVENT_TOKEN>;

        if $r4 != $r8 goto label04;

        if $r1 == null goto label03;

        $r7 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r7.<com.android.server.KeyInputQueue: void recycleEvent(com.android.server.KeyInputQueue$QueuedEvent)>($r1);

     label03:
        virtualinvoke $r2.<android.view.MotionEvent: void recycle()>();

        return 1;

     label04:
        $r9 = (com.android.server.WindowManagerService$WindowState) $r4;

        if $i1 == 0 goto label06;

        $r10 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i2 = $r10.<com.android.server.WindowManagerService$Session: int mUid>;

        if $i1 == $i2 goto label06;

        $r11 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $i2 = virtualinvoke $r11.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.INJECT_EVENTS", $i0, $i1);

        if $i2 == 0 goto label06;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission denied: injecting key event from pid ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to window ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" owned by uid ");

        $r10 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i0 = $r10.<com.android.server.WindowManagerService$Session: int mUid>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r6);

        if $r1 == null goto label05;

        $r7 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r7.<com.android.server.KeyInputQueue: void recycleEvent(com.android.server.KeyInputQueue$QueuedEvent)>($r1);

     label05:
        virtualinvoke $r2.<android.view.MotionEvent: void recycle()>();

        return 0;

     label06:
        $l3 = virtualinvoke $r2.<android.view.MotionEvent: long getEventTime()>();

        $r12 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r12;

        if $r1 == null goto label12;

     label07:
        $i0 = virtualinvoke $r2.<android.view.MotionEvent: int getAction()>();

        if $i0 != 2 goto label12;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r3.<com.android.server.WindowManagerService$KeyWaiter: void bindTargetWindowLocked(com.android.server.WindowManagerService$WindowState,int,com.android.server.KeyInputQueue$QueuedEvent)>($r9, 2, $r1);

        $r2 = null;

     label08:
        exitmonitor $r12;

     label09:
        $r13 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

     label10:
        interfaceinvoke $r13.<android.view.IWindow: void dispatchTrackball(android.view.MotionEvent,long)>($r2, $l3);

     label11:
        return 1;

     label12:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r3.<com.android.server.WindowManagerService$KeyWaiter: void bindTargetWindowLocked(com.android.server.WindowManagerService$WindowState)>($r9);

        goto label08;

     label13:
        $r14 := @caughtexception;

        exitmonitor $r12;

     label14:
        throw $r14;

     label15:
        $r15 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WINDOW DIED during key dispatch: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r6);

        $r10 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $r13 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

     label16:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void removeWindow(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r10, $r13);

     label17:
        return 0;

     label18:
        $r16 := @caughtexception;

        goto label17;

        catch java.lang.Throwable from label07 to label09 with label13;
        catch android.os.RemoteException from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label14 with label13;
        catch java.util.NoSuchElementException from label16 to label17 with label18;
    }

    private int eventType(android.view.MotionEvent)
    {
        com.android.server.WindowManagerService $r0;
        android.view.MotionEvent $r1;
        float $f0, $f1;
        int $i0, $i2;
        byte $b1;
        long $l3, $l4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.MotionEvent;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getSize()>();

        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        lookupswitch($i0)
        {
            case 0: goto label02;
            case 1: goto label04;
            case 2: goto label07;
            default: goto label01;
        };

     label01:
        return 0;

     label02:
        $r0.<com.android.server.WindowManagerService: float mEventSize> = $f0;

        $f0 = $r0.<com.android.server.WindowManagerService: float mEventSize>;

        $b1 = $f0 cmpl 0.6F;

        if $b1 <= 0 goto label03;

        return 1;

     label03:
        return 2;

     label04:
        $f1 = $r0.<com.android.server.WindowManagerService: float mEventSize>;

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label05;

        $r0.<com.android.server.WindowManagerService: float mEventSize> = $f0;

     label05:
        $f0 = $r0.<com.android.server.WindowManagerService: float mEventSize>;

        $b1 = $f0 cmpl 0.6F;

        if $b1 <= 0 goto label06;

        return 1;

     label06:
        return 4;

     label07:
        $i0 = virtualinvoke $r1.<android.view.MotionEvent: int getHistorySize()>();

        $f1 = $r0.<com.android.server.WindowManagerService: float mEventSize>;

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label08;

        $r0.<com.android.server.WindowManagerService: float mEventSize> = $f0;

     label08:
        $f0 = $r0.<com.android.server.WindowManagerService: float mEventSize>;

        $b1 = $f0 cmpl 0.6F;

        if $b1 <= 0 goto label09;

        return 1;

     label09:
        $i2 = 0;

     label10:
        if $i2 >= $i0 goto label13;

        $f0 = virtualinvoke $r1.<android.view.MotionEvent: float getHistoricalSize(int)>($i2);

        $f1 = $r0.<com.android.server.WindowManagerService: float mEventSize>;

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label11;

        $r0.<com.android.server.WindowManagerService: float mEventSize> = $f0;

     label11:
        $f0 = $r0.<com.android.server.WindowManagerService: float mEventSize>;

        $b1 = $f0 cmpl 0.6F;

        if $b1 <= 0 goto label12;

        return 1;

     label12:
        $i2 = $i2 + 1;

        goto label10;

     label13:
        $l3 = virtualinvoke $r1.<android.view.MotionEvent: long getEventTime()>();

        $l4 = virtualinvoke $r1.<android.view.MotionEvent: long getDownTime()>();

        $l4 = $l4 + 300L;

        $b1 = $l3 cmp $l4;

        if $b1 >= 0 goto label14;

        return 2;

     label14:
        return 3;
    }

    public static android.view.WindowManager$LayoutParams findAnimations(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList)
    {
        java.util.ArrayList $r0, $r1, $r2, $r6;
        android.view.WindowManager$LayoutParams $r3, $r8;
        byte $b0;
        int $i1, $i2, $i3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$AppWindowToken $r5;
        boolean $z0;
        com.android.server.WindowManagerService$WindowState $r7;

        $r0 := @parameter0: java.util.ArrayList;

        $r1 := @parameter1: java.util.ArrayList;

        $r2 := @parameter2: java.util.ArrayList;

        $r3 = null;

        $b0 = 0;

        $i1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $i1 = $i1 - 1;

     label1:
        if $i1 < 0 goto label8;

        $r4 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r5 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean contains(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label7;

     label2:
        $r6 = $r5.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i2 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

     label3:
        if $i2 <= 0 goto label7;

        $i2 = $i2 + -1;

        $r6 = $r5.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r4 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r7 = (com.android.server.WindowManagerService$WindowState) $r4;

        $r8 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r8.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 == 1 goto label4;

        $r8 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r8.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 3 goto label6;

     label4:
        $z0 = $r5.<com.android.server.WindowManagerService$AppWindowToken: boolean appFullscreen>;

        if $z0 == 0 goto label5;

        $r3 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        return $r3;

     label5:
        if $b0 >= 2 goto label3;

        $r3 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $b0 = 2;

        goto label3;

     label6:
        if $b0 >= 1 goto label3;

        $r8 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i3 = $r8.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 2 goto label3;

        $r3 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $b0 = 1;

        goto label3;

     label7:
        $i1 = $i1 + -1;

        goto label1;

     label8:
        return $r3;
    }

    private int findIdxBasedOnAppTokens(com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1, $r5;
        java.util.ArrayList $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3, $r6;
        int $i0;
        java.lang.Object $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowState;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label1;

        return -1;

     label1:
        $i0 = $i0 - 1;

     label2:
        if $i0 < 0 goto label4;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r4;

        $r6 = $r5.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r3 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r6 != $r3 goto label3;

        return $i0;

     label3:
        $i0 = $i0 + -1;

        goto label2;

     label4:
        return -1;
    }

    private com.android.server.WindowManagerService$WindowState findWindow(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r1;
        com.android.server.WindowManagerService$WindowState $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        java.lang.Throwable $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        if $i0 != -1 goto label1;

        $r2 = specialinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState getFocusedWindow()>();

        return $r2;

     label1:
        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r3;

     label2:
        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i2 = 0;

     label3:
        if $i2 >= $i1 goto label6;

        $r4 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r2 = (com.android.server.WindowManagerService$WindowState) $r4;

        $i3 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r2);

        if $i3 != $i0 goto label5;

        exitmonitor $r3;

     label4:
        return $r2;

     label5:
        $i2 = $i2 + 1;

        goto label3;

     label6:
        exitmonitor $r3;

     label7:
        return null;

     label8:
        $r5 := @caughtexception;

        exitmonitor $r3;

     label9:
        throw $r5;

        catch java.lang.Throwable from label2 to label4 with label8;
        catch java.lang.Throwable from label5 to label7 with label8;
        catch java.lang.Throwable from label8 to label9 with label8;
    }

    private int findWindowOffsetLocked(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        com.android.server.WindowManagerService$WindowState $r3, $r6;
        android.view.IApplicationToken $r4;
        com.android.server.WindowManagerService$AppWindowToken $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $i1 := @parameter0: int;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i2 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if $i1 < $i0 goto label03;

        $i0 = $i2;

     label01:
        if $i0 <= 0 goto label03;

        $i0 = $i0 + -1;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (com.android.server.WindowManagerService$WindowState) $r2;

        $r4 = virtualinvoke $r3.<com.android.server.WindowManagerService$WindowState: android.view.IApplicationToken getAppToken()>();

        if $r4 == null goto label01;

        $i1 = $i0 + 1;

        return $i1;

     label02:
        $i1 = $i1 + -1;

     label03:
        if $i1 <= 0 goto label11;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i0 = $i1 - 1;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (com.android.server.WindowManagerService$AppWindowToken) $r2;

        $r1 = $r5.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

     label04:
        if $i0 <= 0 goto label02;

        $i0 = $i0 + -1;

        $r1 = $r5.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (com.android.server.WindowManagerService$WindowState) $r2;

        $r1 = $r3.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $i3 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

     label05:
        if $i3 <= 0 goto label08;

        $i3 = $i3 + -1;

        $r1 = $r3.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r6 = (com.android.server.WindowManagerService$WindowState) $r2;

        $i4 = $r6.<com.android.server.WindowManagerService$WindowState: int mSubLayer>;

        if $i4 < 0 goto label05;

        $i4 = $i2 - 1;

     label06:
        if $i4 < 0 goto label05;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        if $r2 != $r6 goto label07;

        $i1 = $i4 + 1;

        return $i1;

     label07:
        $i4 = $i4 + -1;

        goto label06;

     label08:
        $i3 = $i2 - 1;

     label09:
        if $i3 < 0 goto label04;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        if $r2 != $r3 goto label10;

        $i1 = $i3 + 1;

        return $i1;

     label10:
        $i3 = $i3 + -1;

        goto label09;

     label11:
        return 0;
    }

    static float fixScale(float)
    {
        float $f0;
        byte $b0;

        $f0 := @parameter0: float;

        $b0 = $f0 cmpg 0.0F;

        if $b0 >= 0 goto label2;

        $f0 = 0.0F;

     label1:
        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        return $f0;

     label2:
        $b0 = $f0 cmpl 20.0F;

        if $b0 <= 0 goto label1;

        $f0 = 20.0F;

        goto label1;
    }

    private com.android.server.AttributeCache$Entry getCachedAnimations(android.view.WindowManager$LayoutParams)
    {
        com.android.server.WindowManagerService $r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1;
        java.lang.String $r2;
        com.android.server.AttributeCache $r3;
        int[] $r4;
        com.android.server.AttributeCache$Entry $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.WindowManager$LayoutParams;

        if $r1 == null goto label4;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int windowAnimations>;

        if $i0 == 0 goto label4;

        $r2 = $r1.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        if $r2 == null goto label3;

        $r2 = $r1.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

     label1:
        $i0 = $r1.<android.view.WindowManager$LayoutParams: int windowAnimations>;

        $i1 = -16777216 & $i0;

        if $i1 != 16777216 goto label2;

        $r2 = "android";

     label2:
        $r3 = staticinvoke <com.android.server.AttributeCache: com.android.server.AttributeCache instance()>();

        $r4 = <com.android.internal.R$styleable: int[] WindowAnimation>;

        $r5 = virtualinvoke $r3.<com.android.server.AttributeCache: com.android.server.AttributeCache$Entry get(java.lang.String,int,int[])>($r2, $i0, $r4);

        return $r5;

     label3:
        $r2 = "android";

        goto label1;

     label4:
        return null;
    }

    private com.android.server.WindowManagerService$WindowState getFocusedWindow()
    {
        com.android.server.WindowManagerService $r0;
        java.util.HashMap $r1;
        com.android.server.WindowManagerService$WindowState $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label1:
        $r2 = specialinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState getFocusedWindowLocked()>();

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private com.android.server.WindowManagerService$WindowState getFocusedWindowLocked()
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState r1;

        $r0 := @this: com.android.server.WindowManagerService;

        r1 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus>;

        return r1;
    }

    private android.view.animation.Animation loadAnimation(android.view.WindowManager$LayoutParams, int)
    {
        com.android.server.WindowManagerService $r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1;
        android.content.Context $r2;
        com.android.server.AttributeCache$Entry $r3;
        android.content.res.TypedArray $r4;
        android.view.animation.Animation $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 := @parameter1: int;

        $i1 = 0;

        $r2 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        if $i0 < 0 goto label1;

        $r3 = specialinvoke $r0.<com.android.server.WindowManagerService: com.android.server.AttributeCache$Entry getCachedAnimations(android.view.WindowManager$LayoutParams)>($r1);

        if $r3 == null goto label1;

        $r2 = $r3.<com.android.server.AttributeCache$Entry: android.content.Context context>;

        $r4 = $r3.<com.android.server.AttributeCache$Entry: android.content.res.TypedArray array>;

        $i1 = virtualinvoke $r4.<android.content.res.TypedArray: int getResourceId(int,int)>($i0, 0);

     label1:
        if $i1 == 0 goto label2;

        $r5 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r2, $i1);

        return $r5;

     label2:
        return null;
    }

    public static com.android.server.WindowManagerService main(android.content.Context, com.android.server.PowerManagerService, boolean)
    {
        android.content.Context $r0;
        com.android.server.PowerManagerService $r1;
        boolean $z0;
        com.android.server.WindowManagerService$WMThread $r2;
        com.android.server.WindowManagerService $r3;
        java.lang.InterruptedException $r4;
        java.lang.Throwable $r5;

        $r0 := @parameter0: android.content.Context;

        $r1 := @parameter1: com.android.server.PowerManagerService;

        $z0 := @parameter2: boolean;

        $r2 = new com.android.server.WindowManagerService$WMThread;

        specialinvoke $r2.<com.android.server.WindowManagerService$WMThread: void <init>(android.content.Context,com.android.server.PowerManagerService,boolean)>($r0, $r1, $z0);

        virtualinvoke $r2.<java.lang.Thread: void start()>();

        entermonitor $r2;

     label01:
        $r3 = $r2.<com.android.server.WindowManagerService$WMThread: com.android.server.WindowManagerService mService>;

     label02:
        if $r3 != null goto label06;

     label03:
        virtualinvoke $r2.<java.lang.Object: void wait()>();

     label04:
        goto label01;

     label05:
        $r4 := @caughtexception;

        goto label01;

     label06:
        exitmonitor $r2;

     label07:
        $r3 = $r2.<com.android.server.WindowManagerService$WMThread: com.android.server.WindowManagerService mService>;

        return $r3;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor $r2;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void moveAppWindowsLocked(java.util.List, int)
    {
        com.android.server.WindowManagerService $r0;
        java.util.List $r1;
        int $i0, $i1, $i2;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        com.android.server.WindowManagerService$WindowToken $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.util.List;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r4 = (com.android.server.WindowManagerService$WindowToken) $r3;

        if $r4 == null goto label2;

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean tmpRemoveAppWindowsLocked(com.android.server.WindowManagerService$WindowToken)>($r4);

     label2:
        $i2 = $i2 + 1;

        goto label1;

     label3:
        $i2 = specialinvoke $r0.<com.android.server.WindowManagerService: int findWindowOffsetLocked(int)>($i0);

        $i0 = 0;

     label4:
        if $i0 >= $i1 goto label6;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        $r4 = (com.android.server.WindowManagerService$WindowToken) $r3;

        if $r4 == null goto label5;

        $i2 = specialinvoke $r0.<com.android.server.WindowManagerService: int reAddAppWindowsLocked(int,com.android.server.WindowManagerService$WindowToken)>($i2, $r4);

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(3);

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        return;
    }

    private final void performLayoutAndPlaceSurfacesLocked()
    {
        com.android.server.WindowManagerService $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.ArrayList $r2;
        int $i0, $i1;
        com.android.server.WindowManagerService$WindowState $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        com.android.server.WindowManagerService$Session $r6;
        java.lang.Throwable $r7;
        java.lang.RuntimeException $r8;
        java.lang.InterruptedException $r9;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mInLayout>;

        if $z0 == 0 goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "performLayoutAndPlaceSurfacesLocked called while in layout");

        return;

     label01:
        $z0 = 0;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        if $r2 == null goto label06;

        $z0 = 1;

        $i0 = 0;

     label02:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label03;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $r1 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (com.android.server.WindowManagerService$WindowState) $r1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Force removing: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r5);

        $r6 = $r3.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        specialinvoke $r0.<com.android.server.WindowManagerService: void removeWindowInnerLocked(com.android.server.WindowManagerService$Session,com.android.server.WindowManagerService$WindowState)>($r6, $r3);

        $i0 = $i0 + 1;

        goto label02;

     label03:
        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves> = null;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Due to memory failure, waiting a bit for next layout");

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        entermonitor $r1;

     label04:
        virtualinvoke $r1.<java.lang.Object: void wait(long)>(250L);

     label05:
        exitmonitor $r1;

     label06:
        $r0.<com.android.server.WindowManagerService: boolean mInLayout> = 1;

     label07:
        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLockedInner(boolean)>($z0);

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label08:
        $i0 = $i0 - 1;

     label09:
        if $i0 < 0 goto label18;

     label10:
        if $i0 < 0 goto label15;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $r1 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = (com.android.server.WindowManagerService$WindowState) $r1;

        $r6 = $r3.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        specialinvoke $r0.<com.android.server.WindowManagerService: void removeWindowInnerLocked(com.android.server.WindowManagerService$Session,com.android.server.WindowManagerService$WindowState)>($r6, $r3);

     label11:
        $i0 = $i0 + -1;

        goto label10;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor $r1;

     label14:
        throw $r7;

     label15:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mPendingRemove>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r0.<com.android.server.WindowManagerService: boolean mInLayout> = 0;

        specialinvoke $r0.<com.android.server.WindowManagerService: void assignLayersLocked()>();

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label16:
        return;

     label17:
        $r8 := @caughtexception;

        $r0.<com.android.server.WindowManagerService: boolean mInLayout> = 0;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Unhandled exception while layout out windows", $r8);

        return;

     label18:
        $r0.<com.android.server.WindowManagerService: boolean mInLayout> = 0;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded>;

        if $z0 == 0 goto label21;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void requestAnimationLocked(long)>(0L);

     label19:
        return;

     label20:
        $r9 := @caughtexception;

        goto label05;

     label21:
        return;

        catch java.lang.InterruptedException from label04 to label05 with label20;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.RuntimeException from label07 to label08 with label17;
        catch java.lang.RuntimeException from label09 to label11 with label17;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.RuntimeException from label15 to label16 with label17;
        catch java.lang.RuntimeException from label18 to label19 with label17;
    }

    private final void performLayoutAndPlaceSurfacesLockedInner(boolean)
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        long $l1, $l10;
        android.view.Display $r1;
        java.util.ArrayList $r2, $r18, $r19;
        android.view.SurfaceSession $r3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowToken $r5;
        com.android.server.WindowManagerService$AppWindowToken $r6;
        com.android.server.WindowManagerService$Session $r7, $r22;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.view.WindowManagerPolicy $r8;
        com.android.server.WindowManagerService$WindowState $r9, $r12;
        android.view.WindowManager$LayoutParams $r10, $r20;
        android.view.Surface $r11;
        java.lang.RuntimeException $r13, $r23, $r26, $r27, $r28, $r29, $r32, $r34, $r35;
        com.android.server.WindowManagerService$H $r14;
        android.view.IWindow $r15;
        android.graphics.Rect $r16, $r17;
        com.android.server.WindowManagerService$KeyWaiter $r21;
        byte $b9;
        java.lang.StringBuilder $r24;
        java.lang.String $r25;
        android.view.animation.Animation $r30;
        java.lang.Exception $r31, $r33;
        java.lang.IllegalArgumentException $r36;
        android.os.RemoteException $r37;
        com.android.server.WindowManagerService$KeyQ $r38;
        com.android.server.PowerManagerService $r39;
        android.os.Message $r40;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 := @parameter0: boolean;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        $i2 = virtualinvoke $r1.<android.view.Display: int getWidth()>();

        $r1 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        $i3 = virtualinvoke $r1.<android.view.Display: int getHeight()>();

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i4 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutLockedInner()>();

        $r3 = $r0.<com.android.server.WindowManagerService: android.view.SurfaceSession mFxSession>;

        if $r3 != null goto label001;

        $r3 = new android.view.SurfaceSession;

        specialinvoke $r3.<android.view.SurfaceSession: void <init>()>();

        $r0.<com.android.server.WindowManagerService: android.view.SurfaceSession mFxSession> = $r3;

     label001:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label002:
        if $i0 < 0 goto label003;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

        $r5.<com.android.server.WindowManagerService$WindowToken: boolean hasVisible> = 0;

        $i0 = $i0 + -1;

        goto label002;

     label003:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label004:
        if $i0 < 0 goto label005;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r6 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

        $r6.<com.android.server.WindowManagerService$WindowToken: boolean hasVisible> = 0;

        $i0 = $i0 + -1;

        goto label004;

     label005:
        $z1 = 1;

        $r7 = null;

        $f0 = -1.0F;

        $z2 = 0;

        $z3 = 0;

        staticinvoke <android.view.Surface: void openTransaction()>();

     label006:
        $i0 = $r0.<com.android.server.WindowManagerService: int mTransactionSequence>;

        $i0 = $i0 + 1;

        $r0.<com.android.server.WindowManagerService: int mTransactionSequence> = $i0;

        $z4 = 0;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i5 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label007:
        $i6 = 0;

     label008:
        if $i6 >= $i5 goto label011;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        $r6 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

        $z5 = virtualinvoke $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean stepAnimationLocked(long,int,int)>($l1, $i2, $i3);

     label009:
        if $z5 == 0 goto label010;

        $z4 = 1;

     label010:
        $i6 = $i6 + 1;

        goto label008;

     label011:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $i5 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label012:
        $i6 = 0;

     label013:
        if $i6 >= $i5 goto label016;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        $r6 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

        $z5 = virtualinvoke $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean stepAnimationLocked(long,int,int)>($l1, $i2, $i3);

     label014:
        if $z5 == 0 goto label015;

        $z4 = 1;

     label015:
        $i6 = $i6 + 1;

        goto label013;

     label016:
        $z3 = $z4;

        $z4 = 0;

     label017:
        $z5 = 0;

        $r8 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy: void beginAnimationLw(int,int)>($i2, $i3);

     label018:
        $i5 = $i4 - 1;

     label019:
        if $i5 < 0 goto label048;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r9 = (com.android.server.WindowManagerService$WindowState) $r4;

        $r10 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r11 == null goto label021;

        virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: void commitFinishDrawingLocked(long)>($l1);

        $z6 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean stepAnimationLocked(long,int,int)>($l1, $i2, $i3);

        if $z6 == 0 goto label020;

        $z3 = 1;

     label020:
        $r8 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy: void animatingWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>($r9, $r10);

     label021:
        $r6 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r6 == null goto label046;

        $z6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn>;

        if $z6 == 0 goto label022;

        $z6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean freezingScreen>;

        if $z6 == 0 goto label046;

     label022:
        $i6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: int lastTransactionSequence>;

        if $i6 == $i0 goto label023;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: int lastTransactionSequence> = $i0;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: int numDrawnWindows> = 0;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: int numInterestingWindows> = 0;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean startingDisplayed> = 0;

     label023:
        $z6 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isOnScreen()>();

        if $z6 != 0 goto label024;

        $r10 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i6 = $r10.<android.view.WindowManager$LayoutParams: int type>;

        if $i6 != 1 goto label027;

     label024:
        $z6 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mExiting>;

        if $z6 != 0 goto label027;

        $z6 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mDestroying>;

        if $z6 != 0 goto label027;

        $r12 = $r6.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow>;

        if $r9 == $r12 goto label028;

        $z6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean freezingScreen>;

        if $z6 == 0 goto label025;

        $z6 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mAppFreezing>;

        if $z6 != 0 goto label027;

     label025:
        $i6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: int numInterestingWindows>;

        $i6 = $i6 + 1;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: int numInterestingWindows> = $i6;

        $z6 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isDisplayedLw()>();

        if $z6 == 0 goto label027;

        $i6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: int numDrawnWindows>;

        $i6 = $i6 + 1;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: int numDrawnWindows> = $i6;

     label026:
        $z5 = 1;

     label027:
        $i5 = $i5 + -1;

        goto label019;

     label028:
        $z6 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isDisplayedLw()>();

        if $z6 == 0 goto label027;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean startingDisplayed> = 1;

     label029:
        goto label027;

     label030:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Unhandled exception in Window Manager", $r13);

     label031:
        staticinvoke <android.view.Surface: void closeTransaction()>();

        if $z1 == 0 goto label033;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mWindowsFreezingScreen>;

        if $z0 == 0 goto label032;

        $r0.<com.android.server.WindowManagerService: boolean mWindowsFreezingScreen> = 0;

        $r14 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r14.<android.os.Handler: void removeMessages(int)>(11);

     label032:
        $i2 = $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen>;

        if $i2 != 0 goto label033;

        specialinvoke $r0.<com.android.server.WindowManagerService: void stopFreezingDisplayLocked()>();

     label033:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i2 = $i3;

        if $i3 <= 0 goto label040;

     label034:
        $i2 = $i2 + -1;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mResizingWindows>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r9 = (com.android.server.WindowManagerService$WindowState) $r4;

        $r15 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mFrame>;

     label035:
        $i3 = virtualinvoke $r16.<android.graphics.Rect: int width()>();

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mFrame>;

        $i4 = virtualinvoke $r16.<android.graphics.Rect: int height()>();

     label036:
        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastContentInsets>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastVisibleInsets>;

     label037:
        $z0 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mDrawPending>;

        interfaceinvoke $r15.<android.view.IWindow: void resized(int,int,android.graphics.Rect,android.graphics.Rect,boolean)>($i3, $i4, $r16, $r17, $z0);

     label038:
        $r9.<com.android.server.WindowManagerService$WindowState: boolean mContentInsetsChanged> = 0;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mVisibleInsetsChanged> = 0;

     label039:
        if $i2 > 0 goto label034;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

     label040:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i3 = $i2;

        if $i2 <= 0 goto label043;

     label041:
        $i3 = $i3 + -1;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r9 = (com.android.server.WindowManagerService$WindowState) $r4;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mDestroying> = 0;

        $r12 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        if $r12 != $r9 goto label042;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow> = null;

     label042:
        virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: void destroySurfaceLocked()>();

        if $i3 > 0 goto label041;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mDestroySurface>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

     label043:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i2 = $i2 - 1;

     label044:
        if $i2 < 0 goto label252;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

        $z0 = $r5.<com.android.server.WindowManagerService$WindowToken: boolean hasVisible>;

        if $z0 != 0 goto label045;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i2);

     label045:
        $i2 = $i2 + -1;

        goto label044;

     label046:
        $z6 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mReadyToShow>;

        if $z6 == 0 goto label027;

        virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean performShowLocked()>();

     label047:
        goto label027;

     label048:
        $r8 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z6 = interfaceinvoke $r8.<android.view.WindowManagerPolicy: boolean finishAnimationLw()>();

     label049:
        if $z6 == 0 goto label050;

        $z4 = 1;

     label050:
        if $z5 == 0 goto label058;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label051:
        $i5 = 0;

     label052:
        if $i5 >= $i0 goto label058;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

        $r6 = $r5.<com.android.server.WindowManagerService$WindowToken: com.android.server.WindowManagerService$AppWindowToken appWindowToken>;

        if $r6 != null goto label054;

     label053:
        $i5 = $i5 + 1;

        goto label052;

     label054:
        $z5 = $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean freezingScreen>;

        if $z5 == 0 goto label056;

        $i6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: int numInterestingWindows>;

        if $i6 <= 0 goto label053;

        $i7 = $r6.<com.android.server.WindowManagerService$AppWindowToken: int numDrawnWindows>;

        if $i7 < $i6 goto label053;

        virtualinvoke $r6.<com.android.server.WindowManagerService$AppWindowToken: void showAllWindowsLocked()>();

        virtualinvoke $r0.<com.android.server.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,boolean,boolean)>($r6, 0, 1);

     label055:
        $z1 = 1;

        goto label053;

     label056:
        $z5 = $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn>;

        if $z5 != 0 goto label053;

        $i6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: int numInterestingWindows>;

        if $i6 <= 0 goto label053;

        $i7 = $r6.<com.android.server.WindowManagerService$AppWindowToken: int numDrawnWindows>;

        if $i7 < $i6 goto label053;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn> = 1;

        $z4 = 1;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        $z5 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r6);

        if $z5 != 0 goto label053;

        virtualinvoke $r6.<com.android.server.WindowManagerService$AppWindowToken: void showAllWindowsLocked()>();

     label057:
        goto label053;

     label058:
        $z5 = $r0.<com.android.server.WindowManagerService: boolean mAppTransitionReady>;

        if $z5 == 0 goto label075;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $z5 = 1;

        $z6 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z6 != 0 goto label064;

        $z6 = $r0.<com.android.server.WindowManagerService: boolean mAppTransitionTimeout>;

     label059:
        if $z6 != 0 goto label064;

        $i5 = 0;

     label060:
        if $i5 >= $i0 goto label064;

     label061:
        if $z5 == 0 goto label064;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r6 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

        $z6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn>;

        if $z6 != 0 goto label063;

        $z6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean startingDisplayed>;

        if $z6 != 0 goto label063;

        $z6 = $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean startingMoved>;

     label062:
        if $z6 != 0 goto label063;

        $z5 = 0;

     label063:
        $i5 = $i5 + 1;

        goto label060;

     label064:
        if $z5 == 0 goto label075;

        $i0 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        $z4 = $r0.<com.android.server.WindowManagerService: boolean mSkipAppTransitionAnimation>;

        if $z4 == 0 goto label065;

        $i0 = 0;

     label065:
        $r0.<com.android.server.WindowManagerService: int mNextAppTransition> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mAppTransitionReady> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mAppTransitionTimeout> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mStartingIconInTransition> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mSkipAppTransitionAnimation> = 0;

        $r14 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r14.<android.os.Handler: void removeMessages(int)>(13);

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r18 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        $r19 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        $r10 = staticinvoke <com.android.server.WindowManagerService: android.view.WindowManager$LayoutParams findAnimations(java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>($r2, $r18, $r19);

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        $i5 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label066:
        $i6 = 0;

     label067:
        if $i6 >= $i5 goto label069;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        $r6 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean reportedVisible> = 0;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean inPendingTransaction> = 0;

        virtualinvoke $r0.<com.android.server.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.WindowManagerService$AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)>($r6, $r10, 1, $i0, 0);

        virtualinvoke $r6.<com.android.server.WindowManagerService$AppWindowToken: void updateReportedVisibilityLocked()>();

        virtualinvoke $r6.<com.android.server.WindowManagerService$AppWindowToken: void showAllWindowsLocked()>();

     label068:
        $i6 = $i6 + 1;

        goto label067;

     label069:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        $i5 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label070:
        $i6 = 0;

     label071:
        if $i6 >= $i5 goto label073;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        $r6 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean inPendingTransaction> = 0;

        virtualinvoke $r0.<com.android.server.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.WindowManagerService$AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)>($r6, $r10, 0, $i0, 0);

        virtualinvoke $r6.<com.android.server.WindowManagerService$AppWindowToken: void updateReportedVisibilityLocked()>();

        $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn> = 1;

     label072:
        $i6 = $i6 + 1;

        goto label071;

     label073:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        virtualinvoke $r0.<com.android.server.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(1);

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutLockedInner()>();

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(2);

     label074:
        $z4 = 1;

     label075:
        if $z4 != 0 goto label006;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mLosingFocus>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label076:
        if $i0 == 0 goto label123;

        $z6 = 1;

     label077:
        $z7 = 0;

        $z4 = 0;

        $z5 = 0;

        $z8 = 0;

        $z9 = 0;

        $i4 = $i4 - 1;

     label078:
        if $i4 < 0 goto label215;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r9 = (com.android.server.WindowManagerService$WindowState) $r4;

        $z10 = 0;

        $r10 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r10.<android.view.WindowManager$LayoutParams: int flags>;

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r11 == null goto label180;

        virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: void computeShownFrameLocked()>();

        $r20 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = $r20.<android.view.WindowManager$LayoutParams: int flags>;

        $r20 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

     label079:
        $i5 = $i5 & 16384;

     label080:
        if $i5 == 0 goto label129;

        $i5 = $r9.<com.android.server.WindowManagerService$WindowState: int mLastRequestedWidth>;

        $i6 = $r9.<com.android.server.WindowManagerService$WindowState: int mRequestedWidth>;

        if $i5 != $i6 goto label082;

        $i5 = $r9.<com.android.server.WindowManagerService$WindowState: int mLastRequestedHeight>;

        $i6 = $r9.<com.android.server.WindowManagerService$WindowState: int mRequestedHeight>;

     label081:
        if $i5 == $i6 goto label124;

     label082:
        $z11 = 1;

     label083:
        $i7 = $r9.<com.android.server.WindowManagerService$WindowState: int mRequestedWidth>;

        $i5 = $i7;

        $i8 = $r9.<com.android.server.WindowManagerService$WindowState: int mRequestedHeight>;

        $i6 = $i8;

        $r9.<com.android.server.WindowManagerService$WindowState: int mLastRequestedWidth> = $i7;

        $r9.<com.android.server.WindowManagerService$WindowState: int mLastRequestedHeight> = $i8;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastShownFrame>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        virtualinvoke $r16.<android.graphics.Rect: void set(android.graphics.Rect)>($r17);

     label084:
        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $i7 = $r16.<android.graphics.Rect: int left>;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $i8 = $r16.<android.graphics.Rect: int top>;

        virtualinvoke $r11.<android.view.Surface: void setPosition(int,int)>($i7, $i8);

     label085:
        if $z11 == 0 goto label090;

        if $i5 >= 1 goto label086;

        $i5 = 1;

     label086:
        if $i6 >= 1 goto label087;

        $i6 = 1;

     label087:
        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

     label088:
        if $r11 == null goto label090;

     label089:
        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        virtualinvoke $r11.<android.view.Surface: void setSize(int,int)>($i5, $i6);

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $i7 = $r16.<android.graphics.Rect: int left>;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $i8 = $r16.<android.graphics.Rect: int top>;

        virtualinvoke $r11.<android.view.Surface: void setPosition(int,int)>($i7, $i8);

     label090:
        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mAppFreezing>;

        if $z11 != 0 goto label099;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastContentInsets>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mContentInsets>;

        $z11 = virtualinvoke $r16.<android.graphics.Rect: boolean equals(java.lang.Object)>($r17);

     label091:
        if $z11 != 0 goto label138;

     label092:
        $z11 = 1;

     label093:
        $r9.<com.android.server.WindowManagerService$WindowState: boolean mContentInsetsChanged> = $z11;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastVisibleInsets>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mVisibleInsets>;

        $z11 = virtualinvoke $r16.<android.graphics.Rect: boolean equals(java.lang.Object)>($r17);

     label094:
        if $z11 != 0 goto label140;

     label095:
        $z11 = 1;

     label096:
        $r9.<com.android.server.WindowManagerService$WindowState: boolean mVisibleInsetsChanged> = $z11;

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastFrame>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mFrame>;

        $z11 = virtualinvoke $r16.<android.graphics.Rect: boolean equals(java.lang.Object)>($r17);

        if $z11 == 0 goto label097;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mContentInsetsChanged>;

        if $z11 != 0 goto label097;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mVisibleInsetsChanged>;

        if $z11 == 0 goto label142;

     label097:
        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastFrame>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mFrame>;

        virtualinvoke $r16.<android.graphics.Rect: void set(android.graphics.Rect)>($r17);

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastContentInsets>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mContentInsets>;

        virtualinvoke $r16.<android.graphics.Rect: void set(android.graphics.Rect)>($r17);

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastVisibleInsets>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mVisibleInsets>;

        virtualinvoke $r16.<android.graphics.Rect: void set(android.graphics.Rect)>($r17);

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging>;

        if $z11 == 0 goto label098;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mDrawPending> = 1;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mCommitDrawPending> = 0;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mReadyToShow> = 0;

        $r6 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r6 == null goto label098;

        $r6 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r6.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn> = 0;

     label098:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mResizingWindows>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label099:
        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mAttachedHidden>;

        if $z11 == 0 goto label145;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mLastHidden>;

        if $z11 != 0 goto label103;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mLastHidden> = 1;

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

     label100:
        if $r11 == null goto label102;

     label101:
        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        virtualinvoke $r11.<android.view.Surface: void hide()>();

     label102:
        $r21 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r22 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        virtualinvoke $r21.<com.android.server.WindowManagerService$KeyWaiter: void releasePendingPointerLocked(com.android.server.WindowManagerService$Session)>($r22);

     label103:
        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging>;

        if $z11 == 0 goto label104;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 0;

     label104:
        if $z10 == 0 goto label108;

        if $z8 != 0 goto label105;

        $i5 = $r10.<android.view.ViewGroup$LayoutParams: int width>;

        if $i5 != -1 goto label105;

        $i5 = $r10.<android.view.ViewGroup$LayoutParams: int height>;

        if $i5 != -1 goto label105;

        $z8 = 1;

     label105:
        $z10 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging>;

        if $z10 == 0 goto label107;

        $z10 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mDrawPending>;

        if $z10 != 0 goto label106;

        $z10 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mCommitDrawPending>;

        if $z10 == 0 goto label179;

     label106:
        $z1 = 0;

     label107:
        $r5 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowToken mToken>;

        $r5.<com.android.server.WindowManagerService$WindowToken: boolean hasVisible> = 1;

     label108:
        $z10 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isDisplayedLw()>();

        if $z6 == 0 goto label110;

        $r12 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus>;

     label109:
        if $r9 != $r12 goto label110;

        if $z10 == 0 goto label110;

        $z2 = 1;

     label110:
        if $z7 != 0 goto label122;

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r11 == null goto label120;

     label111:
        $i5 = $i0 & 128;

     label112:
        if $i5 == 0 goto label113;

        $r7 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

     label113:
        if $z9 != 0 goto label118;

        $r20 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f1 = $r20.<android.view.WindowManager$LayoutParams: float screenBrightness>;

     label114:
        $b9 = $f1 cmpl 0.0F;

     label115:
        if $b9 < 0 goto label118;

     label116:
        $b9 = $f0 cmpg 0.0F;

     label117:
        if $b9 >= 0 goto label118;

        $r20 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $f0 = $r20.<android.view.WindowManager$LayoutParams: float screenBrightness>;

     label118:
        $i5 = $r10.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 == 2008 goto label119;

        $i5 = $r10.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 == 2004 goto label119;

        $i5 = $r10.<android.view.WindowManager$LayoutParams: int type>;

        if $i5 != 2010 goto label120;

     label119:
        $z9 = 1;

     label120:
        $z11 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isFullscreenOpaque(int,int)>($i2, $i3);

     label121:
        if $z11 == 0 goto label181;

        $z7 = 1;

     label122:
        $i4 = $i4 + -1;

        goto label078;

     label123:
        $z6 = 0;

        goto label077;

     label124:
        $z11 = 0;

     label125:
        goto label083;

     label126:
        $r23 := @caughtexception;

     label127:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error positioning surface in ");

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r25, $r23);

        if $z0 != 0 goto label085;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void reclaimSomeSurfaceMemoryLocked(com.android.server.WindowManagerService$WindowState,java.lang.String)>($r9, "position");

     label128:
        goto label085;

     label129:
        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastShownFrame>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $z11 = virtualinvoke $r16.<android.graphics.Rect: boolean equals(java.lang.Object)>($r17);

     label130:
        if $z11 != 0 goto label134;

     label131:
        $z11 = 1;

     label132:
        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $i5 = virtualinvoke $r16.<android.graphics.Rect: int width()>();

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $i6 = virtualinvoke $r16.<android.graphics.Rect: int height()>();

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mLastShownFrame>;

        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        virtualinvoke $r16.<android.graphics.Rect: void set(android.graphics.Rect)>($r17);

     label133:
        if $z11 == 0 goto label085;

        goto label085;

     label134:
        $z11 = 0;

     label135:
        goto label132;

     label136:
        $r26 := @caughtexception;

     label137:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure updating surface of ");

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size=(");

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x");

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), pos=(");

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $i5 = $r16.<android.graphics.Rect: int left>;

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r16 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mShownFrame>;

        $i5 = $r16.<android.graphics.Rect: int top>;

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r25, $r26);

        if $z0 != 0 goto label090;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void reclaimSomeSurfaceMemoryLocked(com.android.server.WindowManagerService$WindowState,java.lang.String)>($r9, "size");

        goto label090;

     label138:
        $z11 = 0;

     label139:
        goto label093;

     label140:
        $z11 = 0;

     label141:
        goto label096;

     label142:
        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging>;

        if $z11 == 0 goto label099;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mDrawPending>;

        if $z11 != 0 goto label099;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mCommitDrawPending>;

        if $z11 != 0 goto label099;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 0;

        goto label099;

     label143:
        $r27 := @caughtexception;

     label144:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception hiding surface in ");

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r25);

        goto label102;

     label145:
        $z11 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isReadyForDisplay()>();

        if $z11 != 0 goto label153;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mLastHidden>;

        if $z11 != 0 goto label149;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mLastHidden> = 1;

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

     label146:
        if $r11 == null goto label148;

     label147:
        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        virtualinvoke $r11.<android.view.Surface: void hide()>();

     label148:
        $r21 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r22 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        virtualinvoke $r21.<com.android.server.WindowManagerService$KeyWaiter: void releasePendingPointerLocked(com.android.server.WindowManagerService$Session)>($r22);

     label149:
        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging>;

        if $z11 == 0 goto label104;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 0;

     label150:
        goto label104;

     label151:
        $r28 := @caughtexception;

     label152:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception exception hiding surface in ");

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r25);

        goto label148;

     label153:
        $i5 = $r9.<com.android.server.WindowManagerService$WindowState: int mLastLayer>;

        $i6 = $r9.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        if $i5 != $i6 goto label169;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mLastAlpha>;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mShownAlpha>;

     label154:
        $b9 = $f1 cmpl $f2;

     label155:
        if $b9 != 0 goto label169;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mLastDsDx>;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mDsDx>;

     label156:
        $b9 = $f1 cmpl $f2;

     label157:
        if $b9 != 0 goto label169;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mLastDtDx>;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mDtDx>;

     label158:
        $b9 = $f1 cmpl $f2;

     label159:
        if $b9 != 0 goto label169;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mLastDsDy>;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mDsDy>;

     label160:
        $b9 = $f1 cmpl $f2;

     label161:
        if $b9 != 0 goto label169;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mLastDtDy>;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mDtDy>;

     label162:
        $b9 = $f1 cmpl $f2;

     label163:
        if $b9 != 0 goto label169;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mLastHScale>;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mHScale>;

     label164:
        $b9 = $f1 cmpl $f2;

     label165:
        if $b9 != 0 goto label169;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mLastVScale>;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mVScale>;

     label166:
        $b9 = $f1 cmpl $f2;

     label167:
        if $b9 != 0 goto label169;

        $z10 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mLastHidden>;

     label168:
        if $z10 == 0 goto label178;

     label169:
        $z10 = 1;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mShownAlpha>;

        $r9.<com.android.server.WindowManagerService$WindowState: float mLastAlpha> = $f1;

        $i5 = $r9.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        $r9.<com.android.server.WindowManagerService$WindowState: int mLastLayer> = $i5;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mDsDx>;

        $r9.<com.android.server.WindowManagerService$WindowState: float mLastDsDx> = $f1;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mDtDx>;

        $r9.<com.android.server.WindowManagerService$WindowState: float mLastDtDx> = $f1;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mDsDy>;

        $r9.<com.android.server.WindowManagerService$WindowState: float mLastDsDy> = $f1;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mDtDy>;

        $r9.<com.android.server.WindowManagerService$WindowState: float mLastDtDy> = $f1;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mHScale>;

        $r9.<com.android.server.WindowManagerService$WindowState: float mLastHScale> = $f1;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mVScale>;

        $r9.<com.android.server.WindowManagerService$WindowState: float mLastVScale> = $f1;

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

     label170:
        if $r11 == null goto label172;

     label171:
        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mShownAlpha>;

        virtualinvoke $r11.<android.view.Surface: void setAlpha(float)>($f1);

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $i5 = $r9.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        virtualinvoke $r11.<android.view.Surface: void setLayer(int)>($i5);

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $f1 = $r9.<com.android.server.WindowManagerService$WindowState: float mDsDx>;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mHScale>;

        $f1 = $f1 * $f2;

        $f2 = $r9.<com.android.server.WindowManagerService$WindowState: float mDtDx>;

        $f3 = $r9.<com.android.server.WindowManagerService$WindowState: float mVScale>;

        $f2 = $f2 * $f3;

        $f3 = $r9.<com.android.server.WindowManagerService$WindowState: float mDsDy>;

        $f4 = $r9.<com.android.server.WindowManagerService$WindowState: float mHScale>;

        $f3 = $f3 * $f4;

        $f4 = $r9.<com.android.server.WindowManagerService$WindowState: float mDtDy>;

        $f5 = $r9.<com.android.server.WindowManagerService$WindowState: float mVScale>;

        $f4 = $f4 * $f5;

        virtualinvoke $r11.<android.view.Surface: void setMatrix(float,float,float,float)>($f1, $f2, $f3, $f4);

     label172:
        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mLastHidden>;

        if $z11 == 0 goto label173;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mDrawPending>;

        if $z11 != 0 goto label173;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mCommitDrawPending>;

        if $z11 != 0 goto label173;

        $z11 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mReadyToShow>;

        if $z11 != 0 goto label173;

        $z11 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean showSurfaceRobustlyLocked(com.android.server.WindowManagerService$WindowState)>($r9);

        if $z11 == 0 goto label177;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mHasDrawn> = 1;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mLastHidden> = 0;

     label173:
        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r11 == null goto label104;

        $r5 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowToken mToken>;

        $r5.<com.android.server.WindowManagerService$WindowToken: boolean hasVisible> = 1;

     label174:
        goto label104;

     label175:
        $r29 := @caughtexception;

     label176:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error updating surface in ");

        $r24 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r25, $r29);

        if $z0 != 0 goto label172;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void reclaimSomeSurfaceMemoryLocked(com.android.server.WindowManagerService$WindowState,java.lang.String)>($r9, "update");

        goto label172;

     label177:
        $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 0;

        goto label173;

     label178:
        $z10 = 1;

        goto label104;

     label179:
        $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 0;

        goto label107;

     label180:
        $z10 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging>;

        if $z10 == 0 goto label108;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 0;

        goto label108;

     label181:
        if $z10 == 0 goto label122;

        if $z7 != 0 goto label122;

        $i5 = $i0 & 4;

        $i5 = $i5 | 2;

        if $i5 == 0 goto label122;

        $i5 = $i0 & 2;

        if $i5 == 0 goto label199;

     label182:
        if $z5 != 0 goto label188;

        $z5 = 1;

        $r0.<com.android.server.WindowManagerService: boolean mDimShown> = 1;

        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

     label183:
        if $r11 != null goto label185;

        $r11 = new android.view.Surface;

     label184:
        $r3 = $r0.<com.android.server.WindowManagerService: android.view.SurfaceSession mFxSession>;

        specialinvoke $r11.<android.view.Surface: void <init>(android.view.SurfaceSession,int,int,int,int,int,int)>($r3, 0, -1, 16, 16, -1, 131072);

        $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface> = $r11;

     label185:
        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

     label186:
        if $r11 == null goto label188;

     label187:
        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

        virtualinvoke $r11.<android.view.Surface: void setPosition(int,int)>(0, 0);

        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

        virtualinvoke $r11.<android.view.Surface: void setSize(int,int)>($i2, $i3);

        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

        virtualinvoke $r11.<android.view.Surface: void show()>();

     label188:
        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

        $i5 = $r9.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        $i5 = $i5 - 1;

        virtualinvoke $r11.<android.view.Surface: void setLayer(int)>($i5);

        $z10 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mExiting>;

        if $z10 == 0 goto label209;

        $f1 = 0.0F;

     label189:
        $f2 = $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha>;

     label190:
        $b9 = $f2 cmpl $f1;

     label191:
        if $b9 == 0 goto label199;

        $r0.<com.android.server.WindowManagerService: long mLastDimAnimTime> = $l1;

        $z10 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mAnimating>;

        if $z10 == 0 goto label211;

        $r30 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.animation.Animation mAnimation>;

        if $r30 == null goto label211;

        $r30 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.animation.Animation mAnimation>;

        $l10 = virtualinvoke $r30.<android.view.animation.Animation: long computeDurationHint()>();

     label192:
        $f2 = $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha>;

     label193:
        $b9 = $f1 cmpl $f2;

        if $b9 <= 0 goto label194;

        $l10 = $l10 * 6L;

     label194:
        $b9 = $l10 cmp 1L;

     label195:
        if $b9 >= 0 goto label196;

        $l10 = 1L;

     label196:
        $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha> = $f1;

        $f1 = $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha>;

        $f2 = $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha>;

     label197:
        $f1 = $f1 - $f2;

        $f2 = (float) $l10;

     label198:
        $f1 = $f1 / $f2;

        $r0.<com.android.server.WindowManagerService: float mDimDeltaPerMs> = $f1;

     label199:
        $i0 = $i0 & 4;

        if $i0 == 0 goto label122;

     label200:
        if $z4 != 0 goto label205;

        $z4 = 1;

        $r0.<com.android.server.WindowManagerService: boolean mBlurShown> = 1;

        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mBlurSurface>;

     label201:
        if $r11 != null goto label203;

        $r11 = new android.view.Surface;

     label202:
        $r3 = $r0.<com.android.server.WindowManagerService: android.view.SurfaceSession mFxSession>;

        specialinvoke $r11.<android.view.Surface: void <init>(android.view.SurfaceSession,int,int,int,int,int,int)>($r3, 0, -1, 16, 16, -1, 65536);

        $r0.<com.android.server.WindowManagerService: android.view.Surface mBlurSurface> = $r11;

     label203:
        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mBlurSurface>;

        if $r11 == null goto label205;

        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mBlurSurface>;

        virtualinvoke $r11.<android.view.Surface: void setPosition(int,int)>(0, 0);

        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mBlurSurface>;

        virtualinvoke $r11.<android.view.Surface: void setSize(int,int)>($i2, $i3);

     label204:
        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mBlurSurface>;

        virtualinvoke $r11.<android.view.Surface: void show()>();

     label205:
        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mBlurSurface>;

        $i0 = $r9.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        $i0 = $i0 - 2;

        virtualinvoke $r11.<android.view.Surface: void setLayer(int)>($i0);

     label206:
        goto label122;

     label207:
        $r31 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Exception creating Dim surface", $r31);

        goto label185;

     label208:
        $r32 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failure showing dim surface", $r32);

        goto label188;

     label209:
        $f1 = $r10.<android.view.WindowManager$LayoutParams: float dimAmount>;

     label210:
        goto label189;

     label211:
        $l10 = 200L;

     label212:
        goto label192;

     label213:
        $r33 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Exception creating Blur surface", $r33);

        goto label203;

     label214:
        $r34 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Failure showing blur surface", $r34);

        goto label205;

     label215:
        if $z5 != 0 goto label220;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDimShown>;

        if $z0 == 0 goto label220;

        $f1 = $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha>;

     label216:
        $b9 = $f1 cmpl 0.0F;

     label217:
        if $b9 == 0 goto label220;

        $r0.<com.android.server.WindowManagerService: long mLastDimAnimTime> = $l1;

        $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha> = 0.0F;

        $f1 = $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha>;

     label218:
        $f1 = neg $f1;

     label219:
        $f1 = $f1 / 200.0F;

        $r0.<com.android.server.WindowManagerService: float mDimDeltaPerMs> = $f1;

     label220:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDimShown>;

        if $z0 == 0 goto label228;

        $l10 = $r0.<com.android.server.WindowManagerService: long mLastDimAnimTime>;

     label221:
        $b9 = $l10 cmp 0L;

     label222:
        if $b9 == 0 goto label228;

        $f1 = $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha>;

        $f2 = $r0.<com.android.server.WindowManagerService: float mDimDeltaPerMs>;

        $l10 = $r0.<com.android.server.WindowManagerService: long mLastDimAnimTime>;

     label223:
        $l10 = $l1 - $l10;

        $f3 = (float) $l10;

        $f2 = $f2 * $f3;

     label224:
        $f1 = $f1 + $f2;

        $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha> = $f1;

        $z0 = 1;

        $z6 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z6 == 0 goto label234;

     label225:
        $z0 = 0;

     label226:
        if $z0 == 0 goto label243;

        $r0.<com.android.server.WindowManagerService: long mLastDimAnimTime> = $l1;

        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

        $f1 = $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha>;

        virtualinvoke $r11.<android.view.Surface: void setAlpha(float)>($f1);

     label227:
        $z3 = 1;

     label228:
        if $z4 != 0 goto label031;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mBlurShown>;

     label229:
        if $z0 == 0 goto label031;

     label230:
        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mBlurSurface>;

     label231:
        virtualinvoke $r11.<android.view.Surface: void hide()>();

     label232:
        $r0.<com.android.server.WindowManagerService: boolean mBlurShown> = 0;

     label233:
        goto label031;

     label234:
        $f1 = $r0.<com.android.server.WindowManagerService: float mDimDeltaPerMs>;

     label235:
        $b9 = $f1 cmpl 0.0F;

     label236:
        if $b9 <= 0 goto label238;

        $f1 = $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha>;

        $f2 = $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha>;

     label237:
        $b9 = $f1 cmpl $f2;

        if $b9 <= 0 goto label226;

        $z0 = 0;

        goto label226;

     label238:
        $f1 = $r0.<com.android.server.WindowManagerService: float mDimDeltaPerMs>;

     label239:
        $b9 = $f1 cmpg 0.0F;

     label240:
        if $b9 >= 0 goto label242;

        $f1 = $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha>;

        $f2 = $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha>;

     label241:
        $b9 = $f1 cmpg $f2;

        if $b9 >= 0 goto label226;

        $z0 = 0;

        goto label226;

     label242:
        $z0 = 0;

        goto label226;

     label243:
        $f1 = $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha>;

        $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha> = $f1;

        $r0.<com.android.server.WindowManagerService: long mLastDimAnimTime> = 0L;

        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

        $f1 = $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha>;

        virtualinvoke $r11.<android.view.Surface: void setAlpha(float)>($f1);

     label244:
        if $z5 != 0 goto label228;

     label245:
        $r11 = $r0.<com.android.server.WindowManagerService: android.view.Surface mDimSurface>;

        virtualinvoke $r11.<android.view.Surface: void hide()>();

     label246:
        $r0.<com.android.server.WindowManagerService: boolean mDimShown> = 0;

     label247:
        goto label228;

     label248:
        $r35 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Illegal argument exception hiding dim surface");

        goto label246;

     label249:
        $r36 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Illegal argument exception hiding blur surface");

     label250:
        goto label232;

     label251:
        $r37 := @caughtexception;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 0;

        goto label039;

     label252:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i2 = $i2 - 1;

     label253:
        if $i2 < 0 goto label255;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r6 = (com.android.server.WindowManagerService$AppWindowToken) $r4;

        $z0 = $r6.<com.android.server.WindowManagerService$WindowToken: boolean hasVisible>;

        if $z0 != 0 goto label254;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r6);

        if $z0 != 0 goto label254;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>($r6);

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i2);

     label254:
        $i2 = $i2 + -1;

        goto label253;

     label255:
        if $z2 == 0 goto label256;

        $r14 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r14.<android.os.Handler: boolean sendEmptyMessage(int)>(3);

     label256:
        if $z3 == 0 goto label257;

        $l1 = 16L + $l1;

        $l10 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = $l1 - $l10;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void requestAnimationLocked(long)>($l1);

     label257:
        $r38 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        if $r7 == null goto label261;

        $z0 = 1;

     label258:
        virtualinvoke $r38.<com.android.server.WindowManagerService$KeyQ: void setHoldScreenLocked(boolean)>($z0);

        $b9 = $f0 cmpg 0.0F;

        if $b9 < 0 goto label259;

        $b9 = $f0 cmpl 1.0F;

        if $b9 <= 0 goto label262;

     label259:
        $r39 = $r0.<com.android.server.WindowManagerService: com.android.server.PowerManagerService mPowerManager>;

        virtualinvoke $r39.<com.android.server.PowerManagerService: void setScreenBrightnessOverride(int)>(-1);

     label260:
        $r22 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$Session mHoldingScreenOn>;

        if $r7 == $r22 goto label263;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$Session mHoldingScreenOn> = $r7;

        $r14 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r40 = virtualinvoke $r14.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(12, $r7);

        $r14 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r14.<android.os.Handler: boolean sendMessage(android.os.Message)>($r40);

        return;

     label261:
        $z0 = 0;

        goto label258;

     label262:
        $r39 = $r0.<com.android.server.WindowManagerService: com.android.server.PowerManagerService mPowerManager>;

        $f0 = 255.0F * $f0;

        $i2 = (int) $f0;

        virtualinvoke $r39.<com.android.server.PowerManagerService: void setScreenBrightnessOverride(int)>($i2);

        goto label260;

     label263:
        return;

        catch java.lang.RuntimeException from label006 to label007 with label030;
        catch java.lang.RuntimeException from label008 to label009 with label030;
        catch java.lang.RuntimeException from label011 to label012 with label030;
        catch java.lang.RuntimeException from label013 to label014 with label030;
        catch java.lang.RuntimeException from label017 to label018 with label030;
        catch java.lang.RuntimeException from label019 to label026 with label030;
        catch java.lang.RuntimeException from label028 to label029 with label030;
        catch android.os.RemoteException from label035 to label036 with label251;
        catch android.os.RemoteException from label037 to label038 with label251;
        catch java.lang.RuntimeException from label046 to label047 with label030;
        catch java.lang.RuntimeException from label048 to label049 with label030;
        catch java.lang.RuntimeException from label050 to label051 with label030;
        catch java.lang.RuntimeException from label052 to label053 with label030;
        catch java.lang.RuntimeException from label054 to label055 with label030;
        catch java.lang.RuntimeException from label056 to label057 with label030;
        catch java.lang.RuntimeException from label058 to label059 with label030;
        catch java.lang.RuntimeException from label061 to label062 with label030;
        catch java.lang.RuntimeException from label064 to label066 with label030;
        catch java.lang.RuntimeException from label067 to label068 with label030;
        catch java.lang.RuntimeException from label069 to label070 with label030;
        catch java.lang.RuntimeException from label071 to label072 with label030;
        catch java.lang.RuntimeException from label073 to label074 with label030;
        catch java.lang.RuntimeException from label075 to label076 with label030;
        catch java.lang.RuntimeException from label078 to label079 with label030;
        catch java.lang.RuntimeException from label080 to label081 with label030;
        catch java.lang.RuntimeException from label082 to label084 with label030;
        catch java.lang.RuntimeException from label084 to label085 with label126;
        catch java.lang.RuntimeException from label087 to label088 with label030;
        catch java.lang.RuntimeException from label089 to label090 with label136;
        catch java.lang.RuntimeException from label090 to label091 with label030;
        catch java.lang.RuntimeException from label092 to label094 with label030;
        catch java.lang.RuntimeException from label095 to label100 with label030;
        catch java.lang.RuntimeException from label101 to label102 with label143;
        catch java.lang.RuntimeException from label102 to label109 with label030;
        catch java.lang.RuntimeException from label110 to label111 with label030;
        catch java.lang.RuntimeException from label112 to label113 with label030;
        catch java.lang.RuntimeException from label113 to label114 with label030;
        catch java.lang.RuntimeException from label115 to label116 with label030;
        catch java.lang.RuntimeException from label117 to label121 with label030;
        catch java.lang.RuntimeException from label125 to label126 with label030;
        catch java.lang.RuntimeException from label127 to label128 with label030;
        catch java.lang.RuntimeException from label129 to label130 with label030;
        catch java.lang.RuntimeException from label131 to label133 with label030;
        catch java.lang.RuntimeException from label135 to label136 with label030;
        catch java.lang.RuntimeException from label137 to label138 with label030;
        catch java.lang.RuntimeException from label139 to label140 with label030;
        catch java.lang.RuntimeException from label141 to label143 with label030;
        catch java.lang.RuntimeException from label144 to label146 with label030;
        catch java.lang.RuntimeException from label147 to label148 with label151;
        catch java.lang.RuntimeException from label148 to label150 with label030;
        catch java.lang.RuntimeException from label152 to label154 with label030;
        catch java.lang.RuntimeException from label155 to label156 with label030;
        catch java.lang.RuntimeException from label157 to label158 with label030;
        catch java.lang.RuntimeException from label159 to label160 with label030;
        catch java.lang.RuntimeException from label161 to label162 with label030;
        catch java.lang.RuntimeException from label163 to label164 with label030;
        catch java.lang.RuntimeException from label165 to label166 with label030;
        catch java.lang.RuntimeException from label167 to label168 with label030;
        catch java.lang.RuntimeException from label169 to label170 with label030;
        catch java.lang.RuntimeException from label171 to label172 with label175;
        catch java.lang.RuntimeException from label172 to label174 with label030;
        catch java.lang.RuntimeException from label176 to label178 with label030;
        catch java.lang.RuntimeException from label179 to label181 with label030;
        catch java.lang.RuntimeException from label182 to label183 with label030;
        catch java.lang.Exception from label184 to label185 with label207;
        catch java.lang.RuntimeException from label185 to label186 with label030;
        catch java.lang.RuntimeException from label187 to label188 with label208;
        catch java.lang.RuntimeException from label188 to label190 with label030;
        catch java.lang.RuntimeException from label191 to label193 with label030;
        catch java.lang.RuntimeException from label195 to label197 with label030;
        catch java.lang.RuntimeException from label198 to label199 with label030;
        catch java.lang.RuntimeException from label200 to label201 with label030;
        catch java.lang.Exception from label202 to label203 with label213;
        catch java.lang.RuntimeException from label203 to label204 with label030;
        catch java.lang.RuntimeException from label204 to label205 with label214;
        catch java.lang.RuntimeException from label205 to label206 with label030;
        catch java.lang.RuntimeException from label207 to label210 with label030;
        catch java.lang.RuntimeException from label210 to label211 with label030;
        catch java.lang.RuntimeException from label212 to label216 with label030;
        catch java.lang.RuntimeException from label217 to label218 with label030;
        catch java.lang.RuntimeException from label219 to label221 with label030;
        catch java.lang.RuntimeException from label222 to label223 with label030;
        catch java.lang.RuntimeException from label224 to label225 with label030;
        catch java.lang.RuntimeException from label226 to label227 with label030;
        catch java.lang.RuntimeException from label228 to label229 with label030;
        catch java.lang.IllegalArgumentException from label231 to label232 with label249;
        catch java.lang.RuntimeException from label230 to label232 with label030;
        catch java.lang.RuntimeException from label232 to label233 with label030;
        catch java.lang.RuntimeException from label234 to label235 with label030;
        catch java.lang.RuntimeException from label236 to label237 with label030;
        catch java.lang.RuntimeException from label238 to label239 with label030;
        catch java.lang.RuntimeException from label240 to label241 with label030;
        catch java.lang.RuntimeException from label243 to label244 with label030;
        catch java.lang.RuntimeException from label245 to label246 with label248;
        catch java.lang.RuntimeException from label246 to label247 with label030;
        catch java.lang.RuntimeException from label248 to label250 with label030;
    }

    private final void performLayoutLockedInner()
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$AppWindowToken $r1;
        android.view.Display $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.ArrayList $r3;
        boolean $z0;
        android.view.WindowManagerPolicy $r4;
        java.lang.Object $r5;
        com.android.server.WindowManagerService$WindowState $r6, $r9;
        com.android.server.WindowManagerService$WindowToken $r7;
        android.view.WindowManager$LayoutParams $r8;

        $r0 := @this: com.android.server.WindowManagerService;

        $r2 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r2.<android.view.Display: int getWidth()>();

        $r2 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        $i1 = virtualinvoke $r2.<android.view.Display: int getHeight()>();

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i3 = 0;

     label01:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded>;

        if $z0 == 0 goto label17;

        $r4 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<android.view.WindowManagerPolicy: void beginLayoutLw(int,int)>($i0, $i1);

        $i4 = -1;

        $i5 = $i2 - 1;

     label02:
        if $i5 < 0 goto label10;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r6 = (com.android.server.WindowManagerService$WindowState) $r5;

        $r1 = $r6.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $i6 = $r6.<com.android.server.WindowManagerService$WindowState: int mViewVisibility>;

        if $i6 == 8 goto label04;

        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mRelayoutCalled>;

        if $z0 == 0 goto label04;

        $r7 = $r6.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowToken mRootToken>;

        $z0 = $r7.<com.android.server.WindowManagerService$WindowToken: boolean hidden>;

        if $z0 != 0 goto label04;

        if $r1 == null goto label03;

        $z0 = $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested>;

        if $z0 != 0 goto label04;

     label03:
        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mPolicyVisibility>;

        if $z0 == 0 goto label04;

        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mAttachedHidden>;

        if $z0 != 0 goto label04;

        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mExiting>;

        if $z0 != 0 goto label04;

        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mDestroying>;

        if $z0 == 0 goto label08;

     label04:
        $z0 = 1;

     label05:
        if $z0 == 0 goto label06;

        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mHaveFrame>;

        if $z0 != 0 goto label07;

     label06:
        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mLayoutAttached>;

        if $z0 != 0 goto label09;

        $r4 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r8 = $r6.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        interfaceinvoke $r4.<android.view.WindowManagerPolicy: void layoutWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams,android.view.WindowManagerPolicy$WindowState)>($r6, $r8, null);

     label07:
        $i5 = $i5 + -1;

        goto label02;

     label08:
        $z0 = 0;

        goto label05;

     label09:
        if $i4 >= 0 goto label07;

        $i4 = $i5;

        goto label07;

     label10:
        if $i4 < 0 goto label14;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r6 = (com.android.server.WindowManagerService$WindowState) $r5;

        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mLayoutAttached>;

        if $z0 == 0 goto label13;

        $i5 = $r6.<com.android.server.WindowManagerService$WindowState: int mViewVisibility>;

        if $i5 == 8 goto label11;

        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mRelayoutCalled>;

        if $z0 != 0 goto label12;

     label11:
        $z0 = $r6.<com.android.server.WindowManagerService$WindowState: boolean mHaveFrame>;

        if $z0 != 0 goto label13;

     label12:
        $r4 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r8 = $r6.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r9 = $r6.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowState mAttachedWindow>;

        interfaceinvoke $r4.<android.view.WindowManagerPolicy: void layoutWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams,android.view.WindowManagerPolicy$WindowState)>($r6, $r8, $r9);

     label13:
        $i4 = $i4 + -1;

        goto label10;

     label14:
        $r4 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r4.<android.view.WindowManagerPolicy: boolean finishLayoutLw()>();

        if $z0 != 0 goto label15;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 0;

        goto label01;

     label15:
        if $i3 <= 2 goto label16;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Layout repeat aborted after too many iterations");

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 0;

        goto label01;

     label16:
        $i3 = $i3 + 1;

        goto label01;

     label17:
        return;
    }

    private void placeWindowAfter(java.lang.Object, com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        java.lang.Object $r1;
        com.android.server.WindowManagerService$WindowState $r2;
        int $i0;
        java.util.ArrayList $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.android.server.WindowManagerService$WindowState;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int indexOf(java.lang.Object)>($r1);

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = $i0 + 1;

        virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r2);

        return;
    }

    private void placeWindowBefore(java.lang.Object, com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        java.lang.Object $r1;
        com.android.server.WindowManagerService$WindowState $r2;
        int $i0;
        java.util.ArrayList $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: com.android.server.WindowManagerService$WindowState;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int indexOf(java.lang.Object)>($r1);

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r3.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r2);

        return;
    }

    private final int reAddAppWindowsLocked(int, com.android.server.WindowManagerService$WindowToken)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowToken $r1;
        int $i0, $i1, $i2;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        com.android.server.WindowManagerService$WindowState $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.android.server.WindowManagerService$WindowToken;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $i0 = specialinvoke $r0.<com.android.server.WindowManagerService: int reAddWindowLocked(int,com.android.server.WindowManagerService$WindowState)>($i0, $r4);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $i0;
    }

    private final int reAddWindowLocked(int, com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1, $r4;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r2;
        boolean $z0;
        java.lang.Object $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.android.server.WindowManagerService$WindowState;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $z0 = 0;

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label3;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        if $z0 != 0 goto label2;

        $i3 = $r4.<com.android.server.WindowManagerService$WindowState: int mSubLayer>;

        if $i3 < 0 goto label2;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r2.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r1);

        $i0 = $i0 + 1;

        $z0 = 1;

     label2:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r2.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r4);

        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label1;

     label3:
        if $z0 != 0 goto label4;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r2.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r1);

        $i0 = $i0 + 1;

        return $i0;

     label4:
        return $i0;
    }

    private void reAddWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;
        int $i0;
        java.util.ArrayList $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowState;

        specialinvoke $r0.<com.android.server.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState,boolean)>($r1, 0);

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>($r1);

        if $i0 < 0 goto label1;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i0);

        specialinvoke $r0.<com.android.server.WindowManagerService: int reAddWindowLocked(int,com.android.server.WindowManagerService$WindowState)>($i0, $r1);

        return;

     label1:
        return;
    }

    private void removeAppTokensLocked(java.util.List)
    {
        com.android.server.WindowManagerService $r0;
        java.util.List $r1;
        int $i0, $i1;
        java.lang.Object $r2;
        android.os.IBinder $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        java.util.ArrayList $r5;
        boolean $z0;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (android.os.IBinder) $r2;

        $r4 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r3);

        $r5 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $z0 = virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to reorder token that doesn\'t exist: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        $i1 = $i1 + -1;

        $i0 = $i0 + -1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return;
    }

    private void removeWindowInnerLocked(com.android.server.WindowManagerService$Session, com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        com.android.server.WindowManagerService$WindowState $r2, $r6;
        com.android.server.WindowManagerService$AppWindowToken $r3;
        com.android.server.WindowManagerService$WindowToken $r4;
        com.android.server.WindowManagerService$KeyWaiter $r5;
        android.view.WindowManagerPolicy $r7;
        java.util.HashMap $r8;
        android.view.IWindow $r9;
        android.os.IBinder $r10;
        java.util.ArrayList $r11;
        int $i0;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r12;
        com.android.server.WindowManagerService$StartingData $r13;
        android.view.View $r14;
        com.android.server.WindowManagerService$H $r15;
        android.os.Message $r16;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: com.android.server.WindowManagerService$WindowState;

        $r5 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r1 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        virtualinvoke $r5.<com.android.server.WindowManagerService$KeyWaiter: void releasePendingPointerLocked(com.android.server.WindowManagerService$Session)>($r1);

        $r5 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r1 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        virtualinvoke $r5.<com.android.server.WindowManagerService$KeyWaiter: void releasePendingTrackballLocked(com.android.server.WindowManagerService$Session)>($r1);

        $r2.<com.android.server.WindowManagerService$WindowState: boolean mRemoved> = 1;

        $r6 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget>;

        if $r6 != $r2 goto label01;

        virtualinvoke $r0.<com.android.server.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(0);

     label01:
        $r7 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r7.<android.view.WindowManagerPolicy: void removeWindowLw(android.view.WindowManagerPolicy$WindowState)>($r2);

        virtualinvoke $r2.<com.android.server.WindowManagerService$WindowState: void removeLocked()>();

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        $r9 = $r2.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

        $r10 = interfaceinvoke $r9.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r10);

        $r11 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>($r2);

        $r6 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        if $r6 != $r2 goto label06;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow> = null;

     label02:
        $r4 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowToken mToken>;

        $r3 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r11 = $r4.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>($r2);

        if $r3 == null goto label03;

        $r11 = $r3.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>($r2);

     label03:
        $r11 = $r4.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i0 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label04;

        $z0 = $r4.<com.android.server.WindowManagerService$WindowToken: boolean explicit>;

        if $z0 != 0 goto label07;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r10 = $r4.<com.android.server.WindowManagerService$WindowToken: android.os.IBinder token>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r10);

        $r11 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>($r4);

     label04:
        if $r3 == null goto label05;

        $r6 = $r3.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow>;

        if $r6 != $r2 goto label08;

        $r3.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow> = null;

     label05:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mInLayout>;

        if $z0 != 0 goto label10;

        specialinvoke $r0.<com.android.server.WindowManagerService: void assignLayersLocked()>();

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        $r3 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r3 == null goto label11;

        $r3 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        virtualinvoke $r3.<com.android.server.WindowManagerService$AppWindowToken: void updateReportedVisibilityLocked()>();

        return;

     label06:
        $r12 = $r2.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r12.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2012 goto label02;

        $r11 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        virtualinvoke $r11.<java.util.ArrayList: boolean remove(java.lang.Object)>($r2);

        goto label02;

     label07:
        if $r3 == null goto label04;

        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean firstWindowDrawn> = 0;

        goto label04;

     label08:
        $r11 = $r3.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        $i0 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if $i0 != 0 goto label09;

        $r13 = $r3.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData>;

        if $r13 == null goto label09;

        $r3.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData> = null;

        goto label05;

     label09:
        $r11 = $r3.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        $i0 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label05;

        $r14 = $r3.<com.android.server.WindowManagerService$AppWindowToken: android.view.View startingView>;

        if $r14 == null goto label05;

        $r15 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r16 = virtualinvoke $r15.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(6, $r3);

        $r15 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r15.<android.os.Handler: boolean sendMessage(android.os.Message)>($r16);

        goto label05;

     label10:
        return;

     label11:
        return;
    }

    private void setTransparentRegionWindow(com.android.server.WindowManagerService$Session, android.view.IWindow, android.graphics.Region)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        android.graphics.Region $r3;
        long $l0;
        java.util.HashMap $r4;
        com.android.server.WindowManagerService$WindowState $r5;
        android.view.Surface $r6;
        java.lang.Throwable $r7, $r8, $r9;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.view.IWindow;

        $r3 := @parameter2: android.graphics.Region;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $r4 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r4;

     label02:
        $r5 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r1, $r2);

        if $r5 == null goto label05;

        $r6 = $r5.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r6 == null goto label05;

        staticinvoke <android.view.Surface: void openTransaction()>();

     label03:
        $r6 = $r5.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        virtualinvoke $r6.<android.view.Surface: void setTransparentRegionHint(android.graphics.Region)>($r3);

     label04:
        staticinvoke <android.view.Surface: void closeTransaction()>();

     label05:
        exitmonitor $r4;

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;

     label07:
        $r7 := @caughtexception;

     label08:
        staticinvoke <android.view.Surface: void closeTransaction()>();

        throw $r7;

     label09:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label10:
        throw $r8;

     label11:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
        catch java.lang.Throwable from label10 to label11 with label11;
    }

    private void startFreezingDisplayLocked()
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0;
        com.android.server.WindowManagerService$KeyWaiter $r1, $r2;
        java.lang.Throwable $r3;
        android.os.PowerManager$WakeLock $r4;
        long $l0, $l1;
        byte $b2;
        com.android.server.WindowManagerService$H $r5;
        java.lang.Runtime $r6;
        int $i3;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z0 == 0 goto label5;

        $r1 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r2.<com.android.server.WindowManagerService$KeyWaiter: boolean mWasFrozen> = 1;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

     label5:
        $r4 = $r0.<com.android.server.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void acquire()>();

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = $r0.<com.android.server.WindowManagerService: long mFreezeGcPending>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label8;

        $l1 = $r0.<com.android.server.WindowManagerService: long mFreezeGcPending>;

        $l1 = $l1 + 1000L;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label6;

        $r5 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r5.<android.os.Handler: void removeMessages(int)>(15);

        $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r6.<java.lang.Runtime: void gc()>();

        $r0.<com.android.server.WindowManagerService: long mFreezeGcPending> = $l0;

     label6:
        $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen> = 1;

        $i3 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        if $i3 == 0 goto label7;

        $r0.<com.android.server.WindowManagerService: int mNextAppTransition> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mAppTransitionReady> = 1;

     label7:
        staticinvoke <android.view.Surface: void freezeDisplay(int)>(0);

        return;

     label8:
        $r0.<com.android.server.WindowManagerService: long mFreezeGcPending> = $l0;

        goto label6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void stopFreezingDisplayLocked()
    {
        com.android.server.WindowManagerService $r0;
        android.os.Message $r1;
        boolean $z0;
        com.android.server.WindowManagerService$H $r2, $r5;
        com.android.server.WindowManagerService$KeyWaiter $r3, $r4;
        android.os.PowerManager$WakeLock $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen> = 0;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(17);

        staticinvoke <android.view.Surface: void unfreezeDisplay(int)>(0);

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        entermonitor $r3;

     label2:
        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r4.<com.android.server.WindowManagerService$KeyWaiter: boolean mWasFrozen> = 1;

        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r4.<java.lang.Object: void notifyAll()>();

        exitmonitor $r3;

     label3:
        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(15);

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r5 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r1 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int)>(15);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r1, 2000L);

        $r6 = $r0.<com.android.server.WindowManagerService: android.os.PowerManager$WakeLock mScreenFrozenLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void release()>();

        return;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor $r3;

     label6:
        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private boolean tmpRemoveAppWindowsLocked(com.android.server.WindowManagerService$WindowToken)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowToken $r1;
        java.util.ArrayList $r2, $r5;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        com.android.server.WindowManagerService$WindowState $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowToken;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>($r4);

        $r2 = $r4.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label2:
        if $i2 <= 0 goto label3;

        $i2 = $i2 + -1;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r5 = $r4.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $r3 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>($r3);

        goto label2;

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        if $i0 <= 0 goto label5;

        return 1;

     label5:
        return 0;
    }

    private int tmpRemoveWindowLocked(int, com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1, $r4;
        int $i0, $i1, $i2;
        java.util.ArrayList $r2;
        java.lang.Object $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r1 := @parameter1: com.android.server.WindowManagerService$WindowState;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>($r1);

        if $i1 < 0 goto label4;

        if $i1 >= $i0 goto label1;

        $i0 = $i0 + -1;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i1);

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label2:
        if $i1 <= 0 goto label5;

        $i1 = $i1 + -1;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>($r4);

        if $i2 < 0 goto label2;

        if $i2 >= $i0 goto label3;

        $i0 = $i0 + -1;

     label3:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i2);

        goto label2;

     label4:
        return $i0;

     label5:
        return $i0;
    }

    private boolean updateFocusedWindowLocked(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0;
        com.android.server.WindowManagerService$WindowState $r1, $r2, $r3;
        com.android.server.WindowManagerService$H $r4;
        java.util.ArrayList $r5;
        boolean $z0;
        com.android.server.WindowManagerService$KeyWaiter $r6;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r3 = specialinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState computeFocusedWindowLocked()>();

        $r1 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus>;

        if $r1 == $r3 goto label7;

        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(2);

        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r4.<android.os.Handler: boolean sendEmptyMessage(int)>(2);

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus>;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus> = $r3;

        $r5 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mLosingFocus>;

        virtualinvoke $r5.<java.util.ArrayList: boolean remove(java.lang.Object)>($r3);

        $r1 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        if $r3 == $r1 goto label3;

        if $r2 == $r1 goto label3;

        if $i0 == 1 goto label5;

        if $i0 == 3 goto label5;

        $z0 = 1;

     label1:
        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>($z0);

        if $z0 == 0 goto label2;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

     label2:
        if $i0 != 2 goto label6;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutLockedInner()>();

     label3:
        if $r3 == null goto label4;

        if $i0 == 1 goto label4;

        $r6 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r6.<com.android.server.WindowManagerService$KeyWaiter: void handleNewWindowLocked(com.android.server.WindowManagerService$WindowState)>($r3);

     label4:
        return 1;

     label5:
        $z0 = 0;

        goto label1;

     label6:
        if $i0 != 3 goto label3;

        specialinvoke $r0.<com.android.server.WindowManagerService: void assignLayersLocked()>();

        goto label3;

     label7:
        return 0;
    }

    private final void wakeupIfNeeded(com.android.server.WindowManagerService$WindowState, int)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;
        int $i0, $i2;
        long $l1;
        android.view.WindowManager$LayoutParams $r2;
        com.android.server.PowerManagerService $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowState;

        $i0 := @parameter1: int;

        if $r1 == null goto label1;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i2 = $r2.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 == 2004 goto label2;

     label1:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.PowerManagerService mPowerManager>;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke $r3.<com.android.server.PowerManagerService: void userActivity(long,boolean,int)>($l1, 0, $i0);

        return;

     label2:
        return;
    }

    public void addAppToken(int, android.view.IApplicationToken, int, int, boolean)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1, $i2;
        android.view.IApplicationToken $r1;
        boolean $z0, $z1;
        java.util.HashMap $r2, $r9;
        android.os.IBinder $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        java.util.ArrayList $r8;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.view.IApplicationToken;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $z0 := @parameter4: boolean;

        $z1 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "addAppToken()");

        if $z1 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = interfaceinvoke $r1.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r3);

        if $r4 == null goto label6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add existing app token: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r6);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r7;

     label6:
        $r4 = new com.android.server.WindowManagerService$AppWindowToken;

        specialinvoke $r4.<com.android.server.WindowManagerService$AppWindowToken: void <init>(com.android.server.WindowManagerService,android.view.IApplicationToken)>($r0, $r1);

        $r4.<com.android.server.WindowManagerService$AppWindowToken: int groupId> = $i1;

        $r4.<com.android.server.WindowManagerService$AppWindowToken: boolean appFullscreen> = $z0;

        $r4.<com.android.server.WindowManagerService$AppWindowToken: int requestedOrientation> = $i2;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        virtualinvoke $r8.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r4);

        $r9 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r3 = interfaceinvoke $r1.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        $r4.<com.android.server.WindowManagerService$WindowToken: boolean hidden> = 1;

        $r4.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested> = 1;

        exitmonitor $r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    void addInputMethodWindowToListLocked(com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1, $r2;
        int $i0;
        com.android.server.WindowManagerService$AppWindowToken $r3;
        java.util.ArrayList $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowState;

        $i0 = virtualinvoke $r0.<com.android.server.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>(1);

        if $i0 < 0 goto label1;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget>;

        $r3 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mTargetAppToken> = $r3;

        $r4 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r1);

        $i0 = $i0 + 1;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void moveInputMethodDialogsLocked(int)>($i0);

        return;

     label1:
        $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mTargetAppToken> = null;

        specialinvoke $r0.<com.android.server.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState,boolean)>($r1, 1);

        virtualinvoke $r0.<com.android.server.WindowManagerService: void moveInputMethodDialogsLocked(int)>($i0);

        return;
    }

    public int addWindow(com.android.server.WindowManagerService$Session, android.view.IWindow, android.view.WindowManager$LayoutParams, int, android.graphics.Rect)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        android.view.WindowManager$LayoutParams $r3, $r20;
        int $i0, $i1;
        android.graphics.Rect $r4;
        com.android.server.WindowManagerService$AppWindowToken $r5;
        android.view.WindowManagerPolicy $r6;
        boolean $z0, $z1, $z2, $z3;
        com.android.server.WindowManagerService$WindowState $r7, $r19;
        java.util.HashMap $r8, $r14;
        android.view.Display $r9;
        android.content.Context $r10;
        java.lang.Object $r11;
        android.view.WindowManager $r12;
        com.android.server.WindowManagerService$KeyQ $r13;
        android.os.IBinder $r15;
        java.lang.StringBuilder $r16;
        java.lang.String $r17;
        java.lang.Throwable $r18;
        com.android.server.WindowManagerService$WindowToken $r21;
        com.android.server.WindowManagerService$WindowState$DeathRecipient $r22;
        byte $b2;
        java.util.ArrayList $r23;
        com.android.server.WindowManagerService$KeyWaiter $r24;
        long $l3;
        android.content.res.Configuration $r25;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.view.IWindow;

        $r3 := @parameter2: android.view.WindowManager$LayoutParams;

        $i0 := @parameter3: int;

        $r4 := @parameter4: android.graphics.Rect;

        $r6 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i1 = interfaceinvoke $r6.<android.view.WindowManagerPolicy: int checkAddPermission(android.view.WindowManager$LayoutParams)>($r3);

        if $i1 == 0 goto label01;

        return $i1;

     label01:
        $z0 = 0;

        $r7 = null;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r8;

     label02:
        $r9 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        if $r9 != null goto label03;

        $r10 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("window");

        $r12 = (android.view.WindowManager) $r11;

        $r9 = interfaceinvoke $r12.<android.view.WindowManager: android.view.Display getDefaultDisplay()>();

        $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay> = $r9;

        $r13 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        $r9 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        virtualinvoke $r13.<com.android.server.KeyInputQueue: void setDisplay(android.view.Display)>($r9);

        $z0 = 1;

     label03:
        $r14 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        $r15 = interfaceinvoke $r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $z1 = virtualinvoke $r14.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r15);

        if $z1 == 0 goto label08;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already added");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label04:
        return -5;

     label05:
        $r18 := @caughtexception;

     label06:
        exitmonitor $r8;

     label07:
        throw $r18;

     label08:
        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 < 1000 goto label12;

        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 > 1999 goto label12;

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r19 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session,android.os.IBinder)>(null, $r15);

        $r7 = $r19;

        if $r19 != null goto label10;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window with token that is not a window: ");

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label09:
        return -2;

     label10:
        $r20 = $r19.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r20.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 < 1000 goto label12;

        $r20 = $r19.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r20.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 > 1999 goto label12;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window with token that is a sub-window: ");

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label11:
        return -2;

     label12:
        $z1 = 0;

        $r14 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r11 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r15);

        $r21 = (com.android.server.WindowManagerService$WindowToken) $r11;

        if $r21 != null goto label21;

        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 < 1 goto label14;

        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 > 99 goto label14;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add application window with unknown token ");

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label13:
        return -1;

     label14:
        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 2011 goto label16;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add input method window with unknown token ");

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label15:
        return -1;

     label16:
        $r21 = new com.android.server.WindowManagerService$WindowToken;

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        specialinvoke $r21.<com.android.server.WindowManagerService$WindowToken: void <init>(com.android.server.WindowManagerService,android.os.IBinder,int,boolean)>($r0, $r15, -1, 0);

        $z1 = 1;

     label17:
        $r19 = new com.android.server.WindowManagerService$WindowState;

        specialinvoke $r19.<com.android.server.WindowManagerService$WindowState: void <init>(com.android.server.WindowManagerService,com.android.server.WindowManagerService$Session,android.view.IWindow,com.android.server.WindowManagerService$WindowToken,com.android.server.WindowManagerService$WindowState,android.view.WindowManager$LayoutParams,int)>($r0, $r1, $r2, $r21, $r7, $r3, $i0);

     label18:
        $r22 = $r19.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowState$DeathRecipient mDeathRecipient>;

        if $r22 != null goto label29;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding window client ");

        $r15 = interfaceinvoke $r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" that is dead, aborting.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label19:
        return -4;

     label20:
        $r18 := @caughtexception;

        goto label06;

     label21:
        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 < 1 goto label27;

        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 > 99 goto label27;

        $r5 = $r21.<com.android.server.WindowManagerService$WindowToken: com.android.server.WindowManagerService$AppWindowToken appWindowToken>;

        if $r5 != null goto label23;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window with non-application token ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label22:
        return -3;

     label23:
        $z2 = $r5.<com.android.server.WindowManagerService$AppWindowToken: boolean removed>;

        if $z2 == 0 goto label25;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add window with exiting application token ");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label24:
        return -4;

     label25:
        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 3 goto label17;

        $z2 = $r5.<com.android.server.WindowManagerService$AppWindowToken: boolean firstWindowDrawn>;

        if $z2 == 0 goto label17;

        exitmonitor $r8;

     label26:
        return -6;

     label27:
        $i1 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 2011 goto label17;

        $i1 = $r21.<com.android.server.WindowManagerService$WindowToken: int windowType>;

        if $i1 == 2011 goto label17;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add input method window with bad token ");

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Aborting.");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r17);

        exitmonitor $r8;

     label28:
        return -1;

     label29:
        $r6 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r20 = $r19.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        interfaceinvoke $r6.<android.view.WindowManagerPolicy: void adjustWindowParamsLw(android.view.WindowManager$LayoutParams)>($r20);

        $r6 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i0 = interfaceinvoke $r6.<android.view.WindowManagerPolicy: int prepareAddWindowLw(android.view.WindowManagerPolicy$WindowState,android.view.WindowManager$LayoutParams)>($r19, $r3);

        if $i0 == 0 goto label31;

        exitmonitor $r8;

     label30:
        return $i0;

     label31:
        $b2 = 0;

        staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if $z1 == 0 goto label32;

        $r14 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r15 = $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r21);

        $r23 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

     label32:
        virtualinvoke $r19.<com.android.server.WindowManagerService$WindowState: void attach()>();

        $r14 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        $r15 = interfaceinvoke $r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r19);

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label33;

        $r5 = $r21.<com.android.server.WindowManagerService$WindowToken: com.android.server.WindowManagerService$AppWindowToken appWindowToken>;

        if $r5 == null goto label33;

        $r5 = $r21.<com.android.server.WindowManagerService$WindowToken: com.android.server.WindowManagerService$AppWindowToken appWindowToken>;

        $r5.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow> = $r19;

     label33:
        $z1 = 1;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2011 goto label43;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow> = $r19;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void addInputMethodWindowToListLocked(com.android.server.WindowManagerService$WindowState)>($r19);

        $z1 = 0;

     label34:
        $r19.<com.android.server.WindowManagerService$WindowState: boolean mEnterAnimationPending> = 1;

        $r6 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r6.<android.view.WindowManagerPolicy: void getContentInsetHintLw(android.view.WindowManager$LayoutParams,android.graphics.Rect)>($r3, $r4);

        $z2 = $r0.<com.android.server.WindowManagerService: boolean mInTouchMode>;

        if $z2 == 0 goto label35;

        $b2 = 0 | 1;

     label35:
        if $r19 == null goto label36;

        $r5 = $r19.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r5 == null goto label36;

        $r5 = $r19.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $z2 = $r5.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden>;

        if $z2 != 0 goto label37;

     label36:
        $b2 = $b2 | 2;

     label37:
        $z2 = 0;

        $z3 = virtualinvoke $r19.<com.android.server.WindowManagerService$WindowState: boolean canReceiveKeys()>();

        if $z3 == 0 goto label38;

        $z3 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(1);

        $z2 = $z3;

        if $z3 != 1 goto label38;

        $z1 = 0;

     label38:
        if $z1 == 0 goto label39;

        virtualinvoke $r0.<com.android.server.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(0);

     label39:
        specialinvoke $r0.<com.android.server.WindowManagerService: void assignLayersLocked()>();

        if $z2 == 0 goto label40;

        $r7 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus>;

        if $r7 == null goto label40;

        $r24 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r7 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus>;

        virtualinvoke $r24.<com.android.server.WindowManagerService$KeyWaiter: void handleNewWindowLocked(com.android.server.WindowManagerService$WindowState)>($r7);

     label40:
        exitmonitor $r8;

     label41:
        $l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        if $z0 == 0 goto label46;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void sendNewConfiguration()>();

     label42:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l3);

        return $b2;

     label43:
        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2012 goto label44;

        $r23 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        virtualinvoke $r23.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        specialinvoke $r0.<com.android.server.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState,boolean)>($r19, 1);

        virtualinvoke $r0.<com.android.server.WindowManagerService: void adjustInputMethodDialogsLocked()>();

        $z1 = 0;

        goto label34;

     label44:
        specialinvoke $r0.<com.android.server.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState,boolean)>($r19, 1);

     label45:
        goto label34;

     label46:
        $z0 = virtualinvoke $r19.<com.android.server.WindowManagerService$WindowState: boolean isVisibleOrAdding()>();

        if $z0 == 0 goto label42;

        $r25 = virtualinvoke $r0.<com.android.server.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)>(null, null);

        if $r25 == null goto label42;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void sendNewConfiguration()>();

        goto label42;

        catch java.lang.Throwable from label02 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label20;
        catch java.lang.Throwable from label08 to label09 with label05;
        catch java.lang.Throwable from label10 to label11 with label05;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label14 to label15 with label05;
        catch java.lang.Throwable from label16 to label18 with label05;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.lang.Throwable from label21 to label22 with label05;
        catch java.lang.Throwable from label23 to label24 with label05;
        catch java.lang.Throwable from label25 to label26 with label05;
        catch java.lang.Throwable from label27 to label28 with label05;
        catch java.lang.Throwable from label29 to label30 with label20;
        catch java.lang.Throwable from label31 to label41 with label20;
        catch java.lang.Throwable from label43 to label45 with label20;
    }

    public void addWindowToken(android.os.IBinder, int)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        int $i0;
        boolean $z0;
        java.util.HashMap $r2, $r3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowToken $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        java.util.ArrayList $r9;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $i0 := @parameter1: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "addWindowToken()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

        if $r5 == null goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to add existing input method token: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r8;

     label6:
        $r5 = new com.android.server.WindowManagerService$WindowToken;

        specialinvoke $r5.<com.android.server.WindowManagerService$WindowToken: void <init>(com.android.server.WindowManagerService,android.os.IBinder,int,boolean)>($r0, $r1, $i0, 1);

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r5);

        $r9 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        exitmonitor $r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    void adjustInputMethodDialogsLocked()
    {
        com.android.server.WindowManagerService $r0;
        int $i0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 = virtualinvoke $r0.<com.android.server.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>(1);

        virtualinvoke $r0.<com.android.server.WindowManagerService: void moveInputMethodDialogsLocked(int)>($i0);

        return;
    }

    boolean checkCallingPermission(java.lang.String, java.lang.String)
    {
        com.android.server.WindowManagerService $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        android.content.Context $r3;
        java.lang.StringBuilder $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 != $i1 goto label1;

        return 1;

     label1:
        $r3 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>($r1);

        if $i0 != 0 goto label2;

        return 1;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from pid=");

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requires ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r1);

        return 0;
    }

    int computeForcedAppOrientationLocked()
    {
        com.android.server.WindowManagerService $r0;
        int $i0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 = virtualinvoke $r0.<com.android.server.WindowManagerService: int getOrientationFromWindowsLocked()>();

        if $i0 != -1 goto label1;

        $i0 = virtualinvoke $r0.<com.android.server.WindowManagerService: int getOrientationFromAppTokensLocked()>();

        return $i0;

     label1:
        return $i0;
    }

    public android.content.res.Configuration computeNewConfiguration()
    {
        com.android.server.WindowManagerService $r0;
        java.util.HashMap $r1;
        android.content.res.Configuration $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label1:
        $r2 = virtualinvoke $r0.<com.android.server.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()>();

        exitmonitor $r1;

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    android.content.res.Configuration computeNewConfigurationLocked()
    {
        com.android.server.WindowManagerService $r0;
        android.content.res.Configuration $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        long $l0, $l1;
        byte $b2;
        com.android.server.WindowManagerService$H $r4;
        java.lang.Runtime $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = new android.content.res.Configuration;

        specialinvoke $r1.<android.content.res.Configuration: void <init>()>();

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean computeNewConfigurationLocked(android.content.res.Configuration)>($r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config changed: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r3);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = $r0.<com.android.server.WindowManagerService: long mFreezeGcPending>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label3;

        $l1 = $r0.<com.android.server.WindowManagerService: long mFreezeGcPending>;

        $l1 = $l1 + 1000L;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label2;

        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r4.<android.os.Handler: void removeMessages(int)>(15);

        $r5 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>();

        virtualinvoke $r5.<java.lang.Runtime: void gc()>();

        $r0.<com.android.server.WindowManagerService: long mFreezeGcPending> = $l0;

     label2:
        return $r1;

     label3:
        $r0.<com.android.server.WindowManagerService: long mFreezeGcPending> = $l0;

        goto label2;
    }

    boolean computeNewConfigurationLocked(android.content.res.Configuration)
    {
        com.android.server.WindowManagerService $r0;
        android.content.res.Configuration $r1;
        android.view.Display $r2;
        com.android.server.WindowManagerService$KeyQ $r3;
        int $i0, $i1;
        byte $b2;
        android.view.WindowManagerPolicy $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.content.res.Configuration;

        $r2 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        if $r2 != null goto label1;

        return 0;

     label1:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r3.<com.android.server.KeyInputQueue: void getInputConfiguration(android.content.res.Configuration)>($r1);

        $r2 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r2.<android.view.Display: int getWidth()>();

        $r2 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        $i1 = virtualinvoke $r2.<android.view.Display: int getHeight()>();

        $b2 = 3;

        if $i0 >= $i1 goto label3;

        $b2 = 1;

     label2:
        $r1.<android.content.res.Configuration: int orientation> = $b2;

        $r1.<android.content.res.Configuration: int keyboardHidden> = 1;

        $r1.<android.content.res.Configuration: int hardKeyboardHidden> = 1;

        $r4 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r4.<android.view.WindowManagerPolicy: void adjustConfigurationLw(android.content.res.Configuration)>($r1);

        return 1;

     label3:
        if $i0 <= $i1 goto label2;

        $b2 = 2;

        goto label2;
    }

    public boolean detectSafeMode()
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0;
        android.view.WindowManagerPolicy $r1;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: boolean detectSafeMode()>();

        $r0.<com.android.server.WindowManagerService: boolean mSafeMode> = $z0;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mSafeMode>;

        return $z0;
    }

    public void disableKeyguard(android.os.IBinder, java.lang.String)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        java.lang.String $r2;
        int $i0;
        android.content.Context $r3;
        java.lang.SecurityException $r4;
        android.os.TokenWatcher $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $r2 := @parameter1: java.lang.String;

        $r3 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r3.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 == 0 goto label1;

        $r4 = new java.lang.SecurityException;

        specialinvoke $r4.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r4;

     label1:
        $r5 = $r0.<com.android.server.WindowManagerService: android.os.TokenWatcher mKeyguardDisabled>;

        virtualinvoke $r5.<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>($r1, $r2);

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.WindowManagerService $r0;
        java.io.FileDescriptor $r1;
        java.io.PrintWriter $r2;
        java.lang.String[] $r3;
        android.content.Context $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.util.HashMap $r7, $r15;
        java.util.ArrayList $r8;
        java.lang.Object $r9;
        com.android.server.WindowManagerService$WindowState $r10;
        java.util.HashSet $r11;
        java.util.Iterator $r12;
        boolean $z0;
        com.android.server.WindowManagerService$Session $r13;
        java.lang.Throwable $r14;
        java.util.Collection $r16;
        com.android.server.WindowManagerService$WindowToken $r17;
        android.os.IBinder $r18;
        com.android.server.WindowManagerService$AppWindowToken $r19;
        float $f0;
        long $l2;
        android.view.Display $r20;
        com.android.server.WindowManagerService$KeyWaiter $r21;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.io.FileDescriptor;

        $r2 := @parameter1: java.io.PrintWriter;

        $r3 := @parameter2: java.lang.String[];

        $r4 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label01;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump WindowManager from from pid=");

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        return;

     label01:
        $r7 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r7;

     label02:
        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("Current Window Manager state:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label03:
        if $i0 < 0 goto label04;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r10 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Window #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r10.<com.android.server.WindowManagerService$WindowState: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        $i0 = $i0 + -1;

        goto label03;

     label04:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label06;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Input method dialogs:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label05:
        if $i0 < 0 goto label06;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r10 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  IM Dialog #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $i0 = $i0 + -1;

        goto label05;

     label06:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label08;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Remove pending for:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label07:
        if $i0 < 0 goto label08;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mPendingRemove>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r10 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Remove #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r10.<com.android.server.WindowManagerService$WindowState: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        $i0 = $i0 + -1;

        goto label07;

     label08:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        if $r8 == null goto label10;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label10;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Windows force removing:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label09:
        if $i0 < 0 goto label10;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r10 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Removing #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r10.<com.android.server.WindowManagerService$WindowState: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        $i0 = $i0 + -1;

        goto label09;

     label10:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label12;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Windows waiting to destroy their surface:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label11:
        if $i0 < 0 goto label12;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mDestroySurface>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r10 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Destroy #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r10.<com.android.server.WindowManagerService$WindowState: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        $i0 = $i0 + -1;

        goto label11;

     label12:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mLosingFocus>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label14;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Windows losing focus:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mLosingFocus>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label13:
        if $i0 < 0 goto label14;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mLosingFocus>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r10 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Losing #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r10.<com.android.server.WindowManagerService$WindowState: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        $i0 = $i0 + -1;

        goto label13;

     label14:
        $r11 = $r0.<com.android.server.WindowManagerService: java.util.HashSet mSessions>;

        $i0 = virtualinvoke $r11.<java.util.HashSet: int size()>();

        if $i0 <= 0 goto label18;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  All active sessions:");

        $r11 = $r0.<com.android.server.WindowManagerService: java.util.HashSet mSessions>;

        $r12 = virtualinvoke $r11.<java.util.HashSet: java.util.Iterator iterator()>();

     label15:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label18;

        $r9 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (com.android.server.WindowManagerService$Session) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Session ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r13.<com.android.server.WindowManagerService$Session: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        goto label15;

     label16:
        $r14 := @caughtexception;

        exitmonitor $r7;

     label17:
        throw $r14;

     label18:
        $r15 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $i0 = virtualinvoke $r15.<java.util.HashMap: int size()>();

        if $i0 <= 0 goto label20;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  All tokens:");

        $r15 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.util.Collection values()>();

        $r12 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>();

     label19:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label20;

        $r9 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        $r17 = (com.android.server.WindowManagerService$WindowToken) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Token ");

        $r18 = $r17.<com.android.server.WindowManagerService$WindowToken: android.os.IBinder token>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r17.<com.android.server.WindowManagerService$WindowToken: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        goto label19;

     label20:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label22;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Window token list:");

        $i0 = 0;

     label21:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        $i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 >= $i1 goto label22;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  WindowToken #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $i0 = $i0 + 1;

        goto label21;

     label22:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label24;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Application tokens in Z order:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label23:
        if $i0 < 0 goto label24;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  AppWindowToken #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $i0 = $i0 + -1;

        goto label23;

     label24:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mFinishedStarting>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label26;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Finishing start of application tokens:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mFinishedStarting>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label25:
        if $i0 < 0 goto label26;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mFinishedStarting>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r17 = (com.android.server.WindowManagerService$WindowToken) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Finish Starting App Token #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r17.<com.android.server.WindowManagerService$WindowToken: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        $i0 = $i0 + -1;

        goto label25;

     label26:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label28;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Exiting tokens:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label27:
        if $i0 < 0 goto label28;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r17 = (com.android.server.WindowManagerService$WindowToken) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Exiting Token #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r17.<com.android.server.WindowManagerService$WindowToken: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        $i0 = $i0 + -1;

        goto label27;

     label28:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label30;

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  Exiting application tokens:");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label29:
        if $i0 < 0 goto label30;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r17 = (com.android.server.WindowManagerService$WindowToken) $r9;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Exiting App Token #");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r17.<com.android.server.WindowManagerService$WindowToken: void dump(java.io.PrintWriter,java.lang.String)>($r2, "    ");

        $i0 = $i0 + -1;

        goto label29;

     label30:
        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>(" ");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCurrentFocus=");

        $r10 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mCurrentFocus>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLastFocus=");

        $r10 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mLastFocus>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mFocusedApp=");

        $r19 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mInputMethodTarget=");

        $r10 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mInputMethodWindow=");

        $r10 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mInTouchMode=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mInTouchMode>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSystemBooted=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mSystemBooted>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDisplayEnabled=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayEnabled>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mLayoutNeeded=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mBlurShown=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mBlurShown>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDimShown=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDimShown>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" current=");

        $f0 = $r0.<com.android.server.WindowManagerService: float mDimCurrentAlpha>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" target=");

        $f0 = $r0.<com.android.server.WindowManagerService: float mDimTargetAlpha>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" delta=");

        $f0 = $r0.<com.android.server.WindowManagerService: float mDimDeltaPerMs>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lastAnimTime=");

        $l2 = $r0.<com.android.server.WindowManagerService: long mLastDimAnimTime>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mInputMethodAnimLayerAdjustment=");

        $i0 = $r0.<com.android.server.WindowManagerService: int mInputMethodAnimLayerAdjustment>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDisplayFrozen=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWindowsFreezingScreen=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mWindowsFreezingScreen>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mAppsFreezingScreen=");

        $i0 = $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRotation=");

        $i0 = $r0.<com.android.server.WindowManagerService: int mRotation>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mForcedAppOrientation=");

        $i0 = $r0.<com.android.server.WindowManagerService: int mForcedAppOrientation>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mRequestedRotation=");

        $i0 = $r0.<com.android.server.WindowManagerService: int mRequestedRotation>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mAnimationPending=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mAnimationPending>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mWindowAnimationScale=");

        $f0 = $r0.<com.android.server.WindowManagerService: float mWindowAnimationScale>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mTransitionWindowAnimationScale=");

        $f0 = $r0.<com.android.server.WindowManagerService: float mTransitionAnimationScale>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>($f0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNextAppTransition=0x");

        $i0 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAppTransitionReady=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mAppTransitionReady>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mAppTransitionTimeout=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mAppTransitionTimeout>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mStartingIconInTransition=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mStartingIconInTransition>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mSkipAppTransitionAnimation=");

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mSkipAppTransitionAnimation>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mOpeningApps=");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mClosingApps=");

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  DisplayWidth=");

        $r20 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r20.<android.view.Display: int getWidth()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DisplayHeight=");

        $r20 = $r0.<com.android.server.WindowManagerService: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r20.<android.view.Display: int getHeight()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>("  KeyWaiter state:");

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    mLastWin=");

        $r21 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r10 = staticinvoke <com.android.server.WindowManagerService$KeyWaiter: com.android.server.WindowManagerService$WindowState access$200(com.android.server.WindowManagerService$KeyWaiter)>($r21);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLastBinder=");

        $r21 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r18 = staticinvoke <com.android.server.WindowManagerService$KeyWaiter: android.os.IBinder access$300(com.android.server.WindowManagerService$KeyWaiter)>($r21);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    mFinished=");

        $r21 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $z0 = staticinvoke <com.android.server.WindowManagerService$KeyWaiter: boolean access$400(com.android.server.WindowManagerService$KeyWaiter)>($r21);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mGotFirstWindow=");

        $r21 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $z0 = staticinvoke <com.android.server.WindowManagerService$KeyWaiter: boolean access$500(com.android.server.WindowManagerService$KeyWaiter)>($r21);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mEventDispatching=");

        $r21 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $z0 = staticinvoke <com.android.server.WindowManagerService$KeyWaiter: boolean access$600(com.android.server.WindowManagerService$KeyWaiter)>($r21);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mTimeToSwitch=");

        $r21 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $l2 = staticinvoke <com.android.server.WindowManagerService$KeyWaiter: long access$700(com.android.server.WindowManagerService$KeyWaiter)>($r21);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        exitmonitor $r7;

     label31:
        return;

        catch java.lang.Throwable from label02 to label17 with label16;
        catch java.lang.Throwable from label18 to label31 with label16;
    }

    void dumpAppTokensLocked()
    {
        com.android.server.WindowManagerService $r0;
        java.util.ArrayList $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        android.os.IBinder $r5;
        java.lang.String $r6;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label1:
        if $i0 < 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  #");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (com.android.server.WindowManagerService$AppWindowToken) $r3;

        $r5 = $r4.<com.android.server.WindowManagerService$WindowToken: android.os.IBinder token>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WindowManager", $r6);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return;
    }

    void dumpWindowsLocked()
    {
        com.android.server.WindowManagerService $r0;
        java.util.ArrayList $r1;
        int $i0;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label1:
        if $i0 < 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  #");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WindowManager", $r4);

        $i0 = $i0 + -1;

        goto label1;

     label2:
        return;
    }

    public void enableScreenAfterBoot()
    {
        com.android.server.WindowManagerService $r0;
        java.util.HashMap $r1;
        boolean $z0;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label1:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mSystemBooted>;

        if $z0 == 0 goto label3;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r0.<com.android.server.WindowManagerService: boolean mSystemBooted> = 1;

        exitmonitor $r1;

     label4:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void performEnableScreen()>();

        return;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor $r1;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void enableScreenIfNeededLocked()
    {
        com.android.server.WindowManagerService $r0;
        android.os.Message $r1;
        boolean $z0;
        com.android.server.WindowManagerService$H $r2, $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayEnabled>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mSystemBooted>;

        if $z0 == 0 goto label2;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r1 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(16);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessage(android.os.Message)>($r1);

        return;

     label2:
        return;
    }

    public void executeAppTransition()
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0;
        java.util.HashMap $r1;
        int $i0;
        long $l1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "executeAppTransition()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label2:
        $i0 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        if $i0 == 0 goto label3;

        $r0.<com.android.server.WindowManagerService: boolean mAppTransitionReady> = 1;

        $l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l1);

     label3:
        exitmonitor $r1;

     label4:
        return;

     label5:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)
    {
        com.android.server.WindowManagerService $r0;
        android.view.IOnKeyguardExitResult $r1;
        int $i0;
        android.content.Context $r2;
        java.lang.SecurityException $r3;
        android.view.WindowManagerPolicy $r4;
        com.android.server.WindowManagerService$2 $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.IOnKeyguardExitResult;

        $r2 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 == 0 goto label1;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r3;

     label1:
        $r4 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $r5 = new com.android.server.WindowManagerService$2;

        specialinvoke $r5.<com.android.server.WindowManagerService$2: void <init>(com.android.server.WindowManagerService,android.view.IOnKeyguardExitResult)>($r0, $r1);

        interfaceinvoke $r4.<android.view.WindowManagerPolicy: void exitKeyguardSecurely(android.view.WindowManagerPolicy$OnKeyguardExitResult)>($r5);

        return;
    }

    com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        java.lang.Object $r2;
        java.util.HashMap $r3;
        com.android.server.WindowManagerService$WindowToken $r4;
        com.android.server.WindowManagerService$AppWindowToken r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r2 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (com.android.server.WindowManagerService$WindowToken) $r2;

        if $r4 != null goto label1;

        return null;

     label1:
        r5 = $r4.<com.android.server.WindowManagerService$WindowToken: com.android.server.WindowManagerService$AppWindowToken appWindowToken>;

        return r5;
    }

    int findDesiredInputMethodWindowIndexLocked(boolean)
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0, $z1;
        com.android.server.WindowManagerService$WindowState $r1, $r4, $r7;
        java.util.ArrayList $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3, $r8;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r5;
        android.view.WindowManager$LayoutParams $r6;
        android.view.animation.Animation $r9;
        java.lang.RuntimeException $r10;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 := @parameter0: boolean;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r4 = null;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label01:
        if $i0 <= 0 goto label02;

        $i0 = $i0 + -1;

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r5;

        $z1 = staticinvoke <com.android.server.WindowManagerService: boolean canBeImeTarget(com.android.server.WindowManagerService$WindowState)>($r4);

        if $z1 == 0 goto label01;

        if $z0 != 0 goto label02;

        $r6 = $r4.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i1 = $r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 != 3 goto label02;

        if $i0 <= 0 goto label02;

        $i1 = $i0 - 1;

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r7 = (com.android.server.WindowManagerService$WindowState) $r5;

        $r3 = $r7.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r8 = $r4.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r3 != $r8 goto label02;

        $z1 = staticinvoke <com.android.server.WindowManagerService: boolean canBeImeTarget(com.android.server.WindowManagerService$WindowState)>($r7);

        if $z1 == 0 goto label02;

        $i0 = $i0 + -1;

        $r4 = $r7;

     label02:
        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mUpcomingInputMethodTarget> = $r4;

        if $z0 == 0 goto label10;

        if $r4 == null goto label10;

        $r1 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget>;

        if $r1 == null goto label10;

        $r3 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r3 == null goto label10;

        $r3 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r7 = null;

        $i1 = 0;

        $z1 = $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean animating>;

        if $z1 != 0 goto label03;

        $r9 = $r3.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation>;

        if $r9 == null goto label05;

     label03:
        $i2 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>($r1);

     label04:
        if $i2 < 0 goto label05;

        $r5 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r1 = (com.android.server.WindowManagerService$WindowState) $r5;

        $r8 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r8 == $r3 goto label06;

     label05:
        if $r7 == null goto label10;

        $i2 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        if $i2 == 0 goto label09;

        $r0.<com.android.server.WindowManagerService: boolean mInputMethodTargetWaitingAnim> = 1;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget> = $r7;

        $i0 = $i1 + 1;

        return $i0;

     label06:
        $z1 = $r1.<com.android.server.WindowManagerService$WindowState: boolean mRemoved>;

        if $z1 != 0 goto label08;

        if $r7 == null goto label07;

        $i3 = $r1.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        $i4 = $r7.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        if $i3 <= $i4 goto label08;

     label07:
        $r7 = $r1;

        $i1 = $i2;

     label08:
        $i2 = $i2 + -1;

        goto label04;

     label09:
        $z1 = virtualinvoke $r7.<com.android.server.WindowManagerService$WindowState: boolean isAnimating()>();

        if $z1 == 0 goto label10;

        $i2 = $r7.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        $i3 = $r4.<com.android.server.WindowManagerService$WindowState: int mAnimLayer>;

        if $i2 <= $i3 goto label10;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget> = $r7;

        $i0 = $i1 + 1;

        return $i0;

     label10:
        if $r4 == null goto label13;

        if $z0 == 0 goto label11;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>()>();

        virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget> = $r4;

        $r3 = $r4.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r3 == null goto label12;

        $r3 = $r4.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $i1 = $r3.<com.android.server.WindowManagerService$AppWindowToken: int animLayerAdjustment>;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void setInputMethodAnimLayerAdjustment(int)>($i1);

     label11:
        $i0 = $i0 + 1;

        return $i0;

     label12:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void setInputMethodAnimLayerAdjustment(int)>(0);

        goto label11;

     label13:
        if $z0 == 0 goto label14;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>()>();

        virtualinvoke $r10.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget> = null;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void setInputMethodAnimLayerAdjustment(int)>(0);

     label14:
        return -1;
    }

    public void finishDrawingWindow(com.android.server.WindowManagerService$Session, android.view.IWindow)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        java.util.HashMap $r3;
        long $l0;
        com.android.server.WindowManagerService$WindowState $r4;
        boolean $z0;
        java.lang.Throwable $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.view.IWindow;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r3;

     label1:
        $r4 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r1, $r2);

        if $r4 == null goto label2;

        $z0 = virtualinvoke $r4.<com.android.server.WindowManagerService$WindowState: boolean finishDrawingLocked()>();

        if $z0 == 0 goto label2;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label2:
        exitmonitor $r3;

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor $r3;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public float getAnimationScale(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0;
        float f0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        lookupswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            default: goto label1;
        };

     label1:
        return 0.0F;

     label2:
        f0 = $r0.<com.android.server.WindowManagerService: float mWindowAnimationScale>;

        return f0;

     label3:
        f0 = $r0.<com.android.server.WindowManagerService: float mTransitionAnimationScale>;

        return f0;
    }

    public float[] getAnimationScales()
    {
        com.android.server.WindowManagerService $r0;
        float[] $r1;
        float $f0;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = newarray (float)[2];

        $f0 = $r0.<com.android.server.WindowManagerService: float mWindowAnimationScale>;

        $r1[0] = $f0;

        $f0 = $r0.<com.android.server.WindowManagerService: float mTransitionAnimationScale>;

        $r1[1] = $f0;

        return $r1;
    }

    public int getAppOrientation(android.view.IApplicationToken)
    {
        com.android.server.WindowManagerService $r0;
        android.view.IApplicationToken $r1;
        java.util.HashMap $r2;
        android.os.IBinder $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        int $i0;
        java.lang.Throwable $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.IApplicationToken;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label1:
        $r3 = interfaceinvoke $r1.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r3);

        if $r4 != null goto label3;

        exitmonitor $r2;

     label2:
        return -1;

     label3:
        $i0 = $r4.<com.android.server.WindowManagerService$AppWindowToken: int requestedOrientation>;

        exitmonitor $r2;

     label4:
        return $i0;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public int getKeycodeState(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_INPUT_STATE", "getKeycodeState()");

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $i0 = staticinvoke <com.android.server.KeyInputQueue: int getKeycodeState(int)>($i0);

        return $i0;
    }

    public int getKeycodeStateForDevice(int, int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_INPUT_STATE", "getKeycodeStateForDevice()");

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $i0 = staticinvoke <com.android.server.KeyInputQueue: int getKeycodeState(int,int)>($i0, $i1);

        return $i0;
    }

    public int getOrientationFromAppTokensLocked()
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1, $i2, $i3;
        java.util.ArrayList $r1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i1 - 1;

        $i2 = 0;

        $i3 = -1;

        $z0 = 0;

        $z1 = 0;

     label1:
        if $i1 < 0 goto label7;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r3 = (com.android.server.WindowManagerService$AppWindowToken) $r2;

        $i1 = $i1 + -1;

        $z2 = $r3.<com.android.server.WindowManagerService$WindowToken: boolean hidden>;

        if $z2 != 0 goto label2;

        $z2 = $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested>;

        if $z2 != 0 goto label1;

     label2:
        if $z0 != 0 goto label4;

        $z2 = $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested>;

        if $z2 != 0 goto label1;

        $z2 = $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean willBeHidden>;

        if $z2 != 0 goto label1;

        $z0 = 1;

        $i2 = $r3.<com.android.server.WindowManagerService$AppWindowToken: int groupId>;

        $i3 = $r3.<com.android.server.WindowManagerService$AppWindowToken: int requestedOrientation>;

     label3:
        $i0 = $r3.<com.android.server.WindowManagerService$AppWindowToken: int requestedOrientation>;

        $z1 = $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean appFullscreen>;

        if $z1 == 0 goto label5;

        return $i0;

     label4:
        $i0 = $r3.<com.android.server.WindowManagerService$AppWindowToken: int groupId>;

        if $i2 == $i0 goto label3;

        if $i3 == 3 goto label3;

        if $z1 == 0 goto label3;

        return $i3;

     label5:
        if $i0 == 0 goto label6;

        if $i0 == 1 goto label6;

        if $i0 == 4 goto label6;

        if $i0 == 5 goto label6;

        if $i0 != 2 goto label1;

     label6:
        return $i0;

     label7:
        return -1;
    }

    public int getOrientationFromWindowsLocked()
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        com.android.server.WindowManagerService$WindowState $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i1 = $i0 - 1;

     label1:
        if $i1 < 0 goto label3;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r3 = (com.android.server.WindowManagerService$WindowState) $r2;

        $i1 = $i1 + -1;

        $r4 = $r3.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r4 == null goto label2;

        return -1;

     label2:
        $z0 = virtualinvoke $r3.<com.android.server.WindowManagerService$WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label1;

        $r5 = $r3.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r5.<android.view.WindowManager$LayoutParams: int screenOrientation>;

        if $i0 == -1 goto label1;

        if $i0 == 3 goto label1;

        return $i0;

     label3:
        return -1;
    }

    public int getPendingAppTransition()
    {
        com.android.server.WindowManagerService $r0;
        int i0;

        $r0 := @this: com.android.server.WindowManagerService;

        i0 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        return i0;
    }

    public int getRotation()
    {
        com.android.server.WindowManagerService $r0;
        int i0;

        $r0 := @this: com.android.server.WindowManagerService;

        i0 = $r0.<com.android.server.WindowManagerService: int mRotation>;

        return i0;
    }

    public int getScancodeState(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_INPUT_STATE", "getScancodeState()");

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $i0 = staticinvoke <com.android.server.KeyInputQueue: int getScancodeState(int)>($i0);

        return $i0;
    }

    public int getScancodeStateForDevice(int, int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_INPUT_STATE", "getScancodeStateForDevice()");

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $i0 = staticinvoke <com.android.server.KeyInputQueue: int getScancodeState(int,int)>($i0, $i1);

        return $i0;
    }

    public int getSwitchState(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_INPUT_STATE", "getSwitchState()");

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $i0 = staticinvoke <com.android.server.KeyInputQueue: int getSwitchState(int)>($i0);

        return $i0;
    }

    public int getSwitchStateForDevice(int, int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.READ_INPUT_STATE", "getSwitchStateForDevice()");

        if $z0 != 0 goto label1;

        return -1;

     label1:
        $i0 = staticinvoke <com.android.server.KeyInputQueue: int getSwitchState(int,int)>($i0, $i1);

        return $i0;
    }

    public void getWindowDisplayFrame(com.android.server.WindowManagerService$Session, android.view.IWindow, android.graphics.Rect)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        android.graphics.Rect $r3, $r6;
        java.util.HashMap $r4;
        com.android.server.WindowManagerService$WindowState $r5;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.view.IWindow;

        $r3 := @parameter2: android.graphics.Rect;

        $r4 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r4;

     label1:
        $r5 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r1, $r2);

        if $r5 != null goto label3;

        virtualinvoke $r3.<android.graphics.Rect: void setEmpty()>();

        exitmonitor $r4;

     label2:
        return;

     label3:
        $r6 = $r5.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mDisplayFrame>;

        virtualinvoke $r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r6);

        exitmonitor $r4;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r4;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean hasKeys(int[], boolean[])
    {
        com.android.server.WindowManagerService $r0;
        int[] $r1;
        boolean[] $r2;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: int[];

        $r2 := @parameter1: boolean[];

        $z0 = staticinvoke <com.android.server.KeyInputQueue: boolean hasKeys(int[],boolean[])>($r1, $r2);

        return $z0;
    }

    public boolean inKeyguardRestrictedInputMode()
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0;
        android.view.WindowManagerPolicy $r1;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $z0 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: boolean inKeyguardRestrictedKeyInputMode()>();

        return $z0;
    }

    public boolean injectKeyEvent(android.view.KeyEvent, boolean)
    {
        com.android.server.WindowManagerService $r0;
        android.view.KeyEvent $r1;
        boolean $z0, $z1;
        long $l0, $l1, $l2, $l3;
        int $i4, $i5, $i6, $i7, $i8, $i9;
        byte $b10;
        com.android.server.WindowManagerService$KeyWaiter $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.KeyEvent;

        $z0 := @parameter1: boolean;

        $l0 = virtualinvoke $r1.<android.view.KeyEvent: long getDownTime()>();

        $l1 = $l0;

        $l2 = virtualinvoke $r1.<android.view.KeyEvent: long getEventTime()>();

        $l3 = $l2;

        $i4 = virtualinvoke $r1.<android.view.KeyEvent: int getAction()>();

        $i5 = virtualinvoke $r1.<android.view.KeyEvent: int getKeyCode()>();

        $i6 = virtualinvoke $r1.<android.view.KeyEvent: int getRepeatCount()>();

        $i7 = virtualinvoke $r1.<android.view.KeyEvent: int getMetaState()>();

        $i8 = virtualinvoke $r1.<android.view.KeyEvent: int getDeviceId()>();

        $i9 = virtualinvoke $r1.<android.view.KeyEvent: int getScanCode()>();

        $b10 = $l2 cmp 0L;

        if $b10 != 0 goto label1;

        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label1:
        $b10 = $l0 cmp 0L;

        if $b10 != 0 goto label2;

        $l1 = $l3;

     label2:
        $r1 = new android.view.KeyEvent;

        specialinvoke $r1.<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>($l1, $l3, $i4, $i5, $i6, $i7, $i8, $i9, 8);

        $i4 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean dispatchKey(android.view.KeyEvent,int,int)>($r1, $i4, $i5);

        if $z0 == 0 goto label3;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r2.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean)>(null, null, null, 0, 1);

        return $z1;

     label3:
        return $z1;
    }

    public boolean injectPointerEvent(android.view.MotionEvent, boolean)
    {
        com.android.server.WindowManagerService $r0;
        android.view.MotionEvent $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        com.android.server.WindowManagerService$KeyWaiter $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean dispatchPointer(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)>(null, $r1, $i0, $i1);

        if $z0 == 0 goto label1;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r2.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean)>(null, null, null, 0, 1);

        return $z1;

     label1:
        return $z1;
    }

    public boolean injectTrackballEvent(android.view.MotionEvent, boolean)
    {
        com.android.server.WindowManagerService $r0;
        android.view.MotionEvent $r1;
        boolean $z0, $z1;
        int $i0, $i1;
        com.android.server.WindowManagerService$KeyWaiter $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.MotionEvent;

        $z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z1 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean dispatchTrackball(com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,int,int)>(null, $r1, $i0, $i1);

        if $z0 == 0 goto label1;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r2.<com.android.server.WindowManagerService$KeyWaiter: java.lang.Object waitForNextEventTarget(android.view.KeyEvent,com.android.server.KeyInputQueue$QueuedEvent,android.view.MotionEvent,boolean,boolean)>(null, null, null, 0, 1);

        return $z1;

     label1:
        return $z1;
    }

    public boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)
    {
        com.android.server.WindowManagerService $r0;
        com.android.internal.view.IInputMethodClient $r1, $r7;
        java.util.HashMap $r2;
        int $i0;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowState $r5;
        com.android.server.WindowManagerService$Session $r6;
        android.os.IBinder $r8, $r9;
        java.lang.Throwable $r10;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.internal.view.IInputMethodClient;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label1:
        $i0 = virtualinvoke $r0.<com.android.server.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>(0);

        if $i0 <= 0 goto label3;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = $i0 - 1;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r4;

        if $r5 == null goto label3;

        $r6 = $r5.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $r7 = $r6.<com.android.server.WindowManagerService$Session: com.android.internal.view.IInputMethodClient mClient>;

        if $r7 == null goto label3;

        $r6 = $r5.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $r7 = $r6.<com.android.server.WindowManagerService$Session: com.android.internal.view.IInputMethodClient mClient>;

        $r8 = interfaceinvoke $r7.<com.android.internal.view.IInputMethodClient: android.os.IBinder asBinder()>();

        $r9 = interfaceinvoke $r1.<com.android.internal.view.IInputMethodClient: android.os.IBinder asBinder()>();

        if $r8 != $r9 goto label3;

        exitmonitor $r2;

     label2:
        return 1;

     label3:
        exitmonitor $r2;

     label4:
        return 0;

     label5:
        $r10 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public boolean isViewServerRunning()
    {
        com.android.server.WindowManagerService $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        com.android.server.ViewServer $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = "1";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.secure", "0");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "isViewServerRunning");

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer>;

        if $r3 == null goto label3;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer>;

        $z0 = virtualinvoke $r3.<com.android.server.ViewServer: boolean isRunning()>();

        if $z0 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    void logWindowList(java.lang.String)
    {
        com.android.server.WindowManagerService $r0;
        java.lang.String $r1, $r5;
        java.util.ArrayList $r2;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.Object $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label1:
        if $i0 <= 0 goto label2;

        $i0 = $i0 + -1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r4 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("WindowManager", $r5);

        goto label1;

     label2:
        return;
    }

    public void monitor()
    {
        com.android.server.WindowManagerService $r0;
        java.util.HashMap $r1;
        android.os.TokenWatcher $r2;
        com.android.server.WindowManagerService$KeyWaiter $r3;
        java.lang.Throwable $r4, $r5, $r6;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label01:
        exitmonitor $r1;

     label02:
        $r2 = $r0.<com.android.server.WindowManagerService: android.os.TokenWatcher mKeyguardDisabled>;

        entermonitor $r2;

     label03:
        exitmonitor $r2;

     label04:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        entermonitor $r3;

     label05:
        exitmonitor $r3;

     label06:
        return;

     label07:
        $r4 := @caughtexception;

     label08:
        exitmonitor $r1;

     label09:
        throw $r4;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor $r2;

     label12:
        throw $r5;

     label13:
        $r6 := @caughtexception;

     label14:
        exitmonitor $r3;

     label15:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void moveAppToken(int, android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        int $i0;
        android.os.IBinder $r1;
        boolean $z0;
        java.util.HashMap $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3;
        java.util.ArrayList $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;
        long $l1;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.os.IBinder;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "moveAppToken()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r1);

        if $r3 == null goto label3;

        $r4 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>($r3);

        if $z0 != 0 goto label7;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to reorder token that doesn\'t exist: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r6);

        exitmonitor $r2;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r7;

     label7:
        $r4 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>($i0, $r3);

        $l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $z0 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean tmpRemoveAppWindowsLocked(com.android.server.WindowManagerService$WindowToken)>($r3);

        if $z0 == 0 goto label8;

        $i0 = specialinvoke $r0.<com.android.server.WindowManagerService: int findWindowOffsetLocked(int)>($i0);

        specialinvoke $r0.<com.android.server.WindowManagerService: int reAddAppWindowsLocked(int,com.android.server.WindowManagerService$WindowToken)>($i0, $r3);

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(3);

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label8:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l1);

        exitmonitor $r2;

     label9:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.lang.Throwable from label7 to label9 with label5;
    }

    public void moveAppTokensToBottom(java.util.List)
    {
        com.android.server.WindowManagerService $r0;
        java.util.List $r1;
        boolean $z0;
        long $l0;
        java.util.HashMap $r2;
        int $i1, $i2, $i3;
        java.lang.Object $r3;
        android.os.IBinder $r4;
        com.android.server.WindowManagerService$AppWindowToken $r5;
        java.util.ArrayList $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.util.List;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "moveAppTokensToBottom()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<com.android.server.WindowManagerService: void removeAppTokensLocked(java.util.List)>($r1);

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = 0;

        $i3 = 0;

     label3:
        if $i3 >= $i1 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i3);

        $r4 = (android.os.IBinder) $r3;

        $r5 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r4);

        if $r5 == null goto label4;

        $r6 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        virtualinvoke $r6.<java.util.ArrayList: void add(int,java.lang.Object)>($i2, $r5);

        $i2 = $i2 + 1;

     label4:
        $i3 = $i3 + 1;

        goto label3;

     label5:
        specialinvoke $r0.<com.android.server.WindowManagerService: void moveAppWindowsLocked(java.util.List,int)>($r1, 0);

        exitmonitor $r2;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor $r2;

     label9:
        throw $r7;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void moveAppTokensToTop(java.util.List)
    {
        com.android.server.WindowManagerService $r0;
        java.util.List $r1;
        boolean $z0;
        long $l0;
        java.util.HashMap $r2;
        int $i1, $i2;
        java.lang.Object $r3;
        android.os.IBinder $r4;
        com.android.server.WindowManagerService$AppWindowToken $r5;
        java.util.ArrayList $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.util.List;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "moveAppTokensToTop()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        specialinvoke $r0.<com.android.server.WindowManagerService: void removeAppTokensLocked(java.util.List)>($r1);

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i2 = 0;

     label3:
        if $i2 >= $i1 goto label5;

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i2);

        $r4 = (android.os.IBinder) $r3;

        $r5 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r4);

        if $r5 == null goto label4;

        $r6 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label4:
        $i2 = $i2 + 1;

        goto label3;

     label5:
        $r6 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        specialinvoke $r0.<com.android.server.WindowManagerService: void moveAppWindowsLocked(java.util.List,int)>($r1, $i1);

        exitmonitor $r2;

     label6:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor $r2;

     label9:
        throw $r7;

        catch java.lang.Throwable from label2 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void moveInputMethodDialogsLocked(int)
    {
        com.android.server.WindowManagerService $r0;
        java.util.ArrayList $r1, $r5;
        com.android.server.WindowManagerService$AppWindowToken $r2;
        int $i0, $i1, $i2;
        java.lang.Object $r3;
        com.android.server.WindowManagerService$WindowState $r4, $r6;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i2 = 0;

     label1:
        if $i2 >= $i1 goto label2;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $i0 = specialinvoke $r0.<com.android.server.WindowManagerService: int tmpRemoveWindowLocked(int,com.android.server.WindowManagerService$WindowState)>($i0, $r4);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        if $i0 < 0 goto label5;

        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget>;

        $r2 = $r4.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r5 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i2 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if $i0 >= $i2 goto label3;

        $r5 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r3 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $r6 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        if $r4 != $r6 goto label3;

        $i0 = $i0 + 1;

     label3:
        $i2 = 0;

     label4:
        if $i2 >= $i1 goto label7;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $r4.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mTargetAppToken> = $r2;

        $i0 = specialinvoke $r0.<com.android.server.WindowManagerService: int reAddWindowLocked(int,com.android.server.WindowManagerService$WindowState)>($i0, $r4);

        $i2 = $i2 + 1;

        goto label4;

     label5:
        $i0 = 0;

     label6:
        if $i0 >= $i1 goto label8;

        $r3 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $r4.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mTargetAppToken> = null;

        specialinvoke $r0.<com.android.server.WindowManagerService: void reAddWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState)>($r4);

        $i0 = $i0 + 1;

        goto label6;

     label7:
        return;

     label8:
        return;
    }

    boolean moveInputMethodWindowsIfNeededLocked(boolean)
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0, $z1;
        com.android.server.WindowManagerService$WindowState $r1, $r4, $r5, $r6;
        java.util.ArrayList $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        com.android.server.WindowManagerService$AppWindowToken $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $r1 != null goto label01;

        if $i0 != 0 goto label01;

        return 0;

     label01:
        $i1 = virtualinvoke $r0.<com.android.server.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>(1);

        if $i1 < 0 goto label17;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i2 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i1 >= $i2 goto label09;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

     label02:
        if $r1 == null goto label10;

        $r5 = $r1;

     label03:
        $r2 = $r5.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $i3 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i3 <= 0 goto label04;

        $r2 = $r5.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r6 = (com.android.server.WindowManagerService$WindowState) $r3;

        $i3 = $r6.<com.android.server.WindowManagerService$WindowState: int mSubLayer>;

        if $i3 >= 0 goto label04;

        $r5 = $r6;

     label04:
        if $r4 != $r5 goto label13;

        $i3 = $i1 + 1;

     label05:
        if $i3 >= $i2 goto label06;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $z1 = $r4.<com.android.server.WindowManagerService$WindowState: boolean mIsImWindow>;

        if $z1 != 0 goto label11;

     label06:
        $i3 = $i3 + 1;

     label07:
        if $i3 >= $i2 goto label08;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $z1 = $r4.<com.android.server.WindowManagerService$WindowState: boolean mIsImWindow>;

        if $z1 == 0 goto label12;

     label08:
        if $i3 < $i2 goto label13;

        return 0;

     label09:
        $r4 = null;

        goto label02;

     label10:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r3;

        goto label03;

     label11:
        $i3 = $i3 + 1;

        goto label05;

     label12:
        $i3 = $i3 + 1;

        goto label07;

     label13:
        if $r1 == null goto label16;

        $i1 = specialinvoke $r0.<com.android.server.WindowManagerService: int tmpRemoveWindowLocked(int,com.android.server.WindowManagerService$WindowState)>($i1, $r1);

        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodTarget>;

        $r7 = $r4.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mTargetAppToken> = $r7;

        specialinvoke $r0.<com.android.server.WindowManagerService: int reAddWindowLocked(int,com.android.server.WindowManagerService$WindowState)>($i1, $r1);

        if $i0 <= 0 goto label14;

        $i0 = $i1 + 1;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void moveInputMethodDialogsLocked(int)>($i0);

     label14:
        if $z0 == 0 goto label15;

        specialinvoke $r0.<com.android.server.WindowManagerService: void assignLayersLocked()>();

     label15:
        return 1;

     label16:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void moveInputMethodDialogsLocked(int)>($i1);

        goto label14;

     label17:
        if $r1 == null goto label18;

        specialinvoke $r0.<com.android.server.WindowManagerService: int tmpRemoveWindowLocked(int,com.android.server.WindowManagerService$WindowState)>(0, $r1);

        $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mTargetAppToken> = null;

        specialinvoke $r0.<com.android.server.WindowManagerService: void reAddWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState)>($r1);

        if $i0 <= 0 goto label14;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void moveInputMethodDialogsLocked(int)>(-1);

        goto label14;

     label18:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void moveInputMethodDialogsLocked(int)>(-1);

        goto label14;
    }

    public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1;
        android.os.Parcel $r1, $r2;
        java.lang.RuntimeException $r3;
        boolean $z0;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r1 := @parameter1: android.os.Parcel;

        $r2 := @parameter2: android.os.Parcel;

        $i1 := @parameter3: int;

     label1:
        $z0 = specialinvoke $r0.<android.view.IWindowManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)>($i0, $r1, $r2, $i1);

     label2:
        return $z0;

     label3:
        $r3 := @caughtexception;

        $z0 = $r3 instanceof java.lang.SecurityException;

        if $z0 != 0 goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", "Window Manager Crash", $r3);

     label4:
        throw $r3;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public android.view.IWindowSession openSession(com.android.internal.view.IInputMethodClient, com.android.internal.view.IInputContext)
    {
        com.android.server.WindowManagerService $r0;
        com.android.internal.view.IInputMethodClient $r1;
        com.android.internal.view.IInputContext $r2;
        java.lang.IllegalArgumentException r5;
        com.android.server.WindowManagerService$Session r6;
        android.view.IWindowSession r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.internal.view.IInputMethodClient;

        $r2 := @parameter1: com.android.internal.view.IInputContext;

        if $r1 != null goto label1;

        r5 = new java.lang.IllegalArgumentException;

        specialinvoke r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null client");

        throw r5;

     label1:
        if $r2 != null goto label2;

        r5 = new java.lang.IllegalArgumentException;

        specialinvoke r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("null inputContext");

        throw r5;

     label2:
        r6 = new com.android.server.WindowManagerService$Session;

        specialinvoke r6.<com.android.server.WindowManagerService$Session: void <init>(com.android.server.WindowManagerService,com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext)>($r0, $r1, $r2);

        r7 = (android.view.IWindowSession) r6;

        return r7;
    }

    public void pauseKeyDispatching(android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        boolean $z0;
        java.util.HashMap $r2, $r3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowToken $r5;
        com.android.server.WindowManagerService$KeyWaiter $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "pauseKeyDispatching()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

        if $r5 == null goto label3;

        $r6 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r6.<com.android.server.WindowManagerService$KeyWaiter: void pauseDispatchingLocked(com.android.server.WindowManagerService$WindowToken)>($r5);

     label3:
        exitmonitor $r2;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r7;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void performEnableScreen()
    {
        com.android.server.WindowManagerService $r0;
        java.util.HashMap $r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.util.ArrayList $r3;
        int $i0, $i1;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowState $r5;
        android.os.IBinder $r6;
        android.os.Parcel $r7;
        android.view.WindowManagerPolicy $r8;
        android.os.RemoteException $r9;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label01:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayEnabled>;

        if $z0 == 0 goto label03;

        exitmonitor $r1;

     label02:
        return;

     label03:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mSystemBooted>;

        if $z0 != 0 goto label07;

        exitmonitor $r1;

     label04:
        return;

     label05:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label06:
        throw $r2;

     label07:
        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $i1 = 0;

     label08:
        if $i1 >= $i0 goto label11;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r4;

        $z0 = virtualinvoke $r5.<com.android.server.WindowManagerService$WindowState: boolean isVisibleLw()>();

        if $z0 == 0 goto label10;

        $z0 = virtualinvoke $r5.<com.android.server.WindowManagerService$WindowState: boolean isDisplayedLw()>();

        if $z0 != 0 goto label10;

        exitmonitor $r1;

     label09:
        return;

     label10:
        $i1 = $i1 + 1;

        goto label08;

     label11:
        $r0.<com.android.server.WindowManagerService: boolean mDisplayEnabled> = 1;

     label12:
        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("SurfaceFlinger");

        if $r6 == null goto label13;

        $r7 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke $r7.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.ui.ISurfaceComposer");

        interfaceinvoke $r6.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, $r7, null, 0);

        virtualinvoke $r7.<android.os.Parcel: void recycle()>();

     label13:
        exitmonitor $r1;

     label14:
        $r8 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r8.<android.view.WindowManagerPolicy: void enableScreenAfterBoot()>();

        $i0 = $r0.<com.android.server.WindowManagerService: int mLastRotationFlags>;

        $i0 = $i0 | 1;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void setRotationUnchecked(int,boolean,int)>(-1000, 0, $i0);

        return;

     label15:
        $r9 := @caughtexception;

     label16:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WindowManager", "Boot completed: SurfaceFlinger is dead!");

     label17:
        goto label13;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label07 to label09 with label05;
        catch java.lang.Throwable from label10 to label12 with label05;
        catch android.os.RemoteException from label12 to label13 with label15;
        catch java.lang.Throwable from label12 to label13 with label05;
        catch java.lang.Throwable from label13 to label14 with label05;
        catch java.lang.Throwable from label16 to label17 with label05;
    }

    public void prepareAppTransition(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1;
        boolean $z0;
        java.util.HashMap $r1;
        com.android.server.WindowManagerService$H $r2, $r3;
        android.os.Message $r4;
        java.lang.Throwable $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "prepareAppTransition()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label2:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z0 != 0 goto label4;

        $i1 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        if $i1 != 0 goto label3;

        $r0.<com.android.server.WindowManagerService: int mNextAppTransition> = $i0;

     label3:
        $r0.<com.android.server.WindowManagerService: boolean mAppTransitionReady> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mAppTransitionTimeout> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mStartingIconInTransition> = 0;

        $r0.<com.android.server.WindowManagerService: boolean mSkipAppTransitionAnimation> = 0;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(13);

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(13);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r4, 5000L);

     label4:
        exitmonitor $r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r5;

        catch java.lang.Throwable from label2 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    void reclaimSomeSurfaceMemoryLocked(com.android.server.WindowManagerService$WindowState, java.lang.String)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1, $r12;
        java.lang.String $r2, $r7;
        android.util.SparseIntArray $r3;
        int[] $r4;
        android.view.Surface $r5, $r13;
        java.lang.Object[] $r6;
        com.android.server.WindowManagerService$Session $r8;
        int $i0, $i2, $i3, $i4;
        java.lang.Integer $r9;
        java.util.ArrayList $r10;
        long $l1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r11;
        java.util.HashSet $r14;
        java.lang.StringBuilder $r15;
        com.android.server.WindowManagerService$WindowToken $r16;
        com.android.server.WindowManagerService$AppWindowToken $r17;
        android.app.IActivityManager $r18;
        android.view.IWindow $r19;
        java.lang.Throwable $r20;
        android.os.RemoteException $r21, $r22;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowState;

        $r2 := @parameter1: java.lang.String;

        $r5 = $r1.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $r6 = newarray (java.lang.Object)[3];

        $r7 = virtualinvoke $r1.<com.android.server.WindowManagerService$WindowState: java.lang.String toString()>();

        $r6[0] = $r7;

        $r8 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i0 = $r8.<com.android.server.WindowManagerService$Session: int mPid>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r6[1] = $r9;

        $r6[2] = $r2;

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(31000, $r6);

        $r10 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        if $r10 != null goto label01;

        $r10 = new java.util.ArrayList;

        specialinvoke $r10.<java.util.ArrayList: void <init>()>();

        $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves> = $r10;

     label01:
        $l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r10 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

     label03:
        $z0 = 0;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", "Out of memory for surface!  Looking for leaks...");

     label04:
        $i2 = 0;

     label05:
        if $i2 >= $i0 goto label10;

        $r10 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r12 = (com.android.server.WindowManagerService$WindowState) $r11;

        $r13 = $r12.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r13 == null goto label07;

        $r14 = $r0.<com.android.server.WindowManagerService: java.util.HashSet mSessions>;

        $r8 = $r12.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $z1 = virtualinvoke $r14.<java.util.HashSet: boolean contains(java.lang.Object)>($r8);

        if $z1 != 0 goto label08;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEAKED SURFACE (session doesn\'t exist): ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface=");

        $r13 = $r12.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r16 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowToken mToken>;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" pid=");

        $r8 = $r12.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i3 = $r8.<com.android.server.WindowManagerService$Session: int mPid>;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" uid=");

        $r8 = $r12.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i3 = $r8.<com.android.server.WindowManagerService$Session: int mUid>;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r2);

        $r13 = $r12.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        virtualinvoke $r13.<android.view.Surface: void clear()>();

        $r12.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface> = null;

        $r10 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mForceRemoves>;

        virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label06:
        $i2 = $i2 + -1;

        $i0 = $i0 + -1;

        $z0 = 1;

     label07:
        $i2 = $i2 + 1;

        goto label05;

     label08:
        $r17 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r17 == null goto label07;

        $r17 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $z1 = $r17.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden>;

        if $z1 == 0 goto label07;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LEAKED SURFACE (app token hidden): ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" surface=");

        $r13 = $r12.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        $r17 = $r1.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r2);

        $r13 = $r12.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        virtualinvoke $r13.<android.view.Surface: void clear()>();

        $r12.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface> = null;

     label09:
        $z0 = 1;

        goto label07;

     label10:
        $z1 = 0;

     label11:
        if $z0 != 0 goto label21;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "No leaked surfaces; killing applicatons!");

        $r3 = new android.util.SparseIntArray;

        specialinvoke $r3.<android.util.SparseIntArray: void <init>()>();

     label12:
        $i2 = 0;

     label13:
        if $i2 >= $i0 goto label15;

        $r10 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r12 = (com.android.server.WindowManagerService$WindowState) $r11;

        $r13 = $r12.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r13 == null goto label14;

        $r8 = $r12.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i3 = $r8.<com.android.server.WindowManagerService$Session: int mPid>;

        $r8 = $r12.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $i4 = $r8.<com.android.server.WindowManagerService$Session: int mPid>;

        virtualinvoke $r3.<android.util.SparseIntArray: void append(int,int)>($i3, $i4);

     label14:
        $i2 = $i2 + 1;

        goto label13;

     label15:
        $i0 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        if $i0 <= 0 goto label21;

        $i0 = virtualinvoke $r3.<android.util.SparseIntArray: int size()>();

        $r4 = newarray (int)[$i0];

        $i0 = 0;

     label16:
        $i2 = lengthof $r4;

        if $i0 >= $i2 goto label18;

        $i2 = virtualinvoke $r3.<android.util.SparseIntArray: int keyAt(int)>($i0);

        $r4[$i0] = $i2;

     label17:
        $i0 = $i0 + 1;

        goto label16;

     label18:
        $r18 = $r0.<com.android.server.WindowManagerService: android.app.IActivityManager mActivityManager>;

     label19:
        $z2 = interfaceinvoke $r18.<android.app.IActivityManager: boolean killPidsForMemory(int[])>($r4);

     label20:
        if $z2 == 0 goto label21;

        $z1 = 1;

     label21:
        if $z0 != 0 goto label22;

        if $z1 == 0 goto label25;

     label22:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "Looks like we have reclaimed some memory, clearing surface for retry.");

        if $r5 == null goto label23;

        virtualinvoke $r5.<android.view.Surface: void clear()>();

        $r1.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface> = null;

     label23:
        $r19 = $r1.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

     label24:
        interfaceinvoke $r19.<android.view.IWindow: void dispatchGetNewSurface()>();

     label25:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l1);

        return;

     label26:
        $r20 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l1);

        throw $r20;

     label27:
        $r21 := @caughtexception;

        goto label25;

     label28:
        $r22 := @caughtexception;

        goto label21;

        catch java.lang.Throwable from label02 to label03 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label08 to label09 with label26;
        catch java.lang.Throwable from label11 to label12 with label26;
        catch java.lang.Throwable from label13 to label14 with label26;
        catch java.lang.Throwable from label15 to label17 with label26;
        catch android.os.RemoteException from label19 to label20 with label28;
        catch java.lang.Throwable from label18 to label20 with label26;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch android.os.RemoteException from label24 to label25 with label27;
        catch java.lang.Throwable from label23 to label25 with label26;
    }

    public void reenableKeyguard(android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        android.content.Context $r2;
        int $i0;
        java.lang.SecurityException $r3;
        android.os.TokenWatcher $r4, $r5;
        boolean $z0;
        java.lang.InterruptedException $r6;
        java.lang.Thread $r7;
        java.lang.Throwable $r8;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $r2 = $r0.<com.android.server.WindowManagerService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingPermission(java.lang.String)>("android.permission.DISABLE_KEYGUARD");

        if $i0 == 0 goto label01;

        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires DISABLE_KEYGUARD permission");

        throw $r3;

     label01:
        $r4 = $r0.<com.android.server.WindowManagerService: android.os.TokenWatcher mKeyguardDisabled>;

        entermonitor $r4;

     label02:
        $r5 = $r0.<com.android.server.WindowManagerService: android.os.TokenWatcher mKeyguardDisabled>;

        virtualinvoke $r5.<android.os.TokenWatcher: void release(android.os.IBinder)>($r1);

        $r5 = $r0.<com.android.server.WindowManagerService: android.os.TokenWatcher mKeyguardDisabled>;

        $z0 = virtualinvoke $r5.<android.os.TokenWatcher: boolean isAcquired()>();

        if $z0 != 0 goto label12;

        $r0.<com.android.server.WindowManagerService: boolean mWaitingUntilKeyguardReenabled> = 1;

     label03:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mWaitingUntilKeyguardReenabled>;

     label04:
        if $z0 == 0 goto label12;

     label05:
        $r5 = $r0.<com.android.server.WindowManagerService: android.os.TokenWatcher mKeyguardDisabled>;

     label06:
        virtualinvoke $r5.<java.lang.Object: void wait()>();

     label07:
        goto label03;

     label08:
        $r6 := @caughtexception;

     label09:
        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        goto label03;

     label10:
        $r8 := @caughtexception;

        exitmonitor $r4;

     label11:
        throw $r8;

     label12:
        exitmonitor $r4;

     label13:
        return;

        catch java.lang.Throwable from label02 to label04 with label10;
        catch java.lang.InterruptedException from label06 to label07 with label08;
        catch java.lang.Throwable from label05 to label07 with label10;
        catch java.lang.Throwable from label09 to label11 with label10;
        catch java.lang.Throwable from label12 to label13 with label10;
    }

    public int relayoutWindow(com.android.server.WindowManagerService$Session, android.view.IWindow, android.view.WindowManager$LayoutParams, int, int, int, boolean, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.Surface)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        android.view.WindowManager$LayoutParams $r3, $r11;
        int $i0, $i1, $i2, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.graphics.Rect $r4, $r5, $r6, $r17;
        android.view.Surface $r7, $r14;
        long $l3;
        java.util.HashMap $r8;
        com.android.server.WindowManagerService$WindowState $r9, $r15;
        byte $b4, $b8;
        android.view.WindowManagerPolicy $r10;
        float $f0, $f1;
        com.android.server.WindowManagerService$AppWindowToken $r12;
        java.util.ArrayList $r13;
        android.content.res.Configuration $r16;
        java.lang.Exception $r18;
        java.lang.StringBuilder $r19;
        java.lang.CharSequence $r20;
        java.lang.String $r21;
        com.android.server.WindowManagerService$KeyWaiter $r22;
        java.lang.Throwable $r23;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.view.IWindow;

        $r3 := @parameter2: android.view.WindowManager$LayoutParams;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $z0 := @parameter6: boolean;

        $r4 := @parameter7: android.graphics.Rect;

        $r5 := @parameter8: android.graphics.Rect;

        $r6 := @parameter9: android.graphics.Rect;

        $r7 := @parameter10: android.view.Surface;

        $z1 = 0;

        $l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r8;

     label01:
        $r9 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r1, $r2);

        if $r9 != null goto label03;

        exitmonitor $r8;

     label02:
        return 0;

     label03:
        $r9.<com.android.server.WindowManagerService$WindowState: int mRequestedWidth> = $i0;

        $r9.<com.android.server.WindowManagerService$WindowState: int mRequestedHeight> = $i1;

        if $r3 == null goto label04;

        $r10 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r10.<android.view.WindowManagerPolicy: void adjustWindowParamsLw(android.view.WindowManager$LayoutParams)>($r3);

     label04:
        $i5 = 0;

        $i6 = 0;

        if $r3 == null goto label05;

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = $r11.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = $r3.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = $i5 ^ $i6;

        $r11.<android.view.WindowManager$LayoutParams: int flags> = $i6;

        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i5 = virtualinvoke $r11.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>($r3);

     label05:
        $i7 = $i5 & 128;

        if $i7 == 0 goto label06;

        $f0 = $r3.<android.view.WindowManager$LayoutParams: float alpha>;

        $r9.<com.android.server.WindowManagerService$WindowState: float mAlpha> = $f0;

     label06:
        $r11 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i7 = $r11.<android.view.WindowManager$LayoutParams: int flags>;

        $i7 = $i7 & 16384;

        if $i7 == 0 goto label33;

        $z2 = 1;

     label07:
        if $z2 == 0 goto label10;

        $i7 = $r3.<android.view.ViewGroup$LayoutParams: int width>;

        if $i7 == $i0 goto label34;

        $i7 = $r3.<android.view.ViewGroup$LayoutParams: int width>;

        $f0 = (float) $i7;

        $f1 = (float) $i0;

        $f0 = $f0 / $f1;

     label08:
        $r9.<com.android.server.WindowManagerService$WindowState: float mHScale> = $f0;

        $i0 = $r3.<android.view.ViewGroup$LayoutParams: int height>;

        if $i0 == $i1 goto label35;

        $i0 = $r3.<android.view.ViewGroup$LayoutParams: int height>;

        $f0 = (float) $i0;

        $f1 = (float) $i1;

        $f0 = $f0 / $f1;

     label09:
        $r9.<com.android.server.WindowManagerService$WindowState: float mVScale> = $f0;

     label10:
        $i0 = 131080 & $i6;

        if $i0 == 0 goto label36;

        $z2 = 1;

     label11:
        $i0 = $r9.<com.android.server.WindowManagerService$WindowState: int mViewVisibility>;

        if $i0 != $i2 goto label12;

        $i0 = $i6 & 8;

        if $i0 != 0 goto label12;

        $z3 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mRelayoutCalled>;

        if $z3 != 0 goto label37;

     label12:
        $z3 = 1;

     label13:
        $r9.<com.android.server.WindowManagerService$WindowState: boolean mRelayoutCalled> = 1;

        $i0 = $r9.<com.android.server.WindowManagerService$WindowState: int mViewVisibility>;

        $r9.<com.android.server.WindowManagerService$WindowState: int mViewVisibility> = $i2;

        if $i2 != 0 goto label44;

        $r12 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r12 == null goto label14;

        $r12 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        $z4 = $r12.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden>;

        if $z4 != 0 goto label44;

     label14:
        $z1 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isVisibleLw()>();

        if $z1 != 0 goto label38;

        $z1 = 1;

     label15:
        $z4 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mExiting>;

        if $z4 == 0 goto label16;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mExiting> = 0;

        $r9.<com.android.server.WindowManagerService$WindowState: android.view.animation.Animation mAnimation> = null;

     label16:
        $z4 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mDestroying>;

        if $z4 == 0 goto label17;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mDestroying> = 0;

        $r13 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mDestroySurface>;

        virtualinvoke $r13.<java.util.ArrayList: boolean remove(java.lang.Object)>($r9);

     label17:
        if $i0 != 8 goto label18;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mEnterAnimationPending> = 1;

     label18:
        if $z1 == 0 goto label19;

        $r14 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r14 == null goto label19;

        $z4 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mDrawPending>;

        if $z4 != 0 goto label19;

        $z4 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mCommitDrawPending>;

        if $z4 != 0 goto label19;

        $z4 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z4 != 0 goto label19;

        specialinvoke $r0.<com.android.server.WindowManagerService: void applyEnterAnimationLocked(com.android.server.WindowManagerService$WindowState)>($r9);

     label19:
        $i0 = $i5 & 8;

        if $i0 == 0 goto label21;

        virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: void destroySurfaceLocked()>();

     label20:
        $z1 = 1;

     label21:
        $r14 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface createSurfaceLocked()>();

        if $r14 == null goto label39;

        virtualinvoke $r7.<android.view.Surface: void copyFrom(android.view.Surface)>($r14);

     label22:
        if $z1 == 0 goto label23;

        $z3 = 1;

     label23:
        $r3 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 2011 goto label24;

        $r15 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        if $r15 != null goto label24;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow> = $r9;

        $z2 = 1;

     label24:
        if $z3 == 0 goto label25;

        $z3 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(3);

        if $z3 == 0 goto label25;

        $z2 = 0;

     label25:
        $z3 = 0;

        if $z2 == 0 goto label26;

        $z2 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>(0);

        if $z2 == 0 goto label26;

        $z3 = 1;

     label26:
        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mGivenInsetsPending> = $z0;

        if $z3 == 0 goto label27;

        specialinvoke $r0.<com.android.server.WindowManagerService: void assignLayersLocked()>();

     label27:
        $r16 = virtualinvoke $r0.<com.android.server.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration,android.os.IBinder)>(null, null);

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        $r12 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r12 == null goto label28;

        $r12 = $r9.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        virtualinvoke $r12.<com.android.server.WindowManagerService$AppWindowToken: void updateReportedVisibilityLocked()>();

     label28:
        $r17 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mFrame>;

        virtualinvoke $r4.<android.graphics.Rect: void set(android.graphics.Rect)>($r17);

        $r4 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mContentInsets>;

        virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

        $r4 = $r9.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mVisibleInsets>;

        virtualinvoke $r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mInTouchMode>;

        exitmonitor $r8;

     label29:
        if $r16 == null goto label30;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void sendNewConfiguration()>();

     label30:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l3);

        if $z0 == 0 goto label53;

        $b4 = 1;

     label31:
        if $z1 == 0 goto label54;

        $b8 = 2;

     label32:
        $b4 = $b4 | $b8;

        return $b4;

     label33:
        $z2 = 0;

        goto label07;

     label34:
        $f0 = 1.0F;

        goto label08;

     label35:
        $f0 = 1.0F;

        goto label09;

     label36:
        $z2 = 0;

        goto label11;

     label37:
        $z3 = 0;

        goto label13;

     label38:
        $z1 = 0;

        goto label15;

     label39:
        virtualinvoke $r7.<android.view.Surface: void clear()>();

     label40:
        goto label22;

     label41:
        $r18 := @caughtexception;

     label42:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception thrown when creating surface for client ");

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r3 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r20 = virtualinvoke $r3.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r19 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r21, $r18);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l3);

        exitmonitor $r8;

     label43:
        return 0;

     label44:
        $r9.<com.android.server.WindowManagerService$WindowState: boolean mEnterAnimationPending> = 0;

        $r14 = $r9.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r14 == null goto label46;

        $z4 = $r9.<com.android.server.WindowManagerService$WindowState: boolean mExiting>;

        if $z4 != 0 goto label46;

        $b4 = 2;

        $r3 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i0 = $r3.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 != 3 goto label45;

        $b4 = 5;

     label45:
        $z4 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isWinVisibleLw()>();

        if $z4 == 0 goto label49;

        $z4 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean applyAnimationLocked(com.android.server.WindowManagerService$WindowState,int,boolean)>($r9, $b4, 0);

        if $z4 == 0 goto label49;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mExiting> = 1;

        $r22 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r22.<com.android.server.WindowManagerService$KeyWaiter: android.view.MotionEvent finishedKey(com.android.server.WindowManagerService$Session,android.view.IWindow,boolean,int)>($r1, $r2, 1, 0);

     label46:
        virtualinvoke $r7.<android.view.Surface: void clear()>();

        goto label24;

     label47:
        $r23 := @caughtexception;

        exitmonitor $r8;

     label48:
        throw $r23;

     label49:
        $z4 = virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: boolean isAnimating()>();

        if $z4 == 0 goto label50;

        $r9.<com.android.server.WindowManagerService$WindowState: boolean mExiting> = 1;

        goto label46;

     label50:
        $r15 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        if $r15 != $r9 goto label51;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow> = null;

     label51:
        virtualinvoke $r9.<com.android.server.WindowManagerService$WindowState: void destroySurfaceLocked()>();

     label52:
        goto label46;

     label53:
        $b4 = 0;

        goto label31;

     label54:
        $b8 = 0;

        goto label32;

        catch java.lang.Throwable from label01 to label02 with label47;
        catch java.lang.Throwable from label03 to label20 with label47;
        catch java.lang.Exception from label21 to label22 with label41;
        catch java.lang.Throwable from label21 to label22 with label47;
        catch java.lang.Throwable from label23 to label29 with label47;
        catch java.lang.Exception from label39 to label40 with label41;
        catch java.lang.Throwable from label39 to label40 with label47;
        catch java.lang.Throwable from label42 to label43 with label47;
        catch java.lang.Throwable from label44 to label48 with label47;
        catch java.lang.Throwable from label49 to label52 with label47;
    }

    public void removeAppToken(android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        java.util.HashMap $r2, $r5;
        boolean $z0, $z1;
        com.android.server.WindowManagerService$AppWindowToken $r3, $r4, $r10;
        long $l0;
        java.lang.Object $r6;
        com.android.server.WindowManagerService$WindowToken $r7;
        java.util.ArrayList $r8;
        com.android.server.WindowManagerService$StartingData $r9;
        com.android.server.WindowManagerService$KeyWaiter $r11;
        com.android.server.WindowManagerService$H $r12;
        android.os.Message $r13;
        int $i1;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;
        java.lang.Throwable $r16;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "removeAppToken()");

        if $z0 != 0 goto label01;

        return;

     label01:
        $r3 = null;

        $r4 = null;

        $z0 = 0;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label02:
        $r5 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r7 = (com.android.server.WindowManagerService$WindowToken) $r6;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        virtualinvoke $r8.<java.util.ArrayList: boolean remove(java.lang.Object)>($r7);

        if $r7 == null goto label10;

        $r3 = $r7.<com.android.server.WindowManagerService$WindowToken: com.android.server.WindowManagerService$AppWindowToken appWindowToken>;

        if $r3 == null goto label10;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.WindowManagerService$AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)>($r3, null, 0, 0, 1);

        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean inPendingTransaction> = 0;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        virtualinvoke $r8.<java.util.ArrayList: boolean remove(java.lang.Object)>($r3);

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        $z1 = virtualinvoke $r8.<java.util.ArrayList: boolean contains(java.lang.Object)>($r3);

        if $z1 == 0 goto label09;

        $z0 = 1;

     label03:
        if $z0 == 0 goto label04;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingAppTokens>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label04:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        virtualinvoke $r8.<java.util.ArrayList: boolean remove(java.lang.Object)>($r3);

        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean removed> = 1;

        $r9 = $r3.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData>;

        if $r9 == null goto label05;

        $r4 = $r3;

     label05:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,boolean,boolean)>($r3, 1, 1);

        $r10 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp>;

        if $r10 != $r3 goto label06;

        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp> = null;

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(0);

        $r11 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r11.<com.android.server.WindowManagerService$KeyWaiter: void tickle()>();

     label06:
        if $z0 != 0 goto label07;

        if $r3 == null goto label07;

        virtualinvoke $r3.<com.android.server.WindowManagerService$AppWindowToken: void updateReportedVisibilityLocked()>();

     label07:
        exitmonitor $r2;

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        if $r4 == null goto label13;

        $r12 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r13 = virtualinvoke $r12.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(6, $r4);

        $r12 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r12.<android.os.Handler: boolean sendMessage(android.os.Message)>($r13);

        return;

     label09:
        $i1 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        if $i1 == 0 goto label03;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $z0 = 1;

        goto label03;

     label10:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to remove non-existing app token: ");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r15);

        goto label06;

     label11:
        $r16 := @caughtexception;

        exitmonitor $r2;

     label12:
        throw $r16;

     label13:
        return;

        catch java.lang.Throwable from label02 to label08 with label11;
        catch java.lang.Throwable from label09 to label12 with label11;
    }

    public void removeWindow(com.android.server.WindowManagerService$Session, android.view.IWindow)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        java.util.HashMap $r3;
        java.lang.Throwable $r4;
        com.android.server.WindowManagerService$WindowState $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.view.IWindow;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r3;

     label1:
        $r5 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r1, $r2);

        if $r5 != null goto label3;

        exitmonitor $r3;

     label2:
        return;

     label3:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void removeWindowLocked(com.android.server.WindowManagerService$Session,com.android.server.WindowManagerService$WindowState)>($r1, $r5);

        exitmonitor $r3;

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public void removeWindowLocked(com.android.server.WindowManagerService$Session, com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        com.android.server.WindowManagerService$WindowState $r2;
        long $l0;
        boolean $z0, $z1;
        android.view.Surface $r3;
        byte $b1;
        android.view.WindowManager$LayoutParams $r4;
        int $i2, $i3;
        com.android.server.WindowManagerService$AppWindowToken $r5;
        com.android.server.WindowManagerService$H $r6, $r7;
        android.os.Message $r8;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: com.android.server.WindowManagerService$WindowState;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $z0 = 0;

        $r3 = $r2.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r3 == null goto label5;

        $z1 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z1 != 0 goto label5;

        $z1 = virtualinvoke $r2.<com.android.server.WindowManagerService$WindowState: boolean isWinVisibleLw()>();

        $z0 = $z1;

        if $z1 == 0 goto label2;

        $b1 = 2;

        $r4 = virtualinvoke $r2.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams getAttrs()>();

        $i2 = $r4.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 3 goto label1;

        $b1 = 5;

     label1:
        $z1 = specialinvoke $r0.<com.android.server.WindowManagerService: boolean applyAnimationLocked(com.android.server.WindowManagerService$WindowState,int,boolean)>($r2, $b1, 0);

        if $z1 == 0 goto label2;

        $r2.<com.android.server.WindowManagerService$WindowState: boolean mExiting> = 1;

     label2:
        $z1 = $r2.<com.android.server.WindowManagerService$WindowState: boolean mExiting>;

        if $z1 != 0 goto label3;

        $z1 = virtualinvoke $r2.<com.android.server.WindowManagerService$WindowState: boolean isAnimating()>();

        if $z1 == 0 goto label5;

     label3:
        $r2.<com.android.server.WindowManagerService$WindowState: boolean mExiting> = 1;

        $r2.<com.android.server.WindowManagerService$WindowState: boolean mRemoveOnExit> = 1;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(3);

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        $r5 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        if $r5 == null goto label4;

        $r5 = $r2.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken>;

        virtualinvoke $r5.<com.android.server.WindowManagerService$AppWindowToken: void updateReportedVisibilityLocked()>();

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;

     label5:
        specialinvoke $r0.<com.android.server.WindowManagerService: void removeWindowInnerLocked(com.android.server.WindowManagerService$Session,com.android.server.WindowManagerService$WindowState)>($r1, $r2);

        if $z0 == 0 goto label6;

        $i2 = virtualinvoke $r0.<com.android.server.WindowManagerService: int computeForcedAppOrientationLocked()>();

        $i3 = $r0.<com.android.server.WindowManagerService: int mForcedAppOrientation>;

        if $i2 == $i3 goto label6;

        $r6 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r7 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r8 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(18);

        virtualinvoke $r6.<android.os.Handler: boolean sendMessage(android.os.Message)>($r8);

     label6:
        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(0);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;
    }

    public void removeWindowToken(android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        boolean $z0, $z1, $z2;
        long $l0;
        java.util.HashMap $r2, $r3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowToken $r5;
        java.util.ArrayList $r6;
        int $i1, $i2;
        com.android.server.WindowManagerService$WindowState $r7;
        com.android.server.WindowManagerService$KeyWaiter $r8;
        com.android.server.WindowManagerService$Session $r9;
        android.view.IWindow $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;
        java.lang.Throwable $r13;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "removeWindowToken()");

        if $z0 != 0 goto label01;

        return;

     label01:
        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label02:
        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r1);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

        $r6 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mTokenList>;

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>($r5);

        if $r5 == null goto label10;

        $z0 = 0;

        $z1 = $r5.<com.android.server.WindowManagerService$WindowToken: boolean hidden>;

        if $z1 != 0 goto label08;

        $r5.<com.android.server.WindowManagerService$WindowToken: boolean hidden> = 1;

        $r6 = $r5.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $z1 = 0;

        $i2 = 0;

     label03:
        if $i2 >= $i1 goto label06;

        $r6 = $r5.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        $r4 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r7 = (com.android.server.WindowManagerService$WindowState) $r4;

        $z2 = virtualinvoke $r7.<com.android.server.WindowManagerService$WindowState: boolean isAnimating()>();

        if $z2 == 0 goto label04;

        $z0 = 1;

     label04:
        $z2 = virtualinvoke $r7.<com.android.server.WindowManagerService$WindowState: boolean isVisibleNow()>();

        if $z2 == 0 goto label05;

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean applyAnimationLocked(com.android.server.WindowManagerService$WindowState,int,boolean)>($r7, 2, 0);

        $r8 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r9 = $r7.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $r10 = $r7.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

        virtualinvoke $r8.<com.android.server.WindowManagerService$KeyWaiter: android.view.MotionEvent finishedKey(com.android.server.WindowManagerService$Session,android.view.IWindow,boolean,int)>($r9, $r10, 1, 0);

        $z1 = 1;

     label05:
        $i2 = $i2 + 1;

        goto label03;

     label06:
        if $z1 == 0 goto label07;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(0);

     label07:
        if $z0 == 0 goto label08;

        $r6 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mExitingTokens>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label08:
        exitmonitor $r2;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return;

     label10:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to remove non-existing token: ");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r12);

        goto label08;

     label11:
        $r13 := @caughtexception;

        exitmonitor $r2;

     label12:
        throw $r13;

        catch java.lang.Throwable from label02 to label09 with label11;
        catch java.lang.Throwable from label10 to label12 with label11;
    }

    void requestAnimationLocked(long)
    {
        com.android.server.WindowManagerService $r0;
        long $l0;
        android.os.Message $r1;
        boolean $z0;
        com.android.server.WindowManagerService$H $r2, $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $l0 := @parameter0: long;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mAnimationPending>;

        if $z0 != 0 goto label1;

        $r0.<com.android.server.WindowManagerService: boolean mAnimationPending> = 1;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r1 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r1, $l0);

        return;

     label1:
        return;
    }

    public void resumeKeyDispatching(android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        boolean $z0;
        java.util.HashMap $r2, $r3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowToken $r5;
        com.android.server.WindowManagerService$KeyWaiter $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "resumeKeyDispatching()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mTokenMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r5 = (com.android.server.WindowManagerService$WindowToken) $r4;

        if $r5 == null goto label3;

        $r6 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r6.<com.android.server.WindowManagerService$KeyWaiter: void resumeDispatchingLocked(com.android.server.WindowManagerService$WindowToken)>($r5);

     label3:
        exitmonitor $r2;

     label4:
        return;

     label5:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r7;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    void sendNewConfiguration()
    {
        com.android.server.WindowManagerService $r0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: android.app.IActivityManager mActivityManager>;

     label1:
        interfaceinvoke $r1.<android.app.IActivityManager: void updateConfiguration(android.content.res.Configuration)>(null);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setAnimationScale(int, float)
    {
        com.android.server.WindowManagerService $r0;
        int $i0;
        float $f0;
        boolean $z0;
        byte $b1;
        com.android.server.WindowManagerService$H $r1;
        android.os.Message $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ANIMATION_SCALE", "setAnimationScale()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $b1 = $f0 cmpg 0.0F;

        if $b1 >= 0 goto label4;

        $f0 = 0.0F;

     label2:
        $f0 = staticinvoke <java.lang.Math: float abs(float)>($f0);

        lookupswitch($i0)
        {
            case 0: goto label5;
            case 1: goto label6;
            default: goto label3;
        };

     label3:
        $r1 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int)>(14);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;

     label4:
        $b1 = $f0 cmpl 20.0F;

        if $b1 <= 0 goto label2;

        $f0 = 20.0F;

        goto label2;

     label5:
        $f0 = staticinvoke <com.android.server.WindowManagerService: float fixScale(float)>($f0);

        $r0.<com.android.server.WindowManagerService: float mWindowAnimationScale> = $f0;

        goto label3;

     label6:
        $f0 = staticinvoke <com.android.server.WindowManagerService: float fixScale(float)>($f0);

        $r0.<com.android.server.WindowManagerService: float mTransitionAnimationScale> = $f0;

        goto label3;
    }

    public void setAnimationScales(float[])
    {
        com.android.server.WindowManagerService $r0;
        float[] $r1;
        boolean $z0;
        int $i0;
        float $f0;
        com.android.server.WindowManagerService$H $r2;
        android.os.Message $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: float[];

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ANIMATION_SCALE", "setAnimationScale()");

        if $z0 != 0 goto label1;

        return;

     label1:
        if $r1 == null goto label3;

        $i0 = lengthof $r1;

        if $i0 < 1 goto label2;

        $f0 = $r1[0];

        $f0 = staticinvoke <com.android.server.WindowManagerService: float fixScale(float)>($f0);

        $r0.<com.android.server.WindowManagerService: float mWindowAnimationScale> = $f0;

     label2:
        $i0 = lengthof $r1;

        if $i0 < 2 goto label3;

        $f0 = $r1[1];

        $f0 = staticinvoke <com.android.server.WindowManagerService: float fixScale(float)>($f0);

        $r0.<com.android.server.WindowManagerService: float mTransitionAnimationScale> = $f0;

     label3:
        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r3 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(14);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void setAppGroupId(android.os.IBinder, int)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        int $i0;
        boolean $z0;
        java.util.HashMap $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $i0 := @parameter1: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppStartingIcon()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r1);

        if $r3 != null goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set group id of non-existing app token: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r5);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r6;

     label6:
        $r3.<com.android.server.WindowManagerService$AppWindowToken: int groupId> = $i0;

        exitmonitor $r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public void setAppOrientation(android.view.IApplicationToken, int)
    {
        com.android.server.WindowManagerService $r0;
        android.view.IApplicationToken $r1;
        int $i0;
        boolean $z0;
        java.util.HashMap $r2;
        android.os.IBinder $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        java.lang.Throwable $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.IApplicationToken;

        $i0 := @parameter1: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppOrientation()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = interfaceinvoke $r1.<android.view.IApplicationToken: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r3);

        if $r4 != null goto label6;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set orientation of non-existing app token: ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r6);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r7;

     label6:
        $r4.<com.android.server.WindowManagerService$AppWindowToken: int requestedOrientation> = $i0;

        exitmonitor $r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public void setAppStartingWindow(android.os.IBinder, java.lang.String, int, java.lang.CharSequence, int, int, android.os.IBinder, boolean)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1, $r4;
        java.lang.String $r2;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r3;
        boolean $z0, $z1;
        com.android.server.WindowManagerService$WindowState $r5;
        java.util.HashMap $r6;
        com.android.server.WindowManagerService$AppWindowToken $r7, $r11;
        java.lang.StringBuilder $r8;
        java.lang.Throwable $r9;
        com.android.server.WindowManagerService$StartingData $r10;
        long $l3;
        android.view.View $r12;
        java.util.ArrayList $r13;
        android.view.animation.Animation $r14;
        com.android.server.WindowManagerService$H $r15;
        android.os.Message $r16;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.lang.CharSequence;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $r4 := @parameter6: android.os.IBinder;

        $z0 := @parameter7: boolean;

        $z1 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppStartingIcon()");

        if $z1 != 0 goto label01;

        return;

     label01:
        $r6 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r6;

     label02:
        $r7 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r1);

        if $r7 != null goto label06;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set icon of non-existing app token: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r2);

        exitmonitor $r6;

     label03:
        return;

     label04:
        $r9 := @caughtexception;

        exitmonitor $r6;

     label05:
        throw $r9;

     label06:
        $z1 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z1 == 0 goto label08;

        exitmonitor $r6;

     label07:
        return;

     label08:
        $r10 = $r7.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData>;

        if $r10 == null goto label10;

        exitmonitor $r6;

     label09:
        return;

     label10:
        if $r4 == null goto label20;

        $r11 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r4);

        if $r11 == null goto label20;

        $r5 = $r11.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow>;

        if $r5 == null goto label18;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mStartingIconInTransition>;

        if $z0 == 0 goto label11;

        $r0.<com.android.server.WindowManagerService: boolean mSkipAppTransitionAnimation> = 1;

     label11:
        $l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r10 = $r11.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData>;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData> = $r10;

        $r12 = $r11.<com.android.server.WindowManagerService$AppWindowToken: android.view.View startingView>;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: android.view.View startingView> = $r12;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow> = $r5;

        $r11.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData> = null;

        $r11.<com.android.server.WindowManagerService$AppWindowToken: android.view.View startingView> = null;

        $r11.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow> = null;

        $r11.<com.android.server.WindowManagerService$AppWindowToken: boolean startingMoved> = 1;

        $r5.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowToken mToken> = $r7;

        $r5.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$WindowToken mRootToken> = $r7;

        $r5.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$AppWindowToken mAppToken> = $r7;

        $r13 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        virtualinvoke $r13.<java.util.ArrayList: boolean remove(java.lang.Object)>($r5);

        $r13 = $r11.<com.android.server.WindowManagerService$WindowToken: java.util.ArrayList windows>;

        virtualinvoke $r13.<java.util.ArrayList: boolean remove(java.lang.Object)>($r5);

        $r13 = $r11.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        virtualinvoke $r13.<java.util.ArrayList: boolean remove(java.lang.Object)>($r5);

        specialinvoke $r0.<com.android.server.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.WindowManagerService$WindowState,boolean)>($r5, 1);

        $r13 = $r7.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

        $z0 = $r11.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn>;

        if $z0 == 0 goto label12;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn> = 1;

     label12:
        $z0 = $r11.<com.android.server.WindowManagerService$AppWindowToken: boolean firstWindowDrawn>;

        if $z0 == 0 goto label13;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: boolean firstWindowDrawn> = 1;

     label13:
        $z0 = $r11.<com.android.server.WindowManagerService$WindowToken: boolean hidden>;

        if $z0 != 0 goto label14;

        $r7.<com.android.server.WindowManagerService$WindowToken: boolean hidden> = 0;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested> = 0;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: boolean willBeHidden> = 0;

     label14:
        $z0 = $r7.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden>;

        $z1 = $r11.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden>;

        if $z0 == $z1 goto label15;

        $z0 = $r11.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden>;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden> = $z0;

        virtualinvoke $r7.<com.android.server.WindowManagerService$AppWindowToken: void sendAppVisibilityToClients()>();

     label15:
        $r14 = $r11.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation>;

        if $r14 == null goto label16;

        $r14 = $r11.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation>;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation> = $r14;

        $z0 = $r11.<com.android.server.WindowManagerService$AppWindowToken: boolean animating>;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: boolean animating> = $z0;

        $i0 = $r11.<com.android.server.WindowManagerService$AppWindowToken: int animLayerAdjustment>;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: int animLayerAdjustment> = $i0;

        $r11.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation> = null;

        $r11.<com.android.server.WindowManagerService$AppWindowToken: int animLayerAdjustment> = 0;

        virtualinvoke $r7.<com.android.server.WindowManagerService$AppWindowToken: void updateLayers()>();

        virtualinvoke $r11.<com.android.server.WindowManagerService$AppWindowToken: void updateLayers()>();

     label16:
        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(3);

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l3);

        exitmonitor $r6;

     label17:
        return;

     label18:
        $r10 = $r11.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData>;

        if $r10 == null goto label20;

        $r10 = $r11.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData>;

        $r7.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData> = $r10;

        $r11.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData> = null;

        $r11.<com.android.server.WindowManagerService$AppWindowToken: boolean startingMoved> = 1;

        $r15 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r16 = virtualinvoke $r15.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, $r7);

        $r15 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r15.<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>($r16);

        exitmonitor $r6;

     label19:
        return;

     label20:
        if $z0 != 0 goto label22;

        exitmonitor $r6;

     label21:
        return;

     label22:
        $r0.<com.android.server.WindowManagerService: boolean mStartingIconInTransition> = 1;

        $r10 = new com.android.server.WindowManagerService$StartingData;

        specialinvoke $r10.<com.android.server.WindowManagerService$StartingData: void <init>(java.lang.String,int,java.lang.CharSequence,int,int)>($r2, $i0, $r3, $i1, $i2);

        $r7.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$StartingData startingData> = $r10;

        $r15 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r16 = virtualinvoke $r15.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, $r7);

        $r15 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r15.<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>($r16);

        exitmonitor $r6;

     label23:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label09 with label04;
        catch java.lang.Throwable from label10 to label17 with label04;
        catch java.lang.Throwable from label18 to label19 with label04;
        catch java.lang.Throwable from label20 to label21 with label04;
        catch java.lang.Throwable from label22 to label23 with label04;
    }

    public void setAppVisibility(android.os.IBinder, boolean)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        boolean $z0, $z1;
        java.util.HashMap $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        int $i0;
        java.util.ArrayList $r7;
        long $l1;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $z0 := @parameter1: boolean;

        $z1 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppVisibility()");

        if $z1 != 0 goto label01;

        return;

     label01:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label02:
        $r3 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r1);

        if $r3 != null goto label06;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set visibility of non-existing app token: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r5);

        exitmonitor $r2;

     label03:
        return;

     label04:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label05:
        throw $r6;

     label06:
        $z1 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z1 != 0 goto label14;

        $i0 = $r0.<com.android.server.WindowManagerService: int mNextAppTransition>;

        if $i0 == 0 goto label14;

        $z1 = $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested>;

        if $z1 == $z0 goto label08;

        exitmonitor $r2;

     label07:
        return;

     label08:
        if $z0 != 0 goto label12;

        $z1 = 1;

     label09:
        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested> = $z1;

        virtualinvoke $r3.<com.android.server.WindowManagerService$AppWindowToken: void setDummyAnimation()>();

        $r7 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        virtualinvoke $r7.<java.util.ArrayList: boolean remove(java.lang.Object)>($r3);

        $r7 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        virtualinvoke $r7.<java.util.ArrayList: boolean remove(java.lang.Object)>($r3);

        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean inPendingTransaction> = 1;

        if $z0 == 0 goto label13;

        $r7 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mOpeningApps>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean allDrawn> = 0;

        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean startingDisplayed> = 0;

        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean startingMoved> = 0;

        $z0 = $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden>;

        if $z0 == 0 goto label10;

        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden> = 0;

        virtualinvoke $r3.<com.android.server.WindowManagerService$AppWindowToken: void sendAppVisibilityToClients()>();

     label10:
        exitmonitor $r2;

     label11:
        return;

     label12:
        $z1 = 0;

        goto label09;

     label13:
        $r7 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mClosingApps>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        goto label10;

     label14:
        $l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke $r0.<com.android.server.WindowManagerService: boolean setTokenVisibilityLocked(com.android.server.WindowManagerService$AppWindowToken,android.view.WindowManager$LayoutParams,boolean,int,boolean)>($r3, null, $z0, 0, 1);

        virtualinvoke $r3.<com.android.server.WindowManagerService$AppWindowToken: void updateReportedVisibilityLocked()>();

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l1);

        exitmonitor $r2;

     label15:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
        catch java.lang.Throwable from label08 to label11 with label04;
        catch java.lang.Throwable from label12 to label15 with label04;
    }

    public void setAppWillBeHidden(android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        boolean $z0;
        java.util.HashMap $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppWillBeHidden()");

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r1);

        if $r3 != null goto label6;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set will be hidden of non-existing app token: ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r5);

        exitmonitor $r2;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r2;

     label5:
        throw $r6;

     label6:
        $r3.<com.android.server.WindowManagerService$AppWindowToken: boolean willBeHidden> = 1;

        exitmonitor $r2;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
    }

    public void setEventDispatching(boolean)
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0, $z1;
        java.util.HashMap $r1;
        com.android.server.WindowManagerService$KeyWaiter $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 := @parameter0: boolean;

        $z1 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "resumeKeyDispatching()");

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label2:
        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r2.<com.android.server.WindowManagerService$KeyWaiter: void setEventDispatchingLocked(boolean)>($z0);

        exitmonitor $r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void setFocusedApp(android.os.IBinder, boolean)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        boolean $z0, $z1;
        java.util.HashMap $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3, $r8;
        com.android.server.WindowManagerService$KeyWaiter $r4;
        long $l0;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $z0 := @parameter1: boolean;

        $z1 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setFocusedApp()");

        if $z1 != 0 goto label01;

        return;

     label01:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

        if $r1 != null goto label10;

     label02:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp>;

        if $r3 == null goto label09;

        $z1 = 1;

     label03:
        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp> = null;

        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r4.<com.android.server.WindowManagerService$KeyWaiter: void tickle()>();

     label04:
        if $z0 == 0 goto label05;

        if $z1 == 0 goto label05;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(0);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

     label05:
        exitmonitor $r2;

     label06:
        return;

     label07:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label08:
        throw $r5;

     label09:
        $z1 = 0;

        goto label03;

     label10:
        $r3 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r1);

        if $r3 != null goto label12;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to set focus to non-existing app token: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        exitmonitor $r2;

     label11:
        return;

     label12:
        $r8 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp>;

        if $r8 == $r3 goto label15;

        $z1 = 1;

     label13:
        $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken mFocusedApp> = $r3;

        $r4 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        virtualinvoke $r4.<com.android.server.WindowManagerService$KeyWaiter: void tickle()>();

     label14:
        goto label04;

     label15:
        $z1 = 0;

        goto label13;

        catch java.lang.Throwable from label02 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
        catch java.lang.Throwable from label10 to label11 with label07;
        catch java.lang.Throwable from label12 to label14 with label07;
    }

    public void setInTouchMode(boolean)
    {
        com.android.server.WindowManagerService $r0;
        boolean $z0;
        java.util.HashMap $r1;
        java.lang.Throwable $r2;

        $r0 := @this: com.android.server.WindowManagerService;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label1:
        $r0.<com.android.server.WindowManagerService: boolean mInTouchMode> = $z0;

        exitmonitor $r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    void setInputMethodAnimLayerAdjustment(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1, $i2;
        com.android.server.WindowManagerService$WindowState $r1, $r4;
        java.util.ArrayList $r2;
        java.lang.Object $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r0.<com.android.server.WindowManagerService: int mInputMethodAnimLayerAdjustment> = $i0;

        $r1 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState mInputMethodWindow>;

        if $r1 == null goto label2;

        $i1 = $r1.<com.android.server.WindowManagerService$WindowState: int mLayer>;

        $i1 = $i1 + $i0;

        $r1.<com.android.server.WindowManagerService$WindowState: int mAnimLayer> = $i1;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label1:
        if $i1 <= 0 goto label2;

        $i1 = $i1 + -1;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: java.util.ArrayList mChildWindows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $i2 = $r4.<com.android.server.WindowManagerService$WindowState: int mLayer>;

        $i2 = $i2 + $i0;

        $r4.<com.android.server.WindowManagerService$WindowState: int mAnimLayer> = $i2;

        goto label1;

     label2:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

     label3:
        if $i1 <= 0 goto label4;

        $i1 = $i1 + -1;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mInputMethodDialogs>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r1 = (com.android.server.WindowManagerService$WindowState) $r3;

        $i2 = $r1.<com.android.server.WindowManagerService$WindowState: int mLayer>;

        $i2 = $i2 + $i0;

        $r1.<com.android.server.WindowManagerService$WindowState: int mAnimLayer> = $i2;

        goto label3;

     label4:
        return;
    }

    void setInsetsWindow(com.android.server.WindowManagerService$Session, android.view.IWindow, int, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        int $i0;
        android.graphics.Rect $r3, $r4, $r7;
        long $l1;
        java.util.HashMap $r5;
        com.android.server.WindowManagerService$WindowState $r6;
        java.lang.Throwable $r8, $r9;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.view.IWindow;

        $i0 := @parameter2: int;

        $r3 := @parameter3: android.graphics.Rect;

        $r4 := @parameter4: android.graphics.Rect;

        $l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r5;

     label2:
        $r6 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session,android.view.IWindow)>($r1, $r2);

        if $r6 == null goto label3;

        $r6.<com.android.server.WindowManagerService$WindowState: boolean mGivenInsetsPending> = 0;

        $r7 = $r6.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mGivenContentInsets>;

        virtualinvoke $r7.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        $r3 = $r6.<com.android.server.WindowManagerService$WindowState: android.graphics.Rect mGivenVisibleInsets>;

        virtualinvoke $r3.<android.graphics.Rect: void set(android.graphics.Rect)>($r4);

        $r6.<com.android.server.WindowManagerService$WindowState: int mTouchableInsets> = $i0;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label3:
        exitmonitor $r5;

     label4:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l1);

        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor $r5;

     label7:
        throw $r8;

     label8:
        $r9 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l1);

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
        catch java.lang.Throwable from label7 to label8 with label8;
    }

    public void setRotation(int, boolean, int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1;
        boolean $z0, $z1;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $i1 := @parameter2: int;

        $z1 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.SET_ORIENTATION", "setRotation()");

        if $z1 != 0 goto label1;

        return;

     label1:
        virtualinvoke $r0.<com.android.server.WindowManagerService: void setRotationUnchecked(int,boolean,int)>($i0, $z0, $i1);

        return;
    }

    public void setRotationUnchecked(int, boolean, int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1;
        boolean $z0, $z1;
        long $l2;
        java.util.HashMap $r1;
        java.lang.Throwable $r2, $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $i1 := @parameter2: int;

        $l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label01:
        $z1 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean setRotationUncheckedLocked(int,int)>($i0, $i1);

        exitmonitor $r1;

     label02:
        if $z1 == 0 goto label11;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void sendNewConfiguration()>();

        $r1 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r1;

     label03:
        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

        exitmonitor $r1;

     label04:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l2);

        return;

     label05:
        $r2 := @caughtexception;

     label06:
        exitmonitor $r1;

     label07:
        throw $r2;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor $r1;

     label10:
        throw $r3;

     label11:
        if $z0 == 0 goto label04;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void sendNewConfiguration()>();

        goto label04;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean setRotationUncheckedLocked(int, int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1;
        android.view.WindowManagerPolicy $r1;
        com.android.server.WindowManagerService$H $r2, $r3;
        android.os.Message $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r6;
        com.android.server.WindowManagerService$KeyQ $r7;
        java.util.ArrayList $r8;
        java.lang.Object $r9;
        com.android.server.WindowManagerService$WindowState $r10;
        android.view.Surface $r11;
        android.view.IRotationWatcher $r12;
        android.os.RemoteException $r13;

        $r0 := @this: com.android.server.WindowManagerService;

        $i1 := @parameter0: int;

        $i0 := @parameter1: int;

        if $i1 != -1000 goto label06;

     label01:
        $r1 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        $i1 = $r0.<com.android.server.WindowManagerService: int mForcedAppOrientation>;

        $i2 = $r0.<com.android.server.WindowManagerService: int mRotation>;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayEnabled>;

        $i1 = interfaceinvoke $r1.<android.view.WindowManagerPolicy: int rotationForOrientationLw(int,int,boolean)>($i1, $i2, $z0);

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayEnabled>;

        if $z0 == 0 goto label07;

        $i2 = $r0.<com.android.server.WindowManagerService: int mRotation>;

        if $i2 == $i1 goto label07;

        $z0 = 1;

     label02:
        if $z0 == 0 goto label12;

        $r0.<com.android.server.WindowManagerService: int mRotation> = $i1;

        $r0.<com.android.server.WindowManagerService: boolean mWindowsFreezingScreen> = 1;

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(11);

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(11);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r4, 2000L);

        specialinvoke $r0.<com.android.server.WindowManagerService: void startFreezingDisplayLocked()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting rotation to ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", animFlags=");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r6);

        $r7 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyQ mQueue>;

        virtualinvoke $r7.<com.android.server.KeyInputQueue: void setOrientation(int)>($i1);

        $z1 = $r0.<com.android.server.WindowManagerService: boolean mDisplayEnabled>;

        if $z1 == 0 goto label03;

        staticinvoke <android.view.Surface: void setOrientation(int,int,int)>(0, $i1, $i0);

     label03:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label04:
        if $i0 < 0 goto label08;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r10 = (com.android.server.WindowManagerService$WindowState) $r9;

        $r11 = $r10.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r11 == null goto label05;

        $r10.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 1;

     label05:
        $i0 = $i0 + -1;

        goto label04;

     label06:
        $r0.<com.android.server.WindowManagerService: int mRequestedRotation> = $i1;

        $r0.<com.android.server.WindowManagerService: int mLastRotationFlags> = $i0;

        goto label01;

     label07:
        $z0 = 0;

        goto label02;

     label08:
        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        $i0 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $i0 = $i0 - 1;

     label09:
        if $i0 < 0 goto label14;

        $r8 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mRotationWatchers>;

     label10:
        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r12 = (android.view.IRotationWatcher) $r9;

        interfaceinvoke $r12.<android.view.IRotationWatcher: void onRotationChanged(int)>($i1);

     label11:
        $i0 = $i0 + -1;

        goto label09;

     label12:
        return $z0;

     label13:
        $r13 := @caughtexception;

        goto label11;

     label14:
        return $z0;

        catch android.os.RemoteException from label10 to label11 with label13;
    }

    boolean setTokenVisibilityLocked(com.android.server.WindowManagerService$AppWindowToken, android.view.WindowManager$LayoutParams, boolean, int, boolean)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$AppWindowToken $r1;
        android.view.WindowManager$LayoutParams $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1;
        android.view.IWindow $r3;
        java.util.ArrayList $r4;
        android.view.animation.Animation $r5, $r6;
        java.lang.Object $r7;
        com.android.server.WindowManagerService$WindowState $r8, $r9;
        com.android.server.WindowManagerService$KeyWaiter $r10;
        com.android.server.WindowManagerService$Session $r11;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$AppWindowToken;

        $r2 := @parameter1: android.view.WindowManager$LayoutParams;

        $z0 := @parameter2: boolean;

        $i0 := @parameter3: int;

        $z1 := @parameter4: boolean;

        $z2 = 0;

        $z3 = $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden>;

        if $z3 != $z0 goto label02;

        if $z0 != 0 goto label07;

        $z3 = 1;

     label01:
        $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean clientHidden> = $z3;

        virtualinvoke $r1.<com.android.server.WindowManagerService$AppWindowToken: void sendAppVisibilityToClients()>();

     label02:
        $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean willBeHidden> = 0;

        $z3 = $r1.<com.android.server.WindowManagerService$WindowToken: boolean hidden>;

        if $z3 != $z0 goto label16;

        $r4 = $r1.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $z3 = 0;

        $z4 = 0;

        if $i0 == 0 goto label04;

        $r5 = $r1.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation>;

        $r6 = <com.android.server.WindowManagerService: android.view.animation.Animation sDummyAnimation>;

        if $r5 != $r6 goto label03;

        $r1.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation> = null;

     label03:
        specialinvoke $r0.<com.android.server.WindowManagerService: boolean applyAnimationLocked(com.android.server.WindowManagerService$AppWindowToken,android.view.WindowManager$LayoutParams,int,boolean)>($r1, $r2, $i0, $z0);

        $z3 = 1;

        $r5 = $r1.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation>;

        if $r5 == null goto label04;

        $z4 = 1;

        $z2 = 1;

     label04:
        $i0 = 0;

     label05:
        if $i0 >= $i1 goto label13;

        $r4 = $r1.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        $r7 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i0);

        $r8 = (com.android.server.WindowManagerService$WindowState) $r7;

        $r9 = $r1.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow>;

        if $r8 != $r9 goto label08;

     label06:
        $i0 = $i0 + 1;

        goto label05;

     label07:
        $z3 = 0;

        goto label01;

     label08:
        $z5 = virtualinvoke $r8.<com.android.server.WindowManagerService$WindowState: boolean isAnimating()>();

        if $z5 == 0 goto label09;

        $z2 = 1;

     label09:
        if $z0 == 0 goto label11;

        $z5 = virtualinvoke $r8.<com.android.server.WindowManagerService$WindowState: boolean isVisibleNow()>();

        if $z5 != 0 goto label06;

        if $z4 != 0 goto label10;

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean applyAnimationLocked(com.android.server.WindowManagerService$WindowState,int,boolean)>($r8, 1, 1);

     label10:
        $z3 = 1;

        goto label06;

     label11:
        $z5 = virtualinvoke $r8.<com.android.server.WindowManagerService$WindowState: boolean isVisibleNow()>();

        if $z5 == 0 goto label06;

        if $z4 != 0 goto label12;

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean applyAnimationLocked(com.android.server.WindowManagerService$WindowState,int,boolean)>($r8, 2, 0);

     label12:
        $r10 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$KeyWaiter mKeyWaiter>;

        $r11 = $r8.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $r3 = $r8.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

        virtualinvoke $r10.<com.android.server.WindowManagerService$KeyWaiter: android.view.MotionEvent finishedKey(com.android.server.WindowManagerService$Session,android.view.IWindow,boolean,int)>($r11, $r3, 1, 0);

        $z3 = 1;

        goto label06;

     label13:
        if $z0 != 0 goto label17;

        $z4 = 1;

     label14:
        $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested> = $z4;

        $r1.<com.android.server.WindowManagerService$WindowToken: boolean hidden> = $z4;

        if $z0 != 0 goto label18;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,boolean,boolean)>($r1, 1, 1);

     label15:
        if $z3 == 0 goto label16;

        if $z1 == 0 goto label16;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: boolean updateFocusedWindowLocked(int)>(3);

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label16:
        $r5 = $r1.<com.android.server.WindowManagerService$AppWindowToken: android.view.animation.Animation animation>;

        if $r5 == null goto label20;

        return 1;

     label17:
        $z4 = 0;

        goto label14;

     label18:
        $r8 = $r1.<com.android.server.WindowManagerService$AppWindowToken: com.android.server.WindowManagerService$WindowState startingWindow>;

        if $r8 == null goto label15;

        $z0 = $r8.<com.android.server.WindowManagerService$WindowState: boolean mDrawPending>;

        if $z0 != 0 goto label19;

        $z0 = $r8.<com.android.server.WindowManagerService$WindowState: boolean mCommitDrawPending>;

        if $z0 == 0 goto label15;

     label19:
        $r8.<com.android.server.WindowManagerService$WindowState: boolean mPolicyVisibility> = 0;

        $r8.<com.android.server.WindowManagerService$WindowState: boolean mPolicyVisibilityAfterAnim> = 0;

        goto label15;

     label20:
        return $z2;
    }

    boolean showSurfaceRobustlyLocked(com.android.server.WindowManagerService$WindowState)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$WindowState $r1;
        android.view.Surface $r2;
        java.lang.RuntimeException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$WindowState;

     label1:
        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r2 == null goto label2;

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        virtualinvoke $r2.<android.view.Surface: void show()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure showing surface ");

        $r2 = $r1.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r5);

        virtualinvoke $r0.<com.android.server.WindowManagerService: void reclaimSomeSurfaceMemoryLocked(com.android.server.WindowManagerService$WindowState,java.lang.String)>($r1, "show");

        return 0;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void startAppFreezingScreen(android.os.IBinder, int)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        int $i0;
        boolean $z0;
        java.util.HashMap $r2;
        java.lang.Throwable $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        android.view.IApplicationToken $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        long $l1;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $i0 := @parameter1: int;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppFreezingScreen()");

        if $z0 != 0 goto label01;

        return;

     label01:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

        if $i0 != 0 goto label06;

     label02:
        $z0 = $r0.<com.android.server.WindowManagerService: boolean mDisplayFrozen>;

        if $z0 != 0 goto label06;

        exitmonitor $r2;

     label03:
        return;

     label04:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label05:
        throw $r3;

     label06:
        $r4 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r1);

        if $r4 == null goto label07;

        $r5 = $r4.<com.android.server.WindowManagerService$AppWindowToken: android.view.IApplicationToken appToken>;

        if $r5 != null goto label09;

     label07:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to freeze screen with non-existing app token: ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        exitmonitor $r2;

     label08:
        return;

     label09:
        $l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke $r0.<com.android.server.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,int)>($r4, $i0);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l1);

        exitmonitor $r2;

     label10:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label06 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
    }

    public void startAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken, int)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$AppWindowToken $r1;
        int $i0, $i1;
        boolean $z0;
        com.android.server.WindowManagerService$H $r2, $r3;
        android.os.Message $r4;
        java.util.ArrayList $r5;
        java.lang.Object $r6;
        com.android.server.WindowManagerService$WindowState $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$AppWindowToken;

        $i0 := @parameter1: int;

        $z0 = $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean hiddenRequested>;

        if $z0 != 0 goto label3;

        $z0 = $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean freezingScreen>;

        if $z0 != 0 goto label1;

        $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean freezingScreen> = 1;

        $i0 = $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen>;

        $i0 = $i0 + 1;

        $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen> = $i0;

        $i0 = $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen>;

        if $i0 != 1 goto label1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void startFreezingDisplayLocked()>();

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        virtualinvoke $r2.<android.os.Handler: void removeMessages(int)>(17);

        $r2 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$H mH>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(17);

        virtualinvoke $r2.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>($r4, 5000L);

     label1:
        $r5 = $r1.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r5 = $r1.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r7 = (com.android.server.WindowManagerService$WindowState) $r6;

        $r7.<com.android.server.WindowManagerService$WindowState: boolean mAppFreezing> = 1;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        return;

     label4:
        return;
    }

    public boolean startViewServer(int)
    {
        com.android.server.WindowManagerService $r0;
        int $i0;
        java.lang.String $r1, $r2;
        boolean $z0;
        com.android.server.ViewServer $r3;
        java.io.IOException $r4, $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $i0 := @parameter0: int;

        $r1 = "1";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.secure", "0");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "startViewServer");

        if $z0 != 0 goto label02;

        return 0;

     label02:
        if $i0 >= 1024 goto label03;

        return 0;

     label03:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer>;

        if $r3 == null goto label08;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer>;

        $z0 = virtualinvoke $r3.<com.android.server.ViewServer: boolean isRunning()>();

        if $z0 != 0 goto label07;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer>;

     label04:
        $z0 = virtualinvoke $r3.<com.android.server.ViewServer: boolean start()>();

     label05:
        return $z0;

     label06:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "View server did not start");

     label07:
        return 0;

     label08:
        $r3 = new com.android.server.ViewServer;

     label09:
        specialinvoke $r3.<com.android.server.ViewServer: void <init>(com.android.server.WindowManagerService,int)>($r0, $i0);

     label10:
        $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer> = $r3;

     label11:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer>;

        $z0 = virtualinvoke $r3.<com.android.server.ViewServer: boolean start()>();

     label12:
        return $z0;

     label13:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", "View server did not start");

        return 0;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label09 to label10 with label13;
        catch java.io.IOException from label11 to label12 with label13;
    }

    public void stopAppFreezingScreen(android.os.IBinder, boolean)
    {
        com.android.server.WindowManagerService $r0;
        android.os.IBinder $r1;
        boolean $z0, $z1;
        java.util.HashMap $r2;
        com.android.server.WindowManagerService$AppWindowToken $r3;
        android.view.IApplicationToken $r4;
        java.lang.Throwable $r5;
        long $l0;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.os.IBinder;

        $z0 := @parameter1: boolean;

        $z1 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.MANAGE_APP_TOKENS", "setAppFreezingScreen()");

        if $z1 != 0 goto label1;

        return;

     label1:
        $r2 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r2;

     label2:
        $r3 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r1);

        if $r3 == null goto label3;

        $r4 = $r3.<com.android.server.WindowManagerService$AppWindowToken: android.view.IApplicationToken appToken>;

        if $r4 != null goto label7;

     label3:
        exitmonitor $r2;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r2;

     label6:
        throw $r5;

     label7:
        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        virtualinvoke $r0.<com.android.server.WindowManagerService: void unsetAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,boolean,boolean)>($r3, 1, $z0);

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        exitmonitor $r2;

     label8:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.lang.Throwable from label7 to label8 with label5;
    }

    public boolean stopViewServer()
    {
        com.android.server.WindowManagerService $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        com.android.server.ViewServer $r3;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = "1";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.secure", "0");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean checkCallingPermission(java.lang.String,java.lang.String)>("android.permission.DUMP", "stopViewServer");

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer>;

        if $r3 == null goto label3;

        $r3 = $r0.<com.android.server.WindowManagerService: com.android.server.ViewServer mViewServer>;

        $z0 = virtualinvoke $r3.<com.android.server.ViewServer: boolean stop()>();

        return $z0;

     label3:
        return 0;
    }

    public void systemReady()
    {
        com.android.server.WindowManagerService $r0;
        android.view.WindowManagerPolicy $r1;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r1.<android.view.WindowManagerPolicy: void systemReady()>();

        return;
    }

    void unsetAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken, boolean, boolean)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$AppWindowToken $r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.ArrayList $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.android.server.WindowManagerService$WindowState $r4;
        android.view.Surface $r5;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$AppWindowToken;

        $z0 := @parameter1: boolean;

        $z1 := @parameter2: boolean;

        $z2 = $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean freezingScreen>;

        if $z2 == 0 goto label08;

        $r2 = $r1.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $z2 = 0;

        $i1 = 0;

     label01:
        if $i1 >= $i0 goto label04;

        $r2 = $r1.<com.android.server.WindowManagerService$AppWindowToken: java.util.ArrayList allAppWindows>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (com.android.server.WindowManagerService$WindowState) $r3;

        $z3 = $r4.<com.android.server.WindowManagerService$WindowState: boolean mAppFreezing>;

        if $z3 == 0 goto label03;

        $r4.<com.android.server.WindowManagerService$WindowState: boolean mAppFreezing> = 0;

        $r5 = $r4.<com.android.server.WindowManagerService$WindowState: android.view.Surface mSurface>;

        if $r5 == null goto label02;

        $z2 = $r4.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging>;

        if $z2 != 0 goto label02;

        $r4.<com.android.server.WindowManagerService$WindowState: boolean mOrientationChanging> = 1;

     label02:
        $z2 = 1;

     label03:
        $i1 = $i1 + 1;

        goto label01;

     label04:
        if $z1 != 0 goto label05;

        if $z2 == 0 goto label06;

     label05:
        $r1.<com.android.server.WindowManagerService$AppWindowToken: boolean freezingScreen> = 0;

        $i0 = $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen>;

        $i0 = $i0 - 1;

        $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen> = $i0;

     label06:
        if $z0 == 0 goto label09;

        if $z2 == 0 goto label07;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label07:
        $i0 = $r0.<com.android.server.WindowManagerService: int mAppsFreezingScreen>;

        if $i0 != 0 goto label10;

        $z0 = $r0.<com.android.server.WindowManagerService: boolean mWindowsFreezingScreen>;

        if $z0 != 0 goto label11;

        specialinvoke $r0.<com.android.server.WindowManagerService: void stopFreezingDisplayLocked()>();

        return;

     label08:
        return;

     label09:
        return;

     label10:
        return;

     label11:
        return;
    }

    public android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration, android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.content.res.Configuration $r1;
        android.os.IBinder $r2;
        java.lang.Throwable $r3;
        long $l0;
        java.util.HashMap $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.content.res.Configuration;

        $r2 := @parameter1: android.os.IBinder;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        $r4 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r4;

     label1:
        $r1 = virtualinvoke $r0.<com.android.server.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration,android.os.IBinder)>($r1, $r2);

        exitmonitor $r4;

     label2:
        if $r1 == null goto label3;

        $r0.<com.android.server.WindowManagerService: boolean mLayoutNeeded> = 1;

        specialinvoke $r0.<com.android.server.WindowManagerService: void performLayoutAndPlaceSurfacesLocked()>();

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return $r1;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor $r4;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    android.content.res.Configuration updateOrientationFromAppTokensLocked(android.content.res.Configuration, android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        android.content.res.Configuration $r1, $r5;
        android.os.IBinder $r2;
        boolean $z0;
        long $l0;
        int $i1, $i2;
        android.view.WindowManagerPolicy $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;
        java.lang.Throwable $r8;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.content.res.Configuration;

        $r2 := @parameter1: android.os.IBinder;

        $z0 = 0;

        $l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label01:
        $i1 = virtualinvoke $r0.<com.android.server.WindowManagerService: int computeForcedAppOrientationLocked()>();

        $i2 = $r0.<com.android.server.WindowManagerService: int mForcedAppOrientation>;

     label02:
        if $i1 == $i2 goto label04;

     label03:
        $z0 = 1;

        $r0.<com.android.server.WindowManagerService: int mForcedAppOrientation> = $i1;

        $r3 = $r0.<com.android.server.WindowManagerService: android.view.WindowManagerPolicy mPolicy>;

        interfaceinvoke $r3.<android.view.WindowManagerPolicy: void setCurrentOrientationLw(int)>($i1);

     label04:
        if $z0 == 0 goto label09;

        $i1 = $r0.<com.android.server.WindowManagerService: int mLastRotationFlags>;

        $i1 = $i1 & -2;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean setRotationUncheckedLocked(int,int)>(-1000, $i1);

     label05:
        if $z0 == 0 goto label09;

     label06:
        if $r2 == null goto label07;

        $r4 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$AppWindowToken findAppWindowToken(android.os.IBinder)>($r2);

        if $r4 == null goto label07;

        virtualinvoke $r0.<com.android.server.WindowManagerService: void startAppFreezingScreenLocked(com.android.server.WindowManagerService$AppWindowToken,int)>($r4, 128);

     label07:
        $r1 = virtualinvoke $r0.<com.android.server.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return $r1;

     label09:
        if $r1 == null goto label12;

     label10:
        $r5 = $r0.<com.android.server.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        virtualinvoke $r5.<android.content.res.Configuration: void setToDefaults()>();

        $r5 = $r0.<com.android.server.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $z0 = virtualinvoke $r0.<com.android.server.WindowManagerService: boolean computeNewConfigurationLocked(android.content.res.Configuration)>($r5);

        if $z0 == 0 goto label12;

        $r5 = $r0.<com.android.server.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $i1 = virtualinvoke $r1.<android.content.res.Configuration: int diff(android.content.res.Configuration)>($r5);

        if $i1 == 0 goto label12;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config changed: ");

        $r1 = $r0.<com.android.server.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WindowManager", $r7);

        $r1 = new android.content.res.Configuration;

        $r5 = $r0.<com.android.server.WindowManagerService: android.content.res.Configuration mTempConfiguration>;

        specialinvoke $r1.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>($r5);

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return $r1;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        return null;

     label13:
        $r8 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>($l0);

        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label05 with label13;
        catch java.lang.Throwable from label06 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
    }

    public void validateAppTokens(java.util.List)
    {
        com.android.server.WindowManagerService $r0;
        java.util.List $r1;
        int $i0, $i1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        com.android.server.WindowManagerService$AppWindowToken $r4;
        boolean $z0;
        android.os.IBinder $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i0 = $i0 - 1;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $i1 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        $i1 = $i1 - 1;

     label1:
        if $i0 < 0 goto label4;

        if $i1 < 0 goto label4;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (com.android.server.WindowManagerService$AppWindowToken) $r3;

        $z0 = $r4.<com.android.server.WindowManagerService$AppWindowToken: boolean removed>;

        if $z0 == 0 goto label2;

        $i1 = $i1 + -1;

        goto label1;

     label2:
        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r5 = $r4.<com.android.server.WindowManagerService$WindowToken: android.os.IBinder token>;

        if $r3 == $r5 goto label3;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tokens out of sync: external is ");

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", internal is ");

        $r5 = $r4.<com.android.server.WindowManagerService$WindowToken: android.os.IBinder token>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

     label3:
        $i0 = $i0 + -1;

        $i1 = $i1 + -1;

        goto label1;

     label4:
        if $i0 < 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("External token not found: ");

        $r3 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

        $i0 = $i0 + -1;

        goto label4;

     label5:
        if $i1 < 0 goto label7;

        $r2 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mAppTokens>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (com.android.server.WindowManagerService$AppWindowToken) $r3;

        $z0 = $r4.<com.android.server.WindowManagerService$AppWindowToken: boolean removed>;

        if $z0 != 0 goto label6;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid internal token: ");

        $r5 = $r4.<com.android.server.WindowManagerService$WindowToken: android.os.IBinder token>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" @ ");

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowManager", $r7);

     label6:
        $i1 = $i1 + -1;

        goto label5;

     label7:
        return;
    }

    boolean viewServerListWindows(java.net.Socket)
    {
        com.android.server.WindowManagerService $r0;
        java.net.Socket $r1;
        int $i0, $i1, $i2;
        java.io.BufferedWriter $r2, $r8;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.util.HashMap $r5;
        java.util.ArrayList $r6;
        java.lang.Object[] $r7;
        java.io.OutputStream $r9;
        java.io.OutputStreamWriter $r10;
        java.lang.Object $r11;
        com.android.server.WindowManagerService$WindowState $r12;
        android.view.WindowManager$LayoutParams $r13;
        java.lang.CharSequence $r14;
        java.lang.Throwable $r15, $r19;
        java.io.IOException $r16, $r18, $r20;
        java.lang.Exception $r17, $r21;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.net.Socket;

        $r3 = "1";

        $r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.secure", "0");

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z0 = 1;

        $r5 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r5;

     label02:
        $r6 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        $r7 = newarray (java.lang.Object)[$i0];

        $r6 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mWindows>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        exitmonitor $r5;

     label03:
        $r8 = null;

     label04:
        $r9 = virtualinvoke $r1.<java.net.Socket: java.io.OutputStream getOutputStream()>();

     label05:
        $r2 = new java.io.BufferedWriter;

     label06:
        $r10 = new java.io.OutputStreamWriter;

        specialinvoke $r10.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r9);

        specialinvoke $r2.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r10, 8192);

     label07:
        $i0 = lengthof $r7;

     label08:
        $i1 = 0;

     label09:
        if $i1 >= $i0 goto label14;

        $r11 = $r7[$i1];

        $r12 = (com.android.server.WindowManagerService$WindowState) $r11;

        $i2 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r12);

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i2);

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r3);

        virtualinvoke $r2.<java.io.BufferedWriter: void write(int)>(32);

        $r13 = $r12.<com.android.server.WindowManagerService$WindowState: android.view.WindowManager$LayoutParams mAttrs>;

        $r14 = virtualinvoke $r13.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke $r2.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r14);

        virtualinvoke $r2.<java.io.BufferedWriter: void write(int)>(10);

     label10:
        $i1 = $i1 + 1;

        goto label09;

     label11:
        $r15 := @caughtexception;

     label12:
        exitmonitor $r5;

     label13:
        throw $r15;

     label14:
        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("DONE.\n");

        virtualinvoke $r2.<java.io.BufferedWriter: void flush()>();

     label15:
        if $r2 == null goto label31;

     label16:
        virtualinvoke $r2.<java.io.BufferedWriter: void close()>();

     label17:
        return $z0;

     label18:
        $r16 := @caughtexception;

        $z0 = 0;

        goto label17;

     label19:
        $r17 := @caughtexception;

     label20:
        $z0 = 0;

        if $r8 == null goto label17;

     label21:
        virtualinvoke $r8.<java.io.BufferedWriter: void close()>();

     label22:
        goto label17;

     label23:
        $r18 := @caughtexception;

        $z0 = 0;

        goto label17;

     label24:
        $r19 := @caughtexception;

     label25:
        if $r8 == null goto label27;

     label26:
        virtualinvoke $r8.<java.io.BufferedWriter: void close()>();

     label27:
        throw $r19;

     label28:
        $r20 := @caughtexception;

        goto label27;

     label29:
        $r19 := @caughtexception;

        $r8 = $r2;

        goto label25;

     label30:
        $r21 := @caughtexception;

        $r8 = $r2;

        goto label20;

     label31:
        goto label17;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Exception from label04 to label05 with label19;
        catch java.lang.Exception from label06 to label07 with label19;
        catch java.lang.Throwable from label04 to label07 with label24;
        catch java.lang.Exception from label07 to label08 with label30;
        catch java.lang.Exception from label09 to label10 with label30;
        catch java.lang.Throwable from label09 to label10 with label29;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Exception from label14 to label15 with label30;
        catch java.lang.Throwable from label14 to label15 with label29;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.io.IOException from label26 to label27 with label28;
    }

    boolean viewServerWindowCommand(java.net.Socket, java.lang.String, java.lang.String)
    {
        com.android.server.WindowManagerService $r0;
        java.net.Socket $r1;
        java.lang.String $r2, $r3, $r4, $r5;
        boolean $z0, $z1;
        android.os.Parcel $r6, $r7, $r9, $r11;
        int $i0, $i1, $i2;
        com.android.server.WindowManagerService$WindowState $r8;
        android.os.ParcelFileDescriptor $r10;
        android.view.IWindow $r12;
        android.os.IBinder $r13;
        java.lang.Exception $r14;
        java.lang.StringBuilder $r15;
        java.lang.Throwable $r16;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $r4 = "1";

        $r5 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("ro.secure", "0");

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z0 = 1;

        $r6 = null;

        $r7 = null;

     label02:
        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(32);

     label03:
        $i1 = $i0;

     label04:
        if $i0 != -1 goto label05;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

     label05:
        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r5 = "ffffffff";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label12;

        $i0 = -1;

     label06:
        $i2 = virtualinvoke $r3.<java.lang.String: int length()>();

     label07:
        if $i1 >= $i2 goto label14;

     label08:
        $i1 = $i1 + 1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1);

     label09:
        $r8 = specialinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState findWindow(int)>($i0);

     label10:
        if $r8 != null goto label16;

        goto label11;

     label11:
        goto label27;

     label12:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, 16);

     label13:
        goto label06;

     label14:
        $r3 = "";

     label15:
        goto label09;

     label16:
        $r9 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        $r6 = $r9;

        virtualinvoke $r9.<android.os.Parcel: void writeInterfaceToken(java.lang.String)>("android.view.IWindow");

        virtualinvoke $r9.<android.os.Parcel: void writeString(java.lang.String)>($r2);

        virtualinvoke $r9.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        virtualinvoke $r9.<android.os.Parcel: void writeInt(int)>(1);

        $r10 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>($r1);

        virtualinvoke $r10.<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>($r9, 0);

        $r11 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        $r7 = $r11;

        $r12 = $r8.<com.android.server.WindowManagerService$WindowState: android.view.IWindow mClient>;

        $r13 = interfaceinvoke $r12.<android.view.IWindow: android.os.IBinder asBinder()>();

        interfaceinvoke $r13.<android.os.IBinder: boolean transact(int,android.os.Parcel,android.os.Parcel,int)>(1, $r9, $r11, 0);

        virtualinvoke $r11.<android.os.Parcel: void readException()>();

     label17:
        if $r9 == null goto label18;

        virtualinvoke $r9.<android.os.Parcel: void recycle()>();

     label18:
        if $r11 == null goto label19;

        virtualinvoke $r11.<android.os.Parcel: void recycle()>();

     label19:
        return $z0;

     label20:
        $r14 := @caughtexception;

     label21:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not send command ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with parameters ");

        $r15 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r2, $r14);

     label22:
        $z0 = 0;

        if $r6 == null goto label23;

        virtualinvoke $r6.<android.os.Parcel: void recycle()>();

     label23:
        if $r7 == null goto label19;

        virtualinvoke $r7.<android.os.Parcel: void recycle()>();

        goto label19;

     label24:
        $r16 := @caughtexception;

        if $r6 == null goto label25;

        virtualinvoke $r6.<android.os.Parcel: void recycle()>();

     label25:
        if $r7 == null goto label26;

        virtualinvoke $r7.<android.os.Parcel: void recycle()>();

     label26:
        throw $r16;

     label27:
        return 0;

        catch java.lang.Exception from label02 to label03 with label20;
        catch java.lang.Exception from label04 to label07 with label20;
        catch java.lang.Exception from label08 to label10 with label20;
        catch java.lang.Throwable from label02 to label03 with label24;
        catch java.lang.Throwable from label04 to label07 with label24;
        catch java.lang.Throwable from label08 to label10 with label24;
        catch java.lang.Exception from label12 to label13 with label20;
        catch java.lang.Exception from label13 to label14 with label20;
        catch java.lang.Exception from label15 to label17 with label20;
        catch java.lang.Throwable from label12 to label13 with label24;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label15 to label17 with label24;
        catch java.lang.Throwable from label21 to label22 with label24;
    }

    public int watchRotation(android.view.IRotationWatcher)
    {
        com.android.server.WindowManagerService $r0;
        android.view.IRotationWatcher $r1;
        com.android.server.WindowManagerService$3 $r2;
        java.util.HashMap $r3;
        android.os.IBinder $r4;
        java.util.ArrayList $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        int i0;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: android.view.IRotationWatcher;

        $r4 = interfaceinvoke $r1.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        $r2 = new com.android.server.WindowManagerService$3;

        specialinvoke $r2.<com.android.server.WindowManagerService$3: void <init>(com.android.server.WindowManagerService,android.os.IBinder)>($r0, $r4);

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        entermonitor $r3;

     label1:
        $r4 = interfaceinvoke $r1.<android.view.IRotationWatcher: android.os.IBinder asBinder()>();

        interfaceinvoke $r4.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r2, 0);

        $r5 = $r0.<com.android.server.WindowManagerService: java.util.ArrayList mRotationWatchers>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

     label2:
        i0 = $r0.<com.android.server.WindowManagerService: int mRotation>;

        exitmonitor $r3;

     label3:
        return i0;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label5:
        throw $r6;

     label6:
        $r7 := @caughtexception;

        goto label2;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    final com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session, android.os.IBinder)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1, $r9;
        android.os.IBinder $r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        com.android.server.WindowManagerService$WindowState $r5;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.os.IBinder;

        $r3 = $r0.<com.android.server.WindowManagerService: java.util.HashMap mWindowMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r5 = (com.android.server.WindowManagerService$WindowState) $r4;

        if $r5 != null goto label1;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested window ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r8, $r6);

        return null;

     label1:
        if $r1 == null goto label2;

        $r9 = $r5.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        if $r9 == $r1 goto label2;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested window ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is in session ");

        $r9 = $r5.<com.android.server.WindowManagerService$WindowState: com.android.server.WindowManagerService$Session mSession>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", not ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowManager", $r8, $r6);

        return null;

     label2:
        return $r5;
    }

    final com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session, android.view.IWindow)
    {
        com.android.server.WindowManagerService $r0;
        com.android.server.WindowManagerService$Session $r1;
        android.view.IWindow $r2;
        android.os.IBinder $r3;
        com.android.server.WindowManagerService$WindowState $r4;

        $r0 := @this: com.android.server.WindowManagerService;

        $r1 := @parameter0: com.android.server.WindowManagerService$Session;

        $r2 := @parameter1: android.view.IWindow;

        $r3 = interfaceinvoke $r2.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r0.<com.android.server.WindowManagerService: com.android.server.WindowManagerService$WindowState windowForClientLocked(com.android.server.WindowManagerService$Session,android.os.IBinder)>($r1, $r3);

        return $r4;
    }
}
