public class org.apache.harmony.awt.gl.font.FontFinder extends java.lang.Object
{
    private static final int BLOCK_SHIFT;
    private static final int BLOCK_SIZE;
    private static final float DEFAULT_FONT_SIZE;
    private static final int INDEX_MASK;
    private static final int NUM_BLOCKS;
    private static final int[][] blocks;
    private static final java.awt.Font[] fonts;

    static void <clinit>()
    {
        java.awt.GraphicsEnvironment $r0;
        java.awt.Font[] $r1;
        int[][] $r2;

        <org.apache.harmony.awt.gl.font.FontFinder: int NUM_BLOCKS> = 256;

        <org.apache.harmony.awt.gl.font.FontFinder: int INDEX_MASK> = 255;

        <org.apache.harmony.awt.gl.font.FontFinder: float DEFAULT_FONT_SIZE> = 12.0F;

        <org.apache.harmony.awt.gl.font.FontFinder: int BLOCK_SIZE> = 256;

        <org.apache.harmony.awt.gl.font.FontFinder: int BLOCK_SHIFT> = 8;

        $r0 = staticinvoke <java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>();

        $r1 = virtualinvoke $r0.<java.awt.GraphicsEnvironment: java.awt.Font[] getAllFonts()>();

        <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font[] fonts> = $r1;

        $r2 = newarray (int[])[256];

        <org.apache.harmony.awt.gl.font.FontFinder: int[][] blocks> = $r2;

        return;
    }

    public void <init>()
    {
        org.apache.harmony.awt.gl.font.FontFinder $r0;

        $r0 := @this: org.apache.harmony.awt.gl.font.FontFinder;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.awt.Font findFontForChar(char)
    {
        char $c0, $c1, $c2;
        int[][] $r0;
        int[] $r1;
        int $i3, $i4;
        java.awt.Font[] $r2;
        java.awt.Font $r3;
        boolean $z0;

        $c0 := @parameter0: char;

        $c1 = $c0 >> 8;

        $c2 = $c0 & 255;

        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: int[][] blocks>;

        $r1 = $r0[$c1];

        if $r1 != null goto label1;

        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: int[][] blocks>;

        $r1 = newarray (int)[256];

        $r0[$c1] = $r1;

     label1:
        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: int[][] blocks>;

        $r1 = $r0[$c1];

        $i3 = $r1[$c2];

        if $i3 != 0 goto label3;

        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: int[][] blocks>;

        $r1 = $r0[$c1];

        $r1[$c2] = 1;

        $i3 = 0;

     label2:
        $r2 = <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font[] fonts>;

        $i4 = lengthof $r2;

        if $i3 >= $i4 goto label3;

        $r2 = <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font[] fonts>;

        $r3 = $r2[$i3];

        $z0 = virtualinvoke $r3.<java.awt.Font: boolean canDisplay(char)>($c0);

        if $z0 == 0 goto label4;

        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: int[][] blocks>;

        $r1 = $r0[$c1];

        $i3 = $i3 + 1;

        $r1[$c2] = $i3;

     label3:
        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: int[][] blocks>;

        $r1 = $r0[$c1];

        $i3 = $r1[$c2];

        $i3 = $i3 - 1;

        $r3 = staticinvoke <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font getDefaultSizeFont(int)>($i3);

        return $r3;

     label4:
        $i3 = $i3 + 1;

        goto label2;
    }

    static void findFonts(char[], int, int, java.util.List, java.util.Map)
    {
        char[] $r0;
        int $i0, $i1, $i3;
        java.util.List $r1;
        java.util.Map $r2;
        java.lang.Integer $r3;
        char $c2;
        java.awt.Font $r4, $r5;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 := @parameter3: java.util.List;

        $r2 := @parameter4: java.util.Map;

        $r5 = null;

        $i3 = $i0;

     label1:
        if $i3 >= $i1 goto label3;

        $c2 = $r0[$i3];

        $r4 = staticinvoke <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font findFontForChar(char)>($c2);

        if $r4 == $r5 goto label2;

        $r5 = $r4;

        $r3 = new java.lang.Integer;

        specialinvoke $r3.<java.lang.Integer: void <init>(int)>($i3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $i3 == $i0 goto label2;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        return;
    }

    static java.awt.Font getDefaultSizeFont(int)
    {
        int $i0, $i1;
        java.awt.Font[] $r0, $r2;
        java.awt.Font $r1;
        float $f0;
        byte $b2;

        $i0 := @parameter0: int;

        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font[] fonts>;

        $r1 = $r0[$i0];

        $i1 = virtualinvoke $r1.<java.awt.Font: int getSize()>();

        $f0 = (float) $i1;

        $b2 = $f0 cmpl 12.0F;

        if $b2 == 0 goto label1;

        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font[] fonts>;

        $r2 = <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font[] fonts>;

        $r1 = $r2[$i0];

        $r1 = virtualinvoke $r1.<java.awt.Font: java.awt.Font deriveFont(float)>(12.0F);

        $r0[$i0] = $r1;

     label1:
        $r0 = <org.apache.harmony.awt.gl.font.FontFinder: java.awt.Font[] fonts>;

        $r1 = $r0[$i0];

        return $r1;
    }
}
