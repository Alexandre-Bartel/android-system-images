public class com.android.internal.policy.impl.LockPatternKeyguardViewProperties extends java.lang.Object implements com.android.internal.policy.impl.KeyguardViewProperties
{
    private final com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private final com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor;

    public void <init>(com.android.internal.widget.LockPatternUtils, com.android.internal.policy.impl.KeyguardUpdateMonitor)
    {
        com.android.internal.policy.impl.LockPatternKeyguardViewProperties $r0;
        com.android.internal.widget.LockPatternUtils $r1;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardViewProperties;

        $r1 := @parameter0: com.android.internal.widget.LockPatternUtils;

        $r2 := @parameter1: com.android.internal.policy.impl.KeyguardUpdateMonitor;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r1;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor> = $r2;

        return;
    }

    private boolean isLockPatternSecure()
    {
        com.android.internal.policy.impl.LockPatternKeyguardViewProperties $r0;
        com.android.internal.widget.LockPatternUtils $r1;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardViewProperties;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z0 = virtualinvoke $r1.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z0 = virtualinvoke $r1.<com.android.internal.widget.LockPatternUtils: boolean savedPatternExists()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isSimPinSecure()
    {
        com.android.internal.policy.impl.LockPatternKeyguardViewProperties $r0;
        com.android.internal.telephony.SimCard$State $r1, $r3;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardViewProperties;

        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r1 = virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PIN_REQUIRED>;

        if $r1 == $r3 goto label1;

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PUK_REQUIRED>;

        if $r1 == $r3 goto label1;

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State ABSENT>;

        if $r1 != $r3 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public com.android.internal.policy.impl.KeyguardViewBase createKeyguardView(android.content.Context, com.android.internal.policy.impl.KeyguardUpdateMonitor, com.android.internal.policy.impl.KeyguardWindowController)
    {
        com.android.internal.policy.impl.LockPatternKeyguardViewProperties $r0;
        android.content.Context $r1;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;
        com.android.internal.policy.impl.KeyguardWindowController $r3;
        com.android.internal.policy.impl.LockPatternKeyguardView $r4;
        com.android.internal.widget.LockPatternUtils $r5;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardViewProperties;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.android.internal.policy.impl.KeyguardUpdateMonitor;

        $r3 := @parameter2: com.android.internal.policy.impl.KeyguardWindowController;

        $r4 = new com.android.internal.policy.impl.LockPatternKeyguardView;

        $r5 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        specialinvoke $r4.<com.android.internal.policy.impl.LockPatternKeyguardView: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardWindowController)>($r1, $r2, $r5, $r3);

        return $r4;
    }

    public boolean isSecure()
    {
        com.android.internal.policy.impl.LockPatternKeyguardViewProperties $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardViewProperties;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: boolean isLockPatternSecure()>();

        if $z0 != 0 goto label1;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardViewProperties: boolean isSimPinSecure()>();

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }
}
