public class android.content.SyncStorageEngine extends java.lang.Object
{
    private static final int ACTIVE;
    private static final java.util.HashMap ACTIVE_PROJECTION_MAP;
    private static final java.lang.String DATABASE_NAME;
    private static final int DATABASE_VERSION;
    private static final int HISTORY;
    private static final int HISTORY_ID;
    private static final java.util.HashMap HISTORY_PROJECTION_MAP;
    private static final int MAX_HISTORY_EVENTS_TO_KEEP;
    static final long MILLIS_IN_4WEEKS;
    private static final int PENDING;
    private static final java.util.HashMap PENDING_PROJECTION_MAP;
    private static final java.lang.String SELECT_INITIAL_FAILURE_TIME_QUERY_STRING;
    private static final int SETTINGS;
    private static final int STATS;
    private static final java.lang.String[] STATS_ACCOUNT_PROJECTION;
    private static final int STATS_ID;
    private static final int STATUS;
    private static final java.util.HashMap STATUS_PROJECTION_MAP;
    private static final java.lang.String TAG;
    private static android.content.SyncStorageEngine sSyncStorageEngine;
    private static final android.content.UriMatcher sURLMatcher;
    private final android.content.Context mContext;
    private final android.database.sqlite.SQLiteOpenHelper mOpenHelper;

    static void <clinit>()
    {
        android.content.UriMatcher $r0;
        java.util.HashMap $r1;
        java.lang.String[] $r2;

        <android.content.SyncStorageEngine: java.lang.String TAG> = "SyncManager";

        <android.content.SyncStorageEngine: int STATUS> = 9;

        <android.content.SyncStorageEngine: int STATS_ID> = 2;

        <android.content.SyncStorageEngine: int STATS> = 1;

        <android.content.SyncStorageEngine: int SETTINGS> = 5;

        <android.content.SyncStorageEngine: java.lang.String SELECT_INITIAL_FAILURE_TIME_QUERY_STRING> = "SELECT min(a) FROM (  SELECT initialFailureTime AS a   FROM status   WHERE stats_id=? AND a IS NOT NULL     UNION   SELECT ? AS a )";

        <android.content.SyncStorageEngine: int PENDING> = 7;

        <android.content.SyncStorageEngine: long MILLIS_IN_4WEEKS> = 2419200000L;

        <android.content.SyncStorageEngine: int MAX_HISTORY_EVENTS_TO_KEEP> = 5000;

        <android.content.SyncStorageEngine: int HISTORY_ID> = 4;

        <android.content.SyncStorageEngine: int HISTORY> = 3;

        <android.content.SyncStorageEngine: int DATABASE_VERSION> = 10;

        <android.content.SyncStorageEngine: java.lang.String DATABASE_NAME> = "syncmanager.db";

        <android.content.SyncStorageEngine: int ACTIVE> = 8;

        $r0 = new android.content.UriMatcher;

        specialinvoke $r0.<android.content.UriMatcher: void <init>(int)>(-1);

        <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher> = $r0;

        <android.content.SyncStorageEngine: android.content.SyncStorageEngine sSyncStorageEngine> = null;

        $r0 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("sync", "stats", 1);

        $r0 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("sync", "stats/#", 2);

        $r0 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("sync", "history", 3);

        $r0 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("sync", "history/#", 4);

        $r0 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("sync", "settings", 5);

        $r0 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("sync", "status", 9);

        $r0 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("sync", "active", 8);

        $r0 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        virtualinvoke $r0.<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>("sync", "pending", 7);

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.content.SyncStorageEngine: java.util.HashMap PENDING_PROJECTION_MAP> = $r1;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("_id", "_id");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("account", "account");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("authority", "authority");

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.content.SyncStorageEngine: java.util.HashMap ACTIVE_PROJECTION_MAP> = $r1;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("_id", "_id");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("account", "account");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("authority", "authority");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("startTime", "startTime");

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.content.SyncStorageEngine: java.util.HashMap HISTORY_PROJECTION_MAP> = $r1;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("_id", "history._id as _id");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("account", "stats.account as account");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("authority", "stats.authority as authority");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("event", "event");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("eventTime", "eventTime");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("elapsedTime", "elapsedTime");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("source", "source");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("upstreamActivity", "upstreamActivity");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("downstreamActivity", "downstreamActivity");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("mesg", "mesg");

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <android.content.SyncStorageEngine: java.util.HashMap STATUS_PROJECTION_MAP> = $r1;

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("_id", "status._id as _id");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("account", "stats.account as account");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("authority", "stats.authority as authority");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("totalElapsedTime", "totalElapsedTime");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("numSyncs", "numSyncs");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("numSourceLocal", "numSourceLocal");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("numSourcePoll", "numSourcePoll");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("numSourceServer", "numSourceServer");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("numSourceUser", "numSourceUser");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("lastSuccessSource", "lastSuccessSource");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("lastSuccessTime", "lastSuccessTime");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("lastFailureSource", "lastFailureSource");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("lastFailureTime", "lastFailureTime");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("lastFailureMesg", "lastFailureMesg");

        virtualinvoke $r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("pending", "pending");

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "account";

        <android.content.SyncStorageEngine: java.lang.String[] STATS_ACCOUNT_PROJECTION> = $r2;

        return;
    }

    private void <init>(android.content.Context)
    {
        android.content.SyncStorageEngine $r0;
        android.content.Context $r1;
        android.content.SyncStorageEngine$DatabaseHelper $r2;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: android.content.Context;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.content.SyncStorageEngine: android.content.Context mContext> = $r1;

        $r2 = new android.content.SyncStorageEngine$DatabaseHelper;

        specialinvoke $r2.<android.content.SyncStorageEngine$DatabaseHelper: void <init>(android.content.SyncStorageEngine,android.content.Context)>($r0, $r1);

        $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper> = $r2;

        <android.content.SyncStorageEngine: android.content.SyncStorageEngine sSyncStorageEngine> = $r0;

        return;
    }

    private static void checkCaller(boolean, int)
    {
        boolean $z0;
        int $i0;
        java.lang.UnsupportedOperationException $r0;

        $z0 := @parameter0: boolean;

        $i0 := @parameter1: int;

        if $z0 == 0 goto label1;

        if $i0 == 5 goto label2;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("only the settings are modifiable via the ContentProvider interface");

        throw $r0;

     label1:
        return;

     label2:
        return;
    }

    private long createStatsRowIfNecessary(java.lang.String, java.lang.String)
    {
        android.content.SyncStorageEngine $r0;
        java.lang.String $r1, $r2, $r10;
        java.lang.String[] $r3, $r4;
        android.content.ContentValues $r5;
        java.lang.StringBuilder $r6;
        android.database.sqlite.SQLiteOpenHelper $r7;
        android.database.sqlite.SQLiteDatabase $r8;
        android.net.Uri $r9;
        android.database.Cursor $r11;
        boolean $z0;
        int $i0;
        long $l1;
        java.lang.Throwable $r12;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r7 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r8 = virtualinvoke $r7.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("account= ?");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and authority= ?");

        $r9 = <android.provider.Sync$Stats: android.net.Uri CONTENT_URI>;

        $r3 = <android.provider.Sync$Stats: java.lang.String[] SYNC_STATS_PROJECTION>;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = $r1;

        $r4[1] = $r2;

        $r11 = virtualinvoke $r0.<android.content.SyncStorageEngine: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r9, $r3, $r10, $r4, null);

     label1:
        $z0 = interfaceinvoke $r11.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label3;

        $i0 = interfaceinvoke $r11.<android.database.Cursor: int getColumnIndexOrThrow(java.lang.String)>("_id");

        $l1 = interfaceinvoke $r11.<android.database.Cursor: long getLong(int)>($i0);

     label2:
        interfaceinvoke $r11.<android.database.Cursor: void close()>();

        return $l1;

     label3:
        $r5 = new android.content.ContentValues;

        specialinvoke $r5.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("account", $r1);

        virtualinvoke $r5.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("authority", $r2);

        $l1 = virtualinvoke $r8.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("stats", null, $r5);

     label4:
        goto label2;

     label5:
        $r12 := @caughtexception;

        interfaceinvoke $r11.<android.database.Cursor: void close()>();

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void createStatusRowIfNecessary(long)
    {
        android.content.SyncStorageEngine $r0;
        long $l0, $l1;
        android.content.ContentValues $r1;
        android.database.sqlite.SQLiteOpenHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        byte $b2;
        boolean $z0;
        java.lang.Long $r6;

        $r0 := @this: android.content.SyncStorageEngine;

        $l0 := @parameter0: long;

        $r2 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT count(*) FROM status WHERE stats_id=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r3, $r5, null);

        $b2 = 0L cmp $l1;

        if $b2 == 0 goto label2;

        $z0 = 1;

     label1:
        if $z0 != 0 goto label3;

        $r1 = new android.content.ContentValues;

        specialinvoke $r1.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("stats_id", $r6);

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("status", null, $r1);

        return;

     label2:
        $z0 = 0;

        goto label1;

     label3:
        return;
    }

    public static android.content.SyncStorageEngine getSingleton()
    {
        android.content.SyncStorageEngine $r0;
        java.lang.IllegalStateException $r1;

        $r0 = <android.content.SyncStorageEngine: android.content.SyncStorageEngine sSyncStorageEngine>;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("not initialized");

        throw $r1;

     label1:
        $r0 = <android.content.SyncStorageEngine: android.content.SyncStorageEngine sSyncStorageEngine>;

        return $r0;
    }

    public static void init(android.content.Context)
    {
        android.content.Context $r0;
        android.content.SyncStorageEngine $r1;
        java.lang.IllegalStateException $r2;

        $r0 := @parameter0: android.content.Context;

        $r1 = <android.content.SyncStorageEngine: android.content.SyncStorageEngine sSyncStorageEngine>;

        if $r1 == null goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already initialized");

        throw $r2;

     label1:
        $r1 = new android.content.SyncStorageEngine;

        specialinvoke $r1.<android.content.SyncStorageEngine: void <init>(android.content.Context)>($r0);

        <android.content.SyncStorageEngine: android.content.SyncStorageEngine sSyncStorageEngine> = $r1;

        return;
    }

    public static android.content.SyncStorageEngine newTestInstance(android.content.Context)
    {
        android.content.Context $r0;
        android.content.SyncStorageEngine $r1;

        $r0 := @parameter0: android.content.Context;

        $r1 = new android.content.SyncStorageEngine;

        specialinvoke $r1.<android.content.SyncStorageEngine: void <init>(android.content.Context)>($r0);

        return $r1;
    }

    private boolean purgeOldHistoryEvents(long)
    {
        android.content.SyncStorageEngine $r0;
        long $l0;
        android.database.sqlite.SQLiteOpenHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        int $i1, $i2;
        boolean $z0;
        java.lang.String[] $r5;

        $r0 := @this: android.content.SyncStorageEngine;

        $l0 := @parameter0: long;

        $r1 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eventTime<");

        $l0 = $l0 - 2419200000L;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("history", $r4, null);

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("SyncManager", 2);

        if $z0 == 0 goto label1;

        if $i1 <= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleted ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" old event(s) from the sync history");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("SyncManager", $r4);

     label1:
        $r5 = newarray (java.lang.String)[1];

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(5000);

        $r5[0] = $r4;

        $i2 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("history", "eventTime < (select min(eventTime) from (select eventTime from history order by eventTime desc limit ?))", $r5);

        $i1 = $i1 + $i2;

        if $i1 <= 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private int updateActiveSync(java.lang.String, java.lang.String, java.lang.Long)
    {
        android.content.SyncStorageEngine $r0;
        java.lang.String $r1, $r2;
        java.lang.Long $r3;
        android.content.ContentValues $r4;
        android.net.Uri $r5;
        android.database.sqlite.SQLiteOpenHelper $r6;
        android.database.sqlite.SQLiteDatabase $r7;
        int $i0;
        android.content.Context $r8;
        android.content.ContentResolver $r9;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.Long;

        $r6 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r7 = virtualinvoke $r6.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("account", $r1);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("authority", $r2);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("startTime", $r3);

        $i0 = virtualinvoke $r7.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("active", $r4, null, null);

        if $i0 <= 0 goto label1;

        $r8 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = <android.provider.Sync$Active: android.net.Uri CONTENT_URI>;

        virtualinvoke $r9.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r5, null);

        return $i0;

     label1:
        return $i0;
    }

    int clearPending()
    {
        android.content.SyncStorageEngine $r0;
        android.database.sqlite.SQLiteOpenHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        int $i0;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        android.net.Uri $r5;
        java.lang.Throwable $r6;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label1:
        $i0 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("pending", null, null);

        if $i0 <= 0 goto label2;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("UPDATE status SET pending=0");

        $r3 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = <android.provider.Sync$Pending: android.net.Uri CONTENT_URI>;

        virtualinvoke $r4.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r5, null);

        $r3 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r5 = <android.provider.Sync$Status: android.net.Uri CONTENT_URI>;

        virtualinvoke $r4.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r5, null);

     label2:
        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

     label3:
        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return $i0;

     label4:
        $r6 := @caughtexception;

        virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public int delete(boolean, android.net.Uri, java.lang.String, java.lang.String[])
    {
        android.content.SyncStorageEngine $r0;
        boolean $z0;
        android.net.Uri $r1;
        java.lang.String $r2;
        java.lang.String[] $r3;
        android.database.sqlite.SQLiteOpenHelper $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        android.content.UriMatcher $r6;
        int $i0;
        java.lang.UnsupportedOperationException $r7;
        java.lang.StringBuilder $r8;
        android.content.Context $r9;
        android.content.ContentResolver $r10;

        $r0 := @this: android.content.SyncStorageEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: android.net.Uri;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String[];

        $r4 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r5 = virtualinvoke $r4.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r6 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        $i0 = virtualinvoke $r6.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        lookupswitch($i0)
        {
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r7 = new java.lang.UnsupportedOperationException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot delete URL: ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r2);

        throw $r7;

     label2:
        $r9 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WRITE_SYNC_SETTINGS", "no permission to write the sync settings");

        $i0 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("settings", $r2, $r3);

        if $i0 <= 0 goto label3;

        $r9 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r10.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r1, null);

        return $i0;

     label3:
        return $i0;
    }

    int deleteFromPending(long)
    {
        android.content.SyncStorageEngine $r0;
        long $l0;
        java.lang.String[] $r1;
        android.database.sqlite.SQLiteOpenHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r7, $r8;
        android.database.Cursor $r6;
        int $i1;
        byte $b2;
        boolean $z0;
        android.content.Context $r9;
        android.content.ContentResolver $r10;
        android.net.Uri $r11;
        java.lang.Throwable $r12, $r13;

        $r0 := @this: android.content.SyncStorageEngine;

        $l0 := @parameter0: long;

        $r2 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label01:
        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "account";

        $r1[1] = "authority";

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("pending", $r1, $r5, null, null, null, null);

     label02:
        $i1 = interfaceinvoke $r6.<android.database.Cursor: int getCount()>();

     label03:
        if $i1 == 1 goto label06;

     label04:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

     label05:
        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return 0;

     label06:
        interfaceinvoke $r6.<android.database.Cursor: boolean moveToNext()>();

        $r5 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(0);

        $r7 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(1);

     label07:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("pending", $r8, null);

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = $r5;

        $r1[1] = $r7;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r3, "SELECT COUNT(*) FROM PENDING WHERE account=? AND authority=?", $r1);

     label08:
        $b2 = 0L cmp $l0;

        if $b2 >= 0 goto label15;

        $z0 = 1;

     label09:
        if $z0 != 0 goto label10;

        $l0 = specialinvoke $r0.<android.content.SyncStorageEngine: long createStatsRowIfNecessary(java.lang.String,java.lang.String)>($r5, $r7);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE status SET pending=0 WHERE stats_id=");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>($r5);

     label10:
        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        $r9 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r11 = <android.provider.Sync$Pending: android.net.Uri CONTENT_URI>;

        virtualinvoke $r10.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r11, null);

        if $z0 != 0 goto label11;

        $r9 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r11 = <android.provider.Sync$Status: android.net.Uri CONTENT_URI>;

        virtualinvoke $r10.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r11, null);

     label11:
        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return 1;

     label12:
        $r12 := @caughtexception;

     label13:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        throw $r12;

     label14:
        $r13 := @caughtexception;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r13;

     label15:
        $z0 = 0;

        goto label09;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label02 to label03 with label12;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label11 with label14;
        catch java.lang.Throwable from label13 to label14 with label14;
    }

    protected void doDatabaseCleanup(java.lang.String[])
    {
        android.content.SyncStorageEngine $r0;
        java.lang.String[] $r1;
        java.util.HashSet $r2;
        int $i0, $i1;
        java.lang.String $r3;
        android.database.sqlite.SQLiteOpenHelper $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        android.database.Cursor $r6;
        boolean $z0;
        java.lang.StringBuilder $r7;
        java.lang.Throwable $r8;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: java.lang.String[];

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $r3 = $r1[$i1];

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        $r4 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r5 = virtualinvoke $r4.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r1 = <android.content.SyncStorageEngine: java.lang.String[] STATS_ACCOUNT_PROJECTION>;

        $r6 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("stats", $r1, null, null, "account", null, null);

     label3:
        $z0 = interfaceinvoke $r6.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label6;

        $r3 = interfaceinvoke $r6.<android.database.Cursor: java.lang.String getString(int)>(0);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 != 0 goto label3;

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = $r3;

        $i0 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("stats", "account=?", $r1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleted ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" records from stats table");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for account ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("SyncManager", $r3);

     label4:
        goto label3;

     label5:
        $r8 := @caughtexception;

        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        throw $r8;

     label6:
        interfaceinvoke $r6.<android.database.Cursor: void close()>();

        return;

        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public long getInitialSyncFailureTime()
    {
        android.content.SyncStorageEngine $r0;
        android.database.sqlite.SQLiteOpenHelper $r1;
        android.database.sqlite.SQLiteDatabase $r2;
        android.database.Cursor $r3;
        boolean $z0;
        java.lang.String $r4;
        long $l0;
        java.lang.Throwable $r5;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r2 = virtualinvoke $r1.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT initialFailureTime, s1.value, s2.value FROM status LEFT JOIN stats ON status.stats_id=stats._id LEFT JOIN settings as s1 ON \'sync_provider_\' || authority=s1.name LEFT JOIN settings as s2 ON s2.name=\'listen_for_tickles\' where initialFailureTime is not null   AND lastFailureMesg!=6  AND lastFailureMesg!=2  AND lastFailureMesg!=1  AND authority!=\'subscribedfeeds\'  ORDER BY initialFailureTime", null);

     label1:
        $z0 = interfaceinvoke $r3.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(1);

        if $r4 == null goto label2;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

     label2:
        $r4 = interfaceinvoke $r3.<android.database.Cursor: java.lang.String getString(int)>(2);

        if $r4 == null goto label3;

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

     label3:
        $l0 = interfaceinvoke $r3.<android.database.Cursor: long getLong(int)>(0);

     label4:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        return $l0;

     label5:
        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        return 0L;

     label6:
        $r5 := @caughtexception;

        interfaceinvoke $r3.<android.database.Cursor: void close()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label4 with label6;
    }

    public android.database.Cursor getPendingSyncsCursor(java.lang.String[])
    {
        android.content.SyncStorageEngine $r0;
        java.lang.String[] $r1;
        android.database.sqlite.SQLiteOpenHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        android.database.Cursor $r4;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: java.lang.String[];

        $r2 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>("pending", $r1, null, null, null, null, null);

        return $r4;
    }

    public java.lang.String getType(android.net.Uri)
    {
        android.content.SyncStorageEngine $r0;
        android.net.Uri $r1;
        int $i0;
        android.content.UriMatcher $r2;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: android.net.Uri;

        $r2 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        $i0 = virtualinvoke $r2.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        lookupswitch($i0)
        {
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unknown URL");

        throw $r3;

     label2:
        return "vnd.android.cursor.dir/sync-settings";
    }

    public android.net.Uri insert(boolean, android.net.Uri, android.content.ContentValues)
    {
        android.content.SyncStorageEngine $r0;
        boolean $z0;
        android.net.Uri $r1;
        android.content.ContentValues $r2;
        android.database.sqlite.SQLiteOpenHelper $r3;
        android.database.sqlite.SQLiteDatabase $r4;
        android.content.UriMatcher $r5;
        int $i0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        android.content.Context $r9;
        long $l1;
        byte $b2;
        android.content.ContentResolver $r10;

        $r0 := @this: android.content.SyncStorageEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: android.net.Uri;

        $r2 := @parameter2: android.content.ContentValues;

        $r3 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r4 = virtualinvoke $r3.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $r5 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        $i0 = virtualinvoke $r5.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        staticinvoke <android.content.SyncStorageEngine: void checkCaller(boolean,int)>($z0, $i0);

        lookupswitch($i0)
        {
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URL ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r6;

     label2:
        $r9 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        virtualinvoke $r9.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.WRITE_SYNC_SETTINGS", "no permission to write the sync settings");

        $l1 = virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)>("settings", null, $r2);

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label3;

        $r9 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        virtualinvoke $r10.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r1, null);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("content://sync/");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("settings");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r1 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r8);

        return $r1;

     label3:
        return null;
    }

    protected android.net.Uri insertIntoPending(android.content.ContentValues)
    {
        android.content.SyncStorageEngine $r0;
        android.content.ContentValues $r1;
        android.database.sqlite.SQLiteOpenHelper $r2;
        android.database.sqlite.SQLiteDatabase $r3;
        long $l0, $l2;
        byte $b1;
        java.lang.String $r4, $r5;
        java.lang.Integer $r6;
        java.lang.StringBuilder $r7;
        int $i3;
        android.content.Context $r8;
        android.content.ContentResolver $r9;
        android.net.Uri $r10;
        java.lang.Throwable $r11;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: android.content.ContentValues;

        $r2 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r3 = virtualinvoke $r2.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

     label1:
        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

        $l0 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("pending", "account", $r1);

     label2:
        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label3;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return null;

     label3:
        $r4 = virtualinvoke $r1.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("account");

        $r5 = virtualinvoke $r1.<android.content.ContentValues: java.lang.String getAsString(java.lang.String)>("authority");

        $l2 = specialinvoke $r0.<android.content.SyncStorageEngine: long createStatsRowIfNecessary(java.lang.String,java.lang.String)>($r4, $r5);

        specialinvoke $r0.<android.content.SyncStorageEngine: void createStatusRowIfNecessary(long)>($l2);

        virtualinvoke $r1.<android.content.ContentValues: void clear()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r1.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("pending", $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stats_id=");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("status", $r1, $r4, null);

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        $r8 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r10 = <android.provider.Sync$Pending: android.net.Uri CONTENT_URI>;

        virtualinvoke $r9.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r10, null);

        if $i3 <= 0 goto label4;

        $r8 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r10 = <android.provider.Sync$Status: android.net.Uri CONTENT_URI>;

        virtualinvoke $r9.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r10, null);

     label4:
        $r10 = <android.provider.Sync$Pending: android.net.Uri CONTENT_URI>;

        $r10 = staticinvoke <android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>($r10, $l0);

     label5:
        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return $r10;

     label6:
        $r11 := @caughtexception;

        virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
    }

    public long insertStartSyncEvent(java.lang.String, java.lang.String, long, int)
    {
        android.content.SyncStorageEngine $r0;
        java.lang.String $r1, $r2;
        long $l0, $l2;
        int $i1;
        android.content.ContentValues $r3;
        android.database.sqlite.SQLiteOpenHelper $r4;
        android.database.sqlite.SQLiteDatabase $r5;
        java.lang.Long $r6;
        java.lang.Integer $r7;
        android.content.Context $r8;
        android.content.ContentResolver $r9;
        android.net.Uri $r10;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $l0 := @parameter2: long;

        $i1 := @parameter3: int;

        $r4 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r5 = virtualinvoke $r4.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        $l2 = specialinvoke $r0.<android.content.SyncStorageEngine: long createStatsRowIfNecessary(java.lang.String,java.lang.String)>($r1, $r2);

        specialinvoke $r0.<android.content.SyncStorageEngine: boolean purgeOldHistoryEvents(long)>($l0);

        $r3 = new android.content.ContentValues;

        specialinvoke $r3.<android.content.ContentValues: void <init>()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("stats_id", $r6);

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("eventTime", $r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("source", $r7);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("event", $r7);

        $l0 = virtualinvoke $r5.<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>("history", null, $r3);

        $r8 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r10 = <android.provider.Sync$History: android.net.Uri CONTENT_URI>;

        virtualinvoke $r9.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r10, null);

        $r8 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r10 = <android.provider.Sync$Status: android.net.Uri CONTENT_URI>;

        virtualinvoke $r9.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r10, null);

        return $l0;
    }

    public android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)
    {
        android.content.SyncStorageEngine $r0;
        android.net.Uri $r1;
        java.lang.String[] $r2, $r4;
        java.lang.String $r3, $r5, $r8;
        android.database.sqlite.SQLiteQueryBuilder $r6;
        android.content.UriMatcher $r7;
        int $i0;
        java.lang.IllegalArgumentException $r9;
        java.lang.StringBuilder $r10;
        android.content.Context $r11;
        android.database.sqlite.SQLiteOpenHelper $r12;
        android.database.sqlite.SQLiteDatabase $r13;
        android.database.Cursor $r14;
        android.content.ContentResolver $r15;
        java.util.List $r16;
        java.lang.Object $r17;
        java.lang.CharSequence $r18;
        java.util.HashMap $r19;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: android.net.Uri;

        $r2 := @parameter1: java.lang.String[];

        $r3 := @parameter2: java.lang.String;

        $r4 := @parameter3: java.lang.String[];

        $r5 := @parameter4: java.lang.String;

        $r6 = new android.database.sqlite.SQLiteQueryBuilder;

        specialinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void <init>()>();

        $r7 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        $i0 = virtualinvoke $r7.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        $r8 = null;

        lookupswitch($i0)
        {
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label06;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label01;
            case 7: goto label08;
            case 8: goto label07;
            case 9: goto label09;
            default: goto label01;
        };

     label01:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown URL ");

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r9;

     label02:
        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("stats");

     label03:
        if $i0 != 5 goto label12;

        $r11 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_SYNC_SETTINGS", "no permission to read the sync settings");

     label04:
        $r12 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r13 = virtualinvoke $r12.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>();

        $r14 = virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>($r13, $r2, $r3, $r4, $r8, null, $r5);

        $r11 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r15 = virtualinvoke $r11.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        interfaceinvoke $r14.<android.database.Cursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>($r15, $r1);

        return $r14;

     label05:
        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("stats");

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>("_id=");

        $r16 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(1);

        $r18 = (java.lang.CharSequence) $r17;

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>($r18);

        goto label03;

     label06:
        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("stats, history");

        $r19 = <android.content.SyncStorageEngine: java.util.HashMap HISTORY_PROJECTION_MAP>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>($r19);

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>("stats._id = history.stats_id");

        goto label03;

     label07:
        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("active");

        $r19 = <android.content.SyncStorageEngine: java.util.HashMap ACTIVE_PROJECTION_MAP>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>($r19);

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>("account is not null");

        goto label03;

     label08:
        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("pending");

        $r19 = <android.content.SyncStorageEngine: java.util.HashMap PENDING_PROJECTION_MAP>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>($r19);

        $r8 = "account, authority";

        goto label03;

     label09:
        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("stats, status");

        $r19 = <android.content.SyncStorageEngine: java.util.HashMap STATUS_PROJECTION_MAP>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>($r19);

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>("stats._id = status.stats_id");

        goto label03;

     label10:
        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("stats, history");

        $r19 = <android.content.SyncStorageEngine: java.util.HashMap HISTORY_PROJECTION_MAP>;

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>($r19);

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>("stats._id = history.stats_id");

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>("AND history._id=");

        $r16 = virtualinvoke $r1.<android.net.Uri: java.util.List getPathSegments()>();

        $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(1);

        $r18 = (java.lang.CharSequence) $r17;

        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>($r18);

        goto label03;

     label11:
        virtualinvoke $r6.<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>("settings");

        goto label03;

     label12:
        $r11 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        virtualinvoke $r11.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_SYNC_STATS", "no permission to read the sync stats");

        goto label04;
    }

    protected void setActiveSync(android.content.SyncManager$ActiveSyncContext)
    {
        android.content.SyncStorageEngine $r0;
        android.content.SyncManager$ActiveSyncContext $r1;
        java.lang.Long $r2;
        android.content.SyncManager$SyncOperation $r3;
        java.lang.String $r4, $r5;
        long $l0;

        $r0 := @this: android.content.SyncStorageEngine;

        $r1 := @parameter0: android.content.SyncManager$ActiveSyncContext;

        if $r1 == null goto label1;

        $r3 = $r1.<android.content.SyncManager$ActiveSyncContext: android.content.SyncManager$SyncOperation mSyncOperation>;

        $r4 = $r3.<android.content.SyncManager$SyncOperation: java.lang.String account>;

        $r3 = $r1.<android.content.SyncManager$ActiveSyncContext: android.content.SyncManager$SyncOperation mSyncOperation>;

        $r5 = $r3.<android.content.SyncManager$SyncOperation: java.lang.String authority>;

        $l0 = $r1.<android.content.SyncManager$ActiveSyncContext: long mStartTime>;

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        specialinvoke $r0.<android.content.SyncStorageEngine: int updateActiveSync(java.lang.String,java.lang.String,java.lang.Long)>($r4, $r5, $r2);

        return;

     label1:
        specialinvoke $r0.<android.content.SyncStorageEngine: int updateActiveSync(java.lang.String,java.lang.String,java.lang.Long)>(null, null, null);

        return;
    }

    public void stopSyncEvent(long, long, java.lang.String, long, long)
    {
        android.content.SyncStorageEngine $r0;
        long $l0, $l1, $l2, $l3;
        java.lang.String $r1, $r10, $r12;
        java.util.ArrayList $r2;
        java.lang.StringBuilder $r3, $r11;
        android.content.ContentValues $r4;
        android.database.sqlite.SQLiteOpenHelper $r5;
        android.database.sqlite.SQLiteDatabase $r6;
        java.lang.Long $r7;
        java.lang.Integer $r8;
        java.lang.String[] $r9;
        int $i4;
        boolean $z0;
        java.lang.Object[] $r13;
        android.content.Context $r14;
        android.content.ContentResolver $r15;
        android.net.Uri $r16;
        java.lang.Throwable $r17;

        $r0 := @this: android.content.SyncStorageEngine;

        $l0 := @parameter0: long;

        $l1 := @parameter1: long;

        $r1 := @parameter2: java.lang.String;

        $l2 := @parameter3: long;

        $l3 := @parameter4: long;

        $r5 = $r0.<android.content.SyncStorageEngine: android.database.sqlite.SQLiteOpenHelper mOpenHelper>;

        $r6 = virtualinvoke $r5.<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>();

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();

     label01:
        $r4 = new android.content.ContentValues;

        specialinvoke $r4.<android.content.ContentValues: void <init>()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("elapsedTime", $r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("event", $r8);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("mesg", $r1);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("downstreamActivity", $r7);

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        virtualinvoke $r4.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("upstreamActivity", $r7);

        $r9 = newarray (java.lang.String)[1];

        $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        $r9[0] = $r10;

        $i4 = virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>("history", $r4, "_id=?", $r9);

        if $i4 <= 0 goto label06;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT source FROM history WHERE _id=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $l2 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r6, $r10, null);

        $i4 = (int) $l2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT eventTime FROM history WHERE _id=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $l2 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r6, $r10, null);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT stats_id FROM history WHERE _id=");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r6, $r10, null);

        specialinvoke $r0.<android.content.SyncStorageEngine: void createStatusRowIfNecessary(long)>($l0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE status SET");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" numSyncs=numSyncs+1");

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", totalElapsedTime=totalElapsedTime+");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r10 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        lookupswitch($i4)
        {
            case 0: goto label12;
            case 1: goto label07;
            case 2: goto label10;
            case 3: goto label11;
            default: goto label02;
        };

     label02:
        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

     label03:
        $l0 = $l2 + $l1;

     label04:
        $r12 = "success";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label13;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastSuccessTime=");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastSuccessSource=");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastFailureTime=null");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastFailureSource=null");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastFailureMesg=null");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", initialFailureTime=null");

     label05:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" WHERE stats_id=?");

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object[] toArray()>();

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])>($r1, $r13);

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();

        $r14 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r16 = <android.provider.Sync$History: android.net.Uri CONTENT_URI>;

        virtualinvoke $r15.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r16, null);

        $r14 = $r0.<android.content.SyncStorageEngine: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r16 = <android.provider.Sync$Status: android.net.Uri CONTENT_URI>;

        virtualinvoke $r15.<android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)>($r16, null);

     label06:
        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        return;

     label07:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numSourceLocal=numSourceLocal+1");

     label08:
        goto label02;

     label09:
        $r17 := @caughtexception;

        virtualinvoke $r6.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();

        throw $r17;

     label10:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numSourcePoll=numSourcePoll+1");

        goto label02;

     label11:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numSourceUser=numSourceUser+1");

        goto label02;

     label12:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numSourceServer=numSourceServer+1");

        goto label02;

     label13:
        $r12 = "canceled";

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label05;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastFailureTime=");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastFailureSource=");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lastFailureMesg=?");

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r1);

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = $r10;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $r9[1] = $r1;

        $l0 = staticinvoke <android.database.DatabaseUtils: long longForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])>($r6, "SELECT min(a) FROM (  SELECT initialFailureTime AS a   FROM status   WHERE stats_id=? AND a IS NOT NULL     UNION   SELECT ? AS a )", $r9);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", initialFailureTime=");

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r1 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

     label14:
        goto label05;

        catch java.lang.Throwable from label01 to label03 with label09;
        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label14 with label09;
    }

    public int update(boolean, android.net.Uri, android.content.ContentValues, java.lang.String, java.lang.String[])
    {
        android.content.SyncStorageEngine $r0;
        boolean $z0;
        android.net.Uri $r1;
        android.content.ContentValues $r2;
        java.lang.String $r3;
        java.lang.String[] $r4;
        android.content.UriMatcher $r5;
        int $i0;
        java.lang.UnsupportedOperationException $r6;
        java.lang.StringBuilder $r7;

        $r0 := @this: android.content.SyncStorageEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: android.net.Uri;

        $r2 := @parameter2: android.content.ContentValues;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String[];

        $r5 = <android.content.SyncStorageEngine: android.content.UriMatcher sURLMatcher>;

        $i0 = virtualinvoke $r5.<android.content.UriMatcher: int match(android.net.Uri)>($r1);

        lookupswitch($i0)
        {
            case 5: goto label2;
            default: goto label1;
        };

     label1:
        $r6 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot update URL: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);

        throw $r6;

     label2:
        $r6 = new java.lang.UnsupportedOperationException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updating url ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed, use insert instead");

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r3);

        throw $r6;
    }
}
