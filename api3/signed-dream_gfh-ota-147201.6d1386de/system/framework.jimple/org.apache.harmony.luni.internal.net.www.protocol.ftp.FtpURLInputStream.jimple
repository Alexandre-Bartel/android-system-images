class org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream extends java.io.InputStream
{
    private java.net.Socket controlSocket;
    private java.io.InputStream is;

    public void <init>(java.io.InputStream, java.net.Socket)
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        java.io.InputStream $r1;
        java.net.Socket $r2;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

        $r1 := @parameter0: java.io.InputStream;

        $r2 := @parameter1: java.net.Socket;

        specialinvoke $r0.<java.io.InputStream: void <init>()>();

        $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is> = $r1;

        $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.net.Socket controlSocket> = $r2;

        return;
    }

    public int available() throws java.io.IOException
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        int $i0;
        java.io.InputStream $r1;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

        $r1 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        return $i0;
    }

    public void close()
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        java.io.InputStream $r1;
        java.net.Socket $r2;
        java.lang.Exception $r3, $r4;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

     label1:
        $r1 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is>;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

     label2:
        $r2 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.net.Socket controlSocket>;

        virtualinvoke $r2.<java.net.Socket: void close()>();

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        return;

     label5:
        $r4 := @caughtexception;

        goto label2;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void mark(int)
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        int $i0;
        java.io.InputStream $r1;
        java.lang.Throwable $r2;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

        $i0 := @parameter0: int;

        entermonitor $r0;

     label1:
        $r1 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is>;

        virtualinvoke $r1.<java.io.InputStream: void mark(int)>($i0);

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean markSupported()
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        boolean $z0;
        java.io.InputStream $r1;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

        $r1 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is>;

        $z0 = virtualinvoke $r1.<java.io.InputStream: boolean markSupported()>();

        return $z0;
    }

    public int read() throws java.io.IOException
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        int $i0;
        java.io.InputStream $r1;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

        $r1 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int read()>();

        return $i0;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        byte[] $r1;
        int $i0, $i1;
        java.io.InputStream $r2;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is>;

        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[],int,int)>($r1, $i0, $i1);

        return $i0;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        java.io.InputStream $r1;
        java.lang.Throwable $r2;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

        entermonitor $r0;

     label1:
        $r1 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is>;

        virtualinvoke $r1.<java.io.InputStream: void reset()>();

     label2:
        exitmonitor $r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public long skip(long) throws java.io.IOException
    {
        org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream $r0;
        long $l0;
        java.io.InputStream $r1;

        $r0 := @this: org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream;

        $l0 := @parameter0: long;

        $r1 = $r0.<org.apache.harmony.luni.internal.net.www.protocol.ftp.FtpURLInputStream: java.io.InputStream is>;

        $l0 = virtualinvoke $r1.<java.io.InputStream: long skip(long)>($l0);

        return $l0;
    }
}
