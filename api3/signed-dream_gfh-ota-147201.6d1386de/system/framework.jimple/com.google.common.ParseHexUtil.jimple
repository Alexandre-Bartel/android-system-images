public final class com.google.common.ParseHexUtil extends java.lang.Object
{
    public static final int FIRST_BIT_OF_HEX;
    public static final int HEX_RADIX;
    public static final int INT_MIN;
    public static final long LONG_MASK_LOW_32_BITS;
    public static final long LONG_MIN;
    public static final int MASKING;
    public static final int MAX_INT_HEX_LEN;
    public static final int MAX_LONG_HEX_LEN;

    private void <init>()
    {
        com.google.common.ParseHexUtil $r0;

        $r0 := @this: com.google.common.ParseHexUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean isFirstBitSet(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 != $i0 goto label1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $r0 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c2);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

        if $i0 <= 7 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static java.lang.String maskFirstBit(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String $r0, $r1;
        char $c0;
        int $i1;
        java.lang.StringBuilder $r2;

        $r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r1, 16);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $i1 = $i1 - 8;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>(1);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static int parseHexInt(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String $r0;
        boolean $z0;
        int $i0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.google.common.ParseHexUtil: boolean isFirstBitSet(java.lang.String,int)>($r0, 8);

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <com.google.common.ParseHexUtil: java.lang.String maskFirstBit(java.lang.String)>($r0);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

        $i0 = $i0 + -2147483648;

        return $i0;

     label1:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r0, 16);

        return $i0;
    }

    public static long parseHexLong(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String $r0;
        boolean $z0;
        long $l0;

        $r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <com.google.common.ParseHexUtil: boolean isFirstBitSet(java.lang.String,int)>($r0, 16);

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <com.google.common.ParseHexUtil: java.lang.String maskFirstBit(java.lang.String)>($r0);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r0, 16);

        $l0 = $l0 + -9223372036854775808L;

        return $l0;

     label1:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r0, 16);

        return $l0;
    }

    public static java.lang.String toString(long)
    {
        long $l0, $l1;
        java.lang.String $r0, $r1;
        byte $b2;
        java.lang.StringBuilder $r2;
        int $i3, $i4;
        java.lang.StringBuffer $r3;

        $l0 := @parameter0: long;

        $l1 = $l0 >> 32;

        $l1 = $l1 & 4294967295L;

        $r0 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>($l1, 16);

        $l0 = $l0 & 4294967295L;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long,int)>($l0, 16);

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r0, 16);

        $b2 = $l0 cmp 0L;

        if $b2 != 0 goto label2;

        $r0 = "";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;

     label2:
        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i3 >= 8 goto label5;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>(8);

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = 8 - $i3;

        $i4 = 0;

     label3:
        if $i4 >= $i3 goto label4;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0");

        $i4 = $i4 + 1;

        goto label3;

     label4:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label1;

     label5:
        goto label1;
    }

    public static void <clinit>()
    {
        <com.google.common.ParseHexUtil: int MAX_LONG_HEX_LEN> = 16;

        <com.google.common.ParseHexUtil: int MAX_INT_HEX_LEN> = 8;

        <com.google.common.ParseHexUtil: int MASKING> = 7;

        <com.google.common.ParseHexUtil: long LONG_MIN> = -9223372036854775808L;

        <com.google.common.ParseHexUtil: long LONG_MASK_LOW_32_BITS> = 4294967295L;

        <com.google.common.ParseHexUtil: int INT_MIN> = -2147483648;

        <com.google.common.ParseHexUtil: int HEX_RADIX> = 16;

        <com.google.common.ParseHexUtil: int FIRST_BIT_OF_HEX> = 8;

        return;
    }
}
