public class org.apache.harmony.awt.gl.font.AndroidFontManager extends org.apache.harmony.awt.gl.font.FontManager
{
    public static final java.lang.String[] LINUX_SLANT_NAMES;
    public static final java.lang.String[] LINUX_WEIGHT_NAMES;
    public static final org.apache.harmony.awt.gl.font.AndroidFontManager inst;
    java.lang.String[] faces;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        org.apache.harmony.awt.gl.font.AndroidFontManager $r1;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "black";

        $r0[1] = "bold";

        $r0[2] = "demibold";

        $r0[3] = "medium";

        $r0[4] = "light";

        <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LINUX_WEIGHT_NAMES> = $r0;

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "i";

        $r0[1] = "o";

        $r0[2] = "r";

        <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LINUX_SLANT_NAMES> = $r0;

        $r1 = new org.apache.harmony.awt.gl.font.AndroidFontManager;

        specialinvoke $r1.<org.apache.harmony.awt.gl.font.AndroidFontManager: void <init>()>();

        <org.apache.harmony.awt.gl.font.AndroidFontManager: org.apache.harmony.awt.gl.font.AndroidFontManager inst> = $r1;

        return;
    }

    private void <init>()
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.lang.String[] $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        specialinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: void <init>()>();

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "NORMAL";

        $r1[1] = "BOLD";

        $r1[2] = "ITALIC";

        $r1[3] = "BOLDITALIC";

        $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] faces> = $r1;

        virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: boolean initFontProperties()>();

        return;
    }

    private int getBoldStyle(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.lang.String $r1, $r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.String[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r2 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LINUX_WEIGHT_NAMES>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label4;

        $r2 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LINUX_WEIGHT_NAMES>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        if $i0 >= 3 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return 0;
    }

    private int getItalicStyle(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.lang.String $r1, $r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.String[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r2 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LINUX_SLANT_NAMES>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label4;

        $r2 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LINUX_SLANT_NAMES>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        if $i0 >= 2 goto label2;

        return 2;

     label2:
        return 0;

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        return 0;
    }

    public static java.lang.String[] parseXLFD(java.lang.String)
    {
        java.lang.String[] $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        int $i0, $i1;

        $r1 := @parameter0: java.lang.String;

        $r0 = newarray (java.lang.String)[14];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        $i0 = 0;

     label2:
        $i1 = 14 - 1;

        if $i0 >= $i1 goto label4;

        $i1 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("-");

        if $i1 == -1 goto label3;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r0[$i0] = $r2;

        $i1 = $i1 + 1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $i0 = $i0 + 1;

        goto label2;

     label3:
        return null;

     label4:
        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("-");

        if $i0 == -1 goto label5;

        return null;

     label5:
        $i0 = 14 - 1;

        $r0[$i0] = $r1;

        return $r0;
    }

    public java.awt.peer.FontPeer createDefaultFont(int, int)
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        int $i0, $i1;
        java.lang.String $r1;
        org.apache.harmony.awt.gl.font.AndroidFont $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("DEFAULT FONT", $r1);

        $r2 = new org.apache.harmony.awt.gl.font.AndroidFont;

        specialinvoke $r2.<org.apache.harmony.awt.gl.font.AndroidFont: void <init>(java.lang.String,int,int)>("Default", $i0, $i1);

        return $r2;
    }

    public java.awt.peer.FontPeer createPhysicalFontPeer(java.lang.String, int, int)
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.lang.String $r1;
        int $i0, $i1, $i2;
        org.apache.harmony.awt.gl.font.AndroidFont $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: int getFamilyIndex(java.lang.String)>($r1);

        if $i2 == -1 goto label1;

        $r2 = new org.apache.harmony.awt.gl.font.AndroidFont;

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String getFamily(int)>($i2);

        specialinvoke $r2.<org.apache.harmony.awt.gl.font.AndroidFont: void <init>(java.lang.String,int,int)>($r1, $i0, $i1);

        $r1 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String getFamily(int)>($i2);

        virtualinvoke $r2.<org.apache.harmony.awt.gl.font.FontPeerImpl: void setFamily(java.lang.String)>($r1);

        return $r2;

     label1:
        $i2 = virtualinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: int getFaceIndex(java.lang.String)>($r1);

        if $i2 == -1 goto label2;

        $r2 = new org.apache.harmony.awt.gl.font.AndroidFont;

        specialinvoke $r2.<org.apache.harmony.awt.gl.font.AndroidFont: void <init>(java.lang.String,int,int)>($r1, $i0, $i1);

        return $r2;

     label2:
        return null;
    }

    public java.lang.String[] getAllFamilies()
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.lang.String[] $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r1 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] allFamilies>;

        if $r1 != null goto label1;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "sans-serif";

        $r1[1] = "serif";

        $r1[2] = "monospace";

        $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] allFamilies> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.lang.String[] allFamilies>;

        return $r1;
    }

    public java.awt.Font[] getAllFonts()
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.awt.Font[] $r1;
        java.lang.String[] $r2;
        int $i0, $i1;
        java.awt.Font $r3;
        java.lang.String $r4;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] faces>;

        $i0 = lengthof $r2;

        $r1 = newarray (java.awt.Font)[$i0];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r3 = new java.awt.Font;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] faces>;

        $r4 = $r2[$i0];

        specialinvoke $r3.<java.awt.Font: void <init>(java.lang.String,int,int)>($r4, 0, 1);

        $r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public int getFaceIndex(java.lang.String)
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.lang.String $r1, $r3;
        boolean $z0;
        int $i0, $i1;
        java.lang.String[] $r2;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r1 := @parameter0: java.lang.String;

        $i0 = 0;

     label1:
        $r2 = $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] faces>;

        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label3;

        $r2 = $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] faces>;

        $r3 = $r2[$i0];

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return $i0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return -1;
    }

    public java.io.File getTempFontFile() throws java.io.IOException
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.io.File $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r1 = new java.io.File;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.home");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/.fonts");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r3);

        $r1 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("jFont", ".ttf", $r1);

        virtualinvoke $r1.<java.io.File: void deleteOnExit()>();

        return $r1;
    }

    public boolean initFontProperties()
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        org.apache.harmony.awt.gl.font.AndroidFontProperty $r1;
        java.lang.String $r2, $r3, $r4, $r6, $r10, $r11, $r13;
        java.util.Vector $r5;
        java.io.File $r7;
        java.util.Properties $r8;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String[] $r9;
        boolean $z0;
        java.lang.RuntimeException $r12;
        int[] $r14;
        java.util.Hashtable $r15;
        java.lang.StringBuilder $r16;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r7 = staticinvoke <org.apache.harmony.awt.gl.font.AndroidFontManager: java.io.File getFontPropertyFile()>();

        if $r7 != null goto label01;

        return 0;

     label01:
        $r8 = staticinvoke <org.apache.harmony.awt.gl.font.AndroidFontManager: java.util.Properties getProperties(java.io.File)>($r7);

        if $r8 != null goto label02;

        return 0;

     label02:
        $i0 = 0;

     label03:
        $r9 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LOGICAL_FONT_NAMES>;

        $i1 = lengthof $r9;

        if $i0 >= $i1 goto label11;

        $r9 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LOGICAL_FONT_NAMES>;

        $r2 = $r9[$i0];

        $i1 = 0;

     label04:
        $r9 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] STYLE_NAMES>;

        $i2 = lengthof $r9;

        if $i1 >= $i2 goto label10;

        $r9 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] STYLE_NAMES>;

        $r3 = $r9[$i1];

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

        $i2 = 0;

        $z0 = 1;

     label05:
        if $z0 == 0 goto label09;

        $r9 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] FONT_MAPPING_KEYS>;

        $r10 = $r9[0];

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("LogicalFontName", $r2);

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("StyleName", $r3);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("ComponentIndex", $r11);

        $r11 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r10);

        $r10 = $r11;

        if $i1 != 0 goto label06;

        if $r11 != null goto label06;

        $r9 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] FONT_MAPPING_KEYS>;

        $r10 = $r9[1];

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("LogicalFontName", $r2);

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        $r10 = virtualinvoke $r10.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("ComponentIndex", $r11);

        $r10 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r10);

     label06:
        if $r10 == null goto label08;

        $r9 = staticinvoke <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] parseXLFD(java.lang.String)>($r10);

        if $r9 != null goto label07;

        $r12 = new java.lang.RuntimeException;

        $r2 = staticinvoke <org.apache.harmony.awt.internal.nls.Messages: java.lang.String getString(java.lang.String,java.lang.Object)>("awt.08", $r10);

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r2);

        throw $r12;

     label07:
        $r11 = $r9[1];

        $r6 = $r9[2];

        $r4 = $r9[3];

        $i3 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: int getBoldStyle(java.lang.String)>($r6);

        $i4 = specialinvoke $r0.<org.apache.harmony.awt.gl.font.AndroidFontManager: int getItalicStyle(java.lang.String)>($r4);

        $i3 = $i4 | $i3;

        $r4 = "fontcharset.LogicalFontName.ComponentIndex";

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("LogicalFontName", $r2);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("ComponentIndex", $r6);

        $r4 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r4);

        $r6 = "exclusion.LogicalFontName.ComponentIndex";

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("LogicalFontName", $r2);

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2);

        $r6 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("ComponentIndex", $r13);

        $r6 = virtualinvoke $r8.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r6);

        $r14 = staticinvoke <org.apache.harmony.awt.gl.font.AndroidFontManager: int[] parseIntervals(java.lang.String)>($r6);

        $r1 = new org.apache.harmony.awt.gl.font.AndroidFontProperty;

        specialinvoke $r1.<org.apache.harmony.awt.gl.font.AndroidFontProperty: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int[],java.lang.String)>($r2, $r3, null, $r11, $r10, $i3, $r14, $r4);

        virtualinvoke $r5.<java.util.Vector: boolean add(java.lang.Object)>($r1);

        $i2 = $i2 + 1;

        goto label05;

     label08:
        $z0 = 0;

        goto label05;

     label09:
        $r15 = $r0.<org.apache.harmony.awt.gl.font.FontManager: java.util.Hashtable fProperties>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r9 = <org.apache.harmony.awt.gl.font.AndroidFontManager: java.lang.String[] LOGICAL_FONT_NAMES>;

        $r3 = $r9[$i0];

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r16 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r5);

        $i1 = $i1 + 1;

        goto label04;

     label10:
        $i0 = $i0 + 1;

        goto label03;

     label11:
        return 1;
    }

    public void initLCIDTable()
    {
        org.apache.harmony.awt.gl.font.AndroidFontManager $r0;
        java.lang.RuntimeException $r1;

        $r0 := @this: org.apache.harmony.awt.gl.font.AndroidFontManager;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not implemented!");

        throw $r1;
    }
}
