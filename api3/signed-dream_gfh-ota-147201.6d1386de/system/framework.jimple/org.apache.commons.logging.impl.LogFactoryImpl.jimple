public class org.apache.commons.logging.impl.LogFactoryImpl extends org.apache.commons.logging.LogFactory
{
    public static final java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY;
    public static final java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY;
    public static final java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY;
    private static final java.lang.String LOGGING_IMPL_JDK14_LOGGER;
    private static final java.lang.String LOGGING_IMPL_LOG4J_LOGGER;
    private static final java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER;
    private static final java.lang.String LOGGING_IMPL_SIMPLE_LOGGER;
    public static final java.lang.String LOG_PROPERTY;
    protected static final java.lang.String LOG_PROPERTY_OLD;
    private static final java.lang.String PKG_IMPL;
    private static final int PKG_LEN;
    private static final java.lang.String[] classesToDiscover;
    private boolean allowFlawedContext;
    private boolean allowFlawedDiscovery;
    private boolean allowFlawedHierarchy;
    protected java.util.Hashtable attributes;
    private java.lang.String diagnosticPrefix;
    protected java.util.Hashtable instances;
    private java.lang.String logClassName;
    protected java.lang.reflect.Constructor logConstructor;
    protected java.lang.Class[] logConstructorSignature;
    protected java.lang.reflect.Method logMethod;
    protected java.lang.Class[] logMethodSignature;
    private boolean useTCCL;

    static void <clinit>()
    {
        int $i0;
        java.lang.String $r0;
        java.lang.String[] $r1;

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String PKG_IMPL> = "org.apache.commons.logging.impl.";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOG_PROPERTY_OLD> = "org.apache.commons.logging.log";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOG_PROPERTY> = "org.apache.commons.logging.Log";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_SIMPLE_LOGGER> = "org.apache.commons.logging.impl.SimpleLog";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_LUMBERJACK_LOGGER> = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_LOG4J_LOGGER> = "org.apache.commons.logging.impl.Log4JLogger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String LOGGING_IMPL_JDK14_LOGGER> = "org.apache.commons.logging.impl.Jdk14Logger";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_HIERARCHY_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedHierarchy";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_DISCOVERY_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedDiscovery";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String ALLOW_FLAWED_CONTEXT_PROPERTY> = "org.apache.commons.logging.Log.allowFlawedContext";

        $r0 = "org.apache.commons.logging.impl.";

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN> = $i0;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "org.apache.commons.logging.impl.Log4JLogger";

        $r1[1] = "org.apache.commons.logging.impl.Jdk14Logger";

        $r1[2] = "org.apache.commons.logging.impl.Jdk13LumberjackLogger";

        $r1[3] = "org.apache.commons.logging.impl.SimpleLog";

        <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover> = $r1;

        return;
    }

    public void <init>()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        boolean $z0;
        java.util.Hashtable $r1;
        java.lang.Class[] $r2;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        specialinvoke $r0.<org.apache.commons.logging.LogFactory: void <init>()>();

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL> = 1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes> = $r1;

        $r1 = new java.util.Hashtable;

        specialinvoke $r1.<java.util.Hashtable: void <init>()>();

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances> = $r1;

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor> = null;

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "java/lang/String";

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logConstructorSignature> = $r2;

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = null;

        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "org/apache/commons/logging/LogFactory";

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logMethodSignature> = $r2;

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initDiagnostics()>();

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Instance created.");

        return;

     label1:
        return;
    }

    private org.apache.commons.logging.Log createLogFromClass(java.lang.String, java.lang.String, boolean) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1, $r2, $r6;
        boolean $z0, $z1;
        java.lang.ClassNotFoundException $r3, $r4;
        java.lang.StringBuilder $r5;
        java.lang.Object[] $r7;
        org.apache.commons.logging.Log $r8;
        java.lang.reflect.Constructor $r9, $r15;
        java.lang.Class $r10, $r13;
        java.lang.ClassLoader $r11;
        java.net.URL $r12;
        java.lang.Class[] $r14;
        java.lang.Object $r16;
        java.lang.reflect.Method $r17;
        java.lang.NoClassDefFoundError $r18;
        java.lang.ExceptionInInitializerError $r19;
        org.apache.commons.logging.LogConfigurationException $r20;
        java.lang.Throwable $r21, $r22;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 := @parameter2: boolean;

        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label01;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to instantiate \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r6);

     label01:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r2;

        $r8 = null;

        $r9 = null;

        $r10 = null;

        $r11 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getBaseClassLoader()>();

     label02:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to load \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r11);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

     label03:
        $z1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z1 == 0 goto label06;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        if $r11 == null goto label13;

        $r12 = virtualinvoke $r11.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($r2);

     label04:
        if $r12 != null goto label16;

     label05:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' [");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] cannot be found.");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

     label06:
        $r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 1, $r11);

     label07:
        $r14 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logConstructorSignature>;

     label08:
        $r15 = virtualinvoke $r13.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r14);

        $r9 = $r15;

        $r16 = virtualinvoke $r15.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

     label09:
        $z1 = $r16 instanceof org.apache.commons.logging.Log;

        if $z1 == 0 goto label29;

        $r10 = $r13;

        $r8 = (org.apache.commons.logging.Log) $r16;

     label10:
        if $r8 == null goto label34;

        if $z0 == 0 goto label35;

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName> = $r1;

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor> = $r9;

     label11:
        $r14 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Class[] logMethodSignature>;

        $r17 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setLogFactory", $r14);

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = $r17;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found method setLogFactory(LogFactory) in \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

     label12:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Log adapter \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r11);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has been selected for use.");

        $r1 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r1);

        return $r8;

     label13:
        $r5 = new java.lang.StringBuilder;

     label14:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <java.lang.ClassLoader: java.net.URL getSystemResource(java.lang.String)>($r6);

     label15:
        goto label04;

     label16:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was found at \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

     label17:
        goto label06;

     label18:
        $r18 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is missing dependencies when loaded via classloader ");

        $r6 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r11);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

        goto label10;

     label19:
        $r3 := @caughtexception;

     label20:
        $r5 = new java.lang.StringBuilder;

     label21:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not available via classloader ");

        $r6 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r11);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

     label22:
        $r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1);

     label23:
        goto label07;

     label24:
        $r4 := @caughtexception;

     label25:
        $r5 = new java.lang.StringBuilder;

     label26:
        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not available via the LogFactoryImpl class classloader: ");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

     label27:
        goto label10;

     label28:
        $r19 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r2 = virtualinvoke $r19.<java.lang.Throwable: java.lang.String getMessage()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The log adapter \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is unable to initialize itself when loaded via classloader ");

        $r6 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r11);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

        goto label10;

     label29:
        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedHierarchy(java.lang.ClassLoader,java.lang.Class)>($r11, $r13);

     label30:
        if $r11 == null goto label10;

        $r11 = virtualinvoke $r11.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label02;

     label31:
        $r20 := @caughtexception;

        throw $r20;

     label32:
        $r21 := @caughtexception;

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void handleFlawedDiscovery(java.lang.String,java.lang.ClassLoader,java.lang.Throwable)>($r1, $r11, $r21);

        goto label30;

     label33:
        $r22 := @caughtexception;

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod> = null;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[INFO] \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' from classloader ");

        $r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r11);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not declare optional method ");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setLogFactory(LogFactory)");

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

        goto label12;

     label34:
        return $r8;

     label35:
        return $r8;

        catch java.lang.NoClassDefFoundError from label03 to label04 with label18;
        catch java.lang.NoClassDefFoundError from label04 to label06 with label18;
        catch java.lang.ExceptionInInitializerError from label03 to label04 with label28;
        catch java.lang.ExceptionInInitializerError from label04 to label06 with label28;
        catch org.apache.commons.logging.LogConfigurationException from label03 to label04 with label31;
        catch org.apache.commons.logging.LogConfigurationException from label05 to label06 with label31;
        catch java.lang.Throwable from label03 to label04 with label32;
        catch java.lang.Throwable from label04 to label06 with label32;
        catch java.lang.ClassNotFoundException from label06 to label07 with label19;
        catch java.lang.NoClassDefFoundError from label06 to label07 with label18;
        catch java.lang.ExceptionInInitializerError from label06 to label07 with label28;
        catch org.apache.commons.logging.LogConfigurationException from label06 to label07 with label31;
        catch java.lang.Throwable from label06 to label07 with label32;
        catch java.lang.NoClassDefFoundError from label07 to label10 with label18;
        catch java.lang.ExceptionInInitializerError from label08 to label09 with label28;
        catch org.apache.commons.logging.LogConfigurationException from label08 to label09 with label31;
        catch java.lang.Throwable from label07 to label10 with label32;
        catch java.lang.Throwable from label11 to label12 with label33;
        catch java.lang.NoClassDefFoundError from label13 to label15 with label18;
        catch java.lang.NoClassDefFoundError from label16 to label17 with label18;
        catch java.lang.ExceptionInInitializerError from label13 to label15 with label28;
        catch java.lang.ExceptionInInitializerError from label16 to label17 with label28;
        catch org.apache.commons.logging.LogConfigurationException from label14 to label15 with label31;
        catch org.apache.commons.logging.LogConfigurationException from label16 to label17 with label31;
        catch java.lang.Throwable from label13 to label15 with label32;
        catch java.lang.Throwable from label16 to label17 with label32;
        catch java.lang.NoClassDefFoundError from label20 to label22 with label18;
        catch java.lang.ExceptionInInitializerError from label20 to label22 with label28;
        catch org.apache.commons.logging.LogConfigurationException from label21 to label22 with label31;
        catch java.lang.Throwable from label20 to label22 with label32;
        catch java.lang.ClassNotFoundException from label22 to label23 with label24;
        catch java.lang.NoClassDefFoundError from label22 to label23 with label18;
        catch java.lang.ExceptionInInitializerError from label22 to label23 with label28;
        catch org.apache.commons.logging.LogConfigurationException from label22 to label23 with label31;
        catch java.lang.Throwable from label22 to label23 with label32;
        catch java.lang.NoClassDefFoundError from label25 to label27 with label18;
        catch java.lang.ExceptionInInitializerError from label25 to label27 with label28;
        catch org.apache.commons.logging.LogConfigurationException from label26 to label27 with label31;
        catch java.lang.Throwable from label25 to label27 with label32;
        catch java.lang.NoClassDefFoundError from label29 to label30 with label18;
        catch java.lang.ExceptionInInitializerError from label29 to label30 with label28;
        catch org.apache.commons.logging.LogConfigurationException from label29 to label30 with label31;
        catch java.lang.Throwable from label29 to label30 with label32;
    }

    private org.apache.commons.logging.Log discoverLogImplementation(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1, $r4, $r6;
        java.lang.StringBuffer $r2;
        boolean $z0;
        org.apache.commons.logging.Log $r3;
        java.lang.StringBuilder $r5;
        org.apache.commons.logging.LogConfigurationException $r7;
        int $i0, $i1;
        java.lang.String[] $r8;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Discovering a Log implementation...");

     label1:
        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void initConfiguration()>();

        $r3 = null;

        $r4 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String findUserSpecifiedLogClassName()>();

        if $r4 == null goto label5;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to load user-specified log class \'");

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'...");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r6);

     label2:
        $r3 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>($r4, $r1, 1);

        if $r3 != null goto label4;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("User-specified log class \'");

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' cannot be found or is not useable.");

        if $r4 == null goto label3;

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r2, $r4, "org.apache.commons.logging.impl.Log4JLogger");

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r2, $r4, "org.apache.commons.logging.impl.Jdk14Logger");

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r2, $r4, "org.apache.commons.logging.impl.Jdk13LumberjackLogger");

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void informUponSimilarName(java.lang.StringBuffer,java.lang.String,java.lang.String)>($r2, $r4, "org.apache.commons.logging.impl.SimpleLog");

     label3:
        $r7 = new org.apache.commons.logging.LogConfigurationException;

        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r1);

        throw $r7;

     label4:
        return $r3;

     label5:
        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label6;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("No user-specified Log implementation; performing discovery using the standard supported logging implementations...");

     label6:
        $i0 = 0;

     label7:
        $r8 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover>;

        $i1 = lengthof $r8;

        if $i0 >= $i1 goto label8;

        if $r3 != null goto label8;

        $r8 = <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String[] classesToDiscover>;

        $r4 = $r8[$i0];

        $r3 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>($r4, $r1, 1);

        $i0 = $i0 + 1;

        goto label7;

     label8:
        if $r3 != null goto label9;

        $r7 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r7.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("No suitable Log implementation");

        throw $r7;

     label9:
        return $r3;
    }

    private java.lang.String findUserSpecifiedLogClassName()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        boolean $z0;
        java.lang.Object $r1;
        java.lang.String $r2, $r5;
        java.lang.SecurityException $r3, $r6;
        java.lang.StringBuilder $r4;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.Log\'");

     label01:
        $r1 = virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.Log");

        $r2 = (java.lang.String) $r1;

        if $r2 != null goto label03;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label02;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from attribute \'org.apache.commons.logging.log\'");

     label02:
        $r1 = virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>("org.apache.commons.logging.log");

        $r2 = (java.lang.String) $r1;

     label03:
        if $r2 != null goto label05;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label04;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.Log\'");

     label04:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.Log");

     label05:
        if $r2 != null goto label07;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label06;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Trying to get log class from system property \'org.apache.commons.logging.log\'");

     label06:
        $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.commons.logging.log");

     label07:
        if $r2 == null goto label10;

        $r2 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        return $r2;

     label08:
        $r3 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label05;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.Log\' - ");

        $r5 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r5);

        goto label05;

     label09:
        $r6 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label07;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No access allowed to system property \'org.apache.commons.logging.log\' - ");

        $r5 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r5);

        goto label07;

     label10:
        return $r2;

        catch java.lang.SecurityException from label04 to label05 with label08;
        catch java.lang.SecurityException from label06 to label07 with label09;
    }

    private java.lang.ClassLoader getBaseClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.ClassLoader $r1, $r2;
        boolean $z0;
        org.apache.commons.logging.LogConfigurationException $r3;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/impl/LogFactoryImpl");

        $z0 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL>;

        if $z0 != 0 goto label1;

        return $r1;

     label1:
        $r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getContextClassLoader()>();

        $r1 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader,java.lang.ClassLoader)>($r2, $r1);

        if $r1 != null goto label4;

        $z0 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext>;

        if $z0 == 0 goto label3;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("[WARNING] the context classloader is not part of a parent-child relationship with the classloader that loaded LogFactoryImpl.");

     label2:
        return $r2;

     label3:
        $r3 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r3.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.");

        throw $r3;

     label4:
        if $r1 == $r2 goto label5;

        $z0 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext>;

        if $z0 == 0 goto label6;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label5;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.");

     label5:
        return $r1;

     label6:
        $r3 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r3.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>("Bad classloader hierarchy; LogFactoryImpl was loaded via a classloader that is not related to the current context classloader.");

        throw $r3;
    }

    private boolean getBooleanConfiguration(java.lang.String, boolean)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.Boolean $r2;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r1 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String getConfigurationValue(java.lang.String)>($r1);

        if $r1 != null goto label1;

        return $z0;

     label1:
        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected static java.lang.ClassLoader getClassLoader(java.lang.Class)
    {
        java.lang.Class $r0;
        java.lang.ClassLoader $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r0);

        return $r1;
    }

    private java.lang.String getConfigurationValue(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1, $r3, $r5;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.Object $r4;
        java.lang.SecurityException $r6;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Trying to get configuration for item ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r3);

     label01:
        $r4 = virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.Object getAttribute(java.lang.String)>($r1);

        if $r4 == null goto label03;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label02;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Found LogFactory attribute [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r1);

     label02:
        $r1 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        return $r1;

     label03:
        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label04;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No LogFactory attribute found for ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r3);

     label04:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>($r1);

        if $r3 == null goto label08;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

     label05:
        if $z0 == 0 goto label07;

     label06:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Found system property [");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r5);

     label07:
        return $r3;

     label08:
        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

     label09:
        if $z0 == 0 goto label11;

     label10:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No system property found for property ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r3);

     label11:
        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label12;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] No configuration defined for item ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r1);

     label12:
        return null;

     label13:
        $r6 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label11;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ENV] Security prevented reading system property ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r3);

        goto label11;

        catch java.lang.SecurityException from label04 to label05 with label13;
        catch java.lang.SecurityException from label06 to label07 with label13;
        catch java.lang.SecurityException from label08 to label09 with label13;
        catch java.lang.SecurityException from label10 to label11 with label13;
    }

    protected static java.lang.ClassLoader getContextClassLoader() throws org.apache.commons.logging.LogConfigurationException
    {
        java.lang.ClassLoader $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: java.lang.ClassLoader getContextClassLoader()>();

        return $r0;
    }

    private java.lang.ClassLoader getLowestClassLoader(java.lang.ClassLoader, java.lang.ClassLoader)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.ClassLoader $r1, $r2, $r3;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.ClassLoader;

        $r2 := @parameter1: java.lang.ClassLoader;

        if $r1 != null goto label1;

        return $r2;

     label1:
        if $r2 != null goto label2;

        return $r1;

     label2:
        $r3 = $r1;

     label3:
        if $r3 == null goto label5;

        if $r3 != $r2 goto label4;

        return $r1;

     label4:
        $r3 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label3;

     label5:
        $r3 = $r2;

     label6:
        if $r3 == null goto label8;

        if $r3 != $r1 goto label7;

        return $r2;

     label7:
        $r3 = virtualinvoke $r3.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        goto label6;

     label8:
        return null;
    }

    private void handleFlawedDiscovery(java.lang.String, java.lang.ClassLoader, java.lang.Throwable)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1;
        java.lang.ClassLoader $r2;
        java.lang.Throwable $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.Class $r5;
        org.apache.commons.logging.LogConfigurationException $r6;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.ClassLoader;

        $r3 := @parameter2: java.lang.Throwable;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not instantiate Log \'");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' -- ");

        $r5 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r1 = virtualinvoke $r3.<java.lang.Throwable: java.lang.String getLocalizedMessage()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r1);

     label1:
        $z0 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery>;

        if $z0 != 0 goto label2;

        $r6 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r6.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r3);

        throw $r6;

     label2:
        return;
    }

    private void handleFlawedHierarchy(java.lang.ClassLoader, java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.ClassLoader $r1, $r8;
        java.lang.Class $r2, $r3, $r6;
        boolean $z0, $z1;
        java.lang.String $r4, $r7;
        java.lang.Class[] $r5;
        int $i0, $i1;
        java.lang.StringBuilder $r9;
        java.lang.StringBuffer $r10;
        org.apache.commons.logging.LogConfigurationException $r11;
        java.lang.Throwable $r12;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.ClassLoader;

        $r2 := @parameter1: java.lang.Class;

        $r3 = class "org/apache/commons/logging/Log";

        $z0 = 0;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $i0 = 0;

     label01:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label02;

        $r6 = $r5[$i0];

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label06;

        $z0 = 1;

     label02:
        if $z0 == 0 goto label09;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label04;

     label03:
        $r8 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>(class "org/apache/commons/logging/Log");

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class \'");

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was found in classloader ");

        $r4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". It is bound to a Log interface which is not");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" the one loaded from classloader ");

        $r4 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r4);

     label04:
        $z0 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedHierarchy>;

        if $z0 != 0 goto label08;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context ");

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("due to bad log hierarchy. ");

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'");

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.");

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label05;

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r4);

     label05:
        $r11 = new org.apache.commons.logging.LogConfigurationException;

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r4);

        throw $r11;

     label06:
        $i0 = $i0 + 1;

        goto label01;

     label07:
        $r12 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while trying to output diagnostics about bad class \'");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r4);

        goto label04;

     label08:
        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label12;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: bad log hierarchy. ");

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("You have more than one version of \'");

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' visible.");

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r4);

        return;

     label09:
        $z0 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery>;

        if $z0 != 0 goto label11;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Terminating logging for this context. ");

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Log class \'");

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.");

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label10;

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r4);

     label10:
        $r11 = new org.apache.commons.logging.LogConfigurationException;

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.String)>($r4);

        throw $r11;

     label11:
        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label13;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[WARNING] Log class \'");

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' does not implement the Log interface.");

        $r4 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r4);

        return;

     label12:
        return;

     label13:
        return;

        catch java.lang.Throwable from label03 to label04 with label07;
    }

    private void informUponSimilarName(java.lang.StringBuffer, java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.StringBuffer $r1;
        java.lang.String $r2, $r3;
        int $i0;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.StringBuffer;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.lang.String;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = <org.apache.commons.logging.impl.LogFactoryImpl: int PKG_LEN>;

        $i0 = $i0 + 5;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, 0, $r3, 0, $i0);

        if $z0 == 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Did you mean \'");

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'?");

        return;

     label2:
        return;
    }

    private void initConfiguration()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedContext", 1);

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedContext> = $z0;

        $z0 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedDiscovery", 1);

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedDiscovery> = $z0;

        $z0 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean getBooleanConfiguration(java.lang.String,boolean)>("org.apache.commons.logging.Log.allowFlawedHierarchy", 1);

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean allowFlawedHierarchy> = $z0;

        return;
    }

    private void initDiagnostics()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;
        java.lang.String $r3;
        java.lang.StringBuilder $r4;
        int $i0;
        java.lang.SecurityException $r5;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.ClassLoader getClassLoader(java.lang.Class)>($r1);

        if $r2 != null goto label2;

        $r3 = "BOOTLOADER";

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[LogFactoryImpl@");

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        $r3 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String diagnosticPrefix> = $r3;

        return;

     label2:
        $r3 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String objectId(java.lang.Object)>($r2);

     label3:
        goto label1;

     label4:
        $r5 := @caughtexception;

        $r3 = "UNKNOWN";

        goto label1;

        catch java.lang.SecurityException from label2 to label3 with label4;
    }

    protected static boolean isDiagnosticsEnabled()
    {
        boolean $z0;

        $z0 = staticinvoke <org.apache.commons.logging.LogFactory: boolean isDiagnosticsEnabled()>();

        return $z0;
    }

    private boolean isLogLibraryAvailable(java.lang.String, java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1, $r2, $r4;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.Class $r5;
        org.apache.commons.logging.Log $r6;
        org.apache.commons.logging.LogConfigurationException $r7;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label01;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking for \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r4);

     label01:
        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r6 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log createLogFromClass(java.lang.String,java.lang.String,boolean)>($r2, $r4, 0);

        if $r6 != null goto label05;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

     label02:
        if $z0 == 0 goto label04;

     label03:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not find \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

     label04:
        return 0;

     label05:
        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

     label06:
        if $z0 == 0 goto label08;

     label07:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'.");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r2);

     label08:
        return 1;

     label09:
        $r7 := @caughtexception;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label10;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Logging system \'");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is available but not useable.");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>($r1);

     label10:
        return 0;

        catch org.apache.commons.logging.LogConfigurationException from label01 to label02 with label09;
        catch org.apache.commons.logging.LogConfigurationException from label03 to label04 with label09;
        catch org.apache.commons.logging.LogConfigurationException from label05 to label06 with label09;
        catch org.apache.commons.logging.LogConfigurationException from label07 to label08 with label09;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.util.Hashtable $r3;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $r3 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        $r2 = virtualinvoke $r3.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        return $r2;
    }

    public java.lang.String[] getAttributeNames()
    {
        java.util.Vector $r0;
        java.lang.String[] $r1;
        org.apache.commons.logging.impl.LogFactoryImpl $r2;
        java.util.Hashtable $r3;
        java.util.Enumeration $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.String $r6;
        int $i0, $i1;

        $r2 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $r3 = $r2.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        $r4 = virtualinvoke $r3.<java.util.Hashtable: java.util.Enumeration keys()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        $r6 = (java.lang.String) $r5;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        goto label1;

     label2:
        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        $r1 = newarray (java.lang.String)[$i0];

        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label4;

        $r5 = virtualinvoke $r0.<java.util.Vector: java.lang.Object elementAt(int)>($i0);

        $r6 = (java.lang.String) $r5;

        $r1[$i0] = $r6;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        return $r1;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.Class) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.Class $r1;
        java.lang.String $r2;
        org.apache.commons.logging.Log $r3;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log getInstance(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.commons.logging.Log getInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.apache.commons.logging.Log $r4;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        $r4 = (org.apache.commons.logging.Log) $r3;

        if $r4 != null goto label1;

        $r4 = virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log newInstance(java.lang.String)>($r1);

        $r2 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r4);

        return $r4;

     label1:
        return $r4;
    }

    protected java.lang.String getLogClassName()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1;
        java.lang.Class $r2;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r1);

     label1:
        $r1 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String logClassName>;

        return $r1;
    }

    protected java.lang.reflect.Constructor getLogConstructor() throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.reflect.Constructor $r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r3);

     label1:
        $r1 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        return $r1;
    }

    protected boolean isJdk13LumberjackAvailable()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Jdk13Lumberjack", "org.apache.commons.logging.impl.Jdk13LumberjackLogger");

        return $z0;
    }

    protected boolean isJdk14Available()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Jdk14", "org.apache.commons.logging.impl.Jdk14Logger");

        return $z0;
    }

    protected boolean isLog4JAvailable()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $z0 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean isLogLibraryAvailable(java.lang.String,java.lang.String)>("Log4J", "org.apache.commons.logging.impl.Log4JLogger");

        return $z0;
    }

    protected void logDiagnostic(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.StringBuilder $r3;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: boolean isDiagnosticsEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.String diagnosticPrefix>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.commons.logging.impl.LogFactoryImpl: void logRawDiagnostic(java.lang.String)>($r1);

        return;

     label1:
        return;
    }

    protected org.apache.commons.logging.Log newInstance(java.lang.String) throws org.apache.commons.logging.LogConfigurationException
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1;
        java.lang.reflect.Constructor $r2;
        org.apache.commons.logging.Log $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object[] $r5;
        java.lang.Object $r6;
        org.apache.commons.logging.LogConfigurationException $r7;
        java.lang.reflect.InvocationTargetException $r8;
        java.lang.Throwable $r9;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

     label01:
        $r2 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r2 != null goto label06;

     label02:
        $r3 = specialinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: org.apache.commons.logging.Log discoverLogImplementation(java.lang.String)>($r1);

     label03:
        $r4 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod>;

        if $r4 == null goto label14;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r0;

     label04:
        $r4 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Method logMethod>;

        virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r3, $r5);

     label05:
        return $r3;

     label06:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r1;

     label07:
        $r2 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        $r6 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r5);

     label08:
        $r3 = (org.apache.commons.logging.Log) $r6;

     label09:
        goto label03;

     label10:
        $r7 := @caughtexception;

        throw $r7;

     label11:
        $r8 := @caughtexception;

        $r9 = virtualinvoke $r8.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        if $r9 == null goto label12;

        $r7 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r7.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r9);

        throw $r7;

     label12:
        $r7 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r7.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r8);

        throw $r7;

     label13:
        $r9 := @caughtexception;

        $r7 = new org.apache.commons.logging.LogConfigurationException;

        specialinvoke $r7.<org.apache.commons.logging.LogConfigurationException: void <init>(java.lang.Throwable)>($r9);

        throw $r7;

     label14:
        return $r3;

        catch org.apache.commons.logging.LogConfigurationException from label02 to label03 with label10;
        catch org.apache.commons.logging.LogConfigurationException from label04 to label05 with label10;
        catch org.apache.commons.logging.LogConfigurationException from label07 to label08 with label10;
        catch java.lang.reflect.InvocationTargetException from label02 to label03 with label11;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label11;
        catch java.lang.reflect.InvocationTargetException from label07 to label08 with label11;
        catch java.lang.Throwable from label01 to label05 with label13;
        catch java.lang.Throwable from label06 to label09 with label13;
    }

    public void release()
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.util.Hashtable $r1;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("Releasing all known loggers");

        $r1 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable instances>;

        virtualinvoke $r1.<java.util.Hashtable: void clear()>();

        return;
    }

    public void removeAttribute(java.lang.String)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1;
        java.util.Hashtable $r2;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

        return;
    }

    public void setAttribute(java.lang.String, java.lang.Object)
    {
        org.apache.commons.logging.impl.LogFactoryImpl $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.lang.reflect.Constructor $r3;
        java.util.Hashtable $r4;
        boolean $z0;
        java.lang.Boolean $r5;

        $r0 := @this: org.apache.commons.logging.impl.LogFactoryImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.lang.reflect.Constructor logConstructor>;

        if $r3 == null goto label1;

        virtualinvoke $r0.<org.apache.commons.logging.impl.LogFactoryImpl: void logDiagnostic(java.lang.String)>("setAttribute: call too late; configuration already performed.");

     label1:
        if $r2 != null goto label3;

        $r4 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r1);

     label2:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("use_tccl");

        if $z0 == 0 goto label4;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r1);

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r0.<org.apache.commons.logging.impl.LogFactoryImpl: boolean useTCCL> = $z0;

        return;

     label3:
        $r4 = $r0.<org.apache.commons.logging.impl.LogFactoryImpl: java.util.Hashtable attributes>;

        virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        goto label2;

     label4:
        return;
    }
}
