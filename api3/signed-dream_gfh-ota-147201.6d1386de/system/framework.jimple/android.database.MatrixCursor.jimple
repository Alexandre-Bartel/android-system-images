public class android.database.MatrixCursor extends android.database.AbstractCursor
{
    private final int columnCount;
    private final java.lang.String[] columnNames;
    private java.lang.Object[] data;
    private int rowCount;

    public void <init>(java.lang.String[])
    {
        android.database.MatrixCursor $r0;
        java.lang.String[] $r1;

        $r0 := @this: android.database.MatrixCursor;

        $r1 := @parameter0: java.lang.String[];

        specialinvoke $r0.<android.database.MatrixCursor: void <init>(java.lang.String[],int)>($r1, 16);

        return;
    }

    public void <init>(java.lang.String[], int)
    {
        android.database.MatrixCursor $r0;
        java.lang.String[] $r1;
        int $i0, $i1;
        java.lang.Object[] $r2;

        $r0 := @this: android.database.MatrixCursor;

        $r1 := @parameter0: java.lang.String[];

        $i0 := @parameter1: int;

        specialinvoke $r0.<android.database.AbstractCursor: void <init>()>();

        $r0.<android.database.MatrixCursor: int rowCount> = 0;

        $r0.<android.database.MatrixCursor: java.lang.String[] columnNames> = $r1;

        $i1 = lengthof $r1;

        $r0.<android.database.MatrixCursor: int columnCount> = $i1;

        if $i0 >= 1 goto label1;

        $i0 = 1;

     label1:
        $i1 = $r0.<android.database.MatrixCursor: int columnCount>;

        $i0 = $i1 * $i0;

        $r2 = newarray (java.lang.Object)[$i0];

        $r0.<android.database.MatrixCursor: java.lang.Object[] data> = $r2;

        return;
    }

    static java.lang.Object[] access$000(android.database.MatrixCursor)
    {
        android.database.MatrixCursor $r0;
        java.lang.Object[] r1;

        $r0 := @parameter0: android.database.MatrixCursor;

        r1 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        return r1;
    }

    private void addRow(java.util.ArrayList, int)
    {
        android.database.MatrixCursor $r0;
        java.util.ArrayList $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object[] $r2;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.Object $r6;

        $r0 := @this: android.database.MatrixCursor;

        $r1 := @parameter0: java.util.ArrayList;

        $i0 := @parameter1: int;

        $i1 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $i2 = $r0.<android.database.MatrixCursor: int columnCount>;

        if $i1 == $i2 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("columnNames.length = ");

        $i0 = $r0.<android.database.MatrixCursor: int columnCount>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", columnValues.size() = ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label1:
        $i2 = $r0.<android.database.MatrixCursor: int rowCount>;

        $i2 = $i2 + 1;

        $r0.<android.database.MatrixCursor: int rowCount> = $i2;

        $r2 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i2 = 0;

     label2:
        if $i2 >= $i1 goto label3;

        $i3 = $i0 + $i2;

        $r6 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r2[$i3] = $r6;

        $i2 = $i2 + 1;

        goto label2;

     label3:
        return;
    }

    private void ensureCapacity(int)
    {
        android.database.MatrixCursor $r0;
        int $i0, $i1;
        java.lang.Object[] $r1, $r2;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        $r1 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i1 = lengthof $r1;

        if $i0 <= $i1 goto label2;

        $r1 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $r2 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i1 = lengthof $r2;

        $i1 = $i1 * 2;

        if $i1 >= $i0 goto label1;

        $i1 = $i0;

     label1:
        $r2 = newarray (java.lang.Object)[$i1];

        $r0.<android.database.MatrixCursor: java.lang.Object[] data> = $r2;

        $r2 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i0 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, 0, $i0);

        return;

     label2:
        return;
    }

    private java.lang.Object get(int)
    {
        android.database.MatrixCursor $r0;
        int $i0, $i1, $i2;
        android.database.CursorIndexOutOfBoundsException $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        java.lang.Object[] $r4;
        java.lang.Object $r5;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label1;

        $i1 = $r0.<android.database.MatrixCursor: int columnCount>;

        if $i0 < $i1 goto label2;

     label1:
        $r1 = new android.database.CursorIndexOutOfBoundsException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested column: ");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", # of columns: ");

        $i0 = $r0.<android.database.MatrixCursor: int columnCount>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r1;

     label2:
        $i1 = $r0.<android.database.AbstractCursor: int mPos>;

        if $i1 >= 0 goto label3;

        $r1 = new android.database.CursorIndexOutOfBoundsException;

        specialinvoke $r1.<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>("Before first row.");

        throw $r1;

     label3:
        $i1 = $r0.<android.database.AbstractCursor: int mPos>;

        $i2 = $r0.<android.database.MatrixCursor: int rowCount>;

        if $i1 < $i2 goto label4;

        $r1 = new android.database.CursorIndexOutOfBoundsException;

        specialinvoke $r1.<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>("After last row.");

        throw $r1;

     label4:
        $r4 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i1 = $r0.<android.database.AbstractCursor: int mPos>;

        $i2 = $r0.<android.database.MatrixCursor: int columnCount>;

        $i1 = $i1 * $i2;

        $i0 = $i1 + $i0;

        $r5 = $r4[$i0];

        return $r5;
    }

    public void addRow(java.lang.Iterable)
    {
        android.database.MatrixCursor $r0;
        int $i0, $i1, $i2;
        java.lang.Object[] $r1;
        java.lang.Iterable $r2;
        boolean $z0;
        java.util.ArrayList $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        java.lang.IllegalArgumentException $r6;

        $r0 := @this: android.database.MatrixCursor;

        $r2 := @parameter0: java.lang.Iterable;

        $i1 = $r0.<android.database.MatrixCursor: int rowCount>;

        $i0 = $r0.<android.database.MatrixCursor: int columnCount>;

        $i0 = $i1 * $i0;

        $i1 = $r0.<android.database.MatrixCursor: int columnCount>;

        $i1 = $i0 + $i1;

        specialinvoke $r0.<android.database.MatrixCursor: void ensureCapacity(int)>($i1);

        $z0 = $r2 instanceof java.util.ArrayList;

        if $z0 == 0 goto label1;

        $r3 = (java.util.ArrayList) $r2;

        specialinvoke $r0.<android.database.MatrixCursor: void addRow(java.util.ArrayList,int)>($r3, $i0);

        return;

     label1:
        $i2 = $i0;

        $r1 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $r4 = interfaceinvoke $r2.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $i2 != $i1 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("columnValues.size() > columnNames.length");

        throw $r6;

     label3:
        $r1[$i2] = $r5;

        $i2 = $i2 + 1;

        goto label2;

     label4:
        if $i2 == $i1 goto label5;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("columnValues.size() < columnNames.length");

        throw $r6;

     label5:
        $i1 = $r0.<android.database.MatrixCursor: int rowCount>;

        $i1 = $i1 + 1;

        $r0.<android.database.MatrixCursor: int rowCount> = $i1;

        return;
    }

    public void addRow(java.lang.Object[])
    {
        android.database.MatrixCursor $r0;
        java.lang.Object[] $r1, $r5;
        int $i0, $i1;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @this: android.database.MatrixCursor;

        $r1 := @parameter0: java.lang.Object[];

        $i0 = lengthof $r1;

        $i1 = $r0.<android.database.MatrixCursor: int columnCount>;

        if $i0 == $i1 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("columnNames.length = ");

        $i0 = $r0.<android.database.MatrixCursor: int columnCount>;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", columnValues.length = ");

        $i0 = lengthof $r1;

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label1:
        $i0 = $r0.<android.database.MatrixCursor: int rowCount>;

        $i1 = $i0 + 1;

        $r0.<android.database.MatrixCursor: int rowCount> = $i1;

        $i1 = $r0.<android.database.MatrixCursor: int columnCount>;

        $i0 = $i0 * $i1;

        $i1 = $r0.<android.database.MatrixCursor: int columnCount>;

        $i1 = $i1 + $i0;

        specialinvoke $r0.<android.database.MatrixCursor: void ensureCapacity(int)>($i1);

        $r5 = $r0.<android.database.MatrixCursor: java.lang.Object[] data>;

        $i1 = $r0.<android.database.MatrixCursor: int columnCount>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r5, $i0, $i1);

        return;
    }

    public java.lang.String[] getColumnNames()
    {
        android.database.MatrixCursor $r0;
        java.lang.String[] r1;

        $r0 := @this: android.database.MatrixCursor;

        r1 = $r0.<android.database.MatrixCursor: java.lang.String[] columnNames>;

        return r1;
    }

    public int getCount()
    {
        android.database.MatrixCursor $r0;
        int i0;

        $r0 := @this: android.database.MatrixCursor;

        i0 = $r0.<android.database.MatrixCursor: int rowCount>;

        return i0;
    }

    public double getDouble(int)
    {
        android.database.MatrixCursor $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Double $r3;
        double $d0;
        java.lang.Number $r4;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<android.database.MatrixCursor: java.lang.Object get(int)>($i0);

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r2);

        $d0 = virtualinvoke $r3.<java.lang.Double: double doubleValue()>();

        return $d0;

     label1:
        $r4 = (java.lang.Number) $r1;

        $d0 = virtualinvoke $r4.<java.lang.Number: double doubleValue()>();

        return $d0;
    }

    public float getFloat(int)
    {
        android.database.MatrixCursor $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Float $r3;
        float $f0;
        java.lang.Number $r4;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<android.database.MatrixCursor: java.lang.Object get(int)>($i0);

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r2);

        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        return $f0;

     label1:
        $r4 = (java.lang.Number) $r1;

        $f0 = virtualinvoke $r4.<java.lang.Number: float floatValue()>();

        return $f0;
    }

    public int getInt(int)
    {
        android.database.MatrixCursor $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Integer $r3;
        java.lang.Number $r4;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<android.database.MatrixCursor: java.lang.Object get(int)>($i0);

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r2);

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        $r4 = (java.lang.Number) $r1;

        $i0 = virtualinvoke $r4.<java.lang.Number: int intValue()>();

        return $i0;
    }

    public long getLong(int)
    {
        android.database.MatrixCursor $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Long $r3;
        long $l1;
        java.lang.Number $r4;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<android.database.MatrixCursor: java.lang.Object get(int)>($i0);

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r2);

        $l1 = virtualinvoke $r3.<java.lang.Long: long longValue()>();

        return $l1;

     label1:
        $r4 = (java.lang.Number) $r1;

        $l1 = virtualinvoke $r4.<java.lang.Number: long longValue()>();

        return $l1;
    }

    public short getShort(int)
    {
        android.database.MatrixCursor $r0;
        int $i0;
        java.lang.Object $r1;
        boolean $z0;
        java.lang.String $r2;
        java.lang.Short $r3;
        short $s1;
        java.lang.Number $r4;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<android.database.MatrixCursor: java.lang.Object get(int)>($i0);

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.String) $r1;

        $r3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(java.lang.String)>($r2);

        $s1 = virtualinvoke $r3.<java.lang.Short: short shortValue()>();

        return $s1;

     label1:
        $r4 = (java.lang.Number) $r1;

        $s1 = virtualinvoke $r4.<java.lang.Number: short shortValue()>();

        return $s1;
    }

    public java.lang.String getString(int)
    {
        android.database.MatrixCursor $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.String $r2;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<android.database.MatrixCursor: java.lang.Object get(int)>($i0);

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        return $r2;
    }

    public boolean isNull(int)
    {
        android.database.MatrixCursor $r0;
        int $i0;
        java.lang.Object $r1;

        $r0 := @this: android.database.MatrixCursor;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<android.database.MatrixCursor: java.lang.Object get(int)>($i0);

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public android.database.MatrixCursor$RowBuilder newRow()
    {
        android.database.MatrixCursor $r0;
        int $i0, $i1;
        android.database.MatrixCursor$RowBuilder $r1;

        $r0 := @this: android.database.MatrixCursor;

        $i0 = $r0.<android.database.MatrixCursor: int rowCount>;

        $i0 = $i0 + 1;

        $r0.<android.database.MatrixCursor: int rowCount> = $i0;

        $i1 = $r0.<android.database.MatrixCursor: int rowCount>;

        $i0 = $r0.<android.database.MatrixCursor: int columnCount>;

        $i0 = $i1 * $i0;

        specialinvoke $r0.<android.database.MatrixCursor: void ensureCapacity(int)>($i0);

        $i1 = $r0.<android.database.MatrixCursor: int columnCount>;

        $i1 = $i0 - $i1;

        $r1 = new android.database.MatrixCursor$RowBuilder;

        specialinvoke $r1.<android.database.MatrixCursor$RowBuilder: void <init>(android.database.MatrixCursor,int,int)>($r0, $i1, $i0);

        return $r1;
    }
}
