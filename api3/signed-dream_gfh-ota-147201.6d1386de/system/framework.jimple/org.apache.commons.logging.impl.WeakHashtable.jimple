public final class org.apache.commons.logging.impl.WeakHashtable extends java.util.Hashtable
{
    private static final int MAX_CHANGES_BEFORE_PURGE;
    private static final int PARTIAL_PURGE_COUNT;
    private int changeCount;
    private java.lang.ref.ReferenceQueue queue;

    public void <init>()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.lang.ref.ReferenceQueue $r1;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<java.util.Hashtable: void <init>()>();

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        $r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue> = $r1;

        $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = 0;

        return;
    }

    private void purge()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.lang.ref.ReferenceQueue $r1, $r2;
        java.lang.ref.Reference $r3;
        org.apache.commons.logging.impl.WeakHashtable$WeakKey $r4;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r5;
        java.lang.Throwable $r6;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        $r1 = $r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        $r4 = (org.apache.commons.logging.impl.WeakHashtable$WeakKey) $r3;

        if $r4 == null goto label4;

        $r5 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)>($r4);

        specialinvoke $r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r5);

        goto label1;

     label2:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label3:
        throw $r6;

     label4:
        exitmonitor $r1;

     label5:
        return;

        catch java.lang.Throwable from label1 to label3 with label2;
        catch java.lang.Throwable from label4 to label5 with label2;
    }

    private void purgeOne()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.lang.ref.ReferenceQueue $r1, $r2;
        java.lang.ref.Reference $r3;
        org.apache.commons.logging.impl.WeakHashtable$WeakKey $r4;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r5;
        java.lang.Throwable $r6;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        $r1 = $r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        $r3 = virtualinvoke $r2.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>();

        $r4 = (org.apache.commons.logging.impl.WeakHashtable$WeakKey) $r3;

        if $r4 == null goto label2;

        $r5 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$WeakKey: org.apache.commons.logging.impl.WeakHashtable$Referenced access$400(org.apache.commons.logging.impl.WeakHashtable$WeakKey)>($r4);

        specialinvoke $r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r5);

     label2:
        exitmonitor $r1;

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public boolean containsKey(java.lang.Object)
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.lang.Object $r1;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r2;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.commons.logging.impl.WeakHashtable$Referenced;

        specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>($r1, null);

        $z0 = specialinvoke $r0.<java.util.Hashtable: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    public java.util.Enumeration elements()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.util.Enumeration $r1;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r1 = specialinvoke $r0.<java.util.Hashtable: java.util.Enumeration elements()>();

        return $r1;
    }

    public java.util.Set entrySet()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        org.apache.commons.logging.impl.WeakHashtable$Entry $r1;
        java.util.HashSet $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        boolean $z0;
        java.lang.Object $r5, $r8;
        java.util.Map$Entry $r6;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r7;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r3 = specialinvoke $r0.<java.util.Hashtable: java.util.Set entrySet()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.util.Map$Entry) $r5;

        $r5 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (org.apache.commons.logging.impl.WeakHashtable$Referenced) $r5;

        $r5 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>($r7);

        $r8 = interfaceinvoke $r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r5 == null goto label1;

        $r1 = new org.apache.commons.logging.impl.WeakHashtable$Entry;

        specialinvoke $r1.<org.apache.commons.logging.impl.WeakHashtable$Entry: void <init>(java.lang.Object,java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>($r5, $r8, null);

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return $r2;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.lang.Object $r1;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r2;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        $r1 := @parameter0: java.lang.Object;

        $r2 = new org.apache.commons.logging.impl.WeakHashtable$Referenced;

        specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>($r1, null);

        $r1 = specialinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2);

        return $r1;
    }

    public boolean isEmpty()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        boolean $z0;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $z0 = specialinvoke $r0.<java.util.Hashtable: boolean isEmpty()>();

        return $z0;
    }

    public java.util.Set keySet()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.util.HashSet $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r5;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r2 = specialinvoke $r0.<java.util.Hashtable: java.util.Set keySet()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.apache.commons.logging.impl.WeakHashtable$Referenced) $r4;

        $r4 = staticinvoke <org.apache.commons.logging.impl.WeakHashtable$Referenced: java.lang.Object access$100(org.apache.commons.logging.impl.WeakHashtable$Referenced)>($r5);

        if $r4 == null goto label1;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r1;
    }

    public java.util.Enumeration keys()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        org.apache.commons.logging.impl.WeakHashtable$1 $r1;
        java.util.Enumeration $r2;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r2 = specialinvoke $r0.<java.util.Hashtable: java.util.Enumeration keys()>();

        $r1 = new org.apache.commons.logging.impl.WeakHashtable$1;

        specialinvoke $r1.<org.apache.commons.logging.impl.WeakHashtable$1: void <init>(org.apache.commons.logging.impl.WeakHashtable,java.util.Enumeration)>($r0, $r2);

        return $r1;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.lang.Object $r1, $r2;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r3;
        java.lang.NullPointerException $r4;
        int $i0, $i1;
        java.lang.ref.ReferenceQueue $r5;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        if $r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null keys are not allowed");

        throw $r4;

     label1:
        if $r2 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Null values are not allowed");

        throw $r4;

     label2:
        $i0 = $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount>;

        $i1 = $i0 + 1;

        $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = $i1;

        if $i0 <= 100 goto label4;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = 0;

     label3:
        $r3 = new org.apache.commons.logging.impl.WeakHashtable$Referenced;

        $r5 = $r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.ref.ReferenceQueue queue>;

        specialinvoke $r3.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue,org.apache.commons.logging.impl.WeakHashtable$1)>($r1, $r5, null);

        $r1 = specialinvoke $r0.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2);

        return $r1;

     label4:
        $i0 = $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount>;

        $i0 = $i0 % 10;

        if $i0 != 0 goto label3;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purgeOne()>();

        goto label3;
    }

    public void putAll(java.util.Map)
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.util.Map $r1;
        java.util.Set $r2;
        java.util.Iterator $r3;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.util.Map$Entry $r5;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        $r1 := @parameter0: java.util.Map;

        if $r1 == null goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r4 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r6);

        goto label1;

     label2:
        return;

     label3:
        return;
    }

    protected void rehash()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        specialinvoke $r0.<java.util.Hashtable: void rehash()>();

        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.lang.Object $r1;
        int $i0, $i1;
        org.apache.commons.logging.impl.WeakHashtable$Referenced $r2;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        $r1 := @parameter0: java.lang.Object;

        $i0 = $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount>;

        $i1 = $i0 + 1;

        $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = $i1;

        if $i0 <= 100 goto label2;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount> = 0;

     label1:
        $r2 = new org.apache.commons.logging.impl.WeakHashtable$Referenced;

        specialinvoke $r2.<org.apache.commons.logging.impl.WeakHashtable$Referenced: void <init>(java.lang.Object,org.apache.commons.logging.impl.WeakHashtable$1)>($r1, null);

        $r1 = specialinvoke $r0.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r2);

        return $r1;

     label2:
        $i0 = $r0.<org.apache.commons.logging.impl.WeakHashtable: int changeCount>;

        $i0 = $i0 % 10;

        if $i0 != 0 goto label1;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purgeOne()>();

        goto label1;
    }

    public int size()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        int $i0;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $i0 = specialinvoke $r0.<java.util.Hashtable: int size()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r1 = specialinvoke $r0.<java.util.Hashtable: java.lang.String toString()>();

        return $r1;
    }

    public java.util.Collection values()
    {
        org.apache.commons.logging.impl.WeakHashtable $r0;
        java.util.Collection $r1;

        $r0 := @this: org.apache.commons.logging.impl.WeakHashtable;

        specialinvoke $r0.<org.apache.commons.logging.impl.WeakHashtable: void purge()>();

        $r1 = specialinvoke $r0.<java.util.Hashtable: java.util.Collection values()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <org.apache.commons.logging.impl.WeakHashtable: int PARTIAL_PURGE_COUNT> = 10;

        <org.apache.commons.logging.impl.WeakHashtable: int MAX_CHANGES_BEFORE_PURGE> = 100;

        return;
    }
}
