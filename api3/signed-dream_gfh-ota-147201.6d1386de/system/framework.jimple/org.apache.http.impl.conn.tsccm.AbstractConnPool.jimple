public abstract class org.apache.http.impl.conn.tsccm.AbstractConnPool extends java.lang.Object implements org.apache.http.impl.conn.tsccm.RefQueueHandler
{
    protected org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler;
    protected volatile boolean isShutDown;
    protected java.util.Set issuedConnections;
    private final org.apache.commons.logging.Log log;
    protected int numConnections;
    protected final java.util.concurrent.locks.Lock poolLock;
    protected java.lang.ref.ReferenceQueue refQueue;
    private org.apache.http.impl.conn.tsccm.RefQueueWorker refWorker;

    protected void <init>()
    {
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        java.util.HashSet $r3;
        org.apache.http.impl.conn.IdleConnectionHandler $r4;
        java.util.concurrent.locks.ReentrantLock $r5;

        $r0 := @this: org.apache.http.impl.conn.tsccm.AbstractConnPool;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.commons.logging.Log log> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.Set issuedConnections> = $r3;

        $r4 = new org.apache.http.impl.conn.IdleConnectionHandler;

        specialinvoke $r4.<org.apache.http.impl.conn.IdleConnectionHandler: void <init>()>();

        $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler> = $r4;

        $r5 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(0);

        $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock> = $r5;

        return;
    }

    protected void closeConnection(org.apache.http.conn.OperatedClientConnection)
    {
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r0;
        org.apache.http.conn.OperatedClientConnection $r1;
        java.io.IOException $r2;
        org.apache.commons.logging.Log $r3;

        $r0 := @this: org.apache.http.impl.conn.tsccm.AbstractConnPool;

        $r1 := @parameter0: org.apache.http.conn.OperatedClientConnection;

        if $r1 == null goto label4;

     label1:
        interfaceinvoke $r1.<org.apache.http.conn.OperatedClientConnection: void close()>();

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.commons.logging.Log log>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>("I/O error closing connection", $r2);

        return;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void closeExpiredConnections()
    {
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r0;
        java.util.concurrent.locks.Lock $r1;
        org.apache.http.impl.conn.IdleConnectionHandler $r2;
        java.lang.Throwable $r3;

        $r0 := @this: org.apache.http.impl.conn.tsccm.AbstractConnPool;

        $r1 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $r2 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler>;

        virtualinvoke $r2.<org.apache.http.impl.conn.IdleConnectionHandler: void closeExpiredConnections()>();

     label2:
        $r1 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label3:
        $r3 := @caughtexception;

        $r1 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void closeIdleConnections(long, java.util.concurrent.TimeUnit)
    {
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r0;
        long $l0;
        java.util.concurrent.TimeUnit $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.concurrent.locks.Lock $r3;
        org.apache.http.impl.conn.IdleConnectionHandler $r4;
        java.lang.Throwable $r5;

        $r0 := @this: org.apache.http.impl.conn.tsccm.AbstractConnPool;

        $l0 := @parameter0: long;

        $r1 := @parameter1: java.util.concurrent.TimeUnit;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Time unit must not be null.");

        throw $r2;

     label1:
        $r3 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>();

     label2:
        $r4 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler>;

        $l0 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long toMillis(long)>($l0);

        virtualinvoke $r4.<org.apache.http.impl.conn.IdleConnectionHandler: void closeIdleConnections(long)>($l0);

     label3:
        $r3 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label4:
        $r5 := @caughtexception;

        $r3 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public abstract void deleteClosedConnections();

    public void enableConnectionGC() throws java.lang.IllegalStateException
    {
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r0;
        java.lang.Thread $r1;
        java.lang.ref.ReferenceQueue $r2;
        java.lang.IllegalStateException $r3;
        java.util.concurrent.locks.Lock $r4;
        int $i0;
        java.lang.Throwable $r5;
        org.apache.http.impl.conn.tsccm.RefQueueWorker $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;

        $r0 := @this: org.apache.http.impl.conn.tsccm.AbstractConnPool;

        $r2 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.lang.ref.ReferenceQueue refQueue>;

        if $r2 == null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Connection GC already enabled.");

        throw $r3;

     label1:
        $r4 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>();

     label2:
        $i0 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: int numConnections>;

        if $i0 <= 0 goto label4;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Pool already in use.");

        throw $r3;

     label3:
        $r5 := @caughtexception;

        $r4 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r5;

     label4:
        $r4 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        $r2 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r2.<java.lang.ref.ReferenceQueue: void <init>()>();

        $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.lang.ref.ReferenceQueue refQueue> = $r2;

        $r6 = new org.apache.http.impl.conn.tsccm.RefQueueWorker;

        $r2 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.lang.ref.ReferenceQueue refQueue>;

        specialinvoke $r6.<org.apache.http.impl.conn.tsccm.RefQueueWorker: void <init>(java.lang.ref.ReferenceQueue,org.apache.http.impl.conn.tsccm.RefQueueHandler)>($r2, $r0);

        $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.RefQueueWorker refWorker> = $r6;

        $r1 = new java.lang.Thread;

        $r6 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.RefQueueWorker refWorker>;

        specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6);

        virtualinvoke $r1.<java.lang.Thread: void setDaemon(boolean)>(1);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RefQueueWorker@");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.Thread: void setName(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.Thread: void start()>();

        return;

        catch java.lang.Throwable from label2 to label3 with label3;
    }

    public abstract void freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry, boolean, long, java.util.concurrent.TimeUnit);

    public final org.apache.http.impl.conn.tsccm.BasicPoolEntry getEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object, long, java.util.concurrent.TimeUnit) throws org.apache.http.conn.ConnectionPoolTimeoutException, java.lang.InterruptedException
    {
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r0;
        org.apache.http.conn.routing.HttpRoute $r1;
        java.lang.Object $r2;
        long $l0;
        java.util.concurrent.TimeUnit $r3;
        org.apache.http.impl.conn.tsccm.PoolEntryRequest $r4;
        org.apache.http.impl.conn.tsccm.BasicPoolEntry $r5;

        $r0 := @this: org.apache.http.impl.conn.tsccm.AbstractConnPool;

        $r1 := @parameter0: org.apache.http.conn.routing.HttpRoute;

        $r2 := @parameter1: java.lang.Object;

        $l0 := @parameter2: long;

        $r3 := @parameter3: java.util.concurrent.TimeUnit;

        $r4 = virtualinvoke $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute,java.lang.Object)>($r1, $r2);

        $r5 = interfaceinvoke $r4.<org.apache.http.impl.conn.tsccm.PoolEntryRequest: org.apache.http.impl.conn.tsccm.BasicPoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit)>($l0, $r3);

        return $r5;
    }

    protected abstract void handleLostEntry(org.apache.http.conn.routing.HttpRoute);

    public void handleReference(java.lang.ref.Reference)
    {
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r0;
        java.lang.ref.Reference $r1;
        java.util.concurrent.locks.Lock $r2;
        boolean $z0;
        java.util.Set $r3;
        org.apache.http.impl.conn.tsccm.BasicPoolEntryRef $r4;
        org.apache.http.conn.routing.HttpRoute $r5;
        org.apache.commons.logging.Log $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8;
        java.lang.Throwable $r9;

        $r0 := @this: org.apache.http.impl.conn.tsccm.AbstractConnPool;

        $r1 := @parameter0: java.lang.ref.Reference;

        $r2 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = $r1 instanceof org.apache.http.impl.conn.tsccm.BasicPoolEntryRef;

        if $z0 == 0 goto label3;

        $r3 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.Set issuedConnections>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r4 = (org.apache.http.impl.conn.tsccm.BasicPoolEntryRef) $r1;

        $r5 = virtualinvoke $r4.<org.apache.http.impl.conn.tsccm.BasicPoolEntryRef: org.apache.http.conn.routing.HttpRoute getRoute()>();

        $r6 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label2;

        $r6 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.commons.logging.Log log>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connection garbage collected. ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r8);

     label2:
        virtualinvoke $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void handleLostEntry(org.apache.http.conn.routing.HttpRoute)>($r5);

     label3:
        $r2 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label4:
        $r9 := @caughtexception;

        $r2 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public abstract org.apache.http.impl.conn.tsccm.PoolEntryRequest requestPoolEntry(org.apache.http.conn.routing.HttpRoute, java.lang.Object);

    public void shutdown()
    {
        org.apache.http.impl.conn.tsccm.AbstractConnPool $r0;
        java.util.concurrent.locks.Lock $r1;
        boolean $z0;
        org.apache.http.impl.conn.tsccm.RefQueueWorker $r2;
        java.util.Set $r3;
        java.util.Iterator $r4;
        java.lang.Object $r5;
        org.apache.http.impl.conn.tsccm.BasicPoolEntryRef $r6;
        org.apache.http.impl.conn.tsccm.BasicPoolEntry $r7;
        org.apache.http.conn.OperatedClientConnection $r8;
        java.lang.Throwable $r9;
        org.apache.http.impl.conn.IdleConnectionHandler $r10;

        $r0 := @this: org.apache.http.impl.conn.tsccm.AbstractConnPool;

        $r1 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: boolean isShutDown>;

     label2:
        if $z0 == 0 goto label3;

        $r1 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

     label3:
        $r2 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.RefQueueWorker refWorker>;

        if $r2 == null goto label4;

        $r2 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.tsccm.RefQueueWorker refWorker>;

        virtualinvoke $r2.<org.apache.http.impl.conn.tsccm.RefQueueWorker: void shutdown()>();

     label4:
        $r3 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.Set issuedConnections>;

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.apache.http.impl.conn.tsccm.BasicPoolEntryRef) $r5;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        $r5 = virtualinvoke $r6.<java.lang.ref.Reference: java.lang.Object get()>();

        $r7 = (org.apache.http.impl.conn.tsccm.BasicPoolEntry) $r5;

        if $r7 == null goto label5;

        $r8 = virtualinvoke $r7.<org.apache.http.impl.conn.tsccm.BasicPoolEntry: org.apache.http.conn.OperatedClientConnection getConnection()>();

        virtualinvoke $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: void closeConnection(org.apache.http.conn.OperatedClientConnection)>($r8);

     label6:
        goto label5;

     label7:
        $r9 := @caughtexception;

        $r1 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r9;

     label8:
        $r10 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: org.apache.http.impl.conn.IdleConnectionHandler idleConnHandler>;

        virtualinvoke $r10.<org.apache.http.impl.conn.IdleConnectionHandler: void removeAll()>();

        $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: boolean isShutDown> = 1;

     label9:
        $r1 = $r0.<org.apache.http.impl.conn.tsccm.AbstractConnPool: java.util.concurrent.locks.Lock poolLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void unlock()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }
}
