public class org.bouncycastle.jce.provider.JCEKeyGenerator$DESede extends org.bouncycastle.jce.provider.JCEKeyGenerator
{
    private boolean keySizeSet;

    public void <init>()
    {
        org.bouncycastle.jce.provider.JCEKeyGenerator$DESede $r0;
        org.bouncycastle.crypto.generators.DESedeKeyGenerator $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JCEKeyGenerator$DESede;

        $r1 = new org.bouncycastle.crypto.generators.DESedeKeyGenerator;

        specialinvoke $r1.<org.bouncycastle.crypto.generators.DESedeKeyGenerator: void <init>()>();

        specialinvoke $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: void <init>(java.lang.String,int,org.bouncycastle.crypto.CipherKeyGenerator)>("DESede", 192, $r1);

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator$DESede: boolean keySizeSet> = 0;

        return;
    }

    protected javax.crypto.SecretKey engineGenerateKey()
    {
        org.bouncycastle.jce.provider.JCEKeyGenerator$DESede $r0;
        int $i0;
        boolean $z0;
        org.bouncycastle.crypto.CipherKeyGenerator $r1;
        org.bouncycastle.crypto.KeyGenerationParameters $r2;
        java.security.SecureRandom $r3;
        byte[] $r4;
        javax.crypto.spec.SecretKeySpec $r5;
        java.lang.String $r6;

        $r0 := @this: org.bouncycastle.jce.provider.JCEKeyGenerator$DESede;

        $z0 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: boolean uninitialised>;

        if $z0 == 0 goto label1;

        $r1 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r2 = new org.bouncycastle.crypto.KeyGenerationParameters;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        $i0 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: int defaultKeySize>;

        specialinvoke $r2.<org.bouncycastle.crypto.KeyGenerationParameters: void <init>(java.security.SecureRandom,int)>($r3, $i0);

        virtualinvoke $r1.<org.bouncycastle.crypto.CipherKeyGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r2);

     label1:
        $z0 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator$DESede: boolean keySizeSet>;

        if $z0 != 0 goto label2;

        $r1 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r4 = virtualinvoke $r1.<org.bouncycastle.crypto.CipherKeyGenerator: byte[] generateKey()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r4, 16, 8);

        $r5 = new javax.crypto.spec.SecretKeySpec;

        $r6 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: java.lang.String algName>;

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, $r6);

        return $r5;

     label2:
        $r5 = new javax.crypto.spec.SecretKeySpec;

        $r1 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: org.bouncycastle.crypto.CipherKeyGenerator engine>;

        $r4 = virtualinvoke $r1.<org.bouncycastle.crypto.CipherKeyGenerator: byte[] generateKey()>();

        $r6 = $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: java.lang.String algName>;

        specialinvoke $r5.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r4, $r6);

        return $r5;
    }

    protected void engineInit(int, java.security.SecureRandom)
    {
        org.bouncycastle.jce.provider.JCEKeyGenerator$DESede $r0;
        int $i0;
        java.security.SecureRandom $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JCEKeyGenerator$DESede;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.security.SecureRandom;

        specialinvoke $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator: void engineInit(int,java.security.SecureRandom)>($i0, $r1);

        $r0.<org.bouncycastle.jce.provider.JCEKeyGenerator$DESede: boolean keySizeSet> = 1;

        return;
    }
}
