public class org.apache.harmony.xnet.provider.jsse.SSLEngineImpl extends javax.net.ssl.SSLEngine
{
    private org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol;
    private org.apache.harmony.xnet.provider.jsse.SSLEngineAppData appData;
    private boolean close_notify_was_received;
    private boolean close_notify_was_sent;
    private org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream;
    private boolean engine_was_closed;
    private boolean engine_was_shutteddown;
    private org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol;
    private boolean handshake_started;
    private boolean isInboundDone;
    private boolean isOutboundDone;
    private org.apache.harmony.xnet.provider.jsse.Logger$Stream logger;
    private boolean peer_mode_was_set;
    private org.apache.harmony.xnet.provider.jsse.SSLBufferedInput recProtIS;
    protected org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol;
    private byte[] remaining_hsh_data;
    private byte[] remaining_wrapped_data;
    private org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session;
    protected org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters;

    protected void <init>(java.lang.String, int, org.apache.harmony.xnet.provider.jsse.SSLParameters)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.lang.String $r1;
        int $i0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r3;
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r0.<javax.net.ssl.SSLEngine: void <init>(java.lang.String,int)>($r1, $i0);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean peer_mode_was_set> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isInboundDone> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isOutboundDone> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_sent> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_received> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_shutteddown> = 0;

        $r4 = new org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream;

        specialinvoke $r4.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream> = $r4;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_wrapped_data> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_hsh_data> = null;

        $r3 = staticinvoke <org.apache.harmony.xnet.provider.jsse.Logger: org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(java.lang.String)>("engine");

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger> = $r3;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r2;

        return;
    }

    protected void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r2;
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        specialinvoke $r0.<javax.net.ssl.SSLEngine: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean peer_mode_was_set> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isInboundDone> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isOutboundDone> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_sent> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_received> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed> = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_shutteddown> = 0;

        $r3 = new org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream;

        specialinvoke $r3.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream> = $r3;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_wrapped_data> = null;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_hsh_data> = null;

        $r2 = staticinvoke <org.apache.harmony.xnet.provider.jsse.Logger: org.apache.harmony.xnet.provider.jsse.Logger$Stream getStream(java.lang.String)>("engine");

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger> = $r2;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r1;

        return;
    }

    private javax.net.ssl.SSLEngineResult$Status getEngineStatus()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        javax.net.ssl.SSLEngineResult$Status r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed>;

        if $z0 == 0 goto label1;

        r1 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        return r1;

     label1:
        r1 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status OK>;

        return r1;
    }

    private void shutdown()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r1;
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r2;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_shutteddown> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isOutboundDone> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isInboundDone> = 1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started>;

        if $z0 == 0 goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void shutdown()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol> = null;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

        virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void shutdown()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol> = null;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: void shutdown()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol> = null;

        return;

     label1:
        return;
    }

    public void beginHandshake() throws javax.net.ssl.SSLException
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r1;
        org.apache.harmony.xnet.provider.jsse.SSLBufferedInput $r2;
        org.apache.harmony.xnet.provider.jsse.SSLEngineAppData $r3;
        boolean $z0;
        javax.net.ssl.SSLException $r4;
        java.lang.IllegalStateException $r5;
        org.apache.harmony.xnet.provider.jsse.ClientHandshakeImpl $r6;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r7;
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r8;
        org.apache.harmony.xnet.provider.jsse.ServerHandshakeImpl $r9;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed>;

        if $z0 == 0 goto label1;

        $r4 = new javax.net.ssl.SSLException;

        specialinvoke $r4.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Engine has already been closed.");

        throw $r4;

     label1:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean peer_mode_was_set>;

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Client/Server mode was not set");

        throw $r5;

     label2:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started>;

        if $z0 != 0 goto label4;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started> = 1;

        $z0 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean getUseClientMode()>();

        if $z0 == 0 goto label5;

        $r6 = new org.apache.harmony.xnet.provider.jsse.ClientHandshakeImpl;

        specialinvoke $r6.<org.apache.harmony.xnet.provider.jsse.ClientHandshakeImpl: void <init>(java.lang.Object)>($r0);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol> = $r6;

     label3:
        $r3 = new org.apache.harmony.xnet.provider.jsse.SSLEngineAppData;

        specialinvoke $r3.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineAppData appData> = $r3;

        $r1 = new org.apache.harmony.xnet.provider.jsse.AlertProtocol;

        specialinvoke $r1.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol> = $r1;

        $r2 = new org.apache.harmony.xnet.provider.jsse.SSLBufferedInput;

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLBufferedInput: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLBufferedInput recProtIS> = $r2;

        $r7 = new org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLBufferedInput recProtIS>;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineAppData appData>;

        specialinvoke $r7.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: void <init>(org.apache.harmony.xnet.provider.jsse.HandshakeProtocol,org.apache.harmony.xnet.provider.jsse.AlertProtocol,org.apache.harmony.xnet.provider.jsse.SSLInputStream,org.apache.harmony.xnet.provider.jsse.Appendable)>($r8, $r1, $r2, $r3);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol> = $r7;

     label4:
        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

        virtualinvoke $r8.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void start()>();

        return;

     label5:
        $r9 = new org.apache.harmony.xnet.provider.jsse.ServerHandshakeImpl;

        specialinvoke $r9.<org.apache.harmony.xnet.provider.jsse.ServerHandshakeImpl: void <init>(java.lang.Object)>($r0);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol> = $r9;

        goto label3;
    }

    public void closeInbound() throws javax.net.ssl.SSLException
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r1;
        java.lang.StringBuilder $r2;
        boolean $z0;
        java.lang.String $r3;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r4;
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r5;
        javax.net.ssl.SSLException $r6;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closeInbound() ");

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isInboundDone>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r3);

     label1:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isInboundDone>;

        if $z0 == 0 goto label2;

        return;

     label2:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isInboundDone> = 1;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed> = 1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started>;

        if $z0 == 0 goto label4;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_received>;

        if $z0 != 0 goto label5;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r4 == null goto label3;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void invalidate()>();

     label3:
        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void alert(byte,byte)>(2, 80);

        $r6 = new javax.net.ssl.SSLException;

        specialinvoke $r6.<javax.net.ssl.SSLException: void <init>(java.lang.String)>("Inbound is closed before close_notify alert has been received.");

        throw $r6;

     label4:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void shutdown()>();

        return;

     label5:
        return;
    }

    public void closeOutbound()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r1;
        java.lang.StringBuilder $r2;
        boolean $z0;
        java.lang.String $r3;
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closeOutbound() ");

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isOutboundDone>;

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r3);

     label1:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isOutboundDone>;

        if $z0 == 0 goto label2;

        return;

     label2:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isOutboundDone> = 1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started>;

        if $z0 == 0 goto label4;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r4.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void alert(byte,byte)>(1, 0);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_sent> = 1;

     label3:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed> = 1;

        return;

     label4:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void shutdown()>();

        goto label3;
    }

    public java.lang.Runnable getDelegatedTask()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.lang.Runnable $r1;
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: java.lang.Runnable getTask()>();

        return $r1;
    }

    public boolean getEnableSessionCreation()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getEnableSessionCreation()>();

        return $z0;
    }

    public java.lang.String[] getEnabledCipherSuites()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.lang.String[] $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] getEnabledCipherSuites()>();

        return $r1;
    }

    public java.lang.String[] getEnabledProtocols()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.lang.String[] $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLParameters: java.lang.String[] getEnabledProtocols()>();

        return $r1;
    }

    public javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r1;
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r2;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started>;

        if $z0 == 0 goto label1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_shutteddown>;

        if $z0 == 0 goto label2;

     label1:
        $r3 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        return $r3;

     label2:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: boolean hasAlert()>();

        if $z0 == 0 goto label3;

        $r3 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        return $r3;

     label3:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_sent>;

        if $z0 == 0 goto label4;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_received>;

        if $z0 != 0 goto label4;

        $r3 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        return $r3;

     label4:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

        $r3 = virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()>();

        return $r3;
    }

    public boolean getNeedClientAuth()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getNeedClientAuth()>();

        return $z0;
    }

    public javax.net.ssl.SSLSession getSession()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        return $r1;

     label1:
        $r1 = <org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl NULL_SESSION>;

        return $r1;
    }

    public java.lang.String[] getSupportedCipherSuites()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.lang.String[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 = staticinvoke <org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String[] getSupportedCipherSuiteNames()>();

        return $r1;
    }

    public java.lang.String[] getSupportedProtocols()
    {
        java.lang.String[] $r0;
        java.lang.Object $r1;
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r2;

        $r2 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r0 = <org.apache.harmony.xnet.provider.jsse.ProtocolVersion: java.lang.String[] supportedProtocols>;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>();

        $r0 = (java.lang.String[]) $r1;

        $r0 = (java.lang.String[]) $r0;

        return $r0;
    }

    public boolean getUseClientMode()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getUseClientMode()>();

        return $z0;
    }

    public boolean getWantClientAuth()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $z0 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: boolean getWantClientAuth()>();

        return $z0;
    }

    public boolean isInboundDone()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isInboundDone>;

        if $z0 != 0 goto label1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed>;

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public boolean isOutboundDone()
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean z0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean isOutboundDone>;

        return z0;
    }

    public void setEnableSessionCreation(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setEnableSessionCreation(boolean)>($z0);

        return;
    }

    public void setEnabledCipherSuites(java.lang.String[])
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.lang.String[] $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 := @parameter0: java.lang.String[];

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setEnabledCipherSuites(java.lang.String[])>($r1);

        return;
    }

    public void setEnabledProtocols(java.lang.String[])
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.lang.String[] $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 := @parameter0: java.lang.String[];

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setEnabledProtocols(java.lang.String[])>($r1);

        return;
    }

    public void setNeedClientAuth(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setNeedClientAuth(boolean)>($z0);

        return;
    }

    public void setUseClientMode(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $z0 := @parameter0: boolean;

        $z1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started>;

        if $z1 == 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not change the mode after the initial handshake has begun.");

        throw $r1;

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r2.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setUseClientMode(boolean)>($z0);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean peer_mode_was_set> = 1;

        return;
    }

    public void setWantClientAuth(boolean)
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: void setWantClientAuth(boolean)>($z0);

        return;
    }

    public javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer, java.nio.ByteBuffer[], int, int) throws javax.net.ssl.SSLException
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.nio.ByteBuffer $r1, $r10;
        java.nio.ByteBuffer[] $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;
        javax.net.ssl.SSLEngineResult $r3;
        javax.net.ssl.SSLEngineResult$Status $r4;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r5, $r8;
        java.lang.IllegalStateException $r6;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r7;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r9;
        java.nio.BufferUnderflowException $r11;
        java.nio.ReadOnlyBufferException $r12;
        org.apache.harmony.xnet.provider.jsse.AlertException $r13;
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r14;
        byte $b5;
        javax.net.ssl.SSLException $r15;
        org.apache.harmony.xnet.provider.jsse.SSLBufferedInput $r16;
        org.apache.harmony.xnet.provider.jsse.SSLEngineAppData $r17;
        java.io.IOException $r18;
        java.lang.String $r19;
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r20;
        java.lang.StringBuilder $r21;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r22;
        javax.net.ssl.SSLHandshakeException $r23;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 := @parameter0: java.nio.ByteBuffer;

        $r2 := @parameter1: java.nio.ByteBuffer[];

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_shutteddown>;

        if $z0 == 0 goto label01;

        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r5 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

        return $r3;

     label01:
        if $r1 == null goto label02;

        if $r2 != null goto label03;

     label02:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some of the input parameters are null");

        throw $r6;

     label03:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started>;

        if $z0 != 0 goto label04;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void beginHandshake()>();

     label04:
        $r5 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r7 == null goto label05;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed>;

        if $z0 == 0 goto label07;

     label05:
        $r8 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

        $z0 = virtualinvoke $r5.<java.lang.Enum: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label06;

        $r8 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;

        $z0 = virtualinvoke $r5.<java.lang.Enum: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label07;

     label06:
        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

        return $r3;

     label07:
        $i2 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $i3 = virtualinvoke $r9.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getMinRecordSize()>();

        if $i2 >= $i3 goto label08;

        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_UNDERFLOW>;

        $r5 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

        return $r3;

     label08:
        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer mark()>();

     label09:
        $i2 = 0;

        $i3 = $i0;

     label10:
        $i4 = $i0 + $i1;

        if $i3 >= $i4 goto label24;

        $r10 = $r2[$i3];

        if $r10 != null goto label14;

     label11:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some of the input parameters are null");

     label12:
        throw $r6;

     label13:
        $r11 := @caughtexception;

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer reset()>();

        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_UNDERFLOW>;

        $r5 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

        return $r3;

     label14:
        $r10 = $r2[$i3];

     label15:
        $z0 = virtualinvoke $r10.<java.nio.Buffer: boolean isReadOnly()>();

     label16:
        if $z0 == 0 goto label21;

     label17:
        $r12 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r12.<java.nio.ReadOnlyBufferException: void <init>()>();

     label18:
        throw $r12;

     label19:
        $r13 := @caughtexception;

        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $b5 = virtualinvoke $r13.<org.apache.harmony.xnet.provider.jsse.AlertException: byte getDescriptionCode()>();

        virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void alert(byte,byte)>(2, $b5);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed> = 1;

        virtualinvoke $r1.<java.nio.Buffer: java.nio.Buffer reset()>();

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r7 == null goto label20;

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void invalidate()>();

     label20:
        $r15 = virtualinvoke $r13.<org.apache.harmony.xnet.provider.jsse.AlertException: javax.net.ssl.SSLException getReason()>();

        throw $r15;

     label21:
        $r10 = $r2[$i3];

     label22:
        $i4 = virtualinvoke $r10.<java.nio.Buffer: int remaining()>();

     label23:
        $i2 = $i2 + $i4;

        $i3 = $i3 + 1;

        goto label10;

     label24:
        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $i3 = virtualinvoke $r1.<java.nio.Buffer: int remaining()>();

        $i3 = virtualinvoke $r9.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getDataSize(int)>($i3);

     label25:
        if $i2 >= $i3 goto label29;

        $r3 = new javax.net.ssl.SSLEngineResult;

     label26:
        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        $r5 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

     label27:
        return $r3;

     label28:
        $r15 := @caughtexception;

        throw $r15;

     label29:
        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLBufferedInput recProtIS>;

     label30:
        virtualinvoke $r16.<org.apache.harmony.xnet.provider.jsse.SSLBufferedInput: void setSourceBuffer(java.nio.ByteBuffer)>($r1);

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $i2 = virtualinvoke $r9.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int unwrap()>();

     label31:
        lookupswitch($i2)
        {
            case 20: goto label35;
            case 21: goto label40;
            case 22: goto label35;
            case 23: goto label32;
            default: goto label32;
        };

     label32:
        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        $r5 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLBufferedInput recProtIS>;

        $i2 = virtualinvoke $r16.<org.apache.harmony.xnet.provider.jsse.SSLBufferedInput: int consumed()>();

        $r17 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineAppData appData>;

        $i0 = virtualinvoke $r17.<org.apache.harmony.xnet.provider.jsse.SSLEngineAppData: int placeTo(java.nio.ByteBuffer[],int,int)>($r2, $i0, $i1);

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, $i2, $i0);

     label33:
        return $r3;

     label34:
        $r18 := @caughtexception;

        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void alert(byte,byte)>(2, 80);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed> = 1;

        $r15 = new javax.net.ssl.SSLException;

        $r19 = virtualinvoke $r18.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r15.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r19);

        throw $r15;

     label35:
        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

     label36:
        $r5 = virtualinvoke $r20.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()>();

        $r8 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        $z0 = virtualinvoke $r5.<java.lang.Enum: boolean equals(java.lang.Object)>($r8);

     label37:
        if $z0 == 0 goto label32;

     label38:
        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $r7 = virtualinvoke $r9.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()>();

     label39:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session> = $r7;

        goto label32;

     label40:
        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $z0 = virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: boolean isFatalAlert()>();

     label41:
        if $z0 == 0 goto label47;

     label42:
        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void setProcessed()>();

     label43:
        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r7 == null goto label45;

     label44:
        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        virtualinvoke $r7.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void invalidate()>();

     label45:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fatal alert received ");

        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $r19 = virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: java.lang.String getAlertDescription()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void shutdown()>();

        $r15 = new javax.net.ssl.SSLException;

        specialinvoke $r15.<javax.net.ssl.SSLException: void <init>(java.lang.String)>($r19);

     label46:
        throw $r15;

     label47:
        $r22 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r22 == null goto label49;

        $r22 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

     label48:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning allert has been received: ");

        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $r19 = virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: java.lang.String getAlertDescription()>();

        $r21 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r19 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r22.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r19);

     label49:
        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $b5 = virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte getDescriptionCode()>();

     label50:
        lookupswitch($b5)
        {
            case 0: goto label53;
            case 100: goto label59;
            default: goto label51;
        };

     label51:
        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void setProcessed()>();

     label52:
        goto label32;

     label53:
        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void setProcessed()>();

     label54:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_received> = 1;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_sent>;

     label55:
        if $z0 != 0 goto label57;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void closeOutbound()>();

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void closeInbound()>();

     label56:
        goto label32;

     label57:
        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void closeInbound()>();

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void shutdown()>();

     label58:
        goto label32;

     label59:
        $r14 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r14.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void setProcessed()>();

     label60:
        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r7 != null goto label63;

        $r13 = new org.apache.harmony.xnet.provider.jsse.AlertException;

     label61:
        $r23 = new javax.net.ssl.SSLHandshakeException;

        specialinvoke $r23.<javax.net.ssl.SSLHandshakeException: void <init>(java.lang.String)>("Received no_renegotiation during the initial handshake");

        specialinvoke $r13.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(40, $r23);

     label62:
        throw $r13;

     label63:
        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

        virtualinvoke $r20.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: void stop()>();

     label64:
        goto label32;

        catch java.nio.BufferUnderflowException from label08 to label09 with label13;
        catch java.nio.BufferUnderflowException from label11 to label12 with label13;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label08 to label09 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label11 to label12 with label19;
        catch javax.net.ssl.SSLException from label08 to label09 with label28;
        catch javax.net.ssl.SSLException from label11 to label12 with label28;
        catch java.io.IOException from label08 to label09 with label34;
        catch java.io.IOException from label11 to label12 with label34;
        catch java.nio.BufferUnderflowException from label15 to label16 with label13;
        catch java.nio.BufferUnderflowException from label17 to label18 with label13;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label15 to label16 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label17 to label18 with label19;
        catch javax.net.ssl.SSLException from label15 to label16 with label28;
        catch javax.net.ssl.SSLException from label17 to label18 with label28;
        catch java.io.IOException from label15 to label16 with label34;
        catch java.io.IOException from label17 to label18 with label34;
        catch java.nio.BufferUnderflowException from label22 to label23 with label13;
        catch java.nio.BufferUnderflowException from label24 to label25 with label13;
        catch java.nio.BufferUnderflowException from label26 to label27 with label13;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label22 to label23 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label24 to label25 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label26 to label27 with label19;
        catch javax.net.ssl.SSLException from label22 to label23 with label28;
        catch javax.net.ssl.SSLException from label24 to label25 with label28;
        catch javax.net.ssl.SSLException from label26 to label27 with label28;
        catch java.io.IOException from label22 to label23 with label34;
        catch java.io.IOException from label24 to label25 with label34;
        catch java.io.IOException from label26 to label27 with label34;
        catch java.nio.BufferUnderflowException from label30 to label31 with label13;
        catch java.nio.BufferUnderflowException from label32 to label33 with label13;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label30 to label31 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label32 to label33 with label19;
        catch javax.net.ssl.SSLException from label30 to label31 with label28;
        catch javax.net.ssl.SSLException from label32 to label33 with label28;
        catch java.io.IOException from label30 to label31 with label34;
        catch java.io.IOException from label32 to label33 with label34;
        catch java.nio.BufferUnderflowException from label36 to label37 with label13;
        catch java.nio.BufferUnderflowException from label38 to label39 with label13;
        catch java.nio.BufferUnderflowException from label40 to label41 with label13;
        catch java.nio.BufferUnderflowException from label42 to label43 with label13;
        catch java.nio.BufferUnderflowException from label44 to label46 with label13;
        catch java.nio.BufferUnderflowException from label48 to label50 with label13;
        catch java.nio.BufferUnderflowException from label51 to label52 with label13;
        catch java.nio.BufferUnderflowException from label53 to label54 with label13;
        catch java.nio.BufferUnderflowException from label55 to label56 with label13;
        catch java.nio.BufferUnderflowException from label57 to label58 with label13;
        catch java.nio.BufferUnderflowException from label59 to label60 with label13;
        catch java.nio.BufferUnderflowException from label61 to label62 with label13;
        catch java.nio.BufferUnderflowException from label63 to label64 with label13;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label36 to label37 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label38 to label39 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label40 to label41 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label42 to label43 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label44 to label46 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label48 to label50 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label51 to label52 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label53 to label54 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label55 to label56 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label57 to label58 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label59 to label60 with label19;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label61 to label64 with label19;
        catch javax.net.ssl.SSLException from label36 to label37 with label28;
        catch javax.net.ssl.SSLException from label38 to label39 with label28;
        catch javax.net.ssl.SSLException from label40 to label41 with label28;
        catch javax.net.ssl.SSLException from label42 to label43 with label28;
        catch javax.net.ssl.SSLException from label44 to label47 with label28;
        catch javax.net.ssl.SSLException from label48 to label50 with label28;
        catch javax.net.ssl.SSLException from label51 to label52 with label28;
        catch javax.net.ssl.SSLException from label53 to label54 with label28;
        catch javax.net.ssl.SSLException from label55 to label56 with label28;
        catch javax.net.ssl.SSLException from label57 to label58 with label28;
        catch javax.net.ssl.SSLException from label59 to label60 with label28;
        catch javax.net.ssl.SSLException from label61 to label62 with label28;
        catch javax.net.ssl.SSLException from label63 to label64 with label28;
        catch java.io.IOException from label36 to label37 with label34;
        catch java.io.IOException from label38 to label39 with label34;
        catch java.io.IOException from label40 to label41 with label34;
        catch java.io.IOException from label42 to label43 with label34;
        catch java.io.IOException from label44 to label46 with label34;
        catch java.io.IOException from label48 to label50 with label34;
        catch java.io.IOException from label51 to label52 with label34;
        catch java.io.IOException from label53 to label54 with label34;
        catch java.io.IOException from label55 to label56 with label34;
        catch java.io.IOException from label57 to label58 with label34;
        catch java.io.IOException from label59 to label60 with label34;
        catch java.io.IOException from label61 to label62 with label34;
        catch java.io.IOException from label63 to label64 with label34;
    }

    public javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[], int, int, java.nio.ByteBuffer) throws javax.net.ssl.SSLException
    {
        org.apache.harmony.xnet.provider.jsse.SSLEngineImpl $r0;
        java.nio.ByteBuffer[] $r1;
        int $i0, $i1, $i2, $i3;
        java.nio.ByteBuffer $r2;
        boolean $z0;
        javax.net.ssl.SSLEngineResult $r3;
        javax.net.ssl.SSLEngineResult$Status $r4;
        javax.net.ssl.SSLEngineResult$HandshakeStatus $r5, $r9;
        java.lang.IllegalStateException $r6;
        java.nio.ReadOnlyBufferException $r7;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r8;
        org.apache.harmony.xnet.provider.jsse.AlertProtocol $r10;
        org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol $r11;
        byte[] $r12;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r15;
        org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream $r16;
        org.apache.harmony.xnet.provider.jsse.AlertException $r17;
        byte $b4;
        javax.net.ssl.SSLException $r18;
        org.apache.harmony.xnet.provider.jsse.HandshakeProtocol $r19;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.SSLEngineImpl;

        $r1 := @parameter0: java.nio.ByteBuffer[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.nio.ByteBuffer;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_shutteddown>;

        if $z0 == 0 goto label01;

        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r5 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

        return $r3;

     label01:
        if $r1 == null goto label02;

        if $r2 != null goto label03;

     label02:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Some of the input parameters are null");

        throw $r6;

     label03:
        $z0 = virtualinvoke $r2.<java.nio.Buffer: boolean isReadOnly()>();

        if $z0 == 0 goto label04;

        $r7 = new java.nio.ReadOnlyBufferException;

        specialinvoke $r7.<java.nio.ReadOnlyBufferException: void <init>()>();

        throw $r7;

     label04:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean handshake_started>;

        if $z0 != 0 goto label05;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void beginHandshake()>();

     label05:
        $r5 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r8 == null goto label06;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed>;

        if $z0 == 0 goto label08;

     label06:
        $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_UNWRAP>;

        $z0 = virtualinvoke $r5.<java.lang.Enum: boolean equals(java.lang.Object)>($r9);

        if $z0 != 0 goto label07;

        $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK>;

        $z0 = virtualinvoke $r5.<java.lang.Enum: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label08;

     label07:
        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

        return $r3;

     label08:
        $i2 = virtualinvoke $r2.<java.nio.Buffer: int remaining()>();

        $r10 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $z0 = virtualinvoke $r10.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: boolean hasAlert()>();

        if $z0 == 0 goto label13;

        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $i0 = virtualinvoke $r11.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getRecordSize(int)>(2);

        if $i2 >= $i0 goto label09;

        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

        return $r3;

     label09:
        $r10 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $r12 = virtualinvoke $r10.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: byte[] wrap()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r12);

        $r10 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $z0 = virtualinvoke $r10.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: boolean isFatalAlert()>();

        if $z0 == 0 goto label11;

        $r10 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r10.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void setProcessed()>();

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r8 == null goto label10;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        virtualinvoke $r8.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void invalidate()>();

     label10:
        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void shutdown()>();

        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r5 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        $i0 = lengthof $r12;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, $i0);

        return $r3;

     label11:
        $r10 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        virtualinvoke $r10.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void setProcessed()>();

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_sent>;

        if $z0 == 0 goto label12;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean close_notify_was_received>;

        if $z0 == 0 goto label12;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: void shutdown()>();

        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status CLOSED>;

        $r5 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NOT_HANDSHAKING>;

        $i0 = lengthof $r12;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, $i0);

        return $r3;

     label12:
        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        $r5 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        $i0 = lengthof $r12;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, $i0);

        return $r3;

     label13:
        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $i3 = virtualinvoke $r11.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getMinRecordSize()>();

        if $i2 >= $i3 goto label15;

        $r13 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r13 == null goto label14;

        $r13 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Capacity of the destination(");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") < MIN_PACKET_SIZE(");

        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $i0 = virtualinvoke $r11.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getMinRecordSize()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r15);

     label14:
        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

        return $r3;

     label15:
        $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP>;

     label16:
        $z0 = virtualinvoke $r5.<java.lang.Enum: boolean equals(java.lang.Object)>($r9);

     label17:
        if $z0 != 0 goto label40;

     label18:
        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream>;

        virtualinvoke $r16.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: void setSourceBuffers(java.nio.ByteBuffer[],int,int)>($r1, $i0, $i1);

     label19:
        $i0 = <org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int MAX_SSL_PACKET_SIZE>;

        if $i2 >= $i0 goto label30;

        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

     label20:
        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream>;

        $i0 = virtualinvoke $r16.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available()>();

        $i0 = virtualinvoke $r11.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getRecordSize(int)>($i0);

     label21:
        if $i2 >= $i0 goto label30;

        $r13 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r13 == null goto label25;

        $r13 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

     label22:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The destination buffer(");

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") can not take the resulting packet(");

     label23:
        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

     label24:
        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream>;

        $i0 = virtualinvoke $r16.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int available()>();

        $i0 = virtualinvoke $r11.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int getRecordSize(int)>($i0);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r15);

     label25:
        $r3 = new javax.net.ssl.SSLEngineResult;

     label26:
        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

     label27:
        return $r3;

     label28:
        $r17 := @caughtexception;

        $r10 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.AlertProtocol alertProtocol>;

        $b4 = virtualinvoke $r17.<org.apache.harmony.xnet.provider.jsse.AlertException: byte getDescriptionCode()>();

        virtualinvoke $r10.<org.apache.harmony.xnet.provider.jsse.AlertProtocol: void alert(byte,byte)>(2, $b4);

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: boolean engine_was_closed> = 1;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        if $r8 == null goto label29;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session>;

        virtualinvoke $r8.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: void invalidate()>();

     label29:
        $r18 = virtualinvoke $r17.<org.apache.harmony.xnet.provider.jsse.AlertException: javax.net.ssl.SSLException getReason()>();

        throw $r18;

     label30:
        $r12 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_wrapped_data>;

        if $r12 != null goto label33;

        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream>;

     label31:
        $r12 = virtualinvoke $r11.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: byte[] wrap(byte,org.apache.harmony.xnet.provider.jsse.DataStream)>(23, $r16);

     label32:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_wrapped_data> = $r12;

     label33:
        $r12 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_wrapped_data>;

        $i0 = lengthof $r12;

        if $i2 >= $i0 goto label36;

        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

     label34:
        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream>;

        $i0 = virtualinvoke $r16.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int consumed()>();

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, $i0, 0);

     label35:
        return $r3;

     label36:
        $r12 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_wrapped_data>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r12);

     label37:
        $r12 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_wrapped_data>;

        $i0 = lengthof $r12;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_wrapped_data> = null;

     label38:
        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        $r16 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream dataStream>;

        $i1 = virtualinvoke $r16.<org.apache.harmony.xnet.provider.jsse.SSLEngineDataStream: int consumed()>();

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, $i1, $i0);

     label39:
        return $r3;

     label40:
        $r12 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_hsh_data>;

        if $r12 != null goto label43;

     label41:
        $r19 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

        $r12 = virtualinvoke $r19.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: byte[] wrap()>();

     label42:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_hsh_data> = $r12;

     label43:
        $r12 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_hsh_data>;

        $i0 = lengthof $r12;

        if $i2 >= $i0 goto label46;

        $r3 = new javax.net.ssl.SSLEngineResult;

     label44:
        $r4 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW>;

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, 0);

     label45:
        return $r3;

     label46:
        $r12 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_hsh_data>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r12);

     label47:
        $r12 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_hsh_data>;

        $i0 = lengthof $r12;

        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: byte[] remaining_hsh_data> = null;

     label48:
        $r19 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.HandshakeProtocol handshakeProtocol>;

        $r5 = virtualinvoke $r19.<org.apache.harmony.xnet.provider.jsse.HandshakeProtocol: javax.net.ssl.SSLEngineResult$HandshakeStatus getStatus()>();

        $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus FINISHED>;

        $z0 = virtualinvoke $r5.<java.lang.Enum: boolean equals(java.lang.Object)>($r9);

     label49:
        if $z0 == 0 goto label52;

     label50:
        $r11 = $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol recordProtocol>;

        $r8 = virtualinvoke $r11.<org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl getSession()>();

     label51:
        $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl session> = $r8;

     label52:
        $r3 = new javax.net.ssl.SSLEngineResult;

        $r4 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$Status getEngineStatus()>();

        $r5 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.SSLEngineImpl: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>();

        specialinvoke $r3.<javax.net.ssl.SSLEngineResult: void <init>(javax.net.ssl.SSLEngineResult$Status,javax.net.ssl.SSLEngineResult$HandshakeStatus,int,int)>($r4, $r5, 0, $i0);

     label53:
        return $r3;

        catch org.apache.harmony.xnet.provider.jsse.AlertException from label16 to label17 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label18 to label19 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label20 to label21 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label22 to label23 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label24 to label25 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label26 to label27 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label31 to label32 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label34 to label35 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label36 to label37 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label38 to label39 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label41 to label42 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label44 to label45 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label46 to label47 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label48 to label49 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label50 to label51 with label28;
        catch org.apache.harmony.xnet.provider.jsse.AlertException from label52 to label53 with label28;
    }
}
