public class com.android.internal.policy.impl.LockPatternKeyguardView extends com.android.internal.policy.impl.KeyguardViewBase
{
    static final java.lang.String ACTION_EMERGENCY_DIAL;
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private boolean mHasAccount;
    private boolean mIsVerifyUnlockOnly;
    com.android.internal.policy.impl.KeyguardScreenCallback mKeyguardScreenCallback;
    private final com.android.internal.widget.LockPatternUtils mLockPatternUtils;
    private android.view.View mLockScreen;
    private com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode;
    private boolean mRequiresSim;
    private boolean mScreenOn;
    private android.content.ServiceConnection mServiceConnection;
    private android.view.View mUnlockScreen;
    private com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode mUnlockScreenMode;
    private final com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor;
    private final com.android.internal.policy.impl.KeyguardWindowController mWindowController;

    public void <init>(android.content.Context, com.android.internal.policy.impl.KeyguardUpdateMonitor, com.android.internal.widget.LockPatternUtils, com.android.internal.policy.impl.KeyguardWindowController)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        android.content.Context $r1;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;
        com.android.internal.widget.LockPatternUtils $r3;
        com.android.internal.policy.impl.KeyguardWindowController $r4;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r5;
        java.lang.String $r6;
        boolean $z0;
        com.android.internal.policy.impl.LockPatternKeyguardView$1 $r7;
        android.graphics.drawable.Drawable $r8;
        android.graphics.drawable.BitmapDrawable $r9;
        com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable $r10;
        android.graphics.Bitmap $r11;
        android.view.View $r12;
        com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode $r13;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 := @parameter0: android.content.Context;

        $r2 := @parameter1: com.android.internal.policy.impl.KeyguardUpdateMonitor;

        $r3 := @parameter2: com.android.internal.widget.LockPatternUtils;

        $r4 := @parameter3: com.android.internal.policy.impl.KeyguardWindowController;

        specialinvoke $r0.<com.android.internal.policy.impl.KeyguardViewBase: void <init>(android.content.Context)>($r1);

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mScreenOn> = 0;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mHasAccount> = 0;

        $r5 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode LockScreen>;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode> = $r5;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mIsVerifyUnlockOnly> = 0;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void asyncCheckForAccount()>();

        $r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("keyguard.no_require_sim");

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6);

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mRequiresSim> = $z0;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor> = $r2;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.widget.LockPatternUtils mLockPatternUtils> = $r3;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardWindowController mWindowController> = $r4;

        $r5 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode getInitialMode()>();

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode> = $r5;

        $r7 = new com.android.internal.policy.impl.LockPatternKeyguardView$1;

        specialinvoke $r7.<com.android.internal.policy.impl.LockPatternKeyguardView$1: void <init>(com.android.internal.policy.impl.LockPatternKeyguardView)>($r0);

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardScreenCallback mKeyguardScreenCallback> = $r7;

        virtualinvoke $r0.<android.view.View: void setFocusableInTouchMode(boolean)>(1);

        virtualinvoke $r0.<android.view.ViewGroup: void setDescendantFocusability(int)>(262144);

        $r8 = virtualinvoke $r1.<android.content.Context: android.graphics.drawable.Drawable getWallpaper()>();

        $r9 = (android.graphics.drawable.BitmapDrawable) $r8;

        $r10 = new com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable;

        $r11 = virtualinvoke $r9.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        specialinvoke $r10.<com.android.internal.policy.impl.LockPatternKeyguardView$FastBitmapDrawable: void <init>(android.graphics.Bitmap,com.android.internal.policy.impl.LockPatternKeyguardView$1)>($r11, null);

        virtualinvoke $r0.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r10);

        $r12 = virtualinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View createLockScreen()>();

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen> = $r12;

        $r12 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        virtualinvoke $r0.<android.view.ViewGroup: void addView(android.view.View)>($r12);

        $r13 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode getUnlockMode()>();

        $r12 = virtualinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View createUnlockScreenFor(com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode)>($r13);

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen> = $r12;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode mUnlockScreenMode> = $r13;

        $r12 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        virtualinvoke $r0.<android.view.ViewGroup: void addView(android.view.View)>($r12);

        $r5 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode>;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void updateScreen(com.android.internal.policy.impl.LockPatternKeyguardView$Mode)>($r5);

        return;
    }

    static boolean access$000(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        boolean z0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        z0 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mIsVerifyUnlockOnly>;

        return z0;
    }

    static boolean access$002(com.android.internal.policy.impl.LockPatternKeyguardView, boolean)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        $z0 := @parameter1: boolean;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mIsVerifyUnlockOnly> = $z0;

        return $z0;
    }

    static void access$100(com.android.internal.policy.impl.LockPatternKeyguardView, com.android.internal.policy.impl.LockPatternKeyguardView$Mode)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r1;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 := @parameter1: com.android.internal.policy.impl.LockPatternKeyguardView$Mode;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void updateScreen(com.android.internal.policy.impl.LockPatternKeyguardView$Mode)>($r1);

        return;
    }

    static void access$1000(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void showTimeoutDialog()>();

        return;
    }

    static android.content.ServiceConnection access$1200(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        android.content.ServiceConnection r1;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.content.ServiceConnection mServiceConnection>;

        return r1;
    }

    static android.content.ServiceConnection access$1202(com.android.internal.policy.impl.LockPatternKeyguardView, android.content.ServiceConnection)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        android.content.ServiceConnection $r1;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 := @parameter1: android.content.ServiceConnection;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.content.ServiceConnection mServiceConnection> = $r1;

        return $r1;
    }

    static com.android.internal.policy.impl.KeyguardUpdateMonitor access$200(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor r1;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        return r1;
    }

    static boolean access$300(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean stuckOnLockScreenBecauseSimMissing()>();

        return $z0;
    }

    static boolean access$400(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean isSecure()>();

        return $z0;
    }

    static void access$500(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void recreateScreens()>();

        return;
    }

    static boolean access$600(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        boolean z0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        z0 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mHasAccount>;

        return z0;
    }

    static boolean access$602(com.android.internal.policy.impl.LockPatternKeyguardView, boolean)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        boolean $z0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        $z0 := @parameter1: boolean;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mHasAccount> = $z0;

        return $z0;
    }

    static void access$700(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void showAlmostAtAccountLoginDialog()>();

        return;
    }

    static com.android.internal.widget.LockPatternUtils access$800(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.widget.LockPatternUtils r1;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        return r1;
    }

    static com.android.internal.policy.impl.LockPatternKeyguardView$Mode access$900(com.android.internal.policy.impl.LockPatternKeyguardView)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode r1;

        $r0 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView;

        r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode>;

        return r1;
    }

    private void asyncCheckForAccount()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        android.content.ServiceConnection $r1;
        com.android.internal.policy.impl.LockPatternKeyguardView$2 $r2;
        android.content.Context $r3;
        android.content.Intent $r4;
        boolean $z0;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r2 = new com.android.internal.policy.impl.LockPatternKeyguardView$2;

        specialinvoke $r2.<com.android.internal.policy.impl.LockPatternKeyguardView$2: void <init>(com.android.internal.policy.impl.LockPatternKeyguardView)>($r0);

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.content.ServiceConnection mServiceConnection> = $r2;

        $r3 = virtualinvoke $r0.<android.view.View: android.content.Context getContext()>();

        $r4 = <android.accounts.AccountsServiceConstants: android.content.Intent SERVICE_INTENT>;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.content.ServiceConnection mServiceConnection>;

        $z0 = virtualinvoke $r3.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>($r4, $r1, 1);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternKeyguardView", "Failed to bind to GLS while checking for account");

        return;

     label1:
        return;
    }

    private com.android.internal.policy.impl.LockPatternKeyguardView$Mode getInitialMode()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r1;
        com.android.internal.telephony.SimCard$State $r2, $r3;
        boolean $z0;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode r4;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r2 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean stuckOnLockScreenBecauseSimMissing()>();

        if $z0 != 0 goto label1;

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PUK_REQUIRED>;

        if $r2 != $r3 goto label2;

     label1:
        r4 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode LockScreen>;

        return r4;

     label2:
        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean isKeyboardOpen()>();

        if $z0 == 0 goto label3;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean isSecure()>();

        if $z0 == 0 goto label3;

        r4 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode UnlockScreen>;

        return r4;

     label3:
        r4 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode LockScreen>;

        return r4;
    }

    private com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode getUnlockMode()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r1;
        com.android.internal.telephony.SimCard$State $r2, $r3;
        com.android.internal.widget.LockPatternUtils $r4;
        boolean $z0;
        com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode r5;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r2 = virtualinvoke $r1.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PIN_REQUIRED>;

        if $r2 == $r3 goto label1;

        $r3 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PUK_REQUIRED>;

        if $r2 != $r3 goto label2;

     label1:
        r5 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode SimPin>;

        return r5;

     label2:
        $r4 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z0 = virtualinvoke $r4.<com.android.internal.widget.LockPatternUtils: boolean isPermanentlyLocked()>();

        if $z0 == 0 goto label3;

        r5 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode Account>;

        return r5;

     label3:
        r5 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode Pattern>;

        return r5;
    }

    private android.view.View getUnlockScreenForCurrentUnlockMode()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode $r1, $r2;
        boolean $z0;
        android.view.View $r3;
        int $i0;
        com.android.internal.policy.impl.KeyguardScreen $r4;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode getUnlockMode()>();

        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode mUnlockScreenMode>;

        if $r1 != $r2 goto label1;

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        return $r3;

     label1:
        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode mUnlockScreenMode> = $r1;

        $z0 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mScreenOn>;

        if $z0 == 0 goto label2;

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $i0 = virtualinvoke $r3.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label2;

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $r4 = (com.android.internal.policy.impl.KeyguardScreen) $r3;

        interfaceinvoke $r4.<com.android.internal.policy.impl.KeyguardScreen: void onPause()>();

     label2:
        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $r4 = (com.android.internal.policy.impl.KeyguardScreen) $r3;

        interfaceinvoke $r4.<com.android.internal.policy.impl.KeyguardScreen: void cleanUp()>();

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        virtualinvoke $r0.<android.view.ViewGroup: void removeViewInLayout(android.view.View)>($r3);

        $r3 = virtualinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View createUnlockScreenFor(com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode)>($r1);

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen> = $r3;

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        virtualinvoke $r3.<android.view.View: void setVisibility(int)>(4);

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        virtualinvoke $r0.<android.view.ViewGroup: void addView(android.view.View)>($r3);

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        return $r3;
    }

    private boolean isSecure()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode $r1, $r2;
        com.android.internal.widget.LockPatternUtils $r3;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r4;
        com.android.internal.telephony.SimCard$State $r5, $r6;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode getUnlockMode()>();

        $r2 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode Pattern>;

        if $r1 != $r2 goto label1;

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $z0 = virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils: boolean isLockPatternEnabled()>();

        return $z0;

     label1:
        $r2 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode SimPin>;

        if $r1 != $r2 goto label4;

        $r4 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r5 = virtualinvoke $r4.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r6 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PIN_REQUIRED>;

        if $r5 == $r6 goto label2;

        $r4 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r5 = virtualinvoke $r4.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r6 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PUK_REQUIRED>;

        if $r5 != $r6 goto label3;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r2 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode Account>;

        if $r1 != $r2 goto label5;

        return 1;

     label5:
        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown unlock mode ");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r7;
    }

    private void recreateScreens()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        android.view.View $r1;
        int $i0;
        com.android.internal.policy.impl.KeyguardScreen $r2;
        com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode $r3;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r4;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        $i0 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label1;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        $r2 = (com.android.internal.policy.impl.KeyguardScreen) $r1;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreen: void onPause()>();

     label1:
        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        $r2 = (com.android.internal.policy.impl.KeyguardScreen) $r1;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreen: void cleanUp()>();

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        virtualinvoke $r0.<android.view.ViewGroup: void removeViewInLayout(android.view.View)>($r1);

        $r1 = virtualinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View createLockScreen()>();

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen> = $r1;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(4);

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        virtualinvoke $r0.<android.view.ViewGroup: void addView(android.view.View)>($r1);

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $i0 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label2;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $r2 = (com.android.internal.policy.impl.KeyguardScreen) $r1;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreen: void onPause()>();

     label2:
        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $r2 = (com.android.internal.policy.impl.KeyguardScreen) $r1;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreen: void cleanUp()>();

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        virtualinvoke $r0.<android.view.ViewGroup: void removeViewInLayout(android.view.View)>($r1);

        $r3 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode getUnlockMode()>();

        $r1 = virtualinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View createUnlockScreenFor(com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode)>($r3);

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen> = $r1;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        virtualinvoke $r1.<android.view.View: void setVisibility(int)>(4);

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode mUnlockScreenMode> = $r3;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        virtualinvoke $r0.<android.view.ViewGroup: void addView(android.view.View)>($r1);

        $r4 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode>;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void updateScreen(com.android.internal.policy.impl.LockPatternKeyguardView$Mode)>($r4);

        return;
    }

    private void showAlmostAtAccountLoginDialog()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        android.content.Context $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        java.lang.String $r4;
        android.app.AlertDialog$Builder $r5;
        android.app.AlertDialog $r6;
        android.view.Window $r7;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = $r0.<android.view.View: android.content.Context mContext>;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r2[1] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $r2[2] = $r3;

        $r4 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17039726, $r2);

        $r5 = new android.app.AlertDialog$Builder;

        $r1 = $r0.<android.view.View: android.content.Context mContext>;

        specialinvoke $r5.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>($r1);

        $r5 = virtualinvoke $r5.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>(null);

        $r5 = virtualinvoke $r5.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>($r4);

        $r5 = virtualinvoke $r5.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>(17039370, null);

        $r6 = virtualinvoke $r5.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();

        $r7 = virtualinvoke $r6.<android.app.Dialog: android.view.Window getWindow()>();

        virtualinvoke $r7.<android.view.Window: void setType(int)>(2009);

        $r7 = virtualinvoke $r6.<android.app.Dialog: android.view.Window getWindow()>();

        virtualinvoke $r7.<android.view.Window: void setFlags(int,int)>(4, 4);

        virtualinvoke $r6.<android.app.Dialog: void show()>();

        return;
    }

    private void showTimeoutDialog()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        android.content.Context $r1;
        java.lang.Object[] $r2;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r3;
        int $i0;
        java.lang.Integer $r4;
        java.lang.String $r5;
        android.app.AlertDialog$Builder $r6;
        android.app.AlertDialog $r7;
        android.view.Window $r8;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = $r0.<android.view.View: android.content.Context mContext>;

        $r2 = newarray (java.lang.Object)[2];

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $i0 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: int getFailedAttempts()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r4;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(30);

        $r2[1] = $r4;

        $r5 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int,java.lang.Object[])>(17039725, $r2);

        $r6 = new android.app.AlertDialog$Builder;

        $r1 = $r0.<android.view.View: android.content.Context mContext>;

        specialinvoke $r6.<android.app.AlertDialog$Builder: void <init>(android.content.Context)>($r1);

        $r6 = virtualinvoke $r6.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>(null);

        $r6 = virtualinvoke $r6.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>($r5);

        $r6 = virtualinvoke $r6.<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNeutralButton(int,android.content.DialogInterface$OnClickListener)>(17039370, null);

        $r7 = virtualinvoke $r6.<android.app.AlertDialog$Builder: android.app.AlertDialog create()>();

        $r8 = virtualinvoke $r7.<android.app.Dialog: android.view.Window getWindow()>();

        virtualinvoke $r8.<android.view.Window: void setType(int)>(2009);

        $r8 = virtualinvoke $r7.<android.app.Dialog: android.view.Window getWindow()>();

        virtualinvoke $r8.<android.view.Window: void setFlags(int,int)>(4, 4);

        virtualinvoke $r7.<android.app.Dialog: void show()>();

        return;
    }

    private boolean stuckOnLockScreenBecauseSimMissing()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.telephony.SimCard$State $r1, $r3;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r2;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $z0 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mRequiresSim>;

        if $z0 == 0 goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardUpdateMonitor: boolean isDeviceProvisioned()>();

        if $z0 != 0 goto label1;

        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r3 = virtualinvoke $r2.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r1 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State ABSENT>;

        if $r3 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void updateScreen(com.android.internal.policy.impl.LockPatternKeyguardView$Mode)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r1, $r2;
        android.view.View $r3, $r4;
        com.android.internal.policy.impl.KeyguardWindowController $r5;
        com.android.internal.policy.impl.KeyguardScreen $r6;
        boolean $z0;
        int $i0;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder $r8;
        java.lang.Class $r9;
        java.lang.String $r10;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView$Mode;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode> = $r1;

        $r2 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode LockScreen>;

        if $r1 != $r2 goto label5;

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

     label1:
        $r2 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode LockScreen>;

        if $r1 != $r2 goto label6;

        $r4 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

     label2:
        $r5 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardWindowController mWindowController>;

        $r6 = (com.android.internal.policy.impl.KeyguardScreen) $r4;

        $z0 = interfaceinvoke $r6.<com.android.internal.policy.impl.KeyguardScreen: boolean needsInput()>();

        interfaceinvoke $r5.<com.android.internal.policy.impl.KeyguardWindowController: void setNeedsInput(boolean)>($z0);

        $z0 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mScreenOn>;

        if $z0 == 0 goto label4;

        $i0 = virtualinvoke $r3.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label3;

        $r6 = (com.android.internal.policy.impl.KeyguardScreen) $r3;

        interfaceinvoke $r6.<com.android.internal.policy.impl.KeyguardScreen: void onPause()>();

     label3:
        $i0 = virtualinvoke $r4.<android.view.View: int getVisibility()>();

        if $i0 == 0 goto label4;

        $r6 = (com.android.internal.policy.impl.KeyguardScreen) $r4;

        interfaceinvoke $r6.<com.android.internal.policy.impl.KeyguardScreen: void onResume()>();

     label4:
        virtualinvoke $r3.<android.view.View: void setVisibility(int)>(8);

        virtualinvoke $r4.<android.view.View: void setVisibility(int)>(0);

        $z0 = virtualinvoke $r4.<android.view.View: boolean requestFocus()>();

        if $z0 != 0 goto label7;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("keyguard screen must be able to take focus when shown ");

        $r9 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label5:
        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        goto label1;

     label6:
        $r4 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View getUnlockScreenForCurrentUnlockMode()>();

        goto label2;

     label7:
        return;
    }

    public void cleanUp()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        android.view.View $r1;
        com.android.internal.policy.impl.KeyguardScreen $r2;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        $r2 = (com.android.internal.policy.impl.KeyguardScreen) $r1;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreen: void onPause()>();

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        $r2 = (com.android.internal.policy.impl.KeyguardScreen) $r1;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreen: void cleanUp()>();

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $r2 = (com.android.internal.policy.impl.KeyguardScreen) $r1;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreen: void onPause()>();

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $r2 = (com.android.internal.policy.impl.KeyguardScreen) $r1;

        interfaceinvoke $r2.<com.android.internal.policy.impl.KeyguardScreen: void cleanUp()>();

        return;
    }

    android.view.View createLockScreen()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.LockScreen $r1;
        android.content.Context $r2;
        com.android.internal.widget.LockPatternUtils $r3;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r4;
        com.android.internal.policy.impl.KeyguardScreenCallback $r5;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 = new com.android.internal.policy.impl.LockScreen;

        $r2 = $r0.<android.view.View: android.content.Context mContext>;

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r4 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r5 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardScreenCallback mKeyguardScreenCallback>;

        specialinvoke $r1.<com.android.internal.policy.impl.LockScreen: void <init>(android.content.Context,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback)>($r2, $r3, $r4, $r5);

        return $r1;
    }

    android.view.View createUnlockScreenFor(com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode $r1, $r3;
        com.android.internal.policy.impl.KeyguardScreenCallback $r2;
        android.content.Context $r5;
        com.android.internal.widget.LockPatternUtils $r6;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r7, $r8;
        int $i0;
        java.lang.IllegalStateException $r9;
        android.view.View $r10;
        java.lang.StringBuilder $r12, r17;
        java.lang.String $r13;
        com.android.internal.policy.impl.UnlockScreen r14;
        com.android.internal.policy.impl.SimUnlockScreen r15;
        com.android.internal.policy.impl.AccountUnlockScreen r16;
        java.lang.IllegalArgumentException r18;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1 := @parameter0: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode;

        $r3 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode Pattern>;

        if $r1 != $r3 goto label1;

        r14 = new com.android.internal.policy.impl.UnlockScreen;

        $r5 = $r0.<android.view.View: android.content.Context mContext>;

        $r6 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

        $r7 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardScreenCallback mKeyguardScreenCallback>;

        $r8 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $i0 = virtualinvoke $r8.<com.android.internal.policy.impl.KeyguardUpdateMonitor: int getFailedAttempts()>();

        specialinvoke r14.<com.android.internal.policy.impl.UnlockScreen: void <init>(android.content.Context,com.android.internal.widget.LockPatternUtils,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback,int)>($r5, $r6, $r7, $r2, $i0);

        $r10 = (android.view.View) r14;

        return $r10;

     label1:
        $r3 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode SimPin>;

        if $r1 != $r3 goto label2;

        r15 = new com.android.internal.policy.impl.SimUnlockScreen;

        $r5 = $r0.<android.view.View: android.content.Context mContext>;

        $r7 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardScreenCallback mKeyguardScreenCallback>;

        specialinvoke r15.<com.android.internal.policy.impl.SimUnlockScreen: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardUpdateMonitor,com.android.internal.policy.impl.KeyguardScreenCallback)>($r5, $r7, $r2);

        $r10 = (android.view.View) r15;

        return $r10;

     label2:
        $r3 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode Account>;

        if $r1 != $r3 goto label6;

        r16 = new com.android.internal.policy.impl.AccountUnlockScreen;

        $r5 = $r0.<android.view.View: android.content.Context mContext>;

        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardScreenCallback mKeyguardScreenCallback>;

        $r6 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.widget.LockPatternUtils mLockPatternUtils>;

     label3:
        specialinvoke r16.<com.android.internal.policy.impl.AccountUnlockScreen: void <init>(android.content.Context,com.android.internal.policy.impl.KeyguardScreenCallback,com.android.internal.widget.LockPatternUtils)>($r5, $r2, $r6);

     label4:
        $r10 = (android.view.View) r16;

        return $r10;

     label5:
        $r9 := @caughtexception;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("LockPatternKeyguardView", "Couldn\'t instantiate AccountUnlockScreen (IAccountsService isn\'t available)");

        $r1 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode Pattern>;

        $r10 = virtualinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View createUnlockScreenFor(com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode)>($r1);

        return $r10;

     label6:
        r18 = new java.lang.IllegalArgumentException;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown unlock mode ");

        $r12 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw r18;

        catch java.lang.IllegalStateException from label3 to label4 with label5;
    }

    public void onScreenTurnedOff()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r0, $r2;
        com.android.internal.policy.impl.LockPatternKeyguardView $r1;
        android.view.View $r3;
        com.android.internal.policy.impl.KeyguardScreen $r4;

        $r1 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mScreenOn> = 0;

        $r2 = $r1.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode>;

        $r0 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode LockScreen>;

        if $r2 != $r0 goto label1;

        $r3 = $r1.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        $r4 = (com.android.internal.policy.impl.KeyguardScreen) $r3;

        interfaceinvoke $r4.<com.android.internal.policy.impl.KeyguardScreen: void onPause()>();

        return;

     label1:
        $r3 = $r1.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $r4 = (com.android.internal.policy.impl.KeyguardScreen) $r3;

        interfaceinvoke $r4.<com.android.internal.policy.impl.KeyguardScreen: void onPause()>();

        return;
    }

    public void onScreenTurnedOn()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r0, $r2;
        com.android.internal.policy.impl.LockPatternKeyguardView $r1;
        android.view.View $r3;
        com.android.internal.policy.impl.KeyguardScreen $r4;

        $r1 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r1.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mScreenOn> = 1;

        $r2 = $r1.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode>;

        $r0 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode LockScreen>;

        if $r2 != $r0 goto label1;

        $r3 = $r1.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mLockScreen>;

        $r4 = (com.android.internal.policy.impl.KeyguardScreen) $r3;

        interfaceinvoke $r4.<com.android.internal.policy.impl.KeyguardScreen: void onResume()>();

        return;

     label1:
        $r3 = $r1.<com.android.internal.policy.impl.LockPatternKeyguardView: android.view.View mUnlockScreen>;

        $r4 = (com.android.internal.policy.impl.KeyguardScreen) $r3;

        interfaceinvoke $r4.<com.android.internal.policy.impl.KeyguardScreen: void onResume()>();

        return;
    }

    public void reset()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r1;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mIsVerifyUnlockOnly> = 0;

        $r1 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode getInitialMode()>();

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void updateScreen(com.android.internal.policy.impl.LockPatternKeyguardView$Mode)>($r1);

        return;
    }

    public void verifyUnlock()
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        boolean $z0;
        com.android.internal.policy.impl.KeyguardViewCallback $r1;
        com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode $r2, $r3;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r4;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean isSecure()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewBase: com.android.internal.policy.impl.KeyguardViewCallback getCallback()>();

        interfaceinvoke $r1.<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)>(1);

        return;

     label1:
        $r2 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode mUnlockScreenMode>;

        $r3 = <com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode: com.android.internal.policy.impl.LockPatternKeyguardView$UnlockMode Pattern>;

        if $r2 == $r3 goto label2;

        $r1 = virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewBase: com.android.internal.policy.impl.KeyguardViewCallback getCallback()>();

        interfaceinvoke $r1.<com.android.internal.policy.impl.KeyguardViewCallback: void keyguardDone(boolean)>(0);

        return;

     label2:
        $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean mIsVerifyUnlockOnly> = 1;

        $r4 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode UnlockScreen>;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void updateScreen(com.android.internal.policy.impl.LockPatternKeyguardView$Mode)>($r4);

        return;
    }

    public void wakeWhenReadyTq(int)
    {
        com.android.internal.policy.impl.LockPatternKeyguardView $r0;
        int $i0;
        boolean $z0;
        com.android.internal.policy.impl.LockPatternKeyguardView$Mode $r1, $r2;
        com.android.internal.policy.impl.KeyguardUpdateMonitor $r3;
        com.android.internal.telephony.SimCard$State $r4, $r5;
        com.android.internal.policy.impl.KeyguardViewCallback $r6;

        $r0 := @this: com.android.internal.policy.impl.LockPatternKeyguardView;

        $i0 := @parameter0: int;

        if $i0 != 82 goto label1;

        $z0 = specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: boolean isSecure()>();

        if $z0 == 0 goto label1;

        $r1 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.LockPatternKeyguardView$Mode mMode>;

        $r2 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode LockScreen>;

        if $r1 != $r2 goto label1;

        $r3 = $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: com.android.internal.policy.impl.KeyguardUpdateMonitor mUpdateMonitor>;

        $r4 = virtualinvoke $r3.<com.android.internal.policy.impl.KeyguardUpdateMonitor: com.android.internal.telephony.SimCard$State getSimState()>();

        $r5 = <com.android.internal.telephony.SimCard$State: com.android.internal.telephony.SimCard$State PUK_REQUIRED>;

        if $r4 == $r5 goto label1;

        $r1 = <com.android.internal.policy.impl.LockPatternKeyguardView$Mode: com.android.internal.policy.impl.LockPatternKeyguardView$Mode UnlockScreen>;

        specialinvoke $r0.<com.android.internal.policy.impl.LockPatternKeyguardView: void updateScreen(com.android.internal.policy.impl.LockPatternKeyguardView$Mode)>($r1);

        $r6 = virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewBase: com.android.internal.policy.impl.KeyguardViewCallback getCallback()>();

        interfaceinvoke $r6.<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()>();

        return;

     label1:
        $r6 = virtualinvoke $r0.<com.android.internal.policy.impl.KeyguardViewBase: com.android.internal.policy.impl.KeyguardViewCallback getCallback()>();

        interfaceinvoke $r6.<com.android.internal.policy.impl.KeyguardViewCallback: void pokeWakelock()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.policy.impl.LockPatternKeyguardView: java.lang.String TAG> = "LockPatternKeyguardView";

        <com.android.internal.policy.impl.LockPatternKeyguardView: boolean DEBUG> = 0;

        <com.android.internal.policy.impl.LockPatternKeyguardView: java.lang.String ACTION_EMERGENCY_DIAL> = "com.android.phone.EmergencyDialer.DIAL";

        return;
    }
}
