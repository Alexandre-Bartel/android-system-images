public class org.apache.harmony.xnet.provider.jsse.ServerSessionContext extends org.apache.harmony.xnet.provider.jsse.AbstractSessionContext
{
    private final org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache persistentCache;
    private final java.util.Map sessions;

    public void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters, org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache)
    {
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;
        org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache $r2;
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1 $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerSessionContext;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r2 := @parameter1: org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: void <init>(org.apache.harmony.xnet.provider.jsse.SSLParameters,int,int)>($r1, 100, 0);

        $r3 = new org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1;

        specialinvoke $r3.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1: void <init>(org.apache.harmony.xnet.provider.jsse.ServerSessionContext)>($r0);

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions> = $r3;

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache persistentCache> = $r2;

        return;
    }

    public javax.net.ssl.SSLSession getSession(byte[])
    {
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r0;
        byte[] $r1;
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$ByteArray $r2;
        java.util.Map $r3, $r4;
        java.lang.Object $r5;
        javax.net.ssl.SSLSession $r6;
        org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache $r7;
        java.lang.Throwable $r8, $r9;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerSessionContext;

        $r1 := @parameter0: byte[];

        $r2 = new org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$ByteArray;

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$ByteArray: void <init>(byte[])>($r1);

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        entermonitor $r3;

     label01:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = (javax.net.ssl.SSLSession) $r5;

        if $r6 == null goto label03;

        exitmonitor $r3;

     label02:
        return $r6;

     label03:
        exitmonitor $r3;

     label04:
        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache persistentCache>;

        if $r7 == null goto label13;

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache persistentCache>;

        $r1 = interfaceinvoke $r7.<org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache: byte[] getSessionData(byte[])>($r1);

        if $r1 == null goto label13;

        $r6 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: javax.net.ssl.SSLSession toSession(byte[],java.lang.String,int)>($r1, null, -1);

        if $r6 == null goto label13;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        entermonitor $r3;

     label05:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        exitmonitor $r3;

     label06:
        return $r6;

     label07:
        $r8 := @caughtexception;

     label08:
        exitmonitor $r3;

     label09:
        throw $r8;

     label10:
        $r9 := @caughtexception;

     label11:
        exitmonitor $r3;

     label12:
        throw $r9;

     label13:
        return null;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void putSession(javax.net.ssl.SSLSession)
    {
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r0;
        javax.net.ssl.SSLSession $r1;
        org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$ByteArray $r2;
        byte[] $r3;
        java.util.Map $r4, $r5;
        org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache $r6;
        java.lang.Throwable $r7;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerSessionContext;

        $r1 := @parameter0: javax.net.ssl.SSLSession;

        $r2 = new org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$ByteArray;

        $r3 = interfaceinvoke $r1.<javax.net.ssl.SSLSession: byte[] getId()>();

        specialinvoke $r2.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext$ByteArray: void <init>(byte[])>($r3);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        entermonitor $r4;

     label1:
        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        exitmonitor $r4;

     label2:
        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache persistentCache>;

        if $r6 == null goto label6;

        $r3 = virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: byte[] toBytes(javax.net.ssl.SSLSession)>($r1);

        if $r3 == null goto label7;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache persistentCache>;

        interfaceinvoke $r6.<org.apache.harmony.xnet.provider.jsse.SSLServerSessionCache: void putSessionData(javax.net.ssl.SSLSession,byte[])>($r1, $r3);

        return;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor $r4;

     label5:
        throw $r7;

     label6:
        return;

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    java.util.Iterator sessionIterator()
    {
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r0;
        java.util.Map $r1, $r2;
        java.util.Collection $r3;
        int $i0;
        javax.net.ssl.SSLSession[] $r4;
        java.lang.Object[] $r5;
        java.util.List $r6;
        java.util.Iterator $r7;
        java.lang.Throwable $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerSessionContext;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r4 = newarray (javax.net.ssl.SSLSession)[$i0];

        $r5 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r4 = (javax.net.ssl.SSLSession[]) $r5;

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4);

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        exitmonitor $r1;

     label2:
        return $r7;

     label3:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void setSessionTimeout(int) throws java.lang.IllegalArgumentException
    {
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r0;
        int $i0;
        java.lang.IllegalArgumentException $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerSessionContext;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("seconds < 0");

        throw $r1;

     label1:
        $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int timeout> = $i0;

        return;
    }

    void trimToSize()
    {
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r0;
        java.util.Map $r1, $r2;
        int $i0, $i1;
        java.util.Collection $r3;
        java.util.Iterator $r4;
        java.lang.Throwable $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerSessionContext;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        entermonitor $r1;

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        $i0 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int maximumSize>;

        if $i0 <= $i1 goto label3;

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int maximumSize>;

        $i0 = $i0 - $i1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext: java.util.Map sessions>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        $i0 = $i0 + -1;

        if $i0 > 0 goto label2;

     label3:
        exitmonitor $r1;

     label4:
        return;

     label5:
        $r5 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r5;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }
}
