public abstract class com.google.common.task.AbstractTask extends java.lang.Object
{
    private static final com.google.common.task.AbstractTask[] EMPTY_TASK_ARRAY;
    public static final int STATE_NONE;
    public static final int STATE_PENDING;
    public static final int STATE_RUNNABLE;
    public static final int STATE_RUNNING;
    public static final int STATE_SLEEPING;
    protected java.lang.Runnable runnable;
    protected com.google.common.task.TaskRunner runner;
    private int state;
    protected java.util.Vector tasks;

    static void <clinit>()
    {
        com.google.common.task.AbstractTask[] $r0;

        <com.google.common.task.AbstractTask: int STATE_SLEEPING> = 1;

        <com.google.common.task.AbstractTask: int STATE_RUNNING> = 3;

        <com.google.common.task.AbstractTask: int STATE_RUNNABLE> = 2;

        <com.google.common.task.AbstractTask: int STATE_PENDING> = 4;

        <com.google.common.task.AbstractTask: int STATE_NONE> = 0;

        $r0 = newarray (com.google.common.task.AbstractTask)[0];

        <com.google.common.task.AbstractTask: com.google.common.task.AbstractTask[] EMPTY_TASK_ARRAY> = $r0;

        return;
    }

    public void <init>(com.google.common.task.TaskRunner)
    {
        com.google.common.task.AbstractTask $r0;
        com.google.common.task.TaskRunner $r1;

        $r0 := @this: com.google.common.task.AbstractTask;

        $r1 := @parameter0: com.google.common.task.TaskRunner;

        specialinvoke $r0.<com.google.common.task.AbstractTask: void <init>(com.google.common.task.TaskRunner,java.lang.Runnable)>($r1, null);

        return;
    }

    public void <init>(com.google.common.task.TaskRunner, java.lang.Runnable)
    {
        com.google.common.task.AbstractTask $r0;
        com.google.common.task.TaskRunner $r1;
        java.lang.Runnable $r2;

        $r0 := @this: com.google.common.task.AbstractTask;

        $r1 := @parameter0: com.google.common.task.TaskRunner;

        $r2 := @parameter1: java.lang.Runnable;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.google.common.task.AbstractTask: com.google.common.task.TaskRunner runner> = $r1;

        $r0.<com.google.common.task.AbstractTask: java.lang.Runnable runnable> = $r2;

        return;
    }

    public void addTask(com.google.common.task.AbstractTask)
    {
        com.google.common.task.AbstractTask $r0, $r1;
        boolean $z0;
        java.util.Vector $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.google.common.task.AbstractTask;

        $r1 := @parameter0: com.google.common.task.AbstractTask;

        entermonitor $r0;

     label1:
        $r2 = $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks>;

        if $r2 != null goto label2;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks> = $r2;

     label2:
        $r2 = $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label3;

        $r2 = $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks>;

        virtualinvoke $r2.<java.util.Vector: void addElement(java.lang.Object)>($r1);

     label3:
        exitmonitor $r0;

        return;

     label4:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label4;
    }

    public int cancel()
    {
        com.google.common.task.AbstractTask $r0;
        int $i0;
        com.google.common.task.TaskRunner $r1;

        $r0 := @this: com.google.common.task.AbstractTask;

        $r1 = $r0.<com.google.common.task.AbstractTask: com.google.common.task.TaskRunner runner>;

        $i0 = virtualinvoke $r1.<com.google.common.task.TaskRunner: int cancelTask(com.google.common.task.AbstractTask)>($r0);

        return $i0;
    }

    protected abstract int cancelInternal();

    protected int getState()
    {
        com.google.common.task.AbstractTask $r0;
        int i0;

        $r0 := @this: com.google.common.task.AbstractTask;

        i0 = $r0.<com.google.common.task.AbstractTask: int state>;

        return i0;
    }

    public com.google.common.task.TaskRunner getTaskRunner()
    {
        com.google.common.task.AbstractTask $r0;
        com.google.common.task.TaskRunner r1;

        $r0 := @this: com.google.common.task.AbstractTask;

        r1 = $r0.<com.google.common.task.AbstractTask: com.google.common.task.TaskRunner runner>;

        return r1;
    }

    protected com.google.common.task.AbstractTask[] getTasks()
    {
        com.google.common.task.AbstractTask $r0;
        java.util.Vector $r1;
        int $i0;
        com.google.common.task.AbstractTask[] $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.google.common.task.AbstractTask;

        entermonitor $r0;

     label1:
        $r1 = $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks>;

        if $r1 == null goto label4;

        $r1 = $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        $r2 = newarray (com.google.common.task.AbstractTask)[$i0];

        $r1 = $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks>;

        virtualinvoke $r1.<java.util.Vector: void copyInto(java.lang.Object[])>($r2);

     label2:
        exitmonitor $r0;

     label3:
        return $r2;

     label4:
        $r2 = <com.google.common.task.AbstractTask: com.google.common.task.AbstractTask[] EMPTY_TASK_ARRAY>;

        goto label2;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r0;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public boolean removeTask(com.google.common.task.AbstractTask)
    {
        com.google.common.task.AbstractTask $r0, $r1;
        boolean $z0;
        java.util.Vector $r2;
        java.lang.Throwable $r3;

        $r0 := @this: com.google.common.task.AbstractTask;

        $r1 := @parameter0: com.google.common.task.AbstractTask;

        entermonitor $r0;

     label1:
        $r2 = $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks>;

        if $r2 == null goto label4;

        $r2 = $r0.<com.google.common.task.AbstractTask: java.util.Vector tasks>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean removeElement(java.lang.Object)>($r1);

     label2:
        if $z0 == 0 goto label4;

        $z0 = 1;

     label3:
        exitmonitor $r0;

        return $z0;

     label4:
        $z0 = 0;

        goto label3;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
    }

    protected void run()
    {
        com.google.common.task.AbstractTask $r0;
        java.lang.Runnable $r1;

        $r0 := @this: com.google.common.task.AbstractTask;

        $r1 = $r0.<com.google.common.task.AbstractTask: java.lang.Runnable runnable>;

        if $r1 == null goto label1;

        $r1 = $r0.<com.google.common.task.AbstractTask: java.lang.Runnable runnable>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        return;

     label1:
        return;
    }

    protected void runInternal()
    {
        com.google.common.task.AbstractTask $r0;
        com.google.common.task.AbstractTask[] $r1;
        int $i0, $i1;
        java.lang.Throwable $r2;

        $r0 := @this: com.google.common.task.AbstractTask;

     label1:
        virtualinvoke $r0.<com.google.common.task.AbstractTask: void run()>();

     label2:
        $r1 = virtualinvoke $r0.<com.google.common.task.AbstractTask: com.google.common.task.AbstractTask[] getTasks()>();

        $i0 = 0;

     label3:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label5;

        $r0 = $r1[$i0];

        virtualinvoke $r0.<com.google.common.task.AbstractTask: void schedule()>();

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.lang.Throwable: void printStackTrace()>();

        goto label2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public void schedule()
    {
        com.google.common.task.AbstractTask $r0;
        com.google.common.task.TaskRunner $r1;

        $r0 := @this: com.google.common.task.AbstractTask;

        $r1 = $r0.<com.google.common.task.AbstractTask: com.google.common.task.TaskRunner runner>;

        virtualinvoke $r1.<com.google.common.task.TaskRunner: void scheduleTask(com.google.common.task.AbstractTask)>($r0);

        return;
    }

    protected abstract void scheduleInternal();

    protected void setState(int)
    {
        com.google.common.task.AbstractTask $r0;
        int $i0;

        $r0 := @this: com.google.common.task.AbstractTask;

        $i0 := @parameter0: int;

        $r0.<com.google.common.task.AbstractTask: int state> = $i0;

        return;
    }
}
