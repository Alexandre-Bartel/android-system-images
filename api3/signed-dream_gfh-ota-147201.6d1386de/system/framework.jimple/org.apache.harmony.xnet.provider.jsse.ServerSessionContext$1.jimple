class org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1 extends java.util.LinkedHashMap
{
    final org.apache.harmony.xnet.provider.jsse.ServerSessionContext this$0;

    void <init>(org.apache.harmony.xnet.provider.jsse.ServerSessionContext)
    {
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1 $r0;
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.ServerSessionContext;

        $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1: org.apache.harmony.xnet.provider.jsse.ServerSessionContext this$0> = $r1;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        return;
    }

    protected boolean removeEldestEntry(java.util.Map$Entry)
    {
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1 $r0;
        java.util.Map$Entry $r1;
        int $i0, $i1;
        org.apache.harmony.xnet.provider.jsse.ServerSessionContext $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1;

        $r1 := @parameter0: java.util.Map$Entry;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1: org.apache.harmony.xnet.provider.jsse.ServerSessionContext this$0>;

        $i0 = $r2.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int maximumSize>;

        if $i0 <= 0 goto label1;

        $i0 = virtualinvoke $r0.<java.util.HashMap: int size()>();

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ServerSessionContext$1: org.apache.harmony.xnet.provider.jsse.ServerSessionContext this$0>;

        $i1 = $r2.<org.apache.harmony.xnet.provider.jsse.AbstractSessionContext: int maximumSize>;

        if $i0 <= $i1 goto label1;

        return 1;

     label1:
        return 0;
    }
}
