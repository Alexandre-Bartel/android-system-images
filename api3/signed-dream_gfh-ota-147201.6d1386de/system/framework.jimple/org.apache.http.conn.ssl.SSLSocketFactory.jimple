public class org.apache.http.conn.ssl.SSLSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.LayeredSocketFactory
{
    public static final org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
    private static final org.apache.http.conn.ssl.SSLSocketFactory DEFAULT_FACTORY;
    public static final java.lang.String SSL;
    public static final java.lang.String SSLV2;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;
    public static final java.lang.String TLS;
    private org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier;
    private final org.apache.http.conn.scheme.HostNameResolver nameResolver;
    private final javax.net.ssl.SSLSocketFactory socketfactory;
    private final javax.net.ssl.SSLContext sslcontext;

    static void <clinit>()
    {
        org.apache.http.conn.ssl.AllowAllHostnameVerifier $r0;
        org.apache.http.conn.ssl.BrowserCompatHostnameVerifier $r1;
        org.apache.http.conn.ssl.StrictHostnameVerifier $r2;
        org.apache.http.conn.ssl.SSLSocketFactory $r3;

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String TLS> = "TLS";

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSLV2> = "SSLv2";

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSL> = "SSL";

        $r0 = new org.apache.http.conn.ssl.AllowAllHostnameVerifier;

        specialinvoke $r0.<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER> = $r0;

        $r1 = new org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;

        specialinvoke $r1.<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER> = $r1;

        $r2 = new org.apache.http.conn.ssl.StrictHostnameVerifier;

        specialinvoke $r2.<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER> = $r2;

        $r3 = new org.apache.http.conn.ssl.SSLSocketFactory;

        specialinvoke $r3.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory DEFAULT_FACTORY> = $r3;

        return;
    }

    private void <init>()
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        org.apache.http.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r2;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = null;

        $r1 = staticinvoke <javax.net.ssl.HttpsURLConnection: javax.net.ssl.SSLSocketFactory getDefaultSSLSocketFactory()>();

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r1;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, org.apache.http.conn.scheme.HostNameResolver) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1, $r3;
        java.lang.String $r2, $r6;
        java.security.SecureRandom $r4;
        org.apache.http.conn.scheme.HostNameResolver $r5;
        org.apache.http.conn.ssl.X509HostnameVerifier $r7;
        javax.net.ssl.KeyManager[] $r8;
        javax.net.ssl.TrustManager[] $r9;
        javax.net.ssl.SSLContext $r10;
        javax.net.ssl.SSLSocketFactory $r11;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r6 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.security.KeyStore;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.security.KeyStore;

        $r4 := @parameter4: java.security.SecureRandom;

        $r5 := @parameter5: org.apache.http.conn.scheme.HostNameResolver;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r7 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r7;

        if $r6 != null goto label1;

        $r6 = "TLS";

     label1:
        $r8 = null;

        if $r1 == null goto label2;

        $r8 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.KeyManager[] createKeyManagers(java.security.KeyStore,java.lang.String)>($r1, $r2);

     label2:
        $r9 = null;

        if $r3 == null goto label3;

        $r9 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.TrustManager[] createTrustManagers(java.security.KeyStore)>($r3);

     label3:
        $r10 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>($r6);

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = $r10;

        $r10 = $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext>;

        virtualinvoke $r10.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r8, $r9, $r4);

        $r10 = $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext>;

        $r11 = virtualinvoke $r10.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r11;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = $r5;

        return;
    }

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", null, null, $r1, null, null);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1;
        java.lang.String $r2;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", $r1, $r2, null, null, null);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String, java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        java.security.KeyStore $r1, $r3;
        java.lang.String $r2;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.security.KeyStore;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: java.security.KeyStore;

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.scheme.HostNameResolver)>("TLS", $r1, $r2, $r3, null, null);

        return;
    }

    public void <init>(javax.net.ssl.SSLSocketFactory)
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLSocketFactory $r1;
        org.apache.http.conn.ssl.X509HostnameVerifier $r2;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r2 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r2;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext sslcontext> = null;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r1;

        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    private static javax.net.ssl.KeyManager[] createKeyManagers(java.security.KeyStore, java.lang.String) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, java.security.UnrecoverableKeyException
    {
        java.security.KeyStore $r0;
        java.lang.String $r1, $r3;
        java.lang.IllegalArgumentException $r2;
        javax.net.ssl.KeyManagerFactory $r4;
        char[] $r5;
        javax.net.ssl.KeyManager[] $r6;

        $r0 := @parameter0: java.security.KeyStore;

        $r1 := @parameter1: java.lang.String;

        if $r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keystore may not be null");

        throw $r2;

     label1:
        $r3 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r4 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r3);

        if $r1 == null goto label3;

        $r5 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

     label2:
        virtualinvoke $r4.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r0, $r5);

        $r6 = virtualinvoke $r4.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        return $r6;

     label3:
        $r5 = null;

        goto label2;
    }

    private static javax.net.ssl.TrustManager[] createTrustManagers(java.security.KeyStore) throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException
    {
        java.security.KeyStore $r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;
        javax.net.ssl.TrustManagerFactory $r3;
        javax.net.ssl.TrustManager[] $r4;

        $r0 := @parameter0: java.security.KeyStore;

        if $r0 != null goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Keystore may not be null");

        throw $r1;

     label1:
        $r2 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r3 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r2);

        virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r0);

        $r4 = virtualinvoke $r3.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        return $r4;
    }

    public static org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory()
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;

        r0 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory DEFAULT_FACTORY>;

        return r0;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0, $i1, $i2;
        java.net.InetAddress $r3;
        org.apache.http.params.HttpParams $r4;
        java.net.InetSocketAddress $r5;
        java.lang.IllegalArgumentException $r6;
        javax.net.ssl.SSLSocket $r7;
        org.apache.http.conn.scheme.HostNameResolver $r8;
        org.apache.http.conn.ssl.X509HostnameVerifier $r9;
        java.io.IOException $r10;
        java.lang.Exception $r11;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $r3 := @parameter3: java.net.InetAddress;

        $i1 := @parameter4: int;

        $r4 := @parameter5: org.apache.http.params.HttpParams;

        if $r2 != null goto label01;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Target host may not be null.");

        throw $r6;

     label01:
        if $r4 != null goto label02;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameters may not be null.");

        throw $r6;

     label02:
        if $r1 == null goto label10;

     label03:
        $r7 = (javax.net.ssl.SSLSocket) $r1;

        if $r3 != null goto label04;

        if $i1 <= 0 goto label06;

     label04:
        if $i1 >= 0 goto label05;

        $i1 = 0;

     label05:
        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r3, $i1);

        virtualinvoke $r7.<java.net.Socket: void bind(java.net.SocketAddress)>($r5);

     label06:
        $i1 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>($r4);

        $i2 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>($r4);

        $r8 = $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        if $r8 == null goto label11;

        $r5 = new java.net.InetSocketAddress;

        $r8 = $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        $r3 = interfaceinvoke $r8.<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>($r2);

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r3, $i0);

     label07:
        virtualinvoke $r7.<java.net.Socket: void connect(java.net.SocketAddress,int)>($r5, $i1);

        virtualinvoke $r7.<java.net.Socket: void setSoTimeout(int)>($i2);

        $r9 = $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

     label08:
        interfaceinvoke $r9.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>($r2, $r7);

     label09:
        return $r7;

     label10:
        $r1 = virtualinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        goto label03;

     label11:
        $r5 = new java.net.InetSocketAddress;

        specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r2, $i0);

        goto label07;

     label12:
        $r10 := @caughtexception;

     label13:
        virtualinvoke $r7.<java.net.Socket: void close()>();

     label14:
        throw $r10;

     label15:
        $r11 := @caughtexception;

        goto label14;

        catch java.io.IOException from label08 to label09 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        javax.net.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        org.apache.http.conn.ssl.SSLSocketFactory $r2;
        javax.net.ssl.SSLSocket $r3;

        $r2 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r0 = $r2.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r1 = virtualinvoke $r0.<javax.net.SocketFactory: java.net.Socket createSocket()>();

        $r3 = (javax.net.ssl.SSLSocket) $r1;

        return $r3;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        java.lang.String $r2;
        int $i0;
        boolean $z0;
        javax.net.ssl.SSLSocketFactory $r3;
        javax.net.ssl.SSLSocket $r4;
        org.apache.http.conn.ssl.X509HostnameVerifier $r5;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        $r2 := @parameter1: java.lang.String;

        $i0 := @parameter2: int;

        $z0 := @parameter3: boolean;

        $r3 = $r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r1 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>($r1, $r2, $i0, $z0);

        $r4 = (javax.net.ssl.SSLSocket) $r1;

        $r5 = $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r5.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>($r2, $r4);

        return $r4;
    }

    public org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        org.apache.http.conn.ssl.X509HostnameVerifier r1;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 = $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        return r1;
    }

    public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        java.net.Socket $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: java.net.Socket;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null.");

        throw $r2;

     label1:
        $z0 = $r1 instanceof javax.net.ssl.SSLSocket;

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory.");

        throw $r2;

     label2:
        $z0 = virtualinvoke $r1.<java.net.Socket: boolean isClosed()>();

        if $z0 == 0 goto label3;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed.");

        throw $r2;

     label3:
        return 1;
    }

    public void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        org.apache.http.conn.ssl.X509HostnameVerifier $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 := @parameter0: org.apache.http.conn.ssl.X509HostnameVerifier;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hostname verifier may not be null");

        throw $r2;

     label1:
        $r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r1;

        return;
    }
}
