public class org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3 extends org.apache.harmony.xnet.provider.jsse.ConnectionState
{
    private final byte[] mac_material_part;
    private final byte[] mac_read_secret;
    private final byte[] mac_write_secret;
    private final java.security.MessageDigest messageDigest;
    private final byte[] pad_1;
    private final byte[] pad_2;

    protected void <init>(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3 $r0;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r1;
        byte[] $r2, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r3;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r4, $r5, $r8;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r6;
        java.lang.StringBuilder $r7;
        javax.crypto.spec.IvParameterSpec $r17, $r18;
        java.security.MessageDigest $r19;
        javax.crypto.Cipher $r20;
        javax.crypto.spec.SecretKeySpec $r21;
        java.lang.Exception $r22;
        org.apache.harmony.xnet.provider.jsse.AlertException $r23;
        javax.net.ssl.SSLProtocolException $r24;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: void <init>()>();

        $r2 = newarray (byte)[3];

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part> = $r2;

     label01:
        $r3 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite cipherSuite>;

        $z0 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: boolean isExportable()>();

        $i0 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int getMACLength()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size> = $i0;

        if $z0 == 0 goto label21;

        $i1 = $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int keyMaterial>;

     label02:
        $i0 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int getBlockSize()>();

        $r4 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getBulkEncryptionAlgorithm()>();

        $r5 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getHashName()>();

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r6 == null goto label03;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("ConnectionStateSSLv3.create:");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  cipher suite name: ");

        $r8 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: java.lang.String getCipherSuite()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  encryption alg name: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  hash alg name: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  hash size: ");

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  block size: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  IV size (== block size):");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  key size: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

     label03:
        $r2 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] clientRandom>;

        $r9 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] serverRandom>;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

     label04:
        $i2 = $i2 * 2;

        $i3 = $i1 * 2;

        $i2 = $i2 + $i3;

        $i3 = $i0 * 2;

     label05:
        $i2 = $i2 + $i3;

        $r10 = newarray (byte)[$i2];

        $i2 = lengthof $r2;

        $i3 = lengthof $r9;

        $i2 = $i2 + $i3;

        $r11 = newarray (byte)[$i2];

        $i2 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r11, 0, $i2);

        $i2 = lengthof $r9;

        $i3 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r11, $i2, $i3);

        $r12 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void computePRF_SSLv3(byte[],byte[],byte[])>($r10, $r12, $r11);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $r11 = newarray (byte)[$i2];

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $r12 = newarray (byte)[$i2];

        $r13 = newarray (byte)[$i1];

        $r14 = $r13;

        $r15 = newarray (byte)[$i1];

        $r16 = $r15;

        $z1 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isServer>;

     label06:
        if $z1 != 0 goto label24;

        $z1 = 1;

     label07:
        if $i0 <= 0 goto label25;

     label08:
        $z2 = 1;

     label09:
        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher> = $z2;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r11, 0, $i2);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i2, $r12, 0, $i3);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i2 = $i2 * 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i2, $r13, 0, $i1);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

     label10:
        $i2 = $i2 * 2;

     label11:
        $i2 = $i2 + $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i2, $r15, 0, $i1);

     label12:
        $r17 = null;

        $r18 = null;

     label13:
        if $z0 == 0 goto label27;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r6 == null goto label14;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("ConnectionStateSSLv3: is_exportable");

     label14:
        $r19 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r13);

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r2);

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r9);

        $r14 = virtualinvoke $r19.<java.security.MessageDigest: byte[] digest()>();

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r15);

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r9);

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r2);

        $r16 = virtualinvoke $r19.<java.security.MessageDigest: byte[] digest()>();

        $i1 = $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int expandedKeyMaterial>;

        $z2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z2 == 0 goto label15;

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r2);

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r9);

        $r17 = new javax.crypto.spec.IvParameterSpec;

        $r10 = virtualinvoke $r19.<java.security.MessageDigest: byte[] digest()>();

        specialinvoke $r17.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r10, 0, $i0);

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r9);

        virtualinvoke $r19.<java.security.MessageDigest: void update(byte[])>($r2);

        $r18 = new javax.crypto.spec.IvParameterSpec;

        $r10 = virtualinvoke $r19.<java.security.MessageDigest: byte[] digest()>();

        specialinvoke $r18.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r10, 0, $i0);

     label15:
        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r6 == null goto label16;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is exportable: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("master_secret");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r10 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r10);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("client_random");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r2);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("server_random");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r9);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("client_mac_secret");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r11);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("server_mac_secret");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r12);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("client_key");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[],int,int)>($r14, 0, $i1);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("server_key");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[],int,int)>($r16, 0, $i1);

        if $r17 == null goto label32;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("client_iv");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r2 = virtualinvoke $r17.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r2);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("server_iv");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r2 = virtualinvoke $r18.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r2);

     label16:
        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher> = $r20;

        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher> = $r20;

        $r19 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r5);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest> = $r19;

        if $z1 == 0 goto label35;

        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

        $r21 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r21.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r14, 0, $i1, $r4);

        virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r21, $r17);

        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher>;

        $r21 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r21.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r16, 0, $i1, $r4);

        virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r21, $r18);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_write_secret> = $r11;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_read_secret> = $r12;

     label17:
        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("MD5");

     label18:
        if $z0 == 0 goto label36;

     label19:
        $r2 = <org.apache.harmony.xnet.provider.jsse.SSLv3Constants: byte[] MD5pad1>;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] pad_1> = $r2;

        $r2 = <org.apache.harmony.xnet.provider.jsse.SSLv3Constants: byte[] MD5pad2>;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] pad_2> = $r2;

     label20:
        return;

     label21:
        $i0 = $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int expandedKeyMaterial>;

     label22:
        $i1 = $i0;

     label23:
        goto label02;

     label24:
        $z1 = 0;

        goto label07;

     label25:
        $z2 = 0;

     label26:
        goto label09;

     label27:
        $z2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z2 == 0 goto label15;

        $r17 = new javax.crypto.spec.IvParameterSpec;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

     label28:
        $i2 = $i2 * 2;

        $i3 = $i1 * 2;

     label29:
        $i2 = $i2 + $i3;

        specialinvoke $r17.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r10, $i2, $i0);

        $r18 = new javax.crypto.spec.IvParameterSpec;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

     label30:
        $i2 = $i2 * 2;

        $i3 = $i1 * 2;

        $i2 = $i2 + $i3;

     label31:
        $i2 = $i2 + $i0;

        specialinvoke $r18.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r10, $i2, $i0);

        goto label15;

     label32:
        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("no IV.");

     label33:
        goto label16;

     label34:
        $r22 := @caughtexception;

        virtualinvoke $r22.<java.lang.Throwable: void printStackTrace()>();

        $r23 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r24 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r24.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Error during computation of security parameters");

        specialinvoke $r23.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r24);

        throw $r23;

     label35:
        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

        $r21 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r21.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r16, 0, $i1, $r4);

        virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r21, $r18);

        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher>;

        $r21 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r21.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],int,int,java.lang.String)>($r14, 0, $i1, $r4);

        virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r21, $r17);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_write_secret> = $r12;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_read_secret> = $r11;

        goto label17;

     label36:
        $r2 = <org.apache.harmony.xnet.provider.jsse.SSLv3Constants: byte[] SHApad1>;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] pad_1> = $r2;

        $r2 = <org.apache.harmony.xnet.provider.jsse.SSLv3Constants: byte[] SHApad2>;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] pad_2> = $r2;

     label37:
        return;

        catch java.lang.Exception from label01 to label04 with label34;
        catch java.lang.Exception from label05 to label06 with label34;
        catch java.lang.Exception from label08 to label10 with label34;
        catch java.lang.Exception from label11 to label12 with label34;
        catch java.lang.Exception from label13 to label18 with label34;
        catch java.lang.Exception from label19 to label20 with label34;
        catch java.lang.Exception from label21 to label22 with label34;
        catch java.lang.Exception from label23 to label24 with label34;
        catch java.lang.Exception from label26 to label28 with label34;
        catch java.lang.Exception from label29 to label30 with label34;
        catch java.lang.Exception from label31 to label33 with label34;
        catch java.lang.Exception from label35 to label37 with label34;
    }

    protected byte[] decrypt(byte, byte[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3 $r0;
        byte $b0, $b3, $b4;
        byte[] $r1, $r3, $r6, $r8;
        int $i1, $i2;
        javax.crypto.Cipher $r2;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.AlertException $r4;
        javax.net.ssl.SSLProtocolException $r5;
        java.security.MessageDigest $r7;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r9;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher>;

        $r3 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r1, $i1, $i2);

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z0 == 0 goto label7;

        $i1 = lengthof $r3;

        $i1 = $i1 - 1;

        $b3 = $r3[$i1];

        $i1 = 0;

     label1:
        if $i1 >= $b3 goto label3;

        $i2 = lengthof $r3;

        $i2 = $i2 - 2;

        $i2 = $i2 - $i1;

        $b4 = $r3[$i2];

        if $b4 == $b3 goto label2;

        $r4 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r5 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r5.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Received message has bad padding");

        specialinvoke $r4.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(21, $r5);

        throw $r4;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i1 = lengthof $r3;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i1 = $i1 - $i2;

        $i1 = $i1 - $b3;

        $i1 = $i1 - 1;

        $r1 = newarray (byte)[$i1];

     label4:
        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part>;

        $r6[0] = $b0;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part>;

        $i1 = lengthof $r1;

        $i1 = 65280 & $i1;

        $i1 = $i1 >> 8;

        $b0 = (byte) $i1;

        $r6[1] = $b0;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part>;

        $i1 = lengthof $r1;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        $r6[2] = $b0;

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_read_secret>;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r6);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] pad_1>;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r6);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] read_seq_num>;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r6);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part>;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r6);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $i1 = lengthof $r1;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[],int,int)>($r3, 0, $i1);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r6 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>();

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_read_secret>;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r8);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] pad_2>;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r8);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        virtualinvoke $r7.<java.security.MessageDigest: void update(byte[])>($r6);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r6 = virtualinvoke $r7.<java.security.MessageDigest: byte[] digest()>();

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r9 == null goto label5;

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r9.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("Decrypted:");

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r9.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r3);

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r9.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("Expected mac value:");

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r9.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r6);

     label5:
        $i1 = 0;

     label6:
        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        if $i1 >= $i2 goto label9;

        $b0 = $r6[$i1];

        $i2 = lengthof $r1;

        $i2 = $i2 + $i1;

        $b3 = $r3[$i2];

        if $b0 == $b3 goto label8;

        $r4 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r5 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r5.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Bad record MAC");

        specialinvoke $r4.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(20, $r5);

        throw $r4;

     label7:
        $i1 = lengthof $r3;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i1 = $i1 - $i2;

        $r1 = newarray (byte)[$i1];

        goto label4;

     label8:
        $i1 = $i1 + 1;

        goto label6;

     label9:
        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i1);

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] read_seq_num>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: void incSequenceNumber(byte[])>($r3);

        return $r1;
    }

    protected byte[] encrypt(byte, byte[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3 $r0;
        byte $b0;
        byte[] $r1, $r2, $r3;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        java.security.MessageDigest $r4;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r5;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;
        javax.crypto.Cipher $r9;
        java.security.GeneralSecurityException $r10;
        org.apache.harmony.xnet.provider.jsse.AlertException $r11;
        javax.net.ssl.SSLProtocolException $r12;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i3 = $i2 + $i3;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z0 == 0 goto label27;

        $i3 = $i3 + 1;

        $i4 = $i3 & 7;

        $i4 = 8 - $i4;

        $i4 = $i4 & 7;

     label01:
        $i5 = $i3 + $i4;

        $r2 = newarray (byte)[$i5];

     label02:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, 0, $i2);

     label03:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part>;

        $r3[0] = $b0;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part>;

        $i5 = 65280 & $i2;

        $i5 = $i5 >> 8;

        $b0 = (byte) $i5;

        $r3[1] = $b0;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part>;

        $i5 = $i2 & 255;

        $b0 = (byte) $i5;

        $r3[2] = $b0;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

     label04:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_write_secret>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

     label05:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

     label06:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] pad_1>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

     label07:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

     label08:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] write_seq_num>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

     label09:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

     label10:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_material_part>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[],int,int)>($r1, $i1, $i2);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r1 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

     label11:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

     label12:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_write_secret>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

     label13:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

     label14:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] pad_2>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r3);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        virtualinvoke $r4.<java.security.MessageDigest: void update(byte[])>($r1);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: java.security.MessageDigest messageDigest>;

        $r1 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest()>();

        $i1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r2, $i2, $i1);

     label15:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z0 == 0 goto label17;

        $i1 = $i3 - 1;

        $i2 = lengthof $r2;

     label16:
        $b0 = (byte) $i4;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r2, $i1, $i2, $b0);

     label17:
        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r5 == null goto label22;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

     label18:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLRecordProtocol.encrypt: ");

     label19:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z0 == 0 goto label28;

     label20:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GenericBlockCipher with padding[");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r2);

     label22:
        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

     label23:
        $i1 = lengthof $r2;

        $i1 = virtualinvoke $r9.<javax.crypto.Cipher: int getOutputSize(int)>($i1);

     label24:
        $r1 = newarray (byte)[$i1];

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

     label25:
        $i1 = lengthof $r2;

        virtualinvoke $r9.<javax.crypto.Cipher: int update(byte[],int,int,byte[])>($r2, 0, $i1, $r1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] write_seq_num>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: void incSequenceNumber(byte[])>($r2);

     label26:
        return $r1;

     label27:
        $i4 = 0;

        goto label01;

     label28:
        $r8 = "GenericStreamCipher:";

        goto label21;

     label29:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void printStackTrace()>();

        $r11 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r12 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r12.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Error during the encryption");

        specialinvoke $r11.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r12);

        throw $r11;

        catch java.security.GeneralSecurityException from label02 to label03 with label29;
        catch java.security.GeneralSecurityException from label04 to label05 with label29;
        catch java.security.GeneralSecurityException from label06 to label07 with label29;
        catch java.security.GeneralSecurityException from label08 to label09 with label29;
        catch java.security.GeneralSecurityException from label10 to label11 with label29;
        catch java.security.GeneralSecurityException from label12 to label13 with label29;
        catch java.security.GeneralSecurityException from label14 to label15 with label29;
        catch java.security.GeneralSecurityException from label16 to label17 with label29;
        catch java.security.GeneralSecurityException from label18 to label19 with label29;
        catch java.security.GeneralSecurityException from label20 to label22 with label29;
        catch java.security.GeneralSecurityException from label23 to label24 with label29;
        catch java.security.GeneralSecurityException from label25 to label26 with label29;
    }

    protected void shutdown()
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3 $r0;
        byte[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_write_secret>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, 0);

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateSSLv3: byte[] mac_read_secret>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r1, 0);

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: void shutdown()>();

        return;
    }
}
