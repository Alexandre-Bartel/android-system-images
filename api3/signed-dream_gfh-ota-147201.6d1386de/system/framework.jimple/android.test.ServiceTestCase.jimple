public abstract class android.test.ServiceTestCase extends android.test.AndroidTestCase
{
    private android.app.Application mApplication;
    private android.app.Service mService;
    private boolean mServiceAttached;
    private boolean mServiceBound;
    java.lang.Class mServiceClass;
    private boolean mServiceCreated;
    private int mServiceId;
    private android.content.Intent mServiceIntent;
    private boolean mServiceStarted;
    private android.content.Context mSystemContext;

    public void <init>(java.lang.Class)
    {
        android.test.ServiceTestCase $r0;
        java.lang.Class $r1;

        $r0 := @this: android.test.ServiceTestCase;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r0.<android.test.AndroidTestCase: void <init>()>();

        $r0.<android.test.ServiceTestCase: boolean mServiceAttached> = 0;

        $r0.<android.test.ServiceTestCase: boolean mServiceCreated> = 0;

        $r0.<android.test.ServiceTestCase: boolean mServiceStarted> = 0;

        $r0.<android.test.ServiceTestCase: boolean mServiceBound> = 0;

        $r0.<android.test.ServiceTestCase: android.content.Intent mServiceIntent> = null;

        $r0.<android.test.ServiceTestCase: java.lang.Class mServiceClass> = $r1;

        return;
    }

    protected android.os.IBinder bindService(android.content.Intent)
    {
        android.test.ServiceTestCase $r0;
        android.content.Intent $r1, $r3;
        boolean $z0;
        android.app.Service $r2;
        android.os.IBinder $r4;

        $r0 := @this: android.test.ServiceTestCase;

        $r1 := @parameter0: android.content.Intent;

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceStarted>;

        staticinvoke <android.test.ServiceTestCase: void assertFalse(boolean)>($z0);

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceBound>;

        staticinvoke <android.test.ServiceTestCase: void assertFalse(boolean)>($z0);

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceAttached>;

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<android.test.ServiceTestCase: void setupService()>();

     label1:
        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        staticinvoke <android.test.ServiceTestCase: void assertNotNull(java.lang.Object)>($r2);

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceCreated>;

        if $z0 != 0 goto label2;

        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        virtualinvoke $r2.<android.app.Service: void onCreate()>();

        $r0.<android.test.ServiceTestCase: boolean mServiceCreated> = 1;

     label2:
        $r3 = virtualinvoke $r1.<android.content.Intent: android.content.Intent cloneFilter()>();

        $r0.<android.test.ServiceTestCase: android.content.Intent mServiceIntent> = $r3;

        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        $r4 = virtualinvoke $r2.<android.app.Service: android.os.IBinder onBind(android.content.Intent)>($r1);

        $r0.<android.test.ServiceTestCase: boolean mServiceBound> = 1;

        return $r4;
    }

    public android.app.Application getApplication()
    {
        android.test.ServiceTestCase $r0;
        android.app.Application r1;

        $r0 := @this: android.test.ServiceTestCase;

        r1 = $r0.<android.test.ServiceTestCase: android.app.Application mApplication>;

        return r1;
    }

    public android.app.Service getService()
    {
        android.test.ServiceTestCase $r0;
        android.app.Service r1;

        $r0 := @this: android.test.ServiceTestCase;

        r1 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        return r1;
    }

    public android.content.Context getSystemContext()
    {
        android.test.ServiceTestCase $r0;
        android.content.Context r1;

        $r0 := @this: android.test.ServiceTestCase;

        r1 = $r0.<android.test.ServiceTestCase: android.content.Context mSystemContext>;

        return r1;
    }

    public void setApplication(android.app.Application)
    {
        android.test.ServiceTestCase $r0;
        android.app.Application $r1;

        $r0 := @this: android.test.ServiceTestCase;

        $r1 := @parameter0: android.app.Application;

        $r0.<android.test.ServiceTestCase: android.app.Application mApplication> = $r1;

        return;
    }

    protected void setUp() throws java.lang.Exception
    {
        android.test.ServiceTestCase $r0;
        android.content.Context $r1;

        $r0 := @this: android.test.ServiceTestCase;

        specialinvoke $r0.<android.test.AndroidTestCase: void setUp()>();

        $r1 = virtualinvoke $r0.<android.test.AndroidTestCase: android.content.Context getContext()>();

        $r0.<android.test.ServiceTestCase: android.content.Context mSystemContext> = $r1;

        return;
    }

    protected void setupService()
    {
        android.test.ServiceTestCase $r0;
        java.lang.Class $r1;
        java.lang.Object $r2;
        android.app.Service $r3;
        android.app.Application $r4;
        android.test.mock.MockApplication $r5;
        android.content.Context $r6;
        java.lang.String $r7;
        java.util.Random $r8;
        int $i0;
        java.lang.Exception $r9;

        $r0 := @this: android.test.ServiceTestCase;

        $r0.<android.test.ServiceTestCase: android.app.Service mService> = null;

     label1:
        $r1 = $r0.<android.test.ServiceTestCase: java.lang.Class mServiceClass>;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

        $r3 = (android.app.Service) $r2;

        $r0.<android.test.ServiceTestCase: android.app.Service mService> = $r3;

     label2:
        $r4 = virtualinvoke $r0.<android.test.ServiceTestCase: android.app.Application getApplication()>();

        if $r4 != null goto label3;

        $r5 = new android.test.mock.MockApplication;

        specialinvoke $r5.<android.test.mock.MockApplication: void <init>()>();

        virtualinvoke $r0.<android.test.ServiceTestCase: void setApplication(android.app.Application)>($r5);

     label3:
        $r3 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        $r6 = virtualinvoke $r0.<android.test.AndroidTestCase: android.content.Context getContext()>();

        $r1 = $r0.<android.test.ServiceTestCase: java.lang.Class mServiceClass>;

        $r7 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = virtualinvoke $r0.<android.test.ServiceTestCase: android.app.Application getApplication()>();

        virtualinvoke $r3.<android.app.Service: void attach(android.content.Context,android.app.ActivityThread,java.lang.String,android.os.IBinder,android.app.Application,java.lang.Object)>($r6, null, $r7, null, $r4, null);

        $r3 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        staticinvoke <android.test.ServiceTestCase: void assertNotNull(java.lang.Object)>($r3);

        $r8 = new java.util.Random;

        specialinvoke $r8.<java.util.Random: void <init>()>();

        $i0 = virtualinvoke $r8.<java.util.Random: int nextInt()>();

        $r0.<android.test.ServiceTestCase: int mServiceId> = $i0;

        $r0.<android.test.ServiceTestCase: boolean mServiceAttached> = 1;

        return;

     label4:
        $r9 := @caughtexception;

        $r3 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        staticinvoke <android.test.ServiceTestCase: void assertNotNull(java.lang.Object)>($r3);

        goto label2;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    protected void shutdownService()
    {
        android.test.ServiceTestCase $r0;
        android.content.Intent $r1;
        boolean $z0;
        android.app.Service $r2;

        $r0 := @this: android.test.ServiceTestCase;

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceStarted>;

        if $z0 == 0 goto label2;

        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        virtualinvoke $r2.<android.app.Service: void stopSelf()>();

        $r0.<android.test.ServiceTestCase: boolean mServiceStarted> = 0;

     label1:
        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceCreated>;

        if $z0 == 0 goto label3;

        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        virtualinvoke $r2.<android.app.Service: void onDestroy()>();

        return;

     label2:
        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceBound>;

        if $z0 == 0 goto label1;

        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        $r1 = $r0.<android.test.ServiceTestCase: android.content.Intent mServiceIntent>;

        virtualinvoke $r2.<android.app.Service: boolean onUnbind(android.content.Intent)>($r1);

        $r0.<android.test.ServiceTestCase: boolean mServiceBound> = 0;

        goto label1;

     label3:
        return;
    }

    protected void startService(android.content.Intent)
    {
        android.test.ServiceTestCase $r0;
        android.content.Intent $r1;
        int $i0;
        boolean $z0;
        android.app.Service $r2;

        $r0 := @this: android.test.ServiceTestCase;

        $r1 := @parameter0: android.content.Intent;

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceStarted>;

        staticinvoke <android.test.ServiceTestCase: void assertFalse(boolean)>($z0);

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceBound>;

        staticinvoke <android.test.ServiceTestCase: void assertFalse(boolean)>($z0);

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceAttached>;

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<android.test.ServiceTestCase: void setupService()>();

     label1:
        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        staticinvoke <android.test.ServiceTestCase: void assertNotNull(java.lang.Object)>($r2);

        $z0 = $r0.<android.test.ServiceTestCase: boolean mServiceCreated>;

        if $z0 != 0 goto label2;

        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        virtualinvoke $r2.<android.app.Service: void onCreate()>();

        $r0.<android.test.ServiceTestCase: boolean mServiceCreated> = 1;

     label2:
        $r2 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        $i0 = $r0.<android.test.ServiceTestCase: int mServiceId>;

        virtualinvoke $r2.<android.app.Service: void onStart(android.content.Intent,int)>($r1, $i0);

        $r0.<android.test.ServiceTestCase: boolean mServiceStarted> = 1;

        return;
    }

    protected void tearDown() throws java.lang.Exception
    {
        android.test.ServiceTestCase $r0;

        $r0 := @this: android.test.ServiceTestCase;

        virtualinvoke $r0.<android.test.ServiceTestCase: void shutdownService()>();

        $r0.<android.test.ServiceTestCase: android.app.Service mService> = null;

        virtualinvoke $r0.<android.test.AndroidTestCase: void scrubClass(java.lang.Class)>(class "android/test/ServiceTestCase");

        specialinvoke $r0.<android.test.AndroidTestCase: void tearDown()>();

        return;
    }

    public void testServiceTestCaseSetUpProperly() throws java.lang.Exception
    {
        android.test.ServiceTestCase $r0;
        android.app.Service $r1;

        $r0 := @this: android.test.ServiceTestCase;

        virtualinvoke $r0.<android.test.ServiceTestCase: void setupService()>();

        $r1 = $r0.<android.test.ServiceTestCase: android.app.Service mService>;

        staticinvoke <android.test.ServiceTestCase: void assertNotNull(java.lang.String,java.lang.Object)>("service should be launched successfully", $r1);

        return;
    }
}
