public class android.text.style.IconMarginSpan extends java.lang.Object implements android.text.style.LeadingMarginSpan, android.text.style.LineHeightSpan
{
    private android.graphics.Bitmap mBitmap;
    private int mPad;

    public void <init>(android.graphics.Bitmap)
    {
        android.text.style.IconMarginSpan $r0;
        android.graphics.Bitmap $r1;

        $r0 := @this: android.text.style.IconMarginSpan;

        $r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.text.style.IconMarginSpan: android.graphics.Bitmap mBitmap> = $r1;

        return;
    }

    public void <init>(android.graphics.Bitmap, int)
    {
        android.text.style.IconMarginSpan $r0;
        android.graphics.Bitmap $r1;
        int $i0;

        $r0 := @this: android.text.style.IconMarginSpan;

        $r1 := @parameter0: android.graphics.Bitmap;

        $i0 := @parameter1: int;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<android.text.style.IconMarginSpan: android.graphics.Bitmap mBitmap> = $r1;

        $r0.<android.text.style.IconMarginSpan: int mPad> = $i0;

        return;
    }

    public void chooseHeight(java.lang.CharSequence, int, int, int, int, android.graphics.Paint$FontMetricsInt)
    {
        android.text.style.IconMarginSpan $r0;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Paint$FontMetricsInt $r1;
        java.lang.CharSequence $r2;
        android.text.Spanned $r3;
        android.graphics.Bitmap $r4;

        $r0 := @this: android.text.style.IconMarginSpan;

        $r2 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 := @parameter4: int;

        $r1 := @parameter5: android.graphics.Paint$FontMetricsInt;

        $r3 = (android.text.Spanned) $r2;

        $i0 = interfaceinvoke $r3.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r0);

        if $i1 != $i0 goto label2;

        $r4 = $r0.<android.text.style.IconMarginSpan: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r4.<android.graphics.Bitmap: int getHeight()>();

        $i1 = $r1.<android.graphics.Paint$FontMetricsInt: int descent>;

        $i1 = $i1 + $i3;

        $i4 = $r1.<android.graphics.Paint$FontMetricsInt: int ascent>;

        $i1 = $i1 - $i4;

        $i1 = $i1 - $i2;

        $i1 = $i0 - $i1;

        if $i1 <= 0 goto label1;

        $i4 = $r1.<android.graphics.Paint$FontMetricsInt: int descent>;

        $i1 = $i4 + $i1;

        $r1.<android.graphics.Paint$FontMetricsInt: int descent> = $i1;

     label1:
        $i1 = $r1.<android.graphics.Paint$FontMetricsInt: int bottom>;

        $i1 = $i1 + $i3;

        $i3 = $r1.<android.graphics.Paint$FontMetricsInt: int top>;

        $i1 = $i1 - $i3;

        $i1 = $i1 - $i2;

        $i0 = $i0 - $i1;

        if $i0 <= 0 goto label3;

        $i1 = $r1.<android.graphics.Paint$FontMetricsInt: int bottom>;

        $i0 = $i1 + $i0;

        $r1.<android.graphics.Paint$FontMetricsInt: int bottom> = $i0;

        return;

     label2:
        return;

     label3:
        return;
    }

    public void drawLeadingMargin(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int, java.lang.CharSequence, int, int, boolean, android.text.Layout)
    {
        android.text.style.IconMarginSpan $r0;
        android.graphics.Canvas $r1;
        android.graphics.Paint $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;
        android.text.Layout $r3;
        float $f0, $f1;
        java.lang.CharSequence $r4;
        android.text.Spanned $r5;
        android.graphics.Bitmap $r6;

        $r0 := @this: android.text.style.IconMarginSpan;

        $r1 := @parameter0: android.graphics.Canvas;

        $r2 := @parameter1: android.graphics.Paint;

        $i6 := @parameter2: int;

        $i0 := @parameter3: int;

        $i1 := @parameter4: int;

        $i2 := @parameter5: int;

        $i3 := @parameter6: int;

        $r4 := @parameter7: java.lang.CharSequence;

        $i4 := @parameter8: int;

        $i5 := @parameter9: int;

        $z0 := @parameter10: boolean;

        $r3 := @parameter11: android.text.Layout;

        $r5 = (android.text.Spanned) $r4;

        $i1 = interfaceinvoke $r5.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r0);

        $i1 = virtualinvoke $r3.<android.text.Layout: int getLineForOffset(int)>($i1);

        $i1 = virtualinvoke $r3.<android.text.Layout: int getLineTop(int)>($i1);

        if $i0 >= 0 goto label1;

        $r6 = $r0.<android.text.style.IconMarginSpan: android.graphics.Bitmap mBitmap>;

        $i0 = virtualinvoke $r6.<android.graphics.Bitmap: int getWidth()>();

        $i6 = $i6 - $i0;

     label1:
        $r6 = $r0.<android.text.style.IconMarginSpan: android.graphics.Bitmap mBitmap>;

        $f0 = (float) $i6;

        $f1 = (float) $i1;

        virtualinvoke $r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>($r6, $f0, $f1, $r2);

        return;
    }

    public int getLeadingMargin(boolean)
    {
        android.text.style.IconMarginSpan $r0;
        boolean $z0;
        int $i0, $i1;
        android.graphics.Bitmap $r1;

        $r0 := @this: android.text.style.IconMarginSpan;

        $z0 := @parameter0: boolean;

        $r1 = $r0.<android.text.style.IconMarginSpan: android.graphics.Bitmap mBitmap>;

        $i1 = virtualinvoke $r1.<android.graphics.Bitmap: int getWidth()>();

        $i0 = $r0.<android.text.style.IconMarginSpan: int mPad>;

        $i0 = $i1 + $i0;

        return $i0;
    }
}
