public final class org.apache.harmony.luni.lang.reflect.ImplForType extends java.lang.Object implements java.lang.reflect.ParameterizedType
{
    private final org.apache.harmony.luni.lang.reflect.ListOfTypes args;
    private java.lang.ClassLoader loader;
    private final org.apache.harmony.luni.lang.reflect.ImplForType ownerType0;
    private java.lang.reflect.Type ownerTypeRes;
    private java.lang.Class rawType;
    private final java.lang.String rawTypeName;

    public void <init>(org.apache.harmony.luni.lang.reflect.ImplForType, java.lang.String, org.apache.harmony.luni.lang.reflect.ListOfTypes, java.lang.ClassLoader)
    {
        org.apache.harmony.luni.lang.reflect.ImplForType $r0, $r1;
        java.lang.String $r2;
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r3;
        java.lang.ClassLoader $r4;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ImplForType;

        $r1 := @parameter0: org.apache.harmony.luni.lang.reflect.ImplForType;

        $r2 := @parameter1: java.lang.String;

        $r3 := @parameter2: org.apache.harmony.luni.lang.reflect.ListOfTypes;

        $r4 := @parameter3: java.lang.ClassLoader;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: org.apache.harmony.luni.lang.reflect.ImplForType ownerType0> = $r1;

        $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.String rawTypeName> = $r2;

        $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: org.apache.harmony.luni.lang.reflect.ListOfTypes args> = $r3;

        $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.ClassLoader loader> = $r4;

        return;
    }

    public java.lang.reflect.Type[] getActualTypeArguments()
    {
        org.apache.harmony.luni.lang.reflect.ImplForType $r0;
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2;
        java.lang.Object $r3;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ImplForType;

        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: org.apache.harmony.luni.lang.reflect.ListOfTypes args>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r2 = (java.lang.reflect.Type[]) $r3;

        return $r2;
    }

    public java.lang.reflect.Type getOwnerType()
    {
        org.apache.harmony.luni.lang.reflect.ImplForType $r0, $r2;
        java.lang.reflect.Type $r1;
        java.lang.Class $r3;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ImplForType;

        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type ownerTypeRes>;

        if $r1 != null goto label1;

        $r2 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: org.apache.harmony.luni.lang.reflect.ImplForType ownerType0>;

        if $r2 == null goto label2;

        $r2 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: org.apache.harmony.luni.lang.reflect.ImplForType ownerType0>;

        $r1 = virtualinvoke $r2.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type getResolvedType()>();

        $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type ownerTypeRes> = $r1;

     label1:
        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type ownerTypeRes>;

        return $r1;

     label2:
        $r3 = virtualinvoke $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.Class getRawType()>();

        $r3 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getDeclaringClass()>();

        $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.reflect.Type ownerTypeRes> = $r3;

        goto label1;
    }

    public java.lang.Class getRawType()
    {
        org.apache.harmony.luni.lang.reflect.ImplForType $r0;
        java.lang.ClassLoader $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.lang.ClassNotFoundException $r4;
        java.lang.TypeNotPresentException $r5;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ImplForType;

        $r2 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.Class rawType>;

        if $r2 != null goto label3;

        $r3 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.String rawTypeName>;

        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.ClassLoader loader>;

     label1:
        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r3, 0, $r1);

     label2:
        $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.Class rawType> = $r2;

     label3:
        $r2 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.Class rawType>;

        return $r2;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.TypeNotPresentException;

        $r3 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.String rawTypeName>;

        specialinvoke $r5.<java.lang.TypeNotPresentException: void <init>(java.lang.String,java.lang.Throwable)>($r3, $r4);

        throw $r5;

        catch java.lang.ClassNotFoundException from label1 to label2 with label4;
    }

    public volatile java.lang.reflect.Type getRawType()
    {
        org.apache.harmony.luni.lang.reflect.ImplForType $r0;
        java.lang.Class $r1;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ImplForType;

        $r1 = virtualinvoke $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.Class getRawType()>();

        return $r1;
    }

    java.lang.reflect.Type getResolvedType()
    {
        org.apache.harmony.luni.lang.reflect.ImplForType $r0;
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r1;
        java.lang.reflect.Type[] $r2;
        int $i0;
        java.lang.Class $r3;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ImplForType;

        $r1 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: org.apache.harmony.luni.lang.reflect.ListOfTypes args>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.luni.lang.reflect.ListOfTypes: java.lang.reflect.Type[] getResolvedTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $r3 = virtualinvoke $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.Class getRawType()>();

        return $r3;

     label1:
        return $r0;
    }

    public java.lang.String toString()
    {
        org.apache.harmony.luni.lang.reflect.ImplForType $r0;
        java.lang.StringBuilder $r1, $r4;
        java.lang.String $r2;
        org.apache.harmony.luni.lang.reflect.ListOfTypes $r3;
        int $i0;

        $r0 := @this: org.apache.harmony.luni.lang.reflect.ImplForType;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: java.lang.String rawTypeName>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: org.apache.harmony.luni.lang.reflect.ListOfTypes args>;

        $i0 = virtualinvoke $r3.<org.apache.harmony.luni.lang.reflect.ListOfTypes: int length()>();

        if $i0 <= 0 goto label1;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<");

        $r3 = $r0.<org.apache.harmony.luni.lang.reflect.ImplForType: org.apache.harmony.luni.lang.reflect.ListOfTypes args>;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">");

     label1:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }
}
