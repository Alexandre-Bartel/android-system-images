public class org.apache.http.impl.client.DefaultRedirectHandler extends java.lang.Object implements org.apache.http.client.RedirectHandler
{
    private static final java.lang.String REDIRECT_LOCATIONS;
    private final org.apache.commons.logging.Log log;

    public void <init>()
    {
        org.apache.http.impl.client.DefaultRedirectHandler $r0;
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;

        $r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        $r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public java.net.URI getLocationURI(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.ProtocolException
    {
        org.apache.http.impl.client.DefaultRedirectHandler $r0;
        org.apache.http.HttpResponse $r1;
        org.apache.http.protocol.HttpContext $r2;
        java.net.URI $r3, $r12;
        java.lang.IllegalArgumentException $r4;
        org.apache.http.Header $r5;
        org.apache.http.ProtocolException $r6;
        java.lang.StringBuilder $r7;
        org.apache.http.StatusLine $r8;
        java.lang.String $r9, $r11;
        org.apache.commons.logging.Log $r10;
        boolean $z0;
        org.apache.http.params.HttpParams $r13;
        java.net.URISyntaxException $r14, $r22, $r23;
        java.lang.Object $r15;
        org.apache.http.HttpHost $r16;
        java.lang.IllegalStateException $r17;
        org.apache.http.HttpRequest $r18;
        org.apache.http.RequestLine $r19;
        org.apache.http.impl.client.RedirectLocations $r20;
        int $i0;
        org.apache.http.client.CircularRedirectException $r21;

        $r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        $r1 := @parameter0: org.apache.http.HttpResponse;

        $r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if $r1 != null goto label01;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r4;

     label01:
        $r5 = interfaceinvoke $r1.<org.apache.http.HttpResponse: org.apache.http.Header getFirstHeader(java.lang.String)>("location");

        if $r5 != null goto label02;

        $r6 = new org.apache.http.ProtocolException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received redirect response ");

        $r8 = interfaceinvoke $r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but no location header");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label02:
        $r9 = interfaceinvoke $r5.<org.apache.http.Header: java.lang.String getValue()>();

        $r10 = $r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log>;

        $z0 = interfaceinvoke $r10.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label03;

        $r10 = $r0.<org.apache.http.impl.client.DefaultRedirectHandler: org.apache.commons.logging.Log log>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Redirect requested to location \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r11);

     label03:
        $r12 = new java.net.URI;

     label04:
        specialinvoke $r12.<java.net.URI: void <init>(java.lang.String)>($r9);

     label05:
        $r13 = interfaceinvoke $r1.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $z0 = virtualinvoke $r12.<java.net.URI: boolean isAbsolute()>();

        if $z0 != 0 goto label10;

        $z0 = interfaceinvoke $r13.<org.apache.http.params.HttpParams: boolean isParameterTrue(java.lang.String)>("http.protocol.reject-relative-redirect");

        if $z0 == 0 goto label07;

        $r6 = new org.apache.http.ProtocolException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Relative redirect location \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' not allowed");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ProtocolException: void <init>(java.lang.String)>($r9);

        throw $r6;

     label06:
        $r14 := @caughtexception;

        $r6 = new org.apache.http.ProtocolException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid redirect URI: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r14);

        throw $r6;

     label07:
        $r15 = interfaceinvoke $r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.target_host");

        $r16 = (org.apache.http.HttpHost) $r15;

        if $r16 != null goto label08;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Target host not available in the HTTP context");

        throw $r17;

     label08:
        $r15 = interfaceinvoke $r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.request");

        $r18 = (org.apache.http.HttpRequest) $r15;

        $r3 = new java.net.URI;

     label09:
        $r19 = interfaceinvoke $r18.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r9 = interfaceinvoke $r19.<org.apache.http.RequestLine: java.lang.String getUri()>();

        specialinvoke $r3.<java.net.URI: void <init>(java.lang.String)>($r9);

        $r3 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>($r3, $r16, 1);

        $r12 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI resolve(java.net.URI,java.net.URI)>($r3, $r12);

     label10:
        $z0 = interfaceinvoke $r13.<org.apache.http.params.HttpParams: boolean isParameterFalse(java.lang.String)>("http.protocol.allow-circular-redirects");

        if $z0 == 0 goto label18;

        $r15 = interfaceinvoke $r2.<org.apache.http.protocol.HttpContext: java.lang.Object getAttribute(java.lang.String)>("http.protocol.redirect-locations");

        $r20 = (org.apache.http.impl.client.RedirectLocations) $r15;

        if $r20 != null goto label11;

        $r20 = new org.apache.http.impl.client.RedirectLocations;

        specialinvoke $r20.<org.apache.http.impl.client.RedirectLocations: void <init>()>();

        interfaceinvoke $r2.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.protocol.redirect-locations", $r20);

     label11:
        $r9 = virtualinvoke $r12.<java.net.URI: java.lang.String getFragment()>();

        if $r9 == null goto label16;

        $r16 = new org.apache.http.HttpHost;

     label12:
        $r9 = virtualinvoke $r12.<java.net.URI: java.lang.String getHost()>();

        $i0 = virtualinvoke $r12.<java.net.URI: int getPort()>();

        $r11 = virtualinvoke $r12.<java.net.URI: java.lang.String getScheme()>();

        specialinvoke $r16.<org.apache.http.HttpHost: void <init>(java.lang.String,int,java.lang.String)>($r9, $i0, $r11);

        $r3 = staticinvoke <org.apache.http.client.utils.URIUtils: java.net.URI rewriteURI(java.net.URI,org.apache.http.HttpHost,boolean)>($r12, $r16, 1);

     label13:
        $z0 = virtualinvoke $r20.<org.apache.http.impl.client.RedirectLocations: boolean contains(java.net.URI)>($r3);

        if $z0 == 0 goto label17;

        $r21 = new org.apache.http.client.CircularRedirectException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Circular redirect to \'");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<org.apache.http.client.CircularRedirectException: void <init>(java.lang.String)>($r9);

        throw $r21;

     label14:
        $r22 := @caughtexception;

        $r6 = new org.apache.http.ProtocolException;

        $r9 = virtualinvoke $r22.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r22);

        throw $r6;

     label15:
        $r23 := @caughtexception;

        $r6 = new org.apache.http.ProtocolException;

        $r9 = virtualinvoke $r23.<java.net.URISyntaxException: java.lang.String getMessage()>();

        specialinvoke $r6.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r23);

        throw $r6;

     label16:
        $r3 = $r12;

        goto label13;

     label17:
        virtualinvoke $r20.<org.apache.http.impl.client.RedirectLocations: void add(java.net.URI)>($r3);

        return $r12;

     label18:
        return $r12;

        catch java.net.URISyntaxException from label04 to label05 with label06;
        catch java.net.URISyntaxException from label09 to label10 with label14;
        catch java.net.URISyntaxException from label12 to label13 with label15;
    }

    public boolean isRedirectRequested(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)
    {
        org.apache.http.impl.client.DefaultRedirectHandler $r0;
        org.apache.http.HttpResponse $r1;
        org.apache.http.protocol.HttpContext $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.http.StatusLine $r4;
        int $i0;

        $r0 := @this: org.apache.http.impl.client.DefaultRedirectHandler;

        $r1 := @parameter0: org.apache.http.HttpResponse;

        $r2 := @parameter1: org.apache.http.protocol.HttpContext;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP response may not be null");

        throw $r3;

     label1:
        $r4 = interfaceinvoke $r1.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r4.<org.apache.http.StatusLine: int getStatusCode()>();

        lookupswitch($i0)
        {
            case 301: goto label3;
            case 302: goto label3;
            case 303: goto label3;
            case 304: goto label2;
            case 305: goto label2;
            case 306: goto label2;
            case 307: goto label3;
            default: goto label2;
        };

     label2:
        return 0;

     label3:
        return 1;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.client.DefaultRedirectHandler: java.lang.String REDIRECT_LOCATIONS> = "http.protocol.redirect-locations";

        return;
    }
}
