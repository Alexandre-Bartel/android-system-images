public class android.util.EventLogFunctionalTest extends junit.framework.TestCase
{
    private static final int STARTING_POS_OF_PAYLOAD;
    private static final java.lang.String TAG;
    private static final int TAG_SIZE;
    private static final int TEST_TAG;
    private static final int TEST_TAG2;
    private static final int TYPE_FIELD_SIZE;

    public void <init>()
    {
        android.util.EventLogFunctionalTest $r0;

        $r0 := @this: android.util.EventLogFunctionalTest;

        specialinvoke $r0.<junit.framework.TestCase: void <init>()>();

        return;
    }

    public void disableTestReadCompoundEntry() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        long $l0, $l1, $l2;
        java.util.ArrayList $r1;
        android.util.EventLog$List $r2, $r5;
        java.lang.Object[] $r3, $r6;
        java.lang.Long $r4;
        java.lang.Integer $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r9;
        int[] $r10;
        boolean $z0, $z1;
        java.util.Iterator $r11;
        java.lang.Object $r12;
        android.util.EventLog$Event $r13;
        byte $b3;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = new android.util.EventLog$List;

        $r3 = newarray (java.lang.Object)[3];

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        $r3[0] = $r4;

        $r5 = new android.util.EventLog$List;

        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = "2";

        $r6[1] = "three";

        $r6[2] = "4";

        specialinvoke $r5.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r6);

        $r3[1] = $r5;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        $r3[2] = $r7;

        specialinvoke $r2.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r3);

        staticinvoke <android.util.EventLog: int writeEvent(int,android.util.EventLog$List)>(2719, $r2);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrote compound event at T=");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EventLogFunctionalTest", $r9);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r10 = newarray (int)[1];

        $r10[0] = 2719;

        staticinvoke <android.util.EventLog: void readEvents(int[],java.util.Collection)>($r10, $r1);

        $z0 = 0;

        $r11 = virtualinvoke $r1.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (android.util.EventLog$Event) $r12;

        $l0 = virtualinvoke $r13.<android.util.EventLog$Event: long getTimeNanos()>();

        $l0 = $l0 / 1000000L;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Found event T=");

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EventLogFunctionalTest", $r9);

        $l2 = $l1 - 100L;

        $b3 = $l0 cmp $l2;

        if $b3 <= 0 goto label1;

        $l2 = 1000L + $l1;

        $b3 = $l0 cmp $l2;

        if $b3 >= 0 goto label1;

        $r12 = virtualinvoke $r13.<android.util.EventLog$Event: java.lang.Object getData()>();

        $r2 = (android.util.EventLog$List) $r12;

        $b3 = virtualinvoke $r2.<android.util.EventLog$List: byte getNumItems()>();

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(int,int)>($b3, 3);

        $r12 = virtualinvoke $r2.<android.util.EventLog$List: java.lang.Object getItem(int)>(1);

        $r5 = (android.util.EventLog$List) $r12;

        $b3 = virtualinvoke $r5.<android.util.EventLog$List: byte getNumItems()>();

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(int,int)>($b3, 3);

        $r12 = virtualinvoke $r2.<android.util.EventLog$List: java.lang.Object getItem(int)>(0);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L);

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r4);

        $r12 = virtualinvoke $r5.<android.util.EventLog$List: java.lang.Object getItem(int)>(0);

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, "2");

        $r12 = virtualinvoke $r5.<android.util.EventLog$List: java.lang.Object getItem(int)>(1);

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, "three");

        $r12 = virtualinvoke $r5.<android.util.EventLog$List: java.lang.Object getItem(int)>(2);

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, "4");

        $r12 = virtualinvoke $r2.<android.util.EventLog$List: java.lang.Object getItem(int)>(2);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.Object,java.lang.Object)>($r12, $r7);

        staticinvoke <android.util.EventLogFunctionalTest: void assertFalse(boolean)>($z0);

        $z0 = 1;

        goto label1;

     label2:
        staticinvoke <android.util.EventLogFunctionalTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void disableTestReadSimpleEvent() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        long $l0, $l1, $l3;
        java.util.ArrayList $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r3;
        int[] $r4;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        java.lang.Object $r6;
        android.util.EventLog$Event $r7;
        int $i2, $i5;
        byte $b4;
        java.lang.Integer $r8;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(2718, 12345);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrote simple event at T=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EventLogFunctionalTest", $r3);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r4 = newarray (int)[1];

        $r4[0] = 2718;

        staticinvoke <android.util.EventLog: void readEvents(int[],java.util.Collection)>($r4, $r1);

        $z0 = 0;

        $r5 = virtualinvoke $r1.<java.util.AbstractList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (android.util.EventLog$Event) $r6;

        $i2 = virtualinvoke $r7.<android.util.EventLog$Event: int getTag()>();

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(int,int)>($i2, 2718);

        $l0 = virtualinvoke $r7.<android.util.EventLog$Event: long getTimeNanos()>();

        $l0 = $l0 / 1000000L;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  Found event T=");

        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("EventLogFunctionalTest", $r3);

        $l3 = $l1 - 100L;

        $b4 = $l0 cmp $l3;

        if $b4 <= 0 goto label1;

        $l3 = 1000L + $l1;

        $b4 = $l0 cmp $l3;

        if $b4 >= 0 goto label1;

        $i2 = virtualinvoke $r7.<android.util.EventLog$Event: int getProcessId()>();

        $i5 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(int,int)>($i2, $i5);

        $i2 = virtualinvoke $r7.<android.util.EventLog$Event: int getThreadId()>();

        $i5 = staticinvoke <android.os.Process: int myTid()>();

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(int,int)>($i2, $i5);

        $r6 = virtualinvoke $r7.<android.util.EventLog$Event: java.lang.Object getData()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12345);

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.Object,java.lang.Object)>($r6, $r8);

        staticinvoke <android.util.EventLogFunctionalTest: void assertFalse(boolean)>($z0);

        $z0 = 1;

        goto label1;

     label2:
        staticinvoke <android.util.EventLogFunctionalTest: void assertTrue(boolean)>($z0);

        return;
    }

    public void testEventLargerThanInitialBufferCapacity() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        java.lang.Integer[] $r1;
        android.util.EventLog$List $r2;
        int $i0, $i1;
        java.lang.Integer $r3;
        java.lang.Object[] $r4;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $r1 = newarray (java.lang.Integer)[127];

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[$i0] = $r3;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r2 = new android.util.EventLog$List;

        $r4 = (java.lang.Object[]) $r1;

        specialinvoke $r2.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r4);

        $i0 = staticinvoke <android.util.EventLog: int writeEvent(int,android.util.EventLog$List)>(42, $r2);

        $i1 = lengthof $r1;

        $i1 = $i1 * 5;

        $i1 = $i1 + 6;

        $i1 = $i1 + 1;

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>($i1, $i0);

        return;
    }

    public void testEventLogTagsFile() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        android.util.EventLogTags $r1;
        android.util.EventLogTags$Description $r2;
        int $i0;
        java.lang.String $r3;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $r1 = new android.util.EventLogTags;

        specialinvoke $r1.<android.util.EventLogTags: void <init>()>();

        $r2 = virtualinvoke $r1.<android.util.EventLogTags: android.util.EventLogTags$Description get(java.lang.String)>("answer");

        $i0 = $r2.<android.util.EventLogTags$Description: int mTag>;

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(int,int)>($i0, 42);

        $r2 = virtualinvoke $r1.<android.util.EventLogTags: android.util.EventLogTags$Description get(java.lang.String)>("pi");

        $i0 = $r2.<android.util.EventLogTags$Description: int mTag>;

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(int,int)>($i0, 314);

        $r2 = virtualinvoke $r1.<android.util.EventLogTags: android.util.EventLogTags$Description get(java.lang.String)>("e");

        $i0 = $r2.<android.util.EventLogTags$Description: int mTag>;

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(int,int)>($i0, 2718);

        $r2 = virtualinvoke $r1.<android.util.EventLogTags: android.util.EventLogTags$Description get(int)>(42);

        $r3 = $r2.<android.util.EventLogTags$Description: java.lang.String mName>;

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.String,java.lang.String)>($r3, "answer");

        $r2 = virtualinvoke $r1.<android.util.EventLogTags: android.util.EventLogTags$Description get(int)>(314);

        $r3 = $r2.<android.util.EventLogTags$Description: java.lang.String mName>;

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.String,java.lang.String)>($r3, "pi");

        $r2 = virtualinvoke $r1.<android.util.EventLogTags: android.util.EventLogTags$Description get(int)>(2718);

        $r3 = $r2.<android.util.EventLogTags$Description: java.lang.String mName>;

        staticinvoke <android.util.EventLogFunctionalTest: void assertEquals(java.lang.String,java.lang.String)>($r3, "e");

        return;
    }

    public void testLogOfListWithEmbeddedList() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        android.util.EventLog$List $r1, $r2;
        java.lang.Object[] $r3, $r4;
        java.lang.Integer $r5;
        int $i0;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $r1 = new android.util.EventLog$List;

        $r3 = newarray (java.lang.Object)[1];

        $r2 = new android.util.EventLog$List;

        $r4 = newarray (java.lang.Object)[3];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1234);

        $r4[0] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2345);

        $r4[1] = $r5;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3456);

        $r4[2] = $r5;

        specialinvoke $r2.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r4);

        $r3[0] = $r2;

        specialinvoke $r1.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r3);

        $i0 = staticinvoke <android.util.EventLog: int writeEvent(int,android.util.EventLog$List)>(42, $r1);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(24, $i0);

        return;
    }

    public void testLogOfListWithMultipleInts() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        android.util.EventLog$List $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        int $i0;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $r1 = new android.util.EventLog$List;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1234);

        $r2[0] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2345);

        $r2[1] = $r3;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3456);

        $r2[2] = $r3;

        specialinvoke $r1.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r2);

        $i0 = staticinvoke <android.util.EventLog: int writeEvent(int,android.util.EventLog$List)>(42, $r1);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(22, $i0);

        return;
    }

    public void testLogOfListWithOneInt() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        android.util.EventLog$List $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        int $i0;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $r1 = new android.util.EventLog$List;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1234);

        $r2[0] = $r3;

        specialinvoke $r1.<android.util.EventLog$List: void <init>(java.lang.Object[])>($r2);

        $i0 = staticinvoke <android.util.EventLog: int writeEvent(int,android.util.EventLog$List)>(42, $r1);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(12, $i0);

        return;
    }

    public void testLogOfPosInt() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        int $i0;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $i0 = staticinvoke <android.util.EventLog: int writeEvent(int,int)>(42, 16909060);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(9, $i0);

        return;
    }

    public void testLogOfPosLong() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        int $i0;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $i0 = staticinvoke <android.util.EventLog: int writeEvent(int,long)>(314, 72623859790382856L);

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(13, $i0);

        return;
    }

    public void testLogOfString() throws java.lang.Exception
    {
        android.util.EventLogFunctionalTest $r0;
        java.lang.String $r1;
        int $i0, $i1;

        $r0 := @this: android.util.EventLogFunctionalTest;

        $r1 = "foo bar baz";

        $i0 = staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.String)>(42, "foo bar baz");

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = $i1 + 9;

        $i1 = $i1 + 1;

        staticinvoke <junit.framework.Assert: void assertEquals(int,int)>($i1, $i0);

        return;
    }

    public static void <clinit>()
    {
        <android.util.EventLogFunctionalTest: int TYPE_FIELD_SIZE> = 1;

        <android.util.EventLogFunctionalTest: int TEST_TAG2> = 314;

        <android.util.EventLogFunctionalTest: int TEST_TAG> = 42;

        <android.util.EventLogFunctionalTest: int TAG_SIZE> = 4;

        <android.util.EventLogFunctionalTest: java.lang.String TAG> = "EventLogFunctionalTest";

        <android.util.EventLogFunctionalTest: int STARTING_POS_OF_PAYLOAD> = 5;

        return;
    }
}
