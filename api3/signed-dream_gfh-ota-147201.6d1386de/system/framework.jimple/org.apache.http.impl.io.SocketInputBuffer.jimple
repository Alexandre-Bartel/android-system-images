public class org.apache.http.impl.io.SocketInputBuffer extends org.apache.http.impl.io.AbstractSessionInputBuffer
{
    private static final java.lang.Class SOCKET_TIMEOUT_CLASS;
    private final java.net.Socket socket;

    static void <clinit>()
    {
        java.lang.Class $r0;

        $r0 = staticinvoke <org.apache.http.impl.io.SocketInputBuffer: java.lang.Class SocketTimeoutExceptionClass()>();

        <org.apache.http.impl.io.SocketInputBuffer: java.lang.Class SOCKET_TIMEOUT_CLASS> = $r0;

        return;
    }

    public void <init>(java.net.Socket, int, org.apache.http.params.HttpParams) throws java.io.IOException
    {
        org.apache.http.impl.io.SocketInputBuffer $r0;
        java.net.Socket $r1;
        org.apache.http.params.HttpParams $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.io.InputStream $r4;

        $r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        $r1 := @parameter0: java.net.Socket;

        $i0 := @parameter1: int;

        $r2 := @parameter2: org.apache.http.params.HttpParams;

        specialinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r3;

     label1:
        $r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket> = $r1;

        if $i0 >= 0 goto label2;

        $i0 = virtualinvoke $r1.<java.net.Socket: int getReceiveBufferSize()>();

     label2:
        if $i0 >= 1024 goto label3;

        $i0 = 1024;

     label3:
        $r4 = virtualinvoke $r1.<java.net.Socket: java.io.InputStream getInputStream()>();

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: void init(java.io.InputStream,int,org.apache.http.params.HttpParams)>($r4, $i0, $r2);

        return;
    }

    private static java.lang.Class SocketTimeoutExceptionClass()
    {
        java.lang.Class $r0;
        java.lang.ClassNotFoundException $r1;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.net.SocketTimeoutException");

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static boolean isSocketTimeoutException(java.io.InterruptedIOException)
    {
        java.io.InterruptedIOException $r0;
        boolean $z0;
        java.lang.Class $r1;

        $r0 := @parameter0: java.io.InterruptedIOException;

        $r1 = <org.apache.http.impl.io.SocketInputBuffer: java.lang.Class SOCKET_TIMEOUT_CLASS>;

        if $r1 == null goto label1;

        $r1 = <org.apache.http.impl.io.SocketInputBuffer: java.lang.Class SOCKET_TIMEOUT_CLASS>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>($r0);

        return $z0;

     label1:
        return 1;
    }

    public boolean isDataAvailable(int) throws java.io.IOException
    {
        org.apache.http.impl.io.SocketInputBuffer $r0;
        int $i0, $i1;
        java.net.Socket $r1;
        boolean $z0, $z1;
        java.io.InterruptedIOException $r2;
        java.lang.Throwable $r3;

        $r0 := @this: org.apache.http.impl.io.SocketInputBuffer;

        $i0 := @parameter0: int;

        $z0 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

        if $z0 != 0 goto label8;

        $r1 = $r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        $i1 = virtualinvoke $r1.<java.net.Socket: int getSoTimeout()>();

     label1:
        $r1 = $r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

     label2:
        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i0);

        virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: int fillBuffer()>();

        $z0 = virtualinvoke $r0.<org.apache.http.impl.io.AbstractSessionInputBuffer: boolean hasBufferedData()>();

     label3:
        $r1 = $r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i1);

        return $z0;

     label4:
        $r2 := @caughtexception;

     label5:
        $z1 = staticinvoke <org.apache.http.impl.io.SocketInputBuffer: boolean isSocketTimeoutException(java.io.InterruptedIOException)>($r2);

        if $z1 != 0 goto label7;

        throw $r2;

     label6:
        $r3 := @caughtexception;

        $r1 = $r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i1);

        throw $r3;

     label7:
        $r1 = $r0.<org.apache.http.impl.io.SocketInputBuffer: java.net.Socket socket>;

        virtualinvoke $r1.<java.net.Socket: void setSoTimeout(int)>($i1);

        return $z0;

     label8:
        return $z0;

        catch java.io.InterruptedIOException from label2 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label5 to label6 with label6;
    }
}
