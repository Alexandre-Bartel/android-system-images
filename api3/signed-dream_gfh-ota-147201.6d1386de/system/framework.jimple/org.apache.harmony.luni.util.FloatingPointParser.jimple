public final class org.apache.harmony.luni.util.FloatingPointParser extends java.lang.Object
{

    public void <init>()
    {
        org.apache.harmony.luni.util.FloatingPointParser $r0;

        $r0 := @this: org.apache.harmony.luni.util.FloatingPointParser;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair initialParse(java.lang.String, int)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1, $i2, $i3, $i5;
        boolean $z0;
        java.lang.NumberFormatException $r1;
        char $c4;
        java.lang.StringBuilder $r3;
        org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair $r4;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $z0 = 0;

        $i1 = 0;

        $i2 = 0;

        if $i0 != 0 goto label01;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label01:
        $i3 = $i0 - 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 == 68 goto label02;

        if $c4 == 100 goto label02;

        if $c4 == 70 goto label02;

        if $c4 != 102 goto label03;

     label02:
        $i0 = $i0 + -1;

        if $i0 != 0 goto label03;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label03:
        $i3 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(69);

        $i5 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(101);

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i5);

        $i3 = $i5;

        if $i5 <= -1 goto label09;

        $i1 = $i5 + 1;

        if $i1 != $i0 goto label04;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label04:
        $i1 = $i5 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        if $c4 != 43 goto label06;

        $i5 = $i1 + 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i5);

        if $c4 != 45 goto label05;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label05:
        $i1 = $i1 + 1;

     label06:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label07:
        if $i0 != 0 goto label10;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label08:
        $r1 := @caughtexception;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label09:
        $i3 = $i0;

        goto label07;

     label10:
        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        if $c4 != 45 goto label12;

        $i0 = $i0 + -1;

        $i2 = 0 + 1;

        $z0 = 1;

     label11:
        if $i0 != 0 goto label13;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label12:
        if $c4 != 43 goto label11;

        $i0 = $i0 + -1;

        $i2 = 0 + 1;

        goto label11;

     label13:
        $i5 = virtualinvoke $r0.<java.lang.String: int indexOf(int)>(46);

        if $i5 <= -1 goto label15;

        $i0 = $i3 - $i5;

        $i0 = $i0 - 1;

        $i0 = $i1 - $i0;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i5);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i2 = $i5 + 1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        $r0 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i1 != 0 goto label16;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;

     label15:
        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $i0 = $i1;

        goto label14;

     label16:
        $i2 = $i1;

     label17:
        if $i2 <= 1 goto label18;

        $i3 = $i2 - 1;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 48 goto label18;

        $i2 = $i2 + -1;

        goto label17;

     label18:
        $i3 = 0;

     label19:
        $i5 = $i2 - 1;

        if $i3 >= $i5 goto label20;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 48 goto label20;

        $i3 = $i3 + 1;

        goto label19;

     label20:
        if $i2 != $i1 goto label21;

        if $i3 == 0 goto label23;

     label21:
        $i1 = $i1 - $i2;

        $i0 = $i1 + $i0;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

     label22:
        $r4 = new org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair;

        specialinvoke $r4.<org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair: void <init>(java.lang.String,int,boolean)>($r0, $i0, $z0);

        return $r4;

     label23:
        goto label22;

        catch java.lang.NumberFormatException from label06 to label07 with label08;
    }

    private static native double parseDblImpl(java.lang.String, int);

    private static double parseDblName(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        java.lang.NumberFormatException $r1;
        boolean $z0, $z1;
        byte $b1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 == 3 goto label1;

        if $i0 == 4 goto label1;

        if $i0 == 8 goto label1;

        if $i0 == 9 goto label1;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;

     label1:
        $z0 = 0;

        $b1 = 0;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c2)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label3;
            default: goto label2;
        };

     label2:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, $b1, "Infinity", 0, 8);

        if $z1 == 0 goto label6;

        if $z0 == 0 goto label5;

        return #-Infinity;

     label3:
        $z0 = 1;

     label4:
        $b1 = 1;

        goto label2;

     label5:
        return #Infinity;

     label6:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, $b1, "NaN", 0, 3);

        if $z0 == 0 goto label7;

        return #NaN;

     label7:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;
    }

    public static double parseDouble(java.lang.String)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1;
        java.lang.NumberFormatException $r1;
        char $c2;
        double $d0, $d1;
        org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label1:
        $i1 = $i0 - 1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        if $c2 == 121 goto label2;

        if $c2 != 78 goto label3;

     label2:
        $d0 = staticinvoke <org.apache.harmony.luni.util.FloatingPointParser: double parseDblName(java.lang.String,int)>($r0, $i0);

        return $d0;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("0x");

        if $i1 == -1 goto label4;

        $d0 = staticinvoke <org.apache.harmony.luni.util.HexStringParser: double parseDouble(java.lang.String)>($r0);

        return $d0;

     label4:
        $r3 = staticinvoke <org.apache.harmony.luni.util.FloatingPointParser: org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair initialParse(java.lang.String,int)>($r0, $i0);

        $r0 = $r3.<org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair: java.lang.String s>;

        $i0 = $r3.<org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair: int e>;

        $d0 = staticinvoke <org.apache.harmony.luni.util.FloatingPointParser: double parseDblImpl(java.lang.String,int)>($r0, $i0);

        $d1 = $d0;

        $z0 = $r3.<org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair: boolean negative>;

        if $z0 == 0 goto label5;

        $d1 = neg $d0;

     label5:
        return $d1;
    }

    public static float parseFloat(java.lang.String)
    {
        java.lang.String $r0, $r2;
        int $i0, $i1;
        java.lang.NumberFormatException $r1;
        char $c2;
        float $f0, $f1;
        org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair $r3;
        boolean $z0;

        $r0 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r0);

        throw $r1;

     label1:
        $i1 = $i0 - 1;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        if $c2 == 121 goto label2;

        if $c2 != 78 goto label3;

     label2:
        $f0 = staticinvoke <org.apache.harmony.luni.util.FloatingPointParser: float parseFltName(java.lang.String,int)>($r0, $i0);

        return $f0;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("0x");

        if $i1 == -1 goto label4;

        $f0 = staticinvoke <org.apache.harmony.luni.util.HexStringParser: float parseFloat(java.lang.String)>($r0);

        return $f0;

     label4:
        $r3 = staticinvoke <org.apache.harmony.luni.util.FloatingPointParser: org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair initialParse(java.lang.String,int)>($r0, $i0);

        $r0 = $r3.<org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair: java.lang.String s>;

        $i0 = $r3.<org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair: int e>;

        $f0 = staticinvoke <org.apache.harmony.luni.util.FloatingPointParser: float parseFltImpl(java.lang.String,int)>($r0, $i0);

        $f1 = $f0;

        $z0 = $r3.<org.apache.harmony.luni.util.FloatingPointParser$StringExponentPair: boolean negative>;

        if $z0 == 0 goto label5;

        $f1 = neg $f0;

     label5:
        return $f1;
    }

    private static native float parseFltImpl(java.lang.String, int);

    private static float parseFltName(java.lang.String, int)
    {
        java.lang.String $r0;
        int $i0;
        java.lang.NumberFormatException $r1;
        boolean $z0, $z1;
        byte $b1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        if $i0 == 3 goto label1;

        if $i0 == 4 goto label1;

        if $i0 == 8 goto label1;

        if $i0 == 9 goto label1;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;

     label1:
        $z0 = 0;

        $b1 = 0;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c2)
        {
            case 43: goto label4;
            case 44: goto label2;
            case 45: goto label3;
            default: goto label2;
        };

     label2:
        $z1 = virtualinvoke $r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, $b1, "Infinity", 0, 8);

        if $z1 == 0 goto label6;

        if $z0 == 0 goto label5;

        return #-InfinityF;

     label3:
        $z0 = 1;

     label4:
        $b1 = 1;

        goto label2;

     label5:
        return #InfinityF;

     label6:
        $z0 = virtualinvoke $r0.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(0, $b1, "NaN", 0, 3);

        if $z0 == 0 goto label7;

        return #NaNF;

     label7:
        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>()>();

        throw $r1;
    }
}
