public class android.test.ViewAsserts extends java.lang.Object
{

    private void <init>()
    {
        android.test.ViewAsserts $r0;

        $r0 := @this: android.test.ViewAsserts;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void assertBaselineAligned(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = $r2[1];

        $i1 = virtualinvoke $r0.<android.view.View: int getBaseline()>();

        $i0 = $i0 + $i1;

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[1];

        $i2 = virtualinvoke $r1.<android.view.View: int getBaseline()>();

        $i1 = $i1 + $i2;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not baseline aligned", $i0, $i1);

        return;
    }

    public static void assertBottomAligned(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = $r2[1];

        $i1 = virtualinvoke $r0.<android.view.View: int getMeasuredHeight()>();

        $i0 = $i0 + $i1;

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[1];

        $i2 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i1 = $i1 + $i2;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not bottom aligned", $i0, $i1);

        return;
    }

    public static void assertBottomAligned(android.view.View, android.view.View, int)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[1];

        $i2 = virtualinvoke $r0.<android.view.View: int getMeasuredHeight()>();

        $i1 = $i1 + $i2;

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i2 = $r2[1];

        $i3 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i2 = $i2 + $i3;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not bottom aligned", $i1, $i0);

        return;
    }

    public static void assertGroupContains(android.view.ViewGroup, android.view.View)
    {
        android.view.ViewGroup $r0;
        android.view.View $r1, $r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: android.view.ViewGroup;

        $r1 := @parameter1: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.ViewGroup: int getChildCount()>();

        if $i0 < 0 goto label4;

        $z0 = 1;

     label1:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("Child count should be >= 0", $z0);

        $z0 = 0;

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label6;

        $r2 = virtualinvoke $r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i1);

        if $r2 != $r1 goto label3;

        if $z0 != 0 goto label5;

        $z0 = 1;

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $z0 = 0;

        goto label1;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("child ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is duplicated in parent");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r4, 0);

        goto label3;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("group does not contain ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r4, $z0);

        return;
    }

    public static void assertGroupIntegrity(android.view.ViewGroup)
    {
        android.view.ViewGroup $r0;
        int $i0, $i1;
        boolean $z0;
        android.view.View $r1;
        android.view.ViewParent $r2;

        $r0 := @parameter0: android.view.ViewGroup;

        $i0 = virtualinvoke $r0.<android.view.ViewGroup: int getChildCount()>();

        if $i0 < 0 goto label3;

        $z0 = 1;

     label1:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("child count should be >= 0", $z0);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label4;

        $r1 = virtualinvoke $r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i1);

        staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.String,java.lang.Object)>("group should not contain null children", $r1);

        $r1 = virtualinvoke $r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i1);

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewParent getParent()>();

        staticinvoke <junit.framework.Assert: void assertSame(java.lang.Object,java.lang.Object)>($r0, $r2);

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        return;
    }

    public static void assertGroupNotContains(android.view.ViewGroup, android.view.View)
    {
        android.view.ViewGroup $r0;
        android.view.View $r1, $r2;
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;

        $r0 := @parameter0: android.view.ViewGroup;

        $r1 := @parameter1: android.view.View;

        $i0 = virtualinvoke $r0.<android.view.ViewGroup: int getChildCount()>();

        if $i0 < 0 goto label4;

        $z0 = 1;

     label1:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("Child count should be >= 0", $z0);

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label5;

        $r2 = virtualinvoke $r0.<android.view.ViewGroup: android.view.View getChildAt(int)>($i1);

        if $r2 != $r1 goto label3;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("child ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is found in parent");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r4, 0);

     label3:
        $i1 = $i1 + 1;

        goto label2;

     label4:
        $z0 = 0;

        goto label1;

     label5:
        return;
    }

    public static void assertHasScreenCoordinates(android.view.View, android.view.View, int, int)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2, $r3;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $i1 := @parameter3: int;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $r3 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r3);

        $i2 = $r2[0];

        $i3 = $r3[0];

        $i2 = $i2 - $i3;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("x coordinate", $i0, $i2);

        $i0 = $r2[1];

        $i2 = $r3[1];

        $i0 = $i0 - $i2;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("y coordinate", $i1, $i0);

        return;
    }

    public static void assertHorizontalCenterAligned(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[0];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i2 = $r2[0];

        $i0 = virtualinvoke $r0.<android.view.View: int getMeasuredWidth()>();

        $i3 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i0 = $i0 - $i3;

        $i0 = $i0 / 2;

        $i1 = $i2 - $i1;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not horizontally center aligned", $i0, $i1);

        return;
    }

    public static void assertLeftAligned(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int $i0, $i1;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = $r2[0];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[0];

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not left aligned", $i0, $i1);

        return;
    }

    public static void assertLeftAligned(android.view.View, android.view.View, int)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[0];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i2 = $r2[0];

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not left aligned", $i1, $i0);

        return;
    }

    public static void assertOffScreenAbove(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int[] $r2, $r3;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $r3 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r3);

        $i0 = $r2[1];

        $i1 = $r3[1];

        $i0 = $i0 - $i1;

        if $i0 >= 0 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("view should have y location less than that of origin view", $z0);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public static void assertOffScreenBelow(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int[] $r2, $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $r3 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r3);

        $i0 = $r2[1];

        $i1 = $r3[1];

        $i0 = $i0 - $i1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view should have y location on screen greater than drawing height of origen view (");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not greater than ");

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        if $i0 <= $i1 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>($r5, $z0);

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    public static void assertOnScreen(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int[] $r2, $r3;
        int $i0, $i1;
        boolean $z0;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $r3 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r3);

        $i0 = $r2[1];

        $i1 = $r3[1];

        $i0 = $i0 - $i1;

        if $i0 < 0 goto label3;

        $z0 = 1;

     label1:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("view should have positive y coordinate on screen", $z0);

        $r0 = virtualinvoke $r1.<android.view.View: android.view.View getRootView()>();

        $i1 = virtualinvoke $r0.<android.view.View: int getHeight()>();

        if $i0 > $i1 goto label4;

        $z0 = 1;

     label2:
        staticinvoke <junit.framework.Assert: void assertTrue(java.lang.String,boolean)>("view should have y location on screen less than drawing height of root view", $z0);

        return;

     label3:
        $z0 = 0;

        goto label1;

     label4:
        $z0 = 0;

        goto label2;
    }

    public static void assertRightAligned(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = $r2[0];

        $i1 = virtualinvoke $r0.<android.view.View: int getMeasuredWidth()>();

        $i0 = $i0 + $i1;

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[0];

        $i2 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i1 = $i1 + $i2;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not right aligned", $i0, $i1);

        return;
    }

    public static void assertRightAligned(android.view.View, android.view.View, int)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[0];

        $i2 = virtualinvoke $r0.<android.view.View: int getMeasuredWidth()>();

        $i1 = $i1 + $i2;

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i2 = $r2[0];

        $i3 = virtualinvoke $r1.<android.view.View: int getMeasuredWidth()>();

        $i2 = $i2 + $i3;

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not right aligned", $i1, $i0);

        return;
    }

    public static void assertTopAligned(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int $i0, $i1;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i0 = $r2[1];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[1];

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not top aligned", $i0, $i1);

        return;
    }

    public static void assertTopAligned(android.view.View, android.view.View, int)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $i0 := @parameter2: int;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[1];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i2 = $r2[1];

        $i1 = $i1 - $i2;

        $i1 = staticinvoke <java.lang.Math: int abs(int)>($i1);

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not top aligned", $i1, $i0);

        return;
    }

    public static void assertVerticalCenterAligned(android.view.View, android.view.View)
    {
        android.view.View $r0, $r1;
        int $i0, $i1, $i2, $i3;
        int[] $r2;

        $r0 := @parameter0: android.view.View;

        $r1 := @parameter1: android.view.View;

        $r2 = newarray (int)[2];

        virtualinvoke $r0.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i1 = $r2[1];

        virtualinvoke $r1.<android.view.View: void getLocationOnScreen(int[])>($r2);

        $i2 = $r2[1];

        $i0 = virtualinvoke $r0.<android.view.View: int getMeasuredHeight()>();

        $i3 = virtualinvoke $r1.<android.view.View: int getMeasuredHeight()>();

        $i0 = $i0 - $i3;

        $i0 = $i0 / 2;

        $i1 = $i2 - $i1;

        staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,int,int)>("views are not vertically center aligned", $i0, $i1);

        return;
    }
}
