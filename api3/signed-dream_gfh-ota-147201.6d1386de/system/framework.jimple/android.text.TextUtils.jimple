public class android.text.TextUtils extends java.lang.Object
{
    public static final int ABSOLUTE_SIZE_SPAN;
    public static final int ALIGNMENT_SPAN;
    public static final int ANNOTATION;
    public static final int BACKGROUND_COLOR_SPAN;
    public static final int BULLET_SPAN;
    public static final int CAP_MODE_CHARACTERS;
    public static final int CAP_MODE_SENTENCES;
    public static final int CAP_MODE_WORDS;
    public static final android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR;
    private static java.lang.String[] EMPTY_STRING_ARRAY;
    public static final int FOREGROUND_COLOR_SPAN;
    public static final int LEADING_MARGIN_SPAN;
    public static final int QUOTE_SPAN;
    public static final int RELATIVE_SIZE_SPAN;
    public static final int SCALE_X_SPAN;
    public static final int STRIKETHROUGH_SPAN;
    public static final int STYLE_SPAN;
    public static final int SUBSCRIPT_SPAN;
    public static final int SUPERSCRIPT_SPAN;
    public static final int TEXT_APPEARANCE_SPAN;
    public static final int TYPEFACE_SPAN;
    public static final int UNDERLINE_SPAN;
    public static final int URL_SPAN;
    private static java.lang.String sEllipsis;
    private static java.lang.Object sLock;
    private static char[] sTemp;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        android.text.TextUtils$1 $r1;
        java.lang.Object $r2;

        <android.text.TextUtils: int URL_SPAN> = 11;

        <android.text.TextUtils: int UNDERLINE_SPAN> = 6;

        <android.text.TextUtils: int TYPEFACE_SPAN> = 13;

        <android.text.TextUtils: int TEXT_APPEARANCE_SPAN> = 17;

        <android.text.TextUtils: int SUPERSCRIPT_SPAN> = 14;

        <android.text.TextUtils: int SUBSCRIPT_SPAN> = 15;

        <android.text.TextUtils: int STYLE_SPAN> = 7;

        <android.text.TextUtils: int STRIKETHROUGH_SPAN> = 5;

        <android.text.TextUtils: int SCALE_X_SPAN> = 4;

        <android.text.TextUtils: int RELATIVE_SIZE_SPAN> = 3;

        <android.text.TextUtils: int QUOTE_SPAN> = 9;

        <android.text.TextUtils: int LEADING_MARGIN_SPAN> = 10;

        <android.text.TextUtils: int FOREGROUND_COLOR_SPAN> = 2;

        <android.text.TextUtils: int CAP_MODE_WORDS> = 8192;

        <android.text.TextUtils: int CAP_MODE_SENTENCES> = 16384;

        <android.text.TextUtils: int CAP_MODE_CHARACTERS> = 4096;

        <android.text.TextUtils: int BULLET_SPAN> = 8;

        <android.text.TextUtils: int BACKGROUND_COLOR_SPAN> = 12;

        <android.text.TextUtils: int ANNOTATION> = 18;

        <android.text.TextUtils: int ALIGNMENT_SPAN> = 1;

        <android.text.TextUtils: int ABSOLUTE_SIZE_SPAN> = 16;

        $r0 = newarray (java.lang.String)[0];

        <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY> = $r0;

        $r1 = new android.text.TextUtils$1;

        specialinvoke $r1.<android.text.TextUtils$1: void <init>()>();

        <android.text.TextUtils: android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR> = $r1;

        <android.text.TextUtils: java.lang.String sEllipsis> = null;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        <android.text.TextUtils: java.lang.Object sLock> = $r2;

        <android.text.TextUtils: char[] sTemp> = null;

        return;
    }

    private void <init>()
    {
        android.text.TextUtils $r0;

        $r0 := @this: android.text.TextUtils;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$000(android.os.Parcel, android.text.Spannable, java.lang.Object)
    {
        android.os.Parcel $r0;
        android.text.Spannable $r1;
        java.lang.Object $r2;

        $r0 := @parameter0: android.os.Parcel;

        $r1 := @parameter1: android.text.Spannable;

        $r2 := @parameter2: java.lang.Object;

        staticinvoke <android.text.TextUtils: void readSpan(android.os.Parcel,android.text.Spannable,java.lang.Object)>($r0, $r1, $r2);

        return;
    }

    private static java.lang.String blank(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2;
        java.lang.String $r1;
        char[] $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i2);

        if $i0 == 0 goto label1;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r0, 0, $i0, $r2, 0);

     label1:
        if $i1 == $i2 goto label2;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r0, $i1, $i2, $r2, $i1);

     label2:
        if $i0 == $i1 goto label4;

        $r2[$i0] = 8230;

        $i0 = $i0 + 1;

     label3:
        if $i0 >= $i1 goto label4;

        $r2[$i0] = 65279;

        $i0 = $i0 + 1;

        goto label3;

     label4:
        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r2, 0, $i2);

        staticinvoke <android.text.TextUtils: void recycle(char[])>($r2);

        return $r1;
    }

    public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r4, $r8, $r10;
        char[] $r1;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7;
        java.lang.CharSequence $r2;
        android.text.TextPaint $r3, $r6;
        float $f0, $f1, $f2;
        char $c4;
        boolean $z0;
        android.text.Spanned $r5;
        float[] $r7;
        java.lang.StringBuilder $r9;
        byte $b8;
        java.lang.Object[] $r11;
        java.lang.Integer $r12;
        android.text.SpannableStringBuilder $r13;

        $r2 := @parameter0: java.lang.CharSequence;

        $r3 := @parameter1: android.text.TextPaint;

        $f0 := @parameter2: float;

        $r4 := @parameter3: java.lang.String;

        $r0 := @parameter4: java.lang.String;

        $i1 = interfaceinvoke $r2.<java.lang.CharSequence: int length()>();

        $r1 = newarray (char)[$i1];

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r2, 0, $i1, $r1, 0);

        $i2 = 0;

        $i3 = 0;

     label01:
        if $i2 >= $i1 goto label03;

        $c4 = $r1[$i2];

        if $c4 != 44 goto label15;

        $i3 = $i3 + 1;

     label02:
        $i2 = $i2 + 1;

        goto label01;

     label03:
        $z0 = $r2 instanceof android.text.Spanned;

        if $z0 == 0 goto label10;

        $r5 = (android.text.Spanned) $r2;

        $r6 = new android.text.TextPaint;

        specialinvoke $r6.<android.text.TextPaint: void <init>()>();

        $i2 = $i1 * 2;

        $r7 = newarray (float)[$i2];

        $i5 = 0;

     label04:
        if $i5 >= $i1 goto label05;

        $i2 = interfaceinvoke $r5.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>($i5, $i1, class "android/text/style/MetricAffectingSpan");

        staticinvoke <android.text.Styled: int getTextWidths(android.text.TextPaint,android.text.TextPaint,android.text.Spanned,int,int,float[],android.graphics.Paint$FontMetricsInt)>($r3, $r6, $r5, $i5, $i2, $r7, null);

        $i6 = $i1 + $i5;

        $i5 = $i2 - $i5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r7, $i6, $i5);

        $i5 = $i2;

        goto label04;

     label05:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i1, $r7, 0, $i1);

     label06:
        $i2 = 0;

        $i6 = 0;

        $i7 = 0;

        $i5 = 0;

        $r8 = "";

     label07:
        if $i6 >= $i1 goto label12;

        $f1 = (float) $i5;

        $f2 = $r7[$i6];

        $f1 = $f1 + $f2;

        $i5 = (int) $f1;

        $c4 = $r1[$i6];

        if $c4 != 44 goto label14;

        $i2 = $i2 + 1;

        $i0 = $i3 - $i2;

        $i0 = $i0 + 1;

        if $i0 != 1 goto label11;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $f1 = virtualinvoke $r3.<android.graphics.Paint: float measureText(java.lang.String)>($r10);

        $f2 = (float) $i5;

        $f1 = $f1 + $f2;

        $b8 = $f1 cmpg $f0;

        if $b8 > 0 goto label14;

        $i7 = $i6 + 1;

        $r8 = $r10;

     label09:
        $i6 = $i6 + 1;

        goto label07;

     label10:
        $r7 = newarray (float)[$i1];

        virtualinvoke $r3.<android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])>($r2, 0, $i1, $r7);

        goto label06;

     label11:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r11[0] = $r12;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r0, $r11);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label12:
        $f1 = (float) $i5;

        $b8 = $f1 cmpg $f0;

        if $b8 > 0 goto label13;

        return $r2;

     label13:
        $r13 = new android.text.SpannableStringBuilder;

        specialinvoke $r13.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>($r8);

        virtualinvoke $r13.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>(0, $r2, 0, $i7);

        return $r13;

     label14:
        goto label09;

     label15:
        goto label02;
    }

    public static transient java.lang.CharSequence concat(java.lang.CharSequence[])
    {
        java.lang.CharSequence[] $r0;
        android.text.SpannableString $r1, r7;
        java.lang.StringBuilder $r2, r6;
        int $i0, $i1, $i2;
        java.lang.CharSequence $r3;
        boolean $z0, $z1;
        java.lang.String $r4;
        android.text.Spanned $r5;
        android.text.SpannedString r8;

        $r0 := @parameter0: java.lang.CharSequence[];

        $i0 = lengthof $r0;

        if $i0 != 0 goto label01;

        return "";

     label01:
        $i0 = lengthof $r0;

        if $i0 != 1 goto label02;

        $r3 = $r0[0];

        return $r3;

     label02:
        $z0 = 0;

        $i0 = 0;

     label03:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label04;

        $r3 = $r0[$i0];

        $z1 = $r3 instanceof android.text.Spanned;

        if $z1 == 0 goto label06;

        $z0 = 1;

     label04:
        r6 = new java.lang.StringBuilder;

        $r2 = r6;

        specialinvoke r6.<java.lang.StringBuilder: void <init>()>();

        $i0 = 0;

     label05:
        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label07;

        $r3 = $r0[$i0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r3);

        $i0 = $i0 + 1;

        goto label05;

     label06:
        $i0 = $i0 + 1;

        goto label03;

     label07:
        if $z0 != 0 goto label08;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label08:
        r7 = new android.text.SpannableString;

        $r1 = r7;

        specialinvoke r7.<android.text.SpannableString: void <init>(java.lang.CharSequence)>($r2);

        $i0 = 0;

        $i1 = 0;

     label09:
        $i2 = lengthof $r0;

        if $i1 >= $i2 goto label11;

        $r3 = $r0[$i1];

        $i2 = interfaceinvoke $r3.<java.lang.CharSequence: int length()>();

        $r3 = $r0[$i1];

        $z0 = $r3 instanceof android.text.Spanned;

        if $z0 == 0 goto label10;

        $r3 = $r0[$i1];

        $r5 = (android.text.Spanned) $r3;

        staticinvoke <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>($r5, 0, $i2, class "java/lang/Object", $r1, $i0);

     label10:
        $i0 = $i0 + $i2;

        $i1 = $i1 + 1;

        goto label09;

     label11:
        r8 = new android.text.SpannedString;

        specialinvoke r8.<android.text.SpannedString: void <init>(java.lang.CharSequence)>($r1);

        return r8;
    }

    public static void copySpansFrom(android.text.Spanned, int, int, java.lang.Class, android.text.Spannable, int)
    {
        android.text.Spanned $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.text.Spannable $r1;
        java.lang.Class $r2;
        java.lang.Object[] $r3;
        java.lang.Object $r4;

        $r0 := @parameter0: android.text.Spanned;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 := @parameter3: java.lang.Class;

        $r1 := @parameter4: android.text.Spannable;

        $i2 := @parameter5: int;

        if $r2 != null goto label1;

        $r2 = class "java/lang/Object";

     label1:
        $r3 = interfaceinvoke $r0.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>($i0, $i1, $r2);

        $i3 = 0;

     label2:
        $i4 = lengthof $r3;

        if $i3 >= $i4 goto label5;

        $r4 = $r3[$i3];

        $i5 = interfaceinvoke $r0.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r4);

        $i6 = $i5;

        $r4 = $r3[$i3];

        $i7 = interfaceinvoke $r0.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r4);

        $i8 = $i7;

        $r4 = $r3[$i3];

        $i4 = interfaceinvoke $r0.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r4);

        if $i5 >= $i0 goto label3;

        $i6 = $i0;

     label3:
        if $i7 <= $i1 goto label4;

        $i8 = $i1;

     label4:
        $r4 = $r3[$i3];

        $i5 = $i6 - $i0;

        $i5 = $i5 + $i2;

        $i8 = $i8 - $i0;

        $i8 = $i8 + $i2;

        interfaceinvoke $r1.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r4, $i5, $i8, $i4);

        $i3 = $i3 + 1;

        goto label2;

     label5:
        return;
    }

    public static void dumpSpans(java.lang.CharSequence, android.util.Printer, java.lang.String)
    {
        java.lang.CharSequence $r0, $r7;
        android.util.Printer $r1;
        java.lang.String $r2, $r8;
        java.lang.Object $r3;
        boolean $z0;
        android.text.Spanned $r4;
        int $i0, $i1, $i2;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6;
        java.lang.Class $r9;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: android.util.Printer;

        $r2 := @parameter2: java.lang.String;

        $z0 = $r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label2;

        $r4 = (android.text.Spanned) $r0;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r5 = interfaceinvoke $r4.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i0, class "java/lang/Object");

        $i0 = 0;

     label1:
        $i1 = lengthof $r5;

        if $i0 >= $i1 goto label3;

        $r3 = $r5[$i0];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $i1 = interfaceinvoke $r4.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r3);

        $i2 = interfaceinvoke $r4.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r3);

        $r7 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i1, $i2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r3);

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r9.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $i1 = interfaceinvoke $r4.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $i1 = interfaceinvoke $r4.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") fl=#");

        $i1 = interfaceinvoke $r4.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r3);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>($r8);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": (no spans)");

        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>($r2);

        return;

     label3:
        return;
    }

    public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt)
    {
        java.lang.CharSequence $r0;
        android.text.TextPaint $r1;
        float $f0;
        android.text.TextUtils$TruncateAt $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: android.text.TextPaint;

        $f0 := @parameter2: float;

        $r2 := @parameter3: android.text.TextUtils$TruncateAt;

        $r0 = staticinvoke <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)>($r0, $r1, $f0, $r2, 0, null);

        return $r0;
    }

    public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils$TruncateAt, boolean, android.text.TextUtils$EllipsizeCallback)
    {
        android.text.TextUtils$EllipsizeCallback $r0;
        java.lang.CharSequence $r1;
        android.text.TextPaint $r2, $r11;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.text.TextUtils$TruncateAt $r3, $r7;
        boolean $z0, $z1;
        java.lang.String $r4, $r9;
        android.content.res.Resources $r5;
        int $i0, $i2, $i3, $i4;
        byte $b1;
        char[] $r6;
        java.lang.StringBuilder $r8;
        float[] $r10;
        android.text.Spanned $r12;
        android.text.SpannableString $r13;
        android.text.SpannableStringBuilder $r14;

        $r1 := @parameter0: java.lang.CharSequence;

        $r2 := @parameter1: android.text.TextPaint;

        $f0 := @parameter2: float;

        $r3 := @parameter3: android.text.TextUtils$TruncateAt;

        $z0 := @parameter4: boolean;

        $r0 := @parameter5: android.text.TextUtils$EllipsizeCallback;

        $r4 = <android.text.TextUtils: java.lang.String sEllipsis>;

        if $r4 != null goto label01;

        $r5 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r4 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(17039388);

        <android.text.TextUtils: java.lang.String sEllipsis> = $r4;

     label01:
        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        $z1 = $r1 instanceof android.text.Spanned;

        if $z1 != 0 goto label16;

        $f1 = virtualinvoke $r2.<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>($r1, 0, $i0);

        $b1 = $f1 cmpg $f0;

        if $b1 > 0 goto label02;

        if $r0 == null goto label47;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(0, 0);

        return $r1;

     label02:
        $r4 = <android.text.TextUtils: java.lang.String sEllipsis>;

        $f1 = virtualinvoke $r2.<android.graphics.Paint: float measureText(java.lang.String)>($r4);

        $b1 = $f1 cmpl $f0;

        if $b1 <= 0 goto label07;

        if $r0 == null goto label03;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(0, $i0);

     label03:
        if $z0 == 0 goto label06;

        $r6 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i0);

        $i2 = 0;

     label04:
        if $i2 >= $i0 goto label05;

        $r6[$i2] = 65279;

        $i2 = $i2 + 1;

        goto label04;

     label05:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r6, 0, $i0);

        staticinvoke <android.text.TextUtils: void recycle(char[])>($r6);

        return $r4;

     label06:
        return "";

     label07:
        $r7 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt START>;

        if $r3 != $r7 goto label10;

        $f0 = $f0 - $f1;

        $i2 = virtualinvoke $r2.<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>($r1, 0, $i0, 0, $f0, null);

        if $r0 == null goto label08;

        $i3 = $i0 - $i2;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(0, $i3);

     label08:
        if $z0 == 0 goto label09;

        $i0 = $i0 - $i2;

        $r4 = staticinvoke <android.text.TextUtils: java.lang.String blank(java.lang.CharSequence,int,int)>($r1, 0, $i0);

        return $r4;

     label09:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = <android.text.TextUtils: java.lang.String sEllipsis>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $i2 = $i0 - $i2;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i2, $i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label10:
        $r7 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END>;

        if $r3 != $r7 goto label13;

        $f0 = $f0 - $f1;

        $i2 = virtualinvoke $r2.<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>($r1, 0, $i0, 1, $f0, null);

        if $r0 == null goto label11;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>($i2, $i0);

     label11:
        if $z0 == 0 goto label12;

        $r4 = staticinvoke <android.text.TextUtils: java.lang.String blank(java.lang.CharSequence,int,int)>($r1, $i2, $i0);

        return $r4;

     label12:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = <android.text.TextUtils: java.lang.String sEllipsis>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label13:
        $f2 = $f0 - $f1;

        $f2 = $f2 / 2.0F;

        $i2 = virtualinvoke $r2.<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>($r1, 0, $i0, 0, $f2, null);

        $i3 = $i0 - $i2;

        $f2 = virtualinvoke $r2.<android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)>($r1, $i3, $i0);

        $i3 = $i0 - $i2;

        $f0 = $f0 - $f1;

        $f0 = $f0 - $f2;

        $i3 = virtualinvoke $r2.<android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])>($r1, 0, $i3, 1, $f0, null);

        if $r0 == null goto label14;

        $i4 = $i0 - $i2;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>($i3, $i4);

     label14:
        if $z0 == 0 goto label15;

        $i0 = $i0 - $i2;

        $r4 = staticinvoke <android.text.TextUtils: java.lang.String blank(java.lang.CharSequence,int,int)>($r1, $i3, $i0);

        return $r4;

     label15:
        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i3);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r9 = <android.text.TextUtils: java.lang.String sEllipsis>;

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $i2 = $i0 - $i2;

        $r4 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i2, $i0);

        $r8 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;

     label16:
        $i2 = $i0 * 2;

        $r10 = newarray (float)[$i2];

        $r11 = new android.text.TextPaint;

        specialinvoke $r11.<android.text.TextPaint: void <init>()>();

        $r12 = (android.text.Spanned) $r1;

        $i4 = 0;

     label17:
        if $i4 >= $i0 goto label18;

        $i2 = interfaceinvoke $r12.<android.text.Spanned: int nextSpanTransition(int,int,java.lang.Class)>($i4, $i0, class "android/text/style/MetricAffectingSpan");

        staticinvoke <android.text.Styled: int getTextWidths(android.text.TextPaint,android.text.TextPaint,android.text.Spanned,int,int,float[],android.graphics.Paint$FontMetricsInt)>($r2, $r11, $r12, $i4, $i2, $r10, null);

        $i3 = $i0 + $i4;

        $i4 = $i2 - $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r10, $i3, $i4);

        $i4 = $i2;

        goto label17;

     label18:
        $f1 = 0.0F;

        $i2 = 0;

     label19:
        if $i2 >= $i0 goto label20;

        $i3 = $i0 + $i2;

        $f2 = $r10[$i3];

        $f1 = $f1 + $f2;

        $i2 = $i2 + 1;

        goto label19;

     label20:
        $b1 = $f1 cmpg $f0;

        if $b1 > 0 goto label21;

        if $r0 == null goto label48;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(0, 0);

        return $r1;

     label21:
        $r4 = <android.text.TextUtils: java.lang.String sEllipsis>;

        $f1 = virtualinvoke $r2.<android.graphics.Paint: float measureText(java.lang.String)>($r4);

        $b1 = $f1 cmpl $f0;

        if $b1 <= 0 goto label26;

        if $r0 == null goto label22;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(0, $i0);

     label22:
        if $z0 == 0 goto label25;

        $r6 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i0);

        $i2 = 0;

     label23:
        if $i2 >= $i0 goto label24;

        $r6[$i2] = 65279;

        $i2 = $i2 + 1;

        goto label23;

     label24:
        $r13 = new android.text.SpannableString;

        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(char[],int,int)>($r6, 0, $i0);

        specialinvoke $r13.<android.text.SpannableString: void <init>(java.lang.CharSequence)>($r4);

        staticinvoke <android.text.TextUtils: void recycle(char[])>($r6);

        staticinvoke <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>($r12, 0, $i0, class "java/lang/Object", $r13, 0);

        return $r13;

     label25:
        return "";

     label26:
        $r7 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt START>;

        if $r3 != $r7 goto label32;

        $f2 = 0.0F;

        $i2 = $i0;

     label27:
        if $i2 < 0 goto label28;

        $i3 = $i0 + $i2;

        $i3 = $i3 - 1;

        $f3 = $r10[$i3];

        $f4 = $f3 + $f2;

        $f4 = $f4 + $f1;

        $b1 = $f4 cmpl $f0;

        if $b1 <= 0 goto label30;

     label28:
        if $r0 == null goto label29;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>(0, $i2);

     label29:
        if $z0 == 0 goto label31;

        $r13 = new android.text.SpannableString;

        $r4 = staticinvoke <android.text.TextUtils: java.lang.String blank(java.lang.CharSequence,int,int)>($r1, 0, $i2);

        specialinvoke $r13.<android.text.SpannableString: void <init>(java.lang.CharSequence)>($r4);

        staticinvoke <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>($r12, 0, $i0, class "java/lang/Object", $r13, 0);

        return $r13;

     label30:
        $f2 = $f2 + $f3;

        $i2 = $i2 + -1;

        goto label27;

     label31:
        $r14 = new android.text.SpannableStringBuilder;

        $r4 = <android.text.TextUtils: java.lang.String sEllipsis>;

        specialinvoke $r14.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>($r4);

        virtualinvoke $r14.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>(1, $r1, $i2, $i0);

        return $r14;

     label32:
        $r7 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt END>;

        if $r3 != $r7 goto label38;

        $f2 = 0.0F;

        $i2 = 0;

     label33:
        if $i2 >= $i0 goto label34;

        $i3 = $i0 + $i2;

        $f3 = $r10[$i3];

        $f4 = $f3 + $f2;

        $f4 = $f4 + $f1;

        $b1 = $f4 cmpl $f0;

        if $b1 <= 0 goto label36;

     label34:
        if $r0 == null goto label35;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>($i2, $i0);

     label35:
        if $z0 == 0 goto label37;

        $r13 = new android.text.SpannableString;

        $r4 = staticinvoke <android.text.TextUtils: java.lang.String blank(java.lang.CharSequence,int,int)>($r1, $i2, $i0);

        specialinvoke $r13.<android.text.SpannableString: void <init>(java.lang.CharSequence)>($r4);

        staticinvoke <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>($r12, 0, $i0, class "java/lang/Object", $r13, 0);

        return $r13;

     label36:
        $f2 = $f2 + $f3;

        $i2 = $i2 + 1;

        goto label33;

     label37:
        $r14 = new android.text.SpannableStringBuilder;

        $r4 = <android.text.TextUtils: java.lang.String sEllipsis>;

        specialinvoke $r14.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>($r4);

        virtualinvoke $r14.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>(0, $r1, 0, $i2);

        return $r14;

     label38:
        $f2 = 0.0F;

        $f3 = $f0 - $f1;

        $f3 = $f3 / 2.0F;

        $i2 = $i0;

     label39:
        if $i2 < 0 goto label40;

        $i3 = $i0 + $i2;

        $i3 = $i3 - 1;

        $f4 = $r10[$i3];

        $f5 = $f4 + $f2;

        $b1 = $f5 cmpl $f3;

        if $b1 <= 0 goto label44;

     label40:
        $f0 = $f0 - $f1;

        $f0 = $f0 - $f2;

        $i3 = 0;

        $f1 = 0.0F;

     label41:
        if $i3 >= $i2 goto label42;

        $i4 = $i0 + $i3;

        $f2 = $r10[$i4];

        $f3 = $f2 + $f1;

        $b1 = $f3 cmpl $f0;

        if $b1 <= 0 goto label45;

     label42:
        if $r0 == null goto label43;

        interfaceinvoke $r0.<android.text.TextUtils$EllipsizeCallback: void ellipsized(int,int)>($i3, $i2);

     label43:
        if $z0 == 0 goto label46;

        $r13 = new android.text.SpannableString;

        $r4 = staticinvoke <android.text.TextUtils: java.lang.String blank(java.lang.CharSequence,int,int)>($r1, $i3, $i2);

        specialinvoke $r13.<android.text.SpannableString: void <init>(java.lang.CharSequence)>($r4);

        staticinvoke <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)>($r12, 0, $i0, class "java/lang/Object", $r13, 0);

        return $r13;

     label44:
        $f2 = $f2 + $f4;

        $i2 = $i2 + -1;

        goto label39;

     label45:
        $f1 = $f1 + $f2;

        $i3 = $i3 + 1;

        goto label41;

     label46:
        $r14 = new android.text.SpannableStringBuilder;

        $r4 = <android.text.TextUtils: java.lang.String sEllipsis>;

        specialinvoke $r14.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>($r4);

        virtualinvoke $r14.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>(0, $r1, 0, $i3);

        $i3 = virtualinvoke $r14.<android.text.SpannableStringBuilder: int length()>();

        virtualinvoke $r14.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder insert(int,java.lang.CharSequence,int,int)>($i3, $r1, $i2, $i0);

        return $r14;

     label47:
        return $r1;

     label48:
        return $r1;
    }

    public static boolean equals(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0, $i1;
        boolean $z0;
        char $c2, $c3;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        if $r0 != $r1 goto label1;

        return 1;

     label1:
        if $r0 == null goto label6;

        if $r1 == null goto label6;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 != $i1 goto label6;

        $z0 = $r0 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $z0 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        return $z0;

     label2:
        $i1 = 0;

     label3:
        if $i1 >= $i0 goto label5;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c2 == $c3 goto label4;

        return 0;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        return 1;

     label6:
        return 0;
    }

    public static transient java.lang.CharSequence expandTemplate(java.lang.CharSequence, java.lang.CharSequence[])
    {
        java.lang.CharSequence $r0;
        java.lang.CharSequence[] $r1;
        android.text.SpannableStringBuilder $r2;
        int $i0, $i1, $i3;
        java.lang.IllegalArgumentException $r3;
        char $c2;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.lang.IndexOutOfBoundsException $r6;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence[];

        $i1 = lengthof $r1;

        if $i1 <= 9 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("max of 9 values are supported");

        throw $r3;

     label01:
        $r2 = new android.text.SpannableStringBuilder;

        specialinvoke $r2.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>($r0);

        $i1 = 0;

     label02:
        $i0 = virtualinvoke $r2.<android.text.SpannableStringBuilder: int length()>();

        if $i1 >= $i0 goto label20;

        $c2 = virtualinvoke $r2.<android.text.SpannableStringBuilder: char charAt(int)>($i1);

     label03:
        if $c2 != 94 goto label19;

     label04:
        $i0 = $i1 + 1;

        $c2 = virtualinvoke $r2.<android.text.SpannableStringBuilder: char charAt(int)>($i0);

        if $c2 != 94 goto label09;

     label05:
        $i0 = $i1 + 1;

     label06:
        $i3 = $i1 + 2;

        virtualinvoke $r2.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder delete(int,int)>($i0, $i3);

     label07:
        $i1 = $i1 + 1;

     label08:
        goto label02;

     label09:
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z0 == 0 goto label19;

        $i0 = staticinvoke <java.lang.Character: int getNumericValue(char)>($c2);

     label10:
        $i0 = $i0 - 1;

        if $i0 >= 0 goto label14;

        $r3 = new java.lang.IllegalArgumentException;

     label11:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("template requests value ^");

        $i1 = $i0 + 1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

     label12:
        throw $r3;

     label13:
        $r6 := @caughtexception;

        return $r2;

     label14:
        $i3 = lengthof $r1;

        if $i0 < $i3 goto label17;

        $r3 = new java.lang.IllegalArgumentException;

     label15:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("template requests value ^");

        $i1 = $i0 + 1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; only ");

        $i1 = lengthof $r1;

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" provided");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

     label16:
        throw $r3;

     label17:
        $i3 = $i1 + 2;

        $r0 = $r1[$i0];

        virtualinvoke $r2.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>($i1, $i3, $r0);

        $r0 = $r1[$i0];

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

     label18:
        $i1 = $i1 + $i0;

        goto label02;

     label19:
        $i1 = $i1 + 1;

        goto label02;

     label20:
        return $r2;

        catch java.lang.IndexOutOfBoundsException from label02 to label03 with label13;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label13;
        catch java.lang.IndexOutOfBoundsException from label06 to label07 with label13;
        catch java.lang.IndexOutOfBoundsException from label08 to label10 with label13;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label13;
        catch java.lang.IndexOutOfBoundsException from label15 to label16 with label13;
        catch java.lang.IndexOutOfBoundsException from label17 to label18 with label13;
    }

    public static int getCapsMode(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i3, $i5;
        short $s2;
        char $c4;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $s2 = 0;

        $i3 = $i1 & 4096;

        if $i3 == 0 goto label01;

        $s2 = 0 | 4096;

     label01:
        $i3 = $i1 & 24576;

        if $i3 != 0 goto label02;

        return $s2;

     label02:
        $i3 = $i0;

     label03:
        if $i3 <= 0 goto label04;

        $i0 = $i3 - 1;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c4 == 34 goto label07;

        if $c4 == 39 goto label07;

        $i0 = staticinvoke <java.lang.Character: int getType(char)>($c4);

        if $i0 == 21 goto label07;

     label04:
        $i0 = $i3;

     label05:
        if $i0 <= 0 goto label08;

        $i5 = $i0 - 1;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i5);

        if $c4 == 32 goto label06;

        if $c4 != 9 goto label08;

     label06:
        $i0 = $i0 + -1;

        goto label05;

     label07:
        $i3 = $i3 + -1;

        goto label03;

     label08:
        if $i0 == 0 goto label09;

        $i5 = $i0 - 1;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i5);

        if $c4 != 10 goto label10;

     label09:
        $s2 = $s2 | 8192;

        return $s2;

     label10:
        $i1 = $i1 & 16384;

        if $i1 != 0 goto label12;

        if $i3 == $i0 goto label11;

        $s2 = $s2 | 8192;

     label11:
        return $s2;

     label12:
        if $i3 != $i0 goto label14;

        return $s2;

     label13:
        $i0 = $i0 + -1;

     label14:
        if $i0 <= 0 goto label15;

        $i1 = $i0 - 1;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c4 == 34 goto label13;

        if $c4 == 39 goto label13;

        $i1 = staticinvoke <java.lang.Character: int getType(char)>($c4);

        if $i1 == 22 goto label13;

     label15:
        if $i0 <= 0 goto label21;

        $i1 = $i0 - 1;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c4 == 46 goto label16;

        if $c4 == 63 goto label16;

        if $c4 != 33 goto label21;

     label16:
        if $c4 != 46 goto label19;

        $i0 = $i0 - 2;

     label17:
        if $i0 < 0 goto label19;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c4 != 46 goto label18;

        return $s2;

     label18:
        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c4);

        if $z0 != 0 goto label20;

     label19:
        $s2 = $s2 | 16384;

        return $s2;

     label20:
        $i0 = $i0 + -1;

        goto label17;

     label21:
        return $s2;
    }

    public static void getChars(java.lang.CharSequence, int, int, char[], int)
    {
        int $i0, $i1, $i2;
        char[] $r0;
        java.lang.CharSequence $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        java.lang.StringBuffer $r4;
        java.lang.StringBuilder $r5;
        boolean $z0;
        android.text.GetChars $r6;
        char $c4;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 := @parameter3: char[];

        $i2 := @parameter4: int;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "java/lang/String" goto label1;

        $r3 = (java.lang.String) $r1;

        virtualinvoke $r3.<java.lang.String: void getChars(int,int,char[],int)>($i0, $i1, $r0, $i2);

        return;

     label1:
        if $r2 != class "java/lang/StringBuffer" goto label2;

        $r4 = (java.lang.StringBuffer) $r1;

        virtualinvoke $r4.<java.lang.StringBuffer: void getChars(int,int,char[],int)>($i0, $i1, $r0, $i2);

        return;

     label2:
        if $r2 != class "java/lang/StringBuilder" goto label3;

        $r5 = (java.lang.StringBuilder) $r1;

        virtualinvoke $r5.<java.lang.StringBuilder: void getChars(int,int,char[],int)>($i0, $i1, $r0, $i2);

        return;

     label3:
        $z0 = $r1 instanceof android.text.GetChars;

        if $z0 == 0 goto label4;

        $r6 = (android.text.GetChars) $r1;

        interfaceinvoke $r6.<android.text.GetChars: void getChars(int,int,char[],int)>($i0, $i1, $r0, $i2);

        return;

     label4:
        if $i0 >= $i1 goto label5;

        $c4 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0);

        $r0[$i2] = $c4;

        $i0 = $i0 + 1;

        $i2 = $i2 + 1;

        goto label4;

     label5:
        return;
    }

    public static int getOffsetAfter(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i2, $i4;
        char $c3;
        boolean $z0;
        android.text.Spanned $r1;
        java.lang.Object[] $r2;
        android.text.style.ReplacementSpan[] $r3;
        android.text.style.ReplacementSpan $r4;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 != $i1 goto label1;

        return $i1;

     label1:
        $i2 = $i1 - 1;

        if $i0 != $i2 goto label2;

        return $i1;

     label2:
        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i0);

        if $c3 < 55296 goto label7;

        if $c3 > 56319 goto label7;

        $i1 = $i0 + 1;

        $c3 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c3 < 56320 goto label6;

        if $c3 > 57343 goto label6;

        $i0 = $i0 + 2;

     label3:
        $z0 = $r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label8;

        $r1 = (android.text.Spanned) $r0;

        $r2 = interfaceinvoke $r1.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>($i0, $i0, class "android/text/style/ReplacementSpan");

        $r3 = (android.text.style.ReplacementSpan[]) $r2;

        $i1 = 0;

     label4:
        $i2 = lengthof $r3;

        if $i1 >= $i2 goto label8;

        $r1 = (android.text.Spanned) $r0;

        $r4 = $r3[$i1];

        $i2 = interfaceinvoke $r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r4);

        $r1 = (android.text.Spanned) $r0;

        $r4 = $r3[$i1];

        $i4 = interfaceinvoke $r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r4);

        if $i2 >= $i0 goto label5;

        if $i4 <= $i0 goto label5;

        $i0 = $i4;

     label5:
        $i1 = $i1 + 1;

        goto label4;

     label6:
        $i0 = $i0 + 1;

        goto label3;

     label7:
        $i0 = $i0 + 1;

        goto label3;

     label8:
        return $i0;
    }

    public static int getOffsetBefore(java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i3, $i4;
        char $c2;
        boolean $z0;
        android.text.Spanned $r1;
        java.lang.Object[] $r2;
        android.text.style.ReplacementSpan[] $r3;
        android.text.style.ReplacementSpan $r4;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        if $i0 == 1 goto label8;

        $i1 = $i0 - 1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c2 < 56320 goto label6;

        if $c2 > 57343 goto label6;

        $i1 = $i0 - 2;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c2 < 55296 goto label5;

        if $c2 > 56319 goto label5;

        $i0 = $i0 + -2;

     label2:
        $z0 = $r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label7;

        $r1 = (android.text.Spanned) $r0;

        $r2 = interfaceinvoke $r1.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>($i0, $i0, class "android/text/style/ReplacementSpan");

        $r3 = (android.text.style.ReplacementSpan[]) $r2;

        $i1 = 0;

     label3:
        $i3 = lengthof $r3;

        if $i1 >= $i3 goto label7;

        $r1 = (android.text.Spanned) $r0;

        $r4 = $r3[$i1];

        $i3 = interfaceinvoke $r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r4);

        $r1 = (android.text.Spanned) $r0;

        $r4 = $r3[$i1];

        $i4 = interfaceinvoke $r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r4);

        if $i3 >= $i0 goto label4;

        if $i4 <= $i0 goto label4;

        $i0 = $i3;

     label4:
        $i1 = $i1 + 1;

        goto label3;

     label5:
        $i0 = $i0 + -1;

        goto label2;

     label6:
        $i0 = $i0 + -1;

        goto label2;

     label7:
        return $i0;

     label8:
        return 0;
    }

    public static java.lang.CharSequence getReverse(java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        android.text.TextUtils$Reverser $r1;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r1 = new android.text.TextUtils$Reverser;

        specialinvoke $r1.<android.text.TextUtils$Reverser: void <init>(java.lang.CharSequence,int,int)>($r0, $i0, $i1);

        return $r1;
    }

    public static int getTrimmedLength(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i3;
        char $c2;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label2;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        if $c2 > 32 goto label2;

        $i1 = $i1 + 1;

        goto label1;

     label2:
        if $i0 <= $i1 goto label3;

        $i3 = $i0 - 1;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i3);

        if $c2 > 32 goto label3;

        $i0 = $i0 + -1;

        goto label2;

     label3:
        $i1 = $i0 - $i1;

        return $i1;
    }

    public static java.lang.String htmlEncode(java.lang.String)
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1;
        char $c2;

        $r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $i0 = 0;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label9;

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i0);

        lookupswitch($c2)
        {
            case 34: goto label8;
            case 38: goto label6;
            case 39: goto label7;
            case 60: goto label4;
            case 62: goto label5;
            default: goto label2;
        };

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&lt;");

        goto label3;

     label5:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&gt;");

        goto label3;

     label6:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&amp;");

        goto label3;

     label7:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&apos;");

        goto label3;

     label8:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&quot;");

        goto label3;

     label9:
        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static int indexOf(java.lang.CharSequence, char)
    {
        java.lang.CharSequence $r0;
        char $c0;
        int $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>($r0, $c0, 0);

        return $i1;
    }

    public static int indexOf(java.lang.CharSequence, char, int)
    {
        char $c0;
        int $i1, $i2;
        java.lang.CharSequence $r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "java/lang/String" goto label1;

        $r2 = (java.lang.String) $r0;

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(int,int)>($c0, $i1);

        return $i1;

     label1:
        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)>($r0, $c0, $i1, $i2);

        return $i1;
    }

    public static int indexOf(java.lang.CharSequence, char, int, int)
    {
        java.lang.CharSequence $r0;
        char $c0, $c6;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.Class $r1;
        boolean $z0;
        char[] $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i3 := @parameter2: int;

        $i1 := @parameter3: int;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = $r0 instanceof android.text.GetChars;

        if $z0 != 0 goto label01;

        if $r1 == class "java/lang/StringBuffer" goto label01;

        if $r1 == class "java/lang/StringBuilder" goto label01;

        if $r1 != class "java/lang/String" goto label08;

     label01:
        $r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(500);

     label02:
        if $i3 >= $i1 goto label07;

        $i4 = $i3 + 500;

        if $i4 <= $i1 goto label03;

        $i4 = $i1;

     label03:
        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r0, $i3, $i4, $r2, 0);

        $i2 = $i4 - $i3;

        $i5 = 0;

     label04:
        if $i5 >= $i2 goto label06;

        $c6 = $r2[$i5];

        if $c6 != $c0 goto label05;

        staticinvoke <android.text.TextUtils: void recycle(char[])>($r2);

        $i3 = $i5 + $i3;

        return $i3;

     label05:
        $i5 = $i5 + 1;

        goto label04;

     label06:
        $i3 = $i4;

        goto label02;

     label07:
        staticinvoke <android.text.TextUtils: void recycle(char[])>($r2);

        return -1;

     label08:
        if $i3 >= $i1 goto label10;

        $c6 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i3);

        if $c6 != $c0 goto label09;

        return $i3;

     label09:
        $i3 = $i3 + 1;

        goto label08;

     label10:
        return -1;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>($r0, $r1, 0, $i0);

        return $i0;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0, $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $i0 := @parameter2: int;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i0 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)>($r0, $r1, $i0, $i1);

        return $i0;
    }

    public static int indexOf(java.lang.CharSequence, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0, $i1, $i2, $i4;
        char $c3;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.CharSequence;

        $i1 := @parameter2: int;

        $i0 := @parameter3: int;

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i2 != 0 goto label1;

        return $i1;

     label1:
        $c3 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>(0);

     label2:
        $i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)>($r0, $c3, $i1);

        $i4 = $i0 - $i2;

        if $i1 <= $i4 goto label3;

        return -1;

     label3:
        if $i1 >= 0 goto label4;

        return -1;

     label4:
        $z0 = staticinvoke <android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)>($r0, $i1, $r1, 0, $i2);

        if $z0 == 0 goto label5;

        return $i1;

     label5:
        $i1 = $i1 + 1;

        goto label2;
    }

    public static boolean isDigitsOnly(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1;
        char $c2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static boolean isEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0;

        $r0 := @parameter0: java.lang.CharSequence;

        if $r0 == null goto label1;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isGraphic(char)
    {
        char $c0;
        int $i1;

        $c0 := @parameter0: char;

        $i1 = staticinvoke <java.lang.Character: int getType(char)>($c0);

        if $i1 == 15 goto label1;

        if $i1 == 16 goto label1;

        if $i1 == 19 goto label1;

        if $i1 == 0 goto label1;

        if $i1 == 13 goto label1;

        if $i1 == 14 goto label1;

        if $i1 == 12 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isGraphic(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        int $i0, $i1, $i3;
        char $c2;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label3;

        $c2 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i1);

        $i3 = staticinvoke <java.lang.Character: int getType(char)>($c2);

        if $i3 == 15 goto label2;

        if $i3 == 16 goto label2;

        if $i3 == 19 goto label2;

        if $i3 == 0 goto label2;

        if $i3 == 13 goto label2;

        if $i3 == 14 goto label2;

        if $i3 == 12 goto label2;

        return 1;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static java.lang.String join(java.lang.CharSequence, java.lang.Iterable)
    {
        java.lang.CharSequence $r0;
        java.lang.Iterable $r1;
        java.lang.StringBuilder $r2;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        java.lang.Object $r4;
        java.lang.String $r5;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.Iterable;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $z0 = 1;

        $r3 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        if $z0 == 0 goto label3;

        $z0 = 0;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        goto label1;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r0);

        goto label2;

     label4:
        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String join(java.lang.CharSequence, java.lang.Object[])
    {
        java.lang.CharSequence $r0;
        java.lang.Object[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.Object[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $z0 = 1;

        $i0 = lengthof $r1;

        $i1 = 0;

     label1:
        if $i1 >= $i0 goto label4;

        $r3 = $r1[$i1];

        if $z0 == 0 goto label3;

        $z0 = 0;

     label2:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $i1 = $i1 + 1;

        goto label1;

     label3:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r0);

        goto label2;

     label4:
        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static int lastIndexOf(java.lang.CharSequence, char)
    {
        java.lang.CharSequence $r0;
        char $c0;
        int $i1;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i1 = $i1 - 1;

        $i1 = staticinvoke <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)>($r0, $c0, $i1);

        return $i1;
    }

    public static int lastIndexOf(java.lang.CharSequence, char, int)
    {
        char $c0;
        int $i1;
        java.lang.CharSequence $r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 != class "java/lang/String" goto label1;

        $r2 = (java.lang.String) $r0;

        $i1 = virtualinvoke $r2.<java.lang.String: int lastIndexOf(int,int)>($c0, $i1);

        return $i1;

     label1:
        $i1 = staticinvoke <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)>($r0, $c0, 0, $i1);

        return $i1;
    }

    public static int lastIndexOf(java.lang.CharSequence, char, int, int)
    {
        java.lang.CharSequence $r0;
        char $c0, $c4;
        int $i1, $i2, $i3;
        java.lang.Class $r1;
        boolean $z0;
        char[] $r2;

        $r0 := @parameter0: java.lang.CharSequence;

        $c0 := @parameter1: char;

        $i1 := @parameter2: int;

        $i3 := @parameter3: int;

        if $i3 >= 0 goto label01;

        return -1;

     label01:
        $i2 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        if $i3 < $i2 goto label02;

        $i3 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $i3 = $i3 - 1;

     label02:
        $i2 = $i3 + 1;

        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = $r0 instanceof android.text.GetChars;

        if $z0 != 0 goto label03;

        if $r1 == class "java/lang/StringBuffer" goto label03;

        if $r1 == class "java/lang/StringBuilder" goto label03;

        if $r1 != class "java/lang/String" goto label10;

     label03:
        $r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>(500);

     label04:
        if $i1 >= $i2 goto label09;

        $i3 = $i2 - 500;

        if $i3 >= $i1 goto label05;

        $i3 = $i1;

     label05:
        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r0, $i3, $i2, $r2, 0);

        $i2 = $i2 - $i3;

        $i2 = $i2 - 1;

     label06:
        if $i2 < 0 goto label08;

        $c4 = $r2[$i2];

        if $c4 != $c0 goto label07;

        staticinvoke <android.text.TextUtils: void recycle(char[])>($r2);

        $i1 = $i2 + $i3;

        return $i1;

     label07:
        $i2 = $i2 + -1;

        goto label06;

     label08:
        $i2 = $i3;

        goto label04;

     label09:
        staticinvoke <android.text.TextUtils: void recycle(char[])>($r2);

        return -1;

     label10:
        $i3 = $i2 - 1;

     label11:
        if $i3 < $i1 goto label13;

        $c4 = interfaceinvoke $r0.<java.lang.CharSequence: char charAt(int)>($i3);

        if $c4 != $c0 goto label12;

        return $i3;

     label12:
        $i3 = $i3 + -1;

        goto label11;

     label13:
        return -1;
    }

    static char[] obtain(int)
    {
        int $i0, $i1;
        java.lang.Object $r0;
        char[] $r1;
        java.lang.Throwable $r2;

        $i0 := @parameter0: int;

        $r0 = <android.text.TextUtils: java.lang.Object sLock>;

        entermonitor $r0;

     label1:
        $r1 = <android.text.TextUtils: char[] sTemp>;

        <android.text.TextUtils: char[] sTemp> = null;

        exitmonitor $r0;

     label2:
        if $r1 == null goto label3;

        $i1 = lengthof $r1;

        if $i1 >= $i0 goto label7;

     label3:
        $i0 = staticinvoke <com.android.internal.util.ArrayUtils: int idealCharArraySize(int)>($i0);

        $r1 = newarray (char)[$i0];

        return $r1;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor $r0;

     label6:
        throw $r2;

     label7:
        return $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private static void readSpan(android.os.Parcel, android.text.Spannable, java.lang.Object)
    {
        android.os.Parcel $r0;
        android.text.Spannable $r1;
        java.lang.Object $r2;
        int $i0, $i1, $i2;

        $r0 := @parameter0: android.os.Parcel;

        $r1 := @parameter1: android.text.Spannable;

        $r2 := @parameter2: java.lang.Object;

        $i0 = virtualinvoke $r0.<android.os.Parcel: int readInt()>();

        $i1 = virtualinvoke $r0.<android.os.Parcel: int readInt()>();

        $i2 = virtualinvoke $r0.<android.os.Parcel: int readInt()>();

        interfaceinvoke $r1.<android.text.Spannable: void setSpan(java.lang.Object,int,int,int)>($r2, $i0, $i1, $i2);

        return;
    }

    static void recycle(char[])
    {
        char[] $r0;
        int $i0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;

        $r0 := @parameter0: char[];

        $i0 = lengthof $r0;

        if $i0 <= 1000 goto label1;

        return;

     label1:
        $r1 = <android.text.TextUtils: java.lang.Object sLock>;

        entermonitor $r1;

     label2:
        <android.text.TextUtils: char[] sTemp> = $r0;

        exitmonitor $r1;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static boolean regionMatches(java.lang.CharSequence, int, java.lang.CharSequence, int, int)
    {
        java.lang.CharSequence $r0, $r1;
        int $i0, $i1, $i2, $i3;
        char[] $r2;
        boolean $z0;
        char $c4, $c5;

        $r0 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $r1 := @parameter2: java.lang.CharSequence;

        $i1 := @parameter3: int;

        $i2 := @parameter4: int;

        $i3 = $i2 * 2;

        $r2 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i3);

        $i3 = $i0 + $i2;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r0, $i0, $i3, $r2, 0);

        $i0 = $i1 + $i2;

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r1, $i1, $i0, $r2, $i2);

        $z0 = 1;

        $i0 = 0;

     label1:
        if $i0 >= $i2 goto label2;

        $c4 = $r2[$i0];

        $i1 = $i0 + $i2;

        $c5 = $r2[$i1];

        if $c4 == $c5 goto label3;

        $z0 = 0;

     label2:
        staticinvoke <android.text.TextUtils: void recycle(char[])>($r2);

        return $z0;

     label3:
        $i0 = $i0 + 1;

        goto label1;
    }

    public static java.lang.CharSequence replace(java.lang.CharSequence, java.lang.String[], java.lang.CharSequence[])
    {
        java.lang.CharSequence $r0;
        java.lang.String[] $r1;
        java.lang.CharSequence[] $r2;
        android.text.SpannableStringBuilder $r3;
        int $i0, $i1, $i2;
        java.lang.String $r4, $r5;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: java.lang.String[];

        $r2 := @parameter2: java.lang.CharSequence[];

        $r3 = new android.text.SpannableStringBuilder;

        specialinvoke $r3.<android.text.SpannableStringBuilder: void <init>(java.lang.CharSequence)>($r0);

        $i0 = 0;

     label1:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label3;

        $r4 = $r1[$i0];

        $i1 = staticinvoke <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)>($r3, $r4);

        if $i1 < 0 goto label2;

        $r4 = $r1[$i0];

        $r5 = $r1[$i0];

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        $i2 = $i2 + $i1;

        virtualinvoke $r3.<android.text.SpannableStringBuilder: void setSpan(java.lang.Object,int,int,int)>($r4, $i1, $i2, 33);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        $i0 = 0;

     label4:
        $i1 = lengthof $r1;

        if $i0 >= $i1 goto label6;

        $r4 = $r1[$i0];

        $i1 = virtualinvoke $r3.<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>($r4);

        $r4 = $r1[$i0];

        $i2 = virtualinvoke $r3.<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>($r4);

        if $i1 < 0 goto label5;

        $r0 = $r2[$i0];

        virtualinvoke $r3.<android.text.SpannableStringBuilder: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence)>($i1, $i2, $r0);

     label5:
        $i0 = $i0 + 1;

        goto label4;

     label6:
        return $r3;
    }

    public static java.lang.String[] split(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        int $i0;
        java.lang.String[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r2 = <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r2;

     label1:
        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>($r1, -1);

        return $r2;
    }

    public static java.lang.String[] split(java.lang.String, java.util.regex.Pattern)
    {
        java.lang.String $r0;
        java.util.regex.Pattern $r1;
        int $i0;
        java.lang.String[] $r2;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.util.regex.Pattern;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        $r2 = <android.text.TextUtils: java.lang.String[] EMPTY_STRING_ARRAY>;

        return $r2;

     label1:
        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>($r0, -1);

        return $r2;
    }

    public static java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)
    {
        java.lang.CharSequence $r0;
        java.lang.String $r1;
        android.text.SpannedString $r2;
        boolean $z0;

        $r0 := @parameter0: java.lang.CharSequence;

        if $r0 != null goto label1;

        return null;

     label1:
        $z0 = $r0 instanceof android.text.SpannedString;

        if $z0 == 0 goto label2;

        return $r0;

     label2:
        $z0 = $r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label3;

        $r2 = new android.text.SpannedString;

        specialinvoke $r2.<android.text.SpannedString: void <init>(java.lang.CharSequence)>($r0);

        return $r2;

     label3:
        $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String substring(java.lang.CharSequence, int, int)
    {
        int $i0, $i1, $i2;
        java.lang.String $r0;
        java.lang.CharSequence $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.StringBuffer $r3;
        char[] $r4;

        $r1 := @parameter0: java.lang.CharSequence;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $z0 = $r1 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r0 = (java.lang.String) $r1;

        $r0 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

        return $r0;

     label1:
        $z0 = $r1 instanceof java.lang.StringBuilder;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.StringBuilder) $r1;

        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String substring(int,int)>($i0, $i1);

        return $r0;

     label2:
        $z0 = $r1 instanceof java.lang.StringBuffer;

        if $z0 == 0 goto label3;

        $r3 = (java.lang.StringBuffer) $r1;

        $r0 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String substring(int,int)>($i0, $i1);

        return $r0;

     label3:
        $i2 = $i1 - $i0;

        $r4 = staticinvoke <android.text.TextUtils: char[] obtain(int)>($i2);

        staticinvoke <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)>($r1, $i0, $i1, $r4, 0);

        $r0 = new java.lang.String;

        $i0 = $i1 - $i0;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>($r4, 0, $i0);

        staticinvoke <android.text.TextUtils: void recycle(char[])>($r4);

        return $r0;
    }

    public static void writeToParcel(java.lang.CharSequence, android.os.Parcel, int)
    {
        java.lang.CharSequence $r0;
        android.os.Parcel $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2, $r6;
        boolean $z0;
        java.lang.String $r3;
        android.text.Spanned $r4;
        java.lang.Object[] $r5;
        android.text.style.CharacterStyle $r7;
        android.text.ParcelableSpan $r8;

        $r0 := @parameter0: java.lang.CharSequence;

        $r1 := @parameter1: android.os.Parcel;

        $i0 := @parameter2: int;

        $z0 = $r0 instanceof android.text.Spanned;

        if $z0 == 0 goto label5;

        virtualinvoke $r1.<android.os.Parcel: void writeInt(int)>(0);

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        $r4 = (android.text.Spanned) $r0;

        $i1 = interfaceinvoke $r0.<java.lang.CharSequence: int length()>();

        $r5 = interfaceinvoke $r4.<android.text.Spanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>(0, $i1, class "java/lang/Object");

        $i1 = 0;

     label1:
        $i2 = lengthof $r5;

        if $i1 >= $i2 goto label4;

        $r2 = $r5[$i1];

        $r6 = $r5[$i1];

        $z0 = $r6 instanceof android.text.style.CharacterStyle;

        if $z0 == 0 goto label2;

        $r7 = (android.text.style.CharacterStyle) $r6;

        $r6 = virtualinvoke $r7.<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>();

     label2:
        $z0 = $r6 instanceof android.text.ParcelableSpan;

        if $z0 == 0 goto label3;

        $r8 = (android.text.ParcelableSpan) $r6;

        $i2 = interfaceinvoke $r8.<android.text.ParcelableSpan: int getSpanTypeId()>();

        virtualinvoke $r1.<android.os.Parcel: void writeInt(int)>($i2);

        interfaceinvoke $r8.<android.text.ParcelableSpan: void writeToParcel(android.os.Parcel,int)>($r1, $i0);

        staticinvoke <android.text.TextUtils: void writeWhere(android.os.Parcel,android.text.Spanned,java.lang.Object)>($r1, $r4, $r2);

     label3:
        $i1 = $i1 + 1;

        goto label1;

     label4:
        virtualinvoke $r1.<android.os.Parcel: void writeInt(int)>(0);

        return;

     label5:
        virtualinvoke $r1.<android.os.Parcel: void writeInt(int)>(1);

        if $r0 == null goto label6;

        $r3 = virtualinvoke $r0.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        return;

     label6:
        virtualinvoke $r1.<android.os.Parcel: void writeString(java.lang.String)>(null);

        return;
    }

    private static void writeWhere(android.os.Parcel, android.text.Spanned, java.lang.Object)
    {
        android.os.Parcel $r0;
        android.text.Spanned $r1;
        java.lang.Object $r2;
        int $i0;

        $r0 := @parameter0: android.os.Parcel;

        $r1 := @parameter1: android.text.Spanned;

        $r2 := @parameter2: java.lang.Object;

        $i0 = interfaceinvoke $r1.<android.text.Spanned: int getSpanStart(java.lang.Object)>($r2);

        virtualinvoke $r0.<android.os.Parcel: void writeInt(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.text.Spanned: int getSpanEnd(java.lang.Object)>($r2);

        virtualinvoke $r0.<android.os.Parcel: void writeInt(int)>($i0);

        $i0 = interfaceinvoke $r1.<android.text.Spanned: int getSpanFlags(java.lang.Object)>($r2);

        virtualinvoke $r0.<android.os.Parcel: void writeInt(int)>($i0);

        return;
    }
}
