public class com.android.internal.widget.LockPatternUtils extends java.lang.Object
{
    public static final int FAILED_ATTEMPTS_BEFORE_RESET;
    public static final int FAILED_ATTEMPTS_BEFORE_TIMEOUT;
    public static final long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS;
    public static final long FAILED_ATTEMPT_TIMEOUT_MS;
    private static final java.lang.String LOCKOUT_ATTEMPT_DEADLINE;
    private static final java.lang.String LOCKOUT_PERMANENT_KEY;
    private static final java.lang.String LOCK_PATTERN_FILE;
    public static final int MIN_LOCK_PATTERN_SIZE;
    public static final int MIN_PATTERN_REGISTER_FAIL;
    private static final java.lang.String PATTERN_EVER_CHOSEN;
    private static final java.lang.String TAG;
    private static java.lang.String sLockPatternFilename;
    private final android.content.ContentResolver mContentResolver;

    public void <init>(android.content.ContentResolver)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        android.content.ContentResolver $r1;
        java.lang.String $r2;
        java.lang.StringBuilder $r3;
        java.io.File $r4;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 := @parameter0: android.content.ContentResolver;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver> = $r1;

        $r2 = <com.android.internal.widget.LockPatternUtils: java.lang.String sLockPatternFilename>;

        if $r2 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        $r2 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/system/gesture.key");

        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.internal.widget.LockPatternUtils: java.lang.String sLockPatternFilename> = $r2;

        return;

     label1:
        return;
    }

    private boolean getBoolean(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        java.lang.String $r1;
        int $i0;
        android.content.ContentResolver $r2;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 := @parameter0: java.lang.String;

        $r2 = $r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $i0 = staticinvoke <android.provider.Settings$System: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, $r1, 0);

        if 1 != $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private long getLong(java.lang.String, long)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        java.lang.String $r1;
        long $l0;
        android.content.ContentResolver $r2;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = $r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $l0 = staticinvoke <android.provider.Settings$System: long getLong(android.content.ContentResolver,java.lang.String,long)>($r2, $r1, $l0);

        return $l0;
    }

    static byte[] patternToHash(java.util.List)
    {
        java.util.List $r0;
        byte[] $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2;
        com.android.internal.widget.LockPatternView$Cell $r3;
        byte $b4;
        android.security.MessageDigest $r4;
        java.security.NoSuchAlgorithmException $r5;

        $r0 := @parameter0: java.util.List;

        if $r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r1 = newarray (byte)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r2 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (com.android.internal.widget.LockPatternView$Cell) $r2;

        $i2 = virtualinvoke $r3.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $i2 = $i2 * 3;

        $i3 = virtualinvoke $r3.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $i2 = $i2 + $i3;

        $b4 = (byte) $i2;

        $r1[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r4 = staticinvoke <android.security.MessageDigest: android.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        $r1 = virtualinvoke $r4.<android.security.MessageDigest: byte[] digest(byte[])>($r1);

     label4:
        return $r1;

     label5:
        $r5 := @caughtexception;

        return $r1;

        catch java.security.NoSuchAlgorithmException from label3 to label4 with label5;
    }

    public static java.lang.String patternToString(java.util.List)
    {
        java.util.List $r0;
        byte[] $r1;
        java.lang.String $r2;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        com.android.internal.widget.LockPatternView$Cell $r4;
        byte $b4;

        $r0 := @parameter0: java.util.List;

        if $r0 != null goto label1;

        return "";

     label1:
        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r1 = newarray (byte)[$i0];

        $i1 = 0;

     label2:
        if $i1 >= $i0 goto label3;

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (com.android.internal.widget.LockPatternView$Cell) $r3;

        $i2 = virtualinvoke $r4.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $i2 = $i2 * 3;

        $i3 = virtualinvoke $r4.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $i2 = $i2 + $i3;

        $b4 = (byte) $i2;

        $r1[$i1] = $b4;

        $i1 = $i1 + 1;

        goto label2;

     label3:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r1);

        return $r2;
    }

    private void setBoolean(java.lang.String, boolean)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        java.lang.String $r1;
        boolean $z0;
        android.content.ContentResolver $r2;
        byte $b0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = $r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        if $z0 == 0 goto label2;

        $b0 = 1;

     label1:
        staticinvoke <android.provider.Settings$System: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, $r1, $b0);

        return;

     label2:
        $b0 = 0;

        goto label1;
    }

    private void setLong(java.lang.String, long)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        java.lang.String $r1;
        long $l0;
        android.content.ContentResolver $r2;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = $r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        staticinvoke <android.provider.Settings$System: boolean putLong(android.content.ContentResolver,java.lang.String,long)>($r2, $r1, $l0);

        return;
    }

    public static java.util.List stringToPattern(java.lang.String)
    {
        java.lang.String $r0;
        byte $b0;
        int $i1, $i2, $i3;
        java.util.ArrayList $r1;
        byte[] $r2;
        com.android.internal.widget.LockPatternView$Cell $r3;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r2 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>();

        $i2 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i2 >= $i1 goto label2;

        $b0 = $r2[$i2];

        $i3 = $b0 / 3;

        $i1 = $b0 % 3;

        $r3 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>($i3, $i1);

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r1;
    }

    public boolean checkPattern(java.util.List)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        java.util.List $r1;
        java.io.RandomAccessFile $r2;
        byte[] $r3, $r5;
        java.lang.String $r4;
        long $l0;
        int $i1;
        boolean $z0;
        java.io.FileNotFoundException $r6;
        java.io.IOException $r7;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 := @parameter0: java.util.List;

        $r2 = new java.io.RandomAccessFile;

        $r4 = <com.android.internal.widget.LockPatternUtils: java.lang.String sLockPatternFilename>;

     label1:
        specialinvoke $r2.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r4, "r");

        $l0 = virtualinvoke $r2.<java.io.RandomAccessFile: long length()>();

     label2:
        $i1 = (int) $l0;

        $r3 = newarray (byte)[$i1];

     label3:
        $i1 = lengthof $r3;

        $i1 = virtualinvoke $r2.<java.io.RandomAccessFile: int read(byte[],int,int)>($r3, 0, $i1);

        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        if $i1 > 0 goto label5;

     label4:
        return 1;

     label5:
        $r5 = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToHash(java.util.List)>($r1);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r3, $r5);

     label6:
        return $z0;

     label7:
        $r6 := @caughtexception;

        return 1;

     label8:
        $r7 := @caughtexception;

        return 1;

        catch java.io.FileNotFoundException from label1 to label2 with label7;
        catch java.io.FileNotFoundException from label3 to label4 with label7;
        catch java.io.FileNotFoundException from label5 to label6 with label7;
        catch java.io.IOException from label1 to label2 with label8;
        catch java.io.IOException from label3 to label4 with label8;
        catch java.io.IOException from label5 to label6 with label8;
    }

    public long getLockoutAttemptDeadline()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        long $l0, $l1;
        byte $b2;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l0 = specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long)>("lockscreen.lockoutattemptdeadline", 0L);

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $b2 = $l0 cmp $l1;

        if $b2 < 0 goto label1;

        $l1 = 30000L + $l1;

        $b2 = $l0 cmp $l1;

        if $b2 <= 0 goto label2;

     label1:
        return 0L;

     label2:
        return $l0;
    }

    public java.lang.String getNextAlarm()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        android.content.ContentResolver $r1;
        java.lang.String $r2;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = $r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        $r2 = staticinvoke <android.provider.Settings$System: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r1, "next_alarm_formatted");

        if $r2 == null goto label1;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 == 0 goto label2;

     label1:
        return null;

     label2:
        return $r2;
    }

    public boolean isLockPatternEnabled()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String)>("lock_pattern_autolock");

        return $z0;
    }

    public boolean isPatternEverChosen()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String)>("lockscreen.patterneverchosen");

        return $z0;
    }

    public boolean isPermanentlyLocked()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String)>("lockscreen.lockedoutpermanently");

        return $z0;
    }

    public boolean isTactileFeedbackEnabled()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String)>("lock_pattern_tactile_feedback_enabled");

        return $z0;
    }

    public boolean isVisiblePatternEnabled()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 = specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String)>("lock_pattern_visible_pattern");

        return $z0;
    }

    public void saveLockPattern(java.util.List)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        java.util.List $r1;
        java.io.RandomAccessFile $r2;
        byte[] $r3;
        java.lang.String $r4;
        int $i0;
        java.io.FileNotFoundException $r5;
        java.lang.StringBuilder $r6;
        java.io.IOException $r7;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 := @parameter0: java.util.List;

        $r3 = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToHash(java.util.List)>($r1);

        $r2 = new java.io.RandomAccessFile;

        $r4 = <com.android.internal.widget.LockPatternUtils: java.lang.String sLockPatternFilename>;

     label1:
        specialinvoke $r2.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r4, "rw");

        if $r1 != null goto label4;

        virtualinvoke $r2.<java.io.RandomAccessFile: void setLength(long)>(0L);

     label2:
        virtualinvoke $r2.<java.io.RandomAccessFile: void close()>();

        specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.patterneverchosen", 1);

     label3:
        return;

     label4:
        $i0 = lengthof $r3;

        virtualinvoke $r2.<java.io.RandomAccessFile: void write(byte[],int,int)>($r3, 0, $i0);

     label5:
        goto label2;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to save lock pattern to ");

        $r4 = <com.android.internal.widget.LockPatternUtils: java.lang.String sLockPatternFilename>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r4);

        return;

     label7:
        $r7 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to save lock pattern to ");

        $r4 = <com.android.internal.widget.LockPatternUtils: java.lang.String sLockPatternFilename>;

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r4 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r4);

        return;

        catch java.io.FileNotFoundException from label1 to label3 with label6;
        catch java.io.FileNotFoundException from label4 to label5 with label6;
        catch java.io.IOException from label1 to label3 with label7;
        catch java.io.IOException from label4 to label5 with label7;
    }

    public boolean savedPatternExists()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        java.io.RandomAccessFile $r1;
        java.lang.String $r2;
        java.io.FileNotFoundException $r3;
        java.io.IOException $r4;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = new java.io.RandomAccessFile;

        $r2 = <com.android.internal.widget.LockPatternUtils: java.lang.String sLockPatternFilename>;

     label1:
        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>($r2, "r");

        virtualinvoke $r1.<java.io.RandomAccessFile: byte readByte()>();

        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

     label4:
        $r4 := @caughtexception;

        return 0;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label4;
    }

    public void setLockPatternEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_pattern_autolock", $z0);

        return;
    }

    public long setLockoutAttemptDeadline()
    {
        com.android.internal.widget.LockPatternUtils $r0;
        long $l0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l0 = $l0 + 30000L;

        specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long)>("lockscreen.lockoutattemptdeadline", $l0);

        return $l0;
    }

    public void setPermanentlyLocked(boolean)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lockscreen.lockedoutpermanently", $z0);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<com.android.internal.widget.LockPatternUtils: void setLockPatternEnabled(boolean)>(0);

        virtualinvoke $r0.<com.android.internal.widget.LockPatternUtils: void saveLockPattern(java.util.List)>(null);

        return;

     label1:
        return;
    }

    public void setTactileFeedbackEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_pattern_tactile_feedback_enabled", $z0);

        return;
    }

    public void setVisiblePatternEnabled(boolean)
    {
        com.android.internal.widget.LockPatternUtils $r0;
        boolean $z0;

        $r0 := @this: com.android.internal.widget.LockPatternUtils;

        $z0 := @parameter0: boolean;

        specialinvoke $r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean)>("lock_pattern_visible_pattern", $z0);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.widget.LockPatternUtils: java.lang.String TAG> = "LockPatternUtils";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PATTERN_EVER_CHOSEN> = "lockscreen.patterneverchosen";

        <com.android.internal.widget.LockPatternUtils: int MIN_PATTERN_REGISTER_FAIL> = 3;

        <com.android.internal.widget.LockPatternUtils: int MIN_LOCK_PATTERN_SIZE> = 4;

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_PATTERN_FILE> = "/system/gesture.key";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKOUT_PERMANENT_KEY> = "lockscreen.lockedoutpermanently";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKOUT_ATTEMPT_DEADLINE> = "lockscreen.lockoutattemptdeadline";

        <com.android.internal.widget.LockPatternUtils: long FAILED_ATTEMPT_TIMEOUT_MS> = 30000L;

        <com.android.internal.widget.LockPatternUtils: long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS> = 1000L;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_TIMEOUT> = 5;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_RESET> = 20;

        return;
    }
}
