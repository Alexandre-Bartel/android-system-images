public class org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS extends org.apache.harmony.xnet.provider.jsse.ConnectionState
{
    private static byte[] CLIENT_WRITE_KEY_LABEL;
    private static byte[] IV_BLOCK_LABEL;
    private static byte[] KEY_EXPANSION_LABEL;
    private static byte[] SERVER_WRITE_KEY_LABEL;
    private final javax.crypto.Mac decMac;
    private final javax.crypto.Mac encMac;
    private final byte[] mac_material_header;

    static void <clinit>()
    {
        byte[] $r0;

        $r0 = newarray (byte)[13];

        $r0[0] = 107;

        $r0[1] = 101;

        $r0[2] = 121;

        $r0[3] = 32;

        $r0[4] = 101;

        $r0[5] = 120;

        $r0[6] = 112;

        $r0[7] = 97;

        $r0[8] = 110;

        $r0[9] = 115;

        $r0[10] = 105;

        $r0[11] = 111;

        $r0[12] = 110;

        <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] KEY_EXPANSION_LABEL> = $r0;

        $r0 = newarray (byte)[16];

        $r0[0] = 99;

        $r0[1] = 108;

        $r0[2] = 105;

        $r0[3] = 101;

        $r0[4] = 110;

        $r0[5] = 116;

        $r0[6] = 32;

        $r0[7] = 119;

        $r0[8] = 114;

        $r0[9] = 105;

        $r0[10] = 116;

        $r0[11] = 101;

        $r0[12] = 32;

        $r0[13] = 107;

        $r0[14] = 101;

        $r0[15] = 121;

        <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] CLIENT_WRITE_KEY_LABEL> = $r0;

        $r0 = newarray (byte)[16];

        $r0[0] = 115;

        $r0[1] = 101;

        $r0[2] = 114;

        $r0[3] = 118;

        $r0[4] = 101;

        $r0[5] = 114;

        $r0[6] = 32;

        $r0[7] = 119;

        $r0[8] = 114;

        $r0[9] = 105;

        $r0[10] = 116;

        $r0[11] = 101;

        $r0[12] = 32;

        $r0[13] = 107;

        $r0[14] = 101;

        $r0[15] = 121;

        <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] SERVER_WRITE_KEY_LABEL> = $r0;

        $r0 = newarray (byte)[8];

        $r0[0] = 73;

        $r0[1] = 86;

        $r0[2] = 32;

        $r0[3] = 98;

        $r0[4] = 108;

        $r0[5] = 111;

        $r0[6] = 99;

        $r0[7] = 107;

        <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] IV_BLOCK_LABEL> = $r0;

        return;
    }

    protected void <init>(org.apache.harmony.xnet.provider.jsse.SSLSessionImpl)
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS $r0;
        org.apache.harmony.xnet.provider.jsse.SSLSessionImpl $r1;
        byte[] $r2, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17;
        org.apache.harmony.xnet.provider.jsse.CipherSuite $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;
        java.lang.String $r4, $r5, $r8;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r6;
        java.lang.StringBuilder $r7;
        javax.crypto.spec.IvParameterSpec $r18, $r19;
        javax.crypto.Cipher $r20;
        javax.crypto.Mac $r21;
        javax.crypto.spec.SecretKeySpec $r22;
        java.lang.Exception $r23;
        org.apache.harmony.xnet.provider.jsse.AlertException $r24;
        javax.net.ssl.SSLProtocolException $r25;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS;

        $r1 := @parameter0: org.apache.harmony.xnet.provider.jsse.SSLSessionImpl;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: void <init>()>();

        $r2 = newarray (byte)[5];

        $r2[0] = 0;

        $r2[1] = 3;

        $r2[2] = 1;

        $r2[3] = 0;

        $r2[4] = 0;

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header> = $r2;

     label01:
        $r3 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: org.apache.harmony.xnet.provider.jsse.CipherSuite cipherSuite>;

        $i0 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int getMACLength()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size> = $i0;

        $z0 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: boolean isExportable()>();

        if $z0 == 0 goto label18;

        $i1 = $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int keyMaterial>;

     label02:
        $i0 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int getBlockSize()>();

        $r4 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getBulkEncryptionAlgorithm()>();

        $r5 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getHmacName()>();

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r6 == null goto label03;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("ConnectionStateTLS.create:");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  cipher suite name: ");

        $r8 = virtualinvoke $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: java.lang.String getName()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  encryption alg name: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mac alg name: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  hash size: ");

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  block size: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  IV size (== block size):");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  key size: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

     label03:
        $r2 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] clientRandom>;

        $r9 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] serverRandom>;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

     label04:
        $i2 = $i2 * 2;

        $i3 = $i1 * 2;

        $i2 = $i2 + $i3;

        $i3 = $i0 * 2;

     label05:
        $i2 = $i2 + $i3;

        $r10 = newarray (byte)[$i2];

        $i2 = lengthof $r2;

        $i3 = lengthof $r9;

        $i2 = $i2 + $i3;

        $r11 = newarray (byte)[$i2];

        $i2 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r11, 0, $i2);

        $i2 = lengthof $r9;

        $i3 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r11, $i2, $i3);

        $r12 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        $r13 = <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] KEY_EXPANSION_LABEL>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void computePRF(byte[],byte[],byte[],byte[])>($r10, $r12, $r13, $r11);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $r12 = newarray (byte)[$i2];

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $r13 = newarray (byte)[$i2];

        $r14 = newarray (byte)[$i1];

        $r15 = $r14;

        $r16 = newarray (byte)[$i1];

        $r17 = $r16;

        $z1 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: boolean isServer>;

     label06:
        if $z1 != 0 goto label21;

        $z1 = 1;

     label07:
        if $i0 <= 0 goto label22;

     label08:
        $z2 = 1;

     label09:
        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher> = $z2;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, 0, $r12, 0, $i2);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i2, $r13, 0, $i3);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i2 = $i2 * 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i2, $r14, 0, $i1);

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

     label10:
        $i2 = $i2 * 2;

     label11:
        $i2 = $i2 + $i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r10, $i2, $r16, 0, $i1);

     label12:
        $r18 = null;

        $r19 = null;

     label13:
        if $z0 == 0 goto label24;

        $i1 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, $r11, 0, $i1);

        $i1 = lengthof $r2;

        $i2 = lengthof $r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, $r11, $i1, $i2);

        $i1 = $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int expandedKeyMaterial>;

        $r15 = newarray (byte)[$i1];

        $i1 = $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int expandedKeyMaterial>;

        $r17 = newarray (byte)[$i1];

        $r10 = <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] CLIENT_WRITE_KEY_LABEL>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void computePRF(byte[],byte[],byte[],byte[])>($r15, $r14, $r10, $r11);

        $r14 = <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] SERVER_WRITE_KEY_LABEL>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void computePRF(byte[],byte[],byte[],byte[])>($r17, $r16, $r14, $r11);

     label14:
        $z2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z2 == 0 goto label15;

        $i1 = $i0 * 2;

        $r16 = newarray (byte)[$i1];

        $r14 = <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] IV_BLOCK_LABEL>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.PRF: void computePRF(byte[],byte[],byte[],byte[])>($r16, null, $r14, $r11);

        $r18 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r18.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r16, 0, $i0);

        $r19 = new javax.crypto.spec.IvParameterSpec;

        specialinvoke $r19.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r16, $i0, $i0);

     label15:
        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r6 == null goto label16;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is exportable: ");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("master_secret");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r11 = $r1.<org.apache.harmony.xnet.provider.jsse.SSLSessionImpl: byte[] master_secret>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r11);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("client_random");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r2);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("server_random");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r9);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("client_mac_secret");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r12);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("server_mac_secret");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r13);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("client_key");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r15);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("server_key");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r17);

        if $r18 != null goto label29;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("no IV.");

     label16:
        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher> = $r20;

        $r20 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>($r4);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher> = $r20;

        $r21 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac encMac> = $r21;

        $r21 = staticinvoke <javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)>($r5);

        $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac decMac> = $r21;

        if $z1 == 0 goto label32;

        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

        $r22 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, $r4);

        virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r22, $r18);

        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher>;

        $r22 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r17, $r4);

        virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r22, $r19);

        $r21 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac encMac>;

        $r22 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r12, $r5);

        virtualinvoke $r21.<javax.crypto.Mac: void init(java.security.Key)>($r22);

        $r21 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $r22 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r13, $r5);

        virtualinvoke $r21.<javax.crypto.Mac: void init(java.security.Key)>($r22);

     label17:
        return;

     label18:
        $i0 = $r3.<org.apache.harmony.xnet.provider.jsse.CipherSuite: int expandedKeyMaterial>;

     label19:
        $i1 = $i0;

     label20:
        goto label02;

     label21:
        $z1 = 0;

        goto label07;

     label22:
        $z2 = 0;

     label23:
        goto label09;

     label24:
        $z2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z2 == 0 goto label15;

        $r18 = new javax.crypto.spec.IvParameterSpec;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

     label25:
        $i2 = $i2 + $i1;

     label26:
        $i2 = $i2 * 2;

        specialinvoke $r18.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r10, $i2, $i0);

        $r19 = new javax.crypto.spec.IvParameterSpec;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

     label27:
        $i1 = $i2 + $i1;

        $i1 = $i1 * 2;

     label28:
        $i1 = $i1 + $i0;

        specialinvoke $r19.<javax.crypto.spec.IvParameterSpec: void <init>(byte[],int,int)>($r10, $i1, $i0);

        goto label15;

     label29:
        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("client_iv");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r2 = virtualinvoke $r18.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r2);

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("server_iv");

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        $r2 = virtualinvoke $r19.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        virtualinvoke $r6.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r2);

     label30:
        goto label16;

     label31:
        $r23 := @caughtexception;

        virtualinvoke $r23.<java.lang.Throwable: void printStackTrace()>();

        $r24 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r25 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r25.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Error during computation of security parameters");

        specialinvoke $r24.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r25);

        throw $r24;

     label32:
        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

        $r22 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r17, $r4);

        virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(1, $r22, $r19);

        $r20 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher>;

        $r22 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r15, $r4);

        virtualinvoke $r20.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r22, $r18);

        $r21 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac encMac>;

        $r22 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r13, $r5);

        virtualinvoke $r21.<javax.crypto.Mac: void init(java.security.Key)>($r22);

        $r21 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $r22 = new javax.crypto.spec.SecretKeySpec;

        specialinvoke $r22.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r12, $r5);

        virtualinvoke $r21.<javax.crypto.Mac: void init(java.security.Key)>($r22);

     label33:
        return;

        catch java.lang.Exception from label01 to label04 with label31;
        catch java.lang.Exception from label05 to label06 with label31;
        catch java.lang.Exception from label08 to label10 with label31;
        catch java.lang.Exception from label11 to label12 with label31;
        catch java.lang.Exception from label13 to label14 with label31;
        catch java.lang.Exception from label14 to label17 with label31;
        catch java.lang.Exception from label18 to label19 with label31;
        catch java.lang.Exception from label20 to label21 with label31;
        catch java.lang.Exception from label23 to label25 with label31;
        catch java.lang.Exception from label26 to label27 with label31;
        catch java.lang.Exception from label28 to label30 with label31;
        catch java.lang.Exception from label32 to label33 with label31;
    }

    protected byte[] decrypt(byte, byte[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS $r0;
        byte $b0, $b3, $b4;
        byte[] $r1, $r3, $r6;
        int $i1, $i2;
        javax.crypto.Cipher $r2;
        boolean $z0;
        org.apache.harmony.xnet.provider.jsse.AlertException $r4;
        javax.net.ssl.SSLProtocolException $r5;
        javax.crypto.Mac $r7;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher decCipher>;

        $r3 = virtualinvoke $r2.<javax.crypto.Cipher: byte[] update(byte[],int,int)>($r1, $i1, $i2);

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z0 == 0 goto label7;

        $i1 = lengthof $r3;

        $i1 = $i1 - 1;

        $b3 = $r3[$i1];

        $i1 = 0;

     label1:
        if $i1 >= $b3 goto label3;

        $i2 = lengthof $r3;

        $i2 = $i2 - 2;

        $i2 = $i2 - $i1;

        $b4 = $r3[$i2];

        if $b4 == $b3 goto label2;

        $r4 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r5 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r5.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Received message has bad padding");

        specialinvoke $r4.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(21, $r5);

        throw $r4;

     label2:
        $i1 = $i1 + 1;

        goto label1;

     label3:
        $i1 = lengthof $r3;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i1 = $i1 - $i2;

        $i1 = $i1 - $b3;

        $i1 = $i1 - 1;

        $r1 = newarray (byte)[$i1];

     label4:
        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header>;

        $r6[0] = $b0;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header>;

        $i1 = lengthof $r1;

        $i1 = 65280 & $i1;

        $i1 = $i1 >> 8;

        $b0 = (byte) $i1;

        $r6[3] = $b0;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header>;

        $i1 = lengthof $r1;

        $i1 = $i1 & 255;

        $b0 = (byte) $i1;

        $r6[4] = $b0;

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] read_seq_num>;

        virtualinvoke $r7.<javax.crypto.Mac: void update(byte[])>($r6);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $r6 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header>;

        virtualinvoke $r7.<javax.crypto.Mac: void update(byte[])>($r6);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $i1 = lengthof $r1;

        virtualinvoke $r7.<javax.crypto.Mac: void update(byte[],int,int)>($r3, 0, $i1);

        $r7 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac decMac>;

        $r6 = virtualinvoke $r7.<javax.crypto.Mac: byte[] doFinal()>();

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r8 == null goto label5;

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r8.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("Decrypted:");

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r8.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r3);

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r8.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>("Expected mac value:");

        $r8 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r8.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r6);

     label5:
        $i1 = 0;

     label6:
        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        if $i1 >= $i2 goto label9;

        $b0 = $r6[$i1];

        $i2 = lengthof $r1;

        $i2 = $i2 + $i1;

        $b3 = $r3[$i2];

        if $b0 == $b3 goto label8;

        $r4 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r5 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r5.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Bad record MAC");

        specialinvoke $r4.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(20, $r5);

        throw $r4;

     label7:
        $i1 = lengthof $r3;

        $i2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i1 = $i1 - $i2;

        $r1 = newarray (byte)[$i1];

        goto label4;

     label8:
        $i1 = $i1 + 1;

        goto label6;

     label9:
        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, $r1, 0, $i1);

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] read_seq_num>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: void incSequenceNumber(byte[])>($r3);

        return $r1;
    }

    protected byte[] encrypt(byte, byte[], int, int)
    {
        org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS $r0;
        byte $b0;
        byte[] $r1, $r2, $r3;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        javax.crypto.Mac $r4;
        org.apache.harmony.xnet.provider.jsse.Logger$Stream $r5;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;
        javax.crypto.Cipher $r9;
        java.security.GeneralSecurityException $r10;
        org.apache.harmony.xnet.provider.jsse.AlertException $r11;
        javax.net.ssl.SSLProtocolException $r12;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        $i3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: int hash_size>;

        $i3 = $i2 + $i3;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z0 == 0 goto label19;

        $i3 = $i3 + 1;

        $i4 = $i3 & 7;

        $i4 = 8 - $i4;

        $i4 = $i4 & 7;

     label01:
        $i5 = $i3 + $i4;

        $r2 = newarray (byte)[$i5];

     label02:
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i1, $r2, 0, $i2);

     label03:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header>;

        $r3[0] = $b0;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header>;

        $i5 = 65280 & $i2;

        $i5 = $i5 >> 8;

        $b0 = (byte) $i5;

        $r3[3] = $b0;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header>;

        $i5 = $i2 & 255;

        $b0 = (byte) $i5;

        $r3[4] = $b0;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac encMac>;

     label04:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] write_seq_num>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r3);

     label05:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac encMac>;

     label06:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: byte[] mac_material_header>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[])>($r3);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac encMac>;

        virtualinvoke $r4.<javax.crypto.Mac: void update(byte[],int,int)>($r1, $i1, $i2);

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: javax.crypto.Mac encMac>;

        virtualinvoke $r4.<javax.crypto.Mac: void doFinal(byte[],int)>($r2, $i2);

     label07:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z0 == 0 goto label09;

        $i1 = $i3 - 1;

        $i2 = lengthof $r2;

     label08:
        $b0 = (byte) $i4;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r2, $i1, $i2, $b0);

     label09:
        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        if $r5 == null goto label14;

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

     label10:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SSLRecordProtocol.do_encryption: Generic");

     label11:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: boolean is_block_cipher>;

        if $z0 == 0 goto label20;

     label12:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BlockCipher with padding[");

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]:");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void println(java.lang.String)>($r8);

        $r5 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: org.apache.harmony.xnet.provider.jsse.Logger$Stream logger>;

        virtualinvoke $r5.<org.apache.harmony.xnet.provider.jsse.Logger$Stream: void print(byte[])>($r2);

     label14:
        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

     label15:
        $i1 = lengthof $r2;

        $i1 = virtualinvoke $r9.<javax.crypto.Cipher: int getOutputSize(int)>($i1);

     label16:
        $r1 = newarray (byte)[$i1];

        $r9 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: javax.crypto.Cipher encCipher>;

     label17:
        $i1 = lengthof $r2;

        virtualinvoke $r9.<javax.crypto.Cipher: int update(byte[],int,int,byte[])>($r2, 0, $i1, $r1);

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.ConnectionState: byte[] write_seq_num>;

        staticinvoke <org.apache.harmony.xnet.provider.jsse.ConnectionStateTLS: void incSequenceNumber(byte[])>($r2);

     label18:
        return $r1;

     label19:
        $i4 = 0;

        goto label01;

     label20:
        $r8 = "StreamCipher:";

        goto label13;

     label21:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Throwable: void printStackTrace()>();

        $r11 = new org.apache.harmony.xnet.provider.jsse.AlertException;

        $r12 = new javax.net.ssl.SSLProtocolException;

        specialinvoke $r12.<javax.net.ssl.SSLProtocolException: void <init>(java.lang.String)>("Error during the encryption");

        specialinvoke $r11.<org.apache.harmony.xnet.provider.jsse.AlertException: void <init>(byte,javax.net.ssl.SSLException)>(80, $r12);

        throw $r11;

        catch java.security.GeneralSecurityException from label02 to label03 with label21;
        catch java.security.GeneralSecurityException from label04 to label05 with label21;
        catch java.security.GeneralSecurityException from label06 to label07 with label21;
        catch java.security.GeneralSecurityException from label08 to label09 with label21;
        catch java.security.GeneralSecurityException from label10 to label11 with label21;
        catch java.security.GeneralSecurityException from label12 to label14 with label21;
        catch java.security.GeneralSecurityException from label15 to label16 with label21;
        catch java.security.GeneralSecurityException from label17 to label18 with label21;
    }
}
