public class org.bouncycastle.crypto.engines.RSAEngine extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricBlockCipher
{
    private boolean forEncryption;
    private org.bouncycastle.crypto.params.RSAKeyParameters key;
    private int shift;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.RSAEngine $r0;

        $r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int getInputBlockSize()
    {
        org.bouncycastle.crypto.engines.RSAEngine $r0;
        org.bouncycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        $r1 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $z0 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 - 1;

        return $i0;

     label1:
        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;
    }

    public int getOutputBlockSize()
    {
        org.bouncycastle.crypto.engines.RSAEngine $r0;
        org.bouncycastle.crypto.params.RSAKeyParameters $r1;
        java.math.BigInteger $r2;
        int $i0;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        $r1 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r2.<java.math.BigInteger: int bitLength()>();

        $z0 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        return $i0;

     label1:
        $i0 = $i0 + 7;

        $i0 = $i0 / 8;

        $i0 = $i0 - 1;

        return $i0;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.engines.RSAEngine $r0;
        boolean $z0;
        int $i0, $i1;
        org.bouncycastle.crypto.CipherParameters $r1;
        org.bouncycastle.crypto.params.RSAKeyParameters $r2;
        java.math.BigInteger $r3;

        $r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        $z0 := @parameter0: boolean;

        $r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $r2 = (org.bouncycastle.crypto.params.RSAKeyParameters) $r1;

        $r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.params.RSAKeyParameters key> = $r2;

        $r0.<org.bouncycastle.crypto.engines.RSAEngine: boolean forEncryption> = $z0;

        $r2 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $i0 = virtualinvoke $r3.<java.math.BigInteger: int bitLength()>();

        $i1 = $i0 % 8;

        if $i1 != 0 goto label1;

        $r0.<org.bouncycastle.crypto.engines.RSAEngine: int shift> = 0;

        return;

     label1:
        $i0 = $i0 % 8;

        $i0 = 8 - $i0;

        $r0.<org.bouncycastle.crypto.engines.RSAEngine: int shift> = $i0;

        return;
    }

    public byte[] processBlock(byte[], int, int)
    {
        org.bouncycastle.crypto.engines.RSAEngine $r0;
        byte[] $r1, $r4, $r5;
        int $i0, $i1, $i2;
        java.math.BigInteger $r2, $r8, $r9, $r10, $r11, $r12, $r13;
        org.bouncycastle.crypto.DataLengthException $r3;
        byte $b3;
        short $s4;
        org.bouncycastle.crypto.params.RSAKeyParameters $r6;
        boolean $z0;
        org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters $r7;

        $r0 := @this: org.bouncycastle.crypto.engines.RSAEngine;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.RSAEngine: int getInputBlockSize()>();

        $i2 = $i2 + 1;

        if $i1 <= $i2 goto label01;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.\n");

        throw $r3;

     label01:
        $i2 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.RSAEngine: int getInputBlockSize()>();

        $i2 = $i2 + 1;

        if $i1 != $i2 goto label02;

        $b3 = $r1[$i0];

        $i2 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: int shift>;

        $s4 = 128 >> $i2;

        $s4 = $b3 & $s4;

        if $s4 == 0 goto label02;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input too large for RSA cipher.\n");

        throw $r3;

     label02:
        if $i0 != 0 goto label03;

        $i2 = lengthof $r1;

        if $i1 == $i2 goto label06;

     label03:
        $r4 = newarray (byte)[$i1];

        $r5 = $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i0, $r4, 0, $i1);

     label04:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, $r5);

        $r6 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $z0 = $r6 instanceof org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters;

        if $z0 == 0 goto label07;

        $r6 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r7 = (org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters) $r6;

        $r8 = virtualinvoke $r7.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getP()>();

        $r9 = virtualinvoke $r7.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQ()>();

        $r10 = virtualinvoke $r7.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDP()>();

        $r11 = virtualinvoke $r7.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getDQ()>();

        $r12 = virtualinvoke $r7.<org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters: java.math.BigInteger getQInv()>();

        $r13 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r8);

        $r10 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r10, $r8);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r9);

        $r2 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r11, $r9);

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r2);

        $r12 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r12);

        $r8 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r8);

        $r9 = virtualinvoke $r8.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r9);

        $r9 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r2);

        $r1 = virtualinvoke $r9.<java.math.BigInteger: byte[] toByteArray()>();

     label05:
        $z0 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: boolean forEncryption>;

        if $z0 == 0 goto label09;

        $b3 = $r1[0];

        if $b3 != 0 goto label08;

        $i0 = lengthof $r1;

        $i1 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.RSAEngine: int getOutputBlockSize()>();

        if $i0 <= $i1 goto label08;

        $i0 = lengthof $r1;

        $i0 = $i0 - 1;

        $r4 = newarray (byte)[$i0];

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, $r4, 0, $i0);

        return $r4;

     label06:
        $r5 = $r1;

        goto label04;

     label07:
        $r6 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r9 = virtualinvoke $r6.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getExponent()>();

        $r6 = $r0.<org.bouncycastle.crypto.engines.RSAEngine: org.bouncycastle.crypto.params.RSAKeyParameters key>;

        $r8 = virtualinvoke $r6.<org.bouncycastle.crypto.params.RSAKeyParameters: java.math.BigInteger getModulus()>();

        $r9 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r9, $r8);

        $r1 = virtualinvoke $r9.<java.math.BigInteger: byte[] toByteArray()>();

        goto label05;

     label08:
        $i0 = lengthof $r1;

        $i1 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.RSAEngine: int getOutputBlockSize()>();

        if $i0 >= $i1 goto label10;

        $i0 = virtualinvoke $r0.<org.bouncycastle.crypto.engines.RSAEngine: int getOutputBlockSize()>();

        $r4 = newarray (byte)[$i0];

        $i0 = lengthof $r4;

        $i1 = lengthof $r1;

        $i0 = $i0 - $i1;

        $i1 = lengthof $r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r4, $i0, $i1);

        return $r4;

     label09:
        $b3 = $r1[0];

        if $b3 != 0 goto label10;

        $i0 = lengthof $r1;

        $i0 = $i0 - 1;

        $r4 = newarray (byte)[$i0];

        $i0 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 1, $r4, 0, $i0);

        return $r4;

     label10:
        return $r1;
    }
}
