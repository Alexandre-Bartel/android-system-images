public class org.apache.http.message.BasicHeaderIterator extends java.lang.Object implements org.apache.http.HeaderIterator
{
    protected final org.apache.http.Header[] allHeaders;
    protected int currentIndex;
    protected java.lang.String headerName;

    public void <init>(org.apache.http.Header[], java.lang.String)
    {
        org.apache.http.message.BasicHeaderIterator $r0;
        org.apache.http.Header[] $r1;
        java.lang.String $r2;
        int $i0;
        java.lang.IllegalArgumentException $r3;

        $r0 := @this: org.apache.http.message.BasicHeaderIterator;

        $r1 := @parameter0: org.apache.http.Header[];

        $r2 := @parameter1: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Header array must not be null.");

        throw $r3;

     label1:
        $r0.<org.apache.http.message.BasicHeaderIterator: org.apache.http.Header[] allHeaders> = $r1;

        $r0.<org.apache.http.message.BasicHeaderIterator: java.lang.String headerName> = $r2;

        $i0 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderIterator: int findNext(int)>(-1);

        $r0.<org.apache.http.message.BasicHeaderIterator: int currentIndex> = $i0;

        return;
    }

    protected boolean filterHeader(int)
    {
        org.apache.http.message.BasicHeaderIterator $r0;
        int $i0;
        java.lang.String $r1, $r4;
        org.apache.http.Header[] $r2;
        org.apache.http.Header $r3;
        boolean $z0;

        $r0 := @this: org.apache.http.message.BasicHeaderIterator;

        $i0 := @parameter0: int;

        $r1 = $r0.<org.apache.http.message.BasicHeaderIterator: java.lang.String headerName>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.http.message.BasicHeaderIterator: java.lang.String headerName>;

        $r2 = $r0.<org.apache.http.message.BasicHeaderIterator: org.apache.http.Header[] allHeaders>;

        $r3 = $r2[$i0];

        $r4 = interfaceinvoke $r3.<org.apache.http.Header: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    protected int findNext(int)
    {
        org.apache.http.message.BasicHeaderIterator $r0;
        int $i0, $i1;
        boolean $z0;
        org.apache.http.Header[] $r1;

        $r0 := @this: org.apache.http.message.BasicHeaderIterator;

        $i1 := @parameter0: int;

        if $i1 >= -1 goto label1;

        return -1;

     label1:
        $r1 = $r0.<org.apache.http.message.BasicHeaderIterator: org.apache.http.Header[] allHeaders>;

        $i0 = lengthof $r1;

        $i0 = $i0 - 1;

        $z0 = 0;

     label2:
        if $z0 != 0 goto label3;

        if $i1 >= $i0 goto label3;

        $i1 = $i1 + 1;

        $z0 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderIterator: boolean filterHeader(int)>($i1);

        goto label2;

     label3:
        if $z0 == 0 goto label4;

        return $i1;

     label4:
        return -1;
    }

    public boolean hasNext()
    {
        org.apache.http.message.BasicHeaderIterator $r0;
        int $i0;

        $r0 := @this: org.apache.http.message.BasicHeaderIterator;

        $i0 = $r0.<org.apache.http.message.BasicHeaderIterator: int currentIndex>;

        if $i0 < 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public final java.lang.Object next() throws java.util.NoSuchElementException
    {
        org.apache.http.message.BasicHeaderIterator $r0;
        org.apache.http.Header $r1;

        $r0 := @this: org.apache.http.message.BasicHeaderIterator;

        $r1 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderIterator: org.apache.http.Header nextHeader()>();

        return $r1;
    }

    public org.apache.http.Header nextHeader() throws java.util.NoSuchElementException
    {
        org.apache.http.message.BasicHeaderIterator $r0;
        int $i0, $i1;
        java.util.NoSuchElementException $r1;
        org.apache.http.Header[] $r2;
        org.apache.http.Header $r3;

        $r0 := @this: org.apache.http.message.BasicHeaderIterator;

        $i0 = $r0.<org.apache.http.message.BasicHeaderIterator: int currentIndex>;

        if $i0 >= 0 goto label1;

        $r1 = new java.util.NoSuchElementException;

        specialinvoke $r1.<java.util.NoSuchElementException: void <init>(java.lang.String)>("Iteration already finished.");

        throw $r1;

     label1:
        $i1 = virtualinvoke $r0.<org.apache.http.message.BasicHeaderIterator: int findNext(int)>($i0);

        $r0.<org.apache.http.message.BasicHeaderIterator: int currentIndex> = $i1;

        $r2 = $r0.<org.apache.http.message.BasicHeaderIterator: org.apache.http.Header[] allHeaders>;

        $r3 = $r2[$i0];

        return $r3;
    }

    public void remove() throws java.lang.UnsupportedOperationException
    {
        org.apache.http.message.BasicHeaderIterator $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: org.apache.http.message.BasicHeaderIterator;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Removing headers is not supported.");

        throw $r1;
    }
}
