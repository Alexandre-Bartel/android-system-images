public class SQLite.JDBC2y.JDBCResultSet extends java.lang.Object implements java.sql.ResultSet
{
    private java.lang.String lastg;
    private SQLite.JDBC2y.JDBCResultSetMetaData m;
    private int row;
    private SQLite.JDBC2y.JDBCStatement s;
    protected SQLite.TableResult tr;

    public void <init>(SQLite.TableResult, SQLite.JDBC2y.JDBCStatement)
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        SQLite.JDBC2y.JDBCStatement $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: SQLite.TableResult;

        $r2 := @parameter1: SQLite.JDBC2y.JDBCStatement;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr> = $r1;

        $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.JDBC2y.JDBCStatement s> = $r2;

        $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.JDBC2y.JDBCResultSetMetaData m> = null;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = -1;

        return;
    }

    private java.sql.Date internalGetDate(int, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.util.Calendar $r1;
        SQLite.TableResult $r2;
        java.sql.SQLException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.util.Vector $r6;
        java.lang.Object $r7;
        java.lang.String[] $r8;
        java.sql.Date $r9;
        java.lang.Exception $r10;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Calendar;

        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r2 == null goto label1;

        if $i0 < 1 goto label1;

        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r2.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r3 = new java.sql.SQLException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r6 = $r2.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r8 = (java.lang.String[]) $r7;

        $r8 = (java.lang.String[]) $r8;

        $i0 = $i0 - 1;

        $r5 = $r8[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r5;

     label3:
        $r5 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r9 = staticinvoke <java.sql.Date: java.sql.Date valueOf(java.lang.String)>($r5);

     label4:
        return $r9;

     label5:
        $r10 := @caughtexception;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private java.lang.Double internalGetDouble(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        java.lang.Double $r8;
        java.lang.Exception $r9;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        if $i0 < 1 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i0 = $i0 - 1;

        $r4 = $r7[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

     label3:
        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r8 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>($r4);

     label4:
        return $r8;

     label5:
        $r9 := @caughtexception;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private java.lang.Float internalGetFloat(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        java.lang.Float $r8;
        java.lang.Exception $r9;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        if $i0 < 1 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i0 = $i0 - 1;

        $r4 = $r7[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

     label3:
        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r4);

     label4:
        return $r8;

     label5:
        $r9 := @caughtexception;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private java.lang.Integer internalGetInt(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        java.lang.Integer $r8;
        java.lang.Exception $r9;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        if $i0 < 1 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i0 = $i0 - 1;

        $r4 = $r7[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

     label3:
        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r4);

     label4:
        return $r8;

     label5:
        $r9 := @caughtexception;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private java.lang.Long internalGetLong(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        java.lang.Long $r8;
        java.lang.Exception $r9;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        if $i0 < 1 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i0 = $i0 - 1;

        $r4 = $r7[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

     label3:
        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>($r4);

     label4:
        return $r8;

     label5:
        $r9 := @caughtexception;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private java.lang.Short internalGetShort(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        java.lang.Short $r8;
        java.lang.Exception $r9;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        if $i0 < 1 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i0 = $i0 - 1;

        $r4 = $r7[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

     label3:
        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(java.lang.String)>($r4);

     label4:
        return $r8;

     label5:
        $r9 := @caughtexception;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private java.sql.Time internalGetTime(int, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.util.Calendar $r1;
        SQLite.TableResult $r2;
        java.sql.SQLException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.util.Vector $r6;
        java.lang.Object $r7;
        java.lang.String[] $r8;
        java.sql.Time $r9;
        java.lang.Exception $r10;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Calendar;

        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r2 == null goto label1;

        if $i0 < 1 goto label1;

        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r2.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r3 = new java.sql.SQLException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r6 = $r2.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r8 = (java.lang.String[]) $r7;

        $r8 = (java.lang.String[]) $r8;

        $i0 = $i0 - 1;

        $r5 = $r8[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r5;

     label3:
        $r5 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r9 = staticinvoke <java.sql.Time: java.sql.Time valueOf(java.lang.String)>($r5);

     label4:
        return $r9;

     label5:
        $r10 := @caughtexception;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private java.sql.Timestamp internalGetTimestamp(int, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.util.Calendar $r1;
        SQLite.TableResult $r2;
        java.sql.SQLException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5;
        java.util.Vector $r6;
        java.lang.Object $r7;
        java.lang.String[] $r8;
        java.sql.Timestamp $r9;
        java.lang.Exception $r10;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Calendar;

        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r2 == null goto label1;

        if $i0 < 1 goto label1;

        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r2.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r3 = new java.sql.SQLException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r2 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r6 = $r2.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r7 = virtualinvoke $r6.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r8 = (java.lang.String[]) $r7;

        $r8 = (java.lang.String[]) $r8;

        $i0 = $i0 - 1;

        $r5 = $r8[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r5;

     label3:
        $r5 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r9 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>($r5);

     label4:
        return $r9;

     label5:
        $r10 := @caughtexception;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    public boolean absolute(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        return 0;

     label1:
        if $i0 >= 0 goto label2;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int nrows>;

        $i1 = $i1 + 1;

        $i0 = $i0 + $i1;

     label2:
        $i0 = $i0 + -1;

        if $i0 < 0 goto label3;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int nrows>;

        if $i0 <= $i1 goto label4;

     label3:
        return 0;

     label4:
        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = $i0;

        return 1;
    }

    public void afterLast() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        return;

     label1:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r1.<SQLite.TableResult: int nrows>;

        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = $i0;

        return;
    }

    public void beforeFirst() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        return;

     label1:
        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = -1;

        return;
    }

    public void cancelRowUpdates() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void clearWarnings() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void close() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.JDBC2y.JDBCStatement s> = null;

        $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr> = null;

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = null;

        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = -1;

        return;
    }

    public void deleteRow() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public int findColumn(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.ResultSetMetaData $r2;
        SQLite.JDBC2y.JDBCResultSetMetaData $r3;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.ResultSetMetaData getMetaData()>();

        $r3 = (SQLite.JDBC2y.JDBCResultSetMetaData) $r2;

        $i0 = virtualinvoke $r3.<SQLite.JDBC2y.JDBCResultSetMetaData: int findColByName(java.lang.String)>($r1);

        return $i0;
    }

    public boolean first() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r1.<SQLite.TableResult: int nrows>;

        if $i0 > 0 goto label2;

     label1:
        return 0;

     label2:
        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = 0;

        return 1;
    }

    public java.sql.Array getArray(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.sql.Array getArray(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public java.io.InputStream getAsciiStream(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.io.InputStream getAsciiStream(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public java.math.BigDecimal getBigDecimal(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.math.BigDecimal getBigDecimal(int, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.math.BigDecimal getBigDecimal(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public java.math.BigDecimal getBigDecimal(java.lang.String, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public java.io.InputStream getBinaryStream(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.io.InputStream getBinaryStream(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public java.sql.Blob getBlob(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.sql.Blob getBlob(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public boolean getBoolean(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public boolean getBoolean(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public byte getByte(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public byte getByte(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public byte[] getBytes(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        byte[] $r8;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        if $i0 < 1 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i0 = $i0 - 1;

        $r4 = $r7[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        if $r4 == null goto label3;

        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r8 = staticinvoke <SQLite.StringEncoder: byte[] decode(java.lang.String)>($r4);

        return $r8;

     label3:
        return null;
    }

    public byte[] getBytes(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        byte[] $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: byte[] getBytes(int)>($i0);

        return $r2;
    }

    public java.io.Reader getCharacterStream(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.io.Reader getCharacterStream(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public java.sql.Clob getClob(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.sql.Clob getClob(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public int getConcurrency() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        return 1007;
    }

    public java.lang.String getCursorName() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        return null;
    }

    public java.sql.Date getDate(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Date $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Date internalGetDate(int,java.util.Calendar)>($i0, null);

        return $r1;
    }

    public java.sql.Date getDate(int, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.util.Calendar $r1;
        java.sql.Date $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Calendar;

        $r2 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Date internalGetDate(int,java.util.Calendar)>($i0, $r1);

        return $r2;
    }

    public java.sql.Date getDate(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        java.sql.Date $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Date getDate(int)>($i0);

        return $r2;
    }

    public java.sql.Date getDate(java.lang.String, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.util.Calendar $r2;
        int $i0;
        java.sql.Date $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Calendar;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Date getDate(int,java.util.Calendar)>($i0, $r2);

        return $r3;
    }

    public double getDouble(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.lang.Double $r1;
        double $d0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Double internalGetDouble(int)>($i0);

        if $r1 == null goto label1;

        $d0 = virtualinvoke $r1.<java.lang.Double: double doubleValue()>();

        return $d0;

     label1:
        return 0.0;
    }

    public double getDouble(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        double $d0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $d0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: double getDouble(int)>($i0);

        return $d0;
    }

    public int getFetchDirection() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public int getFetchSize() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public float getFloat(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.lang.Float $r1;
        float $f0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Float internalGetFloat(int)>($i0);

        if $r1 == null goto label1;

        $f0 = virtualinvoke $r1.<java.lang.Float: float floatValue()>();

        return $f0;

     label1:
        return 0.0F;
    }

    public float getFloat(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        float $f0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $f0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: float getFloat(int)>($i0);

        return $f0;
    }

    public int getInt(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.lang.Integer $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Integer internalGetInt(int)>($i0);

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        return 0;
    }

    public int getInt(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int getInt(int)>($i0);

        return $i0;
    }

    public long getLong(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.lang.Long $r1;
        long $l1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Long internalGetLong(int)>($i0);

        if $r1 == null goto label1;

        $l1 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l1;

     label1:
        return 0L;
    }

    public long getLong(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        long $l1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $l1 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: long getLong(int)>($i0);

        return $l1;
    }

    public java.sql.ResultSetMetaData getMetaData() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.JDBC2y.JDBCResultSetMetaData $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.JDBC2y.JDBCResultSetMetaData m>;

        if $r1 != null goto label1;

        $r1 = new SQLite.JDBC2y.JDBCResultSetMetaData;

        specialinvoke $r1.<SQLite.JDBC2y.JDBCResultSetMetaData: void <init>(SQLite.JDBC2y.JDBCResultSet)>($r0);

        $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.JDBC2y.JDBCResultSetMetaData m> = $r1;

     label1:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.JDBC2y.JDBCResultSetMetaData m>;

        return $r1;
    }

    public java.lang.Object getObject(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        boolean $z0;
        SQLite.JDBC2y.TableResultX $r8;
        int[] $r9;
        java.lang.Short $r10;
        java.lang.Integer $r11;
        java.lang.Double $r12;
        java.lang.Float $r13;
        java.lang.Long $r14;
        byte[] $r15;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label01;

        if $i0 < 1 goto label01;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label02;

     label01:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label02:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i1 = $i0 - 1;

        $r4 = $r7[$i1];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $z0 = $r1 instanceof SQLite.JDBC2y.TableResultX;

        if $z0 == 0 goto label11;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r8 = (SQLite.JDBC2y.TableResultX) $r1;

        $r9 = $r8.<SQLite.JDBC2y.TableResultX: int[] sql_type>;

        $i1 = $i0 - 1;

        $i1 = $r9[$i1];

        lookupswitch($i1)
        {
            case -5: goto label08;
            case -4: goto label09;
            case -3: goto label09;
            case -2: goto label09;
            case -1: goto label03;
            case 0: goto label10;
            case 1: goto label03;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label05;
            case 5: goto label04;
            case 6: goto label07;
            case 7: goto label03;
            case 8: goto label06;
            default: goto label03;
        };

     label03:
        return $r4;

     label04:
        $r10 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Short internalGetShort(int)>($i0);

        return $r10;

     label05:
        $r11 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Integer internalGetInt(int)>($i0);

        return $r11;

     label06:
        $r12 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Double internalGetDouble(int)>($i0);

        return $r12;

     label07:
        $r13 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Float internalGetFloat(int)>($i0);

        return $r13;

     label08:
        $r14 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Long internalGetLong(int)>($i0);

        return $r14;

     label09:
        $r15 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: byte[] getBytes(int)>($i0);

        return $r15;

     label10:
        return null;

     label11:
        return $r4;
    }

    public java.lang.Object getObject(int, java.util.Map) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.util.Map $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Map;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public java.lang.Object getObject(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        java.lang.Object $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Object getObject(int)>($i0);

        return $r2;
    }

    public java.lang.Object getObject(java.lang.String, java.util.Map) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.util.Map $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Map;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public java.sql.Ref getRef(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.sql.Ref getRef(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public int getRow() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("no rows");

        throw $r2;

     label1:
        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $i0 = $i0 + 1;

        return $i0;
    }

    public short getShort(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.lang.Short $r1;
        short $s1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.Short internalGetShort(int)>($i0);

        if $r1 == null goto label1;

        $s1 = virtualinvoke $r1.<java.lang.Short: short shortValue()>();

        return $s1;

     label1:
        return 0;
    }

    public short getShort(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        short $s1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $s1 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: short getShort(int)>($i0);

        return $s1;
    }

    public java.sql.Statement getStatement() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.JDBC2y.JDBCStatement $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.JDBC2y.JDBCStatement s>;

        if $r1 != null goto label1;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("stale result set");

        throw $r2;

     label1:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.JDBC2y.JDBCStatement s>;

        return $r1;
    }

    public java.lang.String getString(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        if $i0 < 1 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i0 = $i0 - 1;

        $r4 = $r7[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        return $r4;
    }

    public java.lang.String getString(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r1 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String getString(int)>($i0);

        return $r1;
    }

    public java.sql.Time getTime(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Time $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Time internalGetTime(int,java.util.Calendar)>($i0, null);

        return $r1;
    }

    public java.sql.Time getTime(int, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.util.Calendar $r1;
        java.sql.Time $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Calendar;

        $r2 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Time internalGetTime(int,java.util.Calendar)>($i0, $r1);

        return $r2;
    }

    public java.sql.Time getTime(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        java.sql.Time $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Time getTime(int)>($i0);

        return $r2;
    }

    public java.sql.Time getTime(java.lang.String, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.util.Calendar $r2;
        int $i0;
        java.sql.Time $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Calendar;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Time getTime(int,java.util.Calendar)>($i0, $r2);

        return $r3;
    }

    public java.sql.Timestamp getTimestamp(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Timestamp $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Timestamp internalGetTimestamp(int,java.util.Calendar)>($i0, null);

        return $r1;
    }

    public java.sql.Timestamp getTimestamp(int, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.util.Calendar $r1;
        java.sql.Timestamp $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.util.Calendar;

        $r2 = specialinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Timestamp internalGetTimestamp(int,java.util.Calendar)>($i0, $r1);

        return $r2;
    }

    public java.sql.Timestamp getTimestamp(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        java.sql.Timestamp $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Timestamp getTimestamp(int)>($i0);

        return $r2;
    }

    public java.sql.Timestamp getTimestamp(java.lang.String, java.util.Calendar) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.util.Calendar $r2;
        int $i0;
        java.sql.Timestamp $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.util.Calendar;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r3 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.sql.Timestamp getTimestamp(int,java.util.Calendar)>($i0, $r2);

        return $r3;
    }

    public int getType() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        return 1004;
    }

    public java.net.URL getURL(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        SQLite.TableResult $r1;
        java.sql.SQLException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        java.util.Vector $r5;
        java.lang.Object $r6;
        java.lang.String[] $r7;
        java.net.URL $r8;
        java.lang.Exception $r9;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        if $i0 < 1 goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int ncolumns>;

        if $i0 <= $i1 goto label2;

     label1:
        $r2 = new java.sql.SQLException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("column ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r4);

        throw $r2;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $r5 = $r1.<SQLite.TableResult: java.util.Vector rows>;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r6 = virtualinvoke $r5.<java.util.Vector: java.lang.Object elementAt(int)>($i1);

        $r7 = (java.lang.String[]) $r6;

        $r7 = (java.lang.String[]) $r7;

        $i0 = $i0 - 1;

        $r4 = $r7[$i0];

        $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg> = $r4;

        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        if $r4 != null goto label3;

        return null;

     label3:
        $r8 = new java.net.URL;

     label4:
        $r4 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        specialinvoke $r8.<java.net.URL: void <init>(java.lang.String)>($r4);

     label5:
        return $r8;

     label6:
        $r9 := @caughtexception;

        $r8 = null;

        goto label5;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    public java.net.URL getURL(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        java.net.URL $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: int findColumn(java.lang.String)>($r1);

        $r2 = virtualinvoke $r0.<SQLite.JDBC2y.JDBCResultSet: java.net.URL getURL(int)>($i0);

        return $r2;
    }

    public java.io.InputStream getUnicodeStream(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public java.io.InputStream getUnicodeStream(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public java.sql.SQLWarning getWarnings() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void insertRow() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public boolean isAfterLast() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0, $i1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r1.<SQLite.TableResult: int nrows>;

        if $i0 > 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int nrows>;

        if $i0 < $i1 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean isBeforeFirst() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r1.<SQLite.TableResult: int nrows>;

        if $i0 > 0 goto label2;

     label1:
        return 0;

     label2:
        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        if $i0 >= 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public boolean isFirst() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        return 1;

     label1:
        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        if $i0 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isLast() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0, $i1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        return 1;

     label1:
        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int nrows>;

        $i1 = $i1 - 1;

        if $i0 != $i1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean last() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 == null goto label1;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r1.<SQLite.TableResult: int nrows>;

        if $i0 > 0 goto label2;

     label1:
        return 0;

     label2:
        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i0 = $r1.<SQLite.TableResult: int nrows>;

        $i0 = $i0 - 1;

        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = $i0;

        return 1;
    }

    public void moveToCurrentRow() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void moveToInsertRow() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public boolean next() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0, $i1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $i0 = $i0 + 1;

        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = $i0;

        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i1 = $r1.<SQLite.TableResult: int nrows>;

        if $i0 >= $i1 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean previous() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        SQLite.TableResult $r1;
        int $i0;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        if $i0 < 0 goto label2;

        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $i0 = $i0 - 1;

        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = $i0;

     label2:
        $i0 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        if $i0 < 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public void refreshRow() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public boolean relative(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1, $i2;
        SQLite.TableResult $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $i1 = $i1 + $i0;

        if $i1 < 0 goto label2;

        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $i1 = $i1 + $i0;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: SQLite.TableResult tr>;

        $i2 = $r1.<SQLite.TableResult: int nrows>;

        if $i1 < $i2 goto label3;

     label2:
        return 0;

     label3:
        $i1 = $r0.<SQLite.JDBC2y.JDBCResultSet: int row>;

        $i0 = $i1 + $i0;

        $r0.<SQLite.JDBC2y.JDBCResultSet: int row> = $i0;

        return 1;
    }

    public boolean rowDeleted() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public boolean rowInserted() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public boolean rowUpdated() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void setFetchDirection(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void setFetchSize(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateArray(int, java.sql.Array) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Array $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.sql.Array;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateArray(java.lang.String, java.sql.Array) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.Array $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.sql.Array;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateAsciiStream(int, java.io.InputStream, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.io.InputStream $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.io.InputStream;

        $i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateAsciiStream(java.lang.String, java.io.InputStream, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.io.InputStream $r2;
        int $i0;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        $i0 := @parameter2: int;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateBigDecimal(int, java.math.BigDecimal) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.math.BigDecimal $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.math.BigDecimal;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateBigDecimal(java.lang.String, java.math.BigDecimal) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.math.BigDecimal $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.math.BigDecimal;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateBinaryStream(int, java.io.InputStream, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.io.InputStream $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.io.InputStream;

        $i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateBinaryStream(java.lang.String, java.io.InputStream, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.io.InputStream $r2;
        int $i0;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.InputStream;

        $i0 := @parameter2: int;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateBlob(int, java.sql.Blob) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Blob $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.sql.Blob;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateBlob(java.lang.String, java.sql.Blob) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.Blob $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.sql.Blob;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateBoolean(int, boolean) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        boolean $z0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $z0 := @parameter1: boolean;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateBoolean(java.lang.String, boolean) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        boolean $z0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateByte(int, byte) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        byte $b1;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $b1 := @parameter1: byte;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateByte(java.lang.String, byte) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        byte $b0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $b0 := @parameter1: byte;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateBytes(int, byte[]) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        byte[] $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: byte[];

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateBytes(java.lang.String, byte[]) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        byte[] $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: byte[];

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateCharacterStream(int, java.io.Reader, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.io.Reader $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.io.Reader;

        $i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateCharacterStream(java.lang.String, java.io.Reader, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.io.Reader $r2;
        int $i0;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.io.Reader;

        $i0 := @parameter2: int;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateClob(int, java.sql.Clob) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Clob $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.sql.Clob;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateClob(java.lang.String, java.sql.Clob) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.Clob $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.sql.Clob;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateDate(int, java.sql.Date) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Date $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.sql.Date;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateDate(java.lang.String, java.sql.Date) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.Date $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.sql.Date;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateDouble(int, double) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        double $d0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $d0 := @parameter1: double;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateDouble(java.lang.String, double) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        double $d0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $d0 := @parameter1: double;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateFloat(int, float) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        float $f0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $f0 := @parameter1: float;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateFloat(java.lang.String, float) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        float $f0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $f0 := @parameter1: float;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateInt(int, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateInt(java.lang.String, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        int $i0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateLong(int, long) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        long $l1;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $l1 := @parameter1: long;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateLong(java.lang.String, long) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        long $l0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $l0 := @parameter1: long;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateNull(int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateNull(java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateObject(int, java.lang.Object) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.lang.Object $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateObject(int, java.lang.Object, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0, $i1;
        java.lang.Object $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.Object;

        $i1 := @parameter2: int;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateObject(java.lang.String, java.lang.Object) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateObject(java.lang.String, java.lang.Object, int) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        int $i0;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        $i0 := @parameter2: int;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateRef(int, java.sql.Ref) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Ref $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.sql.Ref;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateRef(java.lang.String, java.sql.Ref) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.Ref $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.sql.Ref;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateRow() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateShort(int, short) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        short $s1;
        java.sql.SQLException $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $s1 := @parameter1: short;

        $r1 = new java.sql.SQLException;

        specialinvoke $r1.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r1;
    }

    public void updateShort(java.lang.String, short) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        short $s0;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $s0 := @parameter1: short;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateString(int, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.lang.String $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.lang.String;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateString(java.lang.String, java.lang.String) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1, $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateTime(int, java.sql.Time) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Time $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.sql.Time;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateTime(java.lang.String, java.sql.Time) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.Time $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.sql.Time;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public void updateTimestamp(int, java.sql.Timestamp) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        int $i0;
        java.sql.Timestamp $r1;
        java.sql.SQLException $r2;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $i0 := @parameter0: int;

        $r1 := @parameter1: java.sql.Timestamp;

        $r2 = new java.sql.SQLException;

        specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r2;
    }

    public void updateTimestamp(java.lang.String, java.sql.Timestamp) throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;
        java.sql.Timestamp $r2;
        java.sql.SQLException $r3;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.sql.Timestamp;

        $r3 = new java.sql.SQLException;

        specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("not supported");

        throw $r3;
    }

    public boolean wasNull() throws java.sql.SQLException
    {
        SQLite.JDBC2y.JDBCResultSet $r0;
        java.lang.String $r1;

        $r0 := @this: SQLite.JDBC2y.JDBCResultSet;

        $r1 = $r0.<SQLite.JDBC2y.JDBCResultSet: java.lang.String lastg>;

        if $r1 != null goto label1;

        return 1;

     label1:
        return 0;
    }
}
