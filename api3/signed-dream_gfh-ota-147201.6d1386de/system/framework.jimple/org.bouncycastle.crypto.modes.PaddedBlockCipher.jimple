public class org.bouncycastle.crypto.modes.PaddedBlockCipher extends org.bouncycastle.crypto.BufferedBlockCipher
{

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        org.bouncycastle.crypto.modes.PaddedBlockCipher $r0;
        org.bouncycastle.crypto.BlockCipher $r1;
        int $i0;
        byte[] $r2;

        $r0 := @this: org.bouncycastle.crypto.modes.PaddedBlockCipher;

        $r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        specialinvoke $r0.<org.bouncycastle.crypto.BufferedBlockCipher: void <init>()>();

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher cipher> = $r1;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $r2 = newarray (byte)[$i0];

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf> = $r2;

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff> = 0;

        return;
    }

    public int doFinal(byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException, org.bouncycastle.crypto.InvalidCipherTextException
    {
        org.bouncycastle.crypto.modes.PaddedBlockCipher $r0;
        byte[] $r1, $r4, $r5;
        int $i0, $i3, $i4, $i5;
        byte $b1;
        short $s2;
        org.bouncycastle.crypto.BlockCipher $r2;
        boolean $z0;
        org.bouncycastle.crypto.DataLengthException $r3;
        org.bouncycastle.crypto.InvalidCipherTextException $r6;

        $r0 := @this: org.bouncycastle.crypto.modes.PaddedBlockCipher;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $r2 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $i3 = interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i4 = 0;

        $z0 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label6;

        $i5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        if $i5 != $i3 goto label2;

        $i4 = $i3 * 2;

        $i4 = $i4 + $i0;

        $i5 = lengthof $r1;

        if $i4 <= $i5 goto label1;

        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r3;

     label1:
        $r2 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r4 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i4 = interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r1, $i0);

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff> = 0;

     label2:
        $i5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $i5 = $i3 - $i5;

        $b1 = (byte) $i5;

     label3:
        $i5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        if $i5 >= $i3 goto label4;

        $r4 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $r4[$i5] = $b1;

        $i5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $i5 = $i5 + 1;

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff> = $i5;

        goto label3;

     label4:
        $r2 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r4 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i0 = $i0 + $i4;

        $i0 = interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r1, $i0);

        $i3 = $i4 + $i0;

     label5:
        virtualinvoke $r0.<org.bouncycastle.crypto.BufferedBlockCipher: void reset()>();

        return $i3;

     label6:
        $i4 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        if $i4 != $i3 goto label8;

        $r2 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r4 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $r5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i4 = interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, $r5, 0);

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff> = 0;

        $r4 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i5 = $i3 - 1;

        $b1 = $r4[$i5];

        $s2 = $b1 & 255;

        if $s2 < 0 goto label7;

        if $s2 <= $i3 goto label9;

     label7:
        $r6 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r6.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("pad block corrupted");

        throw $r6;

     label8:
        $r3 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r3.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("last block incomplete in decryption");

        throw $r3;

     label9:
        $i3 = $i4 - $s2;

        $r4 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r1, $i0, $i3);

        goto label5;
    }

    public int getOutputSize(int)
    {
        org.bouncycastle.crypto.modes.PaddedBlockCipher $r0;
        int $i0, $i1;
        byte[] $r1;
        boolean $z0;

        $r0 := @this: org.bouncycastle.crypto.modes.PaddedBlockCipher;

        $i0 := @parameter0: int;

        $i1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $i0 = $i0 + $i1;

        $r1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i1 = lengthof $r1;

        $i1 = $i0 % $i1;

        if $i1 != 0 goto label2;

        $z0 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i1 = lengthof $r1;

        $i0 = $i1 + $i0;

        return $i0;

     label1:
        return $i0;

     label2:
        $i0 = $i0 - $i1;

        $r1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i1 = lengthof $r1;

        $i0 = $i0 + $i1;

        return $i0;
    }

    public int getUpdateOutputSize(int)
    {
        org.bouncycastle.crypto.modes.PaddedBlockCipher $r0;
        int $i0, $i1;
        byte[] $r1;

        $r0 := @this: org.bouncycastle.crypto.modes.PaddedBlockCipher;

        $i0 := @parameter0: int;

        $i1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $i0 = $i0 + $i1;

        $r1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i1 = lengthof $r1;

        $i1 = $i0 % $i1;

        if $i1 != 0 goto label1;

        $r1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i1 = lengthof $r1;

        $i0 = $i0 - $i1;

        return $i0;

     label1:
        $i0 = $i0 - $i1;

        return $i0;
    }

    public int processByte(byte, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.bouncycastle.crypto.modes.PaddedBlockCipher $r0;
        byte $b0;
        byte[] $r1, $r2;
        int $i1, $i2, $i3, $i4;
        org.bouncycastle.crypto.BlockCipher $r3;

        $r0 := @this: org.bouncycastle.crypto.modes.PaddedBlockCipher;

        $b0 := @parameter0: byte;

        $r1 := @parameter1: byte[];

        $i1 := @parameter2: int;

        $i2 = 0;

        $i3 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $r2 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i4 = lengthof $r2;

        if $i3 != $i4 goto label1;

        $r3 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r2 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i2 = interfaceinvoke $r3.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r2, 0, $r1, $i1);

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff> = 0;

     label1:
        $r1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i1 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $i3 = $i1 + 1;

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff> = $i3;

        $r1[$i1] = $b0;

        return $i2;
    }

    public int processBytes(byte[], int, int, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        org.bouncycastle.crypto.modes.PaddedBlockCipher $r0;
        byte[] $r1, $r2, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.IllegalArgumentException $r3;
        org.bouncycastle.crypto.DataLengthException $r4;
        org.bouncycastle.crypto.BlockCipher $r6;

        $r0 := @this: org.bouncycastle.crypto.modes.PaddedBlockCipher;

        $r1 := @parameter0: byte[];

        $i2 := @parameter1: int;

        $i3 := @parameter2: int;

        $r2 := @parameter3: byte[];

        $i0 := @parameter4: int;

        if $i3 >= 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r3;

     label1:
        $i4 = virtualinvoke $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int getBlockSize()>();

        $i5 = virtualinvoke $r0.<org.bouncycastle.crypto.modes.PaddedBlockCipher: int getUpdateOutputSize(int)>($i3);

        if $i5 <= 0 goto label2;

        $i5 = $i0 + $i5;

        $i1 = lengthof $r2;

        if $i5 <= $i1 goto label2;

        $r4 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r4.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r4;

     label2:
        $i5 = 0;

        $r5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i1 = lengthof $r5;

        $i6 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $i1 = $i1 - $i6;

        if $i3 <= $i1 goto label4;

        $r5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r5, $i5, $i1);

        $r6 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i5 = interfaceinvoke $r6.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, $r2, $i0);

        $i5 = 0 + $i5;

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff> = 0;

        $i3 = $i3 - $i1;

        $i2 = $i2 + $i1;

     label3:
        $r5 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i1 = lengthof $r5;

        if $i3 <= $i1 goto label4;

        $r6 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $i1 = $i0 + $i5;

        $i1 = interfaceinvoke $r6.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r1, $i2, $r2, $i1);

        $i5 = $i5 + $i1;

        $i3 = $i3 - $i4;

        $i2 = $i2 + $i4;

        goto label3;

     label4:
        $r2 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: byte[] buf>;

        $i0 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, $i2, $r2, $i0, $i3);

        $i2 = $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff>;

        $i2 = $i2 + $i3;

        $r0.<org.bouncycastle.crypto.BufferedBlockCipher: int bufOff> = $i2;

        return $i5;
    }
}
