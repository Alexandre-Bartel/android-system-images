public class org.apache.http.impl.client.RequestWrapper extends org.apache.http.message.AbstractHttpMessage implements org.apache.http.client.methods.HttpUriRequest
{
    private int execCount;
    private java.lang.String method;
    private final org.apache.http.HttpRequest original;
    private java.net.URI uri;
    private org.apache.http.ProtocolVersion version;

    public void <init>(org.apache.http.HttpRequest) throws org.apache.http.ProtocolException
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        org.apache.http.HttpRequest $r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.params.HttpParams $r3;
        boolean $z0;
        org.apache.http.client.methods.HttpUriRequest $r4;
        java.net.URI $r5;
        java.lang.String $r6;
        org.apache.http.RequestLine $r7;
        org.apache.http.ProtocolVersion $r8;
        java.net.URISyntaxException $r9;
        org.apache.http.ProtocolException $r10;
        java.lang.StringBuilder $r11;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $r1 := @parameter0: org.apache.http.HttpRequest;

        specialinvoke $r0.<org.apache.http.message.AbstractHttpMessage: void <init>()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r2;

     label1:
        $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest original> = $r1;

        $r3 = interfaceinvoke $r1.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        virtualinvoke $r0.<org.apache.http.message.AbstractHttpMessage: void setParams(org.apache.http.params.HttpParams)>($r3);

        $z0 = $r1 instanceof org.apache.http.client.methods.HttpUriRequest;

        if $z0 == 0 goto label3;

        $r4 = (org.apache.http.client.methods.HttpUriRequest) $r1;

        $r5 = interfaceinvoke $r4.<org.apache.http.client.methods.HttpUriRequest: java.net.URI getURI()>();

        $r0.<org.apache.http.impl.client.RequestWrapper: java.net.URI uri> = $r5;

        $r4 = (org.apache.http.client.methods.HttpUriRequest) $r1;

        $r6 = interfaceinvoke $r4.<org.apache.http.client.methods.HttpUriRequest: java.lang.String getMethod()>();

        $r0.<org.apache.http.impl.client.RequestWrapper: java.lang.String method> = $r6;

        $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion version> = null;

     label2:
        $r0.<org.apache.http.impl.client.RequestWrapper: int execCount> = 0;

        return;

     label3:
        $r7 = interfaceinvoke $r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r5 = new java.net.URI;

     label4:
        $r6 = interfaceinvoke $r7.<org.apache.http.RequestLine: java.lang.String getUri()>();

        specialinvoke $r5.<java.net.URI: void <init>(java.lang.String)>($r6);

     label5:
        $r0.<org.apache.http.impl.client.RequestWrapper: java.net.URI uri> = $r5;

        $r6 = interfaceinvoke $r7.<org.apache.http.RequestLine: java.lang.String getMethod()>();

        $r0.<org.apache.http.impl.client.RequestWrapper: java.lang.String method> = $r6;

        $r8 = interfaceinvoke $r1.<org.apache.http.HttpRequest: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion version> = $r8;

        goto label2;

     label6:
        $r9 := @caughtexception;

        $r10 = new org.apache.http.ProtocolException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid request URI: ");

        $r6 = interfaceinvoke $r7.<org.apache.http.RequestLine: java.lang.String getUri()>();

        $r11 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<org.apache.http.ProtocolException: void <init>(java.lang.String,java.lang.Throwable)>($r6, $r9);

        throw $r10;

        catch java.net.URISyntaxException from label4 to label5 with label6;
    }

    public void abort() throws java.lang.UnsupportedOperationException
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        java.lang.UnsupportedOperationException $r1;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;
    }

    public int getExecCount()
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        int i0;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        i0 = $r0.<org.apache.http.impl.client.RequestWrapper: int execCount>;

        return i0;
    }

    public java.lang.String getMethod()
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        r1 = $r0.<org.apache.http.impl.client.RequestWrapper: java.lang.String method>;

        return r1;
    }

    public org.apache.http.HttpRequest getOriginal()
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        org.apache.http.HttpRequest r1;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        r1 = $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest original>;

        return r1;
    }

    public org.apache.http.ProtocolVersion getProtocolVersion()
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        org.apache.http.ProtocolVersion $r1;
        org.apache.http.params.HttpParams $r2;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $r1 = $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion version>;

        if $r1 == null goto label1;

        $r1 = $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion version>;

        return $r1;

     label1:
        $r2 = virtualinvoke $r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.params.HttpParams getParams()>();

        $r1 = staticinvoke <org.apache.http.params.HttpProtocolParams: org.apache.http.ProtocolVersion getVersion(org.apache.http.params.HttpParams)>($r2);

        return $r1;
    }

    public org.apache.http.RequestLine getRequestLine()
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        java.lang.String $r1, $r3;
        org.apache.http.ProtocolVersion $r2;
        java.net.URI $r4;
        int $i0;
        org.apache.http.message.BasicRequestLine $r5;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $r1 = virtualinvoke $r0.<org.apache.http.impl.client.RequestWrapper: java.lang.String getMethod()>();

        $r2 = virtualinvoke $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion getProtocolVersion()>();

        $r3 = null;

        $r4 = $r0.<org.apache.http.impl.client.RequestWrapper: java.net.URI uri>;

        if $r4 == null goto label1;

        $r4 = $r0.<org.apache.http.impl.client.RequestWrapper: java.net.URI uri>;

        $r3 = virtualinvoke $r4.<java.net.URI: java.lang.String toASCIIString()>();

     label1:
        if $r3 == null goto label2;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

     label2:
        $r3 = "/";

     label3:
        $r5 = new org.apache.http.message.BasicRequestLine;

        specialinvoke $r5.<org.apache.http.message.BasicRequestLine: void <init>(java.lang.String,java.lang.String,org.apache.http.ProtocolVersion)>($r1, $r3, $r2);

        return $r5;
    }

    public java.net.URI getURI()
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        java.net.URI r1;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        r1 = $r0.<org.apache.http.impl.client.RequestWrapper: java.net.URI uri>;

        return r1;
    }

    public void incrementExecCount()
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        int $i0;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $i0 = $r0.<org.apache.http.impl.client.RequestWrapper: int execCount>;

        $i0 = $i0 + 1;

        $r0.<org.apache.http.impl.client.RequestWrapper: int execCount> = $i0;

        return;
    }

    public boolean isAborted()
    {
        org.apache.http.impl.client.RequestWrapper $r0;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        return 0;
    }

    public boolean isRepeatable()
    {
        org.apache.http.impl.client.RequestWrapper $r0;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        return 1;
    }

    public void resetHeaders()
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        org.apache.http.Header[] $r1;
        org.apache.http.message.HeaderGroup $r2;
        org.apache.http.HttpRequest $r3;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $r2 = $r0.<org.apache.http.message.AbstractHttpMessage: org.apache.http.message.HeaderGroup headergroup>;

        virtualinvoke $r2.<org.apache.http.message.HeaderGroup: void clear()>();

        $r3 = $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.HttpRequest original>;

        $r1 = interfaceinvoke $r3.<org.apache.http.HttpRequest: org.apache.http.Header[] getAllHeaders()>();

        virtualinvoke $r0.<org.apache.http.message.AbstractHttpMessage: void setHeaders(org.apache.http.Header[])>($r1);

        return;
    }

    public void setMethod(java.lang.String)
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Method name may not be null");

        throw $r2;

     label1:
        $r0.<org.apache.http.impl.client.RequestWrapper: java.lang.String method> = $r1;

        return;
    }

    public void setProtocolVersion(org.apache.http.ProtocolVersion)
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        org.apache.http.ProtocolVersion $r1;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $r1 := @parameter0: org.apache.http.ProtocolVersion;

        $r0.<org.apache.http.impl.client.RequestWrapper: org.apache.http.ProtocolVersion version> = $r1;

        return;
    }

    public void setURI(java.net.URI)
    {
        org.apache.http.impl.client.RequestWrapper $r0;
        java.net.URI $r1;

        $r0 := @this: org.apache.http.impl.client.RequestWrapper;

        $r1 := @parameter0: java.net.URI;

        $r0.<org.apache.http.impl.client.RequestWrapper: java.net.URI uri> = $r1;

        return;
    }
}
