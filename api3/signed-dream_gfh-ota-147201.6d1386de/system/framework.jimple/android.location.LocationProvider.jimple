public abstract class android.location.LocationProvider extends java.lang.Object
{
    public static final int AVAILABLE;
    static final java.lang.String BAD_CHARS_REGEX;
    public static final int OUT_OF_SERVICE;
    private static final java.lang.String TAG;
    public static final int TEMPORARILY_UNAVAILABLE;
    private java.lang.String mName;

    void <init>(java.lang.String)
    {
        android.location.LocationProvider $r0;
        java.lang.String $r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3;

        $r0 := @this: android.location.LocationProvider;

        $r1 := @parameter0: java.lang.String;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean matches(java.lang.String)>("[^a-zA-Z0-9]");

        if $z0 == 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("name ");

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains an illegal character");

        $r1 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r1);

        throw $r2;

     label1:
        $r0.<android.location.LocationProvider: java.lang.String mName> = $r1;

        return;
    }

    public abstract int getAccuracy();

    public java.lang.String getName()
    {
        android.location.LocationProvider $r0;
        java.lang.String r1;

        $r0 := @this: android.location.LocationProvider;

        r1 = $r0.<android.location.LocationProvider: java.lang.String mName>;

        return r1;
    }

    public abstract int getPowerRequirement();

    public abstract boolean hasMonetaryCost();

    public boolean meetsCriteria(android.location.Criteria)
    {
        android.location.LocationProvider $r0;
        android.location.Criteria $r1;
        int $i0, $i1;
        boolean $z0;

        $r0 := @this: android.location.LocationProvider;

        $r1 := @parameter0: android.location.Criteria;

        $i0 = virtualinvoke $r1.<android.location.Criteria: int getAccuracy()>();

        if $i0 == 0 goto label1;

        $i0 = virtualinvoke $r1.<android.location.Criteria: int getAccuracy()>();

        $i1 = virtualinvoke $r0.<android.location.LocationProvider: int getAccuracy()>();

        if $i0 >= $i1 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r1.<android.location.Criteria: int getPowerRequirement()>();

        if $i0 == 0 goto label2;

        $i1 = virtualinvoke $r0.<android.location.LocationProvider: int getPowerRequirement()>();

        if $i0 >= $i1 goto label2;

        return 0;

     label2:
        $z0 = virtualinvoke $r1.<android.location.Criteria: boolean isAltitudeRequired()>();

        if $z0 == 0 goto label3;

        $z0 = virtualinvoke $r0.<android.location.LocationProvider: boolean supportsAltitude()>();

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke $r1.<android.location.Criteria: boolean isSpeedRequired()>();

        if $z0 == 0 goto label4;

        $z0 = virtualinvoke $r0.<android.location.LocationProvider: boolean supportsSpeed()>();

        if $z0 != 0 goto label4;

        return 0;

     label4:
        $z0 = virtualinvoke $r1.<android.location.Criteria: boolean isBearingRequired()>();

        if $z0 == 0 goto label5;

        $z0 = virtualinvoke $r0.<android.location.LocationProvider: boolean supportsBearing()>();

        if $z0 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public abstract boolean requiresCell();

    public abstract boolean requiresNetwork();

    public abstract boolean requiresSatellite();

    public abstract boolean supportsAltitude();

    public abstract boolean supportsBearing();

    public abstract boolean supportsSpeed();

    public static void <clinit>()
    {
        <android.location.LocationProvider: int TEMPORARILY_UNAVAILABLE> = 1;

        <android.location.LocationProvider: java.lang.String TAG> = "LocationProvider";

        <android.location.LocationProvider: int OUT_OF_SERVICE> = 0;

        <android.location.LocationProvider: java.lang.String BAD_CHARS_REGEX> = "[^a-zA-Z0-9]";

        <android.location.LocationProvider: int AVAILABLE> = 2;

        return;
    }
}
