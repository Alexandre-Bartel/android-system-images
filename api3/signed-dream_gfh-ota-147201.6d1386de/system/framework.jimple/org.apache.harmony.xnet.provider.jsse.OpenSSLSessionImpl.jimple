public class org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl extends java.lang.Object implements javax.net.ssl.SSLSession
{
    private boolean isValid;
    long lastAccessedTime;
    java.security.cert.X509Certificate[] localCertificates;
    private javax.security.cert.X509Certificate[] peerCertificateChain;
    java.security.cert.X509Certificate[] peerCertificates;
    private java.lang.String peerHost;
    private int peerPort;
    protected int session;
    private final javax.net.ssl.SSLSessionContext sessionContext;
    private org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters;
    private org.apache.harmony.luni.util.TwoKeyHashMap values;

    protected void <init>(int, org.apache.harmony.xnet.provider.jsse.SSLParameters, java.lang.String, int, javax.net.ssl.SSLSessionContext)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        int $i0, $i1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;
        java.lang.String $r2;
        javax.net.ssl.SSLSessionContext $r3;
        org.apache.harmony.luni.util.TwoKeyHashMap $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r2 := @parameter2: java.lang.String;

        $i1 := @parameter3: int;

        $r3 := @parameter4: javax.net.ssl.SSLSessionContext;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long lastAccessedTime> = 0L;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: boolean isValid> = 1;

        $r4 = new org.apache.harmony.luni.util.TwoKeyHashMap;

        specialinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values> = $r4;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int session> = $i0;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String peerHost> = $r2;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int peerPort> = $i1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext sessionContext> = $r3;

        return;
    }

    void <init>(byte[], org.apache.harmony.xnet.provider.jsse.SSLParameters, java.lang.String, int, javax.security.cert.X509Certificate[], javax.net.ssl.SSLSessionContext) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        byte[] $r1;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r2;
        java.lang.String $r3;
        int $i0;
        javax.security.cert.X509Certificate[] $r4;
        javax.net.ssl.SSLSessionContext $r5;
        org.apache.harmony.luni.util.TwoKeyHashMap $r6;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 := @parameter0: byte[];

        $r2 := @parameter1: org.apache.harmony.xnet.provider.jsse.SSLParameters;

        $r3 := @parameter2: java.lang.String;

        $i0 := @parameter3: int;

        $r4 := @parameter4: javax.security.cert.X509Certificate[];

        $r5 := @parameter5: javax.net.ssl.SSLSessionContext;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long lastAccessedTime> = 0L;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: boolean isValid> = 1;

        $r6 = new org.apache.harmony.luni.util.TwoKeyHashMap;

        specialinvoke $r6.<org.apache.harmony.luni.util.TwoKeyHashMap: void <init>()>();

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values> = $r6;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters> = $r2;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String peerHost> = $r3;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int peerPort> = $i0;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain> = $r4;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext sessionContext> = $r5;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: void initializeNative(byte[])>($r1);

        return;
    }

    private void initializeNative(byte[]) throws java.io.IOException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        byte[] $r1;
        int $i0;
        java.io.IOException $r2;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 := @parameter0: byte[];

        $i0 = lengthof $r1;

        $i0 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int nativedeserialize(byte[],int)>($r1, $i0);

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int session> = $i0;

        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int session>;

        if $i0 != 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("Invalid session data");

        throw $r2;

     label1:
        return;
    }

    private native int nativedeserialize(byte[], int);

    private native void nativefree(int);

    private native java.lang.String nativegetciphersuite();

    private native long nativegetcreationtime();

    private native byte[] nativegetid();

    private native byte[][] nativegetpeercertificates();

    private native java.lang.String nativegetpeerhost();

    private native java.lang.String nativegetpeerport();

    private native java.lang.String nativegetprotocol();

    private native byte[] nativeserialize();

    protected void finalize()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        int $i0;
        java.lang.Throwable $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        entermonitor class "org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl";

     label1:
        $i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int session>;

        specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: void nativefree(int)>($i0);

        exitmonitor class "org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl";

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor class "org/apache/harmony/xnet/provider/jsse/OpenSSLSocketImpl";

     label4:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public int getApplicationBufferSize()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        i0 = <org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int MAX_DATA_LENGTH>;

        return i0;
    }

    public java.lang.String getCipherSuite()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String nativegetciphersuite()>();

        return $r1;
    }

    public long getCreationTime()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        long $l0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $l0 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long nativegetcreationtime()>();

        return $l0;
    }

    byte[] getEncoded()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        byte[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] nativeserialize()>();

        return $r1;
    }

    public byte[] getId()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        byte[] $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[] nativegetid()>();

        return $r1;
    }

    public long getLastAccessedTime()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        long $l0;
        byte $b1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long lastAccessedTime>;

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $l0 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long nativegetcreationtime()>();

        return $l0;

     label1:
        $l0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long lastAccessedTime>;

        return $l0;
    }

    public java.security.cert.Certificate[] getLocalCertificates()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        org.apache.harmony.xnet.provider.jsse.SSLParameters $r1;
        javax.net.ssl.X509KeyManager $r2;
        java.lang.String[] $r3;
        java.lang.String $r4;
        java.security.cert.X509Certificate[] $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager getKeyManager()>();

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "RSA";

        $r4 = interfaceinvoke $r2.<javax.net.ssl.X509KeyManager: java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)>($r3, null, null);

        if $r4 == null goto label1;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.xnet.provider.jsse.SSLParameters sslParameters>;

        $r2 = virtualinvoke $r1.<org.apache.harmony.xnet.provider.jsse.SSLParameters: javax.net.ssl.X509KeyManager getKeyManager()>();

        $r5 = interfaceinvoke $r2.<javax.net.ssl.X509KeyManager: java.security.cert.X509Certificate[] getCertificateChain(java.lang.String)>($r4);

        return $r5;

     label1:
        return null;
    }

    public java.security.Principal getLocalPrincipal()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        java.security.cert.X509Certificate[] $r2;
        int $i0;
        java.security.cert.X509Certificate $r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        if $r2 == null goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] localCertificates>;

        $r3 = $r2[0];

        $r1 = virtualinvoke $r3.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r1;

     label1:
        return null;
    }

    public int getPacketBufferSize()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        i0 = <org.apache.harmony.xnet.provider.jsse.SSLRecordProtocol: int MAX_SSL_PACKET_SIZE>;

        return i0;
    }

    public javax.security.cert.X509Certificate[] getPeerCertificateChain() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        javax.security.cert.X509Certificate[] $r1;
        byte[][] $r2;
        javax.net.ssl.SSLPeerUnverifiedException $r3;
        javax.security.cert.CertificateException $r4;
        java.lang.String $r5;
        int $i0, $i1;
        byte[] $r6;
        javax.security.cert.X509Certificate $r7;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        if $r1 != null goto label11;

     label01:
        $r2 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: byte[][] nativegetpeercertificates()>();

     label02:
        if $r2 != null goto label06;

     label03:
        $r3 = new javax.net.ssl.SSLPeerUnverifiedException;

        specialinvoke $r3.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("No certificate available");

     label04:
        throw $r3;

     label05:
        $r4 := @caughtexception;

        $r3 = new javax.net.ssl.SSLPeerUnverifiedException;

        $r5 = virtualinvoke $r4.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label06:
        $i0 = lengthof $r2;

        $r1 = newarray (javax.security.cert.X509Certificate)[$i0];

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain> = $r1;

        $i0 = 0;

     label07:
        $i1 = lengthof $r2;

        if $i0 >= $i1 goto label10;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        $r6 = $r2[$i0];

     label08:
        $r7 = staticinvoke <javax.security.cert.X509Certificate: javax.security.cert.X509Certificate getInstance(byte[])>($r6);

     label09:
        $r1[$i0] = $r7;

        $i0 = $i0 + 1;

        goto label07;

     label10:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        return $r1;

     label11:
        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        return $r1;

        catch javax.security.cert.CertificateException from label01 to label02 with label05;
        catch javax.security.cert.CertificateException from label03 to label04 with label05;
        catch javax.security.cert.CertificateException from label08 to label09 with label05;
    }

    public java.security.cert.Certificate[] getPeerCertificates() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        org.apache.harmony.security.provider.cert.X509CertImpl $r1;
        byte[] $r2;
        java.security.cert.X509Certificate[] $r3;
        javax.security.cert.X509Certificate[] $r4;
        int $i0, $i1;
        org.apache.harmony.security.provider.cert.X509CertImpl[] $r5;
        javax.security.cert.X509Certificate $r6;
        javax.net.ssl.SSLPeerUnverifiedException $r7;
        java.io.IOException $r8;
        javax.security.cert.CertificateEncodingException $r9;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        if $r3 != null goto label10;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        if $r4 != null goto label01;

        virtualinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] getPeerCertificateChain()>();

     label01:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        $i0 = lengthof $r4;

        if $i0 != 0 goto label02;

        $r3 = newarray (java.security.cert.X509Certificate)[0];

        return $r3;

     label02:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        $i0 = lengthof $r4;

        $r5 = newarray (org.apache.harmony.security.provider.cert.X509CertImpl)[$i0];

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates> = $r5;

        $i0 = 0;

     label03:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label06;

        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $r1 = new org.apache.harmony.security.provider.cert.X509CertImpl;

        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.security.cert.X509Certificate[] peerCertificateChain>;

        $r6 = $r4[$i0];

     label04:
        $r2 = virtualinvoke $r6.<javax.security.cert.Certificate: byte[] getEncoded()>();

        specialinvoke $r1.<org.apache.harmony.security.provider.cert.X509CertImpl: void <init>(byte[])>($r2);

     label05:
        $r3[$i0] = $r1;

        $i0 = $i0 + 1;

        goto label03;

     label06:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        return $r3;

     label07:
        $r7 := @caughtexception;

        $r3 = newarray (java.security.cert.X509Certificate)[0];

        return $r3;

     label08:
        $r8 := @caughtexception;

        $r3 = newarray (java.security.cert.X509Certificate)[0];

        return $r3;

     label09:
        $r9 := @caughtexception;

        $r3 = newarray (java.security.cert.X509Certificate)[0];

        return $r3;

     label10:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        return $r3;

        catch javax.net.ssl.SSLPeerUnverifiedException from label04 to label05 with label07;
        catch java.io.IOException from label04 to label05 with label08;
        catch javax.security.cert.CertificateEncodingException from label04 to label05 with label09;
    }

    public java.lang.String getPeerHost()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        java.lang.String r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String peerHost>;

        return r1;
    }

    public int getPeerPort()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        int i0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        i0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: int peerPort>;

        return i0;
    }

    public java.security.Principal getPeerPrincipal() throws javax.net.ssl.SSLPeerUnverifiedException
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        javax.security.auth.x500.X500Principal $r1;
        java.security.cert.X509Certificate[] $r2;
        javax.net.ssl.SSLPeerUnverifiedException $r3;
        java.security.cert.X509Certificate $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        if $r2 != null goto label1;

        $r3 = new javax.net.ssl.SSLPeerUnverifiedException;

        specialinvoke $r3.<javax.net.ssl.SSLPeerUnverifiedException: void <init>(java.lang.String)>("No peer certificate");

        throw $r3;

     label1:
        $r2 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.security.cert.X509Certificate[] peerCertificates>;

        $r4 = $r2[0];

        $r1 = virtualinvoke $r4.<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()>();

        return $r1;
    }

    public java.lang.String getProtocol()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        java.lang.String $r1;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 = specialinvoke $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: java.lang.String nativegetprotocol()>();

        return $r1;
    }

    public javax.net.ssl.SSLSessionContext getSessionContext()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        java.lang.SecurityManager $r1;
        javax.net.ssl.SSLPermission $r2;
        javax.net.ssl.SSLSessionContext r3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r1 == null goto label1;

        $r2 = new javax.net.ssl.SSLPermission;

        specialinvoke $r2.<javax.net.ssl.SSLPermission: void <init>(java.lang.String)>("getSSLSessionContext");

        virtualinvoke $r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        r3 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext sessionContext>;

        return r3;
    }

    public java.lang.Object getValue(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.harmony.luni.util.TwoKeyHashMap $r3;
        java.security.AccessControlContext $r4;
        java.lang.Object $r5;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter is null");

        throw $r2;

     label1:
        $r3 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r4 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

        $r5 = virtualinvoke $r3.<org.apache.harmony.luni.util.TwoKeyHashMap: java.lang.Object get(java.lang.Object,java.lang.Object)>($r1, $r4);

        return $r5;
    }

    public java.lang.String[] getValueNames()
    {
        java.util.Vector $r0;
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r1;
        java.security.AccessControlContext $r2, $r8;
        org.apache.harmony.luni.util.TwoKeyHashMap $r3;
        java.util.Set $r4;
        java.util.Iterator $r5;
        boolean $z0;
        java.lang.Object $r6;
        org.apache.harmony.luni.util.TwoKeyHashMap$Entry $r7;
        java.lang.String[] $r9;
        java.lang.Object[] $r10;

        $r1 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        $r2 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

        $r3 = $r1.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r4 = virtualinvoke $r3.<org.apache.harmony.luni.util.TwoKeyHashMap: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.harmony.luni.util.TwoKeyHashMap$Entry) $r6;

        $r6 = virtualinvoke $r7.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey2()>();

        $r8 = (java.security.AccessControlContext) $r6;

        if $r2 != null goto label2;

        if $r8 == null goto label3;

     label2:
        if $r2 == null goto label1;

        $z0 = virtualinvoke $r2.<java.security.AccessControlContext: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label1;

     label3:
        $r6 = virtualinvoke $r7.<org.apache.harmony.luni.util.TwoKeyHashMap$Entry: java.lang.Object getKey1()>();

        virtualinvoke $r0.<java.util.Vector: boolean add(java.lang.Object)>($r6);

        goto label1;

     label4:
        $r9 = newarray (java.lang.String)[0];

        $r10 = virtualinvoke $r0.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r9 = (java.lang.String[]) $r10;

        $r9 = (java.lang.String[]) $r9;

        return $r9;
    }

    public void invalidate()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: boolean isValid> = 0;

        return;
    }

    public boolean isValid()
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        javax.net.ssl.SSLSessionContext $r1;
        boolean $z0;
        int $i0;
        long $l1, $l2;
        byte $b3;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: javax.net.ssl.SSLSessionContext sessionContext>;

        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: boolean isValid>;

        if $z0 == 0 goto label1;

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<javax.net.ssl.SSLSessionContext: int getSessionTimeout()>();

        if $i0 == 0 goto label1;

        $l1 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: long lastAccessedTime>;

        $i0 = interfaceinvoke $r1.<javax.net.ssl.SSLSessionContext: int getSessionTimeout()>();

        $l2 = (long) $i0;

        $l1 = $l1 + $l2;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b3 = $l1 cmp $l2;

        if $b3 <= 0 goto label1;

        $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: boolean isValid> = 0;

     label1:
        $z0 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: boolean isValid>;

        return $z0;
    }

    public void putValue(java.lang.String, java.lang.Object)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        java.lang.String $r1;
        java.lang.Object $r2, $r6;
        java.lang.IllegalArgumentException $r3;
        org.apache.harmony.luni.util.TwoKeyHashMap $r4;
        java.security.AccessControlContext $r5;
        boolean $z0;
        javax.net.ssl.SSLSessionBindingListener $r7;
        javax.net.ssl.SSLSessionBindingEvent $r8;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Object;

        if $r1 == null goto label1;

        if $r2 != null goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter is null");

        throw $r3;

     label2:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r5 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

        $r6 = virtualinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>($r1, $r5, $r2);

        $z0 = $r2 instanceof javax.net.ssl.SSLSessionBindingListener;

        if $z0 == 0 goto label3;

        $r7 = (javax.net.ssl.SSLSessionBindingListener) $r2;

        $r8 = new javax.net.ssl.SSLSessionBindingEvent;

        specialinvoke $r8.<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>($r0, $r1);

        interfaceinvoke $r7.<javax.net.ssl.SSLSessionBindingListener: void valueBound(javax.net.ssl.SSLSessionBindingEvent)>($r8);

     label3:
        if $r6 == null goto label4;

        $z0 = $r6 instanceof javax.net.ssl.SSLSessionBindingListener;

        if $z0 == 0 goto label5;

        $r7 = (javax.net.ssl.SSLSessionBindingListener) $r6;

        $r8 = new javax.net.ssl.SSLSessionBindingEvent;

        specialinvoke $r8.<javax.net.ssl.SSLSessionBindingEvent: void <init>(javax.net.ssl.SSLSession,java.lang.String)>($r0, $r1);

        interfaceinvoke $r7.<javax.net.ssl.SSLSessionBindingListener: void valueUnbound(javax.net.ssl.SSLSessionBindingEvent)>($r8);

        return;

     label4:
        return;

     label5:
        return;
    }

    public void removeValue(java.lang.String)
    {
        org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl $r0;
        java.lang.String $r1;
        java.security.AccessControlContext $r2;
        java.lang.IllegalArgumentException $r3;
        org.apache.harmony.luni.util.TwoKeyHashMap $r4;

        $r0 := @this: org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter is null");

        throw $r3;

     label1:
        $r4 = $r0.<org.apache.harmony.xnet.provider.jsse.OpenSSLSessionImpl: org.apache.harmony.luni.util.TwoKeyHashMap values>;

        $r2 = staticinvoke <java.security.AccessController: java.security.AccessControlContext getContext()>();

        virtualinvoke $r4.<org.apache.harmony.luni.util.TwoKeyHashMap: java.lang.Object remove(java.lang.Object,java.lang.Object)>($r1, $r2);

        return;
    }
}
