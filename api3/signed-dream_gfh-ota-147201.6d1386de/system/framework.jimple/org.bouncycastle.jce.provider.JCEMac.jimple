public class org.bouncycastle.jce.provider.JCEMac extends javax.crypto.MacSpi implements org.bouncycastle.jce.provider.PBE
{
    private int keySize;
    private org.bouncycastle.crypto.Mac macEngine;
    private int pbeHash;
    private int pbeType;

    protected void <init>(org.bouncycastle.crypto.Mac)
    {
        org.bouncycastle.jce.provider.JCEMac $r0;
        org.bouncycastle.crypto.Mac $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $r1 := @parameter0: org.bouncycastle.crypto.Mac;

        specialinvoke $r0.<javax.crypto.MacSpi: void <init>()>();

        $r0.<org.bouncycastle.jce.provider.JCEMac: int pbeType> = 2;

        $r0.<org.bouncycastle.jce.provider.JCEMac: int pbeHash> = 1;

        $r0.<org.bouncycastle.jce.provider.JCEMac: int keySize> = 160;

        $r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine> = $r1;

        return;
    }

    protected void <init>(org.bouncycastle.crypto.Mac, int, int, int)
    {
        org.bouncycastle.jce.provider.JCEMac $r0;
        org.bouncycastle.crypto.Mac $r1;
        int $i0, $i1, $i2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $r1 := @parameter0: org.bouncycastle.crypto.Mac;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 := @parameter3: int;

        specialinvoke $r0.<javax.crypto.MacSpi: void <init>()>();

        $r0.<org.bouncycastle.jce.provider.JCEMac: int pbeType> = 2;

        $r0.<org.bouncycastle.jce.provider.JCEMac: int pbeHash> = 1;

        $r0.<org.bouncycastle.jce.provider.JCEMac: int keySize> = 160;

        $r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine> = $r1;

        $r0.<org.bouncycastle.jce.provider.JCEMac: int pbeType> = $i0;

        $r0.<org.bouncycastle.jce.provider.JCEMac: int pbeHash> = $i1;

        $r0.<org.bouncycastle.jce.provider.JCEMac: int keySize> = $i2;

        return;
    }

    protected byte[] engineDoFinal()
    {
        org.bouncycastle.jce.provider.JCEMac $r0;
        byte[] $r1;
        int $i0;
        org.bouncycastle.crypto.Mac $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $i0 = virtualinvoke $r0.<org.bouncycastle.jce.provider.JCEMac: int engineGetMacLength()>();

        $r1 = newarray (byte)[$i0];

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>($r1, 0);

        return $r1;
    }

    protected int engineGetMacLength()
    {
        org.bouncycastle.jce.provider.JCEMac $r0;
        int $i0;
        org.bouncycastle.crypto.Mac $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $r1 = $r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        $i0 = interfaceinvoke $r1.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        return $i0;
    }

    protected void engineInit(java.security.Key, java.security.spec.AlgorithmParameterSpec) throws java.security.InvalidKeyException, java.security.InvalidAlgorithmParameterException
    {
        org.bouncycastle.jce.provider.JCEMac $r0;
        java.security.Key $r1;
        java.security.spec.AlgorithmParameterSpec $r2;
        boolean $z0;
        org.bouncycastle.jce.provider.JCEPBEKey $r4;
        org.bouncycastle.crypto.CipherParameters $r5;
        org.bouncycastle.crypto.Mac $r6;
        org.bouncycastle.crypto.params.KeyParameter $r8, r13;
        byte[] $r9;
        javax.crypto.spec.IvParameterSpec $r10;
        java.security.InvalidKeyException r11;
        java.security.InvalidAlgorithmParameterException r12;
        org.bouncycastle.crypto.params.ParametersWithIV r14;

        $r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $r1 := @parameter0: java.security.Key;

        $r2 := @parameter1: java.security.spec.AlgorithmParameterSpec;

        if $r1 != null goto label1;

        r11 = new java.security.InvalidKeyException;

        specialinvoke r11.<java.security.InvalidKeyException: void <init>(java.lang.String)>("key is null");

        throw r11;

     label1:
        $z0 = $r1 instanceof org.bouncycastle.jce.provider.JCEPBEKey;

        if $z0 == 0 goto label5;

        $r4 = (org.bouncycastle.jce.provider.JCEPBEKey) $r1;

        $r5 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

        if $r5 == null goto label3;

        $r5 = virtualinvoke $r4.<org.bouncycastle.jce.provider.JCEPBEKey: org.bouncycastle.crypto.CipherParameters getParam()>();

     label2:
        $r6 = $r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>($r5);

        return;

     label3:
        $z0 = $r2 instanceof javax.crypto.spec.PBEParameterSpec;

        if $z0 == 0 goto label4;

        $r5 = staticinvoke <org.bouncycastle.jce.provider.PBE$Util: org.bouncycastle.crypto.CipherParameters makePBEMacParameters(org.bouncycastle.jce.provider.JCEPBEKey,java.security.spec.AlgorithmParameterSpec)>($r4, $r2);

        goto label2;

     label4:
        r12 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r12.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("PBE requires PBE parameters to be set.");

        throw r12;

     label5:
        $z0 = $r2 instanceof javax.crypto.spec.IvParameterSpec;

        if $z0 == 0 goto label6;

        r14 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r5 = r14;

        r13 = new org.bouncycastle.crypto.params.KeyParameter;

        $r9 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke r13.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r9);

        $r10 = (javax.crypto.spec.IvParameterSpec) $r2;

        $r9 = virtualinvoke $r10.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>();

        specialinvoke r14.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>(r13, $r9);

        goto label2;

     label6:
        if $r2 != null goto label7;

        $r8 = new org.bouncycastle.crypto.params.KeyParameter;

        $r5 = $r8;

        $r9 = interfaceinvoke $r1.<java.security.Key: byte[] getEncoded()>();

        specialinvoke $r8.<org.bouncycastle.crypto.params.KeyParameter: void <init>(byte[])>($r9);

        goto label2;

     label7:
        r12 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke r12.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("unknown parameter type.");

        throw r12;
    }

    protected void engineReset()
    {
        org.bouncycastle.jce.provider.JCEMac $r0;
        org.bouncycastle.crypto.Mac $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $r1 = $r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Mac: void reset()>();

        return;
    }

    protected void engineUpdate(byte)
    {
        org.bouncycastle.jce.provider.JCEMac $r0;
        byte $b0;
        org.bouncycastle.crypto.Mac $r1;

        $r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $b0 := @parameter0: byte;

        $r1 = $r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r1.<org.bouncycastle.crypto.Mac: void update(byte)>($b0);

        return;
    }

    protected void engineUpdate(byte[], int, int)
    {
        org.bouncycastle.jce.provider.JCEMac $r0;
        byte[] $r1;
        int $i0, $i1;
        org.bouncycastle.crypto.Mac $r2;

        $r0 := @this: org.bouncycastle.jce.provider.JCEMac;

        $r1 := @parameter0: byte[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r2 = $r0.<org.bouncycastle.jce.provider.JCEMac: org.bouncycastle.crypto.Mac macEngine>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r1, $i0, $i1);

        return;
    }
}
