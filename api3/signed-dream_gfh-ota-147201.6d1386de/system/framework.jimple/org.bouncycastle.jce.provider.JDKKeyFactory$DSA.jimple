public class org.bouncycastle.jce.provider.JDKKeyFactory$DSA extends org.bouncycastle.jce.provider.JDKKeyFactory
{

    public void <init>()
    {
        org.bouncycastle.jce.provider.JDKKeyFactory$DSA $r0;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyFactory$DSA;

        specialinvoke $r0.<org.bouncycastle.jce.provider.JDKKeyFactory: void <init>()>();

        return;
    }

    protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.bouncycastle.jce.provider.JDKKeyFactory$DSA $r0;
        java.security.spec.KeySpec $r1;
        boolean $z0;
        java.security.spec.PKCS8EncodedKeySpec $r2;
        byte[] $r3;
        java.security.PrivateKey $r4;
        org.bouncycastle.jce.provider.JDKDSAPrivateKey $r5;
        java.lang.Exception $r6;
        java.security.spec.InvalidKeySpecException $r7;
        java.lang.String $r8;
        java.security.spec.DSAPrivateKeySpec $r9;
        java.lang.StringBuilder $r10;
        java.lang.Class $r11;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyFactory$DSA;

        $r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = $r1 instanceof java.security.spec.PKCS8EncodedKeySpec;

        if $z0 == 0 goto label4;

     label1:
        $r2 = (java.security.spec.PKCS8EncodedKeySpec) $r1;

        $r3 = virtualinvoke $r2.<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()>();

        $r4 = staticinvoke <org.bouncycastle.jce.provider.JDKKeyFactory: java.security.PrivateKey createPrivateKeyFromDERStream(byte[])>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.security.spec.InvalidKeySpecException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $z0 = $r1 instanceof java.security.spec.DSAPrivateKeySpec;

        if $z0 == 0 goto label5;

        $r5 = new org.bouncycastle.jce.provider.JDKDSAPrivateKey;

        $r9 = (java.security.spec.DSAPrivateKeySpec) $r1;

        specialinvoke $r5.<org.bouncycastle.jce.provider.JDKDSAPrivateKey: void <init>(java.security.spec.DSAPrivateKeySpec)>($r9);

        return $r5;

     label5:
        $r7 = new java.security.spec.InvalidKeySpecException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown KeySpec type: ");

        $r11 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec) throws java.security.spec.InvalidKeySpecException
    {
        org.bouncycastle.jce.provider.JDKKeyFactory$DSA $r0;
        java.security.spec.KeySpec $r1;
        boolean $z0;
        java.security.spec.X509EncodedKeySpec $r2;
        byte[] $r3;
        java.security.PublicKey $r4;
        org.bouncycastle.jce.provider.JDKDSAPublicKey $r5;
        java.lang.Exception $r6;
        java.security.spec.InvalidKeySpecException $r7;
        java.lang.String $r8;
        java.security.spec.DSAPublicKeySpec $r9;
        java.lang.StringBuilder $r10;
        java.lang.Class $r11;

        $r0 := @this: org.bouncycastle.jce.provider.JDKKeyFactory$DSA;

        $r1 := @parameter0: java.security.spec.KeySpec;

        $z0 = $r1 instanceof java.security.spec.X509EncodedKeySpec;

        if $z0 == 0 goto label4;

     label1:
        $r2 = (java.security.spec.X509EncodedKeySpec) $r1;

        $r3 = virtualinvoke $r2.<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()>();

        $r4 = staticinvoke <org.bouncycastle.jce.provider.JDKKeyFactory: java.security.PublicKey createPublicKeyFromDERStream(byte[])>($r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.security.spec.InvalidKeySpecException;

        $r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String toString()>();

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $z0 = $r1 instanceof java.security.spec.DSAPublicKeySpec;

        if $z0 == 0 goto label5;

        $r5 = new org.bouncycastle.jce.provider.JDKDSAPublicKey;

        $r9 = (java.security.spec.DSAPublicKeySpec) $r1;

        specialinvoke $r5.<org.bouncycastle.jce.provider.JDKDSAPublicKey: void <init>(java.security.spec.DSAPublicKeySpec)>($r9);

        return $r5;

     label5:
        $r7 = new java.security.spec.InvalidKeySpecException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown KeySpec type: ");

        $r11 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r8 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.security.spec.InvalidKeySpecException: void <init>(java.lang.String)>($r8);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
