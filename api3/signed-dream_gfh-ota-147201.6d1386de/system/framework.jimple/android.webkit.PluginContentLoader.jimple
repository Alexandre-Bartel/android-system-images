class android.webkit.PluginContentLoader extends android.webkit.StreamLoader
{
    private android.webkit.PluginData mData;

    void <init>(android.webkit.LoadListener, android.webkit.PluginData)
    {
        android.webkit.PluginContentLoader $r0;
        android.webkit.LoadListener $r1;
        android.webkit.PluginData $r2;

        $r0 := @this: android.webkit.PluginContentLoader;

        $r1 := @parameter0: android.webkit.LoadListener;

        $r2 := @parameter1: android.webkit.PluginData;

        specialinvoke $r0.<android.webkit.StreamLoader: void <init>(android.webkit.LoadListener)>($r1);

        $r0.<android.webkit.PluginContentLoader: android.webkit.PluginData mData> = $r2;

        return;
    }

    protected void buildHeaders(android.net.http.Headers)
    {
        android.net.http.Headers $r0;
        org.apache.http.util.CharArrayBuffer $r1;
        android.webkit.PluginContentLoader $r2;
        android.webkit.PluginData $r3;
        java.util.Map $r4;
        java.util.Set $r5;
        java.util.Iterator $r6;
        boolean $z0;
        java.lang.Object $r7;
        java.util.Map$Entry $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r10;
        java.lang.String[] $r11;
        int $i0;

        $r2 := @this: android.webkit.PluginContentLoader;

        $r0 := @parameter0: android.net.http.Headers;

        $r1 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r1.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(100);

        $r3 = $r2.<android.webkit.PluginContentLoader: android.webkit.PluginData mData>;

        $r4 = virtualinvoke $r3.<android.webkit.PluginData: java.util.Map getHeaders()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.util.Map$Entry) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r10 = (java.lang.String) $r7;

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = interfaceinvoke $r8.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.String[]) $r7;

        $r10 = $r11[1];

        $r9 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int length()>();

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void ensureCapacity(int)>($i0);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>($r10);

        virtualinvoke $r0.<android.net.http.Headers: void parseHeader(org.apache.http.util.CharArrayBuffer)>($r1);

        virtualinvoke $r1.<org.apache.http.util.CharArrayBuffer: void clear()>();

        goto label1;

     label2:
        return;
    }

    protected boolean setupStreamAndSendStatus()
    {
        android.webkit.PluginContentLoader $r0;
        android.webkit.PluginData $r1;
        java.io.InputStream $r2;
        long $l0;
        android.webkit.LoadListener $r3;
        int $i1;

        $r0 := @this: android.webkit.PluginContentLoader;

        $r1 = $r0.<android.webkit.PluginContentLoader: android.webkit.PluginData mData>;

        $r2 = virtualinvoke $r1.<android.webkit.PluginData: java.io.InputStream getInputStream()>();

        $r0.<android.webkit.StreamLoader: java.io.InputStream mDataStream> = $r2;

        $r1 = $r0.<android.webkit.PluginContentLoader: android.webkit.PluginData mData>;

        $l0 = virtualinvoke $r1.<android.webkit.PluginData: long getContentLength()>();

        $r0.<android.webkit.StreamLoader: long mContentLength> = $l0;

        $r3 = $r0.<android.webkit.StreamLoader: android.webkit.LoadListener mHandler>;

        $r1 = $r0.<android.webkit.PluginContentLoader: android.webkit.PluginData mData>;

        $i1 = virtualinvoke $r1.<android.webkit.PluginData: int getStatusCode()>();

        virtualinvoke $r3.<android.webkit.LoadListener: void status(int,int,int,java.lang.String)>(1, 1, $i1, "OK");

        return 1;
    }
}
